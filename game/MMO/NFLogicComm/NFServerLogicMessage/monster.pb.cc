// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monster.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "monster.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* monstermonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  monstermonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_monstermonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_monstermonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* monsterdisplayskillDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  monsterdisplayskillDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* monsterdisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  monsterdisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_monsterdisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_monsterdisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* monstervalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  monstervalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_monstervalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_monstervalue_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_monster_2eproto() {
  protobuf_AddDesc_monster_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "monster.proto");
  GOOGLE_CHECK(file != NULL);
  monstermonster_descriptor_ = file->message_type(0);
  static const int monstermonster_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, monstername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, functiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, functionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, damageaddtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, monsterlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, droplimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, displayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, valuetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, aiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, hpsectionnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, showguild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, breedprob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, breedmonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, breedmonlive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, itemcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, isbornactionon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, droptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, isbelongtoplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, dropdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, dropboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, ifmultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, droprool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, lastbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, btnrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, btnid_),
  };
  monstermonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      monstermonster_descriptor_,
      monstermonster::default_instance_,
      monstermonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(monstermonster));
  Sheet_monstermonster_descriptor_ = file->message_type(1);
  static const int Sheet_monstermonster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstermonster, monstermonster_list_),
  };
  Sheet_monstermonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_monstermonster_descriptor_,
      Sheet_monstermonster::default_instance_,
      Sheet_monstermonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstermonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstermonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_monstermonster));
  monsterdisplayskillDesc_descriptor_ = file->message_type(2);
  static const int monsterdisplayskillDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplayskillDesc, id_),
  };
  monsterdisplayskillDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      monsterdisplayskillDesc_descriptor_,
      monsterdisplayskillDesc::default_instance_,
      monsterdisplayskillDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplayskillDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplayskillDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(monsterdisplayskillDesc));
  monsterdisplay_descriptor_ = file->message_type(3);
  static const int monsterdisplay_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, displayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, modeloffsetsx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, modeloffsetsy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, modelscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, modelradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, pathradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, collisionradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, rspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, skill_),
  };
  monsterdisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      monsterdisplay_descriptor_,
      monsterdisplay::default_instance_,
      monsterdisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(monsterdisplay));
  Sheet_monsterdisplay_descriptor_ = file->message_type(4);
  static const int Sheet_monsterdisplay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monsterdisplay, monsterdisplay_list_),
  };
  Sheet_monsterdisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_monsterdisplay_descriptor_,
      Sheet_monsterdisplay::default_instance_,
      Sheet_monsterdisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monsterdisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monsterdisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_monsterdisplay));
  monstervalue_descriptor_ = file->message_type(5);
  static const int monstervalue_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, monsterlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, defense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, pierce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, divineatt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, divinedef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, hitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, dodgerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, critrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, toughrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, killrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, parryrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, critdam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, critredu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, killdam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, killredu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, attdam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, attredu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, fightingcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, isfightpress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, exp_),
  };
  monstervalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      monstervalue_descriptor_,
      monstervalue::default_instance_,
      monstervalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(monstervalue));
  Sheet_monstervalue_descriptor_ = file->message_type(6);
  static const int Sheet_monstervalue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstervalue, monstervalue_list_),
  };
  Sheet_monstervalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_monstervalue_descriptor_,
      Sheet_monstervalue::default_instance_,
      Sheet_monstervalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstervalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstervalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_monstervalue));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_monster_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    monstermonster_descriptor_, &monstermonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_monstermonster_descriptor_, &Sheet_monstermonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    monsterdisplayskillDesc_descriptor_, &monsterdisplayskillDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    monsterdisplay_descriptor_, &monsterdisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_monsterdisplay_descriptor_, &Sheet_monsterdisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    monstervalue_descriptor_, &monstervalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_monstervalue_descriptor_, &Sheet_monstervalue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_monster_2eproto() {
  delete monstermonster::default_instance_;
  delete monstermonster_reflection_;
  delete Sheet_monstermonster::default_instance_;
  delete Sheet_monstermonster_reflection_;
  delete monsterdisplayskillDesc::default_instance_;
  delete monsterdisplayskillDesc_reflection_;
  delete monsterdisplay::default_instance_;
  delete monsterdisplay_reflection_;
  delete Sheet_monsterdisplay::default_instance_;
  delete Sheet_monsterdisplay_reflection_;
  delete monstervalue::default_instance_;
  delete monstervalue_reflection_;
  delete Sheet_monstervalue::default_instance_;
  delete Sheet_monstervalue_reflection_;
}

void protobuf_AddDesc_monster_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmonster.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"\225\t\n\016monstermonster\022\037\n\tmonsterID"
    "\030\001 \001(\003B\014\302\377\024\010\346\200\252\347\211\251ID\022&\n\013monsterName\030\002 \001("
    "\tB\021\302\377\024\t\346\200\252\347\211\251\345\220\215\220\301\024<\022&\n\014functionType\030\003 \001"
    "(\005B\020\302\377\024\014\345\212\237\350\203\275\347\261\273\345\236\213\022\'\n\rfunctionValue\030\004 "
    "\001(\003B\020\302\377\024\014\345\212\237\350\203\275\345\217\202\346\225\260\022$\n\nprofession\030\005 \001("
    "\005B\020\302\377\024\014\346\200\252\347\211\251\350\201\214\344\270\232\022-\n\rdamageAddType\030\006 \001"
    "(\005B\026\302\377\024\022\344\274\244\345\256\263\345\212\240\346\210\220\347\261\273\345\236\213\022#\n\tmonsterLV\030"
    "\007 \001(\005B\020\302\377\024\014\346\200\252\347\211\251\347\255\211\347\272\247\022)\n\tdroplimit\030\010 \001"
    "(\005B\026\302\377\024\022\346\234\200\345\244\247\346\216\211\350\220\275\347\255\211\347\272\247\022(\n\tdisplayID\030"
    "\t \001(\003B\025\302\377\024\021\350\265\204\346\272\220\344\270\216\350\241\250\347\216\260ID\022#\n\tvaluetyp"
    "e\030\n \001(\003B\020\302\377\024\014\346\225\260\345\200\274\347\261\273\345\236\213\022\031\n\004aiId\030\013 \001(\003B"
    "\013\302\377\024\007AI\350\241\250ID\022,\n\014hpSectionNum\030\014 \001(\005B\026\302\377\024\022"
    "\346\200\252\347\211\251\350\241\200\346\235\241\346\256\265\346\225\260\022/\n\tshowGuild\030\r \001(\005B\034\302"
    "\377\024\030\351\234\200\350\246\201\350\256\260\345\275\225\345\205\254\344\274\232\344\274\244\350\241\200\0222\n\tbreedProb"
    "\030\016 \001(\005B\037\302\377\024\033\346\255\273\344\272\241\350\247\246\345\217\221\346\226\260\346\200\252\347\211\251\345\207\240\347\216\207\022"
    ",\n\nbreedMonID\030\017 \001(\003B\030\302\377\024\024\350\247\246\345\217\221\347\224\237\346\210\220\346\200\252"
    "\347\211\251ID\022,\n\014breedMonLive\030\020 \001(\005B\026\302\377\024\022\346\200\252\347\211\251\345"
    "\255\230\346\264\273\346\227\266\351\227\264\022&\n\010itemCost\030\021 \001(\tB\024\302\377\024\014\351\201\223\345\205"
    "\267\346\266\210\350\200\227\220\301\024<\0224\n\016isBornActionOn\030\022 \001(\005B\034\302\377\024"
    "\030\346\230\257\345\220\246\345\220\257\347\224\250\345\207\272\347\224\237\345\212\250\344\275\234\022\035\n\003exp\030\023 \001(\005B\020"
    "\302\377\024\014\347\273\217\351\252\214\344\272\247\345\207\272\022\"\n\010dropType\030\024 \001(\005B\020\302\377\024\014"
    "\346\216\211\350\220\275\347\261\273\345\236\213\022<\n\020isBelongToPlayer\030\025 \001(\005B\""
    "\302\377\024\036\346\200\252\347\211\251\346\216\211\350\220\275\345\275\222\345\261\236\346\230\257\345\220\246\346\230\276\347\244\272\022%\n\013dr"
    "opDefault\030\026 \001(\003B\020\302\377\024\014\351\273\230\350\256\244\346\216\211\350\220\275\022%\n\tdro"
    "pBoxID\030\027 \001(\003B\022\302\377\024\016\346\216\211\350\220\275\345\256\235\347\256\261ID\022*\n\nifMu"
    "ltiple\030\030 \001(\005B\026\302\377\024\022\345\215\225\344\273\275\345\244\232\344\273\275\346\216\211\350\220\275\022#\n\010"
    "dropRool\030\031 \001(\003B\021\302\377\024\rRool\347\202\271\346\216\211\350\220\275\022,\n\007las"
    "tBox\030\032 \001(\003B\033\302\377\024\027\346\234\200\345\220\216\344\270\200\345\210\200box\345\245\226\345\212\261id\022"
    "\"\n\010btnRange\030\033 \001(\005B\020\302\377\024\014\346\214\211\351\222\256\350\214\203\345\233\264\022\033\n\005b"
    "tnId\030\034 \001(\003B\014\302\377\024\010\346\214\211\351\222\256ID\"T\n\024Sheet_monste"
    "rmonster\022<\n\023monstermonster_List\030\001 \003(\0132\030."
    "proto_ff.monstermonsterB\005\210\301\024\320\017\"-\n\027monste"
    "rdisplayskillDesc\022\022\n\002id\030\001 \001(\003B\006\302\377\024\002id\"\257\003"
    "\n\016monsterdisplay\022(\n\tdisplayID\030\001 \001(\003B\025\302\377\024"
    "\021\350\265\204\346\272\220\344\270\216\350\241\250\347\216\260ID\0220\n\rmodelOffsetsX\030\002 \001("
    "\005B\031\302\377\024\025UI\346\250\241\345\236\213X\345\235\220\346\240\207\345\201\217\347\247\273\0220\n\rmodelOff"
    "setsY\030\003 \001(\005B\031\302\377\024\025UI\346\250\241\345\236\213Y\345\235\220\346\240\207\345\201\217\347\247\273\022-"
    "\n\nmodelScale\030\004 \001(\005B\031\302\377\024\025UI\346\250\241\345\236\213\347\274\251\346\224\276\346\257"
    "\224\344\276\213 \022+\n\013modelRadius\030\005 \001(\005B\026\302\377\024\022\346\200\252\347\211\251\346\250"
    "\241\345\236\213\345\215\212\345\276\204\022$\n\npathRadius\030\006 \001(\005B\020\302\377\024\014\345\257\273\350"
    "\267\257\345\215\212\345\276\204\022)\n\017collisionRadius\030\007 \001(\005B\020\302\377\024\014\345"
    "\257\273\350\267\257\345\215\212\345\276\204\022 \n\006rSpeed\030\010 \001(\005B\020\302\377\024\014\350\267\221\346\255\245\351"
    "\200\237\345\272\246\022@\n\005skill\030\t \003(\0132!.proto_ff.monsterd"
    "isplayskillDescB\016\302\377\024\006\346\212\200\350\203\275\210\301\024\007\"T\n\024Sheet"
    "_monsterdisplay\022<\n\023monsterdisplay_List\030\001"
    " \003(\0132\030.proto_ff.monsterdisplayB\005\210\301\024\254\002\"\312\006"
    "\n\014monstervalue\022\030\n\002ID\030\001 \001(\003B\014\302\377\024\010\346\225\260\345\200\274ID"
    "\022\036\n\004type\030\002 \001(\005B\020\302\377\024\014\346\200\252\347\211\251\347\261\273\345\236\213\022#\n\tmons"
    "terLV\030\003 \001(\005B\020\302\377\024\014\346\200\252\347\211\251\347\255\211\347\272\247\022\031\n\005maxHp\030\004"
    " \001(\003B\n\302\377\024\006\347\224\237\345\221\275\022\032\n\006attack\030\005 \001(\003B\n\302\377\024\006\346\224"
    "\273\345\207\273\022\033\n\007defense\030\006 \001(\003B\n\302\377\024\006\351\230\262\345\276\241\022\032\n\006pie"
    "rce\030\007 \001(\003B\n\302\377\024\006\347\251\277\351\200\217\022#\n\tdivineAtt\030\010 \001(\003"
    "B\020\302\377\024\014\347\245\236\345\234\243\346\224\273\345\207\273\022#\n\tdivineDef\030\t \001(\003B\020\302"
    "\377\024\014\347\245\236\345\234\243\351\230\262\345\276\241\022!\n\007hitRate\030\n \001(\003B\020\302\377\024\014\345\221"
    "\275\344\270\255\345\207\240\347\216\207\022#\n\tdodgeRate\030\013 \001(\003B\020\302\377\024\014\351\227\252\351\201"
    "\277\345\207\240\347\216\207\022\"\n\010critRate\030\014 \001(\003B\020\302\377\024\014\346\232\264\345\207\273\345\207\240"
    "\347\216\207\022#\n\ttoughRate\030\r \001(\003B\020\302\377\024\014\346\232\264\345\207\273\346\212\265\346\212\227"
    "\022\"\n\010killRate\030\016 \001(\003B\020\302\377\024\014\345\277\205\346\235\200\345\207\240\347\216\207\022#\n\t"
    "parryRate\030\017 \001(\003B\020\302\377\024\014\345\277\205\346\235\200\346\212\265\346\212\227\022!\n\007cri"
    "tDam\030\020 \001(\003B\020\302\377\024\014\346\232\264\345\207\273\344\274\244\345\256\263\022\"\n\010critRedu"
    "\030\021 \001(\003B\020\302\377\024\014\346\232\264\345\207\273\345\207\217\345\205\215\022!\n\007killDam\030\022 \001("
    "\003B\020\302\377\024\014\345\277\205\346\235\200\344\274\244\345\256\263\022\"\n\010killRedu\030\023 \001(\003B\020\302"
    "\377\024\014\345\277\205\346\235\200\345\207\217\345\205\215\022 \n\006attDam\030\024 \001(\003B\020\302\377\024\014\344\274\244"
    "\345\256\263\346\217\220\345\215\207\022!\n\007attRedu\030\025 \001(\003B\020\302\377\024\014\344\274\244\345\256\263\345\207"
    "\217\345\205\215\022\'\n\020fightingCapacity\030\026 \001(\003B\r\302\377\024\t\346\210\230\346"
    "\226\227\345\212\233\022,\n\014isFightPress\030\027 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\346"
    "\210\230\345\212\233\345\216\213\345\210\266\022\035\n\003exp\030\030 \001(\003B\020\302\377\024\014\347\273\217\351\252\214\344\272\247\345"
    "\207\272\"O\n\022Sheet_monstervalue\0229\n\021monstervalue"
    "_List\030\001 \003(\0132\026.proto_ff.monstervalueB\006\210\301\024"
    "\370\317\002", 2803);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "monster.proto", &protobuf_RegisterTypes);
  monstermonster::default_instance_ = new monstermonster();
  Sheet_monstermonster::default_instance_ = new Sheet_monstermonster();
  monsterdisplayskillDesc::default_instance_ = new monsterdisplayskillDesc();
  monsterdisplay::default_instance_ = new monsterdisplay();
  Sheet_monsterdisplay::default_instance_ = new Sheet_monsterdisplay();
  monstervalue::default_instance_ = new monstervalue();
  Sheet_monstervalue::default_instance_ = new Sheet_monstervalue();
  monstermonster::default_instance_->InitAsDefaultInstance();
  Sheet_monstermonster::default_instance_->InitAsDefaultInstance();
  monsterdisplayskillDesc::default_instance_->InitAsDefaultInstance();
  monsterdisplay::default_instance_->InitAsDefaultInstance();
  Sheet_monsterdisplay::default_instance_->InitAsDefaultInstance();
  monstervalue::default_instance_->InitAsDefaultInstance();
  Sheet_monstervalue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_monster_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_monster_2eproto {
  StaticDescriptorInitializer_monster_2eproto() {
    protobuf_AddDesc_monster_2eproto();
  }
} static_descriptor_initializer_monster_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int monstermonster::kMonsterIDFieldNumber;
const int monstermonster::kMonsterNameFieldNumber;
const int monstermonster::kFunctionTypeFieldNumber;
const int monstermonster::kFunctionValueFieldNumber;
const int monstermonster::kProfessionFieldNumber;
const int monstermonster::kDamageAddTypeFieldNumber;
const int monstermonster::kMonsterLVFieldNumber;
const int monstermonster::kDroplimitFieldNumber;
const int monstermonster::kDisplayIDFieldNumber;
const int monstermonster::kValuetypeFieldNumber;
const int monstermonster::kAiIdFieldNumber;
const int monstermonster::kHpSectionNumFieldNumber;
const int monstermonster::kShowGuildFieldNumber;
const int monstermonster::kBreedProbFieldNumber;
const int monstermonster::kBreedMonIDFieldNumber;
const int monstermonster::kBreedMonLiveFieldNumber;
const int monstermonster::kItemCostFieldNumber;
const int monstermonster::kIsBornActionOnFieldNumber;
const int monstermonster::kExpFieldNumber;
const int monstermonster::kDropTypeFieldNumber;
const int monstermonster::kIsBelongToPlayerFieldNumber;
const int monstermonster::kDropDefaultFieldNumber;
const int monstermonster::kDropBoxIDFieldNumber;
const int monstermonster::kIfMultipleFieldNumber;
const int monstermonster::kDropRoolFieldNumber;
const int monstermonster::kLastBoxFieldNumber;
const int monstermonster::kBtnRangeFieldNumber;
const int monstermonster::kBtnIdFieldNumber;
#endif  // !_MSC_VER

monstermonster::monstermonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void monstermonster::InitAsDefaultInstance() {
}

monstermonster::monstermonster(const monstermonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void monstermonster::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = GOOGLE_LONGLONG(0);
  monstername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  functiontype_ = 0;
  functionvalue_ = GOOGLE_LONGLONG(0);
  profession_ = 0;
  damageaddtype_ = 0;
  monsterlv_ = 0;
  droplimit_ = 0;
  displayid_ = GOOGLE_LONGLONG(0);
  valuetype_ = GOOGLE_LONGLONG(0);
  aiid_ = GOOGLE_LONGLONG(0);
  hpsectionnum_ = 0;
  showguild_ = 0;
  breedprob_ = 0;
  breedmonid_ = GOOGLE_LONGLONG(0);
  breedmonlive_ = 0;
  itemcost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isbornactionon_ = 0;
  exp_ = 0;
  droptype_ = 0;
  isbelongtoplayer_ = 0;
  dropdefault_ = GOOGLE_LONGLONG(0);
  dropboxid_ = GOOGLE_LONGLONG(0);
  ifmultiple_ = 0;
  droprool_ = GOOGLE_LONGLONG(0);
  lastbox_ = GOOGLE_LONGLONG(0);
  btnrange_ = 0;
  btnid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

monstermonster::~monstermonster() {
  SharedDtor();
}

void monstermonster::SharedDtor() {
  if (monstername_ != &::google::protobuf::internal::kEmptyString) {
    delete monstername_;
  }
  if (itemcost_ != &::google::protobuf::internal::kEmptyString) {
    delete itemcost_;
  }
  if (this != default_instance_) {
  }
}

void monstermonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* monstermonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return monstermonster_descriptor_;
}

const monstermonster& monstermonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

monstermonster* monstermonster::default_instance_ = NULL;

monstermonster* monstermonster::New() const {
  return new monstermonster;
}

void monstermonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = GOOGLE_LONGLONG(0);
    if (has_monstername()) {
      if (monstername_ != &::google::protobuf::internal::kEmptyString) {
        monstername_->clear();
      }
    }
    functiontype_ = 0;
    functionvalue_ = GOOGLE_LONGLONG(0);
    profession_ = 0;
    damageaddtype_ = 0;
    monsterlv_ = 0;
    droplimit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    displayid_ = GOOGLE_LONGLONG(0);
    valuetype_ = GOOGLE_LONGLONG(0);
    aiid_ = GOOGLE_LONGLONG(0);
    hpsectionnum_ = 0;
    showguild_ = 0;
    breedprob_ = 0;
    breedmonid_ = GOOGLE_LONGLONG(0);
    breedmonlive_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_itemcost()) {
      if (itemcost_ != &::google::protobuf::internal::kEmptyString) {
        itemcost_->clear();
      }
    }
    isbornactionon_ = 0;
    exp_ = 0;
    droptype_ = 0;
    isbelongtoplayer_ = 0;
    dropdefault_ = GOOGLE_LONGLONG(0);
    dropboxid_ = GOOGLE_LONGLONG(0);
    ifmultiple_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    droprool_ = GOOGLE_LONGLONG(0);
    lastbox_ = GOOGLE_LONGLONG(0);
    btnrange_ = 0;
    btnid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool monstermonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 monsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monsterName;
        break;
      }

      // optional string monsterName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monstername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->monstername().data(), this->monstername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_functionType;
        break;
      }

      // optional int32 functionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functiontype_)));
          set_has_functiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_functionValue;
        break;
      }

      // optional int64 functionValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &functionvalue_)));
          set_has_functionvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_profession;
        break;
      }

      // optional int32 profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_damageAddType;
        break;
      }

      // optional int32 damageAddType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damageAddType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damageaddtype_)));
          set_has_damageaddtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_monsterLV;
        break;
      }

      // optional int32 monsterLV = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterlv_)));
          set_has_monsterlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_droplimit;
        break;
      }

      // optional int32 droplimit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_droplimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &droplimit_)));
          set_has_droplimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_displayID;
        break;
      }

      // optional int64 displayID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_displayID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &displayid_)));
          set_has_displayid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_valuetype;
        break;
      }

      // optional int64 valuetype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valuetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &valuetype_)));
          set_has_valuetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_aiId;
        break;
      }

      // optional int64 aiId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aiId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &aiid_)));
          set_has_aiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_hpSectionNum;
        break;
      }

      // optional int32 hpSectionNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpSectionNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpsectionnum_)));
          set_has_hpsectionnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_showGuild;
        break;
      }

      // optional int32 showGuild = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showGuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showguild_)));
          set_has_showguild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_breedProb;
        break;
      }

      // optional int32 breedProb = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breedProb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breedprob_)));
          set_has_breedprob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_breedMonID;
        break;
      }

      // optional int64 breedMonID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breedMonID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &breedmonid_)));
          set_has_breedmonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_breedMonLive;
        break;
      }

      // optional int32 breedMonLive = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breedMonLive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breedmonlive_)));
          set_has_breedmonlive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_itemCost;
        break;
      }

      // optional string itemCost = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemcost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemcost().data(), this->itemcost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_isBornActionOn;
        break;
      }

      // optional int32 isBornActionOn = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBornActionOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbornactionon_)));
          set_has_isbornactionon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_exp;
        break;
      }

      // optional int32 exp = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_dropType;
        break;
      }

      // optional int32 dropType = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &droptype_)));
          set_has_droptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_isBelongToPlayer;
        break;
      }

      // optional int32 isBelongToPlayer = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBelongToPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbelongtoplayer_)));
          set_has_isbelongtoplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_dropDefault;
        break;
      }

      // optional int64 dropDefault = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dropdefault_)));
          set_has_dropdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_dropBoxID;
        break;
      }

      // optional int64 dropBoxID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropBoxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dropboxid_)));
          set_has_dropboxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_ifMultiple;
        break;
      }

      // optional int32 ifMultiple = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ifMultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifmultiple_)));
          set_has_ifmultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_dropRool;
        break;
      }

      // optional int64 dropRool = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropRool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &droprool_)));
          set_has_droprool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_lastBox;
        break;
      }

      // optional int64 lastBox = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastbox_)));
          set_has_lastbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_btnRange;
        break;
      }

      // optional int32 btnRange = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btnRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btnrange_)));
          set_has_btnrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_btnId;
        break;
      }

      // optional int64 btnId = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btnId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &btnid_)));
          set_has_btnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void monstermonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 monsterID = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->monsterid(), output);
  }

  // optional string monsterName = 2;
  if (has_monstername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monstername().data(), this->monstername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->monstername(), output);
  }

  // optional int32 functionType = 3;
  if (has_functiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->functiontype(), output);
  }

  // optional int64 functionValue = 4;
  if (has_functionvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->functionvalue(), output);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->profession(), output);
  }

  // optional int32 damageAddType = 6;
  if (has_damageaddtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->damageaddtype(), output);
  }

  // optional int32 monsterLV = 7;
  if (has_monsterlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->monsterlv(), output);
  }

  // optional int32 droplimit = 8;
  if (has_droplimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->droplimit(), output);
  }

  // optional int64 displayID = 9;
  if (has_displayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->displayid(), output);
  }

  // optional int64 valuetype = 10;
  if (has_valuetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->valuetype(), output);
  }

  // optional int64 aiId = 11;
  if (has_aiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->aiid(), output);
  }

  // optional int32 hpSectionNum = 12;
  if (has_hpsectionnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->hpsectionnum(), output);
  }

  // optional int32 showGuild = 13;
  if (has_showguild()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->showguild(), output);
  }

  // optional int32 breedProb = 14;
  if (has_breedprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->breedprob(), output);
  }

  // optional int64 breedMonID = 15;
  if (has_breedmonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->breedmonid(), output);
  }

  // optional int32 breedMonLive = 16;
  if (has_breedmonlive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->breedmonlive(), output);
  }

  // optional string itemCost = 17;
  if (has_itemcost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemcost().data(), this->itemcost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->itemcost(), output);
  }

  // optional int32 isBornActionOn = 18;
  if (has_isbornactionon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->isbornactionon(), output);
  }

  // optional int32 exp = 19;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->exp(), output);
  }

  // optional int32 dropType = 20;
  if (has_droptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->droptype(), output);
  }

  // optional int32 isBelongToPlayer = 21;
  if (has_isbelongtoplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->isbelongtoplayer(), output);
  }

  // optional int64 dropDefault = 22;
  if (has_dropdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->dropdefault(), output);
  }

  // optional int64 dropBoxID = 23;
  if (has_dropboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->dropboxid(), output);
  }

  // optional int32 ifMultiple = 24;
  if (has_ifmultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->ifmultiple(), output);
  }

  // optional int64 dropRool = 25;
  if (has_droprool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->droprool(), output);
  }

  // optional int64 lastBox = 26;
  if (has_lastbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->lastbox(), output);
  }

  // optional int32 btnRange = 27;
  if (has_btnrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->btnrange(), output);
  }

  // optional int64 btnId = 28;
  if (has_btnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->btnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* monstermonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 monsterID = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->monsterid(), target);
  }

  // optional string monsterName = 2;
  if (has_monstername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monstername().data(), this->monstername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->monstername(), target);
  }

  // optional int32 functionType = 3;
  if (has_functiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->functiontype(), target);
  }

  // optional int64 functionValue = 4;
  if (has_functionvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->functionvalue(), target);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->profession(), target);
  }

  // optional int32 damageAddType = 6;
  if (has_damageaddtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->damageaddtype(), target);
  }

  // optional int32 monsterLV = 7;
  if (has_monsterlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->monsterlv(), target);
  }

  // optional int32 droplimit = 8;
  if (has_droplimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->droplimit(), target);
  }

  // optional int64 displayID = 9;
  if (has_displayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->displayid(), target);
  }

  // optional int64 valuetype = 10;
  if (has_valuetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->valuetype(), target);
  }

  // optional int64 aiId = 11;
  if (has_aiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->aiid(), target);
  }

  // optional int32 hpSectionNum = 12;
  if (has_hpsectionnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->hpsectionnum(), target);
  }

  // optional int32 showGuild = 13;
  if (has_showguild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->showguild(), target);
  }

  // optional int32 breedProb = 14;
  if (has_breedprob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->breedprob(), target);
  }

  // optional int64 breedMonID = 15;
  if (has_breedmonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->breedmonid(), target);
  }

  // optional int32 breedMonLive = 16;
  if (has_breedmonlive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->breedmonlive(), target);
  }

  // optional string itemCost = 17;
  if (has_itemcost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemcost().data(), this->itemcost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->itemcost(), target);
  }

  // optional int32 isBornActionOn = 18;
  if (has_isbornactionon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->isbornactionon(), target);
  }

  // optional int32 exp = 19;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->exp(), target);
  }

  // optional int32 dropType = 20;
  if (has_droptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->droptype(), target);
  }

  // optional int32 isBelongToPlayer = 21;
  if (has_isbelongtoplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->isbelongtoplayer(), target);
  }

  // optional int64 dropDefault = 22;
  if (has_dropdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->dropdefault(), target);
  }

  // optional int64 dropBoxID = 23;
  if (has_dropboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->dropboxid(), target);
  }

  // optional int32 ifMultiple = 24;
  if (has_ifmultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->ifmultiple(), target);
  }

  // optional int64 dropRool = 25;
  if (has_droprool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->droprool(), target);
  }

  // optional int64 lastBox = 26;
  if (has_lastbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->lastbox(), target);
  }

  // optional int32 btnRange = 27;
  if (has_btnrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->btnrange(), target);
  }

  // optional int64 btnId = 28;
  if (has_btnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->btnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int monstermonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 monsterID = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->monsterid());
    }

    // optional string monsterName = 2;
    if (has_monstername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monstername());
    }

    // optional int32 functionType = 3;
    if (has_functiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functiontype());
    }

    // optional int64 functionValue = 4;
    if (has_functionvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->functionvalue());
    }

    // optional int32 profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 damageAddType = 6;
    if (has_damageaddtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damageaddtype());
    }

    // optional int32 monsterLV = 7;
    if (has_monsterlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterlv());
    }

    // optional int32 droplimit = 8;
    if (has_droplimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->droplimit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 displayID = 9;
    if (has_displayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->displayid());
    }

    // optional int64 valuetype = 10;
    if (has_valuetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->valuetype());
    }

    // optional int64 aiId = 11;
    if (has_aiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->aiid());
    }

    // optional int32 hpSectionNum = 12;
    if (has_hpsectionnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpsectionnum());
    }

    // optional int32 showGuild = 13;
    if (has_showguild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showguild());
    }

    // optional int32 breedProb = 14;
    if (has_breedprob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breedprob());
    }

    // optional int64 breedMonID = 15;
    if (has_breedmonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->breedmonid());
    }

    // optional int32 breedMonLive = 16;
    if (has_breedmonlive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breedmonlive());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string itemCost = 17;
    if (has_itemcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemcost());
    }

    // optional int32 isBornActionOn = 18;
    if (has_isbornactionon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbornactionon());
    }

    // optional int32 exp = 19;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 dropType = 20;
    if (has_droptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->droptype());
    }

    // optional int32 isBelongToPlayer = 21;
    if (has_isbelongtoplayer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbelongtoplayer());
    }

    // optional int64 dropDefault = 22;
    if (has_dropdefault()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dropdefault());
    }

    // optional int64 dropBoxID = 23;
    if (has_dropboxid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dropboxid());
    }

    // optional int32 ifMultiple = 24;
    if (has_ifmultiple()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifmultiple());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 dropRool = 25;
    if (has_droprool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->droprool());
    }

    // optional int64 lastBox = 26;
    if (has_lastbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastbox());
    }

    // optional int32 btnRange = 27;
    if (has_btnrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btnrange());
    }

    // optional int64 btnId = 28;
    if (has_btnid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->btnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void monstermonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const monstermonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const monstermonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void monstermonster::MergeFrom(const monstermonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_monstername()) {
      set_monstername(from.monstername());
    }
    if (from.has_functiontype()) {
      set_functiontype(from.functiontype());
    }
    if (from.has_functionvalue()) {
      set_functionvalue(from.functionvalue());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_damageaddtype()) {
      set_damageaddtype(from.damageaddtype());
    }
    if (from.has_monsterlv()) {
      set_monsterlv(from.monsterlv());
    }
    if (from.has_droplimit()) {
      set_droplimit(from.droplimit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_displayid()) {
      set_displayid(from.displayid());
    }
    if (from.has_valuetype()) {
      set_valuetype(from.valuetype());
    }
    if (from.has_aiid()) {
      set_aiid(from.aiid());
    }
    if (from.has_hpsectionnum()) {
      set_hpsectionnum(from.hpsectionnum());
    }
    if (from.has_showguild()) {
      set_showguild(from.showguild());
    }
    if (from.has_breedprob()) {
      set_breedprob(from.breedprob());
    }
    if (from.has_breedmonid()) {
      set_breedmonid(from.breedmonid());
    }
    if (from.has_breedmonlive()) {
      set_breedmonlive(from.breedmonlive());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_itemcost()) {
      set_itemcost(from.itemcost());
    }
    if (from.has_isbornactionon()) {
      set_isbornactionon(from.isbornactionon());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_droptype()) {
      set_droptype(from.droptype());
    }
    if (from.has_isbelongtoplayer()) {
      set_isbelongtoplayer(from.isbelongtoplayer());
    }
    if (from.has_dropdefault()) {
      set_dropdefault(from.dropdefault());
    }
    if (from.has_dropboxid()) {
      set_dropboxid(from.dropboxid());
    }
    if (from.has_ifmultiple()) {
      set_ifmultiple(from.ifmultiple());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_droprool()) {
      set_droprool(from.droprool());
    }
    if (from.has_lastbox()) {
      set_lastbox(from.lastbox());
    }
    if (from.has_btnrange()) {
      set_btnrange(from.btnrange());
    }
    if (from.has_btnid()) {
      set_btnid(from.btnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void monstermonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void monstermonster::CopyFrom(const monstermonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool monstermonster::IsInitialized() const {

  return true;
}

void monstermonster::Swap(monstermonster* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(monstername_, other->monstername_);
    std::swap(functiontype_, other->functiontype_);
    std::swap(functionvalue_, other->functionvalue_);
    std::swap(profession_, other->profession_);
    std::swap(damageaddtype_, other->damageaddtype_);
    std::swap(monsterlv_, other->monsterlv_);
    std::swap(droplimit_, other->droplimit_);
    std::swap(displayid_, other->displayid_);
    std::swap(valuetype_, other->valuetype_);
    std::swap(aiid_, other->aiid_);
    std::swap(hpsectionnum_, other->hpsectionnum_);
    std::swap(showguild_, other->showguild_);
    std::swap(breedprob_, other->breedprob_);
    std::swap(breedmonid_, other->breedmonid_);
    std::swap(breedmonlive_, other->breedmonlive_);
    std::swap(itemcost_, other->itemcost_);
    std::swap(isbornactionon_, other->isbornactionon_);
    std::swap(exp_, other->exp_);
    std::swap(droptype_, other->droptype_);
    std::swap(isbelongtoplayer_, other->isbelongtoplayer_);
    std::swap(dropdefault_, other->dropdefault_);
    std::swap(dropboxid_, other->dropboxid_);
    std::swap(ifmultiple_, other->ifmultiple_);
    std::swap(droprool_, other->droprool_);
    std::swap(lastbox_, other->lastbox_);
    std::swap(btnrange_, other->btnrange_);
    std::swap(btnid_, other->btnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata monstermonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = monstermonster_descriptor_;
  metadata.reflection = monstermonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_monstermonster::kMonstermonsterListFieldNumber;
#endif  // !_MSC_VER

Sheet_monstermonster::Sheet_monstermonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_monstermonster::InitAsDefaultInstance() {
}

Sheet_monstermonster::Sheet_monstermonster(const Sheet_monstermonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_monstermonster::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_monstermonster::~Sheet_monstermonster() {
  SharedDtor();
}

void Sheet_monstermonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_monstermonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_monstermonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_monstermonster_descriptor_;
}

const Sheet_monstermonster& Sheet_monstermonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

Sheet_monstermonster* Sheet_monstermonster::default_instance_ = NULL;

Sheet_monstermonster* Sheet_monstermonster::New() const {
  return new Sheet_monstermonster;
}

void Sheet_monstermonster::Clear() {
  monstermonster_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_monstermonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.monstermonster monstermonster_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monstermonster_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monstermonster_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monstermonster_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_monstermonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.monstermonster monstermonster_List = 1;
  for (int i = 0; i < this->monstermonster_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monstermonster_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_monstermonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.monstermonster monstermonster_List = 1;
  for (int i = 0; i < this->monstermonster_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monstermonster_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_monstermonster::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.monstermonster monstermonster_List = 1;
  total_size += 1 * this->monstermonster_list_size();
  for (int i = 0; i < this->monstermonster_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monstermonster_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_monstermonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_monstermonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_monstermonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_monstermonster::MergeFrom(const Sheet_monstermonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  monstermonster_list_.MergeFrom(from.monstermonster_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_monstermonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_monstermonster::CopyFrom(const Sheet_monstermonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_monstermonster::IsInitialized() const {

  return true;
}

void Sheet_monstermonster::Swap(Sheet_monstermonster* other) {
  if (other != this) {
    monstermonster_list_.Swap(&other->monstermonster_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_monstermonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_monstermonster_descriptor_;
  metadata.reflection = Sheet_monstermonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int monsterdisplayskillDesc::kIdFieldNumber;
#endif  // !_MSC_VER

monsterdisplayskillDesc::monsterdisplayskillDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void monsterdisplayskillDesc::InitAsDefaultInstance() {
}

monsterdisplayskillDesc::monsterdisplayskillDesc(const monsterdisplayskillDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void monsterdisplayskillDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

monsterdisplayskillDesc::~monsterdisplayskillDesc() {
  SharedDtor();
}

void monsterdisplayskillDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void monsterdisplayskillDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* monsterdisplayskillDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return monsterdisplayskillDesc_descriptor_;
}

const monsterdisplayskillDesc& monsterdisplayskillDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

monsterdisplayskillDesc* monsterdisplayskillDesc::default_instance_ = NULL;

monsterdisplayskillDesc* monsterdisplayskillDesc::New() const {
  return new monsterdisplayskillDesc;
}

void monsterdisplayskillDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool monsterdisplayskillDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void monsterdisplayskillDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* monsterdisplayskillDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int monsterdisplayskillDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void monsterdisplayskillDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const monsterdisplayskillDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const monsterdisplayskillDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void monsterdisplayskillDesc::MergeFrom(const monsterdisplayskillDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void monsterdisplayskillDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void monsterdisplayskillDesc::CopyFrom(const monsterdisplayskillDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool monsterdisplayskillDesc::IsInitialized() const {

  return true;
}

void monsterdisplayskillDesc::Swap(monsterdisplayskillDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata monsterdisplayskillDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = monsterdisplayskillDesc_descriptor_;
  metadata.reflection = monsterdisplayskillDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int monsterdisplay::kDisplayIDFieldNumber;
const int monsterdisplay::kModelOffsetsXFieldNumber;
const int monsterdisplay::kModelOffsetsYFieldNumber;
const int monsterdisplay::kModelScaleFieldNumber;
const int monsterdisplay::kModelRadiusFieldNumber;
const int monsterdisplay::kPathRadiusFieldNumber;
const int monsterdisplay::kCollisionRadiusFieldNumber;
const int monsterdisplay::kRSpeedFieldNumber;
const int monsterdisplay::kSkillFieldNumber;
#endif  // !_MSC_VER

monsterdisplay::monsterdisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void monsterdisplay::InitAsDefaultInstance() {
}

monsterdisplay::monsterdisplay(const monsterdisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void monsterdisplay::SharedCtor() {
  _cached_size_ = 0;
  displayid_ = GOOGLE_LONGLONG(0);
  modeloffsetsx_ = 0;
  modeloffsetsy_ = 0;
  modelscale_ = 0;
  modelradius_ = 0;
  pathradius_ = 0;
  collisionradius_ = 0;
  rspeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

monsterdisplay::~monsterdisplay() {
  SharedDtor();
}

void monsterdisplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void monsterdisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* monsterdisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return monsterdisplay_descriptor_;
}

const monsterdisplay& monsterdisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

monsterdisplay* monsterdisplay::default_instance_ = NULL;

monsterdisplay* monsterdisplay::New() const {
  return new monsterdisplay;
}

void monsterdisplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    displayid_ = GOOGLE_LONGLONG(0);
    modeloffsetsx_ = 0;
    modeloffsetsy_ = 0;
    modelscale_ = 0;
    modelradius_ = 0;
    pathradius_ = 0;
    collisionradius_ = 0;
    rspeed_ = 0;
  }
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool monsterdisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 displayID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &displayid_)));
          set_has_displayid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modelOffsetsX;
        break;
      }

      // optional int32 modelOffsetsX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modelOffsetsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeloffsetsx_)));
          set_has_modeloffsetsx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_modelOffsetsY;
        break;
      }

      // optional int32 modelOffsetsY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modelOffsetsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeloffsetsy_)));
          set_has_modeloffsetsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_modelScale;
        break;
      }

      // optional int32 modelScale = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modelScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelscale_)));
          set_has_modelscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_modelRadius;
        break;
      }

      // optional int32 modelRadius = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modelRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelradius_)));
          set_has_modelradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pathRadius;
        break;
      }

      // optional int32 pathRadius = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pathRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pathradius_)));
          set_has_pathradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_collisionRadius;
        break;
      }

      // optional int32 collisionRadius = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collisionRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collisionradius_)));
          set_has_collisionradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rSpeed;
        break;
      }

      // optional int32 rSpeed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rspeed_)));
          set_has_rspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill;
        break;
      }

      // repeated .proto_ff.monsterdisplayskillDesc skill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void monsterdisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 displayID = 1;
  if (has_displayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->displayid(), output);
  }

  // optional int32 modelOffsetsX = 2;
  if (has_modeloffsetsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->modeloffsetsx(), output);
  }

  // optional int32 modelOffsetsY = 3;
  if (has_modeloffsetsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->modeloffsetsy(), output);
  }

  // optional int32 modelScale = 4;
  if (has_modelscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->modelscale(), output);
  }

  // optional int32 modelRadius = 5;
  if (has_modelradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->modelradius(), output);
  }

  // optional int32 pathRadius = 6;
  if (has_pathradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pathradius(), output);
  }

  // optional int32 collisionRadius = 7;
  if (has_collisionradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->collisionradius(), output);
  }

  // optional int32 rSpeed = 8;
  if (has_rspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rspeed(), output);
  }

  // repeated .proto_ff.monsterdisplayskillDesc skill = 9;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* monsterdisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 displayID = 1;
  if (has_displayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->displayid(), target);
  }

  // optional int32 modelOffsetsX = 2;
  if (has_modeloffsetsx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->modeloffsetsx(), target);
  }

  // optional int32 modelOffsetsY = 3;
  if (has_modeloffsetsy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->modeloffsetsy(), target);
  }

  // optional int32 modelScale = 4;
  if (has_modelscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->modelscale(), target);
  }

  // optional int32 modelRadius = 5;
  if (has_modelradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->modelradius(), target);
  }

  // optional int32 pathRadius = 6;
  if (has_pathradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pathradius(), target);
  }

  // optional int32 collisionRadius = 7;
  if (has_collisionradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->collisionradius(), target);
  }

  // optional int32 rSpeed = 8;
  if (has_rspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rspeed(), target);
  }

  // repeated .proto_ff.monsterdisplayskillDesc skill = 9;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int monsterdisplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 displayID = 1;
    if (has_displayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->displayid());
    }

    // optional int32 modelOffsetsX = 2;
    if (has_modeloffsetsx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeloffsetsx());
    }

    // optional int32 modelOffsetsY = 3;
    if (has_modeloffsetsy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeloffsetsy());
    }

    // optional int32 modelScale = 4;
    if (has_modelscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelscale());
    }

    // optional int32 modelRadius = 5;
    if (has_modelradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelradius());
    }

    // optional int32 pathRadius = 6;
    if (has_pathradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pathradius());
    }

    // optional int32 collisionRadius = 7;
    if (has_collisionradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collisionradius());
    }

    // optional int32 rSpeed = 8;
    if (has_rspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rspeed());
    }

  }
  // repeated .proto_ff.monsterdisplayskillDesc skill = 9;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void monsterdisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const monsterdisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const monsterdisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void monsterdisplay::MergeFrom(const monsterdisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_displayid()) {
      set_displayid(from.displayid());
    }
    if (from.has_modeloffsetsx()) {
      set_modeloffsetsx(from.modeloffsetsx());
    }
    if (from.has_modeloffsetsy()) {
      set_modeloffsetsy(from.modeloffsetsy());
    }
    if (from.has_modelscale()) {
      set_modelscale(from.modelscale());
    }
    if (from.has_modelradius()) {
      set_modelradius(from.modelradius());
    }
    if (from.has_pathradius()) {
      set_pathradius(from.pathradius());
    }
    if (from.has_collisionradius()) {
      set_collisionradius(from.collisionradius());
    }
    if (from.has_rspeed()) {
      set_rspeed(from.rspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void monsterdisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void monsterdisplay::CopyFrom(const monsterdisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool monsterdisplay::IsInitialized() const {

  return true;
}

void monsterdisplay::Swap(monsterdisplay* other) {
  if (other != this) {
    std::swap(displayid_, other->displayid_);
    std::swap(modeloffsetsx_, other->modeloffsetsx_);
    std::swap(modeloffsetsy_, other->modeloffsetsy_);
    std::swap(modelscale_, other->modelscale_);
    std::swap(modelradius_, other->modelradius_);
    std::swap(pathradius_, other->pathradius_);
    std::swap(collisionradius_, other->collisionradius_);
    std::swap(rspeed_, other->rspeed_);
    skill_.Swap(&other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata monsterdisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = monsterdisplay_descriptor_;
  metadata.reflection = monsterdisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_monsterdisplay::kMonsterdisplayListFieldNumber;
#endif  // !_MSC_VER

Sheet_monsterdisplay::Sheet_monsterdisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_monsterdisplay::InitAsDefaultInstance() {
}

Sheet_monsterdisplay::Sheet_monsterdisplay(const Sheet_monsterdisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_monsterdisplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_monsterdisplay::~Sheet_monsterdisplay() {
  SharedDtor();
}

void Sheet_monsterdisplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_monsterdisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_monsterdisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_monsterdisplay_descriptor_;
}

const Sheet_monsterdisplay& Sheet_monsterdisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

Sheet_monsterdisplay* Sheet_monsterdisplay::default_instance_ = NULL;

Sheet_monsterdisplay* Sheet_monsterdisplay::New() const {
  return new Sheet_monsterdisplay;
}

void Sheet_monsterdisplay::Clear() {
  monsterdisplay_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_monsterdisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.monsterdisplay monsterdisplay_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterdisplay_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterdisplay_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsterdisplay_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_monsterdisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.monsterdisplay monsterdisplay_List = 1;
  for (int i = 0; i < this->monsterdisplay_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsterdisplay_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_monsterdisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.monsterdisplay monsterdisplay_List = 1;
  for (int i = 0; i < this->monsterdisplay_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsterdisplay_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_monsterdisplay::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.monsterdisplay monsterdisplay_List = 1;
  total_size += 1 * this->monsterdisplay_list_size();
  for (int i = 0; i < this->monsterdisplay_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterdisplay_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_monsterdisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_monsterdisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_monsterdisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_monsterdisplay::MergeFrom(const Sheet_monsterdisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterdisplay_list_.MergeFrom(from.monsterdisplay_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_monsterdisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_monsterdisplay::CopyFrom(const Sheet_monsterdisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_monsterdisplay::IsInitialized() const {

  return true;
}

void Sheet_monsterdisplay::Swap(Sheet_monsterdisplay* other) {
  if (other != this) {
    monsterdisplay_list_.Swap(&other->monsterdisplay_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_monsterdisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_monsterdisplay_descriptor_;
  metadata.reflection = Sheet_monsterdisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int monstervalue::kIDFieldNumber;
const int monstervalue::kTypeFieldNumber;
const int monstervalue::kMonsterLVFieldNumber;
const int monstervalue::kMaxHpFieldNumber;
const int monstervalue::kAttackFieldNumber;
const int monstervalue::kDefenseFieldNumber;
const int monstervalue::kPierceFieldNumber;
const int monstervalue::kDivineAttFieldNumber;
const int monstervalue::kDivineDefFieldNumber;
const int monstervalue::kHitRateFieldNumber;
const int monstervalue::kDodgeRateFieldNumber;
const int monstervalue::kCritRateFieldNumber;
const int monstervalue::kToughRateFieldNumber;
const int monstervalue::kKillRateFieldNumber;
const int monstervalue::kParryRateFieldNumber;
const int monstervalue::kCritDamFieldNumber;
const int monstervalue::kCritReduFieldNumber;
const int monstervalue::kKillDamFieldNumber;
const int monstervalue::kKillReduFieldNumber;
const int monstervalue::kAttDamFieldNumber;
const int monstervalue::kAttReduFieldNumber;
const int monstervalue::kFightingCapacityFieldNumber;
const int monstervalue::kIsFightPressFieldNumber;
const int monstervalue::kExpFieldNumber;
#endif  // !_MSC_VER

monstervalue::monstervalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void monstervalue::InitAsDefaultInstance() {
}

monstervalue::monstervalue(const monstervalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void monstervalue::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  monsterlv_ = 0;
  maxhp_ = GOOGLE_LONGLONG(0);
  attack_ = GOOGLE_LONGLONG(0);
  defense_ = GOOGLE_LONGLONG(0);
  pierce_ = GOOGLE_LONGLONG(0);
  divineatt_ = GOOGLE_LONGLONG(0);
  divinedef_ = GOOGLE_LONGLONG(0);
  hitrate_ = GOOGLE_LONGLONG(0);
  dodgerate_ = GOOGLE_LONGLONG(0);
  critrate_ = GOOGLE_LONGLONG(0);
  toughrate_ = GOOGLE_LONGLONG(0);
  killrate_ = GOOGLE_LONGLONG(0);
  parryrate_ = GOOGLE_LONGLONG(0);
  critdam_ = GOOGLE_LONGLONG(0);
  critredu_ = GOOGLE_LONGLONG(0);
  killdam_ = GOOGLE_LONGLONG(0);
  killredu_ = GOOGLE_LONGLONG(0);
  attdam_ = GOOGLE_LONGLONG(0);
  attredu_ = GOOGLE_LONGLONG(0);
  fightingcapacity_ = GOOGLE_LONGLONG(0);
  isfightpress_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

monstervalue::~monstervalue() {
  SharedDtor();
}

void monstervalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void monstervalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* monstervalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return monstervalue_descriptor_;
}

const monstervalue& monstervalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

monstervalue* monstervalue::default_instance_ = NULL;

monstervalue* monstervalue::New() const {
  return new monstervalue;
}

void monstervalue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    monsterlv_ = 0;
    maxhp_ = GOOGLE_LONGLONG(0);
    attack_ = GOOGLE_LONGLONG(0);
    defense_ = GOOGLE_LONGLONG(0);
    pierce_ = GOOGLE_LONGLONG(0);
    divineatt_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    divinedef_ = GOOGLE_LONGLONG(0);
    hitrate_ = GOOGLE_LONGLONG(0);
    dodgerate_ = GOOGLE_LONGLONG(0);
    critrate_ = GOOGLE_LONGLONG(0);
    toughrate_ = GOOGLE_LONGLONG(0);
    killrate_ = GOOGLE_LONGLONG(0);
    parryrate_ = GOOGLE_LONGLONG(0);
    critdam_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    critredu_ = GOOGLE_LONGLONG(0);
    killdam_ = GOOGLE_LONGLONG(0);
    killredu_ = GOOGLE_LONGLONG(0);
    attdam_ = GOOGLE_LONGLONG(0);
    attredu_ = GOOGLE_LONGLONG(0);
    fightingcapacity_ = GOOGLE_LONGLONG(0);
    isfightpress_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool monstervalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monsterLV;
        break;
      }

      // optional int32 monsterLV = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterlv_)));
          set_has_monsterlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxHp;
        break;
      }

      // optional int64 maxHp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attack;
        break;
      }

      // optional int64 attack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_defense;
        break;
      }

      // optional int64 defense = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &defense_)));
          set_has_defense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pierce;
        break;
      }

      // optional int64 pierce = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pierce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pierce_)));
          set_has_pierce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_divineAtt;
        break;
      }

      // optional int64 divineAtt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_divineAtt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &divineatt_)));
          set_has_divineatt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_divineDef;
        break;
      }

      // optional int64 divineDef = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_divineDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &divinedef_)));
          set_has_divinedef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hitRate;
        break;
      }

      // optional int64 hitRate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hitrate_)));
          set_has_hitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_dodgeRate;
        break;
      }

      // optional int64 dodgeRate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodgeRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dodgerate_)));
          set_has_dodgerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_critRate;
        break;
      }

      // optional int64 critRate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &critrate_)));
          set_has_critrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_toughRate;
        break;
      }

      // optional int64 toughRate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toughRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &toughrate_)));
          set_has_toughrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_killRate;
        break;
      }

      // optional int64 killRate = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &killrate_)));
          set_has_killrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_parryRate;
        break;
      }

      // optional int64 parryRate = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parryRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parryrate_)));
          set_has_parryrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_critDam;
        break;
      }

      // optional int64 critDam = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critDam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &critdam_)));
          set_has_critdam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_critRedu;
        break;
      }

      // optional int64 critRedu = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critRedu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &critredu_)));
          set_has_critredu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_killDam;
        break;
      }

      // optional int64 killDam = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killDam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &killdam_)));
          set_has_killdam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_killRedu;
        break;
      }

      // optional int64 killRedu = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killRedu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &killredu_)));
          set_has_killredu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_attDam;
        break;
      }

      // optional int64 attDam = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attDam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attdam_)));
          set_has_attdam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_attRedu;
        break;
      }

      // optional int64 attRedu = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attRedu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attredu_)));
          set_has_attredu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_fightingCapacity;
        break;
      }

      // optional int64 fightingCapacity = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightingCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fightingcapacity_)));
          set_has_fightingcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_isFightPress;
        break;
      }

      // optional int32 isFightPress = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFightPress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfightpress_)));
          set_has_isfightpress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_exp;
        break;
      }

      // optional int64 exp = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void monstervalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 monsterLV = 3;
  if (has_monsterlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->monsterlv(), output);
  }

  // optional int64 maxHp = 4;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->maxhp(), output);
  }

  // optional int64 attack = 5;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->attack(), output);
  }

  // optional int64 defense = 6;
  if (has_defense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->defense(), output);
  }

  // optional int64 pierce = 7;
  if (has_pierce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->pierce(), output);
  }

  // optional int64 divineAtt = 8;
  if (has_divineatt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->divineatt(), output);
  }

  // optional int64 divineDef = 9;
  if (has_divinedef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->divinedef(), output);
  }

  // optional int64 hitRate = 10;
  if (has_hitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->hitrate(), output);
  }

  // optional int64 dodgeRate = 11;
  if (has_dodgerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->dodgerate(), output);
  }

  // optional int64 critRate = 12;
  if (has_critrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->critrate(), output);
  }

  // optional int64 toughRate = 13;
  if (has_toughrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->toughrate(), output);
  }

  // optional int64 killRate = 14;
  if (has_killrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->killrate(), output);
  }

  // optional int64 parryRate = 15;
  if (has_parryrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->parryrate(), output);
  }

  // optional int64 critDam = 16;
  if (has_critdam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->critdam(), output);
  }

  // optional int64 critRedu = 17;
  if (has_critredu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->critredu(), output);
  }

  // optional int64 killDam = 18;
  if (has_killdam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->killdam(), output);
  }

  // optional int64 killRedu = 19;
  if (has_killredu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->killredu(), output);
  }

  // optional int64 attDam = 20;
  if (has_attdam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->attdam(), output);
  }

  // optional int64 attRedu = 21;
  if (has_attredu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->attredu(), output);
  }

  // optional int64 fightingCapacity = 22;
  if (has_fightingcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->fightingcapacity(), output);
  }

  // optional int32 isFightPress = 23;
  if (has_isfightpress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->isfightpress(), output);
  }

  // optional int64 exp = 24;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* monstervalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 monsterLV = 3;
  if (has_monsterlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->monsterlv(), target);
  }

  // optional int64 maxHp = 4;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->maxhp(), target);
  }

  // optional int64 attack = 5;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->attack(), target);
  }

  // optional int64 defense = 6;
  if (has_defense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->defense(), target);
  }

  // optional int64 pierce = 7;
  if (has_pierce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->pierce(), target);
  }

  // optional int64 divineAtt = 8;
  if (has_divineatt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->divineatt(), target);
  }

  // optional int64 divineDef = 9;
  if (has_divinedef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->divinedef(), target);
  }

  // optional int64 hitRate = 10;
  if (has_hitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->hitrate(), target);
  }

  // optional int64 dodgeRate = 11;
  if (has_dodgerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->dodgerate(), target);
  }

  // optional int64 critRate = 12;
  if (has_critrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->critrate(), target);
  }

  // optional int64 toughRate = 13;
  if (has_toughrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->toughrate(), target);
  }

  // optional int64 killRate = 14;
  if (has_killrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->killrate(), target);
  }

  // optional int64 parryRate = 15;
  if (has_parryrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->parryrate(), target);
  }

  // optional int64 critDam = 16;
  if (has_critdam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->critdam(), target);
  }

  // optional int64 critRedu = 17;
  if (has_critredu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->critredu(), target);
  }

  // optional int64 killDam = 18;
  if (has_killdam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->killdam(), target);
  }

  // optional int64 killRedu = 19;
  if (has_killredu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->killredu(), target);
  }

  // optional int64 attDam = 20;
  if (has_attdam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->attdam(), target);
  }

  // optional int64 attRedu = 21;
  if (has_attredu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->attredu(), target);
  }

  // optional int64 fightingCapacity = 22;
  if (has_fightingcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->fightingcapacity(), target);
  }

  // optional int32 isFightPress = 23;
  if (has_isfightpress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->isfightpress(), target);
  }

  // optional int64 exp = 24;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int monstervalue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 monsterLV = 3;
    if (has_monsterlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterlv());
    }

    // optional int64 maxHp = 4;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxhp());
    }

    // optional int64 attack = 5;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attack());
    }

    // optional int64 defense = 6;
    if (has_defense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->defense());
    }

    // optional int64 pierce = 7;
    if (has_pierce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pierce());
    }

    // optional int64 divineAtt = 8;
    if (has_divineatt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->divineatt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 divineDef = 9;
    if (has_divinedef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->divinedef());
    }

    // optional int64 hitRate = 10;
    if (has_hitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hitrate());
    }

    // optional int64 dodgeRate = 11;
    if (has_dodgerate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dodgerate());
    }

    // optional int64 critRate = 12;
    if (has_critrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->critrate());
    }

    // optional int64 toughRate = 13;
    if (has_toughrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->toughrate());
    }

    // optional int64 killRate = 14;
    if (has_killrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->killrate());
    }

    // optional int64 parryRate = 15;
    if (has_parryrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parryrate());
    }

    // optional int64 critDam = 16;
    if (has_critdam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->critdam());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 critRedu = 17;
    if (has_critredu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->critredu());
    }

    // optional int64 killDam = 18;
    if (has_killdam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->killdam());
    }

    // optional int64 killRedu = 19;
    if (has_killredu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->killredu());
    }

    // optional int64 attDam = 20;
    if (has_attdam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attdam());
    }

    // optional int64 attRedu = 21;
    if (has_attredu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attredu());
    }

    // optional int64 fightingCapacity = 22;
    if (has_fightingcapacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fightingcapacity());
    }

    // optional int32 isFightPress = 23;
    if (has_isfightpress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfightpress());
    }

    // optional int64 exp = 24;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void monstervalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const monstervalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const monstervalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void monstervalue::MergeFrom(const monstervalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_monsterlv()) {
      set_monsterlv(from.monsterlv());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defense()) {
      set_defense(from.defense());
    }
    if (from.has_pierce()) {
      set_pierce(from.pierce());
    }
    if (from.has_divineatt()) {
      set_divineatt(from.divineatt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_divinedef()) {
      set_divinedef(from.divinedef());
    }
    if (from.has_hitrate()) {
      set_hitrate(from.hitrate());
    }
    if (from.has_dodgerate()) {
      set_dodgerate(from.dodgerate());
    }
    if (from.has_critrate()) {
      set_critrate(from.critrate());
    }
    if (from.has_toughrate()) {
      set_toughrate(from.toughrate());
    }
    if (from.has_killrate()) {
      set_killrate(from.killrate());
    }
    if (from.has_parryrate()) {
      set_parryrate(from.parryrate());
    }
    if (from.has_critdam()) {
      set_critdam(from.critdam());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_critredu()) {
      set_critredu(from.critredu());
    }
    if (from.has_killdam()) {
      set_killdam(from.killdam());
    }
    if (from.has_killredu()) {
      set_killredu(from.killredu());
    }
    if (from.has_attdam()) {
      set_attdam(from.attdam());
    }
    if (from.has_attredu()) {
      set_attredu(from.attredu());
    }
    if (from.has_fightingcapacity()) {
      set_fightingcapacity(from.fightingcapacity());
    }
    if (from.has_isfightpress()) {
      set_isfightpress(from.isfightpress());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void monstervalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void monstervalue::CopyFrom(const monstervalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool monstervalue::IsInitialized() const {

  return true;
}

void monstervalue::Swap(monstervalue* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(monsterlv_, other->monsterlv_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(attack_, other->attack_);
    std::swap(defense_, other->defense_);
    std::swap(pierce_, other->pierce_);
    std::swap(divineatt_, other->divineatt_);
    std::swap(divinedef_, other->divinedef_);
    std::swap(hitrate_, other->hitrate_);
    std::swap(dodgerate_, other->dodgerate_);
    std::swap(critrate_, other->critrate_);
    std::swap(toughrate_, other->toughrate_);
    std::swap(killrate_, other->killrate_);
    std::swap(parryrate_, other->parryrate_);
    std::swap(critdam_, other->critdam_);
    std::swap(critredu_, other->critredu_);
    std::swap(killdam_, other->killdam_);
    std::swap(killredu_, other->killredu_);
    std::swap(attdam_, other->attdam_);
    std::swap(attredu_, other->attredu_);
    std::swap(fightingcapacity_, other->fightingcapacity_);
    std::swap(isfightpress_, other->isfightpress_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata monstervalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = monstervalue_descriptor_;
  metadata.reflection = monstervalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_monstervalue::kMonstervalueListFieldNumber;
#endif  // !_MSC_VER

Sheet_monstervalue::Sheet_monstervalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_monstervalue::InitAsDefaultInstance() {
}

Sheet_monstervalue::Sheet_monstervalue(const Sheet_monstervalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_monstervalue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_monstervalue::~Sheet_monstervalue() {
  SharedDtor();
}

void Sheet_monstervalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_monstervalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_monstervalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_monstervalue_descriptor_;
}

const Sheet_monstervalue& Sheet_monstervalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

Sheet_monstervalue* Sheet_monstervalue::default_instance_ = NULL;

Sheet_monstervalue* Sheet_monstervalue::New() const {
  return new Sheet_monstervalue;
}

void Sheet_monstervalue::Clear() {
  monstervalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_monstervalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.monstervalue monstervalue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monstervalue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monstervalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monstervalue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_monstervalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.monstervalue monstervalue_List = 1;
  for (int i = 0; i < this->monstervalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monstervalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_monstervalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.monstervalue monstervalue_List = 1;
  for (int i = 0; i < this->monstervalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monstervalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_monstervalue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.monstervalue monstervalue_List = 1;
  total_size += 1 * this->monstervalue_list_size();
  for (int i = 0; i < this->monstervalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monstervalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_monstervalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_monstervalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_monstervalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_monstervalue::MergeFrom(const Sheet_monstervalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  monstervalue_list_.MergeFrom(from.monstervalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_monstervalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_monstervalue::CopyFrom(const Sheet_monstervalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_monstervalue::IsInitialized() const {

  return true;
}

void Sheet_monstervalue::Swap(Sheet_monstervalue* other) {
  if (other != this) {
    monstervalue_list_.Swap(&other->monstervalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_monstervalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_monstervalue_descriptor_;
  metadata.reflection = Sheet_monstervalue_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
