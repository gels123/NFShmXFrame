// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Title.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Title.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_TitleType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_TitleType_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_TitleType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_TitleType_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_TitleTitleAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_TitleTitleAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_TitleTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_TitleTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_TitleTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_TitleTitle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fTitle_2eproto() {
  protobuf_AddDesc_E_5fTitle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Title.proto");
  GOOGLE_CHECK(file != NULL);
  E_TitleType_descriptor_ = file->message_type(0);
  static const int E_TitleType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleType, m_id_),
  };
  E_TitleType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_TitleType_descriptor_,
      E_TitleType::default_instance_,
      E_TitleType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_TitleType));
  Sheet_TitleType_descriptor_ = file->message_type(1);
  static const int Sheet_TitleType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TitleType, e_titletype_list_),
  };
  Sheet_TitleType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_TitleType_descriptor_,
      Sheet_TitleType::default_instance_,
      Sheet_TitleType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TitleType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TitleType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_TitleType));
  E_TitleTitleAttributeDesc_descriptor_ = file->message_type(2);
  static const int E_TitleTitleAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitleAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitleAttributeDesc, m_type_),
  };
  E_TitleTitleAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_TitleTitleAttributeDesc_descriptor_,
      E_TitleTitleAttributeDesc::default_instance_,
      E_TitleTitleAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitleAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitleAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_TitleTitleAttributeDesc));
  E_TitleTitle_descriptor_ = file->message_type(3);
  static const int E_TitleTitle_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_eventvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_addtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_timetpye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_activationitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_activationnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_starup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_starber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, m_attribute_),
  };
  E_TitleTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_TitleTitle_descriptor_,
      E_TitleTitle::default_instance_,
      E_TitleTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TitleTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_TitleTitle));
  Sheet_TitleTitle_descriptor_ = file->message_type(4);
  static const int Sheet_TitleTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TitleTitle, e_titletitle_list_),
  };
  Sheet_TitleTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_TitleTitle_descriptor_,
      Sheet_TitleTitle::default_instance_,
      Sheet_TitleTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TitleTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TitleTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_TitleTitle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fTitle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_TitleType_descriptor_, &E_TitleType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_TitleType_descriptor_, &Sheet_TitleType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_TitleTitleAttributeDesc_descriptor_, &E_TitleTitleAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_TitleTitle_descriptor_, &E_TitleTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_TitleTitle_descriptor_, &Sheet_TitleTitle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fTitle_2eproto() {
  delete E_TitleType::default_instance_;
  delete E_TitleType_reflection_;
  delete Sheet_TitleType::default_instance_;
  delete Sheet_TitleType_reflection_;
  delete E_TitleTitleAttributeDesc::default_instance_;
  delete E_TitleTitleAttributeDesc_reflection_;
  delete E_TitleTitle::default_instance_;
  delete E_TitleTitle_reflection_;
  delete Sheet_TitleTitle::default_instance_;
  delete Sheet_TitleTitle_reflection_;
}

void protobuf_AddDesc_E_5fTitle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rE_Title.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\")\n\013E_TitleType\022\032\n\004m_id\030\001 \001(\005B\014\302"
    "\377\024\010\347\247\260\345\217\267id\"H\n\017Sheet_TitleType\0225\n\020E_Titl"
    "eType_List\030\001 \003(\0132\025.proto_ff.E_TitleTypeB"
    "\004\210\301\024\010\"Q\n\031E_TitleTitleAttributeDesc\022\030\n\007m_"
    "value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\032\n\006m_type\030\002 \001(\005B\n\302\377"
    "\024\006\347\261\273\345\236\213\"\327\005\n\014E_TitleTitle\022\032\n\004m_id\030\001 \001(\003B"
    "\014\302\377\024\010\347\247\260\345\217\267ID\022$\n\006m_name\030\002 \001(\tB\024\302\377\024\014\347\247\260\345\217"
    "\267\345\220\215\347\247\260\220\301\024@\022 \n\006m_type\030\003 \001(\005B\020\302\377\024\014\347\247\260\345\217\267\347"
    "\261\273\345\236\213\022)\n\tm_subType\030\004 \001(\005B\026\302\377\024\022\350\216\267\345\217\226\346\235\241\344"
    "\273\266\347\261\273\345\236\213\022-\n\014m_eventValue\030\005 \001(\tB\027\302\377\024\017\350\216\267\345"
    "\217\226\346\235\241\344\273\266\345\200\274\220\301\024@\022/\n\nm_describe\030\006 \001(\tB\033\302\377\024"
    "\022\350\216\267\345\217\226\346\235\241\344\273\266\346\217\217\350\277\260\220\301\024\200\002\022#\n\tm_addTime\030\007 "
    "\001(\005B\020\302\377\024\014\350\207\252\345\212\250\345\273\266\346\234\237\022$\n\nm_timeTpye\030\010 \001("
    "\005B\020\302\377\024\014\346\227\266\351\227\264\347\261\273\345\236\213\022$\n\nm_lifeTime\030\t \001(\005B"
    "\020\302\377\024\014\347\224\237\346\225\210\346\227\266\351\227\264\022,\n\020m_activationItem\030\n "
    "\001(\003B\022\302\377\024\016\346\277\200\346\264\273\351\201\223\345\205\267ID\022/\n\017m_activationN"
    "um\030\013 \001(\005B\026\302\377\024\022\346\277\200\346\264\273\351\201\223\345\205\267\346\225\260\351\207\217\022$\n\010m_st"
    "arId\030\014 \001(\003B\022\302\377\024\016\345\215\207\346\230\237\351\201\223\345\205\267id\022.\n\tm_star"
    "Num\030\r \001(\tB\033\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024\200\002\022("
    "\n\010m_starUp\030\016 \001(\005B\026\302\377\024\022\345\215\207\346\230\237\347\255\211\347\272\247\344\270\212\351\231\220"
    "\022>\n\tm_starBer\030\017 \001(\005B+\302\377\024\'\346\257\217\346\254\241\345\215\207\346\230\237\345\261\236"
    "\346\200\247\345\242\236\345\212\240\347\232\204\344\270\207\345\210\206\346\257\224\345\200\274\022H\n\013m_attribute\030"
    "\020 \003(\0132#.proto_ff.E_TitleTitleAttributeDe"
    "scB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\006\"L\n\020Sheet_TitleTitle\0228"
    "\n\021E_TitleTitle_List\030\001 \003(\0132\026.proto_ff.E_T"
    "itleTitleB\005\210\301\024\200\001", 1056);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Title.proto", &protobuf_RegisterTypes);
  E_TitleType::default_instance_ = new E_TitleType();
  Sheet_TitleType::default_instance_ = new Sheet_TitleType();
  E_TitleTitleAttributeDesc::default_instance_ = new E_TitleTitleAttributeDesc();
  E_TitleTitle::default_instance_ = new E_TitleTitle();
  Sheet_TitleTitle::default_instance_ = new Sheet_TitleTitle();
  E_TitleType::default_instance_->InitAsDefaultInstance();
  Sheet_TitleType::default_instance_->InitAsDefaultInstance();
  E_TitleTitleAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_TitleTitle::default_instance_->InitAsDefaultInstance();
  Sheet_TitleTitle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fTitle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fTitle_2eproto {
  StaticDescriptorInitializer_E_5fTitle_2eproto() {
    protobuf_AddDesc_E_5fTitle_2eproto();
  }
} static_descriptor_initializer_E_5fTitle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_TitleType::kMIdFieldNumber;
#endif  // !_MSC_VER

E_TitleType::E_TitleType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_TitleType::InitAsDefaultInstance() {
}

E_TitleType::E_TitleType(const E_TitleType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_TitleType::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_TitleType::~E_TitleType() {
  SharedDtor();
}

void E_TitleType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_TitleType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_TitleType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_TitleType_descriptor_;
}

const E_TitleType& E_TitleType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fTitle_2eproto();
  return *default_instance_;
}

E_TitleType* E_TitleType::default_instance_ = NULL;

E_TitleType* E_TitleType::New() const {
  return new E_TitleType;
}

void E_TitleType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_TitleType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_TitleType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_TitleType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_TitleType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_TitleType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_TitleType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_TitleType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_TitleType::MergeFrom(const E_TitleType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_TitleType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_TitleType::CopyFrom(const E_TitleType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_TitleType::IsInitialized() const {

  return true;
}

void E_TitleType::Swap(E_TitleType* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_TitleType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_TitleType_descriptor_;
  metadata.reflection = E_TitleType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_TitleType::kETitleTypeListFieldNumber;
#endif  // !_MSC_VER

Sheet_TitleType::Sheet_TitleType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_TitleType::InitAsDefaultInstance() {
}

Sheet_TitleType::Sheet_TitleType(const Sheet_TitleType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_TitleType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_TitleType::~Sheet_TitleType() {
  SharedDtor();
}

void Sheet_TitleType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_TitleType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_TitleType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_TitleType_descriptor_;
}

const Sheet_TitleType& Sheet_TitleType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fTitle_2eproto();
  return *default_instance_;
}

Sheet_TitleType* Sheet_TitleType::default_instance_ = NULL;

Sheet_TitleType* Sheet_TitleType::New() const {
  return new Sheet_TitleType;
}

void Sheet_TitleType::Clear() {
  e_titletype_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_TitleType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_TitleType E_TitleType_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_TitleType_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_titletype_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_TitleType_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_TitleType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_TitleType E_TitleType_List = 1;
  for (int i = 0; i < this->e_titletype_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_titletype_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_TitleType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_TitleType E_TitleType_List = 1;
  for (int i = 0; i < this->e_titletype_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_titletype_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_TitleType::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_TitleType E_TitleType_List = 1;
  total_size += 1 * this->e_titletype_list_size();
  for (int i = 0; i < this->e_titletype_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_titletype_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_TitleType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_TitleType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_TitleType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_TitleType::MergeFrom(const Sheet_TitleType& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_titletype_list_.MergeFrom(from.e_titletype_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_TitleType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_TitleType::CopyFrom(const Sheet_TitleType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_TitleType::IsInitialized() const {

  return true;
}

void Sheet_TitleType::Swap(Sheet_TitleType* other) {
  if (other != this) {
    e_titletype_list_.Swap(&other->e_titletype_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_TitleType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_TitleType_descriptor_;
  metadata.reflection = Sheet_TitleType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_TitleTitleAttributeDesc::kMValueFieldNumber;
const int E_TitleTitleAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_TitleTitleAttributeDesc::E_TitleTitleAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_TitleTitleAttributeDesc::InitAsDefaultInstance() {
}

E_TitleTitleAttributeDesc::E_TitleTitleAttributeDesc(const E_TitleTitleAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_TitleTitleAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_TitleTitleAttributeDesc::~E_TitleTitleAttributeDesc() {
  SharedDtor();
}

void E_TitleTitleAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_TitleTitleAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_TitleTitleAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_TitleTitleAttributeDesc_descriptor_;
}

const E_TitleTitleAttributeDesc& E_TitleTitleAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fTitle_2eproto();
  return *default_instance_;
}

E_TitleTitleAttributeDesc* E_TitleTitleAttributeDesc::default_instance_ = NULL;

E_TitleTitleAttributeDesc* E_TitleTitleAttributeDesc::New() const {
  return new E_TitleTitleAttributeDesc;
}

void E_TitleTitleAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_TitleTitleAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_TitleTitleAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_TitleTitleAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_TitleTitleAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_TitleTitleAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_TitleTitleAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_TitleTitleAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_TitleTitleAttributeDesc::MergeFrom(const E_TitleTitleAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_TitleTitleAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_TitleTitleAttributeDesc::CopyFrom(const E_TitleTitleAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_TitleTitleAttributeDesc::IsInitialized() const {

  return true;
}

void E_TitleTitleAttributeDesc::Swap(E_TitleTitleAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_TitleTitleAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_TitleTitleAttributeDesc_descriptor_;
  metadata.reflection = E_TitleTitleAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_TitleTitle::kMIdFieldNumber;
const int E_TitleTitle::kMNameFieldNumber;
const int E_TitleTitle::kMTypeFieldNumber;
const int E_TitleTitle::kMSubTypeFieldNumber;
const int E_TitleTitle::kMEventValueFieldNumber;
const int E_TitleTitle::kMDescribeFieldNumber;
const int E_TitleTitle::kMAddTimeFieldNumber;
const int E_TitleTitle::kMTimeTpyeFieldNumber;
const int E_TitleTitle::kMLifeTimeFieldNumber;
const int E_TitleTitle::kMActivationItemFieldNumber;
const int E_TitleTitle::kMActivationNumFieldNumber;
const int E_TitleTitle::kMStarIdFieldNumber;
const int E_TitleTitle::kMStarNumFieldNumber;
const int E_TitleTitle::kMStarUpFieldNumber;
const int E_TitleTitle::kMStarBerFieldNumber;
const int E_TitleTitle::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_TitleTitle::E_TitleTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_TitleTitle::InitAsDefaultInstance() {
}

E_TitleTitle::E_TitleTitle(const E_TitleTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_TitleTitle::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_type_ = 0;
  m_subtype_ = 0;
  m_eventvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_addtime_ = 0;
  m_timetpye_ = 0;
  m_lifetime_ = 0;
  m_activationitem_ = GOOGLE_LONGLONG(0);
  m_activationnum_ = 0;
  m_starid_ = GOOGLE_LONGLONG(0);
  m_starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starup_ = 0;
  m_starber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_TitleTitle::~E_TitleTitle() {
  SharedDtor();
}

void E_TitleTitle::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_eventvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete m_eventvalue_;
  }
  if (m_describe_ != &::google::protobuf::internal::kEmptyString) {
    delete m_describe_;
  }
  if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starnum_;
  }
  if (this != default_instance_) {
  }
}

void E_TitleTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_TitleTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_TitleTitle_descriptor_;
}

const E_TitleTitle& E_TitleTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fTitle_2eproto();
  return *default_instance_;
}

E_TitleTitle* E_TitleTitle::default_instance_ = NULL;

E_TitleTitle* E_TitleTitle::New() const {
  return new E_TitleTitle;
}

void E_TitleTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_type_ = 0;
    m_subtype_ = 0;
    if (has_m_eventvalue()) {
      if (m_eventvalue_ != &::google::protobuf::internal::kEmptyString) {
        m_eventvalue_->clear();
      }
    }
    if (has_m_describe()) {
      if (m_describe_ != &::google::protobuf::internal::kEmptyString) {
        m_describe_->clear();
      }
    }
    m_addtime_ = 0;
    m_timetpye_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_lifetime_ = 0;
    m_activationitem_ = GOOGLE_LONGLONG(0);
    m_activationnum_ = 0;
    m_starid_ = GOOGLE_LONGLONG(0);
    if (has_m_starnum()) {
      if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
        m_starnum_->clear();
      }
    }
    m_starup_ = 0;
    m_starber_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_TitleTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_subType;
        break;
      }

      // optional int32 m_subType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_subType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_subtype_)));
          set_has_m_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_eventValue;
        break;
      }

      // optional string m_eventValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_eventValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_eventvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_eventvalue().data(), this->m_eventvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_describe;
        break;
      }

      // optional string m_describe = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_describe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_describe().data(), this->m_describe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_addTime;
        break;
      }

      // optional int32 m_addTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_addTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_addtime_)));
          set_has_m_addtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_timeTpye;
        break;
      }

      // optional int32 m_timeTpye = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_timeTpye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_timetpye_)));
          set_has_m_timetpye();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_lifeTime;
        break;
      }

      // optional int32 m_lifeTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lifeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lifetime_)));
          set_has_m_lifetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_activationItem;
        break;
      }

      // optional int64 m_activationItem = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activationItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_activationitem_)));
          set_has_m_activationitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_activationNum;
        break;
      }

      // optional int32 m_activationNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activationNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activationnum_)));
          set_has_m_activationnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_starId;
        break;
      }

      // optional int64 m_starId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_starid_)));
          set_has_m_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_starNum;
        break;
      }

      // optional string m_starNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_starnum().data(), this->m_starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_starUp;
        break;
      }

      // optional int32 m_starUp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starup_)));
          set_has_m_starup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_starBer;
        break;
      }

      // optional int32 m_starBer = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starBer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starber_)));
          set_has_m_starber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_TitleTitleAttributeDesc m_attribute = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_TitleTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_subType = 4;
  if (has_m_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_subtype(), output);
  }

  // optional string m_eventValue = 5;
  if (has_m_eventvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_eventvalue().data(), this->m_eventvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_eventvalue(), output);
  }

  // optional string m_describe = 6;
  if (has_m_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_describe().data(), this->m_describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_describe(), output);
  }

  // optional int32 m_addTime = 7;
  if (has_m_addtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_addtime(), output);
  }

  // optional int32 m_timeTpye = 8;
  if (has_m_timetpye()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_timetpye(), output);
  }

  // optional int32 m_lifeTime = 9;
  if (has_m_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_lifetime(), output);
  }

  // optional int64 m_activationItem = 10;
  if (has_m_activationitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->m_activationitem(), output);
  }

  // optional int32 m_activationNum = 11;
  if (has_m_activationnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_activationnum(), output);
  }

  // optional int64 m_starId = 12;
  if (has_m_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->m_starid(), output);
  }

  // optional string m_starNum = 13;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->m_starnum(), output);
  }

  // optional int32 m_starUp = 14;
  if (has_m_starup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_starup(), output);
  }

  // optional int32 m_starBer = 15;
  if (has_m_starber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_starber(), output);
  }

  // repeated .proto_ff.E_TitleTitleAttributeDesc m_attribute = 16;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_TitleTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_subType = 4;
  if (has_m_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_subtype(), target);
  }

  // optional string m_eventValue = 5;
  if (has_m_eventvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_eventvalue().data(), this->m_eventvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_eventvalue(), target);
  }

  // optional string m_describe = 6;
  if (has_m_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_describe().data(), this->m_describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_describe(), target);
  }

  // optional int32 m_addTime = 7;
  if (has_m_addtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_addtime(), target);
  }

  // optional int32 m_timeTpye = 8;
  if (has_m_timetpye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_timetpye(), target);
  }

  // optional int32 m_lifeTime = 9;
  if (has_m_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_lifetime(), target);
  }

  // optional int64 m_activationItem = 10;
  if (has_m_activationitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->m_activationitem(), target);
  }

  // optional int32 m_activationNum = 11;
  if (has_m_activationnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_activationnum(), target);
  }

  // optional int64 m_starId = 12;
  if (has_m_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->m_starid(), target);
  }

  // optional string m_starNum = 13;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->m_starnum(), target);
  }

  // optional int32 m_starUp = 14;
  if (has_m_starup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_starup(), target);
  }

  // optional int32 m_starBer = 15;
  if (has_m_starber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_starber(), target);
  }

  // repeated .proto_ff.E_TitleTitleAttributeDesc m_attribute = 16;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_TitleTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_subType = 4;
    if (has_m_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_subtype());
    }

    // optional string m_eventValue = 5;
    if (has_m_eventvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_eventvalue());
    }

    // optional string m_describe = 6;
    if (has_m_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_describe());
    }

    // optional int32 m_addTime = 7;
    if (has_m_addtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_addtime());
    }

    // optional int32 m_timeTpye = 8;
    if (has_m_timetpye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_timetpye());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_lifeTime = 9;
    if (has_m_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lifetime());
    }

    // optional int64 m_activationItem = 10;
    if (has_m_activationitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_activationitem());
    }

    // optional int32 m_activationNum = 11;
    if (has_m_activationnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activationnum());
    }

    // optional int64 m_starId = 12;
    if (has_m_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_starid());
    }

    // optional string m_starNum = 13;
    if (has_m_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_starnum());
    }

    // optional int32 m_starUp = 14;
    if (has_m_starup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starup());
    }

    // optional int32 m_starBer = 15;
    if (has_m_starber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starber());
    }

  }
  // repeated .proto_ff.E_TitleTitleAttributeDesc m_attribute = 16;
  total_size += 2 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_TitleTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_TitleTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_TitleTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_TitleTitle::MergeFrom(const E_TitleTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_subtype()) {
      set_m_subtype(from.m_subtype());
    }
    if (from.has_m_eventvalue()) {
      set_m_eventvalue(from.m_eventvalue());
    }
    if (from.has_m_describe()) {
      set_m_describe(from.m_describe());
    }
    if (from.has_m_addtime()) {
      set_m_addtime(from.m_addtime());
    }
    if (from.has_m_timetpye()) {
      set_m_timetpye(from.m_timetpye());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_lifetime()) {
      set_m_lifetime(from.m_lifetime());
    }
    if (from.has_m_activationitem()) {
      set_m_activationitem(from.m_activationitem());
    }
    if (from.has_m_activationnum()) {
      set_m_activationnum(from.m_activationnum());
    }
    if (from.has_m_starid()) {
      set_m_starid(from.m_starid());
    }
    if (from.has_m_starnum()) {
      set_m_starnum(from.m_starnum());
    }
    if (from.has_m_starup()) {
      set_m_starup(from.m_starup());
    }
    if (from.has_m_starber()) {
      set_m_starber(from.m_starber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_TitleTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_TitleTitle::CopyFrom(const E_TitleTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_TitleTitle::IsInitialized() const {

  return true;
}

void E_TitleTitle::Swap(E_TitleTitle* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_subtype_, other->m_subtype_);
    std::swap(m_eventvalue_, other->m_eventvalue_);
    std::swap(m_describe_, other->m_describe_);
    std::swap(m_addtime_, other->m_addtime_);
    std::swap(m_timetpye_, other->m_timetpye_);
    std::swap(m_lifetime_, other->m_lifetime_);
    std::swap(m_activationitem_, other->m_activationitem_);
    std::swap(m_activationnum_, other->m_activationnum_);
    std::swap(m_starid_, other->m_starid_);
    std::swap(m_starnum_, other->m_starnum_);
    std::swap(m_starup_, other->m_starup_);
    std::swap(m_starber_, other->m_starber_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_TitleTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_TitleTitle_descriptor_;
  metadata.reflection = E_TitleTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_TitleTitle::kETitleTitleListFieldNumber;
#endif  // !_MSC_VER

Sheet_TitleTitle::Sheet_TitleTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_TitleTitle::InitAsDefaultInstance() {
}

Sheet_TitleTitle::Sheet_TitleTitle(const Sheet_TitleTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_TitleTitle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_TitleTitle::~Sheet_TitleTitle() {
  SharedDtor();
}

void Sheet_TitleTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_TitleTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_TitleTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_TitleTitle_descriptor_;
}

const Sheet_TitleTitle& Sheet_TitleTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fTitle_2eproto();
  return *default_instance_;
}

Sheet_TitleTitle* Sheet_TitleTitle::default_instance_ = NULL;

Sheet_TitleTitle* Sheet_TitleTitle::New() const {
  return new Sheet_TitleTitle;
}

void Sheet_TitleTitle::Clear() {
  e_titletitle_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_TitleTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_TitleTitle E_TitleTitle_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_TitleTitle_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_titletitle_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_TitleTitle_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_TitleTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_TitleTitle E_TitleTitle_List = 1;
  for (int i = 0; i < this->e_titletitle_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_titletitle_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_TitleTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_TitleTitle E_TitleTitle_List = 1;
  for (int i = 0; i < this->e_titletitle_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_titletitle_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_TitleTitle::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_TitleTitle E_TitleTitle_List = 1;
  total_size += 1 * this->e_titletitle_list_size();
  for (int i = 0; i < this->e_titletitle_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_titletitle_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_TitleTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_TitleTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_TitleTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_TitleTitle::MergeFrom(const Sheet_TitleTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_titletitle_list_.MergeFrom(from.e_titletitle_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_TitleTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_TitleTitle::CopyFrom(const Sheet_TitleTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_TitleTitle::IsInitialized() const {

  return true;
}

void Sheet_TitleTitle::Swap(Sheet_TitleTitle* other) {
  if (other != this) {
    e_titletitle_list_.Swap(&other->e_titletitle_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_TitleTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_TitleTitle_descriptor_;
  metadata.reflection = Sheet_TitleTitle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
