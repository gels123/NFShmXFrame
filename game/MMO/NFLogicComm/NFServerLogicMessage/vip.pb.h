// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vip.proto

#ifndef PROTOBUF_vip_2eproto__INCLUDED
#define PROTOBUF_vip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_vip_2eproto();
void protobuf_AssignDesc_vip_2eproto();
void protobuf_ShutdownFile_vip_2eproto();

class vipvip;
class Sheet_vipvip;
class vipprivilege;
class Sheet_vipprivilege;

// ===================================================================

class vipvip : public ::google::protobuf::Message {
 public:
  vipvip();
  virtual ~vipvip();

  vipvip(const vipvip& from);

  inline vipvip& operator=(const vipvip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const vipvip& default_instance();

  void Swap(vipvip* other);

  // implements Message ----------------------------------------------

  vipvip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vipvip& from);
  void MergeFrom(const vipvip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 privilege_group = 4;
  inline bool has_privilege_group() const;
  inline void clear_privilege_group();
  static const int kPrivilegeGroupFieldNumber = 4;
  inline ::google::protobuf::int32 privilege_group() const;
  inline void set_privilege_group(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.vipvip)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_privilege_group();
  inline void clear_has_privilege_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 privilege_group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_vip_2eproto();
  friend void protobuf_AssignDesc_vip_2eproto();
  friend void protobuf_ShutdownFile_vip_2eproto();

  void InitAsDefaultInstance();
  static vipvip* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_vipvip : public ::google::protobuf::Message {
 public:
  Sheet_vipvip();
  virtual ~Sheet_vipvip();

  Sheet_vipvip(const Sheet_vipvip& from);

  inline Sheet_vipvip& operator=(const Sheet_vipvip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_vipvip& default_instance();

  void Swap(Sheet_vipvip* other);

  // implements Message ----------------------------------------------

  Sheet_vipvip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_vipvip& from);
  void MergeFrom(const Sheet_vipvip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.vipvip vipvip_List = 1;
  inline int vipvip_list_size() const;
  inline void clear_vipvip_list();
  static const int kVipvipListFieldNumber = 1;
  inline const ::proto_ff::vipvip& vipvip_list(int index) const;
  inline ::proto_ff::vipvip* mutable_vipvip_list(int index);
  inline ::proto_ff::vipvip* add_vipvip_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::vipvip >&
      vipvip_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::vipvip >*
      mutable_vipvip_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_vipvip)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::vipvip > vipvip_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_vip_2eproto();
  friend void protobuf_AssignDesc_vip_2eproto();
  friend void protobuf_ShutdownFile_vip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_vipvip* default_instance_;
};
// -------------------------------------------------------------------

class vipprivilege : public ::google::protobuf::Message {
 public:
  vipprivilege();
  virtual ~vipprivilege();

  vipprivilege(const vipprivilege& from);

  inline vipprivilege& operator=(const vipprivilege& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const vipprivilege& default_instance();

  void Swap(vipprivilege* other);

  // implements Message ----------------------------------------------

  vipprivilege* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vipprivilege& from);
  void MergeFrom(const vipprivilege& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 group = 2;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 2;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 arg = 4;
  inline bool has_arg() const;
  inline void clear_arg();
  static const int kArgFieldNumber = 4;
  inline ::google::protobuf::int32 arg() const;
  inline void set_arg(::google::protobuf::int32 value);

  // optional string args = 5;
  inline bool has_args() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 5;
  inline const ::std::string& args() const;
  inline void set_args(const ::std::string& value);
  inline void set_args(const char* value);
  inline void set_args(const char* value, size_t size);
  inline ::std::string* mutable_args();
  inline ::std::string* release_args();
  inline void set_allocated_args(::std::string* args);

  // @@protoc_insertion_point(class_scope:proto_ff.vipprivilege)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_arg();
  inline void clear_has_arg();
  inline void set_has_args();
  inline void clear_has_args();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 arg_;
  ::std::string* args_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_vip_2eproto();
  friend void protobuf_AssignDesc_vip_2eproto();
  friend void protobuf_ShutdownFile_vip_2eproto();

  void InitAsDefaultInstance();
  static vipprivilege* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_vipprivilege : public ::google::protobuf::Message {
 public:
  Sheet_vipprivilege();
  virtual ~Sheet_vipprivilege();

  Sheet_vipprivilege(const Sheet_vipprivilege& from);

  inline Sheet_vipprivilege& operator=(const Sheet_vipprivilege& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_vipprivilege& default_instance();

  void Swap(Sheet_vipprivilege* other);

  // implements Message ----------------------------------------------

  Sheet_vipprivilege* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_vipprivilege& from);
  void MergeFrom(const Sheet_vipprivilege& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.vipprivilege vipprivilege_List = 1;
  inline int vipprivilege_list_size() const;
  inline void clear_vipprivilege_list();
  static const int kVipprivilegeListFieldNumber = 1;
  inline const ::proto_ff::vipprivilege& vipprivilege_list(int index) const;
  inline ::proto_ff::vipprivilege* mutable_vipprivilege_list(int index);
  inline ::proto_ff::vipprivilege* add_vipprivilege_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::vipprivilege >&
      vipprivilege_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::vipprivilege >*
      mutable_vipprivilege_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_vipprivilege)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::vipprivilege > vipprivilege_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_vip_2eproto();
  friend void protobuf_AssignDesc_vip_2eproto();
  friend void protobuf_ShutdownFile_vip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_vipprivilege* default_instance_;
};
// ===================================================================


// ===================================================================

// vipvip

// optional int32 id = 1;
inline bool vipvip::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vipvip::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vipvip::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vipvip::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 vipvip::id() const {
  return id_;
}
inline void vipvip::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 level = 2;
inline bool vipvip::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void vipvip::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void vipvip::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void vipvip::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 vipvip::level() const {
  return level_;
}
inline void vipvip::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 exp = 3;
inline bool vipvip::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void vipvip::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void vipvip::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void vipvip::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 vipvip::exp() const {
  return exp_;
}
inline void vipvip::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 privilege_group = 4;
inline bool vipvip::has_privilege_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void vipvip::set_has_privilege_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void vipvip::clear_has_privilege_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void vipvip::clear_privilege_group() {
  privilege_group_ = 0;
  clear_has_privilege_group();
}
inline ::google::protobuf::int32 vipvip::privilege_group() const {
  return privilege_group_;
}
inline void vipvip::set_privilege_group(::google::protobuf::int32 value) {
  set_has_privilege_group();
  privilege_group_ = value;
}

// -------------------------------------------------------------------

// Sheet_vipvip

// repeated .proto_ff.vipvip vipvip_List = 1;
inline int Sheet_vipvip::vipvip_list_size() const {
  return vipvip_list_.size();
}
inline void Sheet_vipvip::clear_vipvip_list() {
  vipvip_list_.Clear();
}
inline const ::proto_ff::vipvip& Sheet_vipvip::vipvip_list(int index) const {
  return vipvip_list_.Get(index);
}
inline ::proto_ff::vipvip* Sheet_vipvip::mutable_vipvip_list(int index) {
  return vipvip_list_.Mutable(index);
}
inline ::proto_ff::vipvip* Sheet_vipvip::add_vipvip_list() {
  return vipvip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::vipvip >&
Sheet_vipvip::vipvip_list() const {
  return vipvip_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::vipvip >*
Sheet_vipvip::mutable_vipvip_list() {
  return &vipvip_list_;
}

// -------------------------------------------------------------------

// vipprivilege

// optional int32 id = 1;
inline bool vipprivilege::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vipprivilege::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vipprivilege::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vipprivilege::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 vipprivilege::id() const {
  return id_;
}
inline void vipprivilege::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 group = 2;
inline bool vipprivilege::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void vipprivilege::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void vipprivilege::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void vipprivilege::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 vipprivilege::group() const {
  return group_;
}
inline void vipprivilege::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional int32 type = 3;
inline bool vipprivilege::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void vipprivilege::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void vipprivilege::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void vipprivilege::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 vipprivilege::type() const {
  return type_;
}
inline void vipprivilege::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 arg = 4;
inline bool vipprivilege::has_arg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void vipprivilege::set_has_arg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void vipprivilege::clear_has_arg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void vipprivilege::clear_arg() {
  arg_ = 0;
  clear_has_arg();
}
inline ::google::protobuf::int32 vipprivilege::arg() const {
  return arg_;
}
inline void vipprivilege::set_arg(::google::protobuf::int32 value) {
  set_has_arg();
  arg_ = value;
}

// optional string args = 5;
inline bool vipprivilege::has_args() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void vipprivilege::set_has_args() {
  _has_bits_[0] |= 0x00000010u;
}
inline void vipprivilege::clear_has_args() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void vipprivilege::clear_args() {
  if (args_ != &::google::protobuf::internal::kEmptyString) {
    args_->clear();
  }
  clear_has_args();
}
inline const ::std::string& vipprivilege::args() const {
  return *args_;
}
inline void vipprivilege::set_args(const ::std::string& value) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::kEmptyString) {
    args_ = new ::std::string;
  }
  args_->assign(value);
}
inline void vipprivilege::set_args(const char* value) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::kEmptyString) {
    args_ = new ::std::string;
  }
  args_->assign(value);
}
inline void vipprivilege::set_args(const char* value, size_t size) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::kEmptyString) {
    args_ = new ::std::string;
  }
  args_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* vipprivilege::mutable_args() {
  set_has_args();
  if (args_ == &::google::protobuf::internal::kEmptyString) {
    args_ = new ::std::string;
  }
  return args_;
}
inline ::std::string* vipprivilege::release_args() {
  clear_has_args();
  if (args_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = args_;
    args_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void vipprivilege::set_allocated_args(::std::string* args) {
  if (args_ != &::google::protobuf::internal::kEmptyString) {
    delete args_;
  }
  if (args) {
    set_has_args();
    args_ = args;
  } else {
    clear_has_args();
    args_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_vipprivilege

// repeated .proto_ff.vipprivilege vipprivilege_List = 1;
inline int Sheet_vipprivilege::vipprivilege_list_size() const {
  return vipprivilege_list_.size();
}
inline void Sheet_vipprivilege::clear_vipprivilege_list() {
  vipprivilege_list_.Clear();
}
inline const ::proto_ff::vipprivilege& Sheet_vipprivilege::vipprivilege_list(int index) const {
  return vipprivilege_list_.Get(index);
}
inline ::proto_ff::vipprivilege* Sheet_vipprivilege::mutable_vipprivilege_list(int index) {
  return vipprivilege_list_.Mutable(index);
}
inline ::proto_ff::vipprivilege* Sheet_vipprivilege::add_vipprivilege_list() {
  return vipprivilege_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::vipprivilege >&
Sheet_vipprivilege::vipprivilege_list() const {
  return vipprivilege_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::vipprivilege >*
Sheet_vipprivilege::mutable_vipprivilege_list() {
  return &vipprivilege_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vip_2eproto__INCLUDED
