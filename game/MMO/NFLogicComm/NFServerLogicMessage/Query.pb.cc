// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Query.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Query.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* QueryCharacterDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCharacterDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FuncFightProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FuncFightProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWCharacterDetailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWCharacterDetailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCCharacterDetailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCCharacterDetailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWCharacterMiniReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWCharacterMiniReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCCharacterMiniRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCCharacterMiniRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryCharFuncFightReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCharFuncFightReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryCharFuncFightRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCharFuncFightRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryLoadMirrorDataCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryLoadMirrorDataCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGCharacterDetailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGCharacterDetailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWCharacterDetailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWCharacterDetailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryCharacterDetailCrossServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCharacterDetailCrossServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryCharacterDetailCrossServerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCharacterDetailCrossServerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryCharacterMiniCrossServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCharacterMiniCrossServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryCharacterMiniCrossServerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCharacterMiniCrossServerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryCharFuncFightCrossReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCharFuncFightCrossReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryCharFuncFightCrossRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCharFuncFightCrossRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Query_2eproto() {
  protobuf_AddDesc_Query_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Query.proto");
  GOOGLE_CHECK(file != NULL);
  QueryCharacterDetailInfo_descriptor_ = file->message_type(0);
  static const int QueryCharacterDetailInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailInfo, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailInfo, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailInfo, unionduty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailInfo, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailInfo, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailInfo, slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailInfo, partnerid_),
  };
  QueryCharacterDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCharacterDetailInfo_descriptor_,
      QueryCharacterDetailInfo::default_instance_,
      QueryCharacterDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCharacterDetailInfo));
  FuncFightProto_descriptor_ = file->message_type(1);
  static const int FuncFightProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightProto, func_fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightProto, cid_),
  };
  FuncFightProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FuncFightProto_descriptor_,
      FuncFightProto::default_instance_,
      FuncFightProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FuncFightProto));
  CWCharacterDetailReq_descriptor_ = file->message_type(2);
  static const int CWCharacterDetailReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWCharacterDetailReq, charid_),
  };
  CWCharacterDetailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWCharacterDetailReq_descriptor_,
      CWCharacterDetailReq::default_instance_,
      CWCharacterDetailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWCharacterDetailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWCharacterDetailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWCharacterDetailReq));
  WCCharacterDetailRsp_descriptor_ = file->message_type(3);
  static const int WCCharacterDetailRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCCharacterDetailRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCCharacterDetailRsp, detail_),
  };
  WCCharacterDetailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCCharacterDetailRsp_descriptor_,
      WCCharacterDetailRsp::default_instance_,
      WCCharacterDetailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCCharacterDetailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCCharacterDetailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCCharacterDetailRsp));
  CWCharacterMiniReq_descriptor_ = file->message_type(4);
  static const int CWCharacterMiniReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWCharacterMiniReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWCharacterMiniReq, name_),
  };
  CWCharacterMiniReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWCharacterMiniReq_descriptor_,
      CWCharacterMiniReq::default_instance_,
      CWCharacterMiniReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWCharacterMiniReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWCharacterMiniReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWCharacterMiniReq));
  WCCharacterMiniRsp_descriptor_ = file->message_type(5);
  static const int WCCharacterMiniRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCCharacterMiniRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCCharacterMiniRsp, characterinfo_),
  };
  WCCharacterMiniRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCCharacterMiniRsp_descriptor_,
      WCCharacterMiniRsp::default_instance_,
      WCCharacterMiniRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCCharacterMiniRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCCharacterMiniRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCCharacterMiniRsp));
  QueryCharFuncFightReq_descriptor_ = file->message_type(6);
  static const int QueryCharFuncFightReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightReq, query_cid_),
  };
  QueryCharFuncFightReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCharFuncFightReq_descriptor_,
      QueryCharFuncFightReq::default_instance_,
      QueryCharFuncFightReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCharFuncFightReq));
  QueryCharFuncFightRsp_descriptor_ = file->message_type(7);
  static const int QueryCharFuncFightRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightRsp, info_),
  };
  QueryCharFuncFightRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCharFuncFightRsp_descriptor_,
      QueryCharFuncFightRsp::default_instance_,
      QueryCharFuncFightRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCharFuncFightRsp));
  QueryLoadMirrorDataCallBack_descriptor_ = file->message_type(8);
  static const int QueryLoadMirrorDataCallBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLoadMirrorDataCallBack, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLoadMirrorDataCallBack, dstid_),
  };
  QueryLoadMirrorDataCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryLoadMirrorDataCallBack_descriptor_,
      QueryLoadMirrorDataCallBack::default_instance_,
      QueryLoadMirrorDataCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLoadMirrorDataCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLoadMirrorDataCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryLoadMirrorDataCallBack));
  WGCharacterDetailReq_descriptor_ = file->message_type(9);
  static const int WGCharacterDetailReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGCharacterDetailReq, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGCharacterDetailReq, dstid_),
  };
  WGCharacterDetailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGCharacterDetailReq_descriptor_,
      WGCharacterDetailReq::default_instance_,
      WGCharacterDetailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGCharacterDetailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGCharacterDetailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGCharacterDetailReq));
  GWCharacterDetailRsp_descriptor_ = file->message_type(10);
  static const int GWCharacterDetailRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWCharacterDetailRsp, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWCharacterDetailRsp, dstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWCharacterDetailRsp, detail_),
  };
  GWCharacterDetailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWCharacterDetailRsp_descriptor_,
      GWCharacterDetailRsp::default_instance_,
      GWCharacterDetailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWCharacterDetailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWCharacterDetailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWCharacterDetailRsp));
  QueryCharacterDetailCrossServerReq_descriptor_ = file->message_type(11);
  static const int QueryCharacterDetailCrossServerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailCrossServerReq, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailCrossServerReq, dstid_),
  };
  QueryCharacterDetailCrossServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCharacterDetailCrossServerReq_descriptor_,
      QueryCharacterDetailCrossServerReq::default_instance_,
      QueryCharacterDetailCrossServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailCrossServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailCrossServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCharacterDetailCrossServerReq));
  QueryCharacterDetailCrossServerRsp_descriptor_ = file->message_type(12);
  static const int QueryCharacterDetailCrossServerRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailCrossServerRsp, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailCrossServerRsp, dstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailCrossServerRsp, detail_),
  };
  QueryCharacterDetailCrossServerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCharacterDetailCrossServerRsp_descriptor_,
      QueryCharacterDetailCrossServerRsp::default_instance_,
      QueryCharacterDetailCrossServerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailCrossServerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterDetailCrossServerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCharacterDetailCrossServerRsp));
  QueryCharacterMiniCrossServerReq_descriptor_ = file->message_type(13);
  static const int QueryCharacterMiniCrossServerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterMiniCrossServerReq, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterMiniCrossServerReq, dstid_),
  };
  QueryCharacterMiniCrossServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCharacterMiniCrossServerReq_descriptor_,
      QueryCharacterMiniCrossServerReq::default_instance_,
      QueryCharacterMiniCrossServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterMiniCrossServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterMiniCrossServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCharacterMiniCrossServerReq));
  QueryCharacterMiniCrossServerRsp_descriptor_ = file->message_type(14);
  static const int QueryCharacterMiniCrossServerRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterMiniCrossServerRsp, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterMiniCrossServerRsp, dstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterMiniCrossServerRsp, miniinfo_),
  };
  QueryCharacterMiniCrossServerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCharacterMiniCrossServerRsp_descriptor_,
      QueryCharacterMiniCrossServerRsp::default_instance_,
      QueryCharacterMiniCrossServerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterMiniCrossServerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharacterMiniCrossServerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCharacterMiniCrossServerRsp));
  QueryCharFuncFightCrossReq_descriptor_ = file->message_type(15);
  static const int QueryCharFuncFightCrossReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightCrossReq, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightCrossReq, dstid_),
  };
  QueryCharFuncFightCrossReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCharFuncFightCrossReq_descriptor_,
      QueryCharFuncFightCrossReq::default_instance_,
      QueryCharFuncFightCrossReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightCrossReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightCrossReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCharFuncFightCrossReq));
  QueryCharFuncFightCrossRsp_descriptor_ = file->message_type(16);
  static const int QueryCharFuncFightCrossRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightCrossRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightCrossRsp, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightCrossRsp, dstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightCrossRsp, info_),
  };
  QueryCharFuncFightCrossRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCharFuncFightCrossRsp_descriptor_,
      QueryCharFuncFightCrossRsp::default_instance_,
      QueryCharFuncFightCrossRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightCrossRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCharFuncFightCrossRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCharFuncFightCrossRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Query_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCharacterDetailInfo_descriptor_, &QueryCharacterDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FuncFightProto_descriptor_, &FuncFightProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWCharacterDetailReq_descriptor_, &CWCharacterDetailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCCharacterDetailRsp_descriptor_, &WCCharacterDetailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWCharacterMiniReq_descriptor_, &CWCharacterMiniReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCCharacterMiniRsp_descriptor_, &WCCharacterMiniRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCharFuncFightReq_descriptor_, &QueryCharFuncFightReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCharFuncFightRsp_descriptor_, &QueryCharFuncFightRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryLoadMirrorDataCallBack_descriptor_, &QueryLoadMirrorDataCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGCharacterDetailReq_descriptor_, &WGCharacterDetailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWCharacterDetailRsp_descriptor_, &GWCharacterDetailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCharacterDetailCrossServerReq_descriptor_, &QueryCharacterDetailCrossServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCharacterDetailCrossServerRsp_descriptor_, &QueryCharacterDetailCrossServerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCharacterMiniCrossServerReq_descriptor_, &QueryCharacterMiniCrossServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCharacterMiniCrossServerRsp_descriptor_, &QueryCharacterMiniCrossServerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCharFuncFightCrossReq_descriptor_, &QueryCharFuncFightCrossReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCharFuncFightCrossRsp_descriptor_, &QueryCharFuncFightCrossRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Query_2eproto() {
  delete QueryCharacterDetailInfo::default_instance_;
  delete QueryCharacterDetailInfo_reflection_;
  delete FuncFightProto::default_instance_;
  delete FuncFightProto_reflection_;
  delete CWCharacterDetailReq::default_instance_;
  delete CWCharacterDetailReq_reflection_;
  delete WCCharacterDetailRsp::default_instance_;
  delete WCCharacterDetailRsp_reflection_;
  delete CWCharacterMiniReq::default_instance_;
  delete CWCharacterMiniReq_reflection_;
  delete WCCharacterMiniRsp::default_instance_;
  delete WCCharacterMiniRsp_reflection_;
  delete QueryCharFuncFightReq::default_instance_;
  delete QueryCharFuncFightReq_reflection_;
  delete QueryCharFuncFightRsp::default_instance_;
  delete QueryCharFuncFightRsp_reflection_;
  delete QueryLoadMirrorDataCallBack::default_instance_;
  delete QueryLoadMirrorDataCallBack_reflection_;
  delete WGCharacterDetailReq::default_instance_;
  delete WGCharacterDetailReq_reflection_;
  delete GWCharacterDetailRsp::default_instance_;
  delete GWCharacterDetailRsp_reflection_;
  delete QueryCharacterDetailCrossServerReq::default_instance_;
  delete QueryCharacterDetailCrossServerReq_reflection_;
  delete QueryCharacterDetailCrossServerRsp::default_instance_;
  delete QueryCharacterDetailCrossServerRsp_reflection_;
  delete QueryCharacterMiniCrossServerReq::default_instance_;
  delete QueryCharacterMiniCrossServerReq_reflection_;
  delete QueryCharacterMiniCrossServerRsp::default_instance_;
  delete QueryCharacterMiniCrossServerRsp_reflection_;
  delete QueryCharFuncFightCrossReq::default_instance_;
  delete QueryCharFuncFightCrossReq_reflection_;
  delete QueryCharFuncFightCrossRsp::default_instance_;
  delete QueryCharFuncFightCrossRsp_reflection_;
}

void protobuf_AddDesc_Query_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Query.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\032\022common_logic.proto\032\tCom.proto\"\250\002"
    "\n\030QueryCharacterDetailInfo\022\013\n\003cid\030\001 \001(\004\022"
    "\014\n\004name\030\002 \001(\014\022\r\n\005level\030\003 \001(\r\022\014\n\004prof\030\004 \001"
    "(\r\022\r\n\005fight\030\005 \001(\004\022\021\n\tunionName\030\006 \001(\014\022\021\n\t"
    "unionDuty\030\007 \001(\r\022)\n\006facade\030\010 \001(\0132\031.proto_"
    "ff.RoleFacadeProto\022\'\n\006equips\030\t \003(\0132\027.pro"
    "to_ff.ItemProtoInfo\022&\n\005slots\030\n \003(\0132\027.pro"
    "to_ff.EquipSlotInfo\022\020\n\010vipLevel\030\013 \001(\r\022\021\n"
    "\tpartnerId\030\014 \001(\004\"R\n\016FuncFightProto\022$\n\nfu"
    "nc_fight\030\001 \003(\0132\020.proto_ff.Attr64\022\r\n\005figh"
    "t\030\002 \001(\003\022\013\n\003cid\030\003 \001(\004\"&\n\024CWCharacterDetai"
    "lReq\022\016\n\006charID\030\001 \001(\004\"W\n\024WCCharacterDetai"
    "lRsp\022\013\n\003ret\030\001 \001(\r\0222\n\006detail\030\002 \001(\0132\".prot"
    "o_ff.QueryCharacterDetailInfo\"2\n\022CWChara"
    "cterMiniReq\022\016\n\006charID\030\001 \001(\004\022\014\n\004name\030\002 \001("
    "\t\"V\n\022WCCharacterMiniRsp\022\013\n\003ret\030\001 \001(\r\0223\n\r"
    "characterInfo\030\002 \001(\0132\034.proto_ff.RolePlaye"
    "rMiniInfo\"*\n\025QueryCharFuncFightReq\022\021\n\tqu"
    "ery_cid\030\001 \001(\004\"P\n\025QueryCharFuncFightRsp\022\017"
    "\n\007retcode\030\001 \001(\005\022&\n\004info\030\002 \001(\0132\030.proto_ff"
    ".FuncFightProto\";\n\033QueryLoadMirrorDataCa"
    "llBack\022\r\n\005srcID\030\001 \002(\004\022\r\n\005dstID\030\002 \002(\004\"4\n\024"
    "WGCharacterDetailReq\022\r\n\005srcID\030\001 \001(\004\022\r\n\005d"
    "stID\030\002 \001(\004\"h\n\024GWCharacterDetailRsp\022\r\n\005sr"
    "cID\030\001 \001(\004\022\r\n\005dstID\030\002 \001(\004\0222\n\006detail\030\003 \001(\013"
    "2\".proto_ff.QueryCharacterDetailInfo\"B\n\""
    "QueryCharacterDetailCrossServerReq\022\r\n\005sr"
    "cID\030\001 \002(\004\022\r\n\005dstID\030\002 \002(\004\"v\n\"QueryCharact"
    "erDetailCrossServerRsp\022\r\n\005srcID\030\001 \001(\004\022\r\n"
    "\005dstID\030\002 \001(\004\0222\n\006detail\030\003 \001(\0132\".proto_ff."
    "QueryCharacterDetailInfo\"@\n QueryCharact"
    "erMiniCrossServerReq\022\r\n\005srcID\030\001 \002(\004\022\r\n\005d"
    "stID\030\002 \002(\004\"p\n QueryCharacterMiniCrossSer"
    "verRsp\022\r\n\005srcID\030\001 \001(\004\022\r\n\005dstID\030\002 \001(\004\022.\n\010"
    "miniInfo\030\003 \001(\0132\034.proto_ff.RolePlayerMini"
    "Info\":\n\032QueryCharFuncFightCrossReq\022\r\n\005sr"
    "cID\030\001 \002(\004\022\r\n\005dstID\030\002 \002(\004\"s\n\032QueryCharFun"
    "cFightCrossRsp\022\017\n\007retcode\030\001 \001(\005\022\r\n\005srcID"
    "\030\002 \001(\004\022\r\n\005dstID\030\003 \001(\004\022&\n\004info\030\004 \001(\0132\030.pr"
    "oto_ff.FuncFightProto", 1621);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Query.proto", &protobuf_RegisterTypes);
  QueryCharacterDetailInfo::default_instance_ = new QueryCharacterDetailInfo();
  FuncFightProto::default_instance_ = new FuncFightProto();
  CWCharacterDetailReq::default_instance_ = new CWCharacterDetailReq();
  WCCharacterDetailRsp::default_instance_ = new WCCharacterDetailRsp();
  CWCharacterMiniReq::default_instance_ = new CWCharacterMiniReq();
  WCCharacterMiniRsp::default_instance_ = new WCCharacterMiniRsp();
  QueryCharFuncFightReq::default_instance_ = new QueryCharFuncFightReq();
  QueryCharFuncFightRsp::default_instance_ = new QueryCharFuncFightRsp();
  QueryLoadMirrorDataCallBack::default_instance_ = new QueryLoadMirrorDataCallBack();
  WGCharacterDetailReq::default_instance_ = new WGCharacterDetailReq();
  GWCharacterDetailRsp::default_instance_ = new GWCharacterDetailRsp();
  QueryCharacterDetailCrossServerReq::default_instance_ = new QueryCharacterDetailCrossServerReq();
  QueryCharacterDetailCrossServerRsp::default_instance_ = new QueryCharacterDetailCrossServerRsp();
  QueryCharacterMiniCrossServerReq::default_instance_ = new QueryCharacterMiniCrossServerReq();
  QueryCharacterMiniCrossServerRsp::default_instance_ = new QueryCharacterMiniCrossServerRsp();
  QueryCharFuncFightCrossReq::default_instance_ = new QueryCharFuncFightCrossReq();
  QueryCharFuncFightCrossRsp::default_instance_ = new QueryCharFuncFightCrossRsp();
  QueryCharacterDetailInfo::default_instance_->InitAsDefaultInstance();
  FuncFightProto::default_instance_->InitAsDefaultInstance();
  CWCharacterDetailReq::default_instance_->InitAsDefaultInstance();
  WCCharacterDetailRsp::default_instance_->InitAsDefaultInstance();
  CWCharacterMiniReq::default_instance_->InitAsDefaultInstance();
  WCCharacterMiniRsp::default_instance_->InitAsDefaultInstance();
  QueryCharFuncFightReq::default_instance_->InitAsDefaultInstance();
  QueryCharFuncFightRsp::default_instance_->InitAsDefaultInstance();
  QueryLoadMirrorDataCallBack::default_instance_->InitAsDefaultInstance();
  WGCharacterDetailReq::default_instance_->InitAsDefaultInstance();
  GWCharacterDetailRsp::default_instance_->InitAsDefaultInstance();
  QueryCharacterDetailCrossServerReq::default_instance_->InitAsDefaultInstance();
  QueryCharacterDetailCrossServerRsp::default_instance_->InitAsDefaultInstance();
  QueryCharacterMiniCrossServerReq::default_instance_->InitAsDefaultInstance();
  QueryCharacterMiniCrossServerRsp::default_instance_->InitAsDefaultInstance();
  QueryCharFuncFightCrossReq::default_instance_->InitAsDefaultInstance();
  QueryCharFuncFightCrossRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Query_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Query_2eproto {
  StaticDescriptorInitializer_Query_2eproto() {
    protobuf_AddDesc_Query_2eproto();
  }
} static_descriptor_initializer_Query_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int QueryCharacterDetailInfo::kCidFieldNumber;
const int QueryCharacterDetailInfo::kNameFieldNumber;
const int QueryCharacterDetailInfo::kLevelFieldNumber;
const int QueryCharacterDetailInfo::kProfFieldNumber;
const int QueryCharacterDetailInfo::kFightFieldNumber;
const int QueryCharacterDetailInfo::kUnionNameFieldNumber;
const int QueryCharacterDetailInfo::kUnionDutyFieldNumber;
const int QueryCharacterDetailInfo::kFacadeFieldNumber;
const int QueryCharacterDetailInfo::kEquipsFieldNumber;
const int QueryCharacterDetailInfo::kSlotsFieldNumber;
const int QueryCharacterDetailInfo::kVipLevelFieldNumber;
const int QueryCharacterDetailInfo::kPartnerIdFieldNumber;
#endif  // !_MSC_VER

QueryCharacterDetailInfo::QueryCharacterDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryCharacterDetailInfo::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

QueryCharacterDetailInfo::QueryCharacterDetailInfo(const QueryCharacterDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryCharacterDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  prof_ = 0u;
  fight_ = GOOGLE_ULONGLONG(0);
  unionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unionduty_ = 0u;
  facade_ = NULL;
  viplevel_ = 0u;
  partnerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCharacterDetailInfo::~QueryCharacterDetailInfo() {
  SharedDtor();
}

void QueryCharacterDetailInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (unionname_ != &::google::protobuf::internal::kEmptyString) {
    delete unionname_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void QueryCharacterDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCharacterDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCharacterDetailInfo_descriptor_;
}

const QueryCharacterDetailInfo& QueryCharacterDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

QueryCharacterDetailInfo* QueryCharacterDetailInfo::default_instance_ = NULL;

QueryCharacterDetailInfo* QueryCharacterDetailInfo::New() const {
  return new QueryCharacterDetailInfo;
}

void QueryCharacterDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    prof_ = 0u;
    fight_ = GOOGLE_ULONGLONG(0);
    if (has_unionname()) {
      if (unionname_ != &::google::protobuf::internal::kEmptyString) {
        unionname_->clear();
      }
    }
    unionduty_ = 0u;
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    viplevel_ = 0u;
    partnerid_ = GOOGLE_ULONGLONG(0);
  }
  equips_.Clear();
  slots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCharacterDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_unionName;
        break;
      }

      // optional bytes unionName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unionname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_unionDuty;
        break;
      }

      // optional uint32 unionDuty = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unionDuty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unionduty_)));
          set_has_unionduty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equips;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo equips = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equips;
        if (input->ExpectTag(82)) goto parse_slots;
        break;
      }

      // repeated .proto_ff.EquipSlotInfo slots = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_slots;
        if (input->ExpectTag(88)) goto parse_vipLevel;
        break;
      }

      // optional uint32 vipLevel = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_partnerId;
        break;
      }

      // optional uint64 partnerId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partnerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &partnerid_)));
          set_has_partnerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryCharacterDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prof(), output);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fight(), output);
  }

  // optional bytes unionName = 6;
  if (has_unionname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->unionname(), output);
  }

  // optional uint32 unionDuty = 7;
  if (has_unionduty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->unionduty(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 8;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->facade(), output);
  }

  // repeated .proto_ff.ItemProtoInfo equips = 9;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->equips(i), output);
  }

  // repeated .proto_ff.EquipSlotInfo slots = 10;
  for (int i = 0; i < this->slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->slots(i), output);
  }

  // optional uint32 vipLevel = 11;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->viplevel(), output);
  }

  // optional uint64 partnerId = 12;
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->partnerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryCharacterDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prof(), target);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fight(), target);
  }

  // optional bytes unionName = 6;
  if (has_unionname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->unionname(), target);
  }

  // optional uint32 unionDuty = 7;
  if (has_unionduty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->unionduty(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 8;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->facade(), target);
  }

  // repeated .proto_ff.ItemProtoInfo equips = 9;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->equips(i), target);
  }

  // repeated .proto_ff.EquipSlotInfo slots = 10;
  for (int i = 0; i < this->slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->slots(i), target);
  }

  // optional uint32 vipLevel = 11;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->viplevel(), target);
  }

  // optional uint64 partnerId = 12;
  if (has_partnerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->partnerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryCharacterDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // optional uint64 fight = 5;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional bytes unionName = 6;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unionname());
    }

    // optional uint32 unionDuty = 7;
    if (has_unionduty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unionduty());
    }

    // optional .proto_ff.RoleFacadeProto facade = 8;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional uint32 vipLevel = 11;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // optional uint64 partnerId = 12;
    if (has_partnerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->partnerid());
    }

  }
  // repeated .proto_ff.ItemProtoInfo equips = 9;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .proto_ff.EquipSlotInfo slots = 10;
  total_size += 1 * this->slots_size();
  for (int i = 0; i < this->slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCharacterDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCharacterDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCharacterDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCharacterDetailInfo::MergeFrom(const QueryCharacterDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  slots_.MergeFrom(from.slots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_unionname()) {
      set_unionname(from.unionname());
    }
    if (from.has_unionduty()) {
      set_unionduty(from.unionduty());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_partnerid()) {
      set_partnerid(from.partnerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCharacterDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCharacterDetailInfo::CopyFrom(const QueryCharacterDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCharacterDetailInfo::IsInitialized() const {

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  for (int i = 0; i < equips_size(); i++) {
    if (!this->equips(i).IsInitialized()) return false;
  }
  return true;
}

void QueryCharacterDetailInfo::Swap(QueryCharacterDetailInfo* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(prof_, other->prof_);
    std::swap(fight_, other->fight_);
    std::swap(unionname_, other->unionname_);
    std::swap(unionduty_, other->unionduty_);
    std::swap(facade_, other->facade_);
    equips_.Swap(&other->equips_);
    slots_.Swap(&other->slots_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(partnerid_, other->partnerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCharacterDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCharacterDetailInfo_descriptor_;
  metadata.reflection = QueryCharacterDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FuncFightProto::kFuncFightFieldNumber;
const int FuncFightProto::kFightFieldNumber;
const int FuncFightProto::kCidFieldNumber;
#endif  // !_MSC_VER

FuncFightProto::FuncFightProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FuncFightProto::InitAsDefaultInstance() {
}

FuncFightProto::FuncFightProto(const FuncFightProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FuncFightProto::SharedCtor() {
  _cached_size_ = 0;
  fight_ = GOOGLE_LONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FuncFightProto::~FuncFightProto() {
  SharedDtor();
}

void FuncFightProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FuncFightProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuncFightProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuncFightProto_descriptor_;
}

const FuncFightProto& FuncFightProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

FuncFightProto* FuncFightProto::default_instance_ = NULL;

FuncFightProto* FuncFightProto::New() const {
  return new FuncFightProto;
}

void FuncFightProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    fight_ = GOOGLE_LONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
  }
  func_fight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FuncFightProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Attr64 func_fight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_func_fight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_func_fight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_func_fight;
        if (input->ExpectTag(16)) goto parse_fight;
        break;
      }

      // optional int64 fight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FuncFightProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Attr64 func_fight = 1;
  for (int i = 0; i < this->func_fight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->func_fight(i), output);
  }

  // optional int64 fight = 2;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fight(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FuncFightProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Attr64 func_fight = 1;
  for (int i = 0; i < this->func_fight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->func_fight(i), target);
  }

  // optional int64 fight = 2;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fight(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FuncFightProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 fight = 2;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated .proto_ff.Attr64 func_fight = 1;
  total_size += 1 * this->func_fight_size();
  for (int i = 0; i < this->func_fight_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->func_fight(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuncFightProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FuncFightProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FuncFightProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FuncFightProto::MergeFrom(const FuncFightProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  func_fight_.MergeFrom(from.func_fight_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FuncFightProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuncFightProto::CopyFrom(const FuncFightProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuncFightProto::IsInitialized() const {

  for (int i = 0; i < func_fight_size(); i++) {
    if (!this->func_fight(i).IsInitialized()) return false;
  }
  return true;
}

void FuncFightProto::Swap(FuncFightProto* other) {
  if (other != this) {
    func_fight_.Swap(&other->func_fight_);
    std::swap(fight_, other->fight_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FuncFightProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FuncFightProto_descriptor_;
  metadata.reflection = FuncFightProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWCharacterDetailReq::kCharIDFieldNumber;
#endif  // !_MSC_VER

CWCharacterDetailReq::CWCharacterDetailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWCharacterDetailReq::InitAsDefaultInstance() {
}

CWCharacterDetailReq::CWCharacterDetailReq(const CWCharacterDetailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWCharacterDetailReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWCharacterDetailReq::~CWCharacterDetailReq() {
  SharedDtor();
}

void CWCharacterDetailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWCharacterDetailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWCharacterDetailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWCharacterDetailReq_descriptor_;
}

const CWCharacterDetailReq& CWCharacterDetailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

CWCharacterDetailReq* CWCharacterDetailReq::default_instance_ = NULL;

CWCharacterDetailReq* CWCharacterDetailReq::New() const {
  return new CWCharacterDetailReq;
}

void CWCharacterDetailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWCharacterDetailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWCharacterDetailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWCharacterDetailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWCharacterDetailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWCharacterDetailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWCharacterDetailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWCharacterDetailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWCharacterDetailReq::MergeFrom(const CWCharacterDetailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWCharacterDetailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWCharacterDetailReq::CopyFrom(const CWCharacterDetailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWCharacterDetailReq::IsInitialized() const {

  return true;
}

void CWCharacterDetailReq::Swap(CWCharacterDetailReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWCharacterDetailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWCharacterDetailReq_descriptor_;
  metadata.reflection = CWCharacterDetailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCCharacterDetailRsp::kRetFieldNumber;
const int WCCharacterDetailRsp::kDetailFieldNumber;
#endif  // !_MSC_VER

WCCharacterDetailRsp::WCCharacterDetailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCCharacterDetailRsp::InitAsDefaultInstance() {
  detail_ = const_cast< ::proto_ff::QueryCharacterDetailInfo*>(&::proto_ff::QueryCharacterDetailInfo::default_instance());
}

WCCharacterDetailRsp::WCCharacterDetailRsp(const WCCharacterDetailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCCharacterDetailRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCCharacterDetailRsp::~WCCharacterDetailRsp() {
  SharedDtor();
}

void WCCharacterDetailRsp::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

void WCCharacterDetailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCCharacterDetailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCCharacterDetailRsp_descriptor_;
}

const WCCharacterDetailRsp& WCCharacterDetailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

WCCharacterDetailRsp* WCCharacterDetailRsp::default_instance_ = NULL;

WCCharacterDetailRsp* WCCharacterDetailRsp::New() const {
  return new WCCharacterDetailRsp;
}

void WCCharacterDetailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    if (has_detail()) {
      if (detail_ != NULL) detail_->::proto_ff::QueryCharacterDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCCharacterDetailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }

      // optional .proto_ff.QueryCharacterDetailInfo detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCCharacterDetailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional .proto_ff.QueryCharacterDetailInfo detail = 2;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCCharacterDetailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.QueryCharacterDetailInfo detail = 2;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCCharacterDetailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .proto_ff.QueryCharacterDetailInfo detail = 2;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCCharacterDetailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCCharacterDetailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCCharacterDetailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCCharacterDetailRsp::MergeFrom(const WCCharacterDetailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_detail()) {
      mutable_detail()->::proto_ff::QueryCharacterDetailInfo::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCCharacterDetailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCCharacterDetailRsp::CopyFrom(const WCCharacterDetailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCCharacterDetailRsp::IsInitialized() const {

  if (has_detail()) {
    if (!this->detail().IsInitialized()) return false;
  }
  return true;
}

void WCCharacterDetailRsp::Swap(WCCharacterDetailRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCCharacterDetailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCCharacterDetailRsp_descriptor_;
  metadata.reflection = WCCharacterDetailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWCharacterMiniReq::kCharIDFieldNumber;
const int CWCharacterMiniReq::kNameFieldNumber;
#endif  // !_MSC_VER

CWCharacterMiniReq::CWCharacterMiniReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWCharacterMiniReq::InitAsDefaultInstance() {
}

CWCharacterMiniReq::CWCharacterMiniReq(const CWCharacterMiniReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWCharacterMiniReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWCharacterMiniReq::~CWCharacterMiniReq() {
  SharedDtor();
}

void CWCharacterMiniReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CWCharacterMiniReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWCharacterMiniReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWCharacterMiniReq_descriptor_;
}

const CWCharacterMiniReq& CWCharacterMiniReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

CWCharacterMiniReq* CWCharacterMiniReq::default_instance_ = NULL;

CWCharacterMiniReq* CWCharacterMiniReq::New() const {
  return new CWCharacterMiniReq;
}

void CWCharacterMiniReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWCharacterMiniReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWCharacterMiniReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWCharacterMiniReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWCharacterMiniReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWCharacterMiniReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWCharacterMiniReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWCharacterMiniReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWCharacterMiniReq::MergeFrom(const CWCharacterMiniReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWCharacterMiniReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWCharacterMiniReq::CopyFrom(const CWCharacterMiniReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWCharacterMiniReq::IsInitialized() const {

  return true;
}

void CWCharacterMiniReq::Swap(CWCharacterMiniReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWCharacterMiniReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWCharacterMiniReq_descriptor_;
  metadata.reflection = CWCharacterMiniReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCCharacterMiniRsp::kRetFieldNumber;
const int WCCharacterMiniRsp::kCharacterInfoFieldNumber;
#endif  // !_MSC_VER

WCCharacterMiniRsp::WCCharacterMiniRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCCharacterMiniRsp::InitAsDefaultInstance() {
  characterinfo_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

WCCharacterMiniRsp::WCCharacterMiniRsp(const WCCharacterMiniRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCCharacterMiniRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  characterinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCCharacterMiniRsp::~WCCharacterMiniRsp() {
  SharedDtor();
}

void WCCharacterMiniRsp::SharedDtor() {
  if (this != default_instance_) {
    delete characterinfo_;
  }
}

void WCCharacterMiniRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCCharacterMiniRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCCharacterMiniRsp_descriptor_;
}

const WCCharacterMiniRsp& WCCharacterMiniRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

WCCharacterMiniRsp* WCCharacterMiniRsp::default_instance_ = NULL;

WCCharacterMiniRsp* WCCharacterMiniRsp::New() const {
  return new WCCharacterMiniRsp;
}

void WCCharacterMiniRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    if (has_characterinfo()) {
      if (characterinfo_ != NULL) characterinfo_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCCharacterMiniRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_characterInfo;
        break;
      }

      // optional .proto_ff.RolePlayerMiniInfo characterInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_characterInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_characterinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCCharacterMiniRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional .proto_ff.RolePlayerMiniInfo characterInfo = 2;
  if (has_characterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->characterinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCCharacterMiniRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.RolePlayerMiniInfo characterInfo = 2;
  if (has_characterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->characterinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCCharacterMiniRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .proto_ff.RolePlayerMiniInfo characterInfo = 2;
    if (has_characterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->characterinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCCharacterMiniRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCCharacterMiniRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCCharacterMiniRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCCharacterMiniRsp::MergeFrom(const WCCharacterMiniRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_characterinfo()) {
      mutable_characterinfo()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.characterinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCCharacterMiniRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCCharacterMiniRsp::CopyFrom(const WCCharacterMiniRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCCharacterMiniRsp::IsInitialized() const {

  if (has_characterinfo()) {
    if (!this->characterinfo().IsInitialized()) return false;
  }
  return true;
}

void WCCharacterMiniRsp::Swap(WCCharacterMiniRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(characterinfo_, other->characterinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCCharacterMiniRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCCharacterMiniRsp_descriptor_;
  metadata.reflection = WCCharacterMiniRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryCharFuncFightReq::kQueryCidFieldNumber;
#endif  // !_MSC_VER

QueryCharFuncFightReq::QueryCharFuncFightReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryCharFuncFightReq::InitAsDefaultInstance() {
}

QueryCharFuncFightReq::QueryCharFuncFightReq(const QueryCharFuncFightReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryCharFuncFightReq::SharedCtor() {
  _cached_size_ = 0;
  query_cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCharFuncFightReq::~QueryCharFuncFightReq() {
  SharedDtor();
}

void QueryCharFuncFightReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryCharFuncFightReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCharFuncFightReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCharFuncFightReq_descriptor_;
}

const QueryCharFuncFightReq& QueryCharFuncFightReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

QueryCharFuncFightReq* QueryCharFuncFightReq::default_instance_ = NULL;

QueryCharFuncFightReq* QueryCharFuncFightReq::New() const {
  return new QueryCharFuncFightReq;
}

void QueryCharFuncFightReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    query_cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCharFuncFightReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 query_cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &query_cid_)));
          set_has_query_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryCharFuncFightReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 query_cid = 1;
  if (has_query_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->query_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryCharFuncFightReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 query_cid = 1;
  if (has_query_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->query_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryCharFuncFightReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 query_cid = 1;
    if (has_query_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->query_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCharFuncFightReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCharFuncFightReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCharFuncFightReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCharFuncFightReq::MergeFrom(const QueryCharFuncFightReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query_cid()) {
      set_query_cid(from.query_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCharFuncFightReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCharFuncFightReq::CopyFrom(const QueryCharFuncFightReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCharFuncFightReq::IsInitialized() const {

  return true;
}

void QueryCharFuncFightReq::Swap(QueryCharFuncFightReq* other) {
  if (other != this) {
    std::swap(query_cid_, other->query_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCharFuncFightReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCharFuncFightReq_descriptor_;
  metadata.reflection = QueryCharFuncFightReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryCharFuncFightRsp::kRetcodeFieldNumber;
const int QueryCharFuncFightRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

QueryCharFuncFightRsp::QueryCharFuncFightRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryCharFuncFightRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::FuncFightProto*>(&::proto_ff::FuncFightProto::default_instance());
}

QueryCharFuncFightRsp::QueryCharFuncFightRsp(const QueryCharFuncFightRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryCharFuncFightRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCharFuncFightRsp::~QueryCharFuncFightRsp() {
  SharedDtor();
}

void QueryCharFuncFightRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void QueryCharFuncFightRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCharFuncFightRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCharFuncFightRsp_descriptor_;
}

const QueryCharFuncFightRsp& QueryCharFuncFightRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

QueryCharFuncFightRsp* QueryCharFuncFightRsp::default_instance_ = NULL;

QueryCharFuncFightRsp* QueryCharFuncFightRsp::New() const {
  return new QueryCharFuncFightRsp;
}

void QueryCharFuncFightRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::FuncFightProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCharFuncFightRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.FuncFightProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryCharFuncFightRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional .proto_ff.FuncFightProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryCharFuncFightRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional .proto_ff.FuncFightProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryCharFuncFightRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional .proto_ff.FuncFightProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCharFuncFightRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCharFuncFightRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCharFuncFightRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCharFuncFightRsp::MergeFrom(const QueryCharFuncFightRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::FuncFightProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCharFuncFightRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCharFuncFightRsp::CopyFrom(const QueryCharFuncFightRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCharFuncFightRsp::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void QueryCharFuncFightRsp::Swap(QueryCharFuncFightRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCharFuncFightRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCharFuncFightRsp_descriptor_;
  metadata.reflection = QueryCharFuncFightRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryLoadMirrorDataCallBack::kSrcIDFieldNumber;
const int QueryLoadMirrorDataCallBack::kDstIDFieldNumber;
#endif  // !_MSC_VER

QueryLoadMirrorDataCallBack::QueryLoadMirrorDataCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryLoadMirrorDataCallBack::InitAsDefaultInstance() {
}

QueryLoadMirrorDataCallBack::QueryLoadMirrorDataCallBack(const QueryLoadMirrorDataCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryLoadMirrorDataCallBack::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryLoadMirrorDataCallBack::~QueryLoadMirrorDataCallBack() {
  SharedDtor();
}

void QueryLoadMirrorDataCallBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryLoadMirrorDataCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryLoadMirrorDataCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryLoadMirrorDataCallBack_descriptor_;
}

const QueryLoadMirrorDataCallBack& QueryLoadMirrorDataCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

QueryLoadMirrorDataCallBack* QueryLoadMirrorDataCallBack::default_instance_ = NULL;

QueryLoadMirrorDataCallBack* QueryLoadMirrorDataCallBack::New() const {
  return new QueryLoadMirrorDataCallBack;
}

void QueryLoadMirrorDataCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryLoadMirrorDataCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 srcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstID;
        break;
      }

      // required uint64 dstID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryLoadMirrorDataCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 srcID = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srcid(), output);
  }

  // required uint64 dstID = 2;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryLoadMirrorDataCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 srcID = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srcid(), target);
  }

  // required uint64 dstID = 2;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryLoadMirrorDataCallBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 srcID = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // required uint64 dstID = 2;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryLoadMirrorDataCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryLoadMirrorDataCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryLoadMirrorDataCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryLoadMirrorDataCallBack::MergeFrom(const QueryLoadMirrorDataCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryLoadMirrorDataCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryLoadMirrorDataCallBack::CopyFrom(const QueryLoadMirrorDataCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLoadMirrorDataCallBack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QueryLoadMirrorDataCallBack::Swap(QueryLoadMirrorDataCallBack* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(dstid_, other->dstid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryLoadMirrorDataCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryLoadMirrorDataCallBack_descriptor_;
  metadata.reflection = QueryLoadMirrorDataCallBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGCharacterDetailReq::kSrcIDFieldNumber;
const int WGCharacterDetailReq::kDstIDFieldNumber;
#endif  // !_MSC_VER

WGCharacterDetailReq::WGCharacterDetailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGCharacterDetailReq::InitAsDefaultInstance() {
}

WGCharacterDetailReq::WGCharacterDetailReq(const WGCharacterDetailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGCharacterDetailReq::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGCharacterDetailReq::~WGCharacterDetailReq() {
  SharedDtor();
}

void WGCharacterDetailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGCharacterDetailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGCharacterDetailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGCharacterDetailReq_descriptor_;
}

const WGCharacterDetailReq& WGCharacterDetailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

WGCharacterDetailReq* WGCharacterDetailReq::default_instance_ = NULL;

WGCharacterDetailReq* WGCharacterDetailReq::New() const {
  return new WGCharacterDetailReq;
}

void WGCharacterDetailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGCharacterDetailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 srcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstID;
        break;
      }

      // optional uint64 dstID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGCharacterDetailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 srcID = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srcid(), output);
  }

  // optional uint64 dstID = 2;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGCharacterDetailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 srcID = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srcid(), target);
  }

  // optional uint64 dstID = 2;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGCharacterDetailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 srcID = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // optional uint64 dstID = 2;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGCharacterDetailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGCharacterDetailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGCharacterDetailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGCharacterDetailReq::MergeFrom(const WGCharacterDetailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGCharacterDetailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGCharacterDetailReq::CopyFrom(const WGCharacterDetailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGCharacterDetailReq::IsInitialized() const {

  return true;
}

void WGCharacterDetailReq::Swap(WGCharacterDetailReq* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(dstid_, other->dstid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGCharacterDetailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGCharacterDetailReq_descriptor_;
  metadata.reflection = WGCharacterDetailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWCharacterDetailRsp::kSrcIDFieldNumber;
const int GWCharacterDetailRsp::kDstIDFieldNumber;
const int GWCharacterDetailRsp::kDetailFieldNumber;
#endif  // !_MSC_VER

GWCharacterDetailRsp::GWCharacterDetailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWCharacterDetailRsp::InitAsDefaultInstance() {
  detail_ = const_cast< ::proto_ff::QueryCharacterDetailInfo*>(&::proto_ff::QueryCharacterDetailInfo::default_instance());
}

GWCharacterDetailRsp::GWCharacterDetailRsp(const GWCharacterDetailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWCharacterDetailRsp::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWCharacterDetailRsp::~GWCharacterDetailRsp() {
  SharedDtor();
}

void GWCharacterDetailRsp::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

void GWCharacterDetailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWCharacterDetailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWCharacterDetailRsp_descriptor_;
}

const GWCharacterDetailRsp& GWCharacterDetailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

GWCharacterDetailRsp* GWCharacterDetailRsp::default_instance_ = NULL;

GWCharacterDetailRsp* GWCharacterDetailRsp::New() const {
  return new GWCharacterDetailRsp;
}

void GWCharacterDetailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
    if (has_detail()) {
      if (detail_ != NULL) detail_->::proto_ff::QueryCharacterDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWCharacterDetailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 srcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstID;
        break;
      }

      // optional uint64 dstID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_detail;
        break;
      }

      // optional .proto_ff.QueryCharacterDetailInfo detail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWCharacterDetailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 srcID = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srcid(), output);
  }

  // optional uint64 dstID = 2;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstid(), output);
  }

  // optional .proto_ff.QueryCharacterDetailInfo detail = 3;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWCharacterDetailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 srcID = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srcid(), target);
  }

  // optional uint64 dstID = 2;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstid(), target);
  }

  // optional .proto_ff.QueryCharacterDetailInfo detail = 3;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWCharacterDetailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 srcID = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // optional uint64 dstID = 2;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

    // optional .proto_ff.QueryCharacterDetailInfo detail = 3;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWCharacterDetailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWCharacterDetailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWCharacterDetailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWCharacterDetailRsp::MergeFrom(const GWCharacterDetailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
    if (from.has_detail()) {
      mutable_detail()->::proto_ff::QueryCharacterDetailInfo::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWCharacterDetailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWCharacterDetailRsp::CopyFrom(const GWCharacterDetailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWCharacterDetailRsp::IsInitialized() const {

  if (has_detail()) {
    if (!this->detail().IsInitialized()) return false;
  }
  return true;
}

void GWCharacterDetailRsp::Swap(GWCharacterDetailRsp* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(dstid_, other->dstid_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWCharacterDetailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWCharacterDetailRsp_descriptor_;
  metadata.reflection = GWCharacterDetailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryCharacterDetailCrossServerReq::kSrcIDFieldNumber;
const int QueryCharacterDetailCrossServerReq::kDstIDFieldNumber;
#endif  // !_MSC_VER

QueryCharacterDetailCrossServerReq::QueryCharacterDetailCrossServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryCharacterDetailCrossServerReq::InitAsDefaultInstance() {
}

QueryCharacterDetailCrossServerReq::QueryCharacterDetailCrossServerReq(const QueryCharacterDetailCrossServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryCharacterDetailCrossServerReq::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCharacterDetailCrossServerReq::~QueryCharacterDetailCrossServerReq() {
  SharedDtor();
}

void QueryCharacterDetailCrossServerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryCharacterDetailCrossServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCharacterDetailCrossServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCharacterDetailCrossServerReq_descriptor_;
}

const QueryCharacterDetailCrossServerReq& QueryCharacterDetailCrossServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

QueryCharacterDetailCrossServerReq* QueryCharacterDetailCrossServerReq::default_instance_ = NULL;

QueryCharacterDetailCrossServerReq* QueryCharacterDetailCrossServerReq::New() const {
  return new QueryCharacterDetailCrossServerReq;
}

void QueryCharacterDetailCrossServerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCharacterDetailCrossServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 srcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstID;
        break;
      }

      // required uint64 dstID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryCharacterDetailCrossServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 srcID = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srcid(), output);
  }

  // required uint64 dstID = 2;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryCharacterDetailCrossServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 srcID = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srcid(), target);
  }

  // required uint64 dstID = 2;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryCharacterDetailCrossServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 srcID = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // required uint64 dstID = 2;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCharacterDetailCrossServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCharacterDetailCrossServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCharacterDetailCrossServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCharacterDetailCrossServerReq::MergeFrom(const QueryCharacterDetailCrossServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCharacterDetailCrossServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCharacterDetailCrossServerReq::CopyFrom(const QueryCharacterDetailCrossServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCharacterDetailCrossServerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QueryCharacterDetailCrossServerReq::Swap(QueryCharacterDetailCrossServerReq* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(dstid_, other->dstid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCharacterDetailCrossServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCharacterDetailCrossServerReq_descriptor_;
  metadata.reflection = QueryCharacterDetailCrossServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryCharacterDetailCrossServerRsp::kSrcIDFieldNumber;
const int QueryCharacterDetailCrossServerRsp::kDstIDFieldNumber;
const int QueryCharacterDetailCrossServerRsp::kDetailFieldNumber;
#endif  // !_MSC_VER

QueryCharacterDetailCrossServerRsp::QueryCharacterDetailCrossServerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryCharacterDetailCrossServerRsp::InitAsDefaultInstance() {
  detail_ = const_cast< ::proto_ff::QueryCharacterDetailInfo*>(&::proto_ff::QueryCharacterDetailInfo::default_instance());
}

QueryCharacterDetailCrossServerRsp::QueryCharacterDetailCrossServerRsp(const QueryCharacterDetailCrossServerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryCharacterDetailCrossServerRsp::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCharacterDetailCrossServerRsp::~QueryCharacterDetailCrossServerRsp() {
  SharedDtor();
}

void QueryCharacterDetailCrossServerRsp::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

void QueryCharacterDetailCrossServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCharacterDetailCrossServerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCharacterDetailCrossServerRsp_descriptor_;
}

const QueryCharacterDetailCrossServerRsp& QueryCharacterDetailCrossServerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

QueryCharacterDetailCrossServerRsp* QueryCharacterDetailCrossServerRsp::default_instance_ = NULL;

QueryCharacterDetailCrossServerRsp* QueryCharacterDetailCrossServerRsp::New() const {
  return new QueryCharacterDetailCrossServerRsp;
}

void QueryCharacterDetailCrossServerRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
    if (has_detail()) {
      if (detail_ != NULL) detail_->::proto_ff::QueryCharacterDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCharacterDetailCrossServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 srcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstID;
        break;
      }

      // optional uint64 dstID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_detail;
        break;
      }

      // optional .proto_ff.QueryCharacterDetailInfo detail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryCharacterDetailCrossServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 srcID = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srcid(), output);
  }

  // optional uint64 dstID = 2;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstid(), output);
  }

  // optional .proto_ff.QueryCharacterDetailInfo detail = 3;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryCharacterDetailCrossServerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 srcID = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srcid(), target);
  }

  // optional uint64 dstID = 2;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstid(), target);
  }

  // optional .proto_ff.QueryCharacterDetailInfo detail = 3;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryCharacterDetailCrossServerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 srcID = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // optional uint64 dstID = 2;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

    // optional .proto_ff.QueryCharacterDetailInfo detail = 3;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCharacterDetailCrossServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCharacterDetailCrossServerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCharacterDetailCrossServerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCharacterDetailCrossServerRsp::MergeFrom(const QueryCharacterDetailCrossServerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
    if (from.has_detail()) {
      mutable_detail()->::proto_ff::QueryCharacterDetailInfo::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCharacterDetailCrossServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCharacterDetailCrossServerRsp::CopyFrom(const QueryCharacterDetailCrossServerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCharacterDetailCrossServerRsp::IsInitialized() const {

  if (has_detail()) {
    if (!this->detail().IsInitialized()) return false;
  }
  return true;
}

void QueryCharacterDetailCrossServerRsp::Swap(QueryCharacterDetailCrossServerRsp* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(dstid_, other->dstid_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCharacterDetailCrossServerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCharacterDetailCrossServerRsp_descriptor_;
  metadata.reflection = QueryCharacterDetailCrossServerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryCharacterMiniCrossServerReq::kSrcIDFieldNumber;
const int QueryCharacterMiniCrossServerReq::kDstIDFieldNumber;
#endif  // !_MSC_VER

QueryCharacterMiniCrossServerReq::QueryCharacterMiniCrossServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryCharacterMiniCrossServerReq::InitAsDefaultInstance() {
}

QueryCharacterMiniCrossServerReq::QueryCharacterMiniCrossServerReq(const QueryCharacterMiniCrossServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryCharacterMiniCrossServerReq::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCharacterMiniCrossServerReq::~QueryCharacterMiniCrossServerReq() {
  SharedDtor();
}

void QueryCharacterMiniCrossServerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryCharacterMiniCrossServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCharacterMiniCrossServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCharacterMiniCrossServerReq_descriptor_;
}

const QueryCharacterMiniCrossServerReq& QueryCharacterMiniCrossServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

QueryCharacterMiniCrossServerReq* QueryCharacterMiniCrossServerReq::default_instance_ = NULL;

QueryCharacterMiniCrossServerReq* QueryCharacterMiniCrossServerReq::New() const {
  return new QueryCharacterMiniCrossServerReq;
}

void QueryCharacterMiniCrossServerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCharacterMiniCrossServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 srcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstID;
        break;
      }

      // required uint64 dstID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryCharacterMiniCrossServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 srcID = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srcid(), output);
  }

  // required uint64 dstID = 2;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryCharacterMiniCrossServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 srcID = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srcid(), target);
  }

  // required uint64 dstID = 2;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryCharacterMiniCrossServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 srcID = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // required uint64 dstID = 2;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCharacterMiniCrossServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCharacterMiniCrossServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCharacterMiniCrossServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCharacterMiniCrossServerReq::MergeFrom(const QueryCharacterMiniCrossServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCharacterMiniCrossServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCharacterMiniCrossServerReq::CopyFrom(const QueryCharacterMiniCrossServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCharacterMiniCrossServerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QueryCharacterMiniCrossServerReq::Swap(QueryCharacterMiniCrossServerReq* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(dstid_, other->dstid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCharacterMiniCrossServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCharacterMiniCrossServerReq_descriptor_;
  metadata.reflection = QueryCharacterMiniCrossServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryCharacterMiniCrossServerRsp::kSrcIDFieldNumber;
const int QueryCharacterMiniCrossServerRsp::kDstIDFieldNumber;
const int QueryCharacterMiniCrossServerRsp::kMiniInfoFieldNumber;
#endif  // !_MSC_VER

QueryCharacterMiniCrossServerRsp::QueryCharacterMiniCrossServerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryCharacterMiniCrossServerRsp::InitAsDefaultInstance() {
  miniinfo_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

QueryCharacterMiniCrossServerRsp::QueryCharacterMiniCrossServerRsp(const QueryCharacterMiniCrossServerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryCharacterMiniCrossServerRsp::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  miniinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCharacterMiniCrossServerRsp::~QueryCharacterMiniCrossServerRsp() {
  SharedDtor();
}

void QueryCharacterMiniCrossServerRsp::SharedDtor() {
  if (this != default_instance_) {
    delete miniinfo_;
  }
}

void QueryCharacterMiniCrossServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCharacterMiniCrossServerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCharacterMiniCrossServerRsp_descriptor_;
}

const QueryCharacterMiniCrossServerRsp& QueryCharacterMiniCrossServerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

QueryCharacterMiniCrossServerRsp* QueryCharacterMiniCrossServerRsp::default_instance_ = NULL;

QueryCharacterMiniCrossServerRsp* QueryCharacterMiniCrossServerRsp::New() const {
  return new QueryCharacterMiniCrossServerRsp;
}

void QueryCharacterMiniCrossServerRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
    if (has_miniinfo()) {
      if (miniinfo_ != NULL) miniinfo_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCharacterMiniCrossServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 srcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstID;
        break;
      }

      // optional uint64 dstID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_miniInfo;
        break;
      }

      // optional .proto_ff.RolePlayerMiniInfo miniInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miniInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_miniinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryCharacterMiniCrossServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 srcID = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srcid(), output);
  }

  // optional uint64 dstID = 2;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstid(), output);
  }

  // optional .proto_ff.RolePlayerMiniInfo miniInfo = 3;
  if (has_miniinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->miniinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryCharacterMiniCrossServerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 srcID = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srcid(), target);
  }

  // optional uint64 dstID = 2;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstid(), target);
  }

  // optional .proto_ff.RolePlayerMiniInfo miniInfo = 3;
  if (has_miniinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->miniinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryCharacterMiniCrossServerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 srcID = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // optional uint64 dstID = 2;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

    // optional .proto_ff.RolePlayerMiniInfo miniInfo = 3;
    if (has_miniinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->miniinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCharacterMiniCrossServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCharacterMiniCrossServerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCharacterMiniCrossServerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCharacterMiniCrossServerRsp::MergeFrom(const QueryCharacterMiniCrossServerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
    if (from.has_miniinfo()) {
      mutable_miniinfo()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.miniinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCharacterMiniCrossServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCharacterMiniCrossServerRsp::CopyFrom(const QueryCharacterMiniCrossServerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCharacterMiniCrossServerRsp::IsInitialized() const {

  if (has_miniinfo()) {
    if (!this->miniinfo().IsInitialized()) return false;
  }
  return true;
}

void QueryCharacterMiniCrossServerRsp::Swap(QueryCharacterMiniCrossServerRsp* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(dstid_, other->dstid_);
    std::swap(miniinfo_, other->miniinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCharacterMiniCrossServerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCharacterMiniCrossServerRsp_descriptor_;
  metadata.reflection = QueryCharacterMiniCrossServerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryCharFuncFightCrossReq::kSrcIDFieldNumber;
const int QueryCharFuncFightCrossReq::kDstIDFieldNumber;
#endif  // !_MSC_VER

QueryCharFuncFightCrossReq::QueryCharFuncFightCrossReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryCharFuncFightCrossReq::InitAsDefaultInstance() {
}

QueryCharFuncFightCrossReq::QueryCharFuncFightCrossReq(const QueryCharFuncFightCrossReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryCharFuncFightCrossReq::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCharFuncFightCrossReq::~QueryCharFuncFightCrossReq() {
  SharedDtor();
}

void QueryCharFuncFightCrossReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryCharFuncFightCrossReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCharFuncFightCrossReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCharFuncFightCrossReq_descriptor_;
}

const QueryCharFuncFightCrossReq& QueryCharFuncFightCrossReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

QueryCharFuncFightCrossReq* QueryCharFuncFightCrossReq::default_instance_ = NULL;

QueryCharFuncFightCrossReq* QueryCharFuncFightCrossReq::New() const {
  return new QueryCharFuncFightCrossReq;
}

void QueryCharFuncFightCrossReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCharFuncFightCrossReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 srcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstID;
        break;
      }

      // required uint64 dstID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryCharFuncFightCrossReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 srcID = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srcid(), output);
  }

  // required uint64 dstID = 2;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryCharFuncFightCrossReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 srcID = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srcid(), target);
  }

  // required uint64 dstID = 2;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryCharFuncFightCrossReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 srcID = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // required uint64 dstID = 2;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCharFuncFightCrossReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCharFuncFightCrossReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCharFuncFightCrossReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCharFuncFightCrossReq::MergeFrom(const QueryCharFuncFightCrossReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCharFuncFightCrossReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCharFuncFightCrossReq::CopyFrom(const QueryCharFuncFightCrossReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCharFuncFightCrossReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QueryCharFuncFightCrossReq::Swap(QueryCharFuncFightCrossReq* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(dstid_, other->dstid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCharFuncFightCrossReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCharFuncFightCrossReq_descriptor_;
  metadata.reflection = QueryCharFuncFightCrossReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryCharFuncFightCrossRsp::kRetcodeFieldNumber;
const int QueryCharFuncFightCrossRsp::kSrcIDFieldNumber;
const int QueryCharFuncFightCrossRsp::kDstIDFieldNumber;
const int QueryCharFuncFightCrossRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

QueryCharFuncFightCrossRsp::QueryCharFuncFightCrossRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryCharFuncFightCrossRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::FuncFightProto*>(&::proto_ff::FuncFightProto::default_instance());
}

QueryCharFuncFightCrossRsp::QueryCharFuncFightCrossRsp(const QueryCharFuncFightCrossRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryCharFuncFightCrossRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  srcid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCharFuncFightCrossRsp::~QueryCharFuncFightCrossRsp() {
  SharedDtor();
}

void QueryCharFuncFightCrossRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void QueryCharFuncFightCrossRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCharFuncFightCrossRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCharFuncFightCrossRsp_descriptor_;
}

const QueryCharFuncFightCrossRsp& QueryCharFuncFightCrossRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Query_2eproto();
  return *default_instance_;
}

QueryCharFuncFightCrossRsp* QueryCharFuncFightCrossRsp::default_instance_ = NULL;

QueryCharFuncFightCrossRsp* QueryCharFuncFightCrossRsp::New() const {
  return new QueryCharFuncFightCrossRsp;
}

void QueryCharFuncFightCrossRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    srcid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::FuncFightProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCharFuncFightCrossRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_srcID;
        break;
      }

      // optional uint64 srcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dstID;
        break;
      }

      // optional uint64 dstID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .proto_ff.FuncFightProto info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryCharFuncFightCrossRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional uint64 srcID = 2;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->srcid(), output);
  }

  // optional uint64 dstID = 3;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dstid(), output);
  }

  // optional .proto_ff.FuncFightProto info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryCharFuncFightCrossRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional uint64 srcID = 2;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->srcid(), target);
  }

  // optional uint64 dstID = 3;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dstid(), target);
  }

  // optional .proto_ff.FuncFightProto info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryCharFuncFightCrossRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional uint64 srcID = 2;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // optional uint64 dstID = 3;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

    // optional .proto_ff.FuncFightProto info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCharFuncFightCrossRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCharFuncFightCrossRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCharFuncFightCrossRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCharFuncFightCrossRsp::MergeFrom(const QueryCharFuncFightCrossRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::FuncFightProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCharFuncFightCrossRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCharFuncFightCrossRsp::CopyFrom(const QueryCharFuncFightCrossRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCharFuncFightCrossRsp::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void QueryCharFuncFightCrossRsp::Swap(QueryCharFuncFightCrossRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(srcid_, other->srcid_);
    std::swap(dstid_, other->dstid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCharFuncFightCrossRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCharFuncFightCrossRsp_descriptor_;
  metadata.reflection = QueryCharFuncFightCrossRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
