// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Yanglong.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Yanglong.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_YanglongYanglong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_YanglongYanglong_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_YanglongYanglong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_YanglongYanglong_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_YanglongZadan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_YanglongZadan_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_YanglongZadan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_YanglongZadan_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_YanglongRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_YanglongRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_YanglongRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_YanglongRanking_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fYanglong_2eproto() {
  protobuf_AddDesc_E_5fYanglong_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Yanglong.proto");
  GOOGLE_CHECK(file != NULL);
  E_YanglongYanglong_descriptor_ = file->message_type(0);
  static const int E_YanglongYanglong_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongYanglong, m_projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongYanglong, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongYanglong, m_dupid_),
  };
  E_YanglongYanglong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_YanglongYanglong_descriptor_,
      E_YanglongYanglong::default_instance_,
      E_YanglongYanglong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongYanglong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongYanglong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_YanglongYanglong));
  Sheet_YanglongYanglong_descriptor_ = file->message_type(1);
  static const int Sheet_YanglongYanglong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_YanglongYanglong, e_yanglongyanglong_list_),
  };
  Sheet_YanglongYanglong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_YanglongYanglong_descriptor_,
      Sheet_YanglongYanglong::default_instance_,
      Sheet_YanglongYanglong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_YanglongYanglong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_YanglongYanglong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_YanglongYanglong));
  E_YanglongZadan_descriptor_ = file->message_type(2);
  static const int E_YanglongZadan_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongZadan, m_taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongZadan, m_achievementsubtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongZadan, m_bosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongZadan, m_reachprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongZadan, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongZadan, m_reward_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongZadan, m_linkid_),
  };
  E_YanglongZadan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_YanglongZadan_descriptor_,
      E_YanglongZadan::default_instance_,
      E_YanglongZadan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongZadan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongZadan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_YanglongZadan));
  Sheet_YanglongZadan_descriptor_ = file->message_type(3);
  static const int Sheet_YanglongZadan_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_YanglongZadan, e_yanglongzadan_list_),
  };
  Sheet_YanglongZadan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_YanglongZadan_descriptor_,
      Sheet_YanglongZadan::default_instance_,
      Sheet_YanglongZadan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_YanglongZadan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_YanglongZadan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_YanglongZadan));
  E_YanglongRanking_descriptor_ = file->message_type(4);
  static const int E_YanglongRanking_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongRanking, m_rankingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongRanking, m_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongRanking, m_boxid_),
  };
  E_YanglongRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_YanglongRanking_descriptor_,
      E_YanglongRanking::default_instance_,
      E_YanglongRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_YanglongRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_YanglongRanking));
  Sheet_YanglongRanking_descriptor_ = file->message_type(5);
  static const int Sheet_YanglongRanking_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_YanglongRanking, e_yanglongranking_list_),
  };
  Sheet_YanglongRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_YanglongRanking_descriptor_,
      Sheet_YanglongRanking::default_instance_,
      Sheet_YanglongRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_YanglongRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_YanglongRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_YanglongRanking));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fYanglong_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_YanglongYanglong_descriptor_, &E_YanglongYanglong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_YanglongYanglong_descriptor_, &Sheet_YanglongYanglong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_YanglongZadan_descriptor_, &E_YanglongZadan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_YanglongZadan_descriptor_, &Sheet_YanglongZadan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_YanglongRanking_descriptor_, &E_YanglongRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_YanglongRanking_descriptor_, &Sheet_YanglongRanking::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fYanglong_2eproto() {
  delete E_YanglongYanglong::default_instance_;
  delete E_YanglongYanglong_reflection_;
  delete Sheet_YanglongYanglong::default_instance_;
  delete Sheet_YanglongYanglong_reflection_;
  delete E_YanglongZadan::default_instance_;
  delete E_YanglongZadan_reflection_;
  delete Sheet_YanglongZadan::default_instance_;
  delete Sheet_YanglongZadan_reflection_;
  delete E_YanglongRanking::default_instance_;
  delete E_YanglongRanking_reflection_;
  delete Sheet_YanglongRanking::default_instance_;
  delete Sheet_YanglongRanking_reflection_;
}

void protobuf_AddDesc_E_5fYanglong_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020E_Yanglong.proto\022\010proto_ff\032\025yd_fieldop"
    "tions.proto\"z\n\022E_YanglongYanglong\022!\n\013m_p"
    "rojectID\030\001 \001(\005B\014\302\377\024\010\351\241\271\347\233\256ID\022\"\n\tm_groupI"
    "D\030\002 \001(\005B\017\302\377\024\013\345\211\257\346\234\254\347\273\204ID\022\035\n\007m_dupId\030\003 \001("
    "\005B\014\302\377\024\010\345\211\257\346\234\254ID\"]\n\026Sheet_YanglongYanglon"
    "g\022C\n\027E_YanglongYanglong_List\030\001 \003(\0132\034.pro"
    "to_ff.E_YanglongYanglongB\004\210\301\024\020\"\236\002\n\017E_Yan"
    "glongZadan\022\036\n\010m_taskId\030\001 \001(\003B\014\302\377\024\010\344\273\273\345\212\241"
    "ID\022.\n\024m_achievementSubType\030\002 \001(\005B\020\302\377\024\014\344\272"
    "\213\344\273\266\347\261\273\345\236\213\022\"\n\nm_bossType\030\003 \001(\005B\016\302\377\024\nBOSS"
    "\345\210\206\347\261\273\022#\n\014m_reachPrice\030\004 \001(\005B\r\302\377\024\t\350\276\276\346\210\220"
    "\345\200\274\022\"\n\010m_reward\030\005 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\347\211\251\345\223\201\022"
    ".\n\016m_reward_Value\030\006 \001(\005B\026\302\377\024\022\345\245\226\345\212\261\347\211\251\345\223"
    "\201\346\225\260\351\207\217\022\036\n\010m_linkId\030\007 \001(\005B\014\302\377\024\010\350\267\263\350\275\254ID\""
    "T\n\023Sheet_YanglongZadan\022=\n\024E_YanglongZada"
    "n_List\030\001 \003(\0132\031.proto_ff.E_YanglongZadanB"
    "\004\210\301\024\020\"\201\001\n\021E_YanglongRanking\022\'\n\013m_ranking"
    "ID\030\001 \001(\005B\022\302\377\024\016\346\216\222\345\220\215\347\244\274\345\214\205ID\022 \n\006m_rank\030\002"
    " \001(\005B\020\302\377\024\014\346\216\222\345\220\215\346\235\241\344\273\266\022!\n\007m_boxID\030\003 \001(\005B"
    "\020\302\377\024\014boxl\347\244\274\345\214\205ID\"Z\n\025Sheet_YanglongRanki"
    "ng\022A\n\026E_YanglongRanking_List\030\001 \003(\0132\033.pro"
    "to_ff.E_YanglongRankingB\004\210\301\024\010", 869);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Yanglong.proto", &protobuf_RegisterTypes);
  E_YanglongYanglong::default_instance_ = new E_YanglongYanglong();
  Sheet_YanglongYanglong::default_instance_ = new Sheet_YanglongYanglong();
  E_YanglongZadan::default_instance_ = new E_YanglongZadan();
  Sheet_YanglongZadan::default_instance_ = new Sheet_YanglongZadan();
  E_YanglongRanking::default_instance_ = new E_YanglongRanking();
  Sheet_YanglongRanking::default_instance_ = new Sheet_YanglongRanking();
  E_YanglongYanglong::default_instance_->InitAsDefaultInstance();
  Sheet_YanglongYanglong::default_instance_->InitAsDefaultInstance();
  E_YanglongZadan::default_instance_->InitAsDefaultInstance();
  Sheet_YanglongZadan::default_instance_->InitAsDefaultInstance();
  E_YanglongRanking::default_instance_->InitAsDefaultInstance();
  Sheet_YanglongRanking::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fYanglong_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fYanglong_2eproto {
  StaticDescriptorInitializer_E_5fYanglong_2eproto() {
    protobuf_AddDesc_E_5fYanglong_2eproto();
  }
} static_descriptor_initializer_E_5fYanglong_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_YanglongYanglong::kMProjectIDFieldNumber;
const int E_YanglongYanglong::kMGroupIDFieldNumber;
const int E_YanglongYanglong::kMDupIdFieldNumber;
#endif  // !_MSC_VER

E_YanglongYanglong::E_YanglongYanglong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_YanglongYanglong::InitAsDefaultInstance() {
}

E_YanglongYanglong::E_YanglongYanglong(const E_YanglongYanglong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_YanglongYanglong::SharedCtor() {
  _cached_size_ = 0;
  m_projectid_ = 0;
  m_groupid_ = 0;
  m_dupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_YanglongYanglong::~E_YanglongYanglong() {
  SharedDtor();
}

void E_YanglongYanglong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_YanglongYanglong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_YanglongYanglong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_YanglongYanglong_descriptor_;
}

const E_YanglongYanglong& E_YanglongYanglong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fYanglong_2eproto();
  return *default_instance_;
}

E_YanglongYanglong* E_YanglongYanglong::default_instance_ = NULL;

E_YanglongYanglong* E_YanglongYanglong::New() const {
  return new E_YanglongYanglong;
}

void E_YanglongYanglong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_projectid_ = 0;
    m_groupid_ = 0;
    m_dupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_YanglongYanglong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_projectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_projectid_)));
          set_has_m_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupID;
        break;
      }

      // optional int32 m_groupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_dupId;
        break;
      }

      // optional int32 m_dupId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dupid_)));
          set_has_m_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_YanglongYanglong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_projectID = 1;
  if (has_m_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_projectid(), output);
  }

  // optional int32 m_groupID = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_dupId = 3;
  if (has_m_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_dupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_YanglongYanglong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_projectID = 1;
  if (has_m_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_projectid(), target);
  }

  // optional int32 m_groupID = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_dupId = 3;
  if (has_m_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_dupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_YanglongYanglong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_projectID = 1;
    if (has_m_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_projectid());
    }

    // optional int32 m_groupID = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_dupId = 3;
    if (has_m_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_YanglongYanglong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_YanglongYanglong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_YanglongYanglong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_YanglongYanglong::MergeFrom(const E_YanglongYanglong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_projectid()) {
      set_m_projectid(from.m_projectid());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_dupid()) {
      set_m_dupid(from.m_dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_YanglongYanglong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_YanglongYanglong::CopyFrom(const E_YanglongYanglong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_YanglongYanglong::IsInitialized() const {

  return true;
}

void E_YanglongYanglong::Swap(E_YanglongYanglong* other) {
  if (other != this) {
    std::swap(m_projectid_, other->m_projectid_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_dupid_, other->m_dupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_YanglongYanglong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_YanglongYanglong_descriptor_;
  metadata.reflection = E_YanglongYanglong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_YanglongYanglong::kEYanglongYanglongListFieldNumber;
#endif  // !_MSC_VER

Sheet_YanglongYanglong::Sheet_YanglongYanglong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_YanglongYanglong::InitAsDefaultInstance() {
}

Sheet_YanglongYanglong::Sheet_YanglongYanglong(const Sheet_YanglongYanglong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_YanglongYanglong::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_YanglongYanglong::~Sheet_YanglongYanglong() {
  SharedDtor();
}

void Sheet_YanglongYanglong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_YanglongYanglong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_YanglongYanglong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_YanglongYanglong_descriptor_;
}

const Sheet_YanglongYanglong& Sheet_YanglongYanglong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fYanglong_2eproto();
  return *default_instance_;
}

Sheet_YanglongYanglong* Sheet_YanglongYanglong::default_instance_ = NULL;

Sheet_YanglongYanglong* Sheet_YanglongYanglong::New() const {
  return new Sheet_YanglongYanglong;
}

void Sheet_YanglongYanglong::Clear() {
  e_yanglongyanglong_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_YanglongYanglong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_YanglongYanglong E_YanglongYanglong_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_YanglongYanglong_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_yanglongyanglong_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_YanglongYanglong_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_YanglongYanglong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_YanglongYanglong E_YanglongYanglong_List = 1;
  for (int i = 0; i < this->e_yanglongyanglong_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_yanglongyanglong_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_YanglongYanglong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_YanglongYanglong E_YanglongYanglong_List = 1;
  for (int i = 0; i < this->e_yanglongyanglong_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_yanglongyanglong_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_YanglongYanglong::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_YanglongYanglong E_YanglongYanglong_List = 1;
  total_size += 1 * this->e_yanglongyanglong_list_size();
  for (int i = 0; i < this->e_yanglongyanglong_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_yanglongyanglong_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_YanglongYanglong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_YanglongYanglong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_YanglongYanglong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_YanglongYanglong::MergeFrom(const Sheet_YanglongYanglong& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_yanglongyanglong_list_.MergeFrom(from.e_yanglongyanglong_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_YanglongYanglong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_YanglongYanglong::CopyFrom(const Sheet_YanglongYanglong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_YanglongYanglong::IsInitialized() const {

  return true;
}

void Sheet_YanglongYanglong::Swap(Sheet_YanglongYanglong* other) {
  if (other != this) {
    e_yanglongyanglong_list_.Swap(&other->e_yanglongyanglong_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_YanglongYanglong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_YanglongYanglong_descriptor_;
  metadata.reflection = Sheet_YanglongYanglong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_YanglongZadan::kMTaskIdFieldNumber;
const int E_YanglongZadan::kMAchievementSubTypeFieldNumber;
const int E_YanglongZadan::kMBossTypeFieldNumber;
const int E_YanglongZadan::kMReachPriceFieldNumber;
const int E_YanglongZadan::kMRewardFieldNumber;
const int E_YanglongZadan::kMRewardValueFieldNumber;
const int E_YanglongZadan::kMLinkIdFieldNumber;
#endif  // !_MSC_VER

E_YanglongZadan::E_YanglongZadan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_YanglongZadan::InitAsDefaultInstance() {
}

E_YanglongZadan::E_YanglongZadan(const E_YanglongZadan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_YanglongZadan::SharedCtor() {
  _cached_size_ = 0;
  m_taskid_ = GOOGLE_LONGLONG(0);
  m_achievementsubtype_ = 0;
  m_bosstype_ = 0;
  m_reachprice_ = 0;
  m_reward_ = 0;
  m_reward_value_ = 0;
  m_linkid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_YanglongZadan::~E_YanglongZadan() {
  SharedDtor();
}

void E_YanglongZadan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_YanglongZadan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_YanglongZadan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_YanglongZadan_descriptor_;
}

const E_YanglongZadan& E_YanglongZadan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fYanglong_2eproto();
  return *default_instance_;
}

E_YanglongZadan* E_YanglongZadan::default_instance_ = NULL;

E_YanglongZadan* E_YanglongZadan::New() const {
  return new E_YanglongZadan;
}

void E_YanglongZadan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_taskid_ = GOOGLE_LONGLONG(0);
    m_achievementsubtype_ = 0;
    m_bosstype_ = 0;
    m_reachprice_ = 0;
    m_reward_ = 0;
    m_reward_value_ = 0;
    m_linkid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_YanglongZadan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_taskid_)));
          set_has_m_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_achievementSubType;
        break;
      }

      // optional int32 m_achievementSubType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_achievementSubType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_achievementsubtype_)));
          set_has_m_achievementsubtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_bossType;
        break;
      }

      // optional int32 m_bossType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bossType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bosstype_)));
          set_has_m_bosstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_reachPrice;
        break;
      }

      // optional int32 m_reachPrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reachPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reachprice_)));
          set_has_m_reachprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_reward_Value;
        break;
      }

      // optional int32 m_reward_Value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_value_)));
          set_has_m_reward_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_linkId;
        break;
      }

      // optional int32 m_linkId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_linkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_linkid_)));
          set_has_m_linkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_YanglongZadan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_taskId = 1;
  if (has_m_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_taskid(), output);
  }

  // optional int32 m_achievementSubType = 2;
  if (has_m_achievementsubtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_achievementsubtype(), output);
  }

  // optional int32 m_bossType = 3;
  if (has_m_bosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_bosstype(), output);
  }

  // optional int32 m_reachPrice = 4;
  if (has_m_reachprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_reachprice(), output);
  }

  // optional int32 m_reward = 5;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_reward(), output);
  }

  // optional int32 m_reward_Value = 6;
  if (has_m_reward_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_reward_value(), output);
  }

  // optional int32 m_linkId = 7;
  if (has_m_linkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_linkid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_YanglongZadan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_taskId = 1;
  if (has_m_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_taskid(), target);
  }

  // optional int32 m_achievementSubType = 2;
  if (has_m_achievementsubtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_achievementsubtype(), target);
  }

  // optional int32 m_bossType = 3;
  if (has_m_bosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_bosstype(), target);
  }

  // optional int32 m_reachPrice = 4;
  if (has_m_reachprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_reachprice(), target);
  }

  // optional int32 m_reward = 5;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_reward(), target);
  }

  // optional int32 m_reward_Value = 6;
  if (has_m_reward_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_reward_value(), target);
  }

  // optional int32 m_linkId = 7;
  if (has_m_linkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_linkid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_YanglongZadan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_taskId = 1;
    if (has_m_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_taskid());
    }

    // optional int32 m_achievementSubType = 2;
    if (has_m_achievementsubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_achievementsubtype());
    }

    // optional int32 m_bossType = 3;
    if (has_m_bosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bosstype());
    }

    // optional int32 m_reachPrice = 4;
    if (has_m_reachprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reachprice());
    }

    // optional int32 m_reward = 5;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

    // optional int32 m_reward_Value = 6;
    if (has_m_reward_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward_value());
    }

    // optional int32 m_linkId = 7;
    if (has_m_linkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_linkid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_YanglongZadan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_YanglongZadan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_YanglongZadan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_YanglongZadan::MergeFrom(const E_YanglongZadan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_taskid()) {
      set_m_taskid(from.m_taskid());
    }
    if (from.has_m_achievementsubtype()) {
      set_m_achievementsubtype(from.m_achievementsubtype());
    }
    if (from.has_m_bosstype()) {
      set_m_bosstype(from.m_bosstype());
    }
    if (from.has_m_reachprice()) {
      set_m_reachprice(from.m_reachprice());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
    if (from.has_m_reward_value()) {
      set_m_reward_value(from.m_reward_value());
    }
    if (from.has_m_linkid()) {
      set_m_linkid(from.m_linkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_YanglongZadan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_YanglongZadan::CopyFrom(const E_YanglongZadan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_YanglongZadan::IsInitialized() const {

  return true;
}

void E_YanglongZadan::Swap(E_YanglongZadan* other) {
  if (other != this) {
    std::swap(m_taskid_, other->m_taskid_);
    std::swap(m_achievementsubtype_, other->m_achievementsubtype_);
    std::swap(m_bosstype_, other->m_bosstype_);
    std::swap(m_reachprice_, other->m_reachprice_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(m_reward_value_, other->m_reward_value_);
    std::swap(m_linkid_, other->m_linkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_YanglongZadan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_YanglongZadan_descriptor_;
  metadata.reflection = E_YanglongZadan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_YanglongZadan::kEYanglongZadanListFieldNumber;
#endif  // !_MSC_VER

Sheet_YanglongZadan::Sheet_YanglongZadan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_YanglongZadan::InitAsDefaultInstance() {
}

Sheet_YanglongZadan::Sheet_YanglongZadan(const Sheet_YanglongZadan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_YanglongZadan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_YanglongZadan::~Sheet_YanglongZadan() {
  SharedDtor();
}

void Sheet_YanglongZadan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_YanglongZadan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_YanglongZadan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_YanglongZadan_descriptor_;
}

const Sheet_YanglongZadan& Sheet_YanglongZadan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fYanglong_2eproto();
  return *default_instance_;
}

Sheet_YanglongZadan* Sheet_YanglongZadan::default_instance_ = NULL;

Sheet_YanglongZadan* Sheet_YanglongZadan::New() const {
  return new Sheet_YanglongZadan;
}

void Sheet_YanglongZadan::Clear() {
  e_yanglongzadan_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_YanglongZadan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_YanglongZadan E_YanglongZadan_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_YanglongZadan_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_yanglongzadan_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_YanglongZadan_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_YanglongZadan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_YanglongZadan E_YanglongZadan_List = 1;
  for (int i = 0; i < this->e_yanglongzadan_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_yanglongzadan_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_YanglongZadan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_YanglongZadan E_YanglongZadan_List = 1;
  for (int i = 0; i < this->e_yanglongzadan_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_yanglongzadan_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_YanglongZadan::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_YanglongZadan E_YanglongZadan_List = 1;
  total_size += 1 * this->e_yanglongzadan_list_size();
  for (int i = 0; i < this->e_yanglongzadan_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_yanglongzadan_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_YanglongZadan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_YanglongZadan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_YanglongZadan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_YanglongZadan::MergeFrom(const Sheet_YanglongZadan& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_yanglongzadan_list_.MergeFrom(from.e_yanglongzadan_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_YanglongZadan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_YanglongZadan::CopyFrom(const Sheet_YanglongZadan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_YanglongZadan::IsInitialized() const {

  return true;
}

void Sheet_YanglongZadan::Swap(Sheet_YanglongZadan* other) {
  if (other != this) {
    e_yanglongzadan_list_.Swap(&other->e_yanglongzadan_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_YanglongZadan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_YanglongZadan_descriptor_;
  metadata.reflection = Sheet_YanglongZadan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_YanglongRanking::kMRankingIDFieldNumber;
const int E_YanglongRanking::kMRankFieldNumber;
const int E_YanglongRanking::kMBoxIDFieldNumber;
#endif  // !_MSC_VER

E_YanglongRanking::E_YanglongRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_YanglongRanking::InitAsDefaultInstance() {
}

E_YanglongRanking::E_YanglongRanking(const E_YanglongRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_YanglongRanking::SharedCtor() {
  _cached_size_ = 0;
  m_rankingid_ = 0;
  m_rank_ = 0;
  m_boxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_YanglongRanking::~E_YanglongRanking() {
  SharedDtor();
}

void E_YanglongRanking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_YanglongRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_YanglongRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_YanglongRanking_descriptor_;
}

const E_YanglongRanking& E_YanglongRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fYanglong_2eproto();
  return *default_instance_;
}

E_YanglongRanking* E_YanglongRanking::default_instance_ = NULL;

E_YanglongRanking* E_YanglongRanking::New() const {
  return new E_YanglongRanking;
}

void E_YanglongRanking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rankingid_ = 0;
    m_rank_ = 0;
    m_boxid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_YanglongRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_rankingID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rankingid_)));
          set_has_m_rankingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_rank;
        break;
      }

      // optional int32 m_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rank_)));
          set_has_m_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_boxID;
        break;
      }

      // optional int32 m_boxID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_YanglongRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_rankingID = 1;
  if (has_m_rankingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rankingid(), output);
  }

  // optional int32 m_rank = 2;
  if (has_m_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_rank(), output);
  }

  // optional int32 m_boxID = 3;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_YanglongRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_rankingID = 1;
  if (has_m_rankingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rankingid(), target);
  }

  // optional int32 m_rank = 2;
  if (has_m_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_rank(), target);
  }

  // optional int32 m_boxID = 3;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_YanglongRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_rankingID = 1;
    if (has_m_rankingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rankingid());
    }

    // optional int32 m_rank = 2;
    if (has_m_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rank());
    }

    // optional int32 m_boxID = 3;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_YanglongRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_YanglongRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_YanglongRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_YanglongRanking::MergeFrom(const E_YanglongRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rankingid()) {
      set_m_rankingid(from.m_rankingid());
    }
    if (from.has_m_rank()) {
      set_m_rank(from.m_rank());
    }
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_YanglongRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_YanglongRanking::CopyFrom(const E_YanglongRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_YanglongRanking::IsInitialized() const {

  return true;
}

void E_YanglongRanking::Swap(E_YanglongRanking* other) {
  if (other != this) {
    std::swap(m_rankingid_, other->m_rankingid_);
    std::swap(m_rank_, other->m_rank_);
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_YanglongRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_YanglongRanking_descriptor_;
  metadata.reflection = E_YanglongRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_YanglongRanking::kEYanglongRankingListFieldNumber;
#endif  // !_MSC_VER

Sheet_YanglongRanking::Sheet_YanglongRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_YanglongRanking::InitAsDefaultInstance() {
}

Sheet_YanglongRanking::Sheet_YanglongRanking(const Sheet_YanglongRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_YanglongRanking::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_YanglongRanking::~Sheet_YanglongRanking() {
  SharedDtor();
}

void Sheet_YanglongRanking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_YanglongRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_YanglongRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_YanglongRanking_descriptor_;
}

const Sheet_YanglongRanking& Sheet_YanglongRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fYanglong_2eproto();
  return *default_instance_;
}

Sheet_YanglongRanking* Sheet_YanglongRanking::default_instance_ = NULL;

Sheet_YanglongRanking* Sheet_YanglongRanking::New() const {
  return new Sheet_YanglongRanking;
}

void Sheet_YanglongRanking::Clear() {
  e_yanglongranking_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_YanglongRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_YanglongRanking E_YanglongRanking_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_YanglongRanking_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_yanglongranking_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_YanglongRanking_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_YanglongRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_YanglongRanking E_YanglongRanking_List = 1;
  for (int i = 0; i < this->e_yanglongranking_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_yanglongranking_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_YanglongRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_YanglongRanking E_YanglongRanking_List = 1;
  for (int i = 0; i < this->e_yanglongranking_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_yanglongranking_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_YanglongRanking::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_YanglongRanking E_YanglongRanking_List = 1;
  total_size += 1 * this->e_yanglongranking_list_size();
  for (int i = 0; i < this->e_yanglongranking_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_yanglongranking_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_YanglongRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_YanglongRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_YanglongRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_YanglongRanking::MergeFrom(const Sheet_YanglongRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_yanglongranking_list_.MergeFrom(from.e_yanglongranking_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_YanglongRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_YanglongRanking::CopyFrom(const Sheet_YanglongRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_YanglongRanking::IsInitialized() const {

  return true;
}

void Sheet_YanglongRanking::Swap(Sheet_YanglongRanking* other) {
  if (other != this) {
    e_yanglongranking_list_.Swap(&other->e_yanglongranking_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_YanglongRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_YanglongRanking_descriptor_;
  metadata.reflection = Sheet_YanglongRanking_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
