// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Soul.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Soul.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* NotifySoulModule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySoulModule_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySoulEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySoulEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySoulPool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySoulPool_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySoulTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySoulTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulRecvTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulRecvTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulRecvTaskRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulRecvTaskRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulEntryOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulEntryOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulEntryOptRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulEntryOptRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulPoolOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulPoolOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulPoolOptRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulPoolOptRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Soul_2eproto() {
  protobuf_AddDesc_Soul_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Soul.proto");
  GOOGLE_CHECK(file != NULL);
  NotifySoulModule_descriptor_ = file->message_type(0);
  static const int NotifySoulModule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySoulModule, entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySoulModule, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySoulModule, tasks_),
  };
  NotifySoulModule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySoulModule_descriptor_,
      NotifySoulModule::default_instance_,
      NotifySoulModule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySoulModule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySoulModule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySoulModule));
  NotifySoulEntry_descriptor_ = file->message_type(1);
  static const int NotifySoulEntry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySoulEntry, entry_),
  };
  NotifySoulEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySoulEntry_descriptor_,
      NotifySoulEntry::default_instance_,
      NotifySoulEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySoulEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySoulEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySoulEntry));
  NotifySoulPool_descriptor_ = file->message_type(2);
  static const int NotifySoulPool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySoulPool, pool_),
  };
  NotifySoulPool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySoulPool_descriptor_,
      NotifySoulPool::default_instance_,
      NotifySoulPool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySoulPool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySoulPool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySoulPool));
  NotifySoulTask_descriptor_ = file->message_type(3);
  static const int NotifySoulTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySoulTask, tasks_),
  };
  NotifySoulTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySoulTask_descriptor_,
      NotifySoulTask::default_instance_,
      NotifySoulTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySoulTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySoulTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySoulTask));
  SoulRecvTaskReq_descriptor_ = file->message_type(4);
  static const int SoulRecvTaskReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulRecvTaskReq, id_),
  };
  SoulRecvTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulRecvTaskReq_descriptor_,
      SoulRecvTaskReq::default_instance_,
      SoulRecvTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulRecvTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulRecvTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulRecvTaskReq));
  SoulRecvTaskRsp_descriptor_ = file->message_type(5);
  static const int SoulRecvTaskRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulRecvTaskRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulRecvTaskRsp, id_),
  };
  SoulRecvTaskRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulRecvTaskRsp_descriptor_,
      SoulRecvTaskRsp::default_instance_,
      SoulRecvTaskRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulRecvTaskRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulRecvTaskRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulRecvTaskRsp));
  SoulEntryOptReq_descriptor_ = file->message_type(6);
  static const int SoulEntryOptReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulEntryOptReq, type_),
  };
  SoulEntryOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulEntryOptReq_descriptor_,
      SoulEntryOptReq::default_instance_,
      SoulEntryOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulEntryOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulEntryOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulEntryOptReq));
  SoulEntryOptRsp_descriptor_ = file->message_type(7);
  static const int SoulEntryOptRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulEntryOptRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulEntryOptRsp, type_),
  };
  SoulEntryOptRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulEntryOptRsp_descriptor_,
      SoulEntryOptRsp::default_instance_,
      SoulEntryOptRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulEntryOptRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulEntryOptRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulEntryOptRsp));
  SoulPoolOptReq_descriptor_ = file->message_type(8);
  static const int SoulPoolOptReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulPoolOptReq, type_),
  };
  SoulPoolOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulPoolOptReq_descriptor_,
      SoulPoolOptReq::default_instance_,
      SoulPoolOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulPoolOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulPoolOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulPoolOptReq));
  SoulPoolOptRsp_descriptor_ = file->message_type(9);
  static const int SoulPoolOptRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulPoolOptRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulPoolOptRsp, type_),
  };
  SoulPoolOptRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulPoolOptRsp_descriptor_,
      SoulPoolOptRsp::default_instance_,
      SoulPoolOptRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulPoolOptRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulPoolOptRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulPoolOptRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Soul_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySoulModule_descriptor_, &NotifySoulModule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySoulEntry_descriptor_, &NotifySoulEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySoulPool_descriptor_, &NotifySoulPool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySoulTask_descriptor_, &NotifySoulTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulRecvTaskReq_descriptor_, &SoulRecvTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulRecvTaskRsp_descriptor_, &SoulRecvTaskRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulEntryOptReq_descriptor_, &SoulEntryOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulEntryOptRsp_descriptor_, &SoulEntryOptRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulPoolOptReq_descriptor_, &SoulPoolOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulPoolOptRsp_descriptor_, &SoulPoolOptRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Soul_2eproto() {
  delete NotifySoulModule::default_instance_;
  delete NotifySoulModule_reflection_;
  delete NotifySoulEntry::default_instance_;
  delete NotifySoulEntry_reflection_;
  delete NotifySoulPool::default_instance_;
  delete NotifySoulPool_reflection_;
  delete NotifySoulTask::default_instance_;
  delete NotifySoulTask_reflection_;
  delete SoulRecvTaskReq::default_instance_;
  delete SoulRecvTaskReq_reflection_;
  delete SoulRecvTaskRsp::default_instance_;
  delete SoulRecvTaskRsp_reflection_;
  delete SoulEntryOptReq::default_instance_;
  delete SoulEntryOptReq_reflection_;
  delete SoulEntryOptRsp::default_instance_;
  delete SoulEntryOptRsp_reflection_;
  delete SoulPoolOptReq::default_instance_;
  delete SoulPoolOptReq_reflection_;
  delete SoulPoolOptRsp::default_instance_;
  delete SoulPoolOptRsp_reflection_;
}

void protobuf_AddDesc_Soul_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nSoul.proto\022\010proto_ff\032\tCom.proto\032\017ComDe"
    "fine.proto\"z\n\020NotifySoulModule\022\"\n\005entry\030"
    "\001 \001(\0132\023.proto_ff.SoulEntry\022 \n\004pool\030\002 \001(\013"
    "2\022.proto_ff.SoulPool\022 \n\005tasks\030\003 \003(\0132\021.pr"
    "oto_ff.ComPair\"5\n\017NotifySoulEntry\022\"\n\005ent"
    "ry\030\001 \001(\0132\023.proto_ff.SoulEntry\"2\n\016NotifyS"
    "oulPool\022 \n\004pool\030\001 \001(\0132\022.proto_ff.SoulPoo"
    "l\"2\n\016NotifySoulTask\022 \n\005tasks\030\001 \003(\0132\021.pro"
    "to_ff.ComPair\"\035\n\017SoulRecvTaskReq\022\n\n\002id\030\001"
    " \001(\005\"*\n\017SoulRecvTaskRsp\022\013\n\003ret\030\001 \001(\005\022\n\n\002"
    "id\030\002 \001(\005\"\037\n\017SoulEntryOptReq\022\014\n\004type\030\001 \001("
    "\005\",\n\017SoulEntryOptRsp\022\013\n\003ret\030\001 \001(\005\022\014\n\004typ"
    "e\030\002 \001(\005\"\036\n\016SoulPoolOptReq\022\014\n\004type\030\001 \001(\005\""
    "+\n\016SoulPoolOptRsp\022\013\n\003ret\030\001 \001(\005\022\014\n\004type\030\002"
    " \001(\005", 564);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Soul.proto", &protobuf_RegisterTypes);
  NotifySoulModule::default_instance_ = new NotifySoulModule();
  NotifySoulEntry::default_instance_ = new NotifySoulEntry();
  NotifySoulPool::default_instance_ = new NotifySoulPool();
  NotifySoulTask::default_instance_ = new NotifySoulTask();
  SoulRecvTaskReq::default_instance_ = new SoulRecvTaskReq();
  SoulRecvTaskRsp::default_instance_ = new SoulRecvTaskRsp();
  SoulEntryOptReq::default_instance_ = new SoulEntryOptReq();
  SoulEntryOptRsp::default_instance_ = new SoulEntryOptRsp();
  SoulPoolOptReq::default_instance_ = new SoulPoolOptReq();
  SoulPoolOptRsp::default_instance_ = new SoulPoolOptRsp();
  NotifySoulModule::default_instance_->InitAsDefaultInstance();
  NotifySoulEntry::default_instance_->InitAsDefaultInstance();
  NotifySoulPool::default_instance_->InitAsDefaultInstance();
  NotifySoulTask::default_instance_->InitAsDefaultInstance();
  SoulRecvTaskReq::default_instance_->InitAsDefaultInstance();
  SoulRecvTaskRsp::default_instance_->InitAsDefaultInstance();
  SoulEntryOptReq::default_instance_->InitAsDefaultInstance();
  SoulEntryOptRsp::default_instance_->InitAsDefaultInstance();
  SoulPoolOptReq::default_instance_->InitAsDefaultInstance();
  SoulPoolOptRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Soul_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Soul_2eproto {
  StaticDescriptorInitializer_Soul_2eproto() {
    protobuf_AddDesc_Soul_2eproto();
  }
} static_descriptor_initializer_Soul_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NotifySoulModule::kEntryFieldNumber;
const int NotifySoulModule::kPoolFieldNumber;
const int NotifySoulModule::kTasksFieldNumber;
#endif  // !_MSC_VER

NotifySoulModule::NotifySoulModule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifySoulModule::InitAsDefaultInstance() {
  entry_ = const_cast< ::proto_ff::SoulEntry*>(&::proto_ff::SoulEntry::default_instance());
  pool_ = const_cast< ::proto_ff::SoulPool*>(&::proto_ff::SoulPool::default_instance());
}

NotifySoulModule::NotifySoulModule(const NotifySoulModule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifySoulModule::SharedCtor() {
  _cached_size_ = 0;
  entry_ = NULL;
  pool_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySoulModule::~NotifySoulModule() {
  SharedDtor();
}

void NotifySoulModule::SharedDtor() {
  if (this != default_instance_) {
    delete entry_;
    delete pool_;
  }
}

void NotifySoulModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySoulModule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySoulModule_descriptor_;
}

const NotifySoulModule& NotifySoulModule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Soul_2eproto();
  return *default_instance_;
}

NotifySoulModule* NotifySoulModule::default_instance_ = NULL;

NotifySoulModule* NotifySoulModule::New() const {
  return new NotifySoulModule;
}

void NotifySoulModule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_entry()) {
      if (entry_ != NULL) entry_->::proto_ff::SoulEntry::Clear();
    }
    if (has_pool()) {
      if (pool_ != NULL) pool_->::proto_ff::SoulPool::Clear();
    }
  }
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySoulModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.SoulEntry entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pool;
        break;
      }

      // optional .proto_ff.SoulPool pool = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pool()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tasks;
        break;
      }

      // repeated .proto_ff.ComPair tasks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifySoulModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.SoulEntry entry = 1;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(), output);
  }

  // optional .proto_ff.SoulPool pool = 2;
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pool(), output);
  }

  // repeated .proto_ff.ComPair tasks = 3;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifySoulModule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.SoulEntry entry = 1;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(), target);
  }

  // optional .proto_ff.SoulPool pool = 2;
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pool(), target);
  }

  // repeated .proto_ff.ComPair tasks = 3;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifySoulModule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.SoulEntry entry = 1;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entry());
    }

    // optional .proto_ff.SoulPool pool = 2;
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pool());
    }

  }
  // repeated .proto_ff.ComPair tasks = 3;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySoulModule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySoulModule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySoulModule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySoulModule::MergeFrom(const NotifySoulModule& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entry()) {
      mutable_entry()->::proto_ff::SoulEntry::MergeFrom(from.entry());
    }
    if (from.has_pool()) {
      mutable_pool()->::proto_ff::SoulPool::MergeFrom(from.pool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySoulModule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySoulModule::CopyFrom(const NotifySoulModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySoulModule::IsInitialized() const {

  return true;
}

void NotifySoulModule::Swap(NotifySoulModule* other) {
  if (other != this) {
    std::swap(entry_, other->entry_);
    std::swap(pool_, other->pool_);
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySoulModule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySoulModule_descriptor_;
  metadata.reflection = NotifySoulModule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySoulEntry::kEntryFieldNumber;
#endif  // !_MSC_VER

NotifySoulEntry::NotifySoulEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifySoulEntry::InitAsDefaultInstance() {
  entry_ = const_cast< ::proto_ff::SoulEntry*>(&::proto_ff::SoulEntry::default_instance());
}

NotifySoulEntry::NotifySoulEntry(const NotifySoulEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifySoulEntry::SharedCtor() {
  _cached_size_ = 0;
  entry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySoulEntry::~NotifySoulEntry() {
  SharedDtor();
}

void NotifySoulEntry::SharedDtor() {
  if (this != default_instance_) {
    delete entry_;
  }
}

void NotifySoulEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySoulEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySoulEntry_descriptor_;
}

const NotifySoulEntry& NotifySoulEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Soul_2eproto();
  return *default_instance_;
}

NotifySoulEntry* NotifySoulEntry::default_instance_ = NULL;

NotifySoulEntry* NotifySoulEntry::New() const {
  return new NotifySoulEntry;
}

void NotifySoulEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_entry()) {
      if (entry_ != NULL) entry_->::proto_ff::SoulEntry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySoulEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.SoulEntry entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifySoulEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.SoulEntry entry = 1;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifySoulEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.SoulEntry entry = 1;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifySoulEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.SoulEntry entry = 1;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySoulEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySoulEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySoulEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySoulEntry::MergeFrom(const NotifySoulEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entry()) {
      mutable_entry()->::proto_ff::SoulEntry::MergeFrom(from.entry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySoulEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySoulEntry::CopyFrom(const NotifySoulEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySoulEntry::IsInitialized() const {

  return true;
}

void NotifySoulEntry::Swap(NotifySoulEntry* other) {
  if (other != this) {
    std::swap(entry_, other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySoulEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySoulEntry_descriptor_;
  metadata.reflection = NotifySoulEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySoulPool::kPoolFieldNumber;
#endif  // !_MSC_VER

NotifySoulPool::NotifySoulPool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifySoulPool::InitAsDefaultInstance() {
  pool_ = const_cast< ::proto_ff::SoulPool*>(&::proto_ff::SoulPool::default_instance());
}

NotifySoulPool::NotifySoulPool(const NotifySoulPool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifySoulPool::SharedCtor() {
  _cached_size_ = 0;
  pool_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySoulPool::~NotifySoulPool() {
  SharedDtor();
}

void NotifySoulPool::SharedDtor() {
  if (this != default_instance_) {
    delete pool_;
  }
}

void NotifySoulPool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySoulPool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySoulPool_descriptor_;
}

const NotifySoulPool& NotifySoulPool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Soul_2eproto();
  return *default_instance_;
}

NotifySoulPool* NotifySoulPool::default_instance_ = NULL;

NotifySoulPool* NotifySoulPool::New() const {
  return new NotifySoulPool;
}

void NotifySoulPool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pool()) {
      if (pool_ != NULL) pool_->::proto_ff::SoulPool::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySoulPool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.SoulPool pool = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pool()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifySoulPool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.SoulPool pool = 1;
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pool(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifySoulPool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.SoulPool pool = 1;
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pool(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifySoulPool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.SoulPool pool = 1;
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pool());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySoulPool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySoulPool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySoulPool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySoulPool::MergeFrom(const NotifySoulPool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pool()) {
      mutable_pool()->::proto_ff::SoulPool::MergeFrom(from.pool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySoulPool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySoulPool::CopyFrom(const NotifySoulPool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySoulPool::IsInitialized() const {

  return true;
}

void NotifySoulPool::Swap(NotifySoulPool* other) {
  if (other != this) {
    std::swap(pool_, other->pool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySoulPool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySoulPool_descriptor_;
  metadata.reflection = NotifySoulPool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySoulTask::kTasksFieldNumber;
#endif  // !_MSC_VER

NotifySoulTask::NotifySoulTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifySoulTask::InitAsDefaultInstance() {
}

NotifySoulTask::NotifySoulTask(const NotifySoulTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifySoulTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySoulTask::~NotifySoulTask() {
  SharedDtor();
}

void NotifySoulTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifySoulTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySoulTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySoulTask_descriptor_;
}

const NotifySoulTask& NotifySoulTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Soul_2eproto();
  return *default_instance_;
}

NotifySoulTask* NotifySoulTask::default_instance_ = NULL;

NotifySoulTask* NotifySoulTask::New() const {
  return new NotifySoulTask;
}

void NotifySoulTask::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySoulTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifySoulTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifySoulTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifySoulTask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ComPair tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySoulTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySoulTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySoulTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySoulTask::MergeFrom(const NotifySoulTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySoulTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySoulTask::CopyFrom(const NotifySoulTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySoulTask::IsInitialized() const {

  return true;
}

void NotifySoulTask::Swap(NotifySoulTask* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySoulTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySoulTask_descriptor_;
  metadata.reflection = NotifySoulTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoulRecvTaskReq::kIdFieldNumber;
#endif  // !_MSC_VER

SoulRecvTaskReq::SoulRecvTaskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulRecvTaskReq::InitAsDefaultInstance() {
}

SoulRecvTaskReq::SoulRecvTaskReq(const SoulRecvTaskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulRecvTaskReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulRecvTaskReq::~SoulRecvTaskReq() {
  SharedDtor();
}

void SoulRecvTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoulRecvTaskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulRecvTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulRecvTaskReq_descriptor_;
}

const SoulRecvTaskReq& SoulRecvTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Soul_2eproto();
  return *default_instance_;
}

SoulRecvTaskReq* SoulRecvTaskReq::default_instance_ = NULL;

SoulRecvTaskReq* SoulRecvTaskReq::New() const {
  return new SoulRecvTaskReq;
}

void SoulRecvTaskReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulRecvTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoulRecvTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulRecvTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulRecvTaskReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulRecvTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulRecvTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulRecvTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulRecvTaskReq::MergeFrom(const SoulRecvTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulRecvTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulRecvTaskReq::CopyFrom(const SoulRecvTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulRecvTaskReq::IsInitialized() const {

  return true;
}

void SoulRecvTaskReq::Swap(SoulRecvTaskReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulRecvTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulRecvTaskReq_descriptor_;
  metadata.reflection = SoulRecvTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoulRecvTaskRsp::kRetFieldNumber;
const int SoulRecvTaskRsp::kIdFieldNumber;
#endif  // !_MSC_VER

SoulRecvTaskRsp::SoulRecvTaskRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulRecvTaskRsp::InitAsDefaultInstance() {
}

SoulRecvTaskRsp::SoulRecvTaskRsp(const SoulRecvTaskRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulRecvTaskRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulRecvTaskRsp::~SoulRecvTaskRsp() {
  SharedDtor();
}

void SoulRecvTaskRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoulRecvTaskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulRecvTaskRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulRecvTaskRsp_descriptor_;
}

const SoulRecvTaskRsp& SoulRecvTaskRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Soul_2eproto();
  return *default_instance_;
}

SoulRecvTaskRsp* SoulRecvTaskRsp::default_instance_ = NULL;

SoulRecvTaskRsp* SoulRecvTaskRsp::New() const {
  return new SoulRecvTaskRsp;
}

void SoulRecvTaskRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulRecvTaskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoulRecvTaskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulRecvTaskRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulRecvTaskRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulRecvTaskRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulRecvTaskRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulRecvTaskRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulRecvTaskRsp::MergeFrom(const SoulRecvTaskRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulRecvTaskRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulRecvTaskRsp::CopyFrom(const SoulRecvTaskRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulRecvTaskRsp::IsInitialized() const {

  return true;
}

void SoulRecvTaskRsp::Swap(SoulRecvTaskRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulRecvTaskRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulRecvTaskRsp_descriptor_;
  metadata.reflection = SoulRecvTaskRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoulEntryOptReq::kTypeFieldNumber;
#endif  // !_MSC_VER

SoulEntryOptReq::SoulEntryOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulEntryOptReq::InitAsDefaultInstance() {
}

SoulEntryOptReq::SoulEntryOptReq(const SoulEntryOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulEntryOptReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulEntryOptReq::~SoulEntryOptReq() {
  SharedDtor();
}

void SoulEntryOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoulEntryOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulEntryOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulEntryOptReq_descriptor_;
}

const SoulEntryOptReq& SoulEntryOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Soul_2eproto();
  return *default_instance_;
}

SoulEntryOptReq* SoulEntryOptReq::default_instance_ = NULL;

SoulEntryOptReq* SoulEntryOptReq::New() const {
  return new SoulEntryOptReq;
}

void SoulEntryOptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulEntryOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoulEntryOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulEntryOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulEntryOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulEntryOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulEntryOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulEntryOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulEntryOptReq::MergeFrom(const SoulEntryOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulEntryOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulEntryOptReq::CopyFrom(const SoulEntryOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulEntryOptReq::IsInitialized() const {

  return true;
}

void SoulEntryOptReq::Swap(SoulEntryOptReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulEntryOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulEntryOptReq_descriptor_;
  metadata.reflection = SoulEntryOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoulEntryOptRsp::kRetFieldNumber;
const int SoulEntryOptRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

SoulEntryOptRsp::SoulEntryOptRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulEntryOptRsp::InitAsDefaultInstance() {
}

SoulEntryOptRsp::SoulEntryOptRsp(const SoulEntryOptRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulEntryOptRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulEntryOptRsp::~SoulEntryOptRsp() {
  SharedDtor();
}

void SoulEntryOptRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoulEntryOptRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulEntryOptRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulEntryOptRsp_descriptor_;
}

const SoulEntryOptRsp& SoulEntryOptRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Soul_2eproto();
  return *default_instance_;
}

SoulEntryOptRsp* SoulEntryOptRsp::default_instance_ = NULL;

SoulEntryOptRsp* SoulEntryOptRsp::New() const {
  return new SoulEntryOptRsp;
}

void SoulEntryOptRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulEntryOptRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoulEntryOptRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulEntryOptRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulEntryOptRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulEntryOptRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulEntryOptRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulEntryOptRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulEntryOptRsp::MergeFrom(const SoulEntryOptRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulEntryOptRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulEntryOptRsp::CopyFrom(const SoulEntryOptRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulEntryOptRsp::IsInitialized() const {

  return true;
}

void SoulEntryOptRsp::Swap(SoulEntryOptRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulEntryOptRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulEntryOptRsp_descriptor_;
  metadata.reflection = SoulEntryOptRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoulPoolOptReq::kTypeFieldNumber;
#endif  // !_MSC_VER

SoulPoolOptReq::SoulPoolOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulPoolOptReq::InitAsDefaultInstance() {
}

SoulPoolOptReq::SoulPoolOptReq(const SoulPoolOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulPoolOptReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulPoolOptReq::~SoulPoolOptReq() {
  SharedDtor();
}

void SoulPoolOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoulPoolOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulPoolOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulPoolOptReq_descriptor_;
}

const SoulPoolOptReq& SoulPoolOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Soul_2eproto();
  return *default_instance_;
}

SoulPoolOptReq* SoulPoolOptReq::default_instance_ = NULL;

SoulPoolOptReq* SoulPoolOptReq::New() const {
  return new SoulPoolOptReq;
}

void SoulPoolOptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulPoolOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoulPoolOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulPoolOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulPoolOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulPoolOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulPoolOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulPoolOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulPoolOptReq::MergeFrom(const SoulPoolOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulPoolOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulPoolOptReq::CopyFrom(const SoulPoolOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulPoolOptReq::IsInitialized() const {

  return true;
}

void SoulPoolOptReq::Swap(SoulPoolOptReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulPoolOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulPoolOptReq_descriptor_;
  metadata.reflection = SoulPoolOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoulPoolOptRsp::kRetFieldNumber;
const int SoulPoolOptRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

SoulPoolOptRsp::SoulPoolOptRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulPoolOptRsp::InitAsDefaultInstance() {
}

SoulPoolOptRsp::SoulPoolOptRsp(const SoulPoolOptRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulPoolOptRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulPoolOptRsp::~SoulPoolOptRsp() {
  SharedDtor();
}

void SoulPoolOptRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoulPoolOptRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulPoolOptRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulPoolOptRsp_descriptor_;
}

const SoulPoolOptRsp& SoulPoolOptRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Soul_2eproto();
  return *default_instance_;
}

SoulPoolOptRsp* SoulPoolOptRsp::default_instance_ = NULL;

SoulPoolOptRsp* SoulPoolOptRsp::New() const {
  return new SoulPoolOptRsp;
}

void SoulPoolOptRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulPoolOptRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoulPoolOptRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulPoolOptRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulPoolOptRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulPoolOptRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulPoolOptRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulPoolOptRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulPoolOptRsp::MergeFrom(const SoulPoolOptRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulPoolOptRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulPoolOptRsp::CopyFrom(const SoulPoolOptRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulPoolOptRsp::IsInitialized() const {

  return true;
}

void SoulPoolOptRsp::Swap(SoulPoolOptRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulPoolOptRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulPoolOptRsp_descriptor_;
  metadata.reflection = SoulPoolOptRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
