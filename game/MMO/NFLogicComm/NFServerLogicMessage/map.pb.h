// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#ifndef PROTOBUF_map_2eproto__INCLUDED
#define PROTOBUF_map_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_map_2eproto();
void protobuf_AssignDesc_map_2eproto();
void protobuf_ShutdownFile_map_2eproto();

class mapmap;
class Sheet_mapmap;
class mapitemdrop;
class Sheet_mapitemdrop;
class mapdestroyitem;
class Sheet_mapdestroyitem;

// ===================================================================

class mapmap : public ::google::protobuf::Message {
 public:
  mapmap();
  virtual ~mapmap();

  mapmap(const mapmap& from);

  inline mapmap& operator=(const mapmap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mapmap& default_instance();

  void Swap(mapmap* other);

  // implements Message ----------------------------------------------

  mapmap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mapmap& from);
  void MergeFrom(const mapmap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 mapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::int64 mapid() const;
  inline void set_mapid(::google::protobuf::int64 value);

  // optional int32 levelLimit = 2;
  inline bool has_levellimit() const;
  inline void clear_levellimit();
  static const int kLevelLimitFieldNumber = 2;
  inline ::google::protobuf::int32 levellimit() const;
  inline void set_levellimit(::google::protobuf::int32 value);

  // optional string adviceLv = 3;
  inline bool has_advicelv() const;
  inline void clear_advicelv();
  static const int kAdviceLvFieldNumber = 3;
  inline const ::std::string& advicelv() const;
  inline void set_advicelv(const ::std::string& value);
  inline void set_advicelv(const char* value);
  inline void set_advicelv(const char* value, size_t size);
  inline ::std::string* mutable_advicelv();
  inline ::std::string* release_advicelv();
  inline void set_allocated_advicelv(::std::string* advicelv);

  // optional int32 mapType = 4;
  inline bool has_maptype() const;
  inline void clear_maptype();
  static const int kMapTypeFieldNumber = 4;
  inline ::google::protobuf::int32 maptype() const;
  inline void set_maptype(::google::protobuf::int32 value);

  // optional int32 clearanceTime = 5;
  inline bool has_clearancetime() const;
  inline void clear_clearancetime();
  static const int kClearanceTimeFieldNumber = 5;
  inline ::google::protobuf::int32 clearancetime() const;
  inline void set_clearancetime(::google::protobuf::int32 value);

  // optional int32 mapSubType = 6;
  inline bool has_mapsubtype() const;
  inline void clear_mapsubtype();
  static const int kMapSubTypeFieldNumber = 6;
  inline ::google::protobuf::int32 mapsubtype() const;
  inline void set_mapsubtype(::google::protobuf::int32 value);

  // optional int32 mapPkmode = 7;
  inline bool has_mappkmode() const;
  inline void clear_mappkmode();
  static const int kMapPkmodeFieldNumber = 7;
  inline ::google::protobuf::int32 mappkmode() const;
  inline void set_mappkmode(::google::protobuf::int32 value);

  // optional int32 pklock = 8;
  inline bool has_pklock() const;
  inline void clear_pklock();
  static const int kPklockFieldNumber = 8;
  inline ::google::protobuf::int32 pklock() const;
  inline void set_pklock(::google::protobuf::int32 value);

  // optional int32 pk = 9;
  inline bool has_pk() const;
  inline void clear_pk();
  static const int kPkFieldNumber = 9;
  inline ::google::protobuf::int32 pk() const;
  inline void set_pk(::google::protobuf::int32 value);

  // optional int32 killValue = 10;
  inline bool has_killvalue() const;
  inline void clear_killvalue();
  static const int kKillValueFieldNumber = 10;
  inline ::google::protobuf::int32 killvalue() const;
  inline void set_killvalue(::google::protobuf::int32 value);

  // optional int32 BanGroup = 11;
  inline bool has_bangroup() const;
  inline void clear_bangroup();
  static const int kBanGroupFieldNumber = 11;
  inline ::google::protobuf::int32 bangroup() const;
  inline void set_bangroup(::google::protobuf::int32 value);

  // optional int32 reviveTime = 12;
  inline bool has_revivetime() const;
  inline void clear_revivetime();
  static const int kReviveTimeFieldNumber = 12;
  inline ::google::protobuf::int32 revivetime() const;
  inline void set_revivetime(::google::protobuf::int32 value);

  // optional int32 mapWide = 13;
  inline bool has_mapwide() const;
  inline void clear_mapwide();
  static const int kMapWideFieldNumber = 13;
  inline ::google::protobuf::int32 mapwide() const;
  inline void set_mapwide(::google::protobuf::int32 value);

  // optional int32 mapHeight = 14;
  inline bool has_mapheight() const;
  inline void clear_mapheight();
  static const int kMapHeightFieldNumber = 14;
  inline ::google::protobuf::int32 mapheight() const;
  inline void set_mapheight(::google::protobuf::int32 value);

  // optional string mapResources = 15;
  inline bool has_mapresources() const;
  inline void clear_mapresources();
  static const int kMapResourcesFieldNumber = 15;
  inline const ::std::string& mapresources() const;
  inline void set_mapresources(const ::std::string& value);
  inline void set_mapresources(const char* value);
  inline void set_mapresources(const char* value, size_t size);
  inline ::std::string* mutable_mapresources();
  inline ::std::string* release_mapresources();
  inline void set_allocated_mapresources(::std::string* mapresources);

  // optional int64 reviveSkill = 16;
  inline bool has_reviveskill() const;
  inline void clear_reviveskill();
  static const int kReviveSkillFieldNumber = 16;
  inline ::google::protobuf::int64 reviveskill() const;
  inline void set_reviveskill(::google::protobuf::int64 value);

  // optional int32 reviveInPlaceType = 17;
  inline bool has_reviveinplacetype() const;
  inline void clear_reviveinplacetype();
  static const int kReviveInPlaceTypeFieldNumber = 17;
  inline ::google::protobuf::int32 reviveinplacetype() const;
  inline void set_reviveinplacetype(::google::protobuf::int32 value);

  // optional int32 isHangUp = 18;
  inline bool has_ishangup() const;
  inline void clear_ishangup();
  static const int kIsHangUpFieldNumber = 18;
  inline ::google::protobuf::int32 ishangup() const;
  inline void set_ishangup(::google::protobuf::int32 value);

  // optional int32 itemDropType = 19;
  inline bool has_itemdroptype() const;
  inline void clear_itemdroptype();
  static const int kItemDropTypeFieldNumber = 19;
  inline ::google::protobuf::int32 itemdroptype() const;
  inline void set_itemdroptype(::google::protobuf::int32 value);

  // optional string itemDropID = 20;
  inline bool has_itemdropid() const;
  inline void clear_itemdropid();
  static const int kItemDropIDFieldNumber = 20;
  inline const ::std::string& itemdropid() const;
  inline void set_itemdropid(const ::std::string& value);
  inline void set_itemdropid(const char* value);
  inline void set_itemdropid(const char* value, size_t size);
  inline ::std::string* mutable_itemdropid();
  inline ::std::string* release_itemdropid();
  inline void set_allocated_itemdropid(::std::string* itemdropid);

  // optional int64 linkOffLine = 21;
  inline bool has_linkoffline() const;
  inline void clear_linkoffline();
  static const int kLinkOffLineFieldNumber = 21;
  inline ::google::protobuf::int64 linkoffline() const;
  inline void set_linkoffline(::google::protobuf::int64 value);

  // optional int32 banOnHook = 22;
  inline bool has_banonhook() const;
  inline void clear_banonhook();
  static const int kBanOnHookFieldNumber = 22;
  inline ::google::protobuf::int32 banonhook() const;
  inline void set_banonhook(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.mapmap)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_levellimit();
  inline void clear_has_levellimit();
  inline void set_has_advicelv();
  inline void clear_has_advicelv();
  inline void set_has_maptype();
  inline void clear_has_maptype();
  inline void set_has_clearancetime();
  inline void clear_has_clearancetime();
  inline void set_has_mapsubtype();
  inline void clear_has_mapsubtype();
  inline void set_has_mappkmode();
  inline void clear_has_mappkmode();
  inline void set_has_pklock();
  inline void clear_has_pklock();
  inline void set_has_pk();
  inline void clear_has_pk();
  inline void set_has_killvalue();
  inline void clear_has_killvalue();
  inline void set_has_bangroup();
  inline void clear_has_bangroup();
  inline void set_has_revivetime();
  inline void clear_has_revivetime();
  inline void set_has_mapwide();
  inline void clear_has_mapwide();
  inline void set_has_mapheight();
  inline void clear_has_mapheight();
  inline void set_has_mapresources();
  inline void clear_has_mapresources();
  inline void set_has_reviveskill();
  inline void clear_has_reviveskill();
  inline void set_has_reviveinplacetype();
  inline void clear_has_reviveinplacetype();
  inline void set_has_ishangup();
  inline void clear_has_ishangup();
  inline void set_has_itemdroptype();
  inline void clear_has_itemdroptype();
  inline void set_has_itemdropid();
  inline void clear_has_itemdropid();
  inline void set_has_linkoffline();
  inline void clear_has_linkoffline();
  inline void set_has_banonhook();
  inline void clear_has_banonhook();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 mapid_;
  ::std::string* advicelv_;
  ::google::protobuf::int32 levellimit_;
  ::google::protobuf::int32 maptype_;
  ::google::protobuf::int32 clearancetime_;
  ::google::protobuf::int32 mapsubtype_;
  ::google::protobuf::int32 mappkmode_;
  ::google::protobuf::int32 pklock_;
  ::google::protobuf::int32 pk_;
  ::google::protobuf::int32 killvalue_;
  ::google::protobuf::int32 bangroup_;
  ::google::protobuf::int32 revivetime_;
  ::google::protobuf::int32 mapwide_;
  ::google::protobuf::int32 mapheight_;
  ::std::string* mapresources_;
  ::google::protobuf::int64 reviveskill_;
  ::google::protobuf::int32 reviveinplacetype_;
  ::google::protobuf::int32 ishangup_;
  ::std::string* itemdropid_;
  ::google::protobuf::int32 itemdroptype_;
  ::google::protobuf::int32 banonhook_;
  ::google::protobuf::int64 linkoffline_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static mapmap* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_mapmap : public ::google::protobuf::Message {
 public:
  Sheet_mapmap();
  virtual ~Sheet_mapmap();

  Sheet_mapmap(const Sheet_mapmap& from);

  inline Sheet_mapmap& operator=(const Sheet_mapmap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_mapmap& default_instance();

  void Swap(Sheet_mapmap* other);

  // implements Message ----------------------------------------------

  Sheet_mapmap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_mapmap& from);
  void MergeFrom(const Sheet_mapmap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.mapmap mapmap_List = 1;
  inline int mapmap_list_size() const;
  inline void clear_mapmap_list();
  static const int kMapmapListFieldNumber = 1;
  inline const ::proto_ff::mapmap& mapmap_list(int index) const;
  inline ::proto_ff::mapmap* mutable_mapmap_list(int index);
  inline ::proto_ff::mapmap* add_mapmap_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::mapmap >&
      mapmap_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::mapmap >*
      mutable_mapmap_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_mapmap)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::mapmap > mapmap_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Sheet_mapmap* default_instance_;
};
// -------------------------------------------------------------------

class mapitemdrop : public ::google::protobuf::Message {
 public:
  mapitemdrop();
  virtual ~mapitemdrop();

  mapitemdrop(const mapitemdrop& from);

  inline mapitemdrop& operator=(const mapitemdrop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mapitemdrop& default_instance();

  void Swap(mapitemdrop* other);

  // implements Message ----------------------------------------------

  mapitemdrop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mapitemdrop& from);
  void MergeFrom(const mapitemdrop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemDropID = 1;
  inline bool has_itemdropid() const;
  inline void clear_itemdropid();
  static const int kItemDropIDFieldNumber = 1;
  inline ::google::protobuf::int32 itemdropid() const;
  inline void set_itemdropid(::google::protobuf::int32 value);

  // optional int32 dropType = 2;
  inline bool has_droptype() const;
  inline void clear_droptype();
  static const int kDropTypeFieldNumber = 2;
  inline ::google::protobuf::int32 droptype() const;
  inline void set_droptype(::google::protobuf::int32 value);

  // optional int32 odds = 3;
  inline bool has_odds() const;
  inline void clear_odds();
  static const int kOddsFieldNumber = 3;
  inline ::google::protobuf::int32 odds() const;
  inline void set_odds(::google::protobuf::int32 value);

  // optional int32 dropvaluea = 4;
  inline bool has_dropvaluea() const;
  inline void clear_dropvaluea();
  static const int kDropvalueaFieldNumber = 4;
  inline ::google::protobuf::int32 dropvaluea() const;
  inline void set_dropvaluea(::google::protobuf::int32 value);

  // optional int32 dropvalueb = 5;
  inline bool has_dropvalueb() const;
  inline void clear_dropvalueb();
  static const int kDropvaluebFieldNumber = 5;
  inline ::google::protobuf::int32 dropvalueb() const;
  inline void set_dropvalueb(::google::protobuf::int32 value);

  // optional int32 dropvaluec = 6;
  inline bool has_dropvaluec() const;
  inline void clear_dropvaluec();
  static const int kDropvaluecFieldNumber = 6;
  inline ::google::protobuf::int32 dropvaluec() const;
  inline void set_dropvaluec(::google::protobuf::int32 value);

  // optional int32 dropvalued = 7;
  inline bool has_dropvalued() const;
  inline void clear_dropvalued();
  static const int kDropvaluedFieldNumber = 7;
  inline ::google::protobuf::int32 dropvalued() const;
  inline void set_dropvalued(::google::protobuf::int32 value);

  // optional int32 dropvaluee = 8;
  inline bool has_dropvaluee() const;
  inline void clear_dropvaluee();
  static const int kDropvalueeFieldNumber = 8;
  inline ::google::protobuf::int32 dropvaluee() const;
  inline void set_dropvaluee(::google::protobuf::int32 value);

  // optional int32 dropvaluef = 9;
  inline bool has_dropvaluef() const;
  inline void clear_dropvaluef();
  static const int kDropvaluefFieldNumber = 9;
  inline ::google::protobuf::int32 dropvaluef() const;
  inline void set_dropvaluef(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.mapitemdrop)
 private:
  inline void set_has_itemdropid();
  inline void clear_has_itemdropid();
  inline void set_has_droptype();
  inline void clear_has_droptype();
  inline void set_has_odds();
  inline void clear_has_odds();
  inline void set_has_dropvaluea();
  inline void clear_has_dropvaluea();
  inline void set_has_dropvalueb();
  inline void clear_has_dropvalueb();
  inline void set_has_dropvaluec();
  inline void clear_has_dropvaluec();
  inline void set_has_dropvalued();
  inline void clear_has_dropvalued();
  inline void set_has_dropvaluee();
  inline void clear_has_dropvaluee();
  inline void set_has_dropvaluef();
  inline void clear_has_dropvaluef();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemdropid_;
  ::google::protobuf::int32 droptype_;
  ::google::protobuf::int32 odds_;
  ::google::protobuf::int32 dropvaluea_;
  ::google::protobuf::int32 dropvalueb_;
  ::google::protobuf::int32 dropvaluec_;
  ::google::protobuf::int32 dropvalued_;
  ::google::protobuf::int32 dropvaluee_;
  ::google::protobuf::int32 dropvaluef_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static mapitemdrop* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_mapitemdrop : public ::google::protobuf::Message {
 public:
  Sheet_mapitemdrop();
  virtual ~Sheet_mapitemdrop();

  Sheet_mapitemdrop(const Sheet_mapitemdrop& from);

  inline Sheet_mapitemdrop& operator=(const Sheet_mapitemdrop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_mapitemdrop& default_instance();

  void Swap(Sheet_mapitemdrop* other);

  // implements Message ----------------------------------------------

  Sheet_mapitemdrop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_mapitemdrop& from);
  void MergeFrom(const Sheet_mapitemdrop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.mapitemdrop mapitemdrop_List = 1;
  inline int mapitemdrop_list_size() const;
  inline void clear_mapitemdrop_list();
  static const int kMapitemdropListFieldNumber = 1;
  inline const ::proto_ff::mapitemdrop& mapitemdrop_list(int index) const;
  inline ::proto_ff::mapitemdrop* mutable_mapitemdrop_list(int index);
  inline ::proto_ff::mapitemdrop* add_mapitemdrop_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::mapitemdrop >&
      mapitemdrop_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::mapitemdrop >*
      mutable_mapitemdrop_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_mapitemdrop)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::mapitemdrop > mapitemdrop_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Sheet_mapitemdrop* default_instance_;
};
// -------------------------------------------------------------------

class mapdestroyitem : public ::google::protobuf::Message {
 public:
  mapdestroyitem();
  virtual ~mapdestroyitem();

  mapdestroyitem(const mapdestroyitem& from);

  inline mapdestroyitem& operator=(const mapdestroyitem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mapdestroyitem& default_instance();

  void Swap(mapdestroyitem* other);

  // implements Message ----------------------------------------------

  mapdestroyitem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mapdestroyitem& from);
  void MergeFrom(const mapdestroyitem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 destroyitemID = 1;
  inline bool has_destroyitemid() const;
  inline void clear_destroyitemid();
  static const int kDestroyitemIDFieldNumber = 1;
  inline ::google::protobuf::int64 destroyitemid() const;
  inline void set_destroyitemid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.mapdestroyitem)
 private:
  inline void set_has_destroyitemid();
  inline void clear_has_destroyitemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 destroyitemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static mapdestroyitem* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_mapdestroyitem : public ::google::protobuf::Message {
 public:
  Sheet_mapdestroyitem();
  virtual ~Sheet_mapdestroyitem();

  Sheet_mapdestroyitem(const Sheet_mapdestroyitem& from);

  inline Sheet_mapdestroyitem& operator=(const Sheet_mapdestroyitem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_mapdestroyitem& default_instance();

  void Swap(Sheet_mapdestroyitem* other);

  // implements Message ----------------------------------------------

  Sheet_mapdestroyitem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_mapdestroyitem& from);
  void MergeFrom(const Sheet_mapdestroyitem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.mapdestroyitem mapdestroyitem_List = 1;
  inline int mapdestroyitem_list_size() const;
  inline void clear_mapdestroyitem_list();
  static const int kMapdestroyitemListFieldNumber = 1;
  inline const ::proto_ff::mapdestroyitem& mapdestroyitem_list(int index) const;
  inline ::proto_ff::mapdestroyitem* mutable_mapdestroyitem_list(int index);
  inline ::proto_ff::mapdestroyitem* add_mapdestroyitem_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::mapdestroyitem >&
      mapdestroyitem_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::mapdestroyitem >*
      mutable_mapdestroyitem_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_mapdestroyitem)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::mapdestroyitem > mapdestroyitem_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static Sheet_mapdestroyitem* default_instance_;
};
// ===================================================================


// ===================================================================

// mapmap

// optional int64 mapId = 1;
inline bool mapmap::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mapmap::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mapmap::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mapmap::clear_mapid() {
  mapid_ = GOOGLE_LONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::int64 mapmap::mapid() const {
  return mapid_;
}
inline void mapmap::set_mapid(::google::protobuf::int64 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional int32 levelLimit = 2;
inline bool mapmap::has_levellimit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mapmap::set_has_levellimit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mapmap::clear_has_levellimit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mapmap::clear_levellimit() {
  levellimit_ = 0;
  clear_has_levellimit();
}
inline ::google::protobuf::int32 mapmap::levellimit() const {
  return levellimit_;
}
inline void mapmap::set_levellimit(::google::protobuf::int32 value) {
  set_has_levellimit();
  levellimit_ = value;
}

// optional string adviceLv = 3;
inline bool mapmap::has_advicelv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mapmap::set_has_advicelv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mapmap::clear_has_advicelv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mapmap::clear_advicelv() {
  if (advicelv_ != &::google::protobuf::internal::kEmptyString) {
    advicelv_->clear();
  }
  clear_has_advicelv();
}
inline const ::std::string& mapmap::advicelv() const {
  return *advicelv_;
}
inline void mapmap::set_advicelv(const ::std::string& value) {
  set_has_advicelv();
  if (advicelv_ == &::google::protobuf::internal::kEmptyString) {
    advicelv_ = new ::std::string;
  }
  advicelv_->assign(value);
}
inline void mapmap::set_advicelv(const char* value) {
  set_has_advicelv();
  if (advicelv_ == &::google::protobuf::internal::kEmptyString) {
    advicelv_ = new ::std::string;
  }
  advicelv_->assign(value);
}
inline void mapmap::set_advicelv(const char* value, size_t size) {
  set_has_advicelv();
  if (advicelv_ == &::google::protobuf::internal::kEmptyString) {
    advicelv_ = new ::std::string;
  }
  advicelv_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mapmap::mutable_advicelv() {
  set_has_advicelv();
  if (advicelv_ == &::google::protobuf::internal::kEmptyString) {
    advicelv_ = new ::std::string;
  }
  return advicelv_;
}
inline ::std::string* mapmap::release_advicelv() {
  clear_has_advicelv();
  if (advicelv_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = advicelv_;
    advicelv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mapmap::set_allocated_advicelv(::std::string* advicelv) {
  if (advicelv_ != &::google::protobuf::internal::kEmptyString) {
    delete advicelv_;
  }
  if (advicelv) {
    set_has_advicelv();
    advicelv_ = advicelv;
  } else {
    clear_has_advicelv();
    advicelv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 mapType = 4;
inline bool mapmap::has_maptype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mapmap::set_has_maptype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mapmap::clear_has_maptype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mapmap::clear_maptype() {
  maptype_ = 0;
  clear_has_maptype();
}
inline ::google::protobuf::int32 mapmap::maptype() const {
  return maptype_;
}
inline void mapmap::set_maptype(::google::protobuf::int32 value) {
  set_has_maptype();
  maptype_ = value;
}

// optional int32 clearanceTime = 5;
inline bool mapmap::has_clearancetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mapmap::set_has_clearancetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mapmap::clear_has_clearancetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mapmap::clear_clearancetime() {
  clearancetime_ = 0;
  clear_has_clearancetime();
}
inline ::google::protobuf::int32 mapmap::clearancetime() const {
  return clearancetime_;
}
inline void mapmap::set_clearancetime(::google::protobuf::int32 value) {
  set_has_clearancetime();
  clearancetime_ = value;
}

// optional int32 mapSubType = 6;
inline bool mapmap::has_mapsubtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mapmap::set_has_mapsubtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mapmap::clear_has_mapsubtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mapmap::clear_mapsubtype() {
  mapsubtype_ = 0;
  clear_has_mapsubtype();
}
inline ::google::protobuf::int32 mapmap::mapsubtype() const {
  return mapsubtype_;
}
inline void mapmap::set_mapsubtype(::google::protobuf::int32 value) {
  set_has_mapsubtype();
  mapsubtype_ = value;
}

// optional int32 mapPkmode = 7;
inline bool mapmap::has_mappkmode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mapmap::set_has_mappkmode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mapmap::clear_has_mappkmode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mapmap::clear_mappkmode() {
  mappkmode_ = 0;
  clear_has_mappkmode();
}
inline ::google::protobuf::int32 mapmap::mappkmode() const {
  return mappkmode_;
}
inline void mapmap::set_mappkmode(::google::protobuf::int32 value) {
  set_has_mappkmode();
  mappkmode_ = value;
}

// optional int32 pklock = 8;
inline bool mapmap::has_pklock() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mapmap::set_has_pklock() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mapmap::clear_has_pklock() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mapmap::clear_pklock() {
  pklock_ = 0;
  clear_has_pklock();
}
inline ::google::protobuf::int32 mapmap::pklock() const {
  return pklock_;
}
inline void mapmap::set_pklock(::google::protobuf::int32 value) {
  set_has_pklock();
  pklock_ = value;
}

// optional int32 pk = 9;
inline bool mapmap::has_pk() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mapmap::set_has_pk() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mapmap::clear_has_pk() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mapmap::clear_pk() {
  pk_ = 0;
  clear_has_pk();
}
inline ::google::protobuf::int32 mapmap::pk() const {
  return pk_;
}
inline void mapmap::set_pk(::google::protobuf::int32 value) {
  set_has_pk();
  pk_ = value;
}

// optional int32 killValue = 10;
inline bool mapmap::has_killvalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void mapmap::set_has_killvalue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void mapmap::clear_has_killvalue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void mapmap::clear_killvalue() {
  killvalue_ = 0;
  clear_has_killvalue();
}
inline ::google::protobuf::int32 mapmap::killvalue() const {
  return killvalue_;
}
inline void mapmap::set_killvalue(::google::protobuf::int32 value) {
  set_has_killvalue();
  killvalue_ = value;
}

// optional int32 BanGroup = 11;
inline bool mapmap::has_bangroup() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void mapmap::set_has_bangroup() {
  _has_bits_[0] |= 0x00000400u;
}
inline void mapmap::clear_has_bangroup() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void mapmap::clear_bangroup() {
  bangroup_ = 0;
  clear_has_bangroup();
}
inline ::google::protobuf::int32 mapmap::bangroup() const {
  return bangroup_;
}
inline void mapmap::set_bangroup(::google::protobuf::int32 value) {
  set_has_bangroup();
  bangroup_ = value;
}

// optional int32 reviveTime = 12;
inline bool mapmap::has_revivetime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void mapmap::set_has_revivetime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void mapmap::clear_has_revivetime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void mapmap::clear_revivetime() {
  revivetime_ = 0;
  clear_has_revivetime();
}
inline ::google::protobuf::int32 mapmap::revivetime() const {
  return revivetime_;
}
inline void mapmap::set_revivetime(::google::protobuf::int32 value) {
  set_has_revivetime();
  revivetime_ = value;
}

// optional int32 mapWide = 13;
inline bool mapmap::has_mapwide() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void mapmap::set_has_mapwide() {
  _has_bits_[0] |= 0x00001000u;
}
inline void mapmap::clear_has_mapwide() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void mapmap::clear_mapwide() {
  mapwide_ = 0;
  clear_has_mapwide();
}
inline ::google::protobuf::int32 mapmap::mapwide() const {
  return mapwide_;
}
inline void mapmap::set_mapwide(::google::protobuf::int32 value) {
  set_has_mapwide();
  mapwide_ = value;
}

// optional int32 mapHeight = 14;
inline bool mapmap::has_mapheight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void mapmap::set_has_mapheight() {
  _has_bits_[0] |= 0x00002000u;
}
inline void mapmap::clear_has_mapheight() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void mapmap::clear_mapheight() {
  mapheight_ = 0;
  clear_has_mapheight();
}
inline ::google::protobuf::int32 mapmap::mapheight() const {
  return mapheight_;
}
inline void mapmap::set_mapheight(::google::protobuf::int32 value) {
  set_has_mapheight();
  mapheight_ = value;
}

// optional string mapResources = 15;
inline bool mapmap::has_mapresources() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void mapmap::set_has_mapresources() {
  _has_bits_[0] |= 0x00004000u;
}
inline void mapmap::clear_has_mapresources() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void mapmap::clear_mapresources() {
  if (mapresources_ != &::google::protobuf::internal::kEmptyString) {
    mapresources_->clear();
  }
  clear_has_mapresources();
}
inline const ::std::string& mapmap::mapresources() const {
  return *mapresources_;
}
inline void mapmap::set_mapresources(const ::std::string& value) {
  set_has_mapresources();
  if (mapresources_ == &::google::protobuf::internal::kEmptyString) {
    mapresources_ = new ::std::string;
  }
  mapresources_->assign(value);
}
inline void mapmap::set_mapresources(const char* value) {
  set_has_mapresources();
  if (mapresources_ == &::google::protobuf::internal::kEmptyString) {
    mapresources_ = new ::std::string;
  }
  mapresources_->assign(value);
}
inline void mapmap::set_mapresources(const char* value, size_t size) {
  set_has_mapresources();
  if (mapresources_ == &::google::protobuf::internal::kEmptyString) {
    mapresources_ = new ::std::string;
  }
  mapresources_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mapmap::mutable_mapresources() {
  set_has_mapresources();
  if (mapresources_ == &::google::protobuf::internal::kEmptyString) {
    mapresources_ = new ::std::string;
  }
  return mapresources_;
}
inline ::std::string* mapmap::release_mapresources() {
  clear_has_mapresources();
  if (mapresources_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mapresources_;
    mapresources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mapmap::set_allocated_mapresources(::std::string* mapresources) {
  if (mapresources_ != &::google::protobuf::internal::kEmptyString) {
    delete mapresources_;
  }
  if (mapresources) {
    set_has_mapresources();
    mapresources_ = mapresources;
  } else {
    clear_has_mapresources();
    mapresources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 reviveSkill = 16;
inline bool mapmap::has_reviveskill() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void mapmap::set_has_reviveskill() {
  _has_bits_[0] |= 0x00008000u;
}
inline void mapmap::clear_has_reviveskill() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void mapmap::clear_reviveskill() {
  reviveskill_ = GOOGLE_LONGLONG(0);
  clear_has_reviveskill();
}
inline ::google::protobuf::int64 mapmap::reviveskill() const {
  return reviveskill_;
}
inline void mapmap::set_reviveskill(::google::protobuf::int64 value) {
  set_has_reviveskill();
  reviveskill_ = value;
}

// optional int32 reviveInPlaceType = 17;
inline bool mapmap::has_reviveinplacetype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void mapmap::set_has_reviveinplacetype() {
  _has_bits_[0] |= 0x00010000u;
}
inline void mapmap::clear_has_reviveinplacetype() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void mapmap::clear_reviveinplacetype() {
  reviveinplacetype_ = 0;
  clear_has_reviveinplacetype();
}
inline ::google::protobuf::int32 mapmap::reviveinplacetype() const {
  return reviveinplacetype_;
}
inline void mapmap::set_reviveinplacetype(::google::protobuf::int32 value) {
  set_has_reviveinplacetype();
  reviveinplacetype_ = value;
}

// optional int32 isHangUp = 18;
inline bool mapmap::has_ishangup() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void mapmap::set_has_ishangup() {
  _has_bits_[0] |= 0x00020000u;
}
inline void mapmap::clear_has_ishangup() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void mapmap::clear_ishangup() {
  ishangup_ = 0;
  clear_has_ishangup();
}
inline ::google::protobuf::int32 mapmap::ishangup() const {
  return ishangup_;
}
inline void mapmap::set_ishangup(::google::protobuf::int32 value) {
  set_has_ishangup();
  ishangup_ = value;
}

// optional int32 itemDropType = 19;
inline bool mapmap::has_itemdroptype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void mapmap::set_has_itemdroptype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void mapmap::clear_has_itemdroptype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void mapmap::clear_itemdroptype() {
  itemdroptype_ = 0;
  clear_has_itemdroptype();
}
inline ::google::protobuf::int32 mapmap::itemdroptype() const {
  return itemdroptype_;
}
inline void mapmap::set_itemdroptype(::google::protobuf::int32 value) {
  set_has_itemdroptype();
  itemdroptype_ = value;
}

// optional string itemDropID = 20;
inline bool mapmap::has_itemdropid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void mapmap::set_has_itemdropid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void mapmap::clear_has_itemdropid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void mapmap::clear_itemdropid() {
  if (itemdropid_ != &::google::protobuf::internal::kEmptyString) {
    itemdropid_->clear();
  }
  clear_has_itemdropid();
}
inline const ::std::string& mapmap::itemdropid() const {
  return *itemdropid_;
}
inline void mapmap::set_itemdropid(const ::std::string& value) {
  set_has_itemdropid();
  if (itemdropid_ == &::google::protobuf::internal::kEmptyString) {
    itemdropid_ = new ::std::string;
  }
  itemdropid_->assign(value);
}
inline void mapmap::set_itemdropid(const char* value) {
  set_has_itemdropid();
  if (itemdropid_ == &::google::protobuf::internal::kEmptyString) {
    itemdropid_ = new ::std::string;
  }
  itemdropid_->assign(value);
}
inline void mapmap::set_itemdropid(const char* value, size_t size) {
  set_has_itemdropid();
  if (itemdropid_ == &::google::protobuf::internal::kEmptyString) {
    itemdropid_ = new ::std::string;
  }
  itemdropid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mapmap::mutable_itemdropid() {
  set_has_itemdropid();
  if (itemdropid_ == &::google::protobuf::internal::kEmptyString) {
    itemdropid_ = new ::std::string;
  }
  return itemdropid_;
}
inline ::std::string* mapmap::release_itemdropid() {
  clear_has_itemdropid();
  if (itemdropid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemdropid_;
    itemdropid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mapmap::set_allocated_itemdropid(::std::string* itemdropid) {
  if (itemdropid_ != &::google::protobuf::internal::kEmptyString) {
    delete itemdropid_;
  }
  if (itemdropid) {
    set_has_itemdropid();
    itemdropid_ = itemdropid;
  } else {
    clear_has_itemdropid();
    itemdropid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 linkOffLine = 21;
inline bool mapmap::has_linkoffline() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void mapmap::set_has_linkoffline() {
  _has_bits_[0] |= 0x00100000u;
}
inline void mapmap::clear_has_linkoffline() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void mapmap::clear_linkoffline() {
  linkoffline_ = GOOGLE_LONGLONG(0);
  clear_has_linkoffline();
}
inline ::google::protobuf::int64 mapmap::linkoffline() const {
  return linkoffline_;
}
inline void mapmap::set_linkoffline(::google::protobuf::int64 value) {
  set_has_linkoffline();
  linkoffline_ = value;
}

// optional int32 banOnHook = 22;
inline bool mapmap::has_banonhook() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void mapmap::set_has_banonhook() {
  _has_bits_[0] |= 0x00200000u;
}
inline void mapmap::clear_has_banonhook() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void mapmap::clear_banonhook() {
  banonhook_ = 0;
  clear_has_banonhook();
}
inline ::google::protobuf::int32 mapmap::banonhook() const {
  return banonhook_;
}
inline void mapmap::set_banonhook(::google::protobuf::int32 value) {
  set_has_banonhook();
  banonhook_ = value;
}

// -------------------------------------------------------------------

// Sheet_mapmap

// repeated .proto_ff.mapmap mapmap_List = 1;
inline int Sheet_mapmap::mapmap_list_size() const {
  return mapmap_list_.size();
}
inline void Sheet_mapmap::clear_mapmap_list() {
  mapmap_list_.Clear();
}
inline const ::proto_ff::mapmap& Sheet_mapmap::mapmap_list(int index) const {
  return mapmap_list_.Get(index);
}
inline ::proto_ff::mapmap* Sheet_mapmap::mutable_mapmap_list(int index) {
  return mapmap_list_.Mutable(index);
}
inline ::proto_ff::mapmap* Sheet_mapmap::add_mapmap_list() {
  return mapmap_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::mapmap >&
Sheet_mapmap::mapmap_list() const {
  return mapmap_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::mapmap >*
Sheet_mapmap::mutable_mapmap_list() {
  return &mapmap_list_;
}

// -------------------------------------------------------------------

// mapitemdrop

// optional int32 itemDropID = 1;
inline bool mapitemdrop::has_itemdropid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mapitemdrop::set_has_itemdropid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mapitemdrop::clear_has_itemdropid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mapitemdrop::clear_itemdropid() {
  itemdropid_ = 0;
  clear_has_itemdropid();
}
inline ::google::protobuf::int32 mapitemdrop::itemdropid() const {
  return itemdropid_;
}
inline void mapitemdrop::set_itemdropid(::google::protobuf::int32 value) {
  set_has_itemdropid();
  itemdropid_ = value;
}

// optional int32 dropType = 2;
inline bool mapitemdrop::has_droptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mapitemdrop::set_has_droptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mapitemdrop::clear_has_droptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mapitemdrop::clear_droptype() {
  droptype_ = 0;
  clear_has_droptype();
}
inline ::google::protobuf::int32 mapitemdrop::droptype() const {
  return droptype_;
}
inline void mapitemdrop::set_droptype(::google::protobuf::int32 value) {
  set_has_droptype();
  droptype_ = value;
}

// optional int32 odds = 3;
inline bool mapitemdrop::has_odds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mapitemdrop::set_has_odds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mapitemdrop::clear_has_odds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mapitemdrop::clear_odds() {
  odds_ = 0;
  clear_has_odds();
}
inline ::google::protobuf::int32 mapitemdrop::odds() const {
  return odds_;
}
inline void mapitemdrop::set_odds(::google::protobuf::int32 value) {
  set_has_odds();
  odds_ = value;
}

// optional int32 dropvaluea = 4;
inline bool mapitemdrop::has_dropvaluea() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mapitemdrop::set_has_dropvaluea() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mapitemdrop::clear_has_dropvaluea() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mapitemdrop::clear_dropvaluea() {
  dropvaluea_ = 0;
  clear_has_dropvaluea();
}
inline ::google::protobuf::int32 mapitemdrop::dropvaluea() const {
  return dropvaluea_;
}
inline void mapitemdrop::set_dropvaluea(::google::protobuf::int32 value) {
  set_has_dropvaluea();
  dropvaluea_ = value;
}

// optional int32 dropvalueb = 5;
inline bool mapitemdrop::has_dropvalueb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mapitemdrop::set_has_dropvalueb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mapitemdrop::clear_has_dropvalueb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mapitemdrop::clear_dropvalueb() {
  dropvalueb_ = 0;
  clear_has_dropvalueb();
}
inline ::google::protobuf::int32 mapitemdrop::dropvalueb() const {
  return dropvalueb_;
}
inline void mapitemdrop::set_dropvalueb(::google::protobuf::int32 value) {
  set_has_dropvalueb();
  dropvalueb_ = value;
}

// optional int32 dropvaluec = 6;
inline bool mapitemdrop::has_dropvaluec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mapitemdrop::set_has_dropvaluec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mapitemdrop::clear_has_dropvaluec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mapitemdrop::clear_dropvaluec() {
  dropvaluec_ = 0;
  clear_has_dropvaluec();
}
inline ::google::protobuf::int32 mapitemdrop::dropvaluec() const {
  return dropvaluec_;
}
inline void mapitemdrop::set_dropvaluec(::google::protobuf::int32 value) {
  set_has_dropvaluec();
  dropvaluec_ = value;
}

// optional int32 dropvalued = 7;
inline bool mapitemdrop::has_dropvalued() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mapitemdrop::set_has_dropvalued() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mapitemdrop::clear_has_dropvalued() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mapitemdrop::clear_dropvalued() {
  dropvalued_ = 0;
  clear_has_dropvalued();
}
inline ::google::protobuf::int32 mapitemdrop::dropvalued() const {
  return dropvalued_;
}
inline void mapitemdrop::set_dropvalued(::google::protobuf::int32 value) {
  set_has_dropvalued();
  dropvalued_ = value;
}

// optional int32 dropvaluee = 8;
inline bool mapitemdrop::has_dropvaluee() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mapitemdrop::set_has_dropvaluee() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mapitemdrop::clear_has_dropvaluee() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mapitemdrop::clear_dropvaluee() {
  dropvaluee_ = 0;
  clear_has_dropvaluee();
}
inline ::google::protobuf::int32 mapitemdrop::dropvaluee() const {
  return dropvaluee_;
}
inline void mapitemdrop::set_dropvaluee(::google::protobuf::int32 value) {
  set_has_dropvaluee();
  dropvaluee_ = value;
}

// optional int32 dropvaluef = 9;
inline bool mapitemdrop::has_dropvaluef() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mapitemdrop::set_has_dropvaluef() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mapitemdrop::clear_has_dropvaluef() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mapitemdrop::clear_dropvaluef() {
  dropvaluef_ = 0;
  clear_has_dropvaluef();
}
inline ::google::protobuf::int32 mapitemdrop::dropvaluef() const {
  return dropvaluef_;
}
inline void mapitemdrop::set_dropvaluef(::google::protobuf::int32 value) {
  set_has_dropvaluef();
  dropvaluef_ = value;
}

// -------------------------------------------------------------------

// Sheet_mapitemdrop

// repeated .proto_ff.mapitemdrop mapitemdrop_List = 1;
inline int Sheet_mapitemdrop::mapitemdrop_list_size() const {
  return mapitemdrop_list_.size();
}
inline void Sheet_mapitemdrop::clear_mapitemdrop_list() {
  mapitemdrop_list_.Clear();
}
inline const ::proto_ff::mapitemdrop& Sheet_mapitemdrop::mapitemdrop_list(int index) const {
  return mapitemdrop_list_.Get(index);
}
inline ::proto_ff::mapitemdrop* Sheet_mapitemdrop::mutable_mapitemdrop_list(int index) {
  return mapitemdrop_list_.Mutable(index);
}
inline ::proto_ff::mapitemdrop* Sheet_mapitemdrop::add_mapitemdrop_list() {
  return mapitemdrop_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::mapitemdrop >&
Sheet_mapitemdrop::mapitemdrop_list() const {
  return mapitemdrop_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::mapitemdrop >*
Sheet_mapitemdrop::mutable_mapitemdrop_list() {
  return &mapitemdrop_list_;
}

// -------------------------------------------------------------------

// mapdestroyitem

// optional int64 destroyitemID = 1;
inline bool mapdestroyitem::has_destroyitemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mapdestroyitem::set_has_destroyitemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mapdestroyitem::clear_has_destroyitemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mapdestroyitem::clear_destroyitemid() {
  destroyitemid_ = GOOGLE_LONGLONG(0);
  clear_has_destroyitemid();
}
inline ::google::protobuf::int64 mapdestroyitem::destroyitemid() const {
  return destroyitemid_;
}
inline void mapdestroyitem::set_destroyitemid(::google::protobuf::int64 value) {
  set_has_destroyitemid();
  destroyitemid_ = value;
}

// -------------------------------------------------------------------

// Sheet_mapdestroyitem

// repeated .proto_ff.mapdestroyitem mapdestroyitem_List = 1;
inline int Sheet_mapdestroyitem::mapdestroyitem_list_size() const {
  return mapdestroyitem_list_.size();
}
inline void Sheet_mapdestroyitem::clear_mapdestroyitem_list() {
  mapdestroyitem_list_.Clear();
}
inline const ::proto_ff::mapdestroyitem& Sheet_mapdestroyitem::mapdestroyitem_list(int index) const {
  return mapdestroyitem_list_.Get(index);
}
inline ::proto_ff::mapdestroyitem* Sheet_mapdestroyitem::mutable_mapdestroyitem_list(int index) {
  return mapdestroyitem_list_.Mutable(index);
}
inline ::proto_ff::mapdestroyitem* Sheet_mapdestroyitem::add_mapdestroyitem_list() {
  return mapdestroyitem_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::mapdestroyitem >&
Sheet_mapdestroyitem::mapdestroyitem_list() const {
  return mapdestroyitem_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::mapdestroyitem >*
Sheet_mapdestroyitem::mutable_mapdestroyitem_list() {
  return &mapdestroyitem_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_2eproto__INCLUDED
