// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Rune.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Rune.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_RuneConst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RuneConst_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_RuneConst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_RuneConst_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RuneRuneAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RuneRuneAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RuneRune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RuneRune_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_RuneRune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_RuneRune_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RuneRunewords_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RuneRunewords_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_RuneRunewords_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_RuneRunewords_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RuneQuenching_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RuneQuenching_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_RuneQuenching_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_RuneQuenching_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RuneStuntskillActivateDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RuneStuntskillActivateDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RuneStuntskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RuneStuntskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_RuneStuntskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_RuneStuntskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RunePassiveskillTypeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RunePassiveskillTypeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RunePassiveskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RunePassiveskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_RunePassiveskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_RunePassiveskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RuneUpgradeTypeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RuneUpgradeTypeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RuneUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RuneUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_RuneUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_RuneUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RuneUpgradeexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RuneUpgradeexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_RuneUpgradeexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_RuneUpgradeexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RuneAdvancedAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RuneAdvancedAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RuneAdvanced_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RuneAdvanced_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_RuneAdvanced_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_RuneAdvanced_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RuneSoaringAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RuneSoaringAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_RuneSoaring_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RuneSoaring_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_RuneSoaring_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_RuneSoaring_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fRune_2eproto() {
  protobuf_AddDesc_E_5fRune_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Rune.proto");
  GOOGLE_CHECK(file != NULL);
  E_RuneConst_descriptor_ = file->message_type(0);
  static const int E_RuneConst_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneConst, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneConst, m_costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneConst, m_lokcostnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneConst, m_mallid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneConst, m_quenching_max_),
  };
  E_RuneConst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RuneConst_descriptor_,
      E_RuneConst::default_instance_,
      E_RuneConst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneConst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneConst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RuneConst));
  Sheet_RuneConst_descriptor_ = file->message_type(1);
  static const int Sheet_RuneConst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneConst, e_runeconst_list_),
  };
  Sheet_RuneConst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_RuneConst_descriptor_,
      Sheet_RuneConst::default_instance_,
      Sheet_RuneConst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneConst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneConst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_RuneConst));
  E_RuneRuneAttributeDesc_descriptor_ = file->message_type(2);
  static const int E_RuneRuneAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRuneAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRuneAttributeDesc, m_type_),
  };
  E_RuneRuneAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RuneRuneAttributeDesc_descriptor_,
      E_RuneRuneAttributeDesc::default_instance_,
      E_RuneRuneAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRuneAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRuneAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RuneRuneAttributeDesc));
  E_RuneRune_descriptor_ = file->message_type(3);
  static const int E_RuneRune_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRune, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRune, m_positiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRune, m_attributetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRune, m_subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRune, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRune, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRune, m_quenchinglminit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRune, m_disassemble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRune, m_disassembleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRune, m_disassemblenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRune, m_attribute_),
  };
  E_RuneRune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RuneRune_descriptor_,
      E_RuneRune::default_instance_,
      E_RuneRune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RuneRune));
  Sheet_RuneRune_descriptor_ = file->message_type(4);
  static const int Sheet_RuneRune_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneRune, e_runerune_list_),
  };
  Sheet_RuneRune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_RuneRune_descriptor_,
      Sheet_RuneRune::default_instance_,
      Sheet_RuneRune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneRune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneRune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_RuneRune));
  E_RuneRunewords_descriptor_ = file->message_type(5);
  static const int E_RuneRunewords_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRunewords, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRunewords, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRunewords, m_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRunewords, m_quenchinglminit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRunewords, m_disassembleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRunewords, m_disassemblenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRunewords, m_starlvmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRunewords, m_costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRunewords, m_costnum_),
  };
  E_RuneRunewords_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RuneRunewords_descriptor_,
      E_RuneRunewords::default_instance_,
      E_RuneRunewords_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRunewords, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneRunewords, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RuneRunewords));
  Sheet_RuneRunewords_descriptor_ = file->message_type(6);
  static const int Sheet_RuneRunewords_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneRunewords, e_runerunewords_list_),
  };
  Sheet_RuneRunewords_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_RuneRunewords_descriptor_,
      Sheet_RuneRunewords::default_instance_,
      Sheet_RuneRunewords_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneRunewords, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneRunewords, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_RuneRunewords));
  E_RuneQuenching_descriptor_ = file->message_type(7);
  static const int E_RuneQuenching_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneQuenching, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneQuenching, m_expandprob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneQuenching, m_qualitylimit_),
  };
  E_RuneQuenching_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RuneQuenching_descriptor_,
      E_RuneQuenching::default_instance_,
      E_RuneQuenching_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneQuenching, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneQuenching, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RuneQuenching));
  Sheet_RuneQuenching_descriptor_ = file->message_type(8);
  static const int Sheet_RuneQuenching_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneQuenching, e_runequenching_list_),
  };
  Sheet_RuneQuenching_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_RuneQuenching_descriptor_,
      Sheet_RuneQuenching::default_instance_,
      Sheet_RuneQuenching_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneQuenching, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneQuenching, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_RuneQuenching));
  E_RuneStuntskillActivateDesc_descriptor_ = file->message_type(9);
  static const int E_RuneStuntskillActivateDesc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneStuntskillActivateDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneStuntskillActivateDesc, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneStuntskillActivateDesc, m_attributetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneStuntskillActivateDesc, m_positiontype_),
  };
  E_RuneStuntskillActivateDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RuneStuntskillActivateDesc_descriptor_,
      E_RuneStuntskillActivateDesc::default_instance_,
      E_RuneStuntskillActivateDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneStuntskillActivateDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneStuntskillActivateDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RuneStuntskillActivateDesc));
  E_RuneStuntskill_descriptor_ = file->message_type(10);
  static const int E_RuneStuntskill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneStuntskill, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneStuntskill, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneStuntskill, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneStuntskill, m_activate_),
  };
  E_RuneStuntskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RuneStuntskill_descriptor_,
      E_RuneStuntskill::default_instance_,
      E_RuneStuntskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneStuntskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneStuntskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RuneStuntskill));
  Sheet_RuneStuntskill_descriptor_ = file->message_type(11);
  static const int Sheet_RuneStuntskill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneStuntskill, e_runestuntskill_list_),
  };
  Sheet_RuneStuntskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_RuneStuntskill_descriptor_,
      Sheet_RuneStuntskill::default_instance_,
      Sheet_RuneStuntskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneStuntskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneStuntskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_RuneStuntskill));
  E_RunePassiveskillTypeDesc_descriptor_ = file->message_type(12);
  static const int E_RunePassiveskillTypeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RunePassiveskillTypeDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RunePassiveskillTypeDesc, m_id_),
  };
  E_RunePassiveskillTypeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RunePassiveskillTypeDesc_descriptor_,
      E_RunePassiveskillTypeDesc::default_instance_,
      E_RunePassiveskillTypeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RunePassiveskillTypeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RunePassiveskillTypeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RunePassiveskillTypeDesc));
  E_RunePassiveskill_descriptor_ = file->message_type(13);
  static const int E_RunePassiveskill_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RunePassiveskill, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RunePassiveskill, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RunePassiveskill, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RunePassiveskill, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RunePassiveskill, m_activatequality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RunePassiveskill, m_activatenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RunePassiveskill, m_type_),
  };
  E_RunePassiveskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RunePassiveskill_descriptor_,
      E_RunePassiveskill::default_instance_,
      E_RunePassiveskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RunePassiveskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RunePassiveskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RunePassiveskill));
  Sheet_RunePassiveskill_descriptor_ = file->message_type(14);
  static const int Sheet_RunePassiveskill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RunePassiveskill, e_runepassiveskill_list_),
  };
  Sheet_RunePassiveskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_RunePassiveskill_descriptor_,
      Sheet_RunePassiveskill::default_instance_,
      Sheet_RunePassiveskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RunePassiveskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RunePassiveskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_RunePassiveskill));
  E_RuneUpgradeTypeDesc_descriptor_ = file->message_type(15);
  static const int E_RuneUpgradeTypeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneUpgradeTypeDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneUpgradeTypeDesc, m_id_),
  };
  E_RuneUpgradeTypeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RuneUpgradeTypeDesc_descriptor_,
      E_RuneUpgradeTypeDesc::default_instance_,
      E_RuneUpgradeTypeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneUpgradeTypeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneUpgradeTypeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RuneUpgradeTypeDesc));
  E_RuneUpgrade_descriptor_ = file->message_type(16);
  static const int E_RuneUpgrade_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneUpgrade, m_runeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneUpgrade, m_upgradeup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneUpgrade, m_type_),
  };
  E_RuneUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RuneUpgrade_descriptor_,
      E_RuneUpgrade::default_instance_,
      E_RuneUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RuneUpgrade));
  Sheet_RuneUpgrade_descriptor_ = file->message_type(17);
  static const int Sheet_RuneUpgrade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneUpgrade, e_runeupgrade_list_),
  };
  Sheet_RuneUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_RuneUpgrade_descriptor_,
      Sheet_RuneUpgrade::default_instance_,
      Sheet_RuneUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_RuneUpgrade));
  E_RuneUpgradeexp_descriptor_ = file->message_type(18);
  static const int E_RuneUpgradeexp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneUpgradeexp, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneUpgradeexp, m_costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneUpgradeexp, m_costnum_),
  };
  E_RuneUpgradeexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RuneUpgradeexp_descriptor_,
      E_RuneUpgradeexp::default_instance_,
      E_RuneUpgradeexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneUpgradeexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneUpgradeexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RuneUpgradeexp));
  Sheet_RuneUpgradeexp_descriptor_ = file->message_type(19);
  static const int Sheet_RuneUpgradeexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneUpgradeexp, e_runeupgradeexp_list_),
  };
  Sheet_RuneUpgradeexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_RuneUpgradeexp_descriptor_,
      Sheet_RuneUpgradeexp::default_instance_,
      Sheet_RuneUpgradeexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneUpgradeexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneUpgradeexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_RuneUpgradeexp));
  E_RuneAdvancedAttributeDesc_descriptor_ = file->message_type(20);
  static const int E_RuneAdvancedAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneAdvancedAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneAdvancedAttributeDesc, m_type_),
  };
  E_RuneAdvancedAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RuneAdvancedAttributeDesc_descriptor_,
      E_RuneAdvancedAttributeDesc::default_instance_,
      E_RuneAdvancedAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneAdvancedAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneAdvancedAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RuneAdvancedAttributeDesc));
  E_RuneAdvanced_descriptor_ = file->message_type(21);
  static const int E_RuneAdvanced_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneAdvanced, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneAdvanced, m_wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneAdvanced, m_runeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneAdvanced, m_costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneAdvanced, m_costnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneAdvanced, m_attribute_),
  };
  E_RuneAdvanced_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RuneAdvanced_descriptor_,
      E_RuneAdvanced::default_instance_,
      E_RuneAdvanced_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneAdvanced, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneAdvanced, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RuneAdvanced));
  Sheet_RuneAdvanced_descriptor_ = file->message_type(22);
  static const int Sheet_RuneAdvanced_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneAdvanced, e_runeadvanced_list_),
  };
  Sheet_RuneAdvanced_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_RuneAdvanced_descriptor_,
      Sheet_RuneAdvanced::default_instance_,
      Sheet_RuneAdvanced_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneAdvanced, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneAdvanced, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_RuneAdvanced));
  E_RuneSoaringAttributeDesc_descriptor_ = file->message_type(23);
  static const int E_RuneSoaringAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneSoaringAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneSoaringAttributeDesc, m_type_),
  };
  E_RuneSoaringAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RuneSoaringAttributeDesc_descriptor_,
      E_RuneSoaringAttributeDesc::default_instance_,
      E_RuneSoaringAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneSoaringAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneSoaringAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RuneSoaringAttributeDesc));
  E_RuneSoaring_descriptor_ = file->message_type(24);
  static const int E_RuneSoaring_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneSoaring, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneSoaring, m_lvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneSoaring, m_wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneSoaring, m_runeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneSoaring, m_attribute_),
  };
  E_RuneSoaring_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RuneSoaring_descriptor_,
      E_RuneSoaring::default_instance_,
      E_RuneSoaring_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneSoaring, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RuneSoaring, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RuneSoaring));
  Sheet_RuneSoaring_descriptor_ = file->message_type(25);
  static const int Sheet_RuneSoaring_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneSoaring, e_runesoaring_list_),
  };
  Sheet_RuneSoaring_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_RuneSoaring_descriptor_,
      Sheet_RuneSoaring::default_instance_,
      Sheet_RuneSoaring_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneSoaring, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RuneSoaring, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_RuneSoaring));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fRune_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RuneConst_descriptor_, &E_RuneConst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_RuneConst_descriptor_, &Sheet_RuneConst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RuneRuneAttributeDesc_descriptor_, &E_RuneRuneAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RuneRune_descriptor_, &E_RuneRune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_RuneRune_descriptor_, &Sheet_RuneRune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RuneRunewords_descriptor_, &E_RuneRunewords::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_RuneRunewords_descriptor_, &Sheet_RuneRunewords::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RuneQuenching_descriptor_, &E_RuneQuenching::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_RuneQuenching_descriptor_, &Sheet_RuneQuenching::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RuneStuntskillActivateDesc_descriptor_, &E_RuneStuntskillActivateDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RuneStuntskill_descriptor_, &E_RuneStuntskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_RuneStuntskill_descriptor_, &Sheet_RuneStuntskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RunePassiveskillTypeDesc_descriptor_, &E_RunePassiveskillTypeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RunePassiveskill_descriptor_, &E_RunePassiveskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_RunePassiveskill_descriptor_, &Sheet_RunePassiveskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RuneUpgradeTypeDesc_descriptor_, &E_RuneUpgradeTypeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RuneUpgrade_descriptor_, &E_RuneUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_RuneUpgrade_descriptor_, &Sheet_RuneUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RuneUpgradeexp_descriptor_, &E_RuneUpgradeexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_RuneUpgradeexp_descriptor_, &Sheet_RuneUpgradeexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RuneAdvancedAttributeDesc_descriptor_, &E_RuneAdvancedAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RuneAdvanced_descriptor_, &E_RuneAdvanced::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_RuneAdvanced_descriptor_, &Sheet_RuneAdvanced::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RuneSoaringAttributeDesc_descriptor_, &E_RuneSoaringAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RuneSoaring_descriptor_, &E_RuneSoaring::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_RuneSoaring_descriptor_, &Sheet_RuneSoaring::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fRune_2eproto() {
  delete E_RuneConst::default_instance_;
  delete E_RuneConst_reflection_;
  delete Sheet_RuneConst::default_instance_;
  delete Sheet_RuneConst_reflection_;
  delete E_RuneRuneAttributeDesc::default_instance_;
  delete E_RuneRuneAttributeDesc_reflection_;
  delete E_RuneRune::default_instance_;
  delete E_RuneRune_reflection_;
  delete Sheet_RuneRune::default_instance_;
  delete Sheet_RuneRune_reflection_;
  delete E_RuneRunewords::default_instance_;
  delete E_RuneRunewords_reflection_;
  delete Sheet_RuneRunewords::default_instance_;
  delete Sheet_RuneRunewords_reflection_;
  delete E_RuneQuenching::default_instance_;
  delete E_RuneQuenching_reflection_;
  delete Sheet_RuneQuenching::default_instance_;
  delete Sheet_RuneQuenching_reflection_;
  delete E_RuneStuntskillActivateDesc::default_instance_;
  delete E_RuneStuntskillActivateDesc_reflection_;
  delete E_RuneStuntskill::default_instance_;
  delete E_RuneStuntskill_reflection_;
  delete Sheet_RuneStuntskill::default_instance_;
  delete Sheet_RuneStuntskill_reflection_;
  delete E_RunePassiveskillTypeDesc::default_instance_;
  delete E_RunePassiveskillTypeDesc_reflection_;
  delete E_RunePassiveskill::default_instance_;
  delete E_RunePassiveskill_reflection_;
  delete Sheet_RunePassiveskill::default_instance_;
  delete Sheet_RunePassiveskill_reflection_;
  delete E_RuneUpgradeTypeDesc::default_instance_;
  delete E_RuneUpgradeTypeDesc_reflection_;
  delete E_RuneUpgrade::default_instance_;
  delete E_RuneUpgrade_reflection_;
  delete Sheet_RuneUpgrade::default_instance_;
  delete Sheet_RuneUpgrade_reflection_;
  delete E_RuneUpgradeexp::default_instance_;
  delete E_RuneUpgradeexp_reflection_;
  delete Sheet_RuneUpgradeexp::default_instance_;
  delete Sheet_RuneUpgradeexp_reflection_;
  delete E_RuneAdvancedAttributeDesc::default_instance_;
  delete E_RuneAdvancedAttributeDesc_reflection_;
  delete E_RuneAdvanced::default_instance_;
  delete E_RuneAdvanced_reflection_;
  delete Sheet_RuneAdvanced::default_instance_;
  delete Sheet_RuneAdvanced_reflection_;
  delete E_RuneSoaringAttributeDesc::default_instance_;
  delete E_RuneSoaringAttributeDesc_reflection_;
  delete E_RuneSoaring::default_instance_;
  delete E_RuneSoaring_reflection_;
  delete Sheet_RuneSoaring::default_instance_;
  delete Sheet_RuneSoaring_reflection_;
}

void protobuf_AddDesc_E_5fRune_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014E_Rune.proto\022\010proto_ff\032\025yd_fieldoption"
    "s.proto\"\331\001\n\013E_RuneConst\022\024\n\004m_id\030\001 \001(\005B\006\302"
    "\377\024\002id\022&\n\nm_costItem\030\002 \001(\005B\022\302\377\024\016\344\277\235\346\212\244\351\201\223"
    "\345\205\267id\0228\n\014m_lokCostNum\030\003 \001(\005B\"\302\377\024\036\345\260\201\345\215\260\345"
    "\215\225\344\270\252\346\240\274\345\255\220\346\211\243\351\231\244\347\211\251\345\223\201\022\036\n\010m_mallID\030\004 \001("
    "\005B\014\302\377\024\010\345\225\206\345\223\201id\0222\n\017m_quenching_max\030\005 \001(\005"
    "B\031\302\377\024\025\346\267\254\347\202\274\346\240\274\345\255\220\346\234\200\345\244\247\346\225\260\"H\n\017Sheet_Run"
    "eConst\0225\n\020E_RuneConst_List\030\001 \003(\0132\025.proto"
    "_ff.E_RuneConstB\004\210\301\024\002\"L\n\027E_RuneRuneAttri"
    "buteDesc\022\033\n\007m_value\030\001 \001(\005B\n\302\377\024\006\346\225\260\345\200\274\022\024\n"
    "\006m_type\030\002 \001(\005B\004\302\377\024\000\"\371\003\n\nE_RuneRune\022\024\n\004m_"
    "id\030\001 \001(\005B\006\302\377\024\002id\022.\n\016m_positionType\030\002 \001(\005"
    "B\026\302\377\024\022\347\254\246\346\226\207\351\203\250\344\275\215\347\261\273\345\236\213\022/\n\017m_attributeT"
    "ype\030\003 \001(\005B\026\302\377\024\022\347\254\246\346\226\207\345\261\236\346\200\247\347\261\273\345\236\213\022&\n\tm_s"
    "ubType\030\004 \001(\005B\023\302\377\024\017\347\254\246\346\226\207\345\255\220\347\261\273\345\236\213\022#\n\tm_q"
    "uality\030\005 \001(\005B\020\302\377\024\014\347\254\246\346\226\207\345\223\201\350\264\250\022\'\n\007m_leve"
    "l\030\006 \001(\005B\026\302\377\024\022\347\251\277\346\210\264\347\255\211\347\272\247\351\231\220\345\210\266\022+\n\021m_que"
    "nchingLminit\030\007 \001(\005B\020\302\377\024\014\346\267\254\347\202\274\344\270\212\351\231\220\022*\n\r"
    "m_disassemble\030\010 \001(\005B\023\302\377\024\017\346\230\257\345\220\246\345\217\257\345\210\206\350\247\243"
    "\022+\n\017m_disassembleId\030\t \001(\005B\022\302\377\024\016\345\210\206\350\247\243\347\211\251"
    "\345\223\201id\0220\n\020m_disassembleNum\030\n \001(\005B\026\302\377\024\022\345\210\206"
    "\350\247\243\347\211\251\345\223\201\346\225\260\351\207\217\022F\n\013m_attribute\030\013 \003(\0132!.p"
    "roto_ff.E_RuneRuneAttributeDescB\016\302\377\024\006\345\261\236"
    "\346\200\247\210\301\024\004\"E\n\016Sheet_RuneRune\0223\n\017E_RuneRune_"
    "List\030\001 \003(\0132\024.proto_ff.E_RuneRuneB\004\210\301\024 \"\206"
    "\003\n\017E_RuneRunewords\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id"
    "\022*\n\006m_name\030\002 \001(\tB\032\302\377\024\022\347\254\246\346\226\207\344\271\213\350\257\255\345\220\215\347\247\260"
    "\220\301\024@\022\'\n\007m_skill\030\003 \001(\005B\026\302\377\024\022\347\254\246\346\226\207\344\271\213\350\257\255\346"
    "\212\200\350\203\275\022+\n\021m_quenchingLminit\030\004 \001(\005B\020\302\377\024\014\346\267"
    "\254\347\202\274\344\270\212\351\231\220\022+\n\017m_disassembleId\030\005 \001(\005B\022\302\377\024"
    "\016\345\210\206\350\247\243\347\211\251\345\223\201id\0220\n\020m_disassembleNum\030\006 \001("
    "\005B\026\302\377\024\022\345\210\206\350\247\243\347\211\251\345\223\201\346\225\260\351\207\217\022+\n\013m_starLvMax"
    "\030\007 \001(\005B\026\302\377\024\022\346\234\200\345\244\247\345\215\207\346\230\237\347\255\211\347\272\247\022$\n\nm_cost"
    "Item\030\010 \001(\005B\020\302\377\024\014\345\215\207\346\230\237\346\235\220\346\226\231\022)\n\tm_costNu"
    "m\030\t \001(\005B\026\302\377\024\022\345\215\207\346\230\237\346\235\220\346\226\231\346\225\260\351\207\217\"U\n\023Sheet"
    "_RuneRunewords\022>\n\024E_RuneRunewords_List\030\001"
    " \003(\0132\031.proto_ff.E_RuneRunewordsB\005\210\301\024\200\001\"\221"
    "\001\n\017E_RuneQuenching\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\346\247"
    "\275\344\275\215id\022,\n\014m_expandProb\030\002 \001(\005B\026\302\377\024\022\346\267\254\347\202\274"
    "\346\213\223\345\261\225\346\246\202\347\216\207\0224\n\016m_qualityLimit\030\003 \001(\005B\034\302\377"
    "\024\030\346\211\251\345\261\225\347\254\246\346\226\207\345\223\201\350\264\250\350\246\201\346\261\202\"T\n\023Sheet_Rune"
    "Quenching\022=\n\024E_RuneQuenching_List\030\001 \003(\0132"
    "\031.proto_ff.E_RuneQuenchingB\004\210\301\024\020\"\255\001\n\034E_R"
    "uneStuntskillActivateDesc\022\031\n\005m_num\030\001 \001(\005"
    "B\n\302\377\024\006\346\225\260\351\207\217\022\035\n\tm_quality\030\002 \001(\005B\n\302\377\024\006\345\223\201"
    "\350\264\250\022)\n\017m_attributeType\030\003 \001(\005B\020\302\377\024\014\345\261\236\346\200\247"
    "\347\261\273\345\236\213\022(\n\016m_positionType\030\004 \001(\005B\020\302\377\024\014\351\203\250\344"
    "\275\215\347\261\273\345\236\213\"\320\001\n\020E_RuneStuntskill\022\037\n\tm_skill"
    "Id\030\001 \001(\005B\014\302\377\024\010\346\212\200\350\203\275id\022$\n\nm_position\030\002 \001"
    "(\005B\020\302\377\024\014\350\243\205\345\244\207\351\203\250\344\275\215\022#\n\tm_quality\030\003 \001(\005B"
    "\020\302\377\024\014\346\212\200\350\203\275\345\223\201\350\264\250\022P\n\nm_activate\030\004 \003(\0132&."
    "proto_ff.E_RuneStuntskillActivateDescB\024\302"
    "\377\024\014\346\277\200\346\264\273\346\235\241\344\273\266\210\301\024\003\"W\n\024Sheet_RuneStuntsk"
    "ill\022\?\n\025E_RuneStuntskill_List\030\001 \003(\0132\032.pro"
    "to_ff.E_RuneStuntskillB\004\210\301\024\020\"J\n\032E_RunePa"
    "ssiveskillTypeDesc\022\026\n\005m_num\030\001 \001(\005B\007\302\377\024\003\345"
    "\200\274\022\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002ID\"\275\002\n\022E_RunePassi"
    "veskill\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022$\n\nm_posit"
    "ion\030\002 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\351\203\250\344\275\215\022\036\n\004m_lv\030\003 \001("
    "\005B\020\302\377\024\014\350\242\253\345\212\250\347\255\211\347\272\247\022#\n\tm_quality\030\004 \001(\005B\020"
    "\302\377\024\014\346\212\200\350\203\275\345\223\201\350\264\250\0221\n\021m_activateQuality\030\005 "
    "\001(\005B\026\302\377\024\022\346\277\200\346\264\273\346\235\241\344\273\266\345\223\201\350\264\250\022-\n\rm_activat"
    "eNum\030\006 \001(\005B\026\302\377\024\022\346\277\200\346\264\273\346\235\241\344\273\266\346\225\260\351\207\217\022D\n\006m_"
    "type\030\007 \003(\0132$.proto_ff.E_RunePassiveskill"
    "TypeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\006\"]\n\026Sheet_RunePa"
    "ssiveskill\022C\n\027E_RunePassiveskill_List\030\001 "
    "\003(\0132\034.proto_ff.E_RunePassiveskillB\004\210\301\024\010\""
    "I\n\025E_RuneUpgradeTypeDesc\022\032\n\005m_num\030\001 \001(\tB"
    "\013\302\377\024\003\345\200\274\220\301\024@\022\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002ID\"\227\001\n\rE"
    "_RuneUpgrade\022\036\n\010m_runeId\030\001 \001(\005B\014\302\377\024\010\347\254\246\346"
    "\226\207id\022%\n\013m_upgradeUp\030\002 \001(\005B\020\302\377\024\014\345\215\207\347\272\247\344\270\212"
    "\351\231\220\022\?\n\006m_type\030\003 \003(\0132\037.proto_ff.E_RuneUpg"
    "radeTypeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\004\"N\n\021Sheet_Ru"
    "neUpgrade\0229\n\022E_RuneUpgrade_List\030\001 \003(\0132\027."
    "proto_ff.E_RuneUpgradeB\004\210\301\024 \"w\n\020E_RuneUp"
    "gradeexp\022\030\n\004m_Lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022$\n\nm_"
    "costItem\030\002 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\351\201\223\345\205\267\022#\n\tm_co"
    "stNum\030\003 \001(\005B\020\302\377\024\014\351\201\223\345\205\267\346\225\260\351\207\217\"X\n\024Sheet_R"
    "uneUpgradeexp\022@\n\025E_RuneUpgradeexp_List\030\001"
    " \003(\0132\032.proto_ff.E_RuneUpgradeexpB\005\210\301\024\200\004\""
    "O\n\033E_RuneAdvancedAttributeDesc\022\030\n\007m_valu"
    "e\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002 \001(\005B\006\302\377\024\002ID"
    "\"\206\002\n\016E_RuneAdvanced\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002i"
    "d\022!\n\rm_wearQuality\030\002 \001(\005B\n\302\377\024\006\345\223\201\351\230\266\022\036\n\010"
    "m_runeId\030\003 \001(\005B\014\302\377\024\010\347\254\246\346\226\207id\022$\n\nm_costIt"
    "em\030\004 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\351\201\223\345\205\267\022#\n\tm_costNum\030"
    "\005 \001(\005B\020\302\377\024\014\351\201\223\345\205\267\346\225\260\351\207\217\022P\n\013m_attribute\030\006"
    " \003(\0132%.proto_ff.E_RuneAdvancedAttributeD"
    "escB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\004\"R\n\022Sheet_RuneA"
    "dvanced\022<\n\023E_RuneAdvanced_List\030\001 \003(\0132\030.p"
    "roto_ff.E_RuneAdvancedB\005\210\301\024\200\002\"N\n\032E_RuneS"
    "oaringAttributeDesc\022\030\n\007m_value\030\001 \001(\005B\007\302\377"
    "\024\003\345\200\274\022\026\n\006m_type\030\002 \001(\005B\006\302\377\024\002ID\"\341\001\n\rE_Rune"
    "Soaring\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022 \n\006m_lvId\030"
    "\002 \001(\005B\020\302\377\024\014\351\243\236\345\215\207\347\255\211\347\272\247\022\'\n\rm_wearQuality"
    "\030\003 \001(\005B\020\302\377\024\014\345\223\201\351\230\266\350\246\201\346\261\202\022\036\n\010m_runeId\030\004 \001"
    "(\005B\014\302\377\024\010\347\254\246\346\226\207id\022O\n\013m_attribute\030\005 \003(\0132$."
    "proto_ff.E_RuneSoaringAttributeDescB\024\302\377\024"
    "\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\006\"N\n\021Sheet_RuneSoaring\0229"
    "\n\022E_RuneSoaring_List\030\001 \003(\0132\027.proto_ff.E_"
    "RuneSoaringB\004\210\301\024@", 4017);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Rune.proto", &protobuf_RegisterTypes);
  E_RuneConst::default_instance_ = new E_RuneConst();
  Sheet_RuneConst::default_instance_ = new Sheet_RuneConst();
  E_RuneRuneAttributeDesc::default_instance_ = new E_RuneRuneAttributeDesc();
  E_RuneRune::default_instance_ = new E_RuneRune();
  Sheet_RuneRune::default_instance_ = new Sheet_RuneRune();
  E_RuneRunewords::default_instance_ = new E_RuneRunewords();
  Sheet_RuneRunewords::default_instance_ = new Sheet_RuneRunewords();
  E_RuneQuenching::default_instance_ = new E_RuneQuenching();
  Sheet_RuneQuenching::default_instance_ = new Sheet_RuneQuenching();
  E_RuneStuntskillActivateDesc::default_instance_ = new E_RuneStuntskillActivateDesc();
  E_RuneStuntskill::default_instance_ = new E_RuneStuntskill();
  Sheet_RuneStuntskill::default_instance_ = new Sheet_RuneStuntskill();
  E_RunePassiveskillTypeDesc::default_instance_ = new E_RunePassiveskillTypeDesc();
  E_RunePassiveskill::default_instance_ = new E_RunePassiveskill();
  Sheet_RunePassiveskill::default_instance_ = new Sheet_RunePassiveskill();
  E_RuneUpgradeTypeDesc::default_instance_ = new E_RuneUpgradeTypeDesc();
  E_RuneUpgrade::default_instance_ = new E_RuneUpgrade();
  Sheet_RuneUpgrade::default_instance_ = new Sheet_RuneUpgrade();
  E_RuneUpgradeexp::default_instance_ = new E_RuneUpgradeexp();
  Sheet_RuneUpgradeexp::default_instance_ = new Sheet_RuneUpgradeexp();
  E_RuneAdvancedAttributeDesc::default_instance_ = new E_RuneAdvancedAttributeDesc();
  E_RuneAdvanced::default_instance_ = new E_RuneAdvanced();
  Sheet_RuneAdvanced::default_instance_ = new Sheet_RuneAdvanced();
  E_RuneSoaringAttributeDesc::default_instance_ = new E_RuneSoaringAttributeDesc();
  E_RuneSoaring::default_instance_ = new E_RuneSoaring();
  Sheet_RuneSoaring::default_instance_ = new Sheet_RuneSoaring();
  E_RuneConst::default_instance_->InitAsDefaultInstance();
  Sheet_RuneConst::default_instance_->InitAsDefaultInstance();
  E_RuneRuneAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_RuneRune::default_instance_->InitAsDefaultInstance();
  Sheet_RuneRune::default_instance_->InitAsDefaultInstance();
  E_RuneRunewords::default_instance_->InitAsDefaultInstance();
  Sheet_RuneRunewords::default_instance_->InitAsDefaultInstance();
  E_RuneQuenching::default_instance_->InitAsDefaultInstance();
  Sheet_RuneQuenching::default_instance_->InitAsDefaultInstance();
  E_RuneStuntskillActivateDesc::default_instance_->InitAsDefaultInstance();
  E_RuneStuntskill::default_instance_->InitAsDefaultInstance();
  Sheet_RuneStuntskill::default_instance_->InitAsDefaultInstance();
  E_RunePassiveskillTypeDesc::default_instance_->InitAsDefaultInstance();
  E_RunePassiveskill::default_instance_->InitAsDefaultInstance();
  Sheet_RunePassiveskill::default_instance_->InitAsDefaultInstance();
  E_RuneUpgradeTypeDesc::default_instance_->InitAsDefaultInstance();
  E_RuneUpgrade::default_instance_->InitAsDefaultInstance();
  Sheet_RuneUpgrade::default_instance_->InitAsDefaultInstance();
  E_RuneUpgradeexp::default_instance_->InitAsDefaultInstance();
  Sheet_RuneUpgradeexp::default_instance_->InitAsDefaultInstance();
  E_RuneAdvancedAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_RuneAdvanced::default_instance_->InitAsDefaultInstance();
  Sheet_RuneAdvanced::default_instance_->InitAsDefaultInstance();
  E_RuneSoaringAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_RuneSoaring::default_instance_->InitAsDefaultInstance();
  Sheet_RuneSoaring::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fRune_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fRune_2eproto {
  StaticDescriptorInitializer_E_5fRune_2eproto() {
    protobuf_AddDesc_E_5fRune_2eproto();
  }
} static_descriptor_initializer_E_5fRune_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_RuneConst::kMIdFieldNumber;
const int E_RuneConst::kMCostItemFieldNumber;
const int E_RuneConst::kMLokCostNumFieldNumber;
const int E_RuneConst::kMMallIDFieldNumber;
const int E_RuneConst::kMQuenchingMaxFieldNumber;
#endif  // !_MSC_VER

E_RuneConst::E_RuneConst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RuneConst::InitAsDefaultInstance() {
}

E_RuneConst::E_RuneConst(const E_RuneConst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RuneConst::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_costitem_ = 0;
  m_lokcostnum_ = 0;
  m_mallid_ = 0;
  m_quenching_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RuneConst::~E_RuneConst() {
  SharedDtor();
}

void E_RuneConst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_RuneConst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RuneConst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RuneConst_descriptor_;
}

const E_RuneConst& E_RuneConst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RuneConst* E_RuneConst::default_instance_ = NULL;

E_RuneConst* E_RuneConst::New() const {
  return new E_RuneConst;
}

void E_RuneConst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_costitem_ = 0;
    m_lokcostnum_ = 0;
    m_mallid_ = 0;
    m_quenching_max_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RuneConst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_costItem;
        break;
      }

      // optional int32 m_costItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costitem_)));
          set_has_m_costitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lokCostNum;
        break;
      }

      // optional int32 m_lokCostNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lokCostNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lokcostnum_)));
          set_has_m_lokcostnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_mallID;
        break;
      }

      // optional int32 m_mallID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mallID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mallid_)));
          set_has_m_mallid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_quenching_max;
        break;
      }

      // optional int32 m_quenching_max = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quenching_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quenching_max_)));
          set_has_m_quenching_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RuneConst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_costItem = 2;
  if (has_m_costitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_costitem(), output);
  }

  // optional int32 m_lokCostNum = 3;
  if (has_m_lokcostnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lokcostnum(), output);
  }

  // optional int32 m_mallID = 4;
  if (has_m_mallid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_mallid(), output);
  }

  // optional int32 m_quenching_max = 5;
  if (has_m_quenching_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_quenching_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RuneConst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_costItem = 2;
  if (has_m_costitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_costitem(), target);
  }

  // optional int32 m_lokCostNum = 3;
  if (has_m_lokcostnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lokcostnum(), target);
  }

  // optional int32 m_mallID = 4;
  if (has_m_mallid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_mallid(), target);
  }

  // optional int32 m_quenching_max = 5;
  if (has_m_quenching_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_quenching_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RuneConst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_costItem = 2;
    if (has_m_costitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costitem());
    }

    // optional int32 m_lokCostNum = 3;
    if (has_m_lokcostnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lokcostnum());
    }

    // optional int32 m_mallID = 4;
    if (has_m_mallid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mallid());
    }

    // optional int32 m_quenching_max = 5;
    if (has_m_quenching_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quenching_max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RuneConst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RuneConst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RuneConst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RuneConst::MergeFrom(const E_RuneConst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_costitem()) {
      set_m_costitem(from.m_costitem());
    }
    if (from.has_m_lokcostnum()) {
      set_m_lokcostnum(from.m_lokcostnum());
    }
    if (from.has_m_mallid()) {
      set_m_mallid(from.m_mallid());
    }
    if (from.has_m_quenching_max()) {
      set_m_quenching_max(from.m_quenching_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RuneConst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RuneConst::CopyFrom(const E_RuneConst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RuneConst::IsInitialized() const {

  return true;
}

void E_RuneConst::Swap(E_RuneConst* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_costitem_, other->m_costitem_);
    std::swap(m_lokcostnum_, other->m_lokcostnum_);
    std::swap(m_mallid_, other->m_mallid_);
    std::swap(m_quenching_max_, other->m_quenching_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RuneConst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RuneConst_descriptor_;
  metadata.reflection = E_RuneConst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_RuneConst::kERuneConstListFieldNumber;
#endif  // !_MSC_VER

Sheet_RuneConst::Sheet_RuneConst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_RuneConst::InitAsDefaultInstance() {
}

Sheet_RuneConst::Sheet_RuneConst(const Sheet_RuneConst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_RuneConst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_RuneConst::~Sheet_RuneConst() {
  SharedDtor();
}

void Sheet_RuneConst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_RuneConst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_RuneConst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_RuneConst_descriptor_;
}

const Sheet_RuneConst& Sheet_RuneConst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

Sheet_RuneConst* Sheet_RuneConst::default_instance_ = NULL;

Sheet_RuneConst* Sheet_RuneConst::New() const {
  return new Sheet_RuneConst;
}

void Sheet_RuneConst::Clear() {
  e_runeconst_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_RuneConst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_RuneConst E_RuneConst_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_RuneConst_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_runeconst_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_RuneConst_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_RuneConst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_RuneConst E_RuneConst_List = 1;
  for (int i = 0; i < this->e_runeconst_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_runeconst_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_RuneConst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_RuneConst E_RuneConst_List = 1;
  for (int i = 0; i < this->e_runeconst_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_runeconst_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_RuneConst::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_RuneConst E_RuneConst_List = 1;
  total_size += 1 * this->e_runeconst_list_size();
  for (int i = 0; i < this->e_runeconst_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_runeconst_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_RuneConst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_RuneConst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_RuneConst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_RuneConst::MergeFrom(const Sheet_RuneConst& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_runeconst_list_.MergeFrom(from.e_runeconst_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_RuneConst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_RuneConst::CopyFrom(const Sheet_RuneConst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_RuneConst::IsInitialized() const {

  return true;
}

void Sheet_RuneConst::Swap(Sheet_RuneConst* other) {
  if (other != this) {
    e_runeconst_list_.Swap(&other->e_runeconst_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_RuneConst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_RuneConst_descriptor_;
  metadata.reflection = Sheet_RuneConst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RuneRuneAttributeDesc::kMValueFieldNumber;
const int E_RuneRuneAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_RuneRuneAttributeDesc::E_RuneRuneAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RuneRuneAttributeDesc::InitAsDefaultInstance() {
}

E_RuneRuneAttributeDesc::E_RuneRuneAttributeDesc(const E_RuneRuneAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RuneRuneAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RuneRuneAttributeDesc::~E_RuneRuneAttributeDesc() {
  SharedDtor();
}

void E_RuneRuneAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_RuneRuneAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RuneRuneAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RuneRuneAttributeDesc_descriptor_;
}

const E_RuneRuneAttributeDesc& E_RuneRuneAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RuneRuneAttributeDesc* E_RuneRuneAttributeDesc::default_instance_ = NULL;

E_RuneRuneAttributeDesc* E_RuneRuneAttributeDesc::New() const {
  return new E_RuneRuneAttributeDesc;
}

void E_RuneRuneAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RuneRuneAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RuneRuneAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RuneRuneAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RuneRuneAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RuneRuneAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RuneRuneAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RuneRuneAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RuneRuneAttributeDesc::MergeFrom(const E_RuneRuneAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RuneRuneAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RuneRuneAttributeDesc::CopyFrom(const E_RuneRuneAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RuneRuneAttributeDesc::IsInitialized() const {

  return true;
}

void E_RuneRuneAttributeDesc::Swap(E_RuneRuneAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RuneRuneAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RuneRuneAttributeDesc_descriptor_;
  metadata.reflection = E_RuneRuneAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RuneRune::kMIdFieldNumber;
const int E_RuneRune::kMPositionTypeFieldNumber;
const int E_RuneRune::kMAttributeTypeFieldNumber;
const int E_RuneRune::kMSubTypeFieldNumber;
const int E_RuneRune::kMQualityFieldNumber;
const int E_RuneRune::kMLevelFieldNumber;
const int E_RuneRune::kMQuenchingLminitFieldNumber;
const int E_RuneRune::kMDisassembleFieldNumber;
const int E_RuneRune::kMDisassembleIdFieldNumber;
const int E_RuneRune::kMDisassembleNumFieldNumber;
const int E_RuneRune::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_RuneRune::E_RuneRune()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RuneRune::InitAsDefaultInstance() {
}

E_RuneRune::E_RuneRune(const E_RuneRune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RuneRune::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_positiontype_ = 0;
  m_attributetype_ = 0;
  m_subtype_ = 0;
  m_quality_ = 0;
  m_level_ = 0;
  m_quenchinglminit_ = 0;
  m_disassemble_ = 0;
  m_disassembleid_ = 0;
  m_disassemblenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RuneRune::~E_RuneRune() {
  SharedDtor();
}

void E_RuneRune::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_RuneRune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RuneRune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RuneRune_descriptor_;
}

const E_RuneRune& E_RuneRune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RuneRune* E_RuneRune::default_instance_ = NULL;

E_RuneRune* E_RuneRune::New() const {
  return new E_RuneRune;
}

void E_RuneRune::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_positiontype_ = 0;
    m_attributetype_ = 0;
    m_subtype_ = 0;
    m_quality_ = 0;
    m_level_ = 0;
    m_quenchinglminit_ = 0;
    m_disassemble_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_disassembleid_ = 0;
    m_disassemblenum_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RuneRune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_positionType;
        break;
      }

      // optional int32 m_positionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_positionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_positiontype_)));
          set_has_m_positiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_attributeType;
        break;
      }

      // optional int32 m_attributeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attributeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_attributetype_)));
          set_has_m_attributetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_subType;
        break;
      }

      // optional int32 m_subType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_subType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_subtype_)));
          set_has_m_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_quenchingLminit;
        break;
      }

      // optional int32 m_quenchingLminit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quenchingLminit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quenchinglminit_)));
          set_has_m_quenchinglminit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_disassemble;
        break;
      }

      // optional int32 m_disassemble = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_disassemble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_disassemble_)));
          set_has_m_disassemble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_disassembleId;
        break;
      }

      // optional int32 m_disassembleId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_disassembleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_disassembleid_)));
          set_has_m_disassembleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_disassembleNum;
        break;
      }

      // optional int32 m_disassembleNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_disassembleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_disassemblenum_)));
          set_has_m_disassemblenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_RuneRuneAttributeDesc m_attribute = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RuneRune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_positionType = 2;
  if (has_m_positiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_positiontype(), output);
  }

  // optional int32 m_attributeType = 3;
  if (has_m_attributetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_attributetype(), output);
  }

  // optional int32 m_subType = 4;
  if (has_m_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_subtype(), output);
  }

  // optional int32 m_quality = 5;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_quality(), output);
  }

  // optional int32 m_level = 6;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_level(), output);
  }

  // optional int32 m_quenchingLminit = 7;
  if (has_m_quenchinglminit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_quenchinglminit(), output);
  }

  // optional int32 m_disassemble = 8;
  if (has_m_disassemble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_disassemble(), output);
  }

  // optional int32 m_disassembleId = 9;
  if (has_m_disassembleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_disassembleid(), output);
  }

  // optional int32 m_disassembleNum = 10;
  if (has_m_disassemblenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_disassemblenum(), output);
  }

  // repeated .proto_ff.E_RuneRuneAttributeDesc m_attribute = 11;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RuneRune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_positionType = 2;
  if (has_m_positiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_positiontype(), target);
  }

  // optional int32 m_attributeType = 3;
  if (has_m_attributetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_attributetype(), target);
  }

  // optional int32 m_subType = 4;
  if (has_m_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_subtype(), target);
  }

  // optional int32 m_quality = 5;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_quality(), target);
  }

  // optional int32 m_level = 6;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_level(), target);
  }

  // optional int32 m_quenchingLminit = 7;
  if (has_m_quenchinglminit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_quenchinglminit(), target);
  }

  // optional int32 m_disassemble = 8;
  if (has_m_disassemble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_disassemble(), target);
  }

  // optional int32 m_disassembleId = 9;
  if (has_m_disassembleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_disassembleid(), target);
  }

  // optional int32 m_disassembleNum = 10;
  if (has_m_disassemblenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_disassemblenum(), target);
  }

  // repeated .proto_ff.E_RuneRuneAttributeDesc m_attribute = 11;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RuneRune::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_positionType = 2;
    if (has_m_positiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_positiontype());
    }

    // optional int32 m_attributeType = 3;
    if (has_m_attributetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_attributetype());
    }

    // optional int32 m_subType = 4;
    if (has_m_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_subtype());
    }

    // optional int32 m_quality = 5;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_level = 6;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_quenchingLminit = 7;
    if (has_m_quenchinglminit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quenchinglminit());
    }

    // optional int32 m_disassemble = 8;
    if (has_m_disassemble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_disassemble());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_disassembleId = 9;
    if (has_m_disassembleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_disassembleid());
    }

    // optional int32 m_disassembleNum = 10;
    if (has_m_disassemblenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_disassemblenum());
    }

  }
  // repeated .proto_ff.E_RuneRuneAttributeDesc m_attribute = 11;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RuneRune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RuneRune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RuneRune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RuneRune::MergeFrom(const E_RuneRune& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_positiontype()) {
      set_m_positiontype(from.m_positiontype());
    }
    if (from.has_m_attributetype()) {
      set_m_attributetype(from.m_attributetype());
    }
    if (from.has_m_subtype()) {
      set_m_subtype(from.m_subtype());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_quenchinglminit()) {
      set_m_quenchinglminit(from.m_quenchinglminit());
    }
    if (from.has_m_disassemble()) {
      set_m_disassemble(from.m_disassemble());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_disassembleid()) {
      set_m_disassembleid(from.m_disassembleid());
    }
    if (from.has_m_disassemblenum()) {
      set_m_disassemblenum(from.m_disassemblenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RuneRune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RuneRune::CopyFrom(const E_RuneRune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RuneRune::IsInitialized() const {

  return true;
}

void E_RuneRune::Swap(E_RuneRune* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_positiontype_, other->m_positiontype_);
    std::swap(m_attributetype_, other->m_attributetype_);
    std::swap(m_subtype_, other->m_subtype_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_quenchinglminit_, other->m_quenchinglminit_);
    std::swap(m_disassemble_, other->m_disassemble_);
    std::swap(m_disassembleid_, other->m_disassembleid_);
    std::swap(m_disassemblenum_, other->m_disassemblenum_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RuneRune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RuneRune_descriptor_;
  metadata.reflection = E_RuneRune_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_RuneRune::kERuneRuneListFieldNumber;
#endif  // !_MSC_VER

Sheet_RuneRune::Sheet_RuneRune()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_RuneRune::InitAsDefaultInstance() {
}

Sheet_RuneRune::Sheet_RuneRune(const Sheet_RuneRune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_RuneRune::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_RuneRune::~Sheet_RuneRune() {
  SharedDtor();
}

void Sheet_RuneRune::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_RuneRune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_RuneRune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_RuneRune_descriptor_;
}

const Sheet_RuneRune& Sheet_RuneRune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

Sheet_RuneRune* Sheet_RuneRune::default_instance_ = NULL;

Sheet_RuneRune* Sheet_RuneRune::New() const {
  return new Sheet_RuneRune;
}

void Sheet_RuneRune::Clear() {
  e_runerune_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_RuneRune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_RuneRune E_RuneRune_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_RuneRune_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_runerune_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_RuneRune_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_RuneRune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_RuneRune E_RuneRune_List = 1;
  for (int i = 0; i < this->e_runerune_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_runerune_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_RuneRune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_RuneRune E_RuneRune_List = 1;
  for (int i = 0; i < this->e_runerune_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_runerune_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_RuneRune::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_RuneRune E_RuneRune_List = 1;
  total_size += 1 * this->e_runerune_list_size();
  for (int i = 0; i < this->e_runerune_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_runerune_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_RuneRune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_RuneRune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_RuneRune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_RuneRune::MergeFrom(const Sheet_RuneRune& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_runerune_list_.MergeFrom(from.e_runerune_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_RuneRune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_RuneRune::CopyFrom(const Sheet_RuneRune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_RuneRune::IsInitialized() const {

  return true;
}

void Sheet_RuneRune::Swap(Sheet_RuneRune* other) {
  if (other != this) {
    e_runerune_list_.Swap(&other->e_runerune_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_RuneRune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_RuneRune_descriptor_;
  metadata.reflection = Sheet_RuneRune_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RuneRunewords::kMIdFieldNumber;
const int E_RuneRunewords::kMNameFieldNumber;
const int E_RuneRunewords::kMSkillFieldNumber;
const int E_RuneRunewords::kMQuenchingLminitFieldNumber;
const int E_RuneRunewords::kMDisassembleIdFieldNumber;
const int E_RuneRunewords::kMDisassembleNumFieldNumber;
const int E_RuneRunewords::kMStarLvMaxFieldNumber;
const int E_RuneRunewords::kMCostItemFieldNumber;
const int E_RuneRunewords::kMCostNumFieldNumber;
#endif  // !_MSC_VER

E_RuneRunewords::E_RuneRunewords()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RuneRunewords::InitAsDefaultInstance() {
}

E_RuneRunewords::E_RuneRunewords(const E_RuneRunewords& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RuneRunewords::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_skill_ = 0;
  m_quenchinglminit_ = 0;
  m_disassembleid_ = 0;
  m_disassemblenum_ = 0;
  m_starlvmax_ = 0;
  m_costitem_ = 0;
  m_costnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RuneRunewords::~E_RuneRunewords() {
  SharedDtor();
}

void E_RuneRunewords::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_RuneRunewords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RuneRunewords::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RuneRunewords_descriptor_;
}

const E_RuneRunewords& E_RuneRunewords::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RuneRunewords* E_RuneRunewords::default_instance_ = NULL;

E_RuneRunewords* E_RuneRunewords::New() const {
  return new E_RuneRunewords;
}

void E_RuneRunewords::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_skill_ = 0;
    m_quenchinglminit_ = 0;
    m_disassembleid_ = 0;
    m_disassemblenum_ = 0;
    m_starlvmax_ = 0;
    m_costitem_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_costnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RuneRunewords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_skill;
        break;
      }

      // optional int32 m_skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skill_)));
          set_has_m_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_quenchingLminit;
        break;
      }

      // optional int32 m_quenchingLminit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quenchingLminit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quenchinglminit_)));
          set_has_m_quenchinglminit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_disassembleId;
        break;
      }

      // optional int32 m_disassembleId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_disassembleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_disassembleid_)));
          set_has_m_disassembleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_disassembleNum;
        break;
      }

      // optional int32 m_disassembleNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_disassembleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_disassemblenum_)));
          set_has_m_disassemblenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_starLvMax;
        break;
      }

      // optional int32 m_starLvMax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starLvMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starlvmax_)));
          set_has_m_starlvmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_costItem;
        break;
      }

      // optional int32 m_costItem = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costitem_)));
          set_has_m_costitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_costNum;
        break;
      }

      // optional int32 m_costNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costnum_)));
          set_has_m_costnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RuneRunewords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_skill = 3;
  if (has_m_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_skill(), output);
  }

  // optional int32 m_quenchingLminit = 4;
  if (has_m_quenchinglminit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_quenchinglminit(), output);
  }

  // optional int32 m_disassembleId = 5;
  if (has_m_disassembleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_disassembleid(), output);
  }

  // optional int32 m_disassembleNum = 6;
  if (has_m_disassemblenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_disassemblenum(), output);
  }

  // optional int32 m_starLvMax = 7;
  if (has_m_starlvmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_starlvmax(), output);
  }

  // optional int32 m_costItem = 8;
  if (has_m_costitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_costitem(), output);
  }

  // optional int32 m_costNum = 9;
  if (has_m_costnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_costnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RuneRunewords::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_skill = 3;
  if (has_m_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_skill(), target);
  }

  // optional int32 m_quenchingLminit = 4;
  if (has_m_quenchinglminit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_quenchinglminit(), target);
  }

  // optional int32 m_disassembleId = 5;
  if (has_m_disassembleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_disassembleid(), target);
  }

  // optional int32 m_disassembleNum = 6;
  if (has_m_disassemblenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_disassemblenum(), target);
  }

  // optional int32 m_starLvMax = 7;
  if (has_m_starlvmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_starlvmax(), target);
  }

  // optional int32 m_costItem = 8;
  if (has_m_costitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_costitem(), target);
  }

  // optional int32 m_costNum = 9;
  if (has_m_costnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_costnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RuneRunewords::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_skill = 3;
    if (has_m_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skill());
    }

    // optional int32 m_quenchingLminit = 4;
    if (has_m_quenchinglminit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quenchinglminit());
    }

    // optional int32 m_disassembleId = 5;
    if (has_m_disassembleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_disassembleid());
    }

    // optional int32 m_disassembleNum = 6;
    if (has_m_disassemblenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_disassemblenum());
    }

    // optional int32 m_starLvMax = 7;
    if (has_m_starlvmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starlvmax());
    }

    // optional int32 m_costItem = 8;
    if (has_m_costitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costitem());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_costNum = 9;
    if (has_m_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RuneRunewords::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RuneRunewords* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RuneRunewords*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RuneRunewords::MergeFrom(const E_RuneRunewords& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_skill()) {
      set_m_skill(from.m_skill());
    }
    if (from.has_m_quenchinglminit()) {
      set_m_quenchinglminit(from.m_quenchinglminit());
    }
    if (from.has_m_disassembleid()) {
      set_m_disassembleid(from.m_disassembleid());
    }
    if (from.has_m_disassemblenum()) {
      set_m_disassemblenum(from.m_disassemblenum());
    }
    if (from.has_m_starlvmax()) {
      set_m_starlvmax(from.m_starlvmax());
    }
    if (from.has_m_costitem()) {
      set_m_costitem(from.m_costitem());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_costnum()) {
      set_m_costnum(from.m_costnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RuneRunewords::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RuneRunewords::CopyFrom(const E_RuneRunewords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RuneRunewords::IsInitialized() const {

  return true;
}

void E_RuneRunewords::Swap(E_RuneRunewords* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_skill_, other->m_skill_);
    std::swap(m_quenchinglminit_, other->m_quenchinglminit_);
    std::swap(m_disassembleid_, other->m_disassembleid_);
    std::swap(m_disassemblenum_, other->m_disassemblenum_);
    std::swap(m_starlvmax_, other->m_starlvmax_);
    std::swap(m_costitem_, other->m_costitem_);
    std::swap(m_costnum_, other->m_costnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RuneRunewords::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RuneRunewords_descriptor_;
  metadata.reflection = E_RuneRunewords_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_RuneRunewords::kERuneRunewordsListFieldNumber;
#endif  // !_MSC_VER

Sheet_RuneRunewords::Sheet_RuneRunewords()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_RuneRunewords::InitAsDefaultInstance() {
}

Sheet_RuneRunewords::Sheet_RuneRunewords(const Sheet_RuneRunewords& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_RuneRunewords::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_RuneRunewords::~Sheet_RuneRunewords() {
  SharedDtor();
}

void Sheet_RuneRunewords::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_RuneRunewords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_RuneRunewords::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_RuneRunewords_descriptor_;
}

const Sheet_RuneRunewords& Sheet_RuneRunewords::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

Sheet_RuneRunewords* Sheet_RuneRunewords::default_instance_ = NULL;

Sheet_RuneRunewords* Sheet_RuneRunewords::New() const {
  return new Sheet_RuneRunewords;
}

void Sheet_RuneRunewords::Clear() {
  e_runerunewords_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_RuneRunewords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_RuneRunewords E_RuneRunewords_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_RuneRunewords_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_runerunewords_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_RuneRunewords_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_RuneRunewords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_RuneRunewords E_RuneRunewords_List = 1;
  for (int i = 0; i < this->e_runerunewords_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_runerunewords_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_RuneRunewords::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_RuneRunewords E_RuneRunewords_List = 1;
  for (int i = 0; i < this->e_runerunewords_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_runerunewords_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_RuneRunewords::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_RuneRunewords E_RuneRunewords_List = 1;
  total_size += 1 * this->e_runerunewords_list_size();
  for (int i = 0; i < this->e_runerunewords_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_runerunewords_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_RuneRunewords::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_RuneRunewords* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_RuneRunewords*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_RuneRunewords::MergeFrom(const Sheet_RuneRunewords& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_runerunewords_list_.MergeFrom(from.e_runerunewords_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_RuneRunewords::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_RuneRunewords::CopyFrom(const Sheet_RuneRunewords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_RuneRunewords::IsInitialized() const {

  return true;
}

void Sheet_RuneRunewords::Swap(Sheet_RuneRunewords* other) {
  if (other != this) {
    e_runerunewords_list_.Swap(&other->e_runerunewords_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_RuneRunewords::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_RuneRunewords_descriptor_;
  metadata.reflection = Sheet_RuneRunewords_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RuneQuenching::kMIdFieldNumber;
const int E_RuneQuenching::kMExpandProbFieldNumber;
const int E_RuneQuenching::kMQualityLimitFieldNumber;
#endif  // !_MSC_VER

E_RuneQuenching::E_RuneQuenching()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RuneQuenching::InitAsDefaultInstance() {
}

E_RuneQuenching::E_RuneQuenching(const E_RuneQuenching& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RuneQuenching::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_expandprob_ = 0;
  m_qualitylimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RuneQuenching::~E_RuneQuenching() {
  SharedDtor();
}

void E_RuneQuenching::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_RuneQuenching::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RuneQuenching::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RuneQuenching_descriptor_;
}

const E_RuneQuenching& E_RuneQuenching::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RuneQuenching* E_RuneQuenching::default_instance_ = NULL;

E_RuneQuenching* E_RuneQuenching::New() const {
  return new E_RuneQuenching;
}

void E_RuneQuenching::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_expandprob_ = 0;
    m_qualitylimit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RuneQuenching::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_expandProb;
        break;
      }

      // optional int32 m_expandProb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_expandProb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_expandprob_)));
          set_has_m_expandprob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_qualityLimit;
        break;
      }

      // optional int32 m_qualityLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_qualityLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_qualitylimit_)));
          set_has_m_qualitylimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RuneQuenching::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_expandProb = 2;
  if (has_m_expandprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_expandprob(), output);
  }

  // optional int32 m_qualityLimit = 3;
  if (has_m_qualitylimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_qualitylimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RuneQuenching::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_expandProb = 2;
  if (has_m_expandprob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_expandprob(), target);
  }

  // optional int32 m_qualityLimit = 3;
  if (has_m_qualitylimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_qualitylimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RuneQuenching::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_expandProb = 2;
    if (has_m_expandprob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_expandprob());
    }

    // optional int32 m_qualityLimit = 3;
    if (has_m_qualitylimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_qualitylimit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RuneQuenching::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RuneQuenching* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RuneQuenching*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RuneQuenching::MergeFrom(const E_RuneQuenching& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_expandprob()) {
      set_m_expandprob(from.m_expandprob());
    }
    if (from.has_m_qualitylimit()) {
      set_m_qualitylimit(from.m_qualitylimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RuneQuenching::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RuneQuenching::CopyFrom(const E_RuneQuenching& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RuneQuenching::IsInitialized() const {

  return true;
}

void E_RuneQuenching::Swap(E_RuneQuenching* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_expandprob_, other->m_expandprob_);
    std::swap(m_qualitylimit_, other->m_qualitylimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RuneQuenching::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RuneQuenching_descriptor_;
  metadata.reflection = E_RuneQuenching_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_RuneQuenching::kERuneQuenchingListFieldNumber;
#endif  // !_MSC_VER

Sheet_RuneQuenching::Sheet_RuneQuenching()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_RuneQuenching::InitAsDefaultInstance() {
}

Sheet_RuneQuenching::Sheet_RuneQuenching(const Sheet_RuneQuenching& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_RuneQuenching::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_RuneQuenching::~Sheet_RuneQuenching() {
  SharedDtor();
}

void Sheet_RuneQuenching::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_RuneQuenching::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_RuneQuenching::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_RuneQuenching_descriptor_;
}

const Sheet_RuneQuenching& Sheet_RuneQuenching::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

Sheet_RuneQuenching* Sheet_RuneQuenching::default_instance_ = NULL;

Sheet_RuneQuenching* Sheet_RuneQuenching::New() const {
  return new Sheet_RuneQuenching;
}

void Sheet_RuneQuenching::Clear() {
  e_runequenching_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_RuneQuenching::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_RuneQuenching E_RuneQuenching_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_RuneQuenching_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_runequenching_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_RuneQuenching_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_RuneQuenching::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_RuneQuenching E_RuneQuenching_List = 1;
  for (int i = 0; i < this->e_runequenching_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_runequenching_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_RuneQuenching::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_RuneQuenching E_RuneQuenching_List = 1;
  for (int i = 0; i < this->e_runequenching_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_runequenching_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_RuneQuenching::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_RuneQuenching E_RuneQuenching_List = 1;
  total_size += 1 * this->e_runequenching_list_size();
  for (int i = 0; i < this->e_runequenching_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_runequenching_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_RuneQuenching::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_RuneQuenching* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_RuneQuenching*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_RuneQuenching::MergeFrom(const Sheet_RuneQuenching& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_runequenching_list_.MergeFrom(from.e_runequenching_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_RuneQuenching::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_RuneQuenching::CopyFrom(const Sheet_RuneQuenching& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_RuneQuenching::IsInitialized() const {

  return true;
}

void Sheet_RuneQuenching::Swap(Sheet_RuneQuenching* other) {
  if (other != this) {
    e_runequenching_list_.Swap(&other->e_runequenching_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_RuneQuenching::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_RuneQuenching_descriptor_;
  metadata.reflection = Sheet_RuneQuenching_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RuneStuntskillActivateDesc::kMNumFieldNumber;
const int E_RuneStuntskillActivateDesc::kMQualityFieldNumber;
const int E_RuneStuntskillActivateDesc::kMAttributeTypeFieldNumber;
const int E_RuneStuntskillActivateDesc::kMPositionTypeFieldNumber;
#endif  // !_MSC_VER

E_RuneStuntskillActivateDesc::E_RuneStuntskillActivateDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RuneStuntskillActivateDesc::InitAsDefaultInstance() {
}

E_RuneStuntskillActivateDesc::E_RuneStuntskillActivateDesc(const E_RuneStuntskillActivateDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RuneStuntskillActivateDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_quality_ = 0;
  m_attributetype_ = 0;
  m_positiontype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RuneStuntskillActivateDesc::~E_RuneStuntskillActivateDesc() {
  SharedDtor();
}

void E_RuneStuntskillActivateDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_RuneStuntskillActivateDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RuneStuntskillActivateDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RuneStuntskillActivateDesc_descriptor_;
}

const E_RuneStuntskillActivateDesc& E_RuneStuntskillActivateDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RuneStuntskillActivateDesc* E_RuneStuntskillActivateDesc::default_instance_ = NULL;

E_RuneStuntskillActivateDesc* E_RuneStuntskillActivateDesc::New() const {
  return new E_RuneStuntskillActivateDesc;
}

void E_RuneStuntskillActivateDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_quality_ = 0;
    m_attributetype_ = 0;
    m_positiontype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RuneStuntskillActivateDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_attributeType;
        break;
      }

      // optional int32 m_attributeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attributeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_attributetype_)));
          set_has_m_attributetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_positionType;
        break;
      }

      // optional int32 m_positionType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_positionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_positiontype_)));
          set_has_m_positiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RuneStuntskillActivateDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_quality(), output);
  }

  // optional int32 m_attributeType = 3;
  if (has_m_attributetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_attributetype(), output);
  }

  // optional int32 m_positionType = 4;
  if (has_m_positiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_positiontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RuneStuntskillActivateDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_quality(), target);
  }

  // optional int32 m_attributeType = 3;
  if (has_m_attributetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_attributetype(), target);
  }

  // optional int32 m_positionType = 4;
  if (has_m_positiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_positiontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RuneStuntskillActivateDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_quality = 2;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_attributeType = 3;
    if (has_m_attributetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_attributetype());
    }

    // optional int32 m_positionType = 4;
    if (has_m_positiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_positiontype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RuneStuntskillActivateDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RuneStuntskillActivateDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RuneStuntskillActivateDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RuneStuntskillActivateDesc::MergeFrom(const E_RuneStuntskillActivateDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_attributetype()) {
      set_m_attributetype(from.m_attributetype());
    }
    if (from.has_m_positiontype()) {
      set_m_positiontype(from.m_positiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RuneStuntskillActivateDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RuneStuntskillActivateDesc::CopyFrom(const E_RuneStuntskillActivateDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RuneStuntskillActivateDesc::IsInitialized() const {

  return true;
}

void E_RuneStuntskillActivateDesc::Swap(E_RuneStuntskillActivateDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_attributetype_, other->m_attributetype_);
    std::swap(m_positiontype_, other->m_positiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RuneStuntskillActivateDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RuneStuntskillActivateDesc_descriptor_;
  metadata.reflection = E_RuneStuntskillActivateDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RuneStuntskill::kMSkillIdFieldNumber;
const int E_RuneStuntskill::kMPositionFieldNumber;
const int E_RuneStuntskill::kMQualityFieldNumber;
const int E_RuneStuntskill::kMActivateFieldNumber;
#endif  // !_MSC_VER

E_RuneStuntskill::E_RuneStuntskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RuneStuntskill::InitAsDefaultInstance() {
}

E_RuneStuntskill::E_RuneStuntskill(const E_RuneStuntskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RuneStuntskill::SharedCtor() {
  _cached_size_ = 0;
  m_skillid_ = 0;
  m_position_ = 0;
  m_quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RuneStuntskill::~E_RuneStuntskill() {
  SharedDtor();
}

void E_RuneStuntskill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_RuneStuntskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RuneStuntskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RuneStuntskill_descriptor_;
}

const E_RuneStuntskill& E_RuneStuntskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RuneStuntskill* E_RuneStuntskill::default_instance_ = NULL;

E_RuneStuntskill* E_RuneStuntskill::New() const {
  return new E_RuneStuntskill;
}

void E_RuneStuntskill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_skillid_ = 0;
    m_position_ = 0;
    m_quality_ = 0;
  }
  m_activate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RuneStuntskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_activate;
        break;
      }

      // repeated .proto_ff.E_RuneStuntskillActivateDesc m_activate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_activate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_activate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_activate;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RuneStuntskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_skillId = 1;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_skillid(), output);
  }

  // optional int32 m_position = 2;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_position(), output);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_quality(), output);
  }

  // repeated .proto_ff.E_RuneStuntskillActivateDesc m_activate = 4;
  for (int i = 0; i < this->m_activate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_activate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RuneStuntskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_skillId = 1;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_skillid(), target);
  }

  // optional int32 m_position = 2;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_position(), target);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_quality(), target);
  }

  // repeated .proto_ff.E_RuneStuntskillActivateDesc m_activate = 4;
  for (int i = 0; i < this->m_activate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_activate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RuneStuntskill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_skillId = 1;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_position = 2;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

    // optional int32 m_quality = 3;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

  }
  // repeated .proto_ff.E_RuneStuntskillActivateDesc m_activate = 4;
  total_size += 1 * this->m_activate_size();
  for (int i = 0; i < this->m_activate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_activate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RuneStuntskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RuneStuntskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RuneStuntskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RuneStuntskill::MergeFrom(const E_RuneStuntskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_activate_.MergeFrom(from.m_activate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RuneStuntskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RuneStuntskill::CopyFrom(const E_RuneStuntskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RuneStuntskill::IsInitialized() const {

  return true;
}

void E_RuneStuntskill::Swap(E_RuneStuntskill* other) {
  if (other != this) {
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_position_, other->m_position_);
    std::swap(m_quality_, other->m_quality_);
    m_activate_.Swap(&other->m_activate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RuneStuntskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RuneStuntskill_descriptor_;
  metadata.reflection = E_RuneStuntskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_RuneStuntskill::kERuneStuntskillListFieldNumber;
#endif  // !_MSC_VER

Sheet_RuneStuntskill::Sheet_RuneStuntskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_RuneStuntskill::InitAsDefaultInstance() {
}

Sheet_RuneStuntskill::Sheet_RuneStuntskill(const Sheet_RuneStuntskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_RuneStuntskill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_RuneStuntskill::~Sheet_RuneStuntskill() {
  SharedDtor();
}

void Sheet_RuneStuntskill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_RuneStuntskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_RuneStuntskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_RuneStuntskill_descriptor_;
}

const Sheet_RuneStuntskill& Sheet_RuneStuntskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

Sheet_RuneStuntskill* Sheet_RuneStuntskill::default_instance_ = NULL;

Sheet_RuneStuntskill* Sheet_RuneStuntskill::New() const {
  return new Sheet_RuneStuntskill;
}

void Sheet_RuneStuntskill::Clear() {
  e_runestuntskill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_RuneStuntskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_RuneStuntskill E_RuneStuntskill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_RuneStuntskill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_runestuntskill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_RuneStuntskill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_RuneStuntskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_RuneStuntskill E_RuneStuntskill_List = 1;
  for (int i = 0; i < this->e_runestuntskill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_runestuntskill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_RuneStuntskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_RuneStuntskill E_RuneStuntskill_List = 1;
  for (int i = 0; i < this->e_runestuntskill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_runestuntskill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_RuneStuntskill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_RuneStuntskill E_RuneStuntskill_List = 1;
  total_size += 1 * this->e_runestuntskill_list_size();
  for (int i = 0; i < this->e_runestuntskill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_runestuntskill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_RuneStuntskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_RuneStuntskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_RuneStuntskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_RuneStuntskill::MergeFrom(const Sheet_RuneStuntskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_runestuntskill_list_.MergeFrom(from.e_runestuntskill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_RuneStuntskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_RuneStuntskill::CopyFrom(const Sheet_RuneStuntskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_RuneStuntskill::IsInitialized() const {

  return true;
}

void Sheet_RuneStuntskill::Swap(Sheet_RuneStuntskill* other) {
  if (other != this) {
    e_runestuntskill_list_.Swap(&other->e_runestuntskill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_RuneStuntskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_RuneStuntskill_descriptor_;
  metadata.reflection = Sheet_RuneStuntskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RunePassiveskillTypeDesc::kMNumFieldNumber;
const int E_RunePassiveskillTypeDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_RunePassiveskillTypeDesc::E_RunePassiveskillTypeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RunePassiveskillTypeDesc::InitAsDefaultInstance() {
}

E_RunePassiveskillTypeDesc::E_RunePassiveskillTypeDesc(const E_RunePassiveskillTypeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RunePassiveskillTypeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RunePassiveskillTypeDesc::~E_RunePassiveskillTypeDesc() {
  SharedDtor();
}

void E_RunePassiveskillTypeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_RunePassiveskillTypeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RunePassiveskillTypeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RunePassiveskillTypeDesc_descriptor_;
}

const E_RunePassiveskillTypeDesc& E_RunePassiveskillTypeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RunePassiveskillTypeDesc* E_RunePassiveskillTypeDesc::default_instance_ = NULL;

E_RunePassiveskillTypeDesc* E_RunePassiveskillTypeDesc::New() const {
  return new E_RunePassiveskillTypeDesc;
}

void E_RunePassiveskillTypeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RunePassiveskillTypeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RunePassiveskillTypeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RunePassiveskillTypeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RunePassiveskillTypeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RunePassiveskillTypeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RunePassiveskillTypeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RunePassiveskillTypeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RunePassiveskillTypeDesc::MergeFrom(const E_RunePassiveskillTypeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RunePassiveskillTypeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RunePassiveskillTypeDesc::CopyFrom(const E_RunePassiveskillTypeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RunePassiveskillTypeDesc::IsInitialized() const {

  return true;
}

void E_RunePassiveskillTypeDesc::Swap(E_RunePassiveskillTypeDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RunePassiveskillTypeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RunePassiveskillTypeDesc_descriptor_;
  metadata.reflection = E_RunePassiveskillTypeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RunePassiveskill::kMIdFieldNumber;
const int E_RunePassiveskill::kMPositionFieldNumber;
const int E_RunePassiveskill::kMLvFieldNumber;
const int E_RunePassiveskill::kMQualityFieldNumber;
const int E_RunePassiveskill::kMActivateQualityFieldNumber;
const int E_RunePassiveskill::kMActivateNumFieldNumber;
const int E_RunePassiveskill::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_RunePassiveskill::E_RunePassiveskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RunePassiveskill::InitAsDefaultInstance() {
}

E_RunePassiveskill::E_RunePassiveskill(const E_RunePassiveskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RunePassiveskill::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_position_ = 0;
  m_lv_ = 0;
  m_quality_ = 0;
  m_activatequality_ = 0;
  m_activatenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RunePassiveskill::~E_RunePassiveskill() {
  SharedDtor();
}

void E_RunePassiveskill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_RunePassiveskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RunePassiveskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RunePassiveskill_descriptor_;
}

const E_RunePassiveskill& E_RunePassiveskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RunePassiveskill* E_RunePassiveskill::default_instance_ = NULL;

E_RunePassiveskill* E_RunePassiveskill::New() const {
  return new E_RunePassiveskill;
}

void E_RunePassiveskill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_position_ = 0;
    m_lv_ = 0;
    m_quality_ = 0;
    m_activatequality_ = 0;
    m_activatenum_ = 0;
  }
  m_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RunePassiveskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_activateQuality;
        break;
      }

      // optional int32 m_activateQuality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activateQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activatequality_)));
          set_has_m_activatequality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_activateNum;
        break;
      }

      // optional int32 m_activateNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activateNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activatenum_)));
          set_has_m_activatenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_type;
        break;
      }

      // repeated .proto_ff.E_RunePassiveskillTypeDesc m_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RunePassiveskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_position = 2;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_position(), output);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lv(), output);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_quality(), output);
  }

  // optional int32 m_activateQuality = 5;
  if (has_m_activatequality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_activatequality(), output);
  }

  // optional int32 m_activateNum = 6;
  if (has_m_activatenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_activatenum(), output);
  }

  // repeated .proto_ff.E_RunePassiveskillTypeDesc m_type = 7;
  for (int i = 0; i < this->m_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RunePassiveskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_position = 2;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_position(), target);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lv(), target);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_quality(), target);
  }

  // optional int32 m_activateQuality = 5;
  if (has_m_activatequality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_activatequality(), target);
  }

  // optional int32 m_activateNum = 6;
  if (has_m_activatenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_activatenum(), target);
  }

  // repeated .proto_ff.E_RunePassiveskillTypeDesc m_type = 7;
  for (int i = 0; i < this->m_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RunePassiveskill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_position = 2;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

    // optional int32 m_lv = 3;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_quality = 4;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_activateQuality = 5;
    if (has_m_activatequality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activatequality());
    }

    // optional int32 m_activateNum = 6;
    if (has_m_activatenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activatenum());
    }

  }
  // repeated .proto_ff.E_RunePassiveskillTypeDesc m_type = 7;
  total_size += 1 * this->m_type_size();
  for (int i = 0; i < this->m_type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_type(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RunePassiveskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RunePassiveskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RunePassiveskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RunePassiveskill::MergeFrom(const E_RunePassiveskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_type_.MergeFrom(from.m_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_activatequality()) {
      set_m_activatequality(from.m_activatequality());
    }
    if (from.has_m_activatenum()) {
      set_m_activatenum(from.m_activatenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RunePassiveskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RunePassiveskill::CopyFrom(const E_RunePassiveskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RunePassiveskill::IsInitialized() const {

  return true;
}

void E_RunePassiveskill::Swap(E_RunePassiveskill* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_position_, other->m_position_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_activatequality_, other->m_activatequality_);
    std::swap(m_activatenum_, other->m_activatenum_);
    m_type_.Swap(&other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RunePassiveskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RunePassiveskill_descriptor_;
  metadata.reflection = E_RunePassiveskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_RunePassiveskill::kERunePassiveskillListFieldNumber;
#endif  // !_MSC_VER

Sheet_RunePassiveskill::Sheet_RunePassiveskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_RunePassiveskill::InitAsDefaultInstance() {
}

Sheet_RunePassiveskill::Sheet_RunePassiveskill(const Sheet_RunePassiveskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_RunePassiveskill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_RunePassiveskill::~Sheet_RunePassiveskill() {
  SharedDtor();
}

void Sheet_RunePassiveskill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_RunePassiveskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_RunePassiveskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_RunePassiveskill_descriptor_;
}

const Sheet_RunePassiveskill& Sheet_RunePassiveskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

Sheet_RunePassiveskill* Sheet_RunePassiveskill::default_instance_ = NULL;

Sheet_RunePassiveskill* Sheet_RunePassiveskill::New() const {
  return new Sheet_RunePassiveskill;
}

void Sheet_RunePassiveskill::Clear() {
  e_runepassiveskill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_RunePassiveskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_RunePassiveskill E_RunePassiveskill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_RunePassiveskill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_runepassiveskill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_RunePassiveskill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_RunePassiveskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_RunePassiveskill E_RunePassiveskill_List = 1;
  for (int i = 0; i < this->e_runepassiveskill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_runepassiveskill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_RunePassiveskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_RunePassiveskill E_RunePassiveskill_List = 1;
  for (int i = 0; i < this->e_runepassiveskill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_runepassiveskill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_RunePassiveskill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_RunePassiveskill E_RunePassiveskill_List = 1;
  total_size += 1 * this->e_runepassiveskill_list_size();
  for (int i = 0; i < this->e_runepassiveskill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_runepassiveskill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_RunePassiveskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_RunePassiveskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_RunePassiveskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_RunePassiveskill::MergeFrom(const Sheet_RunePassiveskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_runepassiveskill_list_.MergeFrom(from.e_runepassiveskill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_RunePassiveskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_RunePassiveskill::CopyFrom(const Sheet_RunePassiveskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_RunePassiveskill::IsInitialized() const {

  return true;
}

void Sheet_RunePassiveskill::Swap(Sheet_RunePassiveskill* other) {
  if (other != this) {
    e_runepassiveskill_list_.Swap(&other->e_runepassiveskill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_RunePassiveskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_RunePassiveskill_descriptor_;
  metadata.reflection = Sheet_RunePassiveskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RuneUpgradeTypeDesc::kMNumFieldNumber;
const int E_RuneUpgradeTypeDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_RuneUpgradeTypeDesc::E_RuneUpgradeTypeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RuneUpgradeTypeDesc::InitAsDefaultInstance() {
}

E_RuneUpgradeTypeDesc::E_RuneUpgradeTypeDesc(const E_RuneUpgradeTypeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RuneUpgradeTypeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RuneUpgradeTypeDesc::~E_RuneUpgradeTypeDesc() {
  SharedDtor();
}

void E_RuneUpgradeTypeDesc::SharedDtor() {
  if (m_num_ != &::google::protobuf::internal::kEmptyString) {
    delete m_num_;
  }
  if (this != default_instance_) {
  }
}

void E_RuneUpgradeTypeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RuneUpgradeTypeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RuneUpgradeTypeDesc_descriptor_;
}

const E_RuneUpgradeTypeDesc& E_RuneUpgradeTypeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RuneUpgradeTypeDesc* E_RuneUpgradeTypeDesc::default_instance_ = NULL;

E_RuneUpgradeTypeDesc* E_RuneUpgradeTypeDesc::New() const {
  return new E_RuneUpgradeTypeDesc;
}

void E_RuneUpgradeTypeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_num()) {
      if (m_num_ != &::google::protobuf::internal::kEmptyString) {
        m_num_->clear();
      }
    }
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RuneUpgradeTypeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_num().data(), this->m_num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RuneUpgradeTypeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_num().data(), this->m_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RuneUpgradeTypeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_num().data(), this->m_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RuneUpgradeTypeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RuneUpgradeTypeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RuneUpgradeTypeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RuneUpgradeTypeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RuneUpgradeTypeDesc::MergeFrom(const E_RuneUpgradeTypeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RuneUpgradeTypeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RuneUpgradeTypeDesc::CopyFrom(const E_RuneUpgradeTypeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RuneUpgradeTypeDesc::IsInitialized() const {

  return true;
}

void E_RuneUpgradeTypeDesc::Swap(E_RuneUpgradeTypeDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RuneUpgradeTypeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RuneUpgradeTypeDesc_descriptor_;
  metadata.reflection = E_RuneUpgradeTypeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RuneUpgrade::kMRuneIdFieldNumber;
const int E_RuneUpgrade::kMUpgradeUpFieldNumber;
const int E_RuneUpgrade::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_RuneUpgrade::E_RuneUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RuneUpgrade::InitAsDefaultInstance() {
}

E_RuneUpgrade::E_RuneUpgrade(const E_RuneUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RuneUpgrade::SharedCtor() {
  _cached_size_ = 0;
  m_runeid_ = 0;
  m_upgradeup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RuneUpgrade::~E_RuneUpgrade() {
  SharedDtor();
}

void E_RuneUpgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_RuneUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RuneUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RuneUpgrade_descriptor_;
}

const E_RuneUpgrade& E_RuneUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RuneUpgrade* E_RuneUpgrade::default_instance_ = NULL;

E_RuneUpgrade* E_RuneUpgrade::New() const {
  return new E_RuneUpgrade;
}

void E_RuneUpgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_runeid_ = 0;
    m_upgradeup_ = 0;
  }
  m_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RuneUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_runeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_runeid_)));
          set_has_m_runeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_upgradeUp;
        break;
      }

      // optional int32 m_upgradeUp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_upgradeUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_upgradeup_)));
          set_has_m_upgradeup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_type;
        break;
      }

      // repeated .proto_ff.E_RuneUpgradeTypeDesc m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RuneUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_runeId = 1;
  if (has_m_runeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_runeid(), output);
  }

  // optional int32 m_upgradeUp = 2;
  if (has_m_upgradeup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_upgradeup(), output);
  }

  // repeated .proto_ff.E_RuneUpgradeTypeDesc m_type = 3;
  for (int i = 0; i < this->m_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RuneUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_runeId = 1;
  if (has_m_runeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_runeid(), target);
  }

  // optional int32 m_upgradeUp = 2;
  if (has_m_upgradeup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_upgradeup(), target);
  }

  // repeated .proto_ff.E_RuneUpgradeTypeDesc m_type = 3;
  for (int i = 0; i < this->m_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RuneUpgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_runeId = 1;
    if (has_m_runeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_runeid());
    }

    // optional int32 m_upgradeUp = 2;
    if (has_m_upgradeup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_upgradeup());
    }

  }
  // repeated .proto_ff.E_RuneUpgradeTypeDesc m_type = 3;
  total_size += 1 * this->m_type_size();
  for (int i = 0; i < this->m_type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_type(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RuneUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RuneUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RuneUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RuneUpgrade::MergeFrom(const E_RuneUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_type_.MergeFrom(from.m_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_runeid()) {
      set_m_runeid(from.m_runeid());
    }
    if (from.has_m_upgradeup()) {
      set_m_upgradeup(from.m_upgradeup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RuneUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RuneUpgrade::CopyFrom(const E_RuneUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RuneUpgrade::IsInitialized() const {

  return true;
}

void E_RuneUpgrade::Swap(E_RuneUpgrade* other) {
  if (other != this) {
    std::swap(m_runeid_, other->m_runeid_);
    std::swap(m_upgradeup_, other->m_upgradeup_);
    m_type_.Swap(&other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RuneUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RuneUpgrade_descriptor_;
  metadata.reflection = E_RuneUpgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_RuneUpgrade::kERuneUpgradeListFieldNumber;
#endif  // !_MSC_VER

Sheet_RuneUpgrade::Sheet_RuneUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_RuneUpgrade::InitAsDefaultInstance() {
}

Sheet_RuneUpgrade::Sheet_RuneUpgrade(const Sheet_RuneUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_RuneUpgrade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_RuneUpgrade::~Sheet_RuneUpgrade() {
  SharedDtor();
}

void Sheet_RuneUpgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_RuneUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_RuneUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_RuneUpgrade_descriptor_;
}

const Sheet_RuneUpgrade& Sheet_RuneUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

Sheet_RuneUpgrade* Sheet_RuneUpgrade::default_instance_ = NULL;

Sheet_RuneUpgrade* Sheet_RuneUpgrade::New() const {
  return new Sheet_RuneUpgrade;
}

void Sheet_RuneUpgrade::Clear() {
  e_runeupgrade_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_RuneUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_RuneUpgrade E_RuneUpgrade_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_RuneUpgrade_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_runeupgrade_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_RuneUpgrade_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_RuneUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_RuneUpgrade E_RuneUpgrade_List = 1;
  for (int i = 0; i < this->e_runeupgrade_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_runeupgrade_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_RuneUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_RuneUpgrade E_RuneUpgrade_List = 1;
  for (int i = 0; i < this->e_runeupgrade_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_runeupgrade_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_RuneUpgrade::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_RuneUpgrade E_RuneUpgrade_List = 1;
  total_size += 1 * this->e_runeupgrade_list_size();
  for (int i = 0; i < this->e_runeupgrade_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_runeupgrade_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_RuneUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_RuneUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_RuneUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_RuneUpgrade::MergeFrom(const Sheet_RuneUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_runeupgrade_list_.MergeFrom(from.e_runeupgrade_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_RuneUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_RuneUpgrade::CopyFrom(const Sheet_RuneUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_RuneUpgrade::IsInitialized() const {

  return true;
}

void Sheet_RuneUpgrade::Swap(Sheet_RuneUpgrade* other) {
  if (other != this) {
    e_runeupgrade_list_.Swap(&other->e_runeupgrade_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_RuneUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_RuneUpgrade_descriptor_;
  metadata.reflection = Sheet_RuneUpgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RuneUpgradeexp::kMLvFieldNumber;
const int E_RuneUpgradeexp::kMCostItemFieldNumber;
const int E_RuneUpgradeexp::kMCostNumFieldNumber;
#endif  // !_MSC_VER

E_RuneUpgradeexp::E_RuneUpgradeexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RuneUpgradeexp::InitAsDefaultInstance() {
}

E_RuneUpgradeexp::E_RuneUpgradeexp(const E_RuneUpgradeexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RuneUpgradeexp::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_costitem_ = 0;
  m_costnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RuneUpgradeexp::~E_RuneUpgradeexp() {
  SharedDtor();
}

void E_RuneUpgradeexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_RuneUpgradeexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RuneUpgradeexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RuneUpgradeexp_descriptor_;
}

const E_RuneUpgradeexp& E_RuneUpgradeexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RuneUpgradeexp* E_RuneUpgradeexp::default_instance_ = NULL;

E_RuneUpgradeexp* E_RuneUpgradeexp::New() const {
  return new E_RuneUpgradeexp;
}

void E_RuneUpgradeexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_costitem_ = 0;
    m_costnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RuneUpgradeexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_Lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_costItem;
        break;
      }

      // optional int32 m_costItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costitem_)));
          set_has_m_costitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_costNum;
        break;
      }

      // optional int32 m_costNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costnum_)));
          set_has_m_costnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RuneUpgradeexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_Lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_costItem = 2;
  if (has_m_costitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_costitem(), output);
  }

  // optional int32 m_costNum = 3;
  if (has_m_costnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_costnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RuneUpgradeexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_Lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_costItem = 2;
  if (has_m_costitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_costitem(), target);
  }

  // optional int32 m_costNum = 3;
  if (has_m_costnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_costnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RuneUpgradeexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_Lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_costItem = 2;
    if (has_m_costitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costitem());
    }

    // optional int32 m_costNum = 3;
    if (has_m_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RuneUpgradeexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RuneUpgradeexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RuneUpgradeexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RuneUpgradeexp::MergeFrom(const E_RuneUpgradeexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_costitem()) {
      set_m_costitem(from.m_costitem());
    }
    if (from.has_m_costnum()) {
      set_m_costnum(from.m_costnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RuneUpgradeexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RuneUpgradeexp::CopyFrom(const E_RuneUpgradeexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RuneUpgradeexp::IsInitialized() const {

  return true;
}

void E_RuneUpgradeexp::Swap(E_RuneUpgradeexp* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_costitem_, other->m_costitem_);
    std::swap(m_costnum_, other->m_costnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RuneUpgradeexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RuneUpgradeexp_descriptor_;
  metadata.reflection = E_RuneUpgradeexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_RuneUpgradeexp::kERuneUpgradeexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_RuneUpgradeexp::Sheet_RuneUpgradeexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_RuneUpgradeexp::InitAsDefaultInstance() {
}

Sheet_RuneUpgradeexp::Sheet_RuneUpgradeexp(const Sheet_RuneUpgradeexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_RuneUpgradeexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_RuneUpgradeexp::~Sheet_RuneUpgradeexp() {
  SharedDtor();
}

void Sheet_RuneUpgradeexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_RuneUpgradeexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_RuneUpgradeexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_RuneUpgradeexp_descriptor_;
}

const Sheet_RuneUpgradeexp& Sheet_RuneUpgradeexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

Sheet_RuneUpgradeexp* Sheet_RuneUpgradeexp::default_instance_ = NULL;

Sheet_RuneUpgradeexp* Sheet_RuneUpgradeexp::New() const {
  return new Sheet_RuneUpgradeexp;
}

void Sheet_RuneUpgradeexp::Clear() {
  e_runeupgradeexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_RuneUpgradeexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_RuneUpgradeexp E_RuneUpgradeexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_RuneUpgradeexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_runeupgradeexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_RuneUpgradeexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_RuneUpgradeexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_RuneUpgradeexp E_RuneUpgradeexp_List = 1;
  for (int i = 0; i < this->e_runeupgradeexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_runeupgradeexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_RuneUpgradeexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_RuneUpgradeexp E_RuneUpgradeexp_List = 1;
  for (int i = 0; i < this->e_runeupgradeexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_runeupgradeexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_RuneUpgradeexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_RuneUpgradeexp E_RuneUpgradeexp_List = 1;
  total_size += 1 * this->e_runeupgradeexp_list_size();
  for (int i = 0; i < this->e_runeupgradeexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_runeupgradeexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_RuneUpgradeexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_RuneUpgradeexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_RuneUpgradeexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_RuneUpgradeexp::MergeFrom(const Sheet_RuneUpgradeexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_runeupgradeexp_list_.MergeFrom(from.e_runeupgradeexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_RuneUpgradeexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_RuneUpgradeexp::CopyFrom(const Sheet_RuneUpgradeexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_RuneUpgradeexp::IsInitialized() const {

  return true;
}

void Sheet_RuneUpgradeexp::Swap(Sheet_RuneUpgradeexp* other) {
  if (other != this) {
    e_runeupgradeexp_list_.Swap(&other->e_runeupgradeexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_RuneUpgradeexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_RuneUpgradeexp_descriptor_;
  metadata.reflection = Sheet_RuneUpgradeexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RuneAdvancedAttributeDesc::kMValueFieldNumber;
const int E_RuneAdvancedAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_RuneAdvancedAttributeDesc::E_RuneAdvancedAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RuneAdvancedAttributeDesc::InitAsDefaultInstance() {
}

E_RuneAdvancedAttributeDesc::E_RuneAdvancedAttributeDesc(const E_RuneAdvancedAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RuneAdvancedAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RuneAdvancedAttributeDesc::~E_RuneAdvancedAttributeDesc() {
  SharedDtor();
}

void E_RuneAdvancedAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_RuneAdvancedAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RuneAdvancedAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RuneAdvancedAttributeDesc_descriptor_;
}

const E_RuneAdvancedAttributeDesc& E_RuneAdvancedAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RuneAdvancedAttributeDesc* E_RuneAdvancedAttributeDesc::default_instance_ = NULL;

E_RuneAdvancedAttributeDesc* E_RuneAdvancedAttributeDesc::New() const {
  return new E_RuneAdvancedAttributeDesc;
}

void E_RuneAdvancedAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RuneAdvancedAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RuneAdvancedAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RuneAdvancedAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RuneAdvancedAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RuneAdvancedAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RuneAdvancedAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RuneAdvancedAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RuneAdvancedAttributeDesc::MergeFrom(const E_RuneAdvancedAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RuneAdvancedAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RuneAdvancedAttributeDesc::CopyFrom(const E_RuneAdvancedAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RuneAdvancedAttributeDesc::IsInitialized() const {

  return true;
}

void E_RuneAdvancedAttributeDesc::Swap(E_RuneAdvancedAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RuneAdvancedAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RuneAdvancedAttributeDesc_descriptor_;
  metadata.reflection = E_RuneAdvancedAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RuneAdvanced::kMIdFieldNumber;
const int E_RuneAdvanced::kMWearQualityFieldNumber;
const int E_RuneAdvanced::kMRuneIdFieldNumber;
const int E_RuneAdvanced::kMCostItemFieldNumber;
const int E_RuneAdvanced::kMCostNumFieldNumber;
const int E_RuneAdvanced::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_RuneAdvanced::E_RuneAdvanced()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RuneAdvanced::InitAsDefaultInstance() {
}

E_RuneAdvanced::E_RuneAdvanced(const E_RuneAdvanced& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RuneAdvanced::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_wearquality_ = 0;
  m_runeid_ = 0;
  m_costitem_ = 0;
  m_costnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RuneAdvanced::~E_RuneAdvanced() {
  SharedDtor();
}

void E_RuneAdvanced::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_RuneAdvanced::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RuneAdvanced::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RuneAdvanced_descriptor_;
}

const E_RuneAdvanced& E_RuneAdvanced::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RuneAdvanced* E_RuneAdvanced::default_instance_ = NULL;

E_RuneAdvanced* E_RuneAdvanced::New() const {
  return new E_RuneAdvanced;
}

void E_RuneAdvanced::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_wearquality_ = 0;
    m_runeid_ = 0;
    m_costitem_ = 0;
    m_costnum_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RuneAdvanced::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_wearQuality;
        break;
      }

      // optional int32 m_wearQuality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wearquality_)));
          set_has_m_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_runeId;
        break;
      }

      // optional int32 m_runeId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_runeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_runeid_)));
          set_has_m_runeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_costItem;
        break;
      }

      // optional int32 m_costItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costitem_)));
          set_has_m_costitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_costNum;
        break;
      }

      // optional int32 m_costNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costnum_)));
          set_has_m_costnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_RuneAdvancedAttributeDesc m_attribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RuneAdvanced::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_wearQuality = 2;
  if (has_m_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_wearquality(), output);
  }

  // optional int32 m_runeId = 3;
  if (has_m_runeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_runeid(), output);
  }

  // optional int32 m_costItem = 4;
  if (has_m_costitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_costitem(), output);
  }

  // optional int32 m_costNum = 5;
  if (has_m_costnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_costnum(), output);
  }

  // repeated .proto_ff.E_RuneAdvancedAttributeDesc m_attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RuneAdvanced::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_wearQuality = 2;
  if (has_m_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_wearquality(), target);
  }

  // optional int32 m_runeId = 3;
  if (has_m_runeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_runeid(), target);
  }

  // optional int32 m_costItem = 4;
  if (has_m_costitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_costitem(), target);
  }

  // optional int32 m_costNum = 5;
  if (has_m_costnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_costnum(), target);
  }

  // repeated .proto_ff.E_RuneAdvancedAttributeDesc m_attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RuneAdvanced::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_wearQuality = 2;
    if (has_m_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wearquality());
    }

    // optional int32 m_runeId = 3;
    if (has_m_runeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_runeid());
    }

    // optional int32 m_costItem = 4;
    if (has_m_costitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costitem());
    }

    // optional int32 m_costNum = 5;
    if (has_m_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costnum());
    }

  }
  // repeated .proto_ff.E_RuneAdvancedAttributeDesc m_attribute = 6;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RuneAdvanced::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RuneAdvanced* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RuneAdvanced*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RuneAdvanced::MergeFrom(const E_RuneAdvanced& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_wearquality()) {
      set_m_wearquality(from.m_wearquality());
    }
    if (from.has_m_runeid()) {
      set_m_runeid(from.m_runeid());
    }
    if (from.has_m_costitem()) {
      set_m_costitem(from.m_costitem());
    }
    if (from.has_m_costnum()) {
      set_m_costnum(from.m_costnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RuneAdvanced::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RuneAdvanced::CopyFrom(const E_RuneAdvanced& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RuneAdvanced::IsInitialized() const {

  return true;
}

void E_RuneAdvanced::Swap(E_RuneAdvanced* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_wearquality_, other->m_wearquality_);
    std::swap(m_runeid_, other->m_runeid_);
    std::swap(m_costitem_, other->m_costitem_);
    std::swap(m_costnum_, other->m_costnum_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RuneAdvanced::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RuneAdvanced_descriptor_;
  metadata.reflection = E_RuneAdvanced_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_RuneAdvanced::kERuneAdvancedListFieldNumber;
#endif  // !_MSC_VER

Sheet_RuneAdvanced::Sheet_RuneAdvanced()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_RuneAdvanced::InitAsDefaultInstance() {
}

Sheet_RuneAdvanced::Sheet_RuneAdvanced(const Sheet_RuneAdvanced& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_RuneAdvanced::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_RuneAdvanced::~Sheet_RuneAdvanced() {
  SharedDtor();
}

void Sheet_RuneAdvanced::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_RuneAdvanced::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_RuneAdvanced::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_RuneAdvanced_descriptor_;
}

const Sheet_RuneAdvanced& Sheet_RuneAdvanced::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

Sheet_RuneAdvanced* Sheet_RuneAdvanced::default_instance_ = NULL;

Sheet_RuneAdvanced* Sheet_RuneAdvanced::New() const {
  return new Sheet_RuneAdvanced;
}

void Sheet_RuneAdvanced::Clear() {
  e_runeadvanced_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_RuneAdvanced::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_RuneAdvanced E_RuneAdvanced_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_RuneAdvanced_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_runeadvanced_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_RuneAdvanced_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_RuneAdvanced::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_RuneAdvanced E_RuneAdvanced_List = 1;
  for (int i = 0; i < this->e_runeadvanced_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_runeadvanced_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_RuneAdvanced::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_RuneAdvanced E_RuneAdvanced_List = 1;
  for (int i = 0; i < this->e_runeadvanced_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_runeadvanced_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_RuneAdvanced::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_RuneAdvanced E_RuneAdvanced_List = 1;
  total_size += 1 * this->e_runeadvanced_list_size();
  for (int i = 0; i < this->e_runeadvanced_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_runeadvanced_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_RuneAdvanced::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_RuneAdvanced* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_RuneAdvanced*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_RuneAdvanced::MergeFrom(const Sheet_RuneAdvanced& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_runeadvanced_list_.MergeFrom(from.e_runeadvanced_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_RuneAdvanced::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_RuneAdvanced::CopyFrom(const Sheet_RuneAdvanced& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_RuneAdvanced::IsInitialized() const {

  return true;
}

void Sheet_RuneAdvanced::Swap(Sheet_RuneAdvanced* other) {
  if (other != this) {
    e_runeadvanced_list_.Swap(&other->e_runeadvanced_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_RuneAdvanced::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_RuneAdvanced_descriptor_;
  metadata.reflection = Sheet_RuneAdvanced_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RuneSoaringAttributeDesc::kMValueFieldNumber;
const int E_RuneSoaringAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_RuneSoaringAttributeDesc::E_RuneSoaringAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RuneSoaringAttributeDesc::InitAsDefaultInstance() {
}

E_RuneSoaringAttributeDesc::E_RuneSoaringAttributeDesc(const E_RuneSoaringAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RuneSoaringAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RuneSoaringAttributeDesc::~E_RuneSoaringAttributeDesc() {
  SharedDtor();
}

void E_RuneSoaringAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_RuneSoaringAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RuneSoaringAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RuneSoaringAttributeDesc_descriptor_;
}

const E_RuneSoaringAttributeDesc& E_RuneSoaringAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RuneSoaringAttributeDesc* E_RuneSoaringAttributeDesc::default_instance_ = NULL;

E_RuneSoaringAttributeDesc* E_RuneSoaringAttributeDesc::New() const {
  return new E_RuneSoaringAttributeDesc;
}

void E_RuneSoaringAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RuneSoaringAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RuneSoaringAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RuneSoaringAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RuneSoaringAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RuneSoaringAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RuneSoaringAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RuneSoaringAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RuneSoaringAttributeDesc::MergeFrom(const E_RuneSoaringAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RuneSoaringAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RuneSoaringAttributeDesc::CopyFrom(const E_RuneSoaringAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RuneSoaringAttributeDesc::IsInitialized() const {

  return true;
}

void E_RuneSoaringAttributeDesc::Swap(E_RuneSoaringAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RuneSoaringAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RuneSoaringAttributeDesc_descriptor_;
  metadata.reflection = E_RuneSoaringAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_RuneSoaring::kMIdFieldNumber;
const int E_RuneSoaring::kMLvIdFieldNumber;
const int E_RuneSoaring::kMWearQualityFieldNumber;
const int E_RuneSoaring::kMRuneIdFieldNumber;
const int E_RuneSoaring::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_RuneSoaring::E_RuneSoaring()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RuneSoaring::InitAsDefaultInstance() {
}

E_RuneSoaring::E_RuneSoaring(const E_RuneSoaring& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RuneSoaring::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_lvid_ = 0;
  m_wearquality_ = 0;
  m_runeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RuneSoaring::~E_RuneSoaring() {
  SharedDtor();
}

void E_RuneSoaring::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_RuneSoaring::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RuneSoaring::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RuneSoaring_descriptor_;
}

const E_RuneSoaring& E_RuneSoaring::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

E_RuneSoaring* E_RuneSoaring::default_instance_ = NULL;

E_RuneSoaring* E_RuneSoaring::New() const {
  return new E_RuneSoaring;
}

void E_RuneSoaring::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_lvid_ = 0;
    m_wearquality_ = 0;
    m_runeid_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RuneSoaring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lvId;
        break;
      }

      // optional int32 m_lvId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvid_)));
          set_has_m_lvid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_wearQuality;
        break;
      }

      // optional int32 m_wearQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wearquality_)));
          set_has_m_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_runeId;
        break;
      }

      // optional int32 m_runeId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_runeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_runeid_)));
          set_has_m_runeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_RuneSoaringAttributeDesc m_attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RuneSoaring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_lvId = 2;
  if (has_m_lvid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lvid(), output);
  }

  // optional int32 m_wearQuality = 3;
  if (has_m_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_wearquality(), output);
  }

  // optional int32 m_runeId = 4;
  if (has_m_runeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_runeid(), output);
  }

  // repeated .proto_ff.E_RuneSoaringAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RuneSoaring::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_lvId = 2;
  if (has_m_lvid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lvid(), target);
  }

  // optional int32 m_wearQuality = 3;
  if (has_m_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_wearquality(), target);
  }

  // optional int32 m_runeId = 4;
  if (has_m_runeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_runeid(), target);
  }

  // repeated .proto_ff.E_RuneSoaringAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RuneSoaring::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_lvId = 2;
    if (has_m_lvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvid());
    }

    // optional int32 m_wearQuality = 3;
    if (has_m_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wearquality());
    }

    // optional int32 m_runeId = 4;
    if (has_m_runeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_runeid());
    }

  }
  // repeated .proto_ff.E_RuneSoaringAttributeDesc m_attribute = 5;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RuneSoaring::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RuneSoaring* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RuneSoaring*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RuneSoaring::MergeFrom(const E_RuneSoaring& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_lvid()) {
      set_m_lvid(from.m_lvid());
    }
    if (from.has_m_wearquality()) {
      set_m_wearquality(from.m_wearquality());
    }
    if (from.has_m_runeid()) {
      set_m_runeid(from.m_runeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RuneSoaring::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RuneSoaring::CopyFrom(const E_RuneSoaring& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RuneSoaring::IsInitialized() const {

  return true;
}

void E_RuneSoaring::Swap(E_RuneSoaring* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_lvid_, other->m_lvid_);
    std::swap(m_wearquality_, other->m_wearquality_);
    std::swap(m_runeid_, other->m_runeid_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RuneSoaring::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RuneSoaring_descriptor_;
  metadata.reflection = E_RuneSoaring_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_RuneSoaring::kERuneSoaringListFieldNumber;
#endif  // !_MSC_VER

Sheet_RuneSoaring::Sheet_RuneSoaring()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_RuneSoaring::InitAsDefaultInstance() {
}

Sheet_RuneSoaring::Sheet_RuneSoaring(const Sheet_RuneSoaring& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_RuneSoaring::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_RuneSoaring::~Sheet_RuneSoaring() {
  SharedDtor();
}

void Sheet_RuneSoaring::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_RuneSoaring::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_RuneSoaring::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_RuneSoaring_descriptor_;
}

const Sheet_RuneSoaring& Sheet_RuneSoaring::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fRune_2eproto();
  return *default_instance_;
}

Sheet_RuneSoaring* Sheet_RuneSoaring::default_instance_ = NULL;

Sheet_RuneSoaring* Sheet_RuneSoaring::New() const {
  return new Sheet_RuneSoaring;
}

void Sheet_RuneSoaring::Clear() {
  e_runesoaring_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_RuneSoaring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_RuneSoaring E_RuneSoaring_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_RuneSoaring_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_runesoaring_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_RuneSoaring_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_RuneSoaring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_RuneSoaring E_RuneSoaring_List = 1;
  for (int i = 0; i < this->e_runesoaring_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_runesoaring_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_RuneSoaring::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_RuneSoaring E_RuneSoaring_List = 1;
  for (int i = 0; i < this->e_runesoaring_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_runesoaring_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_RuneSoaring::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_RuneSoaring E_RuneSoaring_List = 1;
  total_size += 1 * this->e_runesoaring_list_size();
  for (int i = 0; i < this->e_runesoaring_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_runesoaring_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_RuneSoaring::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_RuneSoaring* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_RuneSoaring*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_RuneSoaring::MergeFrom(const Sheet_RuneSoaring& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_runesoaring_list_.MergeFrom(from.e_runesoaring_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_RuneSoaring::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_RuneSoaring::CopyFrom(const Sheet_RuneSoaring& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_RuneSoaring::IsInitialized() const {

  return true;
}

void Sheet_RuneSoaring::Swap(Sheet_RuneSoaring* other) {
  if (other != this) {
    e_runesoaring_list_.Swap(&other->e_runesoaring_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_RuneSoaring::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_RuneSoaring_descriptor_;
  metadata.reflection = Sheet_RuneSoaring_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
