// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ComDefine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ComDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* LoginRoleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRoleProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PingConfig_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECharacterSex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERace_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECharacterProf_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AreaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SamplePolyFlags_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MapDefine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REGION_DEFINE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CharacterDefine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPackageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEquipPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EConst_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LOGOUT_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ComDefine_2eproto() {
  protobuf_AddDesc_ComDefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ComDefine.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRoleProto_descriptor_ = file->message_type(0);
  static const int LoginRoleProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, fight_),
  };
  LoginRoleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRoleProto_descriptor_,
      LoginRoleProto::default_instance_,
      LoginRoleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRoleProto));
  PingConfig_descriptor_ = file->enum_type(0);
  ECharacterSex_descriptor_ = file->enum_type(1);
  ERace_descriptor_ = file->enum_type(2);
  ECharacterProf_descriptor_ = file->enum_type(3);
  CurrencyType_descriptor_ = file->enum_type(4);
  AreaType_descriptor_ = file->enum_type(5);
  SamplePolyFlags_descriptor_ = file->enum_type(6);
  MapDefine_descriptor_ = file->enum_type(7);
  REGION_DEFINE_descriptor_ = file->enum_type(8);
  CharacterDefine_descriptor_ = file->enum_type(9);
  EItemType_descriptor_ = file->enum_type(10);
  EPackageType_descriptor_ = file->enum_type(11);
  EQuality_descriptor_ = file->enum_type(12);
  EEquipPos_descriptor_ = file->enum_type(13);
  EConst_descriptor_ = file->enum_type(14);
  ERetCode_descriptor_ = file->enum_type(15);
  LOGOUT_TYPE_descriptor_ = file->enum_type(16);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ComDefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRoleProto_descriptor_, &LoginRoleProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ComDefine_2eproto() {
  delete LoginRoleProto::default_instance_;
  delete LoginRoleProto_reflection_;
}

void protobuf_AddDesc_ComDefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ComDefine.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\032\022common_logic.proto\"W\n\016LoginR"
    "oleProto\022\013\n\003cid\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022\014\n\004p"
    "rof\030\003 \002(\r\022\r\n\005level\030\004 \002(\r\022\r\n\005fight\030\005 \001(\004*"
    "D\n\nPingConfig\022\030\n\024CLIENT_PING_INTERVAL\020\t\022"
    "\030\n\024SERVER_PING_INTERVAL\020\t\032\002\020\001*A\n\rECharac"
    "terSex\022\026\n\022ECHARACTER_SEX_MAN\020\001\022\030\n\024ECHARA"
    "CTER_SEX_FEMAL\020\002*)\n\005ERace\022\017\n\013ERace_Human"
    "\020\001\022\017\n\013ERace_Fairy\020\002*\205\001\n\016ECharacterProf\022\033"
    "\n\027ECHARACTER_PROF_WARRIOR\020\001\022\034\n\030ECHARACTE"
    "R_PROF_MAGICIAN\020\002\022\034\n\030ECHARACTER_PROF_ASS"
    "ASSIN\020\003\022\032\n\026ECHARACTER_PROF_ARCHER\020\004*\230\001\n\014"
    "CurrencyType\022\027\n\023VALUE_CURRENCY_NULL\020\000\022\031\n"
    "\025VALUE_CURRENCY_SILVER\020\001\022\027\n\023VALUE_CURREN"
    "CY_GOLD\020\002\022\034\n\030VALUE_CURRENCY_BIND_GOLD\020\003\022"
    "\035\n\031VALUE_CURRENCY_REPUTATION\020\005*M\n\010AreaTy"
    "pe\022\026\n\022en_AreaType_Common\020\000\022\024\n\020en_AreaTyp"
    "e_Safe\020\001\022\023\n\017en_AreaType_Dup\020\002*\301\001\n\017Sample"
    "PolyFlags\022\031\n\025SAMPLE_POLYFLAGS_WALK\020\001\022\031\n\025"
    "SAMPLE_POLYFLAGS_SWIM\020\002\022\"\n\036SAMPLE_POLYFL"
    "AGS_FORBIT_ACROSS\020\004\022\031\n\025SAMPLE_POLYFLAGS_"
    "DOOR\020\010\022\035\n\031SAMPLE_POLYFLAGS_DISABLED\020\020\022\032\n"
    "\024SAMPLE_POLYFLAGS_ALL\020\377\377\003*Z\n\tMapDefine\022\022"
    "\n\rMAX_NAV_POLYS\020\204\030\022\030\n\023MAX_NAV_POINT_VALU"
    "E\020\200\010\022\033\n\027INVALID_NAVMESH_POLYREF\020\000\032\002\020\001*H\n"
    "\rREGION_DEFINE\022\030\n\024DEFAULT_REGION_WIDTH\020\022"
    "\022\031\n\025DEFAULT_REGION_HEIGHT\020\022\032\002\020\001*s\n\017Chara"
    "cterDefine\022\036\n\032MAX_CREATE_CHARACTER_COUNT"
    "\020\003\022\035\n\031CHARACTER_NAME_MIN_LENGTH\020\004\022\035\n\031CHA"
    "RACTER_NAME_MAX_LENGTH\020 \032\002\020\001*\262\002\n\tEItemTy"
    "pe\022\022\n\016EItemType_None\020\000\022\023\n\017EItemType_Equi"
    "p\020\001\022\026\n\022EItemType_Material\020\002\022\023\n\017EItemType"
    "_Other\020\003\022\022\n\016EItemType_Task\020\004\022\022\n\016EItemTyp"
    "e_Star\020\005\022\022\n\016EItemType_Soul\020\006\022\027\n\023EItemTyp"
    "e_FaiMateri\020\007\022\030\n\024EItemType_FaiCrystal\020\010\022"
    "\024\n\020EItemType_Symbol\020\t\022\032\n\026EItemType_BossI"
    "dentify\020\n\022\031\n\025EItemType_FaiIdentify\020\013\022\023\n\017"
    "EItemType_Limit\020\014*\304\002\n\014EPackageType\022\025\n\021EP"
    "ackageType_None\020\000\022\027\n\023EPackageType_Common"
    "\020\001\022\030\n\024EPackageType_Storage\020\002\022\025\n\021EPackage"
    "Type_Task\020\003\022\025\n\021EPackageType_Star\020\004\022\025\n\021EP"
    "ackageType_Soul\020\005\022\032\n\026EPackageType_FaiMat"
    "eri\020\006\022\033\n\027EPackageType_FaiCrystal\020\007\022\027\n\023EP"
    "ackageType_Symbol\020\010\022\035\n\031EPackageType_Boss"
    "Identify\020\t\022\034\n\030EPackageType_FaiIdentify\020\n"
    "\022\026\n\022EPackageType_Limit\020\013*\253\001\n\010EQuality\022\021\n"
    "\rEQuality_grey\020\001\022\022\n\016EQuality_white\020\002\022\022\n\016"
    "EQuality_green\020\003\022\021\n\rEQuality_blue\020\004\022\023\n\017E"
    "Quality_purple\020\005\022\023\n\017EQuality_orange\020\006\022\020\n"
    "\014EQuality_red\020\007\022\021\n\rEQuality_gold\020\010\032\002\020\001*\372"
    "\002\n\tEEquipPos\022\022\n\016EEquipPos_none\020\000\022\024\n\020EEqu"
    "ipPos_weapon\020\001\022\025\n\021EEquipPos_clothes\020\002\022\021\n"
    "\rEEquipPos_hat\020\003\022\023\n\017EEquipPos_cloak\020\004\022\023\n"
    "\017EEquipPos_pants\020\005\022\022\n\016EEquipPos_shoe\020\006\022\026"
    "\n\022EEquipPos_necklace\020\007\022\022\n\016EEquipPos_ring"
    "\020\010\022\025\n\021EEquipPos_thering\020\t\022\031\n\025EEquipPos_h"
    "olysymbols\020\n\022\026\n\022EEquipPos_guarddef\020\013\022\026\n\022"
    "EEquipPos_guardexp\020\014\022\031\n\025EEquipPos_marryE"
    "quip1\020\r\022\031\n\025EEquipPos_marryEquip2\020\016\022\023\n\017EE"
    "quipPos_limit\020\017\032\002\020\001*%\n\006EConst\022\033\n\027EConst_"
    "ServerUpdateTime\020\001*\343\014\n\010ERetCode\022\017\n\013RET_S"
    "UCCESS\020\000\022\014\n\010RET_FAIL\020\001\022\022\n\016RET_LEVEL_LACK"
    "\020\002\022\022\n\016RET_MONEY_LACK\020\003\022\021\n\rRET_GOLD_LACK\020"
    "\004\022\026\n\022RET_BIND_GOLD_LACK\020\005\022\024\n\020RET_DIAMOND"
    "_LACK\020\006\022\031\n\025RET_BIND_DIAMOND_LACK\020\007\022\026\n\022RE"
    "T_VIP_LEVEL_LACK\020\010\022\022\n\016RET_PROF_ERROR\020\n\022\031"
    "\n\025RET_PLAYER_NOT_ONLINE\020\013\022\022\n\016RET_RACE_ER"
    "ROR\020\014\022\021\n\rRET_SEX_ERROR\020\r\022\022\n\016RET_NOT_ONLI"
    "NE\020\016\022\022\n\016RET_DATA_ERROR\020\017\022\032\n\026RET_NOT_HAVE"
    "_CHARACTER\020\020\022\020\n\014RET_BAG_FULL\020\021\022\024\n\020RET_PA"
    "RMAR_ERROR\020\022\022\024\n\020RET_CONFIG_ERROR\020\023\022\030\n\024RE"
    "T_OTHER_LEVEL_LACK\020\024\022\021\n\rRET_ID_UNKNOW\020\025\022"
    "\030\n\024RET_REPEATED_OPERATE\020\026\022\023\n\017RET_UNAVAIL"
    "ABLE\020\027\022\022\n\016RET_FIGHT_LACK\020\030\022\025\n\021RET_APTITU"
    "DE_LACK\020\031\022\024\n\020RET_OVER_MAX_NUM\020\032\022\023\n\017RET_P"
    "RICE_ERROR\020\033\022\030\n\024RET_OTHER_NOT_ONLINE\020\034\022\031"
    "\n\025RET_STAR_ESSENCE_LACK\020\035\022\030\n\024RET_STAR_LA"
    "YER_LIMIT\020\036\022\030\n\024RET_OCCUPATION_ERROR\020\037\022\031\n"
    "\025RET_SMALL_SPIRIT_LACK\020 \022\026\n\022RET_SMALL_BI"
    "G_LACK\020!\022\030\n\024RET_ITEM_PARAM_ERROR\020\"\022\031\n\025RE"
    "T_CAN_NOT_RECONNECT\020#\022\033\n\027RET_DISALLOW_EN"
    "TER_GAME\020$\022\025\n\021RET_MATERIAL_LACK\020%\022\031\n\025RET"
    "_HOLY_DIAMOND_LACK\020&\022\037\n\033RET_LOGIN_BAD_US"
    "ER_NAME_LEN\020d\022!\n\035RET_LOGIN_CHARACTER_NOT"
    "_EXITS\020e\022!\n\035RET_LOGIN_ACCOUNT_OTHER_LOGI"
    "N\020f\022!\n\035RET_LOGIN_CHARACTER_NUM_LIMIT\020g\022#"
    "\n\037RET_LOGIN_CHARACTER_NAME_EXISTS\020h\022!\n\035R"
    "ET_LOGIN_CHARACTER_SEX_ERROR\020i\022\"\n\036RET_LO"
    "GIN_CHARACTER_PROF_ERROR\020j\022&\n\"RET_LOGIN_"
    "CHARACTER_NAME_LEN_ERROR\020k\022%\n!RET_LOGIN_"
    "CHARACTER_CREATE_FAILED\020l\022#\n\037RET_LOGIN_C"
    "HARACTER_NOT_ACCOUNT\020m\022\037\n\033RET_LOGIN_CHAR"
    "ACTER_ILLEGAL\020n\022\"\n\036RET_LOGIN_CHARACTER_V"
    "ESION_ERR\020o\022(\n$RET_LOGIN_ACCOUNT_SYSTEM_"
    "MAINTENANCE\020p\022\035\n\031RET_LOGIN_ILLEGAL_REQUE"
    "ST\020q\022\032\n\026RET_LOGIN_CHANNEL_FAIL\020r\022\036\n\032RET_"
    "LOGIN_ORBIDDEN_ACCOUNT\020s\022\037\n\033RET_LOGIN_QU"
    "EUE_ENOUGHT_NUM\020t\022\035\n\031RET_LOGIN_HAS_DELET"
    "E_CHAR\020u\022\026\n\022RET_LOGIN_TIME_OUT\020v\022\023\n\017RET_"
    "TOKEN_ERROR\020w\022\024\n\020RET_ACCOUNT_FULL\020x\022\025\n\021R"
    "ET_NOT_OPEN_TIME\020y\022 \n\034RET_CAN_NOT_RETURN"
    "_ROLE_LIST\020z\032\002\020\001*\224\002\n\013LOGOUT_TYPE\022\017\n\013LOGO"
    "UT_NONE\020\000\022\021\n\rLOGOUT_LOGOUT\020\001\022\023\n\017LOGOUT_K"
    "ICK_OUT\020\002\022\022\n\016LOGOUT_REPLACE\020\003\022\027\n\023LOGOUT_"
    "DIS_TIME_OUT\020\004\022\027\n\023LOGOUT_CHANGE_LOGIC\020\005\022"
    "\033\n\027LOGOUT_RETURN_ROLE_LIST\020\006\022\031\n\025LOGOUT_L"
    "OGIN_TIME_OUT\020\007\022\023\n\017LOGOUT_WEB_KICK\020\010\022\025\n\021"
    "LOGOUT_CHEAR_KICK\020\t\022\020\n\014LOGOUT_CRASH\020\n\022\020\n"
    "\014LOGOUT_OTHER\020\013", 4335);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ComDefine.proto", &protobuf_RegisterTypes);
  LoginRoleProto::default_instance_ = new LoginRoleProto();
  LoginRoleProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ComDefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ComDefine_2eproto {
  StaticDescriptorInitializer_ComDefine_2eproto() {
    protobuf_AddDesc_ComDefine_2eproto();
  }
} static_descriptor_initializer_ComDefine_2eproto_;
const ::google::protobuf::EnumDescriptor* PingConfig_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingConfig_descriptor_;
}
bool PingConfig_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECharacterSex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECharacterSex_descriptor_;
}
bool ECharacterSex_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERace_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERace_descriptor_;
}
bool ERace_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECharacterProf_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECharacterProf_descriptor_;
}
bool ECharacterProf_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrencyType_descriptor_;
}
bool CurrencyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AreaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreaType_descriptor_;
}
bool AreaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SamplePolyFlags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SamplePolyFlags_descriptor_;
}
bool SamplePolyFlags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 65535:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MapDefine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapDefine_descriptor_;
}
bool MapDefine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1024:
    case 3076:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REGION_DEFINE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REGION_DEFINE_descriptor_;
}
bool REGION_DEFINE_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CharacterDefine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDefine_descriptor_;
}
bool CharacterDefine_IsValid(int value) {
  switch(value) {
    case 3:
    case 4:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemType_descriptor_;
}
bool EItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPackageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPackageType_descriptor_;
}
bool EPackageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuality_descriptor_;
}
bool EQuality_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEquipPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEquipPos_descriptor_;
}
bool EEquipPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EConst_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EConst_descriptor_;
}
bool EConst_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERetCode_descriptor_;
}
bool ERetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LOGOUT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGOUT_TYPE_descriptor_;
}
bool LOGOUT_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRoleProto::kCidFieldNumber;
const int LoginRoleProto::kNameFieldNumber;
const int LoginRoleProto::kProfFieldNumber;
const int LoginRoleProto::kLevelFieldNumber;
const int LoginRoleProto::kFightFieldNumber;
#endif  // !_MSC_VER

LoginRoleProto::LoginRoleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRoleProto::InitAsDefaultInstance() {
}

LoginRoleProto::LoginRoleProto(const LoginRoleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRoleProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0u;
  level_ = 0u;
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRoleProto::~LoginRoleProto() {
  SharedDtor();
}

void LoginRoleProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LoginRoleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRoleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRoleProto_descriptor_;
}

const LoginRoleProto& LoginRoleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ComDefine_2eproto();
  return *default_instance_;
}

LoginRoleProto* LoginRoleProto::default_instance_ = NULL;

LoginRoleProto* LoginRoleProto::New() const {
  return new LoginRoleProto;
}

void LoginRoleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0u;
    level_ = 0u;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRoleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // required uint32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRoleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prof(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRoleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prof(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRoleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 fight = 5;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRoleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRoleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRoleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRoleProto::MergeFrom(const LoginRoleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRoleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRoleProto::CopyFrom(const LoginRoleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRoleProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LoginRoleProto::Swap(LoginRoleProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRoleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRoleProto_descriptor_;
  metadata.reflection = LoginRoleProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
