// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ComDefine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ComDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::EnumDescriptor* PingConfig_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoleSex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoleProf_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AreaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SamplePolyFlags_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MapDefine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REGION_DEFINE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CharacterDefine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPackageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEquipPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EConst_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LOGOUT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CHAT_CHANNEL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FacadeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFacadeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FunctionUnlock_ID_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFacadeAttrType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDailyTaskPlayType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDailyTaskBackType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PGType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ARENA_CHALLENGE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ArenaRewardState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ArenaChallType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VIP_PRIVILEGE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMountRideState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDeityEquipPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMoneyRewardTaskReward_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETitleSubType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETitleTimeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ComDefine_2eproto() {
  protobuf_AddDesc_ComDefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ComDefine.proto");
  GOOGLE_CHECK(file != NULL);
  PingConfig_descriptor_ = file->enum_type(0);
  ERoleSex_descriptor_ = file->enum_type(1);
  ERoleProf_descriptor_ = file->enum_type(2);
  CurrencyType_descriptor_ = file->enum_type(3);
  AreaType_descriptor_ = file->enum_type(4);
  SamplePolyFlags_descriptor_ = file->enum_type(5);
  MapDefine_descriptor_ = file->enum_type(6);
  REGION_DEFINE_descriptor_ = file->enum_type(7);
  CharacterDefine_descriptor_ = file->enum_type(8);
  EItemType_descriptor_ = file->enum_type(9);
  EPackageType_descriptor_ = file->enum_type(10);
  EQuality_descriptor_ = file->enum_type(11);
  EEquipPos_descriptor_ = file->enum_type(12);
  EConst_descriptor_ = file->enum_type(13);
  ERetCode_descriptor_ = file->enum_type(14);
  LOGOUT_TYPE_descriptor_ = file->enum_type(15);
  EMailType_descriptor_ = file->enum_type(16);
  CHAT_CHANNEL_descriptor_ = file->enum_type(17);
  FacadeType_descriptor_ = file->enum_type(18);
  EFacadeType_descriptor_ = file->enum_type(19);
  FunctionUnlock_ID_TYPE_descriptor_ = file->enum_type(20);
  EFacadeAttrType_descriptor_ = file->enum_type(21);
  EDailyTaskPlayType_descriptor_ = file->enum_type(22);
  EDailyTaskBackType_descriptor_ = file->enum_type(23);
  PGType_descriptor_ = file->enum_type(24);
  ARENA_CHALLENGE_TYPE_descriptor_ = file->enum_type(25);
  ArenaRewardState_descriptor_ = file->enum_type(26);
  ArenaChallType_descriptor_ = file->enum_type(27);
  VIP_PRIVILEGE_TYPE_descriptor_ = file->enum_type(28);
  EMountRideState_descriptor_ = file->enum_type(29);
  EDeityEquipPos_descriptor_ = file->enum_type(30);
  EMoneyRewardTaskReward_descriptor_ = file->enum_type(31);
  ETitleSubType_descriptor_ = file->enum_type(32);
  ETitleTimeType_descriptor_ = file->enum_type(33);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ComDefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_ComDefine_2eproto() {
}

void protobuf_AddDesc_ComDefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ComDefine.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\032\022common_logic.proto*D\n\nPingCo"
    "nfig\022\030\n\024CLIENT_PING_INTERVAL\020\t\022\030\n\024SERVER"
    "_PING_INTERVAL\020\t\032\002\020\001*3\n\010ERoleSex\022\022\n\016EROL"
    "E_SEX_MALE\020\001\022\023\n\017EROLE_SEX_FEMAL\020\002*\357\001\n\tER"
    "oleProf\022\032\n\026EROLE_PROF_MALE_MASTER\020\001\022\034\n\030E"
    "ROLE_PROF_FEMALE_MASTER\020\002\022\032\n\026EROLE_PROF_"
    "MALE_SICKLE\020\003\022\034\n\030EROLE_PROF_FEMALE_SICKL"
    "E\020\004\022\031\n\025EROLE_PROF_MALE_SWORD\020\005\022\033\n\027EROLE_"
    "PROF_FEMALE_SWORD\020\006\022\031\n\025EROLE_PROF_MALE_K"
    "NIFE\020\007\022\033\n\027EROLE_PROF_FEMALE_KNIFE\020\010*\230\001\n\014"
    "CurrencyType\022\027\n\023VALUE_CURRENCY_NULL\020\000\022\031\n"
    "\025VALUE_CURRENCY_SILVER\020\001\022\027\n\023VALUE_CURREN"
    "CY_GOLD\020\002\022\034\n\030VALUE_CURRENCY_BIND_GOLD\020\003\022"
    "\035\n\031VALUE_CURRENCY_REPUTATION\020\005*M\n\010AreaTy"
    "pe\022\026\n\022en_AreaType_Common\020\000\022\024\n\020en_AreaTyp"
    "e_Safe\020\001\022\023\n\017en_AreaType_Dup\020\002*\301\001\n\017Sample"
    "PolyFlags\022\031\n\025SAMPLE_POLYFLAGS_WALK\020\001\022\031\n\025"
    "SAMPLE_POLYFLAGS_SWIM\020\002\022\"\n\036SAMPLE_POLYFL"
    "AGS_FORBIT_ACROSS\020\004\022\031\n\025SAMPLE_POLYFLAGS_"
    "DOOR\020\010\022\035\n\031SAMPLE_POLYFLAGS_DISABLED\020\020\022\032\n"
    "\024SAMPLE_POLYFLAGS_ALL\020\377\377\003*Z\n\tMapDefine\022\022"
    "\n\rMAX_NAV_POLYS\020\204\030\022\030\n\023MAX_NAV_POINT_VALU"
    "E\020\200\010\022\033\n\027INVALID_NAVMESH_POLYREF\020\000\032\002\020\001*H\n"
    "\rREGION_DEFINE\022\030\n\024DEFAULT_REGION_WIDTH\020\022"
    "\022\031\n\025DEFAULT_REGION_HEIGHT\020\022\032\002\020\001*s\n\017Chara"
    "cterDefine\022\036\n\032MAX_CREATE_CHARACTER_COUNT"
    "\020\003\022\035\n\031CHARACTER_NAME_MIN_LENGTH\020\004\022\035\n\031CHA"
    "RACTER_NAME_MAX_LENGTH\020 \032\002\020\001*\313\001\n\tEItemTy"
    "pe\022\022\n\016EItemType_None\020\000\022\023\n\017EItemType_Equi"
    "p\020\001\022\026\n\022EItemType_Material\020\002\022\023\n\017EItemType"
    "_Other\020\003\022\022\n\016EItemType_Task\020\004\022\024\n\020EItemTyp"
    "e_PetEgg\020\005\022\021\n\rEItemType_Pet\020\006\022\026\n\022EItemTy"
    "pe_MountEgg\020\014\022\023\n\017EItemType_Limit\020\r*\301\001\n\014E"
    "PackageType\022\025\n\021EPackageType_None\020\000\022\027\n\023EP"
    "ackageType_Common\020\001\022\030\n\024EPackageType_Stor"
    "age\020\002\022\031\n\025EPackageType_MountEgg\020\003\022\027\n\023EPac"
    "kageType_PetEgg\020\004\022\033\n\027EPackageType_DeityE"
    "quip\020\005\022\026\n\022EPackageType_Limit\020\006*\253\001\n\010EQual"
    "ity\022\021\n\rEQuality_grey\020\001\022\022\n\016EQuality_white"
    "\020\002\022\022\n\016EQuality_green\020\003\022\021\n\rEQuality_blue\020"
    "\004\022\023\n\017EQuality_purple\020\005\022\023\n\017EQuality_orang"
    "e\020\006\022\020\n\014EQuality_red\020\007\022\021\n\rEQuality_gold\020\010"
    "\032\002\020\001*\347\002\n\tEEquipPos\022\022\n\016EEquipPos_none\020\000\022\026"
    "\n\022EEquipPos_m_weapon\020\001\022\026\n\022EEquipPos_s_we"
    "apon\020\002\022\021\n\rEEquipPos_hat\020\003\022\025\n\021EEquipPos_c"
    "lothes\020\004\022\022\n\016EEquipPos_hand\020\005\022\022\n\016EEquipPo"
    "s_belt\020\006\022\022\n\016EEquipPos_shoe\020\007\022\026\n\022EEquipPo"
    "s_necklace\020\010\022\026\n\022EEquipPos_bracelet\020\t\022\022\n\016"
    "EEquipPos_ring\020\n\022\024\n\020EEquipPos_guard1\020\013\022\024"
    "\n\020EEquipPos_guard2\020\014\022\022\n\016EEquipPos_jade\020\r"
    "\022\023\n\017EEquipPos_marry\020\016\022\023\n\017EEquipPos_limit"
    "\020\017\032\002\020\001*\220\013\n\006EConst\022\035\n\031EConst_RelationRece"
    "ntSize\020\024\022\035\n\031EConst_RelationFriendSize\020\025\022"
    "\033\n\027EConst_RelationHateSize\020\026\022\034\n\030EConst_R"
    "elationBlackSize\020\027\022\033\n\027EConst_ServerUpdat"
    "eTime\020\"\022\030\n\024EConst_ChgNameItemId\020=\022\034\n\030ECo"
    "nst_WorldChatLevLimit\020K\022\034\n\030EConst_CrossC"
    "hatLevLimit\020L\022\030\n\024EConst_CrossChatCost\020q\022"
    "\037\n\032EConst_WorldChannelNeedPay\020\216\001\022\036\n\031ECon"
    "st_CreateUnionNeedPay\020\217\001\022\035\n\030EConst_Scene"
    "ChatLevLimit\020\222\001\022\"\n\035EConst_TeamEnList_Cos"
    "tBindDia\020\225\001\022\032\n\025EConst_RoleSkillPubCd\020\265\001\022"
    "\031\n\024EConst_GodSkillPubCd\020\266\001\022\031\n\024EConst_Pet"
    "SkillPubCd\020\267\001\022\033\n\026EConst_SkillGroupChgCd\020"
    "\276\001\022\026\n\021EConst_CorpseTime\020\300\001\022\032\n\025EConst_Bos"
    "sCorpseTime\020\301\001\022\032\n\025EConst_DropProtectSec\020"
    "\303\001\022\031\n\024EConstTiredReliveNum\020\310\001\022\030\n\023EConstT"
    "iredContiSec\020\311\001\022\031\n\024EConstTiredReliveSec\020"
    "\312\001\022#\n\036EConst_ImmediateReliveCostItem\020\313\001\022"
    "\037\n\032EConst_ImmediateReliveCost\020\316\001\022\"\n\035ECon"
    "st_PackageMountEggSlotNum\020\326\001\022!\n\034EConst_M"
    "ountDuHua_ActiveSlot\020\327\001\022#\n\036EConst_MountD"
    "uHua_TimeGoldCost\020\330\001\022#\n\036EConst_MountDuHu"
    "a_TimeItemCost\020\331\001\022\033\n\026EConst_AutoPickDrop"
    "Sec\020\347\001\022 \n\033EConst_PartnerFllowDistance\020\350\001"
    "\022#\n\036EConst_PartnerTeleportDistance\020\351\001\022\033\n"
    "\026EConst_ArenaResultTime\020\352\001\022\036\n\031EConst_Are"
    "naChallengTimes\020\353\001\022!\n\034EConst_ArenaVipCha"
    "llengTimes\020\354\001\022\"\n\035EConst_SkillAdvanceUnlo"
    "ckCost\020\360\001\022!\n\034EConst_SkillAdvanceResetCos"
    "t\020\361\001\022\036\n\031EConst_TeamMemCountExpAdd\020\362\001\022\037\n\032"
    "EConst_GodEvilNoticeReward\020\374\001\022\037\n\032EConst_"
    "GodEvilActiveReward\020\375\001\022\036\n\031EConst_GodEvil"
    "ChgFacadeCd\020\376\001\022\036\n\031EConst_GodEvilGodChgSk"
    "ill\020\215\002\022\037\n\032EConst_GodEvilEvilChgSkill\020\216\002\022"
    "(\n#EConst_OneKeyFinishGuildMissionCost\020\350"
    "\007\022\036\n\031EConst_OnceFinishTaskCost\020\351\007*\243q\n\010ER"
    "etCode\022\017\n\013RET_SUCCESS\020\000\022\014\n\010RET_FAIL\020\001\022\022\n"
    "\016RET_LEVEL_LACK\020\002\022\022\n\016RET_MONEY_LACK\020\003\022\021\n"
    "\rRET_GOLD_LACK\020\004\022\026\n\022RET_BIND_GOLD_LACK\020\005"
    "\022\024\n\020RET_DIAMOND_LACK\020\006\022\031\n\025RET_BIND_DIAMO"
    "ND_LACK\020\007\022\026\n\022RET_VIP_LEVEL_LACK\020\010\022\022\n\016RET"
    "_PROF_ERROR\020\n\022\031\n\025RET_PLAYER_NOT_ONLINE\020\013"
    "\022\022\n\016RET_RACE_ERROR\020\014\022\021\n\rRET_SEX_ERROR\020\r\022"
    "\022\n\016RET_NOT_ONLINE\020\016\022\022\n\016RET_DATA_ERROR\020\017\022"
    "\032\n\026RET_NOT_HAVE_CHARACTER\020\020\022\020\n\014RET_BAG_F"
    "ULL\020\021\022\024\n\020RET_PARMAR_ERROR\020\022\022\024\n\020RET_CONFI"
    "G_ERROR\020\023\022\030\n\024RET_OTHER_LEVEL_LACK\020\024\022\021\n\rR"
    "ET_ID_UNKNOW\020\025\022\030\n\024RET_REPEATED_OPERATE\020\026"
    "\022\023\n\017RET_UNAVAILABLE\020\027\022\022\n\016RET_FIGHT_LACK\020"
    "\030\022\025\n\021RET_APTITUDE_LACK\020\031\022\024\n\020RET_OVER_MAX"
    "_NUM\020\032\022\023\n\017RET_PRICE_ERROR\020\033\022\030\n\024RET_OTHER"
    "_NOT_ONLINE\020\034\022\031\n\025RET_STAR_ESSENCE_LACK\020\035"
    "\022\030\n\024RET_STAR_LAYER_LIMIT\020\036\022\030\n\024RET_OCCUPA"
    "TION_ERROR\020\037\022\031\n\025RET_SMALL_SPIRIT_LACK\020 \022"
    "\026\n\022RET_SMALL_BIG_LACK\020!\022\030\n\024RET_ITEM_PARA"
    "M_ERROR\020\"\022\031\n\025RET_CAN_NOT_RECONNECT\020#\022\033\n\027"
    "RET_DISALLOW_ENTER_GAME\020$\022\025\n\021RET_MATERIA"
    "L_LACK\020%\022\022\n\016RET_MAGIC_LACK\020&\022\025\n\021RET_PRES"
    "TIGE_LACK\020\'\022\025\n\021RET_FUNC_NOT_OPEN\020(\022\023\n\017RE"
    "T_LLLEGAL_OPT\020)\022\037\n\033RET_LOGIN_BAD_USER_NA"
    "ME_LEN\020d\022!\n\035RET_LOGIN_CHARACTER_NOT_EXIT"
    "S\020e\022!\n\035RET_LOGIN_ACCOUNT_OTHER_LOGIN\020f\022!"
    "\n\035RET_LOGIN_CHARACTER_NUM_LIMIT\020g\022#\n\037RET"
    "_LOGIN_CHARACTER_NAME_EXISTS\020h\022!\n\035RET_LO"
    "GIN_CHARACTER_SEX_ERROR\020i\022\"\n\036RET_LOGIN_C"
    "HARACTER_PROF_ERROR\020j\022&\n\"RET_LOGIN_CHARA"
    "CTER_NAME_LEN_ERROR\020k\022%\n!RET_LOGIN_CHARA"
    "CTER_CREATE_FAILED\020l\022#\n\037RET_LOGIN_CHARAC"
    "TER_NOT_ACCOUNT\020m\022\037\n\033RET_LOGIN_CHARACTER"
    "_ILLEGAL\020n\022\"\n\036RET_LOGIN_CHARACTER_VESION"
    "_ERR\020o\022(\n$RET_LOGIN_ACCOUNT_SYSTEM_MAINT"
    "ENANCE\020p\022\035\n\031RET_LOGIN_ILLEGAL_REQUEST\020q\022"
    "\032\n\026RET_LOGIN_CHANNEL_FAIL\020r\022\036\n\032RET_LOGIN"
    "_ORBIDDEN_ACCOUNT\020s\022\037\n\033RET_LOGIN_QUEUE_E"
    "NOUGHT_NUM\020t\022\035\n\031RET_LOGIN_HAS_DELETE_CHA"
    "R\020u\022\026\n\022RET_LOGIN_TIME_OUT\020v\022\023\n\017RET_TOKEN"
    "_ERROR\020w\022\024\n\020RET_ACCOUNT_FULL\020x\022\025\n\021RET_NO"
    "T_OPEN_TIME\020y\022 \n\034RET_CAN_NOT_RETURN_ROLE"
    "_LIST\020z\022\031\n\025RET_LOGIN_TOKEN_ERROR\020{\022\034\n\027RE"
    "T_SCENE_DST_NOT_EXIST\020\310\001\022\036\n\031RET_SCENE_IN"
    "VALID_DST_POS\020\311\001\022\033\n\026RET_SCENE_CAN_NOT_TR"
    "AN\020\312\001\022 \n\033RET_SCENE_TRANS_PARAM_ERROR\020\313\001\022"
    "\037\n\032RET_MAIL_SEND_TARGET_ERROR\020\254\002\022\030\n\023RET_"
    "MAIL_DATA_ERROR\020\255\002\022\027\n\022RET_MAIL_NOT_EXIST"
    "\020\256\002\022!\n\034RET_MAIL_NOT_HAVE_ATTACHMENT\020\257\002\022\035"
    "\n\030RET_MAIL_GOODS_NUM_LIMIT\020\260\002\022\035\n\030RET_MAI"
    "L_TOPIC_LEN_LIMIT\020\261\002\022\033\n\026RET_MAIL_ALREADY"
    "_FETCH\020\262\002\022!\n\034RET_MAIL_ATTATCH_COUNT_LIMI"
    "T\020\263\002\022\034\n\027RET_MAIL_ALREDAY_EXPIRE\020\264\002\022 \n\033RE"
    "T_MAIL_HAS_NOT_BEGIN_TIME\020\265\002\022\037\n\032RET_PACK"
    "AGE_ITEM_NOT_EXITS\020\221\003\022\"\n\035RET_PACKAGE_ITE"
    "M_CAN_NOT_SELL\020\222\003\022\036\n\031RET_PACKAGE_ITEM_NU"
    "M_LACK\020\223\003\022!\n\034RET_PACKAGE_ITEM_CAN_NOT_US"
    "E\020\224\003\022\'\n\"RET_PACKAGE_ITEM_CAN_NOT_BATCH_U"
    "SE\020\225\003\022\035\n\030RET_PACKAGE_EXPAND_LIMIT\020\226\003\022$\n\037"
    "RET_PACKAGE_ITEM_FUNC_PARAM_ERR\020\227\003\022\035\n\030RE"
    "T_PACKAGE_SORT_IN_COOL\020\230\003\022(\n#RET_PACKAGE"
    "_COMMON_SPACE_NOT_ENOUGH\020\231\003\022)\n$RET_PACKA"
    "GE_STORAGE_SPACE_NOT_ENOUGH\020\232\003\022\030\n\023RET_PA"
    "CKAGE_HP_FULL\020\241\003\022\030\n\023RET_PACKAGE_WAITING\020"
    "\245\003\022$\n\037RET_PACKAGE_USE_HANGUP_CARD_MAX\020\261\003"
    "\022&\n!RET_PACKAGE_LACK_CHANGE_NAME_ITEM\020\264\003"
    "\022$\n\037RET_PACKAGE_USE_ITEM_NOT_REMOVE\020\265\003\022\037"
    "\n\032RET_PACKAGE_FUSHI_CARD_MAX\020\266\003\022&\n!RET_P"
    "ACKAGE_TASK_SPACE_NOT_ENOUGH\020\270\003\022&\n!RET_P"
    "ACKAGE_STAR_SPACE_NOT_ENOUGH\020\271\003\022&\n!RET_P"
    "ACKAGE_SOUL_SPACE_NOT_ENOUGH\020\272\003\022+\n&RET_P"
    "ACKAGE_FAIMATERI_SPACE_NOT_ENOUGH\020\273\003\022,\n\'"
    "RET_PACKAGE_FAICRYSTAL_SPACE_NOT_ENOUGH\020"
    "\274\003\022(\n#RET_PACKAGE_SYMBOL_SPACE_NOT_ENOUG"
    "H\020\275\003\022.\n)RET_PACKAGE_BOSSIDENTIFY_SPACE_N"
    "OT_ENOUGH\020\276\003\022.\n)RET_PACKAGE_FAILIDENTIFY"
    "_SPACE_NOT_ENOUGH\020\277\003\022&\n!RET_PACKAGE_USE_"
    "NOT_HAVE_PK_VALUE\020\300\003\022\037\n\032RET_PACKAGE_ITEM"
    "_USE_LIMIT\020\301\003\022(\n#RET_PACKAGE_ITEM_LOGIN_"
    "GIFT_FETCHED\020\302\003\022#\n\036RET_PACKAGE_USE_ITEM_"
    "MAP_LIMIT\020\303\003\022%\n RET_PACKAGE_PET_SPACE_NO"
    "T_ENOUGH\020\304\003\022#\n\036RET_GROW_PART_ENTRY_LEVEL"
    "_FULL\020\364\003\022\035\n\030RET_GROW_PART_NOT_ACTIVE\020\365\003\022"
    " \n\033RET_PLAYER_SEAT_STATE_ERROR\020\376\003\022!\n\034RET"
    "_PLAYER_SEAT_MAP_NOT_SEAT\020\377\003\022\034\n\027RET_PLAY"
    "ER_SEAT_NO_TIME\020\200\004\022\030\n\023RET_FACADE_UNACTIV"
    "E\020\246\004\022\031\n\024RET_FACADE_MAX_LEVEL\020\247\004\022\032\n\025RET_F"
    "ACADE_HAVE_DRESS\020\250\004\022\036\n\031RET_FACADE_HAVE_N"
    "OT_DRESS\020\251\004\022\"\n\035RET_FACADE_FRAGMENT_USE_L"
    "IMIT\020\252\004\022\031\n\024RET_FACADE_NOT_BREAK\020\253\004\022\035\n\030RE"
    "T_FACADE_ALREADY_BREAK\020\254\004\022#\n\036RET_FACADE_"
    "SOUL_NO_SKILL_RESET\020\255\004\022,\n\'RET_FACADE_SOU"
    "L_LEVELUP_FAIL_LEVEL_RAIL\020\256\004\022!\n\034RET_FACA"
    "DE_SOUL_LEVELUP_FAIL\020\257\004\022\023\n\016RET_GM_NOT_KE"
    "Y\020\331\004\022\035\n\030RET_GM_PRAMA_COUNT_ERROR\020\332\004\022\024\n\017R"
    "ET_GM_NOT_FIND\020\333\004\022\030\n\023RET_EQUIP_NOT_EXIST"
    "\020\354\004\022!\n\034RET_EQUIP_POS_NOT_EXIT_EQUIP\020\355\004\022\031"
    "\n\024RET_EQUIP_STRONG_MAX\020\356\004\022\033\n\026RET_EQUIP_T"
    "OTAL_LV_MAX\020\357\004\022\032\n\025RET_EQUIP_ISNOT_STONE\020"
    "\360\004\022!\n\034RET_EQUIP_GEM_INLAY_TYPE_ERR\020\361\004\022\032\n"
    "\025RET_EQUIP_GEM_POS_ERR\020\362\004\022 \n\033RET_EQUIP_S"
    "TONE_SLOT_UNLOCK\020\363\004\022\033\n\026RET_EQUIP_STONE_L"
    "V_MAX\020\364\004\022\031\n\024RET_EQUIP_TOTAL_LACK\020\365\004\022\027\n\022R"
    "ET_STONE_TYPE_ERR\020\366\004\022\033\n\026RET_WASH_POS_IS_"
    "ACTIVE\020\367\004\022\026\n\021RET_WASH_LOCK_MAX\020\370\004\022\032\n\025RET"
    "_EQUIP_SUIT_LV_MAX\020\371\004\022\033\n\026RET_EQUIP_SUIT_"
    "LV_LACK\020\372\004\022&\n!RET_EQUIP_SUIT_NOT_QUALITY"
    "_ENOUGH\020\373\004\022%\n RET_EQUIP_SUIT_LV_NOT_OTHE"
    "R_FULL\020\374\004\022\034\n\027RET_MISSION_HAVE_ACCEPT\020\274\005\022"
    "\037\n\032RET_MISSION_CAN_NOT_ACCEPT\020\275\005\022\034\n\027RET_"
    "MISSION_LEVEL_ERROR\020\276\005\022\032\n\025RET_MISSION_NO"
    "T_EXIST\020\277\005\022 \n\033RET_MISSION_STATE_NOT_MATC"
    "H\020\300\005\022!\n\034RET_MISSION_PROFESSION_LIMIT\020\301\005\022"
    "\034\n\027RET_MISSION_TIMES_ERROR\020\302\005\022)\n$RET_MIS"
    "SION_HAVE_ACCEPT_NUMBER_LIMIT\020\303\005\022\034\n\027RET_"
    "MISSION_GROUP_LIMIT\020\304\005\022\034\n\027RET_MISSION_NO"
    "T_ABANDON\020\305\005\022(\n#RET_MISSION_PERIOD_FINIS"
    "H_NUM_LIMIT\020\306\005\022,\n\'RET_MISSION_PERIOD_ONC"
    "E_EXIST_NUM_LIMIT\020\307\005\022!\n\034RET_MISSION_HAVE"
    "_TYPE_ACCEPT\020\310\005\022 \n\033RET_MISSION_CAN_NOT_O"
    "NE_KEY\020\311\005\022\"\n\035RET_MISSION_ONE_KEY_NUM_LIM"
    "IT\020\312\005\022\033\n\026RET_MISSION_NOT_FINISH\020\313\005\022!\n\034RE"
    "T_MISSION_NOT_ACCEPT_UNION\020\314\005\022$\n\037RET_MIS"
    "SION_CAN_NOT_ONCE_FINISH\020\315\005\022\037\n\032RET_MISSI"
    "ON_ALREADY_SUBMIT\020\316\005\022*\n%RET_MISSION_GUIL"
    "D_PRESTIGE_ACCEPT_NUM\020\317\005\022)\n$RET_MISSION_"
    "GUILD_PRESTIGE_FRESH_NUM\020\320\005\022+\n&RET_MISSI"
    "ON_GUILD_PRESTIGE_STATE_ERROR\020\321\005\0222\n-RET_"
    "MISSION_GUILD_PRESTIGE_REFRESH_NOT_FINIS"
    "H\020\323\005\022&\n!RET_MISSION_FUNCTION_UNLOCK_LIMI"
    "T\020\324\005\022\034\n\027RET_RELATION_HAVE_APPLY\020\240\006\022\033\n\026RE"
    "T_RELATION_NOT_AGREE\020\241\006\022$\n\037RET_RELATION_"
    "CAN_NOT_APPLY_SELF\020\242\006\022#\n\036RET_RELATION_AP"
    "PLY_GROUP_ERROR\020\243\006\022\036\n\031RET_RELATION_NOT_A"
    "DD_SELF\020\244\006\022\036\n\031RET_RELATION_NOT_IN_APPLY\020"
    "\245\006\022%\n RET_RELATION_SIZE_LIMIT_NO_APPLY\020\246"
    "\006\022+\n&RET_RELATION_SIZE_LIMIT_NO_APPLY_OT"
    "HER\020\247\006\022\036\n\031RET_RELATION_IS_MY_FRIEND\020\250\006\022#"
    "\n\036RET_RELATION_SIZE_LIMIT_NO_ADD\020\251\006\022)\n$R"
    "ET_RELATION_SIZE_LIMIT_NO_ADD_OTHER\020\252\006\022\""
    "\n\035RET_RELATION_ADD_BLACK_MYSELF\020\253\006\022\"\n\035RE"
    "T_RELATION_BALCK_SIZE_LIMIT\020\254\006\022\037\n\032RET_RE"
    "LATION_IN_YOUR_BALCK\020\255\006\022 \n\033RET_RELATION_"
    "IN_OTHER_BALCK\020\256\006\022.\n)RET_RELATION_IN_OTH"
    "ER_BALCK_CAN_NOT_APPLY\020\257\006\022-\n(RET_RELATIO"
    "N_IN_YOUR_BALCK_CAN_NOT_APPLY\020\260\006\022\034\n\027RET_"
    "RELATION_NOT_SEARCH\020\261\006\022\035\n\030RET_RELATION_N"
    "OT_FRIENDS\020\262\006\022*\n%RET_RELATION_CANOT_ADDF"
    "RIEND_TO_BLACK\020\263\006\022+\n&RET_RELATION_GIVE_P"
    "HYSICAL_TIMES_LIMIT\020\264\006\022)\n$RET_RELATION_G"
    "ET_PHYSICAL_TIME_LIMTI\020\265\006\022\"\n\035RET_RELATIO"
    "N_NOT_GET_PHYSICAL\020\266\006\022#\n\036RET_RELATION_HA"
    "VE_GET_PHYSICAL\020\267\006\022)\n$RET_RELATION_GET_P"
    "HYSICAL_GIFT_LIMIT\020\270\006\022\034\n\027RET_RELATION_IN"
    "_CD_TIME\020\271\006\022\"\n\035RET_RELATION_TRACK_HATE_E"
    "RROR\020\272\006\022\036\n\031RET_RELATION_GIFT_TO_MAIL\020\273\006\022"
    "\036\n\031RET_RELATION_HAVE_NO_DATA\020\274\006\022\036\n\031RET_R"
    "ELATION_MARRY_REFUSE\020\275\006\022\033\n\026RET_RELATION_"
    "HAS_MARRY\020\276\006\022\"\n\035RET_RELATION_TARGET_HAS_"
    "MARRY\020\277\006\022\033\n\026RET_RELATION_NOT_MARRY\020\300\006\022&\n"
    "!RET_RELATION_CLOSENESS_NOT_ENOUGH\020\301\006\022\'\n"
    "\"RET_RELATION_CAN_NOT_DELETE_SPOUSE\020\302\006\022$"
    "\n\037RET_RELATION_HAVE_PROPOSE_MARRY\020\303\006\022\036\n\031"
    "RET_RELATION_EXIST_SHIELD\020\304\006\022\035\n\030RET_RELA"
    "TION_WAIT_DBDATA\020\305\006\022!\n\034RET_RELATION_GIFT"
    "_NOT_FRIEND\020\306\006\022\034\n\027RET_RELATION_GIFT_ERRO"
    "R\020\307\006\022\037\n\032RET_RELATION_NOT_HAVE_DATE\020\310\006\022\030\n"
    "\023RET_CHAT_NOT_MYSELF\020\204\007\022\037\n\032RET_CHAT_TARG"
    "ET_NOT_ONLINE\020\205\007\022\035\n\030RET_CHAT_TARGET_IN_B"
    "LACK\020\206\007\022\"\n\035RET_CHAT_QUREY_CHAR_NOT_EXITS"
    "\020\207\007\022\036\n\031RET_CHAT_FREE_TIMES_LIMIT\020\210\007\022\036\n\031R"
    "ET_CHAT_FREE_GOODS_LIMIT\020\211\007\022\033\n\026RET_CHAT_"
    "CD_TIME_LIMIT\020\212\007\022\034\n\027RET_CHAT_BIG_HORN_LI"
    "MIT\020\213\007\022\033\n\026RET_CHAT_CD_NoSpeakIng\020\214\007\022\033\n\026R"
    "ET_CHAT_PAY_RMB_LIMIT\020\215\007\022\030\n\023RET_CHAT_CON"
    "D_LIMIT\020\216\007\022 \n\033RET_DUPLICATE_CAN_NOT_ENTE"
    "R\020\230\007\022\034\n\027RET_DUPLICATE_ALREAY_IN\020\231\007\022!\n\034RE"
    "T_DUPLICATE_RELIVE_NO_DEAD\020\232\007\022\037\n\032RET_DUP"
    "LICATE_PRE_NOT_PASS\020\233\007\022\"\n\035RET_DUPLICATE_"
    "MAX_LEVEL_LIMIT\020\234\007\022 \n\033RET_DUPLICATE_CAN_"
    "NOT_LEAVE\020\235\007\022!\n\034RET_DUPLICATE_LACK_ENTER"
    "_NUM\020\236\007\022\036\n\031RET_DUPLICATE_NOT_IN_TEAM\020\237\007\022"
    "!\n\034RET_DUPLICATE_NOT_TEM_LEADER\020\240\007\022#\n\036RE"
    "T_DUPLICATE_PLAYER_NUM_LIMIT\020\241\007\022#\n\036RET_D"
    "UPLICATE_RELIVE_NUM_LIMIT\020\242\007\022 \n\033RET_DUPL"
    "ICATE_BUY_NUM_LIMIT\020\243\007\022\037\n\032RET_DUPLICATE_"
    "ALREADY_PASS\020\244\007\022#\n\036RET_DUPLICATE_NOT_IN_"
    "DUPLICATE\020\245\007\022\"\n\035RET_DUPLICATE_TEAM_NOT_I"
    "NVITE\020\246\007\022!\n\034RET_DUPLICATE_TEAM_NOT_REPLY"
    "\020\247\007\022%\n RET_DUPLICATE_TEAM_ALREADY_REPLY\020"
    "\250\007\022&\n!RET_DUPLICATE_TEAM_MEM_ALREADY_IN\020"
    "\251\007\022&\n!RET_DUPLICATE_TEAM_MEM_NOT_ONLINE\020"
    "\252\007\022%\n RET_DUPLICATE_TEAM_MEM_NOT_AGREE\020\253"
    "\007\022\035\n\030RET_DUPLICATE_NOT_EXISTS\020\254\007\022!\n\034RET_"
    "DUPLICATE_CAN_NOT_RELIVE\020\255\007\022\036\n\031RET_DUPLI"
    "CATE_ALREDY_DEAD\020\256\007\022\'\n\"RET_DUPLICATE_LAC"
    "K_GROUP_ENTER_NUM\020\257\007\022\037\n\032RET_DUPLICATE_CA"
    "N_NOT_SEEP\020\260\007\022\035\n\030RET_DUPLICATE_STAR_LIMI"
    "T\020\261\007\022!\n\034RET_DULICATE_SWEEP_ITEM_LACK\020\262\007\022"
    "$\n\037RET_DUPLICATE_TEAMDUP_NOT_ALLOW\020\263\007\022\"\n"
    "\035RET_DUPLICATE_CAN_NOT_INSPIRE\020\264\007\022$\n\037RET"
    "_DUPLICATE_INSPIRE_NUM_LIMIT\020\265\007\022(\n#RET_D"
    "UPLICATE_SWEEP_NOT_SET_INSPIRE\020\266\007\022 \n\033RET"
    "_DUPLICATE_TEAM_MEM_DEAD\020\267\007\022%\n RET_DUPLI"
    "CATE_TEAM_DIE_NOT_REPLY\020\270\007\022\'\n\"RET_DUPLIC"
    "ATE_TEAM_MEM_SPECIAL_MAP\020\271\007\022\036\n\031RET_DUPLI"
    "CATE_ALREDAY_END\020\272\007\022\033\n\026RET_DUPLICATE_NOT"
    "_OPEN\020\273\007\022\037\n\032RET_DUPLICATE_ALREADY_OPEN\020\274"
    "\007\022\036\n\031RET_DUPLICATE_HAS_NO_OPEN\020\275\007\022\034\n\027RET"
    "_DUPLICATE_IN_CREATE\020\276\007\022 \n\033RET_DUPLICATE"
    "_CAN_NOT_RESET\020\277\007\022$\n\037RET_DUPLICATE_LAYER"
    "_ALL_FETCHED\020\300\007\022\'\n\"RET_DUPLICATE_PALACE_"
    "LAYER_FETCHED\020\301\007\022#\n\036RET_DUPLICATE_NO_PAL"
    "ACE_REWARD\020\302\007\022$\n\037RET_DUPLICATE_TEAM_MEM_"
    "NO_UNION\020\303\007\022*\n%RET_DUPLICATE_TEAM_MEM_NO"
    "T_SAME_UNION\020\304\007\022&\n!RET_DUPLICATE_TEAM_NO"
    "T_SAME_UNION\020\305\007\022)\n$RET_DUPLICATE_MAX_PAL"
    "ACE_LAYER_LIMIT\020\306\007\022&\n!RET_DUPLICATE_TEAM"
    "_MEM_NOT_IN_DUP\020\307\007\022\'\n\"RET_DUPLICATE_PALA"
    "CE_LAYER_UNUSUAL\020\310\007\022\032\n\025RET_DUPLICATE_IS_"
    "OVER\020\311\007\022&\n!RET_DUPLICATE_BT_DRAGON_NOT_E"
    "NTER\020\312\007\022%\n RET_DUPLICATE_NO_ENTER_BT_DRA"
    "GON\020\313\007\022$\n\037RET_DUPLICATE_NO_TEAM_NOT_ENTE"
    "R\020\314\007\022$\n\037RET_DUPLICATE_IN_DUP_NOT_INVITE\020"
    "\315\007\022\033\n\026RET_DUP_SWEEP_NO3_STAR\020\316\007\022\032\n\025RET_D"
    "UP_SWEEP_NO_PASS\020\317\007\022\035\n\030RET_DUP_SWEEP_FIG"
    "HT_LACK\020\320\007\022#\n\036RET_DUPLICATE_NO_BUY_BT_DR"
    "AGON\020\321\007\022\024\n\017RET_SKILL_IN_CD\020\350\007\022\032\n\025RET_SKI"
    "LL_CAN_NOT_USE\020\351\007\022\037\n\032RET_SKILL_TARGET_NO"
    "T_EXIST\020\352\007\022\032\n\025RET_SKILL_IN_GROUP_CD\020\353\007\022\033"
    "\n\026RET_SKILL_IN_FACADE_CD\020\354\007\022\030\n\023RET_SKILL"
    "_NOT_EXIST\020\355\007\022\026\n\021RET_SKILL_LEV_MAX\020\356\007\022\036\n"
    "\031RET_SKILL_ALREADY_WAKE_UP\020\357\007\022\032\n\025RET_SKI"
    "LL_INVALID_POS\020\360\007\022\036\n\031RET_SKILL_CAN_NOT_C"
    "HG_POS\020\361\007\022\035\n\030RET_SKILL_ALREADY_IN_POS\020\362\007"
    "\022 \n\033RET_SKILL_ADVANCE_LEV_LIMIT\020\363\007\022\032\n\025RE"
    "T_SKILL_ADVANCE_NOT\020\364\007\022 \n\033RET_SKILL_ADVA"
    "NCE_NOT_RESET\020\365\007\022\033\n\026RET_SKILL_IN_GOD_STA"
    "TE\020\366\007\022\033\n\026RET_PLAYER_TIRED_STATE\020\315\010\022\030\n\023RE"
    "T_PLAYER_NOT_DEAD\020\316\010\022\036\n\031RET_PLAYER_CAN_N"
    "OT_RELIVE\020\317\010\022\036\n\031RET_PLAYER_MAP_NOT_RELIV"
    "E\020\320\010\022 \n\033RET_PLAYER_RELIVE_NUM_LIMIT\020\321\010\022\032"
    "\n\025RET_TEAM_ALREADY_JOIN\020\244\r\022 \n\033RET_TEAM_O"
    "THER_ALREADY_JOIN\020\245\r\022\037\n\032RET_TEAM_OBJECT_"
    "NOT_CHANGE\020\246\r\022\031\n\024RET_TEAM_REPEAT_JOIN\020\247\r"
    "\022\026\n\021RET_TEAM_NO_EXIST\020\250\r\022\022\n\rRET_TEAM_FUL"
    "L\020\251\r\022\034\n\027RET_TEAM_HAVE_APPLICANT\020\252\r\022\037\n\032RE"
    "T_TEAM_INVALID_APPLICANT\020\253\r\022\030\n\023RET_TEAM_"
    "NOT_MEMBER\020\254\r\022\036\n\031RET_TEAM_SETTING_LV_ERR"
    "OR\020\255\r\022\033\n\026RET_TEAM_NO_AUTO_MATCH\020\256\r\022\035\n\030RE"
    "T_TEAM_HAVE_AUTO_MATCH\020\257\r\022\030\n\023RET_TEAM_NO"
    "T_LEADER\020\260\r\022 \n\033RET_TEAM_DUP_NOT_AUTO_MAT"
    "CH\020\261\r\022!\n\034RET_TEAM_MAP_CAN_NOT_OPERATE\020\262\r"
    "\022\'\n\"RET_TEAM_MAP_OTHER_CAN_NOT_OPERATE\020\263"
    "\r\022!\n\034RET_TEAM_MAP_SELF_IN_SPECIAL\020\264\r\022\"\n\035"
    "RET_TEAM_MAP_OTHER_IN_SPECIAL\020\265\r\022!\n\034RET_"
    "TEAM_MAP_TARGET_IN_MATCH\020\266\r\022$\n\037RET_TEAM_"
    "OBJECT_CAN_NOT_OPERATE\020\267\r\022\026\n\021RET_TEAM_NO"
    "T_FULL\020\270\r\022 \n\033RET_TEAM_NOT_PROMOTE_LEADER"
    "\020\271\r\022\"\n\035RET_TEAM_IN_MATCH_NOT_OPERATE\020\272\r\022"
    "\033\n\026RET_USE_ITEM_DAY_LIMIT\020\210\016\022\035\n\030RET_FACT"
    "ION_ALREADY_JOIN\020\354\016\022#\n\036RET_FACTION_NAME_"
    "ALREAY_EXISTS\020\355\016\022\037\n\032RET_FACTION_NAME_LEN"
    "_LIMIT\020\356\016\022!\n\034RET_FACTION_NOTICE_LEN_LIMI"
    "T\020\357\016\022\033\n\026RET_FACTION_NOT_EXISTS\020\360\016\022\031\n\024RET"
    "_FACTION_NOT_JOIN\020\361\016\022\033\n\026RET_FACTION_NOT_"
    "LEADER\020\362\016\022 \n\033RET_FACTION_SET_PARAM_ERROR"
    "\020\363\016\022#\n\036RET_FACTION_MEMBER_COUNT_LIMIT\020\364\016"
    "\022\"\n\035RET_FACTION_HAS_NO_PERMISSION\020\365\016\022!\n\034"
    "RET_FACTION_APPLY_NOT_EXISTS\020\366\016\022\"\n\035RET_F"
    "ACTION_OTHER_ALREDY_JOIN\020\367\016\022\037\n\032RET_FACTI"
    "ON_OTHER_NOT_JOIN\020\370\016\022(\n#RET_FACTION_OTHE"
    "R_ALREDY_JOIN_OTHER\020\371\016\022#\n\036RET_FACTION_CA"
    "N_NOT_TRANS_SELF\020\372\016\022&\n!RET_FACTION_CAN_N"
    "OT_TRANS_NO_VICE\020\373\016\022$\n\037RET_FACTION_LEADE"
    "R_CAN_NOT_EXIT\020\374\016\022\"\n\035RET_FACTION_ALREDAY"
    "_SAME_DUTY\020\375\016\022&\n!RET_FACTION_ALREADY_COM"
    "MOM_MEMBER\020\376\016\022\035\n\030RET_FACTION_INVALID_DUT"
    "Y\020\377\016\022\'\n\"RET_FACTION_NOTICE_INTER_SEC_LIM"
    "IT\020\200\017\022!\n\034RET_FACTION_DUTY_COUNT_LIMIT\020\201\017"
    "\022#\n\036RET_FACTION_CHG_NAME_SAME_NAME\020\202\017\022#\n"
    "\036RET_FACTION_CHG_NAME_LACK_ITEM\020\203\017\022\034\n\027RE"
    "T_FACTION_FORBID_JOIN\020\204\017\022\034\n\027RET_FACTION_"
    "NAME_NO_CHG\020\205\017\022!\n\034RET_FACTION_DONATE_NUM"
    "_LIMIT\020\206\017\022%\n RET_FACTION_ALREADY_FETCH_S"
    "ALARY\020\207\017\022%\n RET_FACTION_CAN_NOT_FETCH_SA"
    "LARY\020\210\017\022#\n\036RET_ARENA_CAN_NOT_CHALL_MYSEL"
    "F\020\320\017\022\'\n\"RET_ARENA_CAN_NOT_CHALL_TYPE_ERR"
    "OR\020\321\017\022 \n\033RET_ARENA_CAN_NOT_CHALL_DST\020\322\017\022"
    "(\n#RET_ARENA_CAN_NOT_CHALL_RANK_CHANGE\020\323"
    "\017\022+\n&RET_ARENA_CAN_NOT_CHALL_DST_IN_BECH"
    "ALL\020\324\017\022 \n\033RET_ARENA_CHALL_TIMES_LIMIT\020\325\017"
    "\022\031\n\024RET_ARENA_SCORE_LACK\020\326\017\022\032\n\025RET_ARENA"
    "_IN_CHALLING\020\327\017\022\031\n\024RET_ARENA_DEAD_LIMIT\020"
    "\330\017\022\"\n\035RET_MOUNT_BABY_EGG_SLOT_ERROR\020\202\020\022("
    "\n#RET_MOUNT_BABY_EGG_SLOT_STATE_ERROR\020\203\020"
    "\022!\n\034RET_MOUNT_BABY_EGG_ITEM_EROR\020\204\020\022%\n R"
    "ET_MOUNT_BABY_EGG_TIMEOUT_ERROR\020\205\020\022\027\n\022RE"
    "T_MOUNT_UNACTIVE\020\206\020\022\032\n\025RET_MOUNT_UNUSE_S"
    "TATE\020\207\020\022\030\n\023RET_MOUNT_LEVEL_MAX\020\210\020\022\027\n\022RET"
    "_MOUNT_UNSELECT\020\211\020\022\037\n\032RET_MOUNT_HAVE_SEL"
    "ECT_THIS\020\212\020\022\032\n\025RET_MOUNT_HAVE_RIDEON\020\213\020\022"
    "\033\n\026RET_MOUNT_HAVE_RIDEOFF\020\214\020\022\031\n\024RET_MALL"
    "_CAN_NOT_BUY\020\264\020\022\027\n\022RET_MALL_LEV_LIMIT\020\265\020"
    "\022\027\n\022RET_MALL_VIP_LIMIT\020\266\020\022\027\n\022RET_MALL_NU"
    "M_LIMIT\020\267\020\022\025\n\020RET_MALL_NO_ITEM\020\270\020\022\035\n\030RET"
    "_BATTLE_SLOT_CD_ERROR\020\231\021\022\036\n\031RET_BATTLE_S"
    "LOT_NOT_EXIST\020\232\021\022\035\n\030RET_BATTLE_SLOT_NO_D"
    "EITY\020\233\021\022\037\n\032RET_BATTLE_SLOT_NOT_UNLOCK\020\234\021"
    "\022\036\n\031RET_BATTLE_SLOT_HAS_DEITY\020\235\021\022\031\n\024RET_"
    "DEITY_NOT_EXITST\020\236\021\022\030\n\023RET_DEITY_MAX_LEV"
    "EL\020\237\021\022\027\n\022RET_DEITY_MAX_STAR\020\240\021\022\030\n\023RET_BO"
    "SS_DRIVE_FULL\020\366\023\022\032\n\025RET_HATCH_SLOT_UNLOC"
    "K\020\212\024\022\026\n\021RET_HATCH_HAS_EGG\020\213\024\022\033\n\026RET_HATC"
    "H_SLOT_IS_LOCK\020\214\024\022\031\n\024RET_HATCH_NO_TO_TIM"
    "E\020\215\024\022\033\n\026RET_HATCH_NOT_ALL_OPEN\020\216\024\022\035\n\030RET"
    "_PET_FETTER_IS_ACTIVE\020\217\024\022\030\n\023RET_PET_NOT_"
    "HAS_PET\020\220\024\022\023\n\016RET_PET_IS_MAX\020\221\024\022\023\n\016RET_P"
    "ET_LV_MAX\020\222\024\022\027\n\022RET_PET_STEPLV_MAX\020\223\024\022\027\n"
    "\022RET_PET_STARLV_MAX\020\224\024\022%\n RET_PET_STAR_C"
    "OST_PET_NO_ENGOUTH\020\225\024\022\033\n\026RET_PET_FIGHT_N"
    "OT_REST\020\226\024\022 \n\033RET_PET_IS_NO_GROW_NOT_RES"
    "T\020\227\024\022\027\n\022RET_PET_RES_PETMAX\020\230\024\022\032\n\025RET_PET"
    "_NOT_DECOMPOSE\020\231\024\022\031\n\024RET_PET_NOT_CAN_STA"
    "R\020\232\024\022\033\n\026RET_PET_REPEATED_FIGHT\020\233\024\022\036\n\031RET"
    "_ESCORT_TASK_NOT_EXIST\020\214\025\022\032\n\025RET_ESCORT_"
    "TASK_EXIST\020\215\025\022 \n\033RET_ESCORT_TASK_TIMES_L"
    "IMIT\020\216\025\022!\n\034RET_ESCORT_UP_QUALITY_FAILED\020"
    "\217\025\022\023\n\016RET_ESCORT_MAX\020\220\025\022\030\n\023RET_ASSIST_NO"
    "T_HELP\020\240\025\022!\n\034RET_NO_FACTION_NOT_SEND_HEL"
    "P\020\241\025\022\034\n\027RET_HAS_ASSIST_NOT_SEND\020\242\025\022\030\n\023RE"
    "T_IS_HELPING_THIS\020\243\025\022\036\n\031RET_HELPER_GIFT_"
    "NUM_LIMIT\020\244\025\022\020\n\013RET_IS_RECV\020\245\025\022\033\n\026RET_IS"
    "_HELPER_NUM_LACK\020\246\025\022\036\n\031RET_GODEVIL_ALREA"
    "DY_FETCH\020\360\025\022\036\n\031RET_GODEVIL_CAN_NOT_FETCH"
    "\020\361\025\022\033\n\026RET_GODEVIL_NOT_ACTIVE\020\362\025\022#\n\036RET_"
    "GODEVIL_UPGRADE_FULL_LEVEL\020\363\025\022!\n\034RET_GOD"
    "EVIL_UPGRADE_EXP_LACK\020\364\025\022\026\n\021RET_GODEVIL_"
    "IN_CD\020\365\025\022\037\n\032RET_GODEVIL_NOT_CHG_FACADE\020\366"
    "\025\022\035\n\030RET_GODEVIL_IN_CHG_STATE\020\367\025\022\037\n\032RET_"
    "GODEVIL_ALREADY_ACTIVE\020\370\025\022\026\n\021RET_GVB_MAT"
    "CH_END\020\204\026\022\026\n\021RET_RED_NOT_EXIST\020\324\026\022\031\n\024RET"
    "_RED_FETCH_FINISH\020\325\026\022\032\n\025RET_RED_FETCH_AL"
    "READY\020\326\026\022\032\n\025RET_RED_CAN_NOT_FETCH\020\327\026\022\037\n\032"
    "RET_RED_WAI_SEND_NOT_EXIST\020\330\026\022\"\n\035RET_RED"
    "_WAI_SEND_CAN_NOT_SEND\020\331\026\022\033\n\026RET_RED_SEN"
    "D_NUM_LIMIT\020\332\026\022\034\n\027RET_RED_FETCH_VAL_LIMI"
    "T\020\333\026\022\033\n\026RET_RED_WORD_LEN_LIMIT\020\334\026\022\031\n\024RET"
    "_PAY_USED_PAYMENT\020\330\035\022\034\n\027RET_PAY_INVALID_"
    "PAYMENT\020\331\035\022\032\n\025RET_PAY_INVALID_MONEY\020\332\035\022\036"
    "\n\031RET_PAY_REQ_ODER_CONF_ERR\020\333\035\022\036\n\031RET_PA"
    "Y_REQ_ODER_NOT_OPEN\020\334\035\022\036\n\031RET_PAY_WEB_OR"
    "DER_RETCODE\020\212\036\022\034\n\027RET_PAY_WEB_PAY_RETCOD"
    "E\020\213\036\022\031\n\024RET_SJ_NOT_DECOMPOSE\020\274\036\022\"\n\035RET_S"
    "J_IN_DRESS_NOT_DECOMPOSE\020\275\036\022\027\n\022RET_SJ_AQ"
    "_BAG_FULL\020\276\036\022\027\n\022RET_SJ_LJ_BAG_FULL\020\277\036\022\037\n"
    "\032RET_SJ_NOT_RETURN_IN_DRESS\020\300\036\022\026\n\021RET_SJ"
    "_NOT_RETURN\020\301\036\022\026\n\021RET_SJ_NOT_STRONG\020\302\036\022\036"
    "\n\031RET_SJ_METERIAL_DRESS_ERR\020\303\036\022\031\n\024RET_SJ"
    "_METERIAL_LACK\020\304\036\022\025\n\020RET_SJ_LEVEL_MAX\020\305\036"
    "\022\024\n\017RET_SJ_NOT_POUR\020\306\036\022\024\n\017RET_SJ_POUR_MA"
    "X\020\307\036\022\025\n\020RET_SJ_BREAK_MAX\020\310\036\022\026\n\021RET_SJ_AW"
    "AKEN_MAX\020\311\036\032\002\020\001*\360\001\n\013LOGOUT_TYPE\022\017\n\013LOGOU"
    "T_NONE\020\000\022\021\n\rLOGOUT_LOGOUT\020\001\022\022\n\016LOGOUT_RE"
    "PLACE\020\002\022\027\n\023LOGOUT_DIS_TIME_OUT\020\003\022\023\n\017LOGO"
    "UT_KICK_OUT\020\004\022\027\n\023LOGOUT_CHANGE_LOGIC\020\005\022\033"
    "\n\027LOGOUT_RETURN_ROLE_LIST\020\006\022\031\n\025LOGOUT_LO"
    "GIN_TIME_OUT\020\007\022\023\n\017LOGOUT_WEB_KICK\020\010\022\025\n\021L"
    "OGOUT_CHEAR_KICK\020\t*7\n\tEMailType\022\024\n\020MAIL_"
    "TYPE_PLAYER\020\002\022\024\n\020MAIL_TYPE_SYSTEM\020\003*\206\003\n\014"
    "CHAT_CHANNEL\022\025\n\021CHAT_CHANNEL_NONE\020\000\022\026\n\022C"
    "HAT_CHANNEL_WORLD\020\001\022\026\n\022CHAT_CHANNEL_GUIL"
    "D\020\002\022\027\n\023CHAT_CHANNEL_ENLIST\020\003\022\025\n\021CHAT_CHA"
    "NNEL_TEAM\020\004\022\026\n\022CHAT_CHANNEL_SCENE\020\005\022\026\n\022C"
    "HAT_CHANNEL_CROSS\020\006\022\027\n\023CHAT_CHANNEL_SYST"
    "EM\020\007\022\030\n\024CHAT_CHANNEL_PRIVATE\020\010\022\026\n\022CHAT_C"
    "HANNEL_RUMOR\020\t\022\025\n\021CHAT_CHANNEL_HORN\020\n\022\036\n"
    "\032CHAT_CHANNEL_BACKEND_RUMOR\020\013\022\031\n\025CHAT_CH"
    "ANNEL_ACTIVITY\020\014\022\032\n\026CHAT_CHANNEL_POKERRO"
    "OM\020\r\022\026\n\022CHAT_CHANNEL_LIMIT\020\016*\204\001\n\nFacadeT"
    "ype\022\024\n\020FACADE_WING_TYPE\020\001\022\030\n\024FACADE_TREA"
    "SURE_TYPE\020\002\022\030\n\024FACADE_ARTIFACT_TYPE\020\003\022\027\n"
    "\023FACADE_PARTNER_TYPE\020\004\022\023\n\017FACADE_TYPE_MA"
    "X\020\005*\?\n\013EFacadeType\022\027\n\023EFacadeType_Advanc"
    "e\020\001\022\027\n\023EFacadeType_Fantasy\020\002*\225\003\n\026Functio"
    "nUnlock_ID_TYPE\022 \n\033FunctionUnlock_ID_TYP"
    "E_ROLE\020\351\007\022!\n\034FunctionUnlock_ID_TYPE_SKIL"
    "L\020\352\007\022\"\n\035FunctionUnlock_ID_TYPE_MOUNTS\020\336\017"
    "\022 \n\033FunctionUnlock_ID_TYPE_WING\020\346\017\022$\n\037Fu"
    "nctionUnlock_ID_TYPE_TREASURE\020\352\017\022$\n\037Func"
    "tionUnlock_ID_TYPE_ARTIFACT\020\356\017\022#\n\036Functi"
    "onUnlock_ID_TYPE_PARTNER\020\364\017\022)\n$FunctionU"
    "nlock_ID_TYPE_GodEvilNotice\020\217\020\022\'\n\"Functi"
    "onUnlock_ID_TYPE_GodEvilTask\020\220\020\022+\n&Funct"
    "ionUnlock_ID_TYPE_ARENA_MIAOSHANG\020\355\027*\200\001\n"
    "\017EFacadeAttrType\022\025\n\021EAttrType_Advance\020\001\022"
    "\025\n\021EAttrType_Fantasy\020\002\022\026\n\022EAttrType_Frag"
    "ment\020\003\022\023\n\017EAttrType_Skill\020\004\022\022\n\016EAttrType"
    "_SOUL\020\005*0\n\022EDailyTaskPlayType\022\032\n\026EDailyT"
    "askPlayType_DUP\020\001*0\n\022EDailyTaskBackType\022"
    "\032\n\026EDailyTaskBackType_DUP\020\001*\263\002\n\006PGType\022\035"
    "\n\031PGType_world_boss_add_num\020\001\022\033\n\027PGType_"
    "boss_dup_add_num\020\002\022\034\n\030PGType_boss_nest_a"
    "dd_num\020\003\022\035\n\031PGType_boss_ghost_add_num\020\004\022"
    "\034\n\030PGType_level_dup_add_num\020\005\022\034\n\030PGType_"
    "deify_dup_add_num\020\006\022\032\n\026PGType_pet_dup_ad"
    "d_num\020\007\022\034\n\030PGType_bagua_dup_add_num\020\010\022\034\n"
    "\030PGType_dujie_dup_add_num\020\t\022\034\n\030PGType_eq"
    "uip_dup_add_num\020\n*y\n\024ARENA_CHALLENGE_TYP"
    "E\022\035\n\031ARENA_CHALLENGE_TYPE_NONE\020\000\022\"\n\036AREN"
    "A_CHALLENGE_TYPE_CHARACTER\020\001\022\036\n\032ARENA_CH"
    "ALLENGE_TYPE_ROBOT\020\002*q\n\020ArenaRewardState"
    "\022\033\n\027ARENA_REWARD_STATE_NONE\020\000\022\035\n\031ARENA_R"
    "EWARD_STATE_FINISH\020\001\022!\n\035ARENA_REWARD_STA"
    "TE_GET_REWARD\020\002*K\n\016ArenaChallType\022\032\n\026ARE"
    "NA_CHALL_TYPE_CHALL\020\000\022\035\n\031ARENA_CHALL_TYP"
    "E_MIAO_SHA\020\001*\241\001\n\022VIP_PRIVILEGE_TYPE\022\035\n\031V"
    "IP_PRIVILEGE_EQUIP_STOVE\020\014\0222\n.VIP_PRIVIL"
    "EGE_GUILD_PRESTIGE_MISSION_REFRESH_S\020\016\0228"
    "\n4VIP_PRIVILEGE_GUILD_PRESTIGE_MISSION_R"
    "EFRESH_ADD_NUM\020\017*J\n\017EMountRideState\022\033\n\027E"
    "MountRideState_RideOff\020\000\022\032\n\026EMountRideSt"
    "ate_RideOn\020\001*\264\001\n\016EDeityEquipPos\022\030\n\024EDeit"
    "yEquipPos_start\020\024\022\027\n\023EDeityEquipPos_ring"
    "\020\000\022\033\n\027EDeityEquipPos_bracelet\020\001\022\027\n\023EDeit"
    "yEquipPos_jade\020\002\022\033\n\027EDeityEquipPos_neckl"
    "ace\020\003\022\030\n\024EDeityEquipPos_limit\020\004\032\002\020\001*5\n\026E"
    "MoneyRewardTaskReward\022\033\n\027EMoneyRewardTas"
    "k_BOUNTY\020\003*\265\001\n\rETitleSubType\022\030\n\024E_TITLE_"
    "SUB_TYPE_VIP\020\001\022$\n E_TITLE_SUB_TYPE_DRAGO"
    "N_OF_CHAOS\020\002\022\"\n\036E_TITLE_SUB_TYPE_GUILD_R"
    "ANKING\020\003\022!\n\035E_TITLE_SUB_TYPE_KILL_MONSTE"
    "R\020\006\022\035\n\031E_TITLE_SUB_TYPE_USE_ITEM\020\n*\247\001\n\016E"
    "TitleTimeType\022\032\n\026E_TITLE_TIME_TYPE_HOUR\020"
    "\000\022(\n$E_TITLE_TIME_TYPE_COMPETITION_SEASO"
    "N\020\001\022+\n\'E_TITLE_TIME_TYPE_NEXT_ACTIVITY_I"
    "NVALID\020\002\022\"\n\036E_TITLE_TIME_TYPE_LOST_RANKI"
    "NG\020\003", 21004);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ComDefine.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ComDefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ComDefine_2eproto {
  StaticDescriptorInitializer_ComDefine_2eproto() {
    protobuf_AddDesc_ComDefine_2eproto();
  }
} static_descriptor_initializer_ComDefine_2eproto_;
const ::google::protobuf::EnumDescriptor* PingConfig_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingConfig_descriptor_;
}
bool PingConfig_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoleSex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoleSex_descriptor_;
}
bool ERoleSex_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoleProf_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoleProf_descriptor_;
}
bool ERoleProf_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrencyType_descriptor_;
}
bool CurrencyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AreaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreaType_descriptor_;
}
bool AreaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SamplePolyFlags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SamplePolyFlags_descriptor_;
}
bool SamplePolyFlags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 65535:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MapDefine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapDefine_descriptor_;
}
bool MapDefine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1024:
    case 3076:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REGION_DEFINE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REGION_DEFINE_descriptor_;
}
bool REGION_DEFINE_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CharacterDefine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDefine_descriptor_;
}
bool CharacterDefine_IsValid(int value) {
  switch(value) {
    case 3:
    case 4:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemType_descriptor_;
}
bool EItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPackageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPackageType_descriptor_;
}
bool EPackageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuality_descriptor_;
}
bool EQuality_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEquipPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEquipPos_descriptor_;
}
bool EEquipPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EConst_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EConst_descriptor_;
}
bool EConst_IsValid(int value) {
  switch(value) {
    case 20:
    case 21:
    case 22:
    case 23:
    case 34:
    case 61:
    case 75:
    case 76:
    case 113:
    case 142:
    case 143:
    case 146:
    case 149:
    case 181:
    case 182:
    case 183:
    case 190:
    case 192:
    case 193:
    case 195:
    case 200:
    case 201:
    case 202:
    case 203:
    case 206:
    case 214:
    case 215:
    case 216:
    case 217:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 240:
    case 241:
    case 242:
    case 252:
    case 253:
    case 254:
    case 269:
    case 270:
    case 1000:
    case 1001:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERetCode_descriptor_;
}
bool ERetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 200:
    case 201:
    case 202:
    case 203:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 417:
    case 421:
    case 433:
    case 436:
    case 437:
    case 438:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 447:
    case 448:
    case 449:
    case 450:
    case 451:
    case 452:
    case 500:
    case 501:
    case 510:
    case 511:
    case 512:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 558:
    case 559:
    case 601:
    case 602:
    case 603:
    case 620:
    case 621:
    case 622:
    case 623:
    case 624:
    case 625:
    case 626:
    case 627:
    case 628:
    case 629:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 700:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 718:
    case 719:
    case 720:
    case 721:
    case 723:
    case 724:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 825:
    case 826:
    case 827:
    case 828:
    case 829:
    case 830:
    case 831:
    case 832:
    case 833:
    case 834:
    case 835:
    case 836:
    case 837:
    case 838:
    case 839:
    case 840:
    case 900:
    case 901:
    case 902:
    case 903:
    case 904:
    case 905:
    case 906:
    case 907:
    case 908:
    case 909:
    case 910:
    case 920:
    case 921:
    case 922:
    case 923:
    case 924:
    case 925:
    case 926:
    case 927:
    case 928:
    case 929:
    case 930:
    case 931:
    case 932:
    case 933:
    case 934:
    case 935:
    case 936:
    case 937:
    case 938:
    case 939:
    case 940:
    case 941:
    case 942:
    case 943:
    case 944:
    case 945:
    case 946:
    case 947:
    case 948:
    case 949:
    case 950:
    case 951:
    case 952:
    case 953:
    case 954:
    case 955:
    case 956:
    case 957:
    case 958:
    case 959:
    case 960:
    case 961:
    case 962:
    case 963:
    case 964:
    case 965:
    case 966:
    case 967:
    case 968:
    case 969:
    case 970:
    case 971:
    case 972:
    case 973:
    case 974:
    case 975:
    case 976:
    case 977:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1700:
    case 1701:
    case 1702:
    case 1703:
    case 1704:
    case 1705:
    case 1706:
    case 1707:
    case 1708:
    case 1709:
    case 1710:
    case 1711:
    case 1712:
    case 1713:
    case 1714:
    case 1715:
    case 1716:
    case 1717:
    case 1718:
    case 1719:
    case 1720:
    case 1721:
    case 1722:
    case 1800:
    case 1900:
    case 1901:
    case 1902:
    case 1903:
    case 1904:
    case 1905:
    case 1906:
    case 1907:
    case 1908:
    case 1909:
    case 1910:
    case 1911:
    case 1912:
    case 1913:
    case 1914:
    case 1915:
    case 1916:
    case 1917:
    case 1918:
    case 1919:
    case 1920:
    case 1921:
    case 1922:
    case 1923:
    case 1924:
    case 1925:
    case 1926:
    case 1927:
    case 1928:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2050:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2059:
    case 2060:
    case 2100:
    case 2101:
    case 2102:
    case 2103:
    case 2104:
    case 2201:
    case 2202:
    case 2203:
    case 2204:
    case 2205:
    case 2206:
    case 2207:
    case 2208:
    case 2550:
    case 2570:
    case 2571:
    case 2572:
    case 2573:
    case 2574:
    case 2575:
    case 2576:
    case 2577:
    case 2578:
    case 2579:
    case 2580:
    case 2581:
    case 2582:
    case 2583:
    case 2584:
    case 2585:
    case 2586:
    case 2587:
    case 2700:
    case 2701:
    case 2702:
    case 2703:
    case 2704:
    case 2720:
    case 2721:
    case 2722:
    case 2723:
    case 2724:
    case 2725:
    case 2726:
    case 2800:
    case 2801:
    case 2802:
    case 2803:
    case 2804:
    case 2805:
    case 2806:
    case 2807:
    case 2808:
    case 2820:
    case 2900:
    case 2901:
    case 2902:
    case 2903:
    case 2904:
    case 2905:
    case 2906:
    case 2907:
    case 2908:
    case 3800:
    case 3801:
    case 3802:
    case 3803:
    case 3804:
    case 3850:
    case 3851:
    case 3900:
    case 3901:
    case 3902:
    case 3903:
    case 3904:
    case 3905:
    case 3906:
    case 3907:
    case 3908:
    case 3909:
    case 3910:
    case 3911:
    case 3912:
    case 3913:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LOGOUT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGOUT_TYPE_descriptor_;
}
bool LOGOUT_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMailType_descriptor_;
}
bool EMailType_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHAT_CHANNEL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHAT_CHANNEL_descriptor_;
}
bool CHAT_CHANNEL_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FacadeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeType_descriptor_;
}
bool FacadeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFacadeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFacadeType_descriptor_;
}
bool EFacadeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FunctionUnlock_ID_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlock_ID_TYPE_descriptor_;
}
bool FunctionUnlock_ID_TYPE_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 2014:
    case 2022:
    case 2026:
    case 2030:
    case 2036:
    case 2063:
    case 2064:
    case 3053:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFacadeAttrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFacadeAttrType_descriptor_;
}
bool EFacadeAttrType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDailyTaskPlayType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDailyTaskPlayType_descriptor_;
}
bool EDailyTaskPlayType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDailyTaskBackType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDailyTaskBackType_descriptor_;
}
bool EDailyTaskBackType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PGType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PGType_descriptor_;
}
bool PGType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ARENA_CHALLENGE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ARENA_CHALLENGE_TYPE_descriptor_;
}
bool ARENA_CHALLENGE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ArenaRewardState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaRewardState_descriptor_;
}
bool ArenaRewardState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ArenaChallType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaChallType_descriptor_;
}
bool ArenaChallType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VIP_PRIVILEGE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIP_PRIVILEGE_TYPE_descriptor_;
}
bool VIP_PRIVILEGE_TYPE_IsValid(int value) {
  switch(value) {
    case 12:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMountRideState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMountRideState_descriptor_;
}
bool EMountRideState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDeityEquipPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDeityEquipPos_descriptor_;
}
bool EDeityEquipPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMoneyRewardTaskReward_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMoneyRewardTaskReward_descriptor_;
}
bool EMoneyRewardTaskReward_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETitleSubType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETitleSubType_descriptor_;
}
bool ETitleSubType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 6:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETitleTimeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETitleTimeType_descriptor_;
}
bool ETitleTimeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
