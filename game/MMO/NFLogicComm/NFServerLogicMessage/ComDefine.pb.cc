// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ComDefine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ComDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::EnumDescriptor* PingConfig_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoleSex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoleProf_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AreaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SamplePolyFlags_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MapDefine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REGION_DEFINE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CharacterDefine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPackageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEquipPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EConst_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LOGOUT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CHAT_CHANNEL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FacadeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFacadeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FunctionUnlock_ID_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFacadeAttrType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDailyTaskPlayType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDailyTaskBackType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PGType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ComDefine_2eproto() {
  protobuf_AddDesc_ComDefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ComDefine.proto");
  GOOGLE_CHECK(file != NULL);
  PingConfig_descriptor_ = file->enum_type(0);
  ERoleSex_descriptor_ = file->enum_type(1);
  ERoleProf_descriptor_ = file->enum_type(2);
  CurrencyType_descriptor_ = file->enum_type(3);
  AreaType_descriptor_ = file->enum_type(4);
  SamplePolyFlags_descriptor_ = file->enum_type(5);
  MapDefine_descriptor_ = file->enum_type(6);
  REGION_DEFINE_descriptor_ = file->enum_type(7);
  CharacterDefine_descriptor_ = file->enum_type(8);
  EItemType_descriptor_ = file->enum_type(9);
  EPackageType_descriptor_ = file->enum_type(10);
  EQuality_descriptor_ = file->enum_type(11);
  EEquipPos_descriptor_ = file->enum_type(12);
  EConst_descriptor_ = file->enum_type(13);
  ERetCode_descriptor_ = file->enum_type(14);
  LOGOUT_TYPE_descriptor_ = file->enum_type(15);
  EMailType_descriptor_ = file->enum_type(16);
  CHAT_CHANNEL_descriptor_ = file->enum_type(17);
  FacadeType_descriptor_ = file->enum_type(18);
  EFacadeType_descriptor_ = file->enum_type(19);
  FunctionUnlock_ID_TYPE_descriptor_ = file->enum_type(20);
  EFacadeAttrType_descriptor_ = file->enum_type(21);
  EDailyTaskPlayType_descriptor_ = file->enum_type(22);
  EDailyTaskBackType_descriptor_ = file->enum_type(23);
  PGType_descriptor_ = file->enum_type(24);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ComDefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_ComDefine_2eproto() {
}

void protobuf_AddDesc_ComDefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ComDefine.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\032\022common_logic.proto*D\n\nPingCo"
    "nfig\022\030\n\024CLIENT_PING_INTERVAL\020\t\022\030\n\024SERVER"
    "_PING_INTERVAL\020\t\032\002\020\001*3\n\010ERoleSex\022\022\n\016EROL"
    "E_SEX_MALE\020\001\022\023\n\017EROLE_SEX_FEMAL\020\002*\357\001\n\tER"
    "oleProf\022\032\n\026EROLE_PROF_MALE_MASTER\020\001\022\034\n\030E"
    "ROLE_PROF_FEMALE_MASTER\020\002\022\032\n\026EROLE_PROF_"
    "MALE_SICKLE\020\003\022\034\n\030EROLE_PROF_FEMALE_SICKL"
    "E\020\004\022\031\n\025EROLE_PROF_MALE_SWORD\020\005\022\033\n\027EROLE_"
    "PROF_FEMALE_SWORD\020\006\022\031\n\025EROLE_PROF_MALE_K"
    "NIFE\020\007\022\033\n\027EROLE_PROF_FEMALE_KNIFE\020\010*\230\001\n\014"
    "CurrencyType\022\027\n\023VALUE_CURRENCY_NULL\020\000\022\031\n"
    "\025VALUE_CURRENCY_SILVER\020\001\022\027\n\023VALUE_CURREN"
    "CY_GOLD\020\002\022\034\n\030VALUE_CURRENCY_BIND_GOLD\020\003\022"
    "\035\n\031VALUE_CURRENCY_REPUTATION\020\005*M\n\010AreaTy"
    "pe\022\026\n\022en_AreaType_Common\020\000\022\024\n\020en_AreaTyp"
    "e_Safe\020\001\022\023\n\017en_AreaType_Dup\020\002*\301\001\n\017Sample"
    "PolyFlags\022\031\n\025SAMPLE_POLYFLAGS_WALK\020\001\022\031\n\025"
    "SAMPLE_POLYFLAGS_SWIM\020\002\022\"\n\036SAMPLE_POLYFL"
    "AGS_FORBIT_ACROSS\020\004\022\031\n\025SAMPLE_POLYFLAGS_"
    "DOOR\020\010\022\035\n\031SAMPLE_POLYFLAGS_DISABLED\020\020\022\032\n"
    "\024SAMPLE_POLYFLAGS_ALL\020\377\377\003*Z\n\tMapDefine\022\022"
    "\n\rMAX_NAV_POLYS\020\204\030\022\030\n\023MAX_NAV_POINT_VALU"
    "E\020\200\010\022\033\n\027INVALID_NAVMESH_POLYREF\020\000\032\002\020\001*H\n"
    "\rREGION_DEFINE\022\030\n\024DEFAULT_REGION_WIDTH\020\022"
    "\022\031\n\025DEFAULT_REGION_HEIGHT\020\022\032\002\020\001*s\n\017Chara"
    "cterDefine\022\036\n\032MAX_CREATE_CHARACTER_COUNT"
    "\020\003\022\035\n\031CHARACTER_NAME_MIN_LENGTH\020\004\022\035\n\031CHA"
    "RACTER_NAME_MAX_LENGTH\020 \032\002\020\001*\262\002\n\tEItemTy"
    "pe\022\022\n\016EItemType_None\020\000\022\023\n\017EItemType_Equi"
    "p\020\001\022\026\n\022EItemType_Material\020\002\022\023\n\017EItemType"
    "_Other\020\003\022\022\n\016EItemType_Task\020\004\022\022\n\016EItemTyp"
    "e_Star\020\005\022\022\n\016EItemType_Soul\020\006\022\027\n\023EItemTyp"
    "e_FaiMateri\020\007\022\030\n\024EItemType_FaiCrystal\020\010\022"
    "\024\n\020EItemType_Symbol\020\t\022\032\n\026EItemType_BossI"
    "dentify\020\n\022\031\n\025EItemType_FaiIdentify\020\013\022\023\n\017"
    "EItemType_Limit\020\014*p\n\014EPackageType\022\025\n\021EPa"
    "ckageType_None\020\000\022\027\n\023EPackageType_Common\020"
    "\001\022\030\n\024EPackageType_Storage\020\002\022\026\n\022EPackageT"
    "ype_Limit\020\003*\253\001\n\010EQuality\022\021\n\rEQuality_gre"
    "y\020\001\022\022\n\016EQuality_white\020\002\022\022\n\016EQuality_gree"
    "n\020\003\022\021\n\rEQuality_blue\020\004\022\023\n\017EQuality_purpl"
    "e\020\005\022\023\n\017EQuality_orange\020\006\022\020\n\014EQuality_red"
    "\020\007\022\021\n\rEQuality_gold\020\010\032\002\020\001*\347\002\n\tEEquipPos\022"
    "\022\n\016EEquipPos_none\020\000\022\026\n\022EEquipPos_m_weapo"
    "n\020\001\022\026\n\022EEquipPos_s_weapon\020\002\022\021\n\rEEquipPos"
    "_hat\020\003\022\025\n\021EEquipPos_clothes\020\004\022\022\n\016EEquipP"
    "os_hand\020\005\022\022\n\016EEquipPos_belt\020\006\022\022\n\016EEquipP"
    "os_shoe\020\007\022\026\n\022EEquipPos_necklace\020\010\022\026\n\022EEq"
    "uipPos_bracelet\020\t\022\022\n\016EEquipPos_ring\020\n\022\024\n"
    "\020EEquipPos_guard1\020\013\022\024\n\020EEquipPos_guard2\020"
    "\014\022\022\n\016EEquipPos_jade\020\r\022\023\n\017EEquipPos_marry"
    "\020\016\022\023\n\017EEquipPos_limit\020\017\032\002\020\001*\204\006\n\006EConst\022\035"
    "\n\031EConst_RelationRecentSize\020\024\022\035\n\031EConst_"
    "RelationFriendSize\020\025\022\033\n\027EConst_RelationH"
    "ateSize\020\026\022\034\n\030EConst_RelationBlackSize\020\027\022"
    "\033\n\027EConst_ServerUpdateTime\020\"\022\030\n\024EConst_C"
    "hgNameItemId\020=\022\034\n\030EConst_WorldChatLevLim"
    "it\020K\022\034\n\030EConst_CrossChatLevLimit\020L\022\030\n\024EC"
    "onst_CrossChatCost\020q\022\037\n\032EConst_WorldChan"
    "nelNeedPay\020\216\001\022\036\n\031EConst_CreateUnionNeedP"
    "ay\020\217\001\022\035\n\030EConst_SceneChatLevLimit\020\222\001\022\"\n\035"
    "EConst_TeamEnList_CostBindDia\020\225\001\022\032\n\025ECon"
    "st_RoleSkillPubCd\020\265\001\022\031\n\024EConst_GodSkillP"
    "ubCd\020\266\001\022\031\n\024EConst_PetSkillPubCd\020\267\001\022\033\n\026EC"
    "onst_SkillGroupChgCd\020\276\001\022\026\n\021EConst_Corpse"
    "Time\020\300\001\022\032\n\025EConst_BossCorpseTime\020\301\001\022\032\n\025E"
    "Const_DropProtectSec\020\303\001\022\031\n\024EConstTiredRe"
    "liveNum\020\310\001\022\030\n\023EConstTiredContiSec\020\311\001\022\031\n\024"
    "EConstTiredReliveSec\020\312\001\022#\n\036EConst_Immedi"
    "ateReliveCostItem\020\313\001\022\037\n\032EConst_Immediate"
    "ReliveCost\020\316\001\022\033\n\026EConst_AutoPickDropSec\020"
    "\347\001*\235F\n\010ERetCode\022\017\n\013RET_SUCCESS\020\000\022\014\n\010RET_"
    "FAIL\020\001\022\022\n\016RET_LEVEL_LACK\020\002\022\022\n\016RET_MONEY_"
    "LACK\020\003\022\021\n\rRET_GOLD_LACK\020\004\022\026\n\022RET_BIND_GO"
    "LD_LACK\020\005\022\024\n\020RET_DIAMOND_LACK\020\006\022\031\n\025RET_B"
    "IND_DIAMOND_LACK\020\007\022\026\n\022RET_VIP_LEVEL_LACK"
    "\020\010\022\022\n\016RET_PROF_ERROR\020\n\022\031\n\025RET_PLAYER_NOT"
    "_ONLINE\020\013\022\022\n\016RET_RACE_ERROR\020\014\022\021\n\rRET_SEX"
    "_ERROR\020\r\022\022\n\016RET_NOT_ONLINE\020\016\022\022\n\016RET_DATA"
    "_ERROR\020\017\022\032\n\026RET_NOT_HAVE_CHARACTER\020\020\022\020\n\014"
    "RET_BAG_FULL\020\021\022\024\n\020RET_PARMAR_ERROR\020\022\022\024\n\020"
    "RET_CONFIG_ERROR\020\023\022\030\n\024RET_OTHER_LEVEL_LA"
    "CK\020\024\022\021\n\rRET_ID_UNKNOW\020\025\022\030\n\024RET_REPEATED_"
    "OPERATE\020\026\022\023\n\017RET_UNAVAILABLE\020\027\022\022\n\016RET_FI"
    "GHT_LACK\020\030\022\025\n\021RET_APTITUDE_LACK\020\031\022\024\n\020RET"
    "_OVER_MAX_NUM\020\032\022\023\n\017RET_PRICE_ERROR\020\033\022\030\n\024"
    "RET_OTHER_NOT_ONLINE\020\034\022\031\n\025RET_STAR_ESSEN"
    "CE_LACK\020\035\022\030\n\024RET_STAR_LAYER_LIMIT\020\036\022\030\n\024R"
    "ET_OCCUPATION_ERROR\020\037\022\031\n\025RET_SMALL_SPIRI"
    "T_LACK\020 \022\026\n\022RET_SMALL_BIG_LACK\020!\022\030\n\024RET_"
    "ITEM_PARAM_ERROR\020\"\022\031\n\025RET_CAN_NOT_RECONN"
    "ECT\020#\022\033\n\027RET_DISALLOW_ENTER_GAME\020$\022\025\n\021RE"
    "T_MATERIAL_LACK\020%\022\037\n\033RET_LOGIN_BAD_USER_"
    "NAME_LEN\020d\022!\n\035RET_LOGIN_CHARACTER_NOT_EX"
    "ITS\020e\022!\n\035RET_LOGIN_ACCOUNT_OTHER_LOGIN\020f"
    "\022!\n\035RET_LOGIN_CHARACTER_NUM_LIMIT\020g\022#\n\037R"
    "ET_LOGIN_CHARACTER_NAME_EXISTS\020h\022!\n\035RET_"
    "LOGIN_CHARACTER_SEX_ERROR\020i\022\"\n\036RET_LOGIN"
    "_CHARACTER_PROF_ERROR\020j\022&\n\"RET_LOGIN_CHA"
    "RACTER_NAME_LEN_ERROR\020k\022%\n!RET_LOGIN_CHA"
    "RACTER_CREATE_FAILED\020l\022#\n\037RET_LOGIN_CHAR"
    "ACTER_NOT_ACCOUNT\020m\022\037\n\033RET_LOGIN_CHARACT"
    "ER_ILLEGAL\020n\022\"\n\036RET_LOGIN_CHARACTER_VESI"
    "ON_ERR\020o\022(\n$RET_LOGIN_ACCOUNT_SYSTEM_MAI"
    "NTENANCE\020p\022\035\n\031RET_LOGIN_ILLEGAL_REQUEST\020"
    "q\022\032\n\026RET_LOGIN_CHANNEL_FAIL\020r\022\036\n\032RET_LOG"
    "IN_ORBIDDEN_ACCOUNT\020s\022\037\n\033RET_LOGIN_QUEUE"
    "_ENOUGHT_NUM\020t\022\035\n\031RET_LOGIN_HAS_DELETE_C"
    "HAR\020u\022\026\n\022RET_LOGIN_TIME_OUT\020v\022\023\n\017RET_TOK"
    "EN_ERROR\020w\022\024\n\020RET_ACCOUNT_FULL\020x\022\025\n\021RET_"
    "NOT_OPEN_TIME\020y\022 \n\034RET_CAN_NOT_RETURN_RO"
    "LE_LIST\020z\022\031\n\025RET_LOGIN_TOKEN_ERROR\020{\022\034\n\027"
    "RET_SCENE_DST_NOT_EXIST\020\310\001\022\036\n\031RET_SCENE_"
    "INVALID_DST_POS\020\311\001\022\033\n\026RET_SCENE_CAN_NOT_"
    "TRAN\020\312\001\022 \n\033RET_SCENE_TRANS_PARAM_ERROR\020\313"
    "\001\022\037\n\032RET_MAIL_SEND_TARGET_ERROR\020\254\002\022\030\n\023RE"
    "T_MAIL_DATA_ERROR\020\255\002\022\027\n\022RET_MAIL_NOT_EXI"
    "ST\020\256\002\022!\n\034RET_MAIL_NOT_HAVE_ATTACHMENT\020\257\002"
    "\022\035\n\030RET_MAIL_GOODS_NUM_LIMIT\020\260\002\022\035\n\030RET_M"
    "AIL_TOPIC_LEN_LIMIT\020\261\002\022\033\n\026RET_MAIL_ALREA"
    "DY_FETCH\020\262\002\022!\n\034RET_MAIL_ATTATCH_COUNT_LI"
    "MIT\020\263\002\022\034\n\027RET_MAIL_ALREDAY_EXPIRE\020\264\002\022 \n\033"
    "RET_MAIL_HAS_NOT_BEGIN_TIME\020\265\002\022\037\n\032RET_PA"
    "CKAGE_ITEM_NOT_EXITS\020\221\003\022\"\n\035RET_PACKAGE_I"
    "TEM_CAN_NOT_SELL\020\222\003\022\036\n\031RET_PACKAGE_ITEM_"
    "NUM_LACK\020\223\003\022!\n\034RET_PACKAGE_ITEM_CAN_NOT_"
    "USE\020\224\003\022\'\n\"RET_PACKAGE_ITEM_CAN_NOT_BATCH"
    "_USE\020\225\003\022\035\n\030RET_PACKAGE_EXPAND_LIMIT\020\226\003\022$"
    "\n\037RET_PACKAGE_ITEM_FUNC_PARAM_ERR\020\227\003\022\035\n\030"
    "RET_PACKAGE_SORT_IN_COOL\020\230\003\022(\n#RET_PACKA"
    "GE_COMMON_SPACE_NOT_ENOUGH\020\231\003\022)\n$RET_PAC"
    "KAGE_STORAGE_SPACE_NOT_ENOUGH\020\232\003\022\030\n\023RET_"
    "PACKAGE_HP_FULL\020\241\003\022\030\n\023RET_PACKAGE_WAITIN"
    "G\020\245\003\022$\n\037RET_PACKAGE_USE_HANGUP_CARD_MAX\020"
    "\261\003\022&\n!RET_PACKAGE_LACK_CHANGE_NAME_ITEM\020"
    "\264\003\022$\n\037RET_PACKAGE_USE_ITEM_NOT_REMOVE\020\265\003"
    "\022\037\n\032RET_PACKAGE_FUSHI_CARD_MAX\020\266\003\022&\n!RET"
    "_PACKAGE_TASK_SPACE_NOT_ENOUGH\020\270\003\022&\n!RET"
    "_PACKAGE_STAR_SPACE_NOT_ENOUGH\020\271\003\022&\n!RET"
    "_PACKAGE_SOUL_SPACE_NOT_ENOUGH\020\272\003\022+\n&RET"
    "_PACKAGE_FAIMATERI_SPACE_NOT_ENOUGH\020\273\003\022,"
    "\n\'RET_PACKAGE_FAICRYSTAL_SPACE_NOT_ENOUG"
    "H\020\274\003\022(\n#RET_PACKAGE_SYMBOL_SPACE_NOT_ENO"
    "UGH\020\275\003\022.\n)RET_PACKAGE_BOSSIDENTIFY_SPACE"
    "_NOT_ENOUGH\020\276\003\022.\n)RET_PACKAGE_FAILIDENTI"
    "FY_SPACE_NOT_ENOUGH\020\277\003\022&\n!RET_PACKAGE_US"
    "E_NOT_HAVE_PK_VALUE\020\300\003\022\037\n\032RET_PACKAGE_IT"
    "EM_USE_LIMIT\020\301\003\022(\n#RET_PACKAGE_ITEM_LOGI"
    "N_GIFT_FETCHED\020\302\003\022#\n\036RET_PACKAGE_USE_ITE"
    "M_MAP_LIMIT\020\303\003\022#\n\036RET_GROW_PART_ENTRY_LE"
    "VEL_FULL\020\364\003\022\035\n\030RET_GROW_PART_NOT_ACTIVE\020"
    "\365\003\022 \n\033RET_PLAYER_SEAT_STATE_ERROR\020\376\003\022!\n\034"
    "RET_PLAYER_SEAT_MAP_NOT_SEAT\020\377\003\022\034\n\027RET_P"
    "LAYER_SEAT_NO_TIME\020\200\004\022\023\n\016RET_GM_NOT_KEY\020"
    "\331\004\022\035\n\030RET_GM_PRAMA_COUNT_ERROR\020\332\004\022\024\n\017RET"
    "_GM_NOT_FIND\020\333\004\022\030\n\023RET_EQUIP_NOT_EXIST\020\354"
    "\004\022!\n\034RET_EQUIP_POS_NOT_EXIT_EQUIP\020\355\004\022\034\n\027"
    "RET_MISSION_HAVE_ACCEPT\020\274\005\022\037\n\032RET_MISSIO"
    "N_CAN_NOT_ACCEPT\020\275\005\022\034\n\027RET_MISSION_LEVEL"
    "_ERROR\020\276\005\022\032\n\025RET_MISSION_NOT_EXIST\020\277\005\022 \n"
    "\033RET_MISSION_STATE_NOT_MATCH\020\300\005\022!\n\034RET_M"
    "ISSION_PROFESSION_LIMIT\020\301\005\022\034\n\027RET_MISSIO"
    "N_TIMES_ERROR\020\302\005\022)\n$RET_MISSION_HAVE_ACC"
    "EPT_NUMBER_LIMIT\020\303\005\022\034\n\027RET_MISSION_GROUP"
    "_LIMIT\020\304\005\022\034\n\027RET_MISSION_NOT_ABANDON\020\305\005\022"
    "(\n#RET_MISSION_PERIOD_FINISH_NUM_LIMIT\020\306"
    "\005\022,\n\'RET_MISSION_PERIOD_ONCE_EXIST_NUM_L"
    "IMIT\020\307\005\022!\n\034RET_MISSION_HAVE_TYPE_ACCEPT\020"
    "\310\005\022 \n\033RET_MISSION_CAN_NOT_ONE_KEY\020\311\005\022\"\n\035"
    "RET_MISSION_ONE_KEY_NUM_LIMIT\020\312\005\022\033\n\026RET_"
    "MISSION_NOT_FINISH\020\313\005\022!\n\034RET_MISSION_NOT"
    "_ACCEPT_UNION\020\314\005\022$\n\037RET_MISSION_CAN_NOT_"
    "ONCE_FINISH\020\315\005\022\037\n\032RET_MISSION_ALREADY_SU"
    "BMIT\020\316\005\022\034\n\027RET_RELATION_HAVE_APPLY\020\240\006\022\033\n"
    "\026RET_RELATION_NOT_AGREE\020\241\006\022$\n\037RET_RELATI"
    "ON_CAN_NOT_APPLY_SELF\020\242\006\022#\n\036RET_RELATION"
    "_APPLY_GROUP_ERROR\020\243\006\022\036\n\031RET_RELATION_NO"
    "T_ADD_SELF\020\244\006\022\036\n\031RET_RELATION_NOT_IN_APP"
    "LY\020\245\006\022%\n RET_RELATION_SIZE_LIMIT_NO_APPL"
    "Y\020\246\006\022+\n&RET_RELATION_SIZE_LIMIT_NO_APPLY"
    "_OTHER\020\247\006\022\036\n\031RET_RELATION_IS_MY_FRIEND\020\250"
    "\006\022#\n\036RET_RELATION_SIZE_LIMIT_NO_ADD\020\251\006\022)"
    "\n$RET_RELATION_SIZE_LIMIT_NO_ADD_OTHER\020\252"
    "\006\022\"\n\035RET_RELATION_ADD_BLACK_MYSELF\020\253\006\022\"\n"
    "\035RET_RELATION_BALCK_SIZE_LIMIT\020\254\006\022\037\n\032RET"
    "_RELATION_IN_YOUR_BALCK\020\255\006\022 \n\033RET_RELATI"
    "ON_IN_OTHER_BALCK\020\256\006\022.\n)RET_RELATION_IN_"
    "OTHER_BALCK_CAN_NOT_APPLY\020\257\006\022-\n(RET_RELA"
    "TION_IN_YOUR_BALCK_CAN_NOT_APPLY\020\260\006\022\034\n\027R"
    "ET_RELATION_NOT_SEARCH\020\261\006\022\035\n\030RET_RELATIO"
    "N_NOT_FRIENDS\020\262\006\022*\n%RET_RELATION_CANOT_A"
    "DDFRIEND_TO_BLACK\020\263\006\022+\n&RET_RELATION_GIV"
    "E_PHYSICAL_TIMES_LIMIT\020\264\006\022)\n$RET_RELATIO"
    "N_GET_PHYSICAL_TIME_LIMTI\020\265\006\022\"\n\035RET_RELA"
    "TION_NOT_GET_PHYSICAL\020\266\006\022#\n\036RET_RELATION"
    "_HAVE_GET_PHYSICAL\020\267\006\022)\n$RET_RELATION_GE"
    "T_PHYSICAL_GIFT_LIMIT\020\270\006\022\034\n\027RET_RELATION"
    "_IN_CD_TIME\020\271\006\022\"\n\035RET_RELATION_TRACK_HAT"
    "E_ERROR\020\272\006\022\036\n\031RET_RELATION_GIFT_TO_MAIL\020"
    "\273\006\022\036\n\031RET_RELATION_HAVE_NO_DATA\020\274\006\022\036\n\031RE"
    "T_RELATION_MARRY_REFUSE\020\275\006\022\033\n\026RET_RELATI"
    "ON_HAS_MARRY\020\276\006\022\"\n\035RET_RELATION_TARGET_H"
    "AS_MARRY\020\277\006\022\033\n\026RET_RELATION_NOT_MARRY\020\300\006"
    "\022&\n!RET_RELATION_CLOSENESS_NOT_ENOUGH\020\301\006"
    "\022\'\n\"RET_RELATION_CAN_NOT_DELETE_SPOUSE\020\302"
    "\006\022$\n\037RET_RELATION_HAVE_PROPOSE_MARRY\020\303\006\022"
    "\036\n\031RET_RELATION_EXIST_SHIELD\020\304\006\022\035\n\030RET_R"
    "ELATION_WAIT_DBDATA\020\305\006\022!\n\034RET_RELATION_G"
    "IFT_NOT_FRIEND\020\306\006\022\034\n\027RET_RELATION_GIFT_E"
    "RROR\020\307\006\022\037\n\032RET_RELATION_NOT_HAVE_DATE\020\310\006"
    "\022\030\n\023RET_CHAT_NOT_MYSELF\020\204\007\022\037\n\032RET_CHAT_T"
    "ARGET_NOT_ONLINE\020\205\007\022\035\n\030RET_CHAT_TARGET_I"
    "N_BLACK\020\206\007\022\"\n\035RET_CHAT_QUREY_CHAR_NOT_EX"
    "ITS\020\207\007\022\036\n\031RET_CHAT_FREE_TIMES_LIMIT\020\210\007\022\036"
    "\n\031RET_CHAT_FREE_GOODS_LIMIT\020\211\007\022\033\n\026RET_CH"
    "AT_CD_TIME_LIMIT\020\212\007\022\034\n\027RET_CHAT_BIG_HORN"
    "_LIMIT\020\213\007\022\033\n\026RET_CHAT_CD_NoSpeakIng\020\214\007\022\033"
    "\n\026RET_CHAT_PAY_RMB_LIMIT\020\215\007\022\030\n\023RET_CHAT_"
    "COND_LIMIT\020\216\007\022\027\n\023RET_FACADE_UNACTIVE\020d\022\031"
    "\n\024RET_FACADE_MAX_LEVEL\020\365!\022\032\n\025RET_FACADE_"
    "HAVE_DRESS\020\366!\022\036\n\031RET_FACADE_HAVE_NOT_DRE"
    "SS\020\367!\022\"\n\035RET_FACADE_FRAGMENT_USE_LIMIT\020\370"
    "!\022\031\n\024RET_FACADE_NOT_BREAK\020\363!\022\035\n\030RET_FACA"
    "DE_ALREADY_BREAK\020\362!\022 \n\033RET_DUPLICATE_CAN"
    "_NOT_ENTER\020\230\007\022\034\n\027RET_DUPLICATE_ALREAY_IN"
    "\020\231\007\022!\n\034RET_DUPLICATE_RELIVE_NO_DEAD\020\232\007\022\037"
    "\n\032RET_DUPLICATE_PRE_NOT_PASS\020\233\007\022\"\n\035RET_D"
    "UPLICATE_MAX_LEVEL_LIMIT\020\234\007\022 \n\033RET_DUPLI"
    "CATE_CAN_NOT_LEAVE\020\235\007\022!\n\034RET_DUPLICATE_L"
    "ACK_ENTER_NUM\020\236\007\022\036\n\031RET_DUPLICATE_NOT_IN"
    "_TEAM\020\237\007\022!\n\034RET_DUPLICATE_NOT_TEM_LEADER"
    "\020\240\007\022#\n\036RET_DUPLICATE_PLAYER_NUM_LIMIT\020\241\007"
    "\022#\n\036RET_DUPLICATE_RELIVE_NUM_LIMIT\020\242\007\022 \n"
    "\033RET_DUPLICATE_BUY_NUM_LIMIT\020\243\007\022\037\n\032RET_D"
    "UPLICATE_ALREADY_PASS\020\244\007\022#\n\036RET_DUPLICAT"
    "E_NOT_IN_DUPLICATE\020\245\007\022\"\n\035RET_DUPLICATE_T"
    "EAM_NOT_INVITE\020\246\007\022!\n\034RET_DUPLICATE_TEAM_"
    "NOT_REPLY\020\247\007\022%\n RET_DUPLICATE_TEAM_ALREA"
    "DY_REPLY\020\250\007\022&\n!RET_DUPLICATE_TEAM_MEM_AL"
    "READY_IN\020\251\007\022&\n!RET_DUPLICATE_TEAM_MEM_NO"
    "T_ONLINE\020\252\007\022%\n RET_DUPLICATE_TEAM_MEM_NO"
    "T_AGREE\020\253\007\022\035\n\030RET_DUPLICATE_NOT_EXISTS\020\254"
    "\007\022!\n\034RET_DUPLICATE_CAN_NOT_RELIVE\020\255\007\022\036\n\031"
    "RET_DUPLICATE_ALREDY_DEAD\020\256\007\022\'\n\"RET_DUPL"
    "ICATE_LACK_GROUP_ENTER_NUM\020\257\007\022\037\n\032RET_DUP"
    "LICATE_CAN_NOT_SEEP\020\260\007\022\035\n\030RET_DUPLICATE_"
    "STAR_LIMIT\020\261\007\022!\n\034RET_DULICATE_SWEEP_ITEM"
    "_LACK\020\262\007\022$\n\037RET_DUPLICATE_TEAMDUP_NOT_AL"
    "LOW\020\263\007\022\"\n\035RET_DUPLICATE_CAN_NOT_INSPIRE\020"
    "\264\007\022$\n\037RET_DUPLICATE_INSPIRE_NUM_LIMIT\020\265\007"
    "\022(\n#RET_DUPLICATE_SWEEP_NOT_SET_INSPIRE\020"
    "\266\007\022 \n\033RET_DUPLICATE_TEAM_MEM_DEAD\020\267\007\022%\n "
    "RET_DUPLICATE_TEAM_DIE_NOT_REPLY\020\270\007\022\'\n\"R"
    "ET_DUPLICATE_TEAM_MEM_SPECIAL_MAP\020\271\007\022\036\n\031"
    "RET_DUPLICATE_ALREDAY_END\020\272\007\022\033\n\026RET_DUPL"
    "ICATE_NOT_OPEN\020\273\007\022\037\n\032RET_DUPLICATE_ALREA"
    "DY_OPEN\020\274\007\022\036\n\031RET_DUPLICATE_HAS_NO_OPEN\020"
    "\275\007\022\034\n\027RET_DUPLICATE_IN_CREATE\020\276\007\022 \n\033RET_"
    "DUPLICATE_CAN_NOT_RESET\020\277\007\022$\n\037RET_DUPLIC"
    "ATE_LAYER_ALL_FETCHED\020\300\007\022\'\n\"RET_DUPLICAT"
    "E_PALACE_LAYER_FETCHED\020\301\007\022#\n\036RET_DUPLICA"
    "TE_NO_PALACE_REWARD\020\302\007\022$\n\037RET_DUPLICATE_"
    "TEAM_MEM_NO_UNION\020\303\007\022*\n%RET_DUPLICATE_TE"
    "AM_MEM_NOT_SAME_UNION\020\304\007\022&\n!RET_DUPLICAT"
    "E_TEAM_NOT_SAME_UNION\020\305\007\022)\n$RET_DUPLICAT"
    "E_MAX_PALACE_LAYER_LIMIT\020\306\007\022&\n!RET_DUPLI"
    "CATE_TEAM_MEM_NOT_IN_DUP\020\307\007\022\'\n\"RET_DUPLI"
    "CATE_PALACE_LAYER_UNUSUAL\020\310\007\022\024\n\017RET_SKIL"
    "L_IN_CD\020\350\007\022\032\n\025RET_SKILL_CAN_NOT_USE\020\351\007\022\037"
    "\n\032RET_SKILL_TARGET_NOT_EXIST\020\352\007\022\032\n\025RET_S"
    "KILL_IN_GROUP_CD\020\353\007\022\033\n\026RET_SKILL_IN_FACA"
    "DE_CD\020\354\007\022\030\n\023RET_SKILL_NOT_EXIST\020\355\007\022\026\n\021RE"
    "T_SKILL_LEV_MAX\020\356\007\022\036\n\031RET_SKILL_ALREADY_"
    "WAKE_UP\020\357\007\022\032\n\025RET_SKILL_INVALID_POS\020\360\007\022\036"
    "\n\031RET_SKILL_CAN_NOT_CHG_POS\020\361\007\022\035\n\030RET_SK"
    "ILL_ALREADY_IN_POS\020\362\007\022\033\n\026RET_PLAYER_TIRE"
    "D_STATE\020\315\010\022\030\n\023RET_PLAYER_NOT_DEAD\020\316\010\022\036\n\031"
    "RET_PLAYER_CAN_NOT_RELIVE\020\317\010\022\036\n\031RET_PLAY"
    "ER_MAP_NOT_RELIVE\020\320\010\022 \n\033RET_PLAYER_RELIV"
    "E_NUM_LIMIT\020\321\010\022\032\n\025RET_TEAM_ALREADY_JOIN\020"
    "\244\r\022 \n\033RET_TEAM_OTHER_ALREADY_JOIN\020\245\r\022\037\n\032"
    "RET_TEAM_OBJECT_NOT_CHANGE\020\246\r\022\031\n\024RET_TEA"
    "M_REPEAT_JOIN\020\247\r\022\026\n\021RET_TEAM_NO_EXIST\020\250\r"
    "\022\022\n\rRET_TEAM_FULL\020\251\r\022\034\n\027RET_TEAM_HAVE_AP"
    "PLICANT\020\252\r\022\037\n\032RET_TEAM_INVALID_APPLICANT"
    "\020\253\r\022\030\n\023RET_TEAM_NOT_MEMBER\020\254\r\022\036\n\031RET_TEA"
    "M_SETTING_LV_ERROR\020\255\r\022\033\n\026RET_TEAM_NO_AUT"
    "O_MATCH\020\256\r\022\035\n\030RET_TEAM_HAVE_AUTO_MATCH\020\257"
    "\r\022\030\n\023RET_TEAM_NOT_LEADER\020\260\r\022 \n\033RET_TEAM_"
    "DUP_NOT_AUTO_MATCH\020\261\r\022!\n\034RET_TEAM_MAP_CA"
    "N_NOT_OPERATE\020\262\r\022\'\n\"RET_TEAM_MAP_OTHER_C"
    "AN_NOT_OPERATE\020\263\r\022!\n\034RET_TEAM_MAP_SELF_I"
    "N_SPECIAL\020\264\r\022\"\n\035RET_TEAM_MAP_OTHER_IN_SP"
    "ECIAL\020\265\r\022!\n\034RET_TEAM_MAP_TARGET_IN_MATCH"
    "\020\266\r\022$\n\037RET_TEAM_OBJECT_CAN_NOT_OPERATE\020\267"
    "\r\022\033\n\026RET_USE_ITEM_DAY_LIMIT\020\210\016\032\002\020\001*\224\002\n\013L"
    "OGOUT_TYPE\022\017\n\013LOGOUT_NONE\020\000\022\021\n\rLOGOUT_LO"
    "GOUT\020\001\022\023\n\017LOGOUT_KICK_OUT\020\002\022\022\n\016LOGOUT_RE"
    "PLACE\020\003\022\027\n\023LOGOUT_DIS_TIME_OUT\020\004\022\027\n\023LOGO"
    "UT_CHANGE_LOGIC\020\005\022\033\n\027LOGOUT_RETURN_ROLE_"
    "LIST\020\006\022\031\n\025LOGOUT_LOGIN_TIME_OUT\020\007\022\023\n\017LOG"
    "OUT_WEB_KICK\020\010\022\025\n\021LOGOUT_CHEAR_KICK\020\t\022\020\n"
    "\014LOGOUT_CRASH\020\n\022\020\n\014LOGOUT_OTHER\020\013*7\n\tEMa"
    "ilType\022\024\n\020MAIL_TYPE_PLAYER\020\002\022\024\n\020MAIL_TYP"
    "E_SYSTEM\020\003*\206\003\n\014CHAT_CHANNEL\022\025\n\021CHAT_CHAN"
    "NEL_NONE\020\000\022\026\n\022CHAT_CHANNEL_WORLD\020\001\022\026\n\022CH"
    "AT_CHANNEL_GUILD\020\002\022\027\n\023CHAT_CHANNEL_ENLIS"
    "T\020\003\022\025\n\021CHAT_CHANNEL_TEAM\020\004\022\026\n\022CHAT_CHANN"
    "EL_SCENE\020\005\022\026\n\022CHAT_CHANNEL_CROSS\020\006\022\027\n\023CH"
    "AT_CHANNEL_SYSTEM\020\007\022\030\n\024CHAT_CHANNEL_PRIV"
    "ATE\020\010\022\026\n\022CHAT_CHANNEL_RUMOR\020\t\022\025\n\021CHAT_CH"
    "ANNEL_HORN\020\n\022\036\n\032CHAT_CHANNEL_BACKEND_RUM"
    "OR\020\013\022\031\n\025CHAT_CHANNEL_ACTIVITY\020\014\022\032\n\026CHAT_"
    "CHANNEL_POKERROOM\020\r\022\026\n\022CHAT_CHANNEL_LIMI"
    "T\020\016*\204\001\n\nFacadeType\022\024\n\020FACADE_WING_TYPE\020\001"
    "\022\030\n\024FACADE_TREASURE_TYPE\020\002\022\030\n\024FACADE_ART"
    "IFACT_TYPE\020\003\022\027\n\023FACADE_PARTNER_TYPE\020\004\022\023\n"
    "\017FACADE_TYPE_MAX\020\005*\?\n\013EFacadeType\022\027\n\023EFa"
    "cadeType_Advance\020\001\022\027\n\023EFacadeType_Fantas"
    "y\020\002*\360\001\n\026FunctionUnlock_ID_TYPE\022 \n\033Functi"
    "onUnlock_ID_TYPE_ROLE\020\351\007\022!\n\034FunctionUnlo"
    "ck_ID_TYPE_SKILL\020\352\007\022 \n\033FunctionUnlock_ID"
    "_TYPE_WING\020\346\017\022$\n\037FunctionUnlock_ID_TYPE_"
    "TREASURE\020\352\017\022$\n\037FunctionUnlock_ID_TYPE_AR"
    "TIFACT\020\356\017\022#\n\036FunctionUnlock_ID_TYPE_PART"
    "NER\020\364\017*l\n\017EFacadeAttrType\022\025\n\021EAttrType_A"
    "dvance\020\001\022\025\n\021EAttrType_Fantasy\020\002\022\026\n\022EAttr"
    "Type_Fragment\020\003\022\023\n\017EAttrType_Skill\020\004*0\n\022"
    "EDailyTaskPlayType\022\032\n\026EDailyTaskPlayType"
    "_DUP\020\001*0\n\022EDailyTaskBackType\022\032\n\026EDailyTa"
    "skBackType_DUP\020\001*\263\002\n\006PGType\022\035\n\031PGType_wo"
    "rld_boss_add_num\020\001\022\033\n\027PGType_boss_dup_ad"
    "d_num\020\002\022\034\n\030PGType_boss_nest_add_num\020\003\022\035\n"
    "\031PGType_boss_ghost_add_num\020\004\022\034\n\030PGType_l"
    "evel_dup_add_num\020\005\022\034\n\030PGType_deify_dup_a"
    "dd_num\020\006\022\032\n\026PGType_pet_dup_add_num\020\007\022\034\n\030"
    "PGType_bagua_dup_add_num\020\010\022\034\n\030PGType_duj"
    "ie_dup_add_num\020\t\022\034\n\030PGType_equip_dup_add"
    "_num\020\n", 13566);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ComDefine.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ComDefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ComDefine_2eproto {
  StaticDescriptorInitializer_ComDefine_2eproto() {
    protobuf_AddDesc_ComDefine_2eproto();
  }
} static_descriptor_initializer_ComDefine_2eproto_;
const ::google::protobuf::EnumDescriptor* PingConfig_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingConfig_descriptor_;
}
bool PingConfig_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoleSex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoleSex_descriptor_;
}
bool ERoleSex_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoleProf_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoleProf_descriptor_;
}
bool ERoleProf_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrencyType_descriptor_;
}
bool CurrencyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AreaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreaType_descriptor_;
}
bool AreaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SamplePolyFlags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SamplePolyFlags_descriptor_;
}
bool SamplePolyFlags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 65535:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MapDefine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapDefine_descriptor_;
}
bool MapDefine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1024:
    case 3076:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REGION_DEFINE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REGION_DEFINE_descriptor_;
}
bool REGION_DEFINE_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CharacterDefine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDefine_descriptor_;
}
bool CharacterDefine_IsValid(int value) {
  switch(value) {
    case 3:
    case 4:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemType_descriptor_;
}
bool EItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPackageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPackageType_descriptor_;
}
bool EPackageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuality_descriptor_;
}
bool EQuality_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEquipPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEquipPos_descriptor_;
}
bool EEquipPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EConst_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EConst_descriptor_;
}
bool EConst_IsValid(int value) {
  switch(value) {
    case 20:
    case 21:
    case 22:
    case 23:
    case 34:
    case 61:
    case 75:
    case 76:
    case 113:
    case 142:
    case 143:
    case 146:
    case 149:
    case 181:
    case 182:
    case 183:
    case 190:
    case 192:
    case 193:
    case 195:
    case 200:
    case 201:
    case 202:
    case 203:
    case 206:
    case 231:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERetCode_descriptor_;
}
bool ERetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 200:
    case 201:
    case 202:
    case 203:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 417:
    case 421:
    case 433:
    case 436:
    case 437:
    case 438:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 447:
    case 448:
    case 449:
    case 450:
    case 451:
    case 500:
    case 501:
    case 510:
    case 511:
    case 512:
    case 601:
    case 602:
    case 603:
    case 620:
    case 621:
    case 700:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 718:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 825:
    case 826:
    case 827:
    case 828:
    case 829:
    case 830:
    case 831:
    case 832:
    case 833:
    case 834:
    case 835:
    case 836:
    case 837:
    case 838:
    case 839:
    case 840:
    case 900:
    case 901:
    case 902:
    case 903:
    case 904:
    case 905:
    case 906:
    case 907:
    case 908:
    case 909:
    case 910:
    case 920:
    case 921:
    case 922:
    case 923:
    case 924:
    case 925:
    case 926:
    case 927:
    case 928:
    case 929:
    case 930:
    case 931:
    case 932:
    case 933:
    case 934:
    case 935:
    case 936:
    case 937:
    case 938:
    case 939:
    case 940:
    case 941:
    case 942:
    case 943:
    case 944:
    case 945:
    case 946:
    case 947:
    case 948:
    case 949:
    case 950:
    case 951:
    case 952:
    case 953:
    case 954:
    case 955:
    case 956:
    case 957:
    case 958:
    case 959:
    case 960:
    case 961:
    case 962:
    case 963:
    case 964:
    case 965:
    case 966:
    case 967:
    case 968:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1700:
    case 1701:
    case 1702:
    case 1703:
    case 1704:
    case 1705:
    case 1706:
    case 1707:
    case 1708:
    case 1709:
    case 1710:
    case 1711:
    case 1712:
    case 1713:
    case 1714:
    case 1715:
    case 1716:
    case 1717:
    case 1718:
    case 1719:
    case 1800:
    case 4338:
    case 4339:
    case 4341:
    case 4342:
    case 4343:
    case 4344:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LOGOUT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGOUT_TYPE_descriptor_;
}
bool LOGOUT_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMailType_descriptor_;
}
bool EMailType_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHAT_CHANNEL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHAT_CHANNEL_descriptor_;
}
bool CHAT_CHANNEL_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FacadeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeType_descriptor_;
}
bool FacadeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFacadeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFacadeType_descriptor_;
}
bool EFacadeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FunctionUnlock_ID_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlock_ID_TYPE_descriptor_;
}
bool FunctionUnlock_ID_TYPE_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 2022:
    case 2026:
    case 2030:
    case 2036:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFacadeAttrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFacadeAttrType_descriptor_;
}
bool EFacadeAttrType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDailyTaskPlayType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDailyTaskPlayType_descriptor_;
}
bool EDailyTaskPlayType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDailyTaskBackType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDailyTaskBackType_descriptor_;
}
bool EDailyTaskBackType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PGType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PGType_descriptor_;
}
bool PGType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
