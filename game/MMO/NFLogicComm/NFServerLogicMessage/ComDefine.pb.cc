// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ComDefine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ComDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::EnumDescriptor* PingConfig_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoleSex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoleProf_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AreaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SamplePolyFlags_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MapDefine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REGION_DEFINE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CharacterDefine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPackageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEquipPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EConst_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Privilege_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LOGOUT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CHAT_CHANNEL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FacadeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FunctionUnlock_ID_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFacadeAttrType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDailyTaskPlayType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDailyTaskBackType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PGType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ARENA_CHALLENGE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ArenaRewardState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ArenaChallType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VIP_PRIVILEGE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMountRideState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDeityEquipPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMoneyRewardTaskReward_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETitleSubType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETitleTimeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBeastEquipPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDragonSoulEquipPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGodEvilEquipPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChannelId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EStarEquipPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMountKunEquipPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMoFaEquipPos_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ComDefine_2eproto() {
  protobuf_AddDesc_ComDefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ComDefine.proto");
  GOOGLE_CHECK(file != NULL);
  PingConfig_descriptor_ = file->enum_type(0);
  ERoleSex_descriptor_ = file->enum_type(1);
  ERoleProf_descriptor_ = file->enum_type(2);
  CurrencyType_descriptor_ = file->enum_type(3);
  AreaType_descriptor_ = file->enum_type(4);
  SamplePolyFlags_descriptor_ = file->enum_type(5);
  MapDefine_descriptor_ = file->enum_type(6);
  REGION_DEFINE_descriptor_ = file->enum_type(7);
  CharacterDefine_descriptor_ = file->enum_type(8);
  EItemType_descriptor_ = file->enum_type(9);
  EPackageType_descriptor_ = file->enum_type(10);
  EQuality_descriptor_ = file->enum_type(11);
  EEquipPos_descriptor_ = file->enum_type(12);
  EConst_descriptor_ = file->enum_type(13);
  ERetCode_descriptor_ = file->enum_type(14);
  Privilege_Type_descriptor_ = file->enum_type(15);
  LOGOUT_TYPE_descriptor_ = file->enum_type(16);
  EMailType_descriptor_ = file->enum_type(17);
  CHAT_CHANNEL_descriptor_ = file->enum_type(18);
  FacadeType_descriptor_ = file->enum_type(19);
  FunctionUnlock_ID_TYPE_descriptor_ = file->enum_type(20);
  EFacadeAttrType_descriptor_ = file->enum_type(21);
  EDailyTaskPlayType_descriptor_ = file->enum_type(22);
  EDailyTaskBackType_descriptor_ = file->enum_type(23);
  PGType_descriptor_ = file->enum_type(24);
  ARENA_CHALLENGE_TYPE_descriptor_ = file->enum_type(25);
  ArenaRewardState_descriptor_ = file->enum_type(26);
  ArenaChallType_descriptor_ = file->enum_type(27);
  VIP_PRIVILEGE_TYPE_descriptor_ = file->enum_type(28);
  EMountRideState_descriptor_ = file->enum_type(29);
  EDeityEquipPos_descriptor_ = file->enum_type(30);
  EMoneyRewardTaskReward_descriptor_ = file->enum_type(31);
  ETitleSubType_descriptor_ = file->enum_type(32);
  ETitleTimeType_descriptor_ = file->enum_type(33);
  EBeastEquipPos_descriptor_ = file->enum_type(34);
  EDragonSoulEquipPos_descriptor_ = file->enum_type(35);
  EGodEvilEquipPos_descriptor_ = file->enum_type(36);
  ChannelId_descriptor_ = file->enum_type(37);
  EStarEquipPos_descriptor_ = file->enum_type(38);
  EMountKunEquipPos_descriptor_ = file->enum_type(39);
  EMoFaEquipPos_descriptor_ = file->enum_type(40);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ComDefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_ComDefine_2eproto() {
}

void protobuf_AddDesc_ComDefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_ServerConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ComDefine.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\032\022ServerConfig.proto*D\n\nPingCo"
    "nfig\022\030\n\024CLIENT_PING_INTERVAL\020\n\022\030\n\024SERVER"
    "_PING_INTERVAL\020\n\032\002\020\001*3\n\010ERoleSex\022\022\n\016EROL"
    "E_SEX_MALE\020\001\022\023\n\017EROLE_SEX_FEMAL\020\002*\357\001\n\tER"
    "oleProf\022\032\n\026EROLE_PROF_MALE_MASTER\020\001\022\034\n\030E"
    "ROLE_PROF_FEMALE_MASTER\020\002\022\032\n\026EROLE_PROF_"
    "MALE_SICKLE\020\003\022\034\n\030EROLE_PROF_FEMALE_SICKL"
    "E\020\004\022\031\n\025EROLE_PROF_MALE_SWORD\020\005\022\033\n\027EROLE_"
    "PROF_FEMALE_SWORD\020\006\022\031\n\025EROLE_PROF_MALE_K"
    "NIFE\020\007\022\033\n\027EROLE_PROF_FEMALE_KNIFE\020\010*\230\001\n\014"
    "CurrencyType\022\027\n\023VALUE_CURRENCY_NULL\020\000\022\031\n"
    "\025VALUE_CURRENCY_SILVER\020\001\022\027\n\023VALUE_CURREN"
    "CY_GOLD\020\002\022\034\n\030VALUE_CURRENCY_BIND_GOLD\020\003\022"
    "\035\n\031VALUE_CURRENCY_REPUTATION\020\005*M\n\010AreaTy"
    "pe\022\026\n\022en_AreaType_Common\020\000\022\024\n\020en_AreaTyp"
    "e_Safe\020\001\022\023\n\017en_AreaType_Dup\020\002*\301\001\n\017Sample"
    "PolyFlags\022\031\n\025SAMPLE_POLYFLAGS_WALK\020\001\022\031\n\025"
    "SAMPLE_POLYFLAGS_SWIM\020\002\022\"\n\036SAMPLE_POLYFL"
    "AGS_FORBIT_ACROSS\020\004\022\031\n\025SAMPLE_POLYFLAGS_"
    "DOOR\020\010\022\035\n\031SAMPLE_POLYFLAGS_DISABLED\020\020\022\032\n"
    "\024SAMPLE_POLYFLAGS_ALL\020\377\377\003*Z\n\tMapDefine\022\022"
    "\n\rMAX_NAV_POLYS\020\204\030\022\030\n\023MAX_NAV_POINT_VALU"
    "E\020\200\010\022\033\n\027INVALID_NAVMESH_POLYREF\020\000\032\002\020\001*H\n"
    "\rREGION_DEFINE\022\030\n\024DEFAULT_REGION_WIDTH\020\022"
    "\022\031\n\025DEFAULT_REGION_HEIGHT\020\022\032\002\020\001*s\n\017Chara"
    "cterDefine\022\036\n\032MAX_CREATE_CHARACTER_COUNT"
    "\020\003\022\035\n\031CHARACTER_NAME_MIN_LENGTH\020\004\022\035\n\031CHA"
    "RACTER_NAME_MAX_LENGTH\020 \032\002\020\001*\272\002\n\tEItemTy"
    "pe\022\022\n\016EItemType_None\020\000\022\023\n\017EItemType_Equi"
    "p\020\001\022\026\n\022EItemType_Material\020\002\022\023\n\017EItemType"
    "_Other\020\003\022\022\n\016EItemType_Task\020\004\022\024\n\020EItemTyp"
    "e_PetEgg\020\005\022\021\n\rEItemType_Pet\020\006\022\026\n\022EItemTy"
    "pe_MountEgg\020\014\022\026\n\022EItemType_HandBook\020\r\022\025\n"
    "\021EItemType_GodHand\020\016\022\033\n\027EItemType_DeityA"
    "rtifact\020\017\022!\n\035EItemType_DeityArtifactDebr"
    "is\020\020\022\023\n\017EItemType_Limit\020\021*\257\005\n\014EPackageTy"
    "pe\022\025\n\021EPackageType_None\020\000\022\027\n\023EPackageTyp"
    "e_Common\020\001\022\030\n\024EPackageType_Storage\020\002\022\031\n\025"
    "EPackageType_MountEgg\020\003\022\027\n\023EPackageType_"
    "PetEgg\020\004\022\033\n\027EPackageType_DeityEquip\020\005\022\031\n"
    "\025EPackageType_HandBook\020\006\022\033\n\027EPackageType"
    "_BeastEquip\020\007\022\030\n\024EPackageType_Longhun\020\010\022"
    "\035\n\031EPackageType_FindTreasure\020\t\022\032\n\026EPacka"
    "geType_BigDragon\020\n\022\032\n\026EPackageType_shenj"
    "i_aq\020\013\022\032\n\026EPackageType_shenji_lj\020\014\022\030\n\024EP"
    "ackageType_GodEvil\020\r\022\025\n\021EPackageType_sta"
    "r\020\016\022\025\n\021EPackageType_turn\020\017\022\031\n\025EPackageTy"
    "pe_MountKun\020\020\022\027\n\023EPackageType_YaoHun\020\021\022\025"
    "\n\021EPackageType_MoFa\020\022\022\026\n\022EPackageType_hu"
    "ngu\020\023\022\025\n\021EPackageType_rune\020\024\022\031\n\025EPackage"
    "Type_fengshen\020\025\022\030\n\024EPackageType_hunjing\020"
    "\026\022\026\n\022EPackageType_guwen\020\027\022\030\n\024EPackageTyp"
    "e_godhood\020\030\022\026\n\022EPackageType_Limit\020\031*\323\001\n\010"
    "EQuality\022\022\n\016EQuality_white\020\001\022\022\n\016EQuality"
    "_green\020\002\022\021\n\rEQuality_blue\020\003\022\023\n\017EQuality_"
    "purple\020\004\022\023\n\017EQuality_orange\020\005\022\020\n\014EQualit"
    "y_red\020\006\022\021\n\rEQuality_gold\020\007\022\022\n\016EQuality_c"
    "olor\020\010\022\021\n\rEQuality_dark\020\t\022\022\n\016EQuality_fa"
    "iry\020\n\032\002\020\001*\347\002\n\tEEquipPos\022\022\n\016EEquipPos_non"
    "e\020\000\022\026\n\022EEquipPos_m_weapon\020\001\022\026\n\022EEquipPos"
    "_s_weapon\020\002\022\021\n\rEEquipPos_hat\020\003\022\025\n\021EEquip"
    "Pos_clothes\020\004\022\022\n\016EEquipPos_hand\020\005\022\022\n\016EEq"
    "uipPos_belt\020\006\022\022\n\016EEquipPos_shoe\020\007\022\026\n\022EEq"
    "uipPos_necklace\020\010\022\026\n\022EEquipPos_bracelet\020"
    "\t\022\022\n\016EEquipPos_ring\020\n\022\024\n\020EEquipPos_guard"
    "1\020\013\022\024\n\020EEquipPos_guard2\020\014\022\022\n\016EEquipPos_j"
    "ade\020\r\022\023\n\017EEquipPos_marry\020\016\022\023\n\017EEquipPos_"
    "limit\020\017\032\002\020\001*\214\020\n\006EConst\022\035\n\031EConst_Relatio"
    "nRecentSize\020\024\022\035\n\031EConst_RelationFriendSi"
    "ze\020\025\022\033\n\027EConst_RelationHateSize\020\026\022\034\n\030ECo"
    "nst_RelationBlackSize\020\027\022\035\n\031EConst_DieRed"
    "uceKillValue\020\031\022\024\n\020EConst_Dup_Sweep\020\032\022\033\n\027"
    "EConst_ServerUpdateTime\020\"\022\030\n\024EConst_ChgN"
    "ameItemId\020=\022\033\n\027EConst_KillAddKillValue\020B"
    "\022\034\n\030EConst_WorldChatLevLimit\020K\022\034\n\030EConst"
    "_CrossChatLevLimit\020L\022\030\n\024EConst_CrossChat"
    "Cost\020q\022\037\n\033EConst_DropBelongProtectSec\020u\022"
    " \n\034EConst_OnlineReduceKillValue\020v\022\037\n\032ECo"
    "nst_WorldChannelNeedPay\020\216\001\022\036\n\031EConst_Cre"
    "ateUnionNeedPay\020\217\001\022\035\n\030EConst_SceneChatLe"
    "vLimit\020\222\001\022\"\n\035EConst_TeamEnList_CostBindD"
    "ia\020\225\001\022\032\n\025EConst_RoleSkillPubCd\020\265\001\022\031\n\024ECo"
    "nst_GodSkillPubCd\020\266\001\022\031\n\024EConst_PetSkillP"
    "ubCd\020\267\001\022\033\n\026EConst_SkillGroupChgCd\020\276\001\022\026\n\021"
    "EConst_CorpseTime\020\300\001\022\032\n\025EConst_BossCorps"
    "eTime\020\301\001\022\031\n\024EConstTiredReliveNum\020\310\001\022\030\n\023E"
    "ConstTiredContiSec\020\311\001\022\031\n\024EConstTiredReli"
    "veSec\020\312\001\022#\n\036EConst_ImmediateReliveCostIt"
    "em\020\313\001\022\037\n\032EConst_ImmediateReliveCost\020\316\001\022\""
    "\n\035EConst_PackageMountEggSlotNum\020\326\001\022!\n\034EC"
    "onst_MountDuHua_ActiveSlot\020\327\001\022#\n\036EConst_"
    "MountDuHua_TimeGoldCost\020\330\001\022#\n\036EConst_Mou"
    "ntDuHua_TimeItemCost\020\331\001\022\033\n\026EConst_AutoPi"
    "ckDropSec\020\347\001\022 \n\033EConst_PartnerFllowDista"
    "nce\020\350\001\022#\n\036EConst_PartnerTeleportDistance"
    "\020\351\001\022\033\n\026EConst_ArenaResultTime\020\352\001\022\036\n\031ECon"
    "st_ArenaChallengTimes\020\353\001\022!\n\034EConst_Arena"
    "VipChallengTimes\020\354\001\022\"\n\035EConst_SkillAdvan"
    "ceUnlockCost\020\360\001\022!\n\034EConst_SkillAdvanceRe"
    "setCost\020\361\001\022\036\n\031EConst_TeamMemCountExpAdd\020"
    "\362\001\022\032\n\025EConst_Pet_hatch_cost\020\371\001\022\037\n\032EConst"
    "_GodEvilNoticeReward\020\374\001\022\037\n\032EConst_GodEvi"
    "lActiveReward\020\375\001\022\036\n\031EConst_GodEvilChgFac"
    "adeCd\020\376\001\022\023\n\016EConst_Pet_atk\020\212\002\022\021\n\014EConst_"
    "Armor\020\213\002\022\036\n\031EConst_GodEvilGodChgSkill\020\215\002"
    "\022\037\n\032EConst_GodEvilEvilChgSkill\020\216\002\022\032\n\025ECo"
    "nst_TalentPointLev\020\220\002\022\032\n\025EConst_TalentRe"
    "stItem\020\221\002\022\030\n\023EConst_RedNameSkill\020\224\002\022\030\n\023E"
    "Const_PvpStateTime\020\225\002\022\032\n\025EConst_YellowNa"
    "meTime\020\226\002\022\035\n\030EConst_1v1DailyRewardNum\020\243\002"
    "\022\032\n\025EConst_XiuZhenRoadPet\020\250\002\022\034\n\027EConst_1"
    "v1RankScoreNeed\020\254\002\022\034\n\027EConst_WorldLvAddE"
    "ffect\020\256\002\022\026\n\021EConst_ExpandItem\020\262\002\022\031\n\024ECon"
    "st_SubpackReward\020\263\002\022\030\n\023EConst_ExpandMall"
    "Id\020\264\002\022\037\n\032EConst_GodEvilWearQuaLvExp\020\272\002\022\036"
    "\n\031EConst_GodEvilQuaLvMallId\020\274\002\022\031\n\024EConst"
    "_boss_sg_rtime\020\277\002\022\025\n\020EConst_PlotParam\020\307\002"
    "\022(\n#EConst_OneKeyFinishGuildMissionCost\020"
    "\350\007\022\036\n\031EConst_OnceFinishTaskCost\020\351\007*\267\304\001\n\010"
    "ERetCode\022\017\n\013RET_SUCCESS\020\000\022\014\n\010RET_FAIL\020\001\022"
    "\022\n\016RET_LEVEL_LACK\020\002\022\022\n\016RET_MONEY_LACK\020\003\022"
    "\021\n\rRET_GOLD_LACK\020\004\022\026\n\022RET_BIND_GOLD_LACK"
    "\020\005\022\024\n\020RET_DIAMOND_LACK\020\006\022\031\n\025RET_BIND_DIA"
    "MOND_LACK\020\007\022\026\n\022RET_VIP_LEVEL_LACK\020\010\022\022\n\016R"
    "ET_PROF_ERROR\020\n\022\031\n\025RET_PLAYER_NOT_ONLINE"
    "\020\013\022\023\n\017RET_CONTRI_LACK\020\014\022\033\n\027RET_OCCUPATIO"
    "N_LEV_LACK\020\r\022\022\n\016RET_NOT_ONLINE\020\016\022\022\n\016RET_"
    "DATA_ERROR\020\017\022\032\n\026RET_NOT_HAVE_CHARACTER\020\020"
    "\022\020\n\014RET_BAG_FULL\020\021\022\024\n\020RET_PARMAR_ERROR\020\022"
    "\022\024\n\020RET_CONFIG_ERROR\020\023\022\030\n\024RET_OTHER_LEVE"
    "L_LACK\020\024\022\021\n\rRET_ID_UNKNOW\020\025\022\030\n\024RET_REPEA"
    "TED_OPERATE\020\026\022\023\n\017RET_UNAVAILABLE\020\027\022\022\n\016RE"
    "T_FIGHT_LACK\020\030\022\026\n\022RET_OPEN_DAY_LIMIT\020\031\022\024"
    "\n\020RET_OVER_MAX_NUM\020\032\022\030\n\024RET_OTHER_NOT_ON"
    "LINE\020\034\022\030\n\024RET_ITEM_PARAM_ERROR\020\"\022\031\n\025RET_"
    "CAN_NOT_RECONNECT\020#\022\033\n\027RET_DISALLOW_ENTE"
    "R_GAME\020$\022\025\n\021RET_MATERIAL_LACK\020%\022\022\n\016RET_M"
    "AGIC_LACK\020&\022\025\n\021RET_PRESTIGE_LACK\020\'\022\025\n\021RE"
    "T_FUNC_NOT_OPEN\020(\022\023\n\017RET_LLLEGAL_OPT\020)\022\025"
    "\n\021RET_CURRENCY_LEAK\020*\022\021\n\rRET_LEAVE_MAX\020+"
    "\022\037\n\033RET_LOGIN_BAD_USER_NAME_LEN\020d\022!\n\035RET"
    "_LOGIN_CHARACTER_NOT_EXITS\020e\022!\n\035RET_LOGI"
    "N_ACCOUNT_OTHER_LOGIN\020f\022!\n\035RET_LOGIN_CHA"
    "RACTER_NUM_LIMIT\020g\022#\n\037RET_LOGIN_CHARACTE"
    "R_NAME_EXISTS\020h\022!\n\035RET_LOGIN_CHARACTER_S"
    "EX_ERROR\020i\022\"\n\036RET_LOGIN_CHARACTER_PROF_E"
    "RROR\020j\022&\n\"RET_LOGIN_CHARACTER_NAME_LEN_E"
    "RROR\020k\022%\n!RET_LOGIN_CHARACTER_CREATE_FAI"
    "LED\020l\022#\n\037RET_LOGIN_CHARACTER_NOT_ACCOUNT"
    "\020m\022\037\n\033RET_LOGIN_CHARACTER_ILLEGAL\020n\022\"\n\036R"
    "ET_LOGIN_CHARACTER_VESION_ERR\020o\022(\n$RET_L"
    "OGIN_ACCOUNT_SYSTEM_MAINTENANCE\020p\022\035\n\031RET"
    "_LOGIN_ILLEGAL_REQUEST\020q\022\032\n\026RET_LOGIN_CH"
    "ANNEL_FAIL\020r\022\036\n\032RET_LOGIN_ORBIDDEN_ACCOU"
    "NT\020s\022\037\n\033RET_LOGIN_QUEUE_ENOUGHT_NUM\020t\022\035\n"
    "\031RET_LOGIN_HAS_DELETE_CHAR\020u\022\026\n\022RET_LOGI"
    "N_TIME_OUT\020v\022\023\n\017RET_TOKEN_ERROR\020w\022\024\n\020RET"
    "_ACCOUNT_FULL\020x\022\025\n\021RET_NOT_OPEN_TIME\020y\022 "
    "\n\034RET_CAN_NOT_RETURN_ROLE_LIST\020z\022\031\n\025RET_"
    "LOGIN_TOKEN_ERROR\020{\022\034\n\027RET_SCENE_DST_NOT"
    "_EXIST\020\310\001\022\036\n\031RET_SCENE_INVALID_DST_POS\020\311"
    "\001\022\033\n\026RET_SCENE_CAN_NOT_TRAN\020\312\001\022 \n\033RET_SC"
    "ENE_TRANS_PARAM_ERROR\020\313\001\022\037\n\032RET_MAIL_SEN"
    "D_TARGET_ERROR\020\254\002\022\030\n\023RET_MAIL_DATA_ERROR"
    "\020\255\002\022\027\n\022RET_MAIL_NOT_EXIST\020\256\002\022!\n\034RET_MAIL"
    "_NOT_HAVE_ATTACHMENT\020\257\002\022\035\n\030RET_MAIL_GOOD"
    "S_NUM_LIMIT\020\260\002\022\035\n\030RET_MAIL_TOPIC_LEN_LIM"
    "IT\020\261\002\022\033\n\026RET_MAIL_ALREADY_FETCH\020\262\002\022!\n\034RE"
    "T_MAIL_ATTATCH_COUNT_LIMIT\020\263\002\022\034\n\027RET_MAI"
    "L_ALREDAY_EXPIRE\020\264\002\022 \n\033RET_MAIL_HAS_NOT_"
    "BEGIN_TIME\020\265\002\022\037\n\032RET_PACKAGE_ITEM_NOT_EX"
    "ITS\020\221\003\022\"\n\035RET_PACKAGE_ITEM_CAN_NOT_SELL\020"
    "\222\003\022\036\n\031RET_PACKAGE_ITEM_NUM_LACK\020\223\003\022!\n\034RE"
    "T_PACKAGE_ITEM_CAN_NOT_USE\020\224\003\022\'\n\"RET_PAC"
    "KAGE_ITEM_CAN_NOT_BATCH_USE\020\225\003\022\035\n\030RET_PA"
    "CKAGE_EXPAND_LIMIT\020\226\003\022$\n\037RET_PACKAGE_ITE"
    "M_FUNC_PARAM_ERR\020\227\003\022\035\n\030RET_PACKAGE_SORT_"
    "IN_COOL\020\230\003\022(\n#RET_PACKAGE_COMMON_SPACE_N"
    "OT_ENOUGH\020\231\003\022)\n$RET_PACKAGE_STORAGE_SPAC"
    "E_NOT_ENOUGH\020\232\003\022\030\n\023RET_PACKAGE_HP_FULL\020\241"
    "\003\022\030\n\023RET_PACKAGE_WAITING\020\245\003\022$\n\037RET_PACKA"
    "GE_USE_HANGUP_CARD_MAX\020\261\003\022&\n!RET_PACKAGE"
    "_LACK_CHANGE_NAME_ITEM\020\264\003\022$\n\037RET_PACKAGE"
    "_USE_ITEM_NOT_REMOVE\020\265\003\022\037\n\032RET_PACKAGE_F"
    "USHI_CARD_MAX\020\266\003\022&\n!RET_PACKAGE_SELECT_I"
    "TEM_NOT_EXIST\020\267\003\022&\n!RET_PACKAGE_TASK_SPA"
    "CE_NOT_ENOUGH\020\270\003\022&\n!RET_PACKAGE_STAR_SPA"
    "CE_NOT_ENOUGH\020\271\003\022&\n!RET_PACKAGE_SOUL_SPA"
    "CE_NOT_ENOUGH\020\272\003\022+\n&RET_PACKAGE_FAIMATER"
    "I_SPACE_NOT_ENOUGH\020\273\003\022,\n\'RET_PACKAGE_FAI"
    "CRYSTAL_SPACE_NOT_ENOUGH\020\274\003\022(\n#RET_PACKA"
    "GE_SYMBOL_SPACE_NOT_ENOUGH\020\275\003\022.\n)RET_PAC"
    "KAGE_BOSSIDENTIFY_SPACE_NOT_ENOUGH\020\276\003\022.\n"
    ")RET_PACKAGE_FAILIDENTIFY_SPACE_NOT_ENOU"
    "GH\020\277\003\022&\n!RET_PACKAGE_USE_NOT_HAVE_PK_VAL"
    "UE\020\300\003\022\037\n\032RET_PACKAGE_ITEM_USE_LIMIT\020\301\003\022("
    "\n#RET_PACKAGE_ITEM_LOGIN_GIFT_FETCHED\020\302\003"
    "\022#\n\036RET_PACKAGE_USE_ITEM_MAP_LIMIT\020\303\003\022%\n"
    " RET_PACKAGE_PET_SPACE_NOT_ENOUGH\020\304\003\022)\n$"
    "RET_PACKAGE_GODEVIL_SPACE_NOT_ENOUGH\020\305\003\022"
    "&\n!RET_PACKAGE_RUNE_SPACE_NOT_ENOUGH\020\306\003\022"
    "#\n\036RET_GROW_PART_ENTRY_LEVEL_FULL\020\364\003\022\035\n\030"
    "RET_GROW_PART_NOT_ACTIVE\020\365\003\022\031\n\024RET_GROW_"
    "PART_EXPIRE\020\366\003\022 \n\033RET_PLAYER_SEAT_STATE_"
    "ERROR\020\376\003\022!\n\034RET_PLAYER_SEAT_MAP_NOT_SEAT"
    "\020\377\003\022\034\n\027RET_PLAYER_SEAT_NO_TIME\020\200\004\022\030\n\023RET"
    "_FACADE_UNACTIVE\020\246\004\022\031\n\024RET_FACADE_MAX_LE"
    "VEL\020\247\004\022\032\n\025RET_FACADE_HAVE_DRESS\020\250\004\022\036\n\031RE"
    "T_FACADE_HAVE_NOT_DRESS\020\251\004\022\"\n\035RET_FACADE"
    "_FRAGMENT_USE_LIMIT\020\252\004\022\031\n\024RET_FACADE_NOT"
    "_BREAK\020\253\004\022\035\n\030RET_FACADE_ALREADY_BREAK\020\254\004"
    "\022#\n\036RET_FACADE_SOUL_NO_SKILL_RESET\020\255\004\022,\n"
    "\'RET_FACADE_SOUL_LEVELUP_FAIL_LEVEL_RAIL"
    "\020\256\004\022!\n\034RET_FACADE_SOUL_LEVELUP_FAIL\020\257\004\022\023"
    "\n\016RET_GM_NOT_KEY\020\331\004\022\035\n\030RET_GM_PRAMA_COUN"
    "T_ERROR\020\332\004\022\024\n\017RET_GM_NOT_FIND\020\333\004\022\030\n\023RET_"
    "EQUIP_NOT_EXIST\020\354\004\022!\n\034RET_EQUIP_POS_NOT_"
    "EXIT_EQUIP\020\355\004\022\031\n\024RET_EQUIP_STRONG_MAX\020\356\004"
    "\022\033\n\026RET_EQUIP_TOTAL_LV_MAX\020\357\004\022\032\n\025RET_EQU"
    "IP_ISNOT_STONE\020\360\004\022!\n\034RET_EQUIP_GEM_INLAY"
    "_TYPE_ERR\020\361\004\022\032\n\025RET_EQUIP_GEM_POS_ERR\020\362\004"
    "\022 \n\033RET_EQUIP_STONE_SLOT_UNLOCK\020\363\004\022\033\n\026RE"
    "T_EQUIP_STONE_LV_MAX\020\364\004\022\031\n\024RET_EQUIP_TOT"
    "AL_LACK\020\365\004\022\027\n\022RET_STONE_TYPE_ERR\020\366\004\022\033\n\026R"
    "ET_WASH_POS_IS_ACTIVE\020\367\004\022\026\n\021RET_WASH_LOC"
    "K_MAX\020\370\004\022\032\n\025RET_EQUIP_SUIT_LV_MAX\020\371\004\022\033\n\026"
    "RET_EQUIP_SUIT_LV_LACK\020\372\004\022&\n!RET_EQUIP_S"
    "UIT_NOT_QUALITY_ENOUGH\020\373\004\022%\n RET_EQUIP_S"
    "UIT_LV_NOT_OTHER_FULL\020\374\004\022\034\n\027RET_EQUIP_RE"
    "FINE_LV_MAX\020\375\004\022$\n\037RET_EQUIP_REFINE_UNLOC"
    "K_LV_LACK\020\376\004\022\036\n\031RET_EQUIP_REFINE_UNLOCKE"
    "D\020\377\004\022\031\n\024RET_EQUIP_AWAKEN_MAX\020\200\005\022\032\n\025RET_E"
    "QUIP_SOARING_MAX\020\201\005\022#\n\036RET_EQUIP_SOARING"
    "_QUALITY_LACK\020\202\005\022\035\n\030RET_EQUIP_QUALITY_LV"
    "_MAX\020\203\005\022\'\n\"RET_EQUIP_QUALITY_WEAR_QULITY"
    "_LACK\020\204\005\022\033\n\026RET_EQUIP_SEAL_POS_ERR\020\205\005\022#\n"
    "\036RET_EQUIP_SEAL_INLAY_COND_LACK\020\206\005\022\032\n\025RE"
    "T_EQUIP_SEAL_LV_MAX\020\207\005\022\033\n\026RET_EQUIP_SEAL"
    "_LV_LEAK\020\211\005\022\"\n\035RET_EQUIP_SEAL_INLAY_NOT_"
    "FULL\020\212\005\022$\n\037RET_EQUIP_SEAL_SUIT_HAS_ACTIV"
    "ED\020\213\005\022!\n\034RET_EQUIP_SEAL_SUIT_NUM_LACK\020\214\005"
    "\022\025\n\020RET_EQUIP_EXPIRE\020\215\005\022\034\n\027RET_MISSION_H"
    "AVE_ACCEPT\020\274\005\022\037\n\032RET_MISSION_CAN_NOT_ACC"
    "EPT\020\275\005\022\034\n\027RET_MISSION_LEVEL_ERROR\020\276\005\022\032\n\025"
    "RET_MISSION_NOT_EXIST\020\277\005\022 \n\033RET_MISSION_"
    "STATE_NOT_MATCH\020\300\005\022!\n\034RET_MISSION_PROFES"
    "SION_LIMIT\020\301\005\022\034\n\027RET_MISSION_TIMES_ERROR"
    "\020\302\005\022)\n$RET_MISSION_HAVE_ACCEPT_NUMBER_LI"
    "MIT\020\303\005\022\034\n\027RET_MISSION_GROUP_LIMIT\020\304\005\022\034\n\027"
    "RET_MISSION_NOT_ABANDON\020\305\005\022(\n#RET_MISSIO"
    "N_PERIOD_FINISH_NUM_LIMIT\020\306\005\022,\n\'RET_MISS"
    "ION_PERIOD_ONCE_EXIST_NUM_LIMIT\020\307\005\022!\n\034RE"
    "T_MISSION_HAVE_TYPE_ACCEPT\020\310\005\022 \n\033RET_MIS"
    "SION_CAN_NOT_ONE_KEY\020\311\005\022\"\n\035RET_MISSION_O"
    "NE_KEY_NUM_LIMIT\020\312\005\022\033\n\026RET_MISSION_NOT_F"
    "INISH\020\313\005\022!\n\034RET_MISSION_NOT_ACCEPT_UNION"
    "\020\314\005\022$\n\037RET_MISSION_CAN_NOT_ONCE_FINISH\020\315"
    "\005\022\037\n\032RET_MISSION_ALREADY_SUBMIT\020\316\005\022*\n%RE"
    "T_MISSION_GUILD_PRESTIGE_ACCEPT_NUM\020\317\005\022)"
    "\n$RET_MISSION_GUILD_PRESTIGE_FRESH_NUM\020\320"
    "\005\022+\n&RET_MISSION_GUILD_PRESTIGE_STATE_ER"
    "ROR\020\321\005\0222\n-RET_MISSION_GUILD_PRESTIGE_REF"
    "RESH_NOT_FINISH\020\323\005\022&\n!RET_MISSION_FUNCTI"
    "ON_UNLOCK_LIMIT\020\324\005\022 \n\033RET_MISSION_NOT_AC"
    "CEPT_SPEC\020\325\005\022\034\n\027RET_RELATION_HAVE_APPLY\020"
    "\240\006\022\033\n\026RET_RELATION_NOT_AGREE\020\241\006\022$\n\037RET_R"
    "ELATION_CAN_NOT_APPLY_SELF\020\242\006\022#\n\036RET_REL"
    "ATION_APPLY_GROUP_ERROR\020\243\006\022\036\n\031RET_RELATI"
    "ON_NOT_ADD_SELF\020\244\006\022\036\n\031RET_RELATION_NOT_I"
    "N_APPLY\020\245\006\022%\n RET_RELATION_SIZE_LIMIT_NO"
    "_APPLY\020\246\006\022+\n&RET_RELATION_SIZE_LIMIT_NO_"
    "APPLY_OTHER\020\247\006\022\036\n\031RET_RELATION_IS_MY_FRI"
    "END\020\250\006\022#\n\036RET_RELATION_SIZE_LIMIT_NO_ADD"
    "\020\251\006\022)\n$RET_RELATION_SIZE_LIMIT_NO_ADD_OT"
    "HER\020\252\006\022\"\n\035RET_RELATION_ADD_BLACK_MYSELF\020"
    "\253\006\022\"\n\035RET_RELATION_BALCK_SIZE_LIMIT\020\254\006\022\037"
    "\n\032RET_RELATION_IN_YOUR_BALCK\020\255\006\022 \n\033RET_R"
    "ELATION_IN_OTHER_BALCK\020\256\006\022.\n)RET_RELATIO"
    "N_IN_OTHER_BALCK_CAN_NOT_APPLY\020\257\006\022-\n(RET"
    "_RELATION_IN_YOUR_BALCK_CAN_NOT_APPLY\020\260\006"
    "\022\034\n\027RET_RELATION_NOT_SEARCH\020\261\006\022\035\n\030RET_RE"
    "LATION_NOT_FRIENDS\020\262\006\022*\n%RET_RELATION_CA"
    "NOT_ADDFRIEND_TO_BLACK\020\263\006\022+\n&RET_RELATIO"
    "N_GIVE_PHYSICAL_TIMES_LIMIT\020\264\006\022)\n$RET_RE"
    "LATION_GET_PHYSICAL_TIME_LIMTI\020\265\006\022\"\n\035RET"
    "_RELATION_NOT_GET_PHYSICAL\020\266\006\022#\n\036RET_REL"
    "ATION_HAVE_GET_PHYSICAL\020\267\006\022)\n$RET_RELATI"
    "ON_GET_PHYSICAL_GIFT_LIMIT\020\270\006\022\034\n\027RET_REL"
    "ATION_IN_CD_TIME\020\271\006\022\"\n\035RET_RELATION_TRAC"
    "K_HATE_ERROR\020\272\006\022\036\n\031RET_RELATION_GIFT_TO_"
    "MAIL\020\273\006\022\036\n\031RET_RELATION_HAVE_NO_DATA\020\274\006\022"
    "\036\n\031RET_RELATION_MARRY_REFUSE\020\275\006\022\033\n\026RET_R"
    "ELATION_HAS_MARRY\020\276\006\022\"\n\035RET_RELATION_TAR"
    "GET_HAS_MARRY\020\277\006\022\033\n\026RET_RELATION_NOT_MAR"
    "RY\020\300\006\022&\n!RET_RELATION_CLOSENESS_NOT_ENOU"
    "GH\020\301\006\022\'\n\"RET_RELATION_CAN_NOT_DELETE_SPO"
    "USE\020\302\006\022$\n\037RET_RELATION_HAVE_PROPOSE_MARR"
    "Y\020\303\006\022\036\n\031RET_RELATION_EXIST_SHIELD\020\304\006\022\035\n\030"
    "RET_RELATION_WAIT_DBDATA\020\305\006\022!\n\034RET_RELAT"
    "ION_GIFT_NOT_FRIEND\020\306\006\022\034\n\027RET_RELATION_G"
    "IFT_ERROR\020\307\006\022\037\n\032RET_RELATION_NOT_HAVE_DA"
    "TE\020\310\006\022\030\n\023RET_CHAT_NOT_MYSELF\020\204\007\022\037\n\032RET_C"
    "HAT_TARGET_NOT_ONLINE\020\205\007\022\035\n\030RET_CHAT_TAR"
    "GET_IN_BLACK\020\206\007\022\"\n\035RET_CHAT_QUREY_CHAR_N"
    "OT_EXITS\020\207\007\022\036\n\031RET_CHAT_FREE_TIMES_LIMIT"
    "\020\210\007\022\036\n\031RET_CHAT_FREE_GOODS_LIMIT\020\211\007\022\033\n\026R"
    "ET_CHAT_CD_TIME_LIMIT\020\212\007\022\034\n\027RET_CHAT_BIG"
    "_HORN_LIMIT\020\213\007\022\033\n\026RET_CHAT_CD_NoSpeakIng"
    "\020\214\007\022\033\n\026RET_CHAT_PAY_RMB_LIMIT\020\215\007\022\030\n\023RET_"
    "CHAT_COND_LIMIT\020\216\007\022 \n\033RET_DUPLICATE_CAN_"
    "NOT_ENTER\020\230\007\022\034\n\027RET_DUPLICATE_ALREAY_IN\020"
    "\231\007\022!\n\034RET_DUPLICATE_RELIVE_NO_DEAD\020\232\007\022\037\n"
    "\032RET_DUPLICATE_PRE_NOT_PASS\020\233\007\022\"\n\035RET_DU"
    "PLICATE_MAX_LEVEL_LIMIT\020\234\007\022 \n\033RET_DUPLIC"
    "ATE_CAN_NOT_LEAVE\020\235\007\022!\n\034RET_DUPLICATE_LA"
    "CK_ENTER_NUM\020\236\007\022\036\n\031RET_DUPLICATE_NOT_IN_"
    "TEAM\020\237\007\022!\n\034RET_DUPLICATE_NOT_TEM_LEADER\020"
    "\240\007\022#\n\036RET_DUPLICATE_PLAYER_NUM_LIMIT\020\241\007\022"
    "#\n\036RET_DUPLICATE_RELIVE_NUM_LIMIT\020\242\007\022 \n\033"
    "RET_DUPLICATE_BUY_NUM_LIMIT\020\243\007\022\037\n\032RET_DU"
    "PLICATE_ALREADY_PASS\020\244\007\022#\n\036RET_DUPLICATE"
    "_NOT_IN_DUPLICATE\020\245\007\022\"\n\035RET_DUPLICATE_TE"
    "AM_NOT_INVITE\020\246\007\022!\n\034RET_DUPLICATE_TEAM_N"
    "OT_REPLY\020\247\007\022%\n RET_DUPLICATE_TEAM_ALREAD"
    "Y_REPLY\020\250\007\022&\n!RET_DUPLICATE_TEAM_MEM_ALR"
    "EADY_IN\020\251\007\022&\n!RET_DUPLICATE_TEAM_MEM_NOT"
    "_ONLINE\020\252\007\022%\n RET_DUPLICATE_TEAM_MEM_NOT"
    "_AGREE\020\253\007\022\035\n\030RET_DUPLICATE_NOT_EXISTS\020\254\007"
    "\022!\n\034RET_DUPLICATE_CAN_NOT_RELIVE\020\255\007\022\036\n\031R"
    "ET_DUPLICATE_ALREDY_DEAD\020\256\007\022\'\n\"RET_DUPLI"
    "CATE_LACK_GROUP_ENTER_NUM\020\257\007\022\037\n\032RET_DUPL"
    "ICATE_CAN_NOT_SEEP\020\260\007\022\035\n\030RET_DUPLICATE_S"
    "TAR_LIMIT\020\261\007\022!\n\034RET_DULICATE_SWEEP_ITEM_"
    "LACK\020\262\007\022$\n\037RET_DUPLICATE_TEAMDUP_NOT_ALL"
    "OW\020\263\007\022\"\n\035RET_DUPLICATE_CAN_NOT_INSPIRE\020\264"
    "\007\022$\n\037RET_DUPLICATE_INSPIRE_NUM_LIMIT\020\265\007\022"
    "(\n#RET_DUPLICATE_SWEEP_NOT_SET_INSPIRE\020\266"
    "\007\022 \n\033RET_DUPLICATE_TEAM_MEM_DEAD\020\267\007\022%\n R"
    "ET_DUPLICATE_TEAM_DIE_NOT_REPLY\020\270\007\022\'\n\"RE"
    "T_DUPLICATE_TEAM_MEM_SPECIAL_MAP\020\271\007\022\036\n\031R"
    "ET_DUPLICATE_ALREDAY_END\020\272\007\022\033\n\026RET_DUPLI"
    "CATE_NOT_OPEN\020\273\007\022\037\n\032RET_DUPLICATE_ALREAD"
    "Y_OPEN\020\274\007\022\036\n\031RET_DUPLICATE_HAS_NO_OPEN\020\275"
    "\007\022\034\n\027RET_DUPLICATE_IN_CREATE\020\276\007\022 \n\033RET_D"
    "UPLICATE_CAN_NOT_RESET\020\277\007\022$\n\037RET_DUPLICA"
    "TE_LAYER_ALL_FETCHED\020\300\007\022\'\n\"RET_DUPLICATE"
    "_PALACE_LAYER_FETCHED\020\301\007\022#\n\036RET_DUPLICAT"
    "E_NO_PALACE_REWARD\020\302\007\022$\n\037RET_DUPLICATE_T"
    "EAM_MEM_NO_UNION\020\303\007\022*\n%RET_DUPLICATE_TEA"
    "M_MEM_NOT_SAME_UNION\020\304\007\022&\n!RET_DUPLICATE"
    "_TEAM_NOT_SAME_UNION\020\305\007\022)\n$RET_DUPLICATE"
    "_MAX_PALACE_LAYER_LIMIT\020\306\007\022&\n!RET_DUPLIC"
    "ATE_TEAM_MEM_NOT_IN_DUP\020\307\007\022\'\n\"RET_DUPLIC"
    "ATE_PALACE_LAYER_UNUSUAL\020\310\007\022\032\n\025RET_DUPLI"
    "CATE_IS_OVER\020\311\007\022&\n!RET_DUPLICATE_BT_DRAG"
    "ON_NOT_ENTER\020\312\007\022%\n RET_DUPLICATE_NO_ENTE"
    "R_BT_DRAGON\020\313\007\022$\n\037RET_DUPLICATE_NO_TEAM_"
    "NOT_ENTER\020\314\007\022$\n\037RET_DUPLICATE_IN_DUP_NOT"
    "_INVITE\020\315\007\022\033\n\026RET_DUP_SWEEP_NO3_STAR\020\316\007\022"
    "\032\n\025RET_DUP_SWEEP_NO_PASS\020\317\007\022\035\n\030RET_DUP_S"
    "WEEP_FIGHT_LACK\020\320\007\022#\n\036RET_DUPLICATE_NO_B"
    "UY_BT_DRAGON\020\321\007\022\024\n\017RET_SKILL_IN_CD\020\350\007\022\032\n"
    "\025RET_SKILL_CAN_NOT_USE\020\351\007\022\037\n\032RET_SKILL_T"
    "ARGET_NOT_EXIST\020\352\007\022\032\n\025RET_SKILL_IN_GROUP"
    "_CD\020\353\007\022\033\n\026RET_SKILL_IN_FACADE_CD\020\354\007\022\030\n\023R"
    "ET_SKILL_NOT_EXIST\020\355\007\022\026\n\021RET_SKILL_LEV_M"
    "AX\020\356\007\022\036\n\031RET_SKILL_ALREADY_WAKE_UP\020\357\007\022\032\n"
    "\025RET_SKILL_INVALID_POS\020\360\007\022\036\n\031RET_SKILL_C"
    "AN_NOT_CHG_POS\020\361\007\022\035\n\030RET_SKILL_ALREADY_I"
    "N_POS\020\362\007\022 \n\033RET_SKILL_ADVANCE_LEV_LIMIT\020"
    "\363\007\022\032\n\025RET_SKILL_ADVANCE_NOT\020\364\007\022 \n\033RET_SK"
    "ILL_ADVANCE_NOT_RESET\020\365\007\022\033\n\026RET_SKILL_IN"
    "_GOD_STATE\020\366\007\022\036\n\031RET_SKILL_TALENT_CNT_LA"
    "CK\020\367\007\022\035\n\030RET_SKILL_TALENT_LEV_MAX\020\370\007\022#\n\036"
    "RET_SKILL_TALENT_PRE_LEV_LIMIT\020\371\007\022%\n RET"
    "_SKILL_TALENT_CAN_NOT_UPGRADE\020\372\007\022\035\n\030RET_"
    "SKILL_ANGER_NOT_FULL\020\373\007\022\033\n\026RET_PLAYER_TI"
    "RED_STATE\020\315\010\022\030\n\023RET_PLAYER_NOT_DEAD\020\316\010\022\036"
    "\n\031RET_PLAYER_CAN_NOT_RELIVE\020\317\010\022\036\n\031RET_PL"
    "AYER_MAP_NOT_RELIVE\020\320\010\022 \n\033RET_PLAYER_REL"
    "IVE_NUM_LIMIT\020\321\010\022\034\n\027RET_PLAYER_IN_PVP_ST"
    "ATE\020\322\010\022\032\n\025RET_TEAM_ALREADY_JOIN\020\244\r\022 \n\033RE"
    "T_TEAM_OTHER_ALREADY_JOIN\020\245\r\022\037\n\032RET_TEAM"
    "_OBJECT_NOT_CHANGE\020\246\r\022\031\n\024RET_TEAM_REPEAT"
    "_JOIN\020\247\r\022\026\n\021RET_TEAM_NO_EXIST\020\250\r\022\022\n\rRET_"
    "TEAM_FULL\020\251\r\022\034\n\027RET_TEAM_HAVE_APPLICANT\020"
    "\252\r\022\037\n\032RET_TEAM_INVALID_APPLICANT\020\253\r\022\030\n\023R"
    "ET_TEAM_NOT_MEMBER\020\254\r\022\036\n\031RET_TEAM_SETTIN"
    "G_LV_ERROR\020\255\r\022\033\n\026RET_TEAM_NO_AUTO_MATCH\020"
    "\256\r\022\035\n\030RET_TEAM_HAVE_AUTO_MATCH\020\257\r\022\030\n\023RET"
    "_TEAM_NOT_LEADER\020\260\r\022 \n\033RET_TEAM_DUP_NOT_"
    "AUTO_MATCH\020\261\r\022!\n\034RET_TEAM_MAP_CAN_NOT_OP"
    "ERATE\020\262\r\022\'\n\"RET_TEAM_MAP_OTHER_CAN_NOT_O"
    "PERATE\020\263\r\022!\n\034RET_TEAM_MAP_SELF_IN_SPECIA"
    "L\020\264\r\022\"\n\035RET_TEAM_MAP_OTHER_IN_SPECIAL\020\265\r"
    "\022!\n\034RET_TEAM_MAP_TARGET_IN_MATCH\020\266\r\022$\n\037R"
    "ET_TEAM_OBJECT_CAN_NOT_OPERATE\020\267\r\022\026\n\021RET"
    "_TEAM_NOT_FULL\020\270\r\022 \n\033RET_TEAM_NOT_PROMOT"
    "E_LEADER\020\271\r\022\"\n\035RET_TEAM_IN_MATCH_NOT_OPE"
    "RATE\020\272\r\022\034\n\027RET_TEAM_INVALID_OBJECT\020\273\r\022\033\n"
    "\026RET_USE_ITEM_DAY_LIMIT\020\210\016\022\035\n\030RET_FACTIO"
    "N_ALREADY_JOIN\020\354\016\022#\n\036RET_FACTION_NAME_AL"
    "REAY_EXISTS\020\355\016\022\037\n\032RET_FACTION_NAME_LEN_L"
    "IMIT\020\356\016\022!\n\034RET_FACTION_NOTICE_LEN_LIMIT\020"
    "\357\016\022\033\n\026RET_FACTION_NOT_EXISTS\020\360\016\022\031\n\024RET_F"
    "ACTION_NOT_JOIN\020\361\016\022\033\n\026RET_FACTION_NOT_LE"
    "ADER\020\362\016\022 \n\033RET_FACTION_SET_PARAM_ERROR\020\363"
    "\016\022#\n\036RET_FACTION_MEMBER_COUNT_LIMIT\020\364\016\022\""
    "\n\035RET_FACTION_HAS_NO_PERMISSION\020\365\016\022!\n\034RE"
    "T_FACTION_APPLY_NOT_EXISTS\020\366\016\022\"\n\035RET_FAC"
    "TION_OTHER_ALREDY_JOIN\020\367\016\022\037\n\032RET_FACTION"
    "_OTHER_NOT_JOIN\020\370\016\022(\n#RET_FACTION_OTHER_"
    "ALREDY_JOIN_OTHER\020\371\016\022#\n\036RET_FACTION_CAN_"
    "NOT_TRANS_SELF\020\372\016\022&\n!RET_FACTION_CAN_NOT"
    "_TRANS_NO_VICE\020\373\016\022$\n\037RET_FACTION_LEADER_"
    "CAN_NOT_EXIT\020\374\016\022\"\n\035RET_FACTION_ALREDAY_S"
    "AME_DUTY\020\375\016\022&\n!RET_FACTION_ALREADY_COMMO"
    "M_MEMBER\020\376\016\022\035\n\030RET_FACTION_INVALID_DUTY\020"
    "\377\016\022\'\n\"RET_FACTION_NOTICE_INTER_SEC_LIMIT"
    "\020\200\017\022!\n\034RET_FACTION_DUTY_COUNT_LIMIT\020\201\017\022#"
    "\n\036RET_FACTION_CHG_NAME_SAME_NAME\020\202\017\022#\n\036R"
    "ET_FACTION_CHG_NAME_LACK_ITEM\020\203\017\022\034\n\027RET_"
    "FACTION_FORBID_JOIN\020\204\017\022\034\n\027RET_FACTION_NA"
    "ME_NO_CHG\020\205\017\022!\n\034RET_FACTION_DONATE_NUM_L"
    "IMIT\020\206\017\022%\n RET_FACTION_ALREADY_FETCH_SAL"
    "ARY\020\207\017\022%\n RET_FACTION_CAN_NOT_FETCH_SALA"
    "RY\020\210\017\022\037\n\032RET_FACTION_OTHER_IN_TRANS\020\211\017\022\031"
    "\n\024RET_FACTION_IN_TRANS\020\212\017\022#\n\036RET_FACTION"
    "_OTHER_NOT_IN_SCENE\020\213\017\022\035\n\030RET_FACTION_NO"
    "T_IN_SCENE\020\214\017\022%\n RET_FACTION_TRANS_ALREA"
    "DY_INVITE\020\215\017\022,\n\'RET_FACTION_TRANS_OTHER_"
    "NOT_INVITE_SELF\020\216\017\022$\n\037RET_FACTION_CAN_NO"
    "T_ENTER_TRANS\020\217\017\022*\n%RET_FACTION_OTHER_CA"
    "N_NOT_ENTER_TRANS\020\220\017\022\037\n\032RET_FACTION_SKIL"
    "L_FULL_LEV\020\221\017\022\032\n\025RET_FACTION_LEV_LIMIT\020\222"
    "\017\022#\n\036RET_FACTION_PRE_SKILL_LEV_LACK\020\223\017\022/"
    "\n*RET_FACTION_CAN_NOT_DISMISS_IN_FACTION"
    "_ACT\020\224\017\022#\n\036RET_FACTION_BEAST_ALREADY_OPE"
    "N\020\225\017\022#\n\036RET_FACTION_BEAST_TRIBUTE_LACK\020\226"
    "\017\022\'\n\"RET_FACTION_BEAST_OPEN_COUNT_LIMIT\020"
    "\227\017\022\037\n\032RET_FACTION_BEAST_NOT_OPEN\020\230\017\022*\n%R"
    "ET_FACTION_CAN_NOT_QUIT_IN_BEAST_DUP\020\231\017\022"
    "#\n\036RET_FACTION_NOT_FACTION_MEMBER\020\232\017\022\036\n\031"
    "RET_FACTION_WAR_RACE_LOCK\020\233\017\022,\n\'RET_FACT"
    "ION_CAN_NOT_QUIT_IN_FACTION_ACT\020\234\017\022$\n\037RE"
    "T_FACTION_NOT_WIN_FACTION_MEM\020\235\017\022-\n(RET_"
    "FACTION_ALREADY_FETCH_WAR_WIN_REWARD\020\236\017\022"
    ",\n\'RET_FACTION_GUARD_ALREAD_JOIN_NOT_AGA"
    "IN\020\237\017\022\'\n\"RET_FACTION_MAG_RECORD_NOT_UPGR"
    "ADE\020\240\017\022-\n(RET_FACTION_MAG_RECORD_UPGRADE"
    "_LACK_ITEM\020\241\017\022#\n\036RET_ARENA_CAN_NOT_CHALL"
    "_MYSELF\020\320\017\022\'\n\"RET_ARENA_CAN_NOT_CHALL_TY"
    "PE_ERROR\020\321\017\022 \n\033RET_ARENA_CAN_NOT_CHALL_D"
    "ST\020\322\017\022(\n#RET_ARENA_CAN_NOT_CHALL_RANK_CH"
    "ANGE\020\323\017\022+\n&RET_ARENA_CAN_NOT_CHALL_DST_I"
    "N_BECHALL\020\324\017\022 \n\033RET_ARENA_CHALL_TIMES_LI"
    "MIT\020\325\017\022\031\n\024RET_ARENA_SCORE_LACK\020\326\017\022\032\n\025RET"
    "_ARENA_IN_CHALLING\020\327\017\022\031\n\024RET_ARENA_DEAD_"
    "LIMIT\020\330\017\022\"\n\035RET_MOUNT_BABY_EGG_SLOT_ERRO"
    "R\020\202\020\022(\n#RET_MOUNT_BABY_EGG_SLOT_STATE_ER"
    "ROR\020\203\020\022!\n\034RET_MOUNT_BABY_EGG_ITEM_EROR\020\204"
    "\020\022%\n RET_MOUNT_BABY_EGG_TIMEOUT_ERROR\020\205\020"
    "\022\027\n\022RET_MOUNT_UNACTIVE\020\206\020\022\032\n\025RET_MOUNT_U"
    "NUSE_STATE\020\207\020\022\030\n\023RET_MOUNT_LEVEL_MAX\020\210\020\022"
    "\027\n\022RET_MOUNT_UNSELECT\020\211\020\022\037\n\032RET_MOUNT_HA"
    "VE_SELECT_THIS\020\212\020\022\032\n\025RET_MOUNT_HAVE_RIDE"
    "ON\020\213\020\022\033\n\026RET_MOUNT_HAVE_RIDEOFF\020\214\020\022!\n\034RE"
    "T_MOUNT_KUN_MAX_WAKE_LEVEL\020\215\020\022!\n\034RET_MOU"
    "NT_TIWU_WIN_PROB_FAIL\020\216\020\022\031\n\024RET_MALL_CAN"
    "_NOT_BUY\020\264\020\022\027\n\022RET_MALL_LEV_LIMIT\020\265\020\022\027\n\022"
    "RET_MALL_VIP_LIMIT\020\266\020\022\027\n\022RET_MALL_NUM_LI"
    "MIT\020\267\020\022\025\n\020RET_MALL_NO_ITEM\020\270\020\022\035\n\030RET_BAT"
    "TLE_SLOT_CD_ERROR\020\231\021\022\036\n\031RET_BATTLE_SLOT_"
    "NOT_EXIST\020\232\021\022\035\n\030RET_BATTLE_SLOT_NO_DEITY"
    "\020\233\021\022\037\n\032RET_BATTLE_SLOT_NOT_UNLOCK\020\234\021\022\036\n\031"
    "RET_BATTLE_SLOT_HAS_DEITY\020\235\021\022\031\n\024RET_DEIT"
    "Y_NOT_EXITST\020\236\021\022\030\n\023RET_DEITY_MAX_LEVEL\020\237"
    "\021\022\027\n\022RET_DEITY_MAX_STAR\020\240\021\022\037\n\032RET_DEITY_"
    "EQUP_QUALITY_max\020\241\021\022\036\n\031RET_DEITY_GODHOOD"
    "_LV_FAIL\020\242\021\022&\n!RET_ENCYLOPSEDDIA_HOOD_BO"
    "OK_EXIST\020\312\021\022*\n%RET_ENCYLOPSEDDIA_HOOD_BO"
    "OK_NOT_EXIST\020\313\021\022*\n%RET_ENCYLOPSEDDIA_HOO"
    "D_BOOK_MAX_LEVEL\020\314\021\022-\n(RET_ENCYLOPSEDDIA"
    "_HOOD_BOOK_FLEETS_EXIST\020\315\021\0221\n,RET_ENCYLO"
    "PSEDDIA_HOOD_BOOK_EMPLOY_NOT_EXIST\020\316\021\0226\n"
    "1RET_ENCYLOPSEDDIA_HOOD_BOOK_EMPLOY_NOT_"
    "CAN_AVTIVE\020\317\021\022\030\n\023RET_BOSS_DRIVE_FULL\020\366\023\022"
    "\032\n\025RET_HATCH_SLOT_UNLOCK\020\212\024\022\026\n\021RET_HATCH"
    "_HAS_EGG\020\213\024\022\033\n\026RET_HATCH_SLOT_IS_LOCK\020\214\024"
    "\022\031\n\024RET_HATCH_NO_TO_TIME\020\215\024\022\033\n\026RET_HATCH"
    "_NOT_ALL_OPEN\020\216\024\022\035\n\030RET_PET_FETTER_IS_AC"
    "TIVE\020\217\024\022\030\n\023RET_PET_NOT_HAS_PET\020\220\024\022\023\n\016RET"
    "_PET_IS_MAX\020\221\024\022\023\n\016RET_PET_LV_MAX\020\222\024\022\027\n\022R"
    "ET_PET_STEPLV_MAX\020\223\024\022\027\n\022RET_PET_STARLV_M"
    "AX\020\224\024\022%\n RET_PET_STAR_COST_PET_NO_ENGOUT"
    "H\020\225\024\022\033\n\026RET_PET_FIGHT_NOT_REST\020\226\024\022 \n\033RET"
    "_PET_IS_NO_GROW_NOT_REST\020\227\024\022\027\n\022RET_PET_R"
    "ES_PETMAX\020\230\024\022\032\n\025RET_PET_NOT_DECOMPOSE\020\231\024"
    "\022\031\n\024RET_PET_NOT_CAN_STAR\020\232\024\022\033\n\026RET_PET_R"
    "EPEATED_FIGHT\020\233\024\022 \n\033RET_PET_NOT_GETED_NO"
    "_ACTIVE\020\234\024\022\026\n\021RET_PET_IS_ACTIVE\020\235\024\022\036\n\031RE"
    "T_PET_GROW_STAR_NO_GROW\020\236\024\022 \n\033RET_PET_YA"
    "OHUN_FIGHT_UNLOCK\020\237\024\022\034\n\027RET_PET_YAOHUN_N"
    "O_FIGHT\020\240\024\022\031\n\024RET_PET_YAOHUN_BEAST\020\241\024\022\034\n"
    "\027RET_PET_YAOHUN_NOT_SAME\020\242\024\022\030\n\023RET_PET_Y"
    "AOLU_LIMIT\020\243\024\022\035\n\030RET_PET_LIANYAO_COND_ER"
    "R\020\244\024\022\027\n\022RET_PET_YAOQI_LACK\020\245\024\022\032\n\025RET_PET"
    "_YAOHUN_LV_MAX\020\246\024\022\035\n\030RET_PET_YAOHUN_BREA"
    "K_MAX\020\247\024\022\034\n\027RET_PET_YAOHUN_TQ_BUYED\020\250\024\022\033"
    "\n\026RET_PET_SUIT_COND_LACK\020\251\024\022\031\n\024RET_PET_S"
    "UIT_ACTIVED\020\252\024\022\032\n\025RET_PET_RESET_NO_GROW\020"
    "\253\024\022\036\n\031RET_ESCORT_TASK_NOT_EXIST\020\214\025\022\032\n\025RE"
    "T_ESCORT_TASK_EXIST\020\215\025\022 \n\033RET_ESCORT_TAS"
    "K_TIMES_LIMIT\020\216\025\022!\n\034RET_ESCORT_UP_QUALIT"
    "Y_FAILED\020\217\025\022\023\n\016RET_ESCORT_MAX\020\220\025\022\030\n\023RET_"
    "ASSIST_NOT_HELP\020\240\025\022!\n\034RET_NO_FACTION_NOT"
    "_SEND_HELP\020\241\025\022\034\n\027RET_HAS_ASSIST_NOT_SEND"
    "\020\242\025\022\030\n\023RET_IS_HELPING_THIS\020\243\025\022\036\n\031RET_HEL"
    "PER_GIFT_NUM_LIMIT\020\244\025\022\020\n\013RET_IS_RECV\020\245\025\022"
    "\033\n\026RET_IS_HELPER_NUM_LACK\020\246\025\022\036\n\031RET_GODE"
    "VIL_ALREADY_FETCH\020\360\025\022\036\n\031RET_GODEVIL_CAN_"
    "NOT_FETCH\020\361\025\022\033\n\026RET_GODEVIL_NOT_ACTIVE\020\362"
    "\025\022#\n\036RET_GODEVIL_UPGRADE_FULL_LEVEL\020\363\025\022!"
    "\n\034RET_GODEVIL_UPGRADE_EXP_LACK\020\364\025\022\026\n\021RET"
    "_GODEVIL_IN_CD\020\365\025\022\037\n\032RET_GODEVIL_NOT_CHG"
    "_FACADE\020\366\025\022\035\n\030RET_GODEVIL_IN_CHG_STATE\020\367"
    "\025\022\037\n\032RET_GODEVIL_ALREADY_ACTIVE\020\370\025\022 \n\033RE"
    "T_GODEVIL_EQUIP_NOT_EXIST\020\371\025\022\037\n\032RET_GODE"
    "VIL_EQUIP_POS_LOCK\020\372\025\022#\n\036RET_GODEVIL_EQU"
    "IP_POS_NO_DRESS\020\373\025\022\033\n\026RET_GODEVIL_LEVEL_"
    "LACK\020\374\025\022\031\n\024RET_GODEVIL_QUA_LACK\020\375\025\022\"\n\035RE"
    "T_GODEVIL_QUA_LACK_MATERIAL\020\376\025\022\033\n\026RET_GO"
    "DEVIL_QUA_LV_MAX\020\377\025\022$\n\037RET_GODEVIL_CAN_N"
    "OT_WEAR_QUA_LV\020\200\026\022$\n\037RET_GODEVIL_STRONG_"
    "EXP_OVERFLOW\020\201\026\022&\n!RET_GODEVIL_WEAR_QUA_"
    "EXP_OVERFLOW\020\202\026\022%\n RET_GODEVIL_QUA_LV_QU"
    "ALITY_LIMIT\020\203\026\022\037\n\032RET_GODEVIL_CAN_NOT_QU"
    "A_LV\020\230\026\022!\n\034RET_GODEVIL_WEAR_QUA_LV_LACK\020"
    "\231\026\022%\n RET_GODEVIL_QUA_LV_MATERIAL_LACK\020\232"
    "\026\022\033\n\026RET_GODEVIL_SAVVY_LACK\020\233\026\022\036\n\031RET_GO"
    "DEVIL_QUA_NOT_TRANS\020\234\026\022\036\n\031RET_GODEVIL_CA"
    "N_NOT_TRANS\020\235\026\022#\n\036RET_GODEVIL_MAKE_LACK_"
    "MATERIAL\020\236\026\022$\n\037RET_GODEVIL_EQUIP_MAKE_PO"
    "S_LOCK\020\237\026\022!\n\034RET_PT_LvUpMaterialNotEnoug"
    "h\020\204\026\022\024\n\017RET_PT_DjFailed\020\205\026\022 \n\033RET_PT_GB_"
    "PARTICLE_NOT_CMPT\020\206\026\022#\n\036RET_PT_GBEnterAr"
    "eaLvlNotEnough\020\207\026\022\033\n\026RET_PT_EnergyNotEno"
    "ugh\020\210\026\022\026\n\021RET_PT_LevelLimit\020\211\026\022\026\n\021RET_PT"
    "_EnergyLack\020\212\026\022\026\n\021RET_GVB_ScoreLack\020\213\026\022\030"
    "\n\023RET_GVB_DailyRecved\020\214\026\022\026\n\021RET_RED_NOT_"
    "EXIST\020\324\026\022\031\n\024RET_RED_FETCH_FINISH\020\325\026\022\032\n\025R"
    "ET_RED_FETCH_ALREADY\020\326\026\022\032\n\025RET_RED_CAN_N"
    "OT_FETCH\020\327\026\022\037\n\032RET_RED_WAI_SEND_NOT_EXIS"
    "T\020\330\026\022\"\n\035RET_RED_WAI_SEND_CAN_NOT_SEND\020\331\026"
    "\022\033\n\026RET_RED_SEND_NUM_LIMIT\020\332\026\022\034\n\027RET_RED"
    "_FETCH_VAL_LIMIT\020\333\026\022\033\n\026RET_RED_WORD_LEN_"
    "LIMIT\020\334\026\022!\n\034RET_COLLECT_IN_COLLECT_STATE"
    "\020\270\027\022\032\n\025RET_COLLECT_NOT_EXIST\020\271\027\022\035\n\030RET_C"
    "OLLECT_ALREADY_DEAD\020\272\027\022 \n\033RET_COLLECT_CA"
    "N_NOT_COLLECT\020\273\027\022\034\n\027RET_COLLECT_HAS_NO_F"
    "UNC\020\274\027\022\032\n\025RET_COLLECT_NUM_LIMIT\020\275\027\022\025\n\020RE"
    "T_ACT_NOT_OPEN\020\234\030\022\032\n\025RET_ACT_ALREADY_CLO"
    "SE\020\235\030\022\022\n\rRET_QY_PASSED\020\236\030\022\034\n\027RET_PVP_ALR"
    "EADY_PK_MODE\020\345\031\022\027\n\022RET_PVP_PK_MODE_CD\020\346\031"
    "\022$\n\037RET_PVP_MAP_CAN_NOT_CHG_PK_MODE\020\347\031\022 "
    "\n\033RET_PVP_CAN_NOT_CHG_PK_MODE\020\350\031\022\"\n\035RET_"
    "PVP_EMBLEM_LV_ALREADY_MAX\020\351\031\022$\n\037RET_PVP_"
    "EMBLEM_STAR_ALREADY_MAX\020\352\031\022\036\n\031RET_PVP_EM"
    "BLEM_NOT_ACTIVE\020\353\031\022\036\n\031RET_PVP_1V1_ALREAD"
    "Y_FETCH\020\354\031\022\036\n\031RET_PVP_1V1_CAN_NOT_FETCH\020"
    "\355\031\022!\n\034RET_PVP_1V1_NOT_IN_MATCH_MAP\020\356\031\022\036\n"
    "\031RET_PVP_1V1_CAN_NOT_MATCH\020\357\031\022\031\n\024RET_PVP"
    "_1V1_IN_MATCH\020\360\031\022\031\n\024RET_PVP_1V1_IN_READY"
    "\020\361\031\022\031\n\024RET_PAY_USED_PAYMENT\020\330\035\022\034\n\027RET_PA"
    "Y_INVALID_PAYMENT\020\331\035\022\032\n\025RET_PAY_INVALID_"
    "MONEY\020\332\035\022\036\n\031RET_PAY_REQ_ODER_CONF_ERR\020\333\035"
    "\022\036\n\031RET_PAY_REQ_ODER_NOT_OPEN\020\334\035\022$\n\037RET_"
    "PAY_REQ_ODER_CHAN_FORBIDDEN\020\335\035\022%\n RET_PA"
    "Y_REQ_ODER_INVALID_PRODUCT\020\336\035\022%\n RET_PAY"
    "_REQ_ODER_PRODUCT_LST_LEN\020\337\035\022\037\n\032RET_PAY_"
    "REQ_ODER_PRICE_ERR\020\340\035\022(\n#RET_PAY_REQ_ODE"
    "R_PRODUCT_TYPE_LIMIT\020\341\035\022\036\n\031RET_PAY_WEB_O"
    "RDER_RETCODE\020\212\036\022\034\n\027RET_PAY_WEB_PAY_RETCO"
    "DE\020\213\036\022\031\n\024RET_SJ_NOT_DECOMPOSE\020\274\036\022\"\n\035RET_"
    "SJ_IN_DRESS_NOT_DECOMPOSE\020\275\036\022\027\n\022RET_SJ_A"
    "Q_BAG_FULL\020\276\036\022\027\n\022RET_SJ_LJ_BAG_FULL\020\277\036\022\037"
    "\n\032RET_SJ_NOT_RETURN_IN_DRESS\020\300\036\022\026\n\021RET_S"
    "J_NOT_RETURN\020\301\036\022\026\n\021RET_SJ_NOT_STRONG\020\302\036\022"
    "\036\n\031RET_SJ_METERIAL_DRESS_ERR\020\303\036\022\031\n\024RET_S"
    "J_METERIAL_LACK\020\304\036\022\025\n\020RET_SJ_LEVEL_MAX\020\305"
    "\036\022\024\n\017RET_SJ_NOT_POUR\020\306\036\022\024\n\017RET_SJ_POUR_M"
    "AX\020\307\036\022\025\n\020RET_SJ_BREAK_MAX\020\310\036\022\026\n\021RET_SJ_A"
    "WAKEN_MAX\020\311\036\022\024\n\017RET_AT_NUM_LEAK\020\356\036\022\027\n\022RE"
    "T_AT_IS_UNLOCKED\020\357\036\022\033\n\026RET_AT_NOT_FULL_U"
    "NLOCK\020\360\036\022\022\n\rRET_AT_LV_MAX\020\361\036\022\027\n\022RET_AT_P"
    "RCOSS_LEAK\020\362\036\022\025\n\020RET_AT_STAR_LEAK\020\363\036\022\024\n\017"
    "RET_AT_STAR_MAX\020\364\036\022\026\n\021RET_AT_IS_BLESSED\020"
    "\365\036\022\027\n\022RET_MARRY_APPLYING\020\240\037\022\025\n\020RET_MARRY"
    "_ACKING\020\241\037\022\036\n\031RET_MARRY_NOT_APPLY_OTHER\020"
    "\242\037\022\031\n\024RET_MARRY_IS_MARRYED\020\243\037\022\027\n\022RET_MAR"
    "RY_IS_INDUP\020\244\037\022\035\n\030RET_MARRY_DST_LEAVE_LA"
    "CK\020\245\037\022\031\n\024RET_MARRY_LEAVE_LACK\020\246\037\022\031\n\024RET_"
    "MARRY_NOT_FRIEND\020\247\037\022\031\n\024RET_MARRY_NOT_ONL"
    "INE\020\250\037\022\035\n\030RET_MARRY_CHILD_NOT_TIME\020\251\037\022\037\n"
    "\032RET_MARRY_DIVORCE_NO_MARRY\020\252\037\022\037\n\032RET_MA"
    "RRY_CHILD_IS_ACTIVED\020\253\037\022\036\n\031RET_MARRY_CHI"
    "LD_NO_ACTIVE\020\254\037\022\033\n\026RET_MARRY_CHILD_LV_MA"
    "X\020\255\037\022\035\n\030RET_MARRY_CHILD_STAR_MAX\020\256\037\022 \n\033R"
    "ET_MARRY_EXPRESS_NO_FRIEND\020\257\037\022!\n\034RET_MAR"
    "RY_NOT_ONLINE_EXPRESS\020\260\037\022\032\n\025RET_MARRY_EX"
    "PRESS_MAX\020\261\037\022\030\n\023RET_MARRY_NOT_MARRY\020\262\037\022\033"
    "\n\026RET_MARRY_BUY_NUM_LEAK\020\263\037\022\034\n\027RET_MARRY"
    "_NO_DRESS_LOCK\020\264\037\022\032\n\025RET_MARRY_LOCK_LV_M"
    "AX\020\265\037\022\034\n\027RET_MARRY_DST_DUP_LIMIT\020\266\037\022!\n\034R"
    "ET_MARRY_DST_GIVE_DUP_LIMIT\020\267\037\022 \n\033RET_MA"
    "RRY_CARD_NOT_TIME_OUT\020\270\037\022\033\n\026RET_MARRY_CA"
    "RD_NOT_BUY\020\271\037\022\034\n\027RET_MARRY_NOT_CARD_RECV"
    "\020\272\037\022\035\n\030RET_MARRY_DST_REFUSE_BUY\020\273\037\022\037\n\032RE"
    "T_MARRY_WEDDING_NO_MARRY\020\274\037\022\032\n\025RET_MARRY"
    "_WEDDING_DUE\020\275\037\022\035\n\030RET_MARRY_OUT_APPLY_T"
    "IME\020\276\037\022\036\n\031RET_MARRY_NOT_WEDDING_NUM\020\277\037\022!"
    "\n\034RET_MARRY_WEDDING_NOT_MASTER\020\300\037\022\036\n\031RET"
    "_MARRY_WEDDING_IS_OVER\020\301\037\022\"\n\035RET_MARRY_W"
    "EDDING_INVITE_FULL\020\302\037\022\032\n\025RET_MARRY_NO_IN"
    "_APPLY\020\303\037\022\026\n\021RET_MARRY_INVITED\020\304\037\022\037\n\032RET"
    "_MARRY_WEDDING_NO_START\020\305\037\022\030\n\023RET_MARRY_"
    "NO_ACCESS\020\306\037\022\031\n\024RET_MARRY_NO_WEDDING\020\307\037\022"
    "\031\n\024RET_MARRY_APPLY_FULL\020\310\037\022\027\n\022RET_MARRY_"
    "IN_APPLY\020\311\037\022$\n\037RET_MARRY_HAS_WEDDING_NO_"
    "DIVOCE\020\312\037\022\033\n\026RET_MARRY_IS_IN_INVITE\020\313\037\022\030"
    "\n\023RET_MARRY_WARM_FULL\020\314\037\022\030\n\023RET_MARRY_YX"
    "_IS_COL\020\315\037\022\034\n\027RET_MARRY_CAKE_NUM_LEAK\020\316\037"
    "\022\027\n\022RET_MERGE_COST_ERR\020\350 \022\022\n\rRET_MERGE_M"
    "AX\020\351 \022\027\n\022RET_MERGE_COND_ERR\020\352 \022&\n!RET_DR"
    "AGON_SOUL_WEAR_QUALITY_LACK\020\206!\022&\n!RET_DR"
    "AGON_SOUL_NO_UNDRESS_WAKEUP\020\207!\022)\n$RET_DR"
    "AGON_SOUL_WAKEUP_POSITION_LACK\020\210!\022%\n RET"
    "_DRAGON_SOUL_WAKEUP_MAX_LEVEL\020\211!\022#\n\036RET_"
    "DRAGON_SOUL_SLOT_NO_UNLOCK\020\212!\022\036\n\031RET_CHA"
    "RGE_OPEN_DAY_LIMIT\020\260\"\022\035\n\030RET_CHARGE_ALRE"
    "ADY_FETCH\020\261\"\022\035\n\030RET_CHARGE_CAN_NOT_FETCH"
    "\020\262\"\022\036\n\031RET_GIFT_COND_ALREADY_BUY\020\342\"\022 \n\033R"
    "ET_GIFT_COND_ALREADY_CLOSE\020\343\"\022\036\n\031RET_GIF"
    "T_COND_CAN_NOT_BUY\020\344\"\022\033\n\026RET_GIFT_COND_N"
    "OT_OPEN\020\345\"\022\036\n\031RET_GIFT_ZERO_ALREADY_BUY\020"
    "\346\"\022\032\n\025RET_GIFT_ZERO_NOT_BUY\020\347\"\022 \n\033RET_GI"
    "FT_ZERO_ALREADY_FETCH\020\350\"\022 \n\033RET_GIFT_ZER"
    "O_CAN_NOT_FETCH\020\351\"\022\027\n\022RET_VIP_IS_FORERVE"
    "\020\366\"\022\034\n\027RET_VIP_HAS_BUY_LV_GIFT\020\367\"\022\031\n\024RET"
    "_VIP_HAS_BUY_ZERO\020\370\"\022\027\n\022RET_VIP_NOT_ACTI"
    "VE\020\371\"\022\034\n\027RET_VIP_RECVED_DAY_GIFT\020\372\"\022\030\n\023R"
    "ET_VIP_NO_BUY_ZERO\020\373\"\022\033\n\026RET_VIP_RECV_TI"
    "ME_LEAK\020\374\"\022\027\n\022RET_VIP_RECVED_EXP\020\375\"\022%\n R"
    "ET_FEST_LACK_RESET_LOTTERY_ITEM\020\212#\022\034\n\027RE"
    "T_FEST_SHOP_NUM_LIMIT\020\224#\022\032\n\025RET_FEST_SIG"
    "N_ALREADY\020\225#\022%\n RET_FEST_DIG_EGG_CAN_NOT"
    "_LOTTERY\020\226#\022 \n\033RET_FEST_SHOP_GIFT_NOT_OP"
    "EN\020\227#\022%\n RET_FEST_SHOP_GIFT_ALREADY_CLOS"
    "E\020\230#\022\033\n\026RET_FEST_RANK_NOT_OPEN\020\231#\022\034\n\027RET"
    "_FEST_BOSSKF_NO_KILL\020\232#\022\027\n\022RET_FEST_IS_R"
    "ECVED\020\233#\022$\n\037RET_FEST_DIG_EGG_TASK_NOT_EX"
    "IST\020\234#\022$\n\037RET_FEST_DIG_EGG_TASK_NOT_FETC"
    "H\020\235#\022\036\n\031RET_FEST_REWARD_NOT_EXIST\020\236#\022%\n "
    "RET_FEST_LACK_RECHARGE_NOT_FETCH\020\237#\022\034\n\027R"
    "ET_FEST_OPEN_DAY_LIMIT\020\240#\022\037\n\032RET_FEST_FU"
    "NC_UNLOCK_LIMIT\020\241#\022 \n\033RET_FEST_DAY_MALL_"
    "NOT_EXIST\020\242#\022\033\n\026RET_FEST_MALL_NOT_OPEN\020\243"
    "#\022\034\n\027RET_FEST_MALL_NOT_EXIST\020\244#\022!\n\034RET_F"
    "EST_MALL_ITEM_NOT_EXIST\020\245#\022#\n\036RET_FEST_C"
    "AN_NOT_RESET_LOTTERY\020\246#\022\031\n\024RET_MARKET_IS"
    "_FOLLOW\020\250#\022\034\n\027RET_MARKET_FOLLOW_LIMIT\020\251#"
    "\022\026\n\021RET_MARKET_DONWED\020\252#\022\030\n\023RET_MARKET_V"
    "IE_FAIL\020\253#\022\031\n\024RET_MARKET_VIE_OWNER\020\254#\022\027\n"
    "\022RET_MARKET_VIE_ING\020\255#\022\031\n\024RET_MARKET_UP_"
    "UNBIND\020\256#\022\030\n\023RET_MARKET_UP_LIMIT\020\257#\022\034\n\027R"
    "ET_EXCHANGE_CODE_IN_CD\020\306#\022\034\n\027RET_EXCHANG"
    "E_CODE_ERROR\020\307#\022\"\n\035RET_EXCHANGE_CODE_ALR"
    "EADY_USE\020\310#\022!\n\034RET_EXCHANGE_CODE_NOT_EXI"
    "STS\020\311#\022 \n\033RET_EXCHANGE_CODE_NO_EFFECT\020\312#"
    "\022 \n\033RET_EXCHANGE_CODE_NOT_START\020\313#\022\032\n\025RE"
    "T_EXCHANGE_CODE_END\020\314#\022!\n\034RET_EXCHANGE_C"
    "ODE_CHAN_LIMIT\020\315#\022#\n\036RET_EXCHANGE_CODE_S"
    "ERVER_LIMIT\020\316#\022\033\n\026RET_EXCHANGE_CODE_ONCE"
    "\020\317#\022\037\n\032RET_DRAGON_ALREADY_MAX_LEV\020\371#\022\035\n\030"
    "RET_DRAGON_CAN_NOT_LEVUP\020\372#\022\032\n\025RET_DRAGO"
    "N_STAR_LIMIT\020\373#\022\032\n\025RET_DRAGON_NOT_ACTIVE"
    "\020\374#\022\036\n\031RET_DRAGON_USE_FRAG_LIMIT\020\375#\022 \n\033R"
    "ET_DRAGON_LEVUP_STAR_LIMIT\020\376#\022\036\n\031RET_SUB"
    "PACK_ALREADY_FETCH\020\276$\022\035\n\030RET_SUBPACK_INV"
    "ALID_TYPE\020\277$\022\036\n\031RET_SUBPACK_CAN_NOT_FETC"
    "H\020\300$\022\030\n\023RET_CLAN_APPLY_FULL\020\202)\022\021\n\014RET_CL"
    "AN_MAX\020\203)\022\033\n\026RET_HAS_CLAN_NO_CREATE\020\204)\022\033"
    "\n\026RET_ONE_HOUR_NO_CREATE\020\205)\022\032\n\025RET_CLAN_"
    "REFUSE_APPLY\020\206)\022\027\n\022RET_CLAN_NO_LEADER\020\207)"
    "\022\033\n\026RET_CLAN_BADGE_NOT_GET\020\210)\022\030\n\023RET_CLA"
    "N_NAME_EMPTY\020\211)\022\031\n\024RET_CLAN_NO_IN_APPLY\020"
    "\212)\022\032\n\025RET_CLAN_TARGE_IN_BAN\020\213)\022\024\n\017RET_CL"
    "AN_NO_MEM\020\214)\022\032\n\025RET_CLAN_KICK_NO_TIME\020\215)"
    "\022\024\n\017RET_CLAN_IS_MEM\020\216)\022\022\n\rRET_CLAN_FULL\020"
    "\217)\022\033\n\026RET_CLAN_INVITE_REFUSE\020\220)\022\021\n\014RET_C"
    "LAN_DIS\020\221)\022\026\n\021RET_CLAN_NO_CLAN3\020\223)\022\026\n\021RE"
    "T_CLAN_NO_CLAN5\020\224)\022\030\n\023RET_CLAN_DAY_INVIT"
    "E\020\225)\022!\n\034RET_CLAN3_NOT_MATCH_HAS_TEAM\020\226)\022"
    "\037\n\032RET_CLAN3_NO_CLAN_NO_MATCH\020\227)\022\037\n\032RET_"
    "CLAN3_NO_MATCH_NO_TEAM\020\230)\022&\n!RET_CLAN3_N"
    "O_MATCH_TEAM_HAS_OTHER\020\231)\022!\n\034RET_CLAN3_N"
    "O_LEADER_NO_MATCH\020\232)\022(\n#RET_CLAN3_NO_MAT"
    "CH_TEAM_MEM_NO_WAIT\020\233)\022\036\n\031RET_CLAN3_RECV"
    "_DAY_REWARD\020\234)\022\036\n\031RET_CLAN3_DAY_REWARD_L"
    "ACK\020\235)\022\037\n\032RET_CLAN3_ACT_OPEN_NO_KICK\020\236)\022"
    " \n\033RET_CLAN3_ACT_OPEN_NO_LEAVE\020\237)\022\027\n\022RET"
    "_CLAN3_HAS_CLAN\020\240)\022\035\n\030RET_CLAN3_MATCH_ME"
    "M_LACK\020\241)\022\034\n\027RET_CLAN3_NOT_IN_ACTIVE\020\242)\022"
    "\024\n\017RET_TURN_LV_MAX\020\252)\022\031\n\024RET_TURN_LV_EXP"
    "_LACK\020\253)\022\023\n\016RET_TURN_CHGED\020\254)\022\025\n\020RET_TUR"
    "N_HELPERD\020\255)\022\032\n\025RET_TURN_HELP_LV_LACK\020\256)"
    "\022\034\n\027RET_TURN_LV_MAX_NOT_CHG\020\257)\022\026\n\021RET_TU"
    "RN_NUM_LACK\020\260)\022\025\n\020RET_TURN_CHG_MAX\020\261)\022\031\n"
    "\024RET_TURN_CHG_LV_LACK\020\262)\022\034\n\027RET_TURN_NO_"
    "DRESS_EQUIP\020\263)\022\030\n\023RET_TURN_STRONG_MAX\020\264)"
    "\022\027\n\022RET_TURN_EVOLE_MAX\020\265)\022\035\n\030RET_TURN_EV"
    "OLE_COND_LACK\020\266)\022\034\n\027RET_TURN_EVOLE_COST_"
    "ERR\020\267)\022\030\n\023RET_TURN_AWAKEN_MAX\020\270)\022\036\n\031RET_"
    "TURN_AWAKEN_COND_LACK\020\271)\022\035\n\030RET_TURN_AWA"
    "KEN_COST_ERR\020\272)\022\026\n\021RET_TURN_STAR_MAX\020\273)\022"
    "\037\n\032RET_TURN_STAR_UP_COND_LACK\020\274)\022\034\n\027RET_"
    "TURN_STRONG_LV_LACK\020\275)\022\033\n\026RET_TURN_STAR_"
    "NUM_LACK\020\276)\022\034\n\027RET_TURN_STAR_ACTIVE_BF\020\277"
    ")\022\025\n\020RET_HUNLING_LACK\020\310)\022\026\n\021RET_SOUL_STE"
    "P_MAX\020\311)\022\034\n\027RET_SOUL_POOL_BLESS_MAX\020\312)\022\031"
    "\n\024RET_SOUL_SPIRIT_SAME\020\313)\022\"\n\035RET_SOUL_SP"
    "IRIT_SLOT_NOT_OPEN\020\314)\022\036\n\031RET_SOUL_SPIRIT"
    "_NOT_DRESS\020\315)\022\036\n\031RET_SOUL_SPIRIT_BREAK_M"
    "AX\020\316)\022\037\n\032RET_SOUL_SPIRIT_STRONG_MAX\020\317)\022\035"
    "\n\030RET_SOUL_SPIRIT_MAKE_MAX\020\320)\022\031\n\024RET_SOU"
    "L_MATIAL_LACK\020\321)\022\034\n\027RET_SOUL_BONE_NOT_DR"
    "ESS\020\322)\022\032\n\025RET_SOUL_BONE_IS_WAKE\020\323)\022\036\n\031RE"
    "T_SOUL_GUWEN_IS_DRESSED\020\324)\022 \n\033RET_SOUL_L"
    "AST_SUIT_NOT_FULL\020\325)\022!\n\034RET_RUNE_CORE_CA"
    "N_CORE_DRESS\020\374*\022\037\n\032RET_RUNE_NOC_NO_DRESS"
    "_CORE\020\375*\022\033\n\026RET_RUNE_NO_DRESS_RUNE\020\376*\022\024\n"
    "\017RET_RUNE_LV_MAX\020\377*\022\026\n\021RET_RUNE_STEP_MAX"
    "\020\200+\022!\n\034RET_RUNE_QUENCHING_GIRD_LACK\020\201+\022\033"
    "\n\026RET_RUNE_QUENCHING_MAX\020\202+\022\033\n\026RET_RUNE_"
    "WORD_STAR_MAX\020\203+\022\033\n\026RET_RUNE_FENGYIN_ERR"
    "OR\020\204+\022\035\n\030RET_RUNE_ACTIVE_JJ_ERROR\020\205+\022\030\n\023"
    "RET_RUNE_SORING_MAX\020\206+\022!\n\034RET_RUNE_SORIN"
    "G_QUAILTY_LACK\020\207+\032\002\020\001*k\n\016Privilege_Type\022"
    "\024\n\020pt_yaoci_add_exp\020\022\022\021\n\rpt_sj_add_exp\020\023"
    "\022\033\n\027pt_kill_monster_add_exp\020\024\022\023\n\017pt_seat"
    "_add_exp\020\025*\360\001\n\013LOGOUT_TYPE\022\017\n\013LOGOUT_NON"
    "E\020\000\022\021\n\rLOGOUT_LOGOUT\020\001\022\022\n\016LOGOUT_REPLACE"
    "\020\002\022\027\n\023LOGOUT_DIS_TIME_OUT\020\003\022\023\n\017LOGOUT_KI"
    "CK_OUT\020\004\022\027\n\023LOGOUT_CHANGE_LOGIC\020\005\022\033\n\027LOG"
    "OUT_RETURN_ROLE_LIST\020\006\022\031\n\025LOGOUT_LOGIN_T"
    "IME_OUT\020\007\022\023\n\017LOGOUT_WEB_KICK\020\010\022\025\n\021LOGOUT"
    "_CHEAR_KICK\020\t*7\n\tEMailType\022\024\n\020MAIL_TYPE_"
    "PLAYER\020\002\022\024\n\020MAIL_TYPE_SYSTEM\020\003*\330\003\n\014CHAT_"
    "CHANNEL\022\025\n\021CHAT_CHANNEL_NONE\020\000\022\026\n\022CHAT_C"
    "HANNEL_WORLD\020\001\022\026\n\022CHAT_CHANNEL_GUILD\020\002\022\027"
    "\n\023CHAT_CHANNEL_ENLIST\020\003\022\025\n\021CHAT_CHANNEL_"
    "TEAM\020\004\022\026\n\022CHAT_CHANNEL_SCENE\020\005\022\026\n\022CHAT_C"
    "HANNEL_CROSS\020\006\022\027\n\023CHAT_CHANNEL_SYSTEM\020\007\022"
    "\030\n\024CHAT_CHANNEL_PRIVATE\020\010\022\026\n\022CHAT_CHANNE"
    "L_RUMOR\020\t\022\025\n\021CHAT_CHANNEL_HORN\020\n\022\036\n\032CHAT"
    "_CHANNEL_BACKEND_RUMOR\020\013\022\031\n\025CHAT_CHANNEL"
    "_ACTIVITY\020\014\022\032\n\026CHAT_CHANNEL_POKERROOM\020\r\022"
    "\026\n\022CHAT_CHANNEL_CLAN3\020\016\022\026\n\022CHAT_CHANNEL_"
    "CLAN5\020\017\022 \n\034CHAT_CHANNEL_RUMOR_NO_DHORSE\020"
    "\020\022\026\n\022CHAT_CHANNEL_LIMIT\020\021*\204\001\n\nFacadeType"
    "\022\024\n\020FACADE_WING_TYPE\020\001\022\030\n\024FACADE_TREASUR"
    "E_TYPE\020\002\022\030\n\024FACADE_ARTIFACT_TYPE\020\003\022\027\n\023FA"
    "CADE_PARTNER_TYPE\020\004\022\023\n\017FACADE_TYPE_MAX\020\005"
    "*\253\007\n\026FunctionUnlock_ID_TYPE\022 \n\033FunctionU"
    "nlock_ID_TYPE_ROLE\020\351\007\022!\n\034FunctionUnlock_"
    "ID_TYPE_SKILL\020\352\007\022#\n\036FunctionUnlock_ID_TY"
    "PE_RANKING\020\200\010\022\"\n\035FunctionUnlock_ID_TYPE_"
    "MOUNTS\020\336\017\022 \n\033FunctionUnlock_ID_TYPE_WING"
    "\020\346\017\022$\n\037FunctionUnlock_ID_TYPE_TREASURE\020\352"
    "\017\022$\n\037FunctionUnlock_ID_TYPE_ARTIFACT\020\356\017\022"
    "#\n\036FunctionUnlock_ID_TYPE_PARTNER\020\364\017\022)\n$"
    "FunctionUnlock_ID_TYPE_GodEvilNotice\020\217\020\022"
    "\'\n\"FunctionUnlock_ID_TYPE_GodEvilTask\020\220\020"
    "\022!\n\034FunctionUnlock_ID_TYPE_Marry\020\355\017\022 \n\033F"
    "unctionUnlock_ID_TYPE_Turn\020\233\020\022+\n&Functio"
    "nUnlock_ID_TYPE_ARENA_MIAOSHANG\020\355\027\022\'\n\"Fu"
    "nctionUnlock_ID_TYPE_ChargeFirst\020\245\037\022(\n#F"
    "unctionUnlock_ID_TYPE_ChargeSecond\020\270\037\022%\n"
    " FunctionUnlock_ID_TYPE_ChargeDia\020\271\037\022&\n!"
    "FunctionUnlock_ID_TYPE_ChargeStar\020\272\037\022&\n!"
    "FunctionUnlock_ID_TYPE_ChargeKing\020\273\037\022%\n "
    "FunctionUnlock_ID_TYPE_OpenTotal\020\274\037\022\'\n\"F"
    "unctionUnlock_ID_TYPE_XiuZhenRoad\020\275\037\022\037\n\032"
    "FunctionUnlock_ID_TYPE_1v1\020\205 \022/\n*Functio"
    "nUnlock_ID_TYPE_LOGON_REWARD_CANCLE\020\267\037\022!"
    "\n\034FunctionUnlock_ID_TYPE_DIETY\020\346\037\022\033\n\026Fun"
    "ctionUnlock_ID_Soul\020\302(*\200\001\n\017EFacadeAttrTy"
    "pe\022\025\n\021EAttrType_Advance\020\001\022\025\n\021EAttrType_F"
    "antasy\020\002\022\026\n\022EAttrType_Fragment\020\003\022\023\n\017EAtt"
    "rType_Skill\020\004\022\022\n\016EAttrType_SOUL\020\005*\354\001\n\022ED"
    "ailyTaskPlayType\022\032\n\026EDailyTaskPlayType_D"
    "UP\020\001\022\033\n\027EDailyTaskPlayType_BOSS\020\002\022\033\n\027EDa"
    "ilyTaskPlayType_TASK\020\003\022\036\n\032EDailyTaskPlay"
    "Type_ExpQIFU\020\004\022#\n\037EDailyTaskPlayType_Fac"
    "tionTrans\020\005\022\035\n\031EDailyTaskPlayType_YaoChi"
    "\020\006\022\034\n\030EDailyTaskPlayType_Arena\020\007*0\n\022EDai"
    "lyTaskBackType\022\032\n\026EDailyTaskBackType_DUP"
    "\020\001*\327\006\n\006PGType\022\035\n\031PGType_world_boss_add_n"
    "um\020\001\022\033\n\027PGType_boss_dup_add_num\020\002\022\034\n\030PGT"
    "ype_boss_nest_add_num\020\003\022\035\n\031PGType_boss_g"
    "host_add_num\020\004\022\034\n\030PGType_level_dup_add_n"
    "um\020\005\022\034\n\030PGType_deify_dup_add_num\020\006\022\032\n\026PG"
    "Type_pet_dup_add_num\020\007\022\034\n\030PGType_bagua_d"
    "up_add_num\020\010\022\034\n\030PGType_dujie_dup_add_num"
    "\020\t\022\034\n\030PGType_equip_dup_add_num\020\n\022\024\n\020PGTy"
    "pe_jinji_num\020\013\022\027\n\023PGType_ronglian_exp\020\014\022"
    "\033\n\027PGType_kill_monster_exp\020\r\022\024\n\020PGType_r"
    "efresh_s\020\016\022\025\n\021PGType_sw_refresh\020\017\022\030\n\024PGT"
    "ype_yaoci_exp_add\020\020\022\024\n\020PGType_sw_ex_add\020"
    "\026\022\024\n\020PGType_sw_xz_add\020\027\022\021\n\rPGType_yb_add"
    "\020\030\022\022\n\016PGType_qd_race\020k\022\025\n\021PGType_exp_qin"
    "dao\020l\022\026\n\022PGType_glob_qindao\020m\022\022\n\016PGType_"
    "open_sj\020n\022\024\n\020PGType_open_bpsw\020o\022\024\n\020PGTyp"
    "e_open_fltb\020p\022\024\n\020PGType_open_zdcs\020q\022\017\n\013P"
    "GType_wxfx\020r\022\025\n\021PGType_merge_save\020s\022\025\n\021P"
    "GType_merge_race\020t\022\026\n\022PGType_offline_add"
    "\020u\022\021\n\rPGType_km_exp\020v\022\020\n\014PGType_red_r\020w\022"
    "\021\n\rPGType_sj_exp\020x\022\024\n\020PGType_add_skill\020y"
    "\022\022\n\016PGType_open_sh\020z*y\n\024ARENA_CHALLENGE_"
    "TYPE\022\035\n\031ARENA_CHALLENGE_TYPE_NONE\020\000\022\"\n\036A"
    "RENA_CHALLENGE_TYPE_CHARACTER\020\001\022\036\n\032ARENA"
    "_CHALLENGE_TYPE_ROBOT\020\002*q\n\020ArenaRewardSt"
    "ate\022\033\n\027ARENA_REWARD_STATE_NONE\020\000\022\035\n\031AREN"
    "A_REWARD_STATE_FINISH\020\001\022!\n\035ARENA_REWARD_"
    "STATE_GET_REWARD\020\002*K\n\016ArenaChallType\022\032\n\026"
    "ARENA_CHALL_TYPE_CHALL\020\000\022\035\n\031ARENA_CHALL_"
    "TYPE_MIAO_SHA\020\001*\205\002\n\022VIP_PRIVILEGE_TYPE\022\035"
    "\n\031VIP_PRIVILEGE_EQUIP_STOVE\020\014\0222\n.VIP_PRI"
    "VILEGE_GUILD_PRESTIGE_MISSION_REFRESH_S\020"
    "\016\0228\n4VIP_PRIVILEGE_GUILD_PRESTIGE_MISSIO"
    "N_REFRESH_ADD_NUM\020\017\022!\n\035VIP_PRIVILEGE_OFF"
    "LINE_EXP_ADD\020\025\022\036\n\032VIP_PRIVILEGE_EXP_QIFU"
    "_NUM\020l\022\037\n\033VIP_PRIVILEGE_GOLD_QIFU_NUM\020m*"
    "J\n\017EMountRideState\022\033\n\027EMountRideState_Ri"
    "deOff\020\000\022\032\n\026EMountRideState_RideOn\020\001*\264\001\n\016"
    "EDeityEquipPos\022\030\n\024EDeityEquipPos_start\020\024"
    "\022\027\n\023EDeityEquipPos_ring\020\000\022\033\n\027EDeityEquip"
    "Pos_bracelet\020\001\022\027\n\023EDeityEquipPos_jade\020\002\022"
    "\033\n\027EDeityEquipPos_necklace\020\003\022\030\n\024EDeityEq"
    "uipPos_limit\020\004\032\002\020\001*5\n\026EMoneyRewardTaskRe"
    "ward\022\033\n\027EMoneyRewardTask_BOUNTY\020\005*\265\001\n\rET"
    "itleSubType\022\030\n\024E_TITLE_SUB_TYPE_VIP\020\001\022$\n"
    " E_TITLE_SUB_TYPE_DRAGON_OF_CHAOS\020\002\022\"\n\036E"
    "_TITLE_SUB_TYPE_GUILD_RANKING\020\003\022!\n\035E_TIT"
    "LE_SUB_TYPE_KILL_MONSTER\020\006\022\035\n\031E_TITLE_SU"
    "B_TYPE_USE_ITEM\020\n*\247\001\n\016ETitleTimeType\022\032\n\026"
    "E_TITLE_TIME_TYPE_HOUR\020\000\022(\n$E_TITLE_TIME"
    "_TYPE_COMPETITION_SEASON\020\001\022+\n\'E_TITLE_TI"
    "ME_TYPE_NEXT_ACTIVITY_INVALID\020\002\022\"\n\036E_TIT"
    "LE_TIME_TYPE_LOST_RANKING\020\003*\307\001\n\016EBeastEq"
    "uipPos\022\030\n\024EBeastEquipPos_start\020\031\022\027\n\023EBea"
    "stEquipPos_Horn\020\000\022\027\n\023EBeastEquipPos_Helm"
    "\020\001\022\027\n\023EBeastEquipPos_Claw\020\002\022\027\n\023EBeastEqu"
    "ipPos_Hoof\020\003\022\031\n\025EBeastEquipPos_Saddle\020\004\022"
    "\030\n\024EBeastEquipPos_Limit\020\005\032\002\020\001*\270\001\n\023EDrago"
    "nSoulEquipPos\022\035\n\031EDragonSoulEquipPos_sta"
    "rt\020\036\022\033\n\027EDragonSoulEquipPos_one\020\000\022 \n\034EDr"
    "agonSoulEquipPos_special1\020\010\022 \n\034EDragonSo"
    "ulEquipPos_special2\020\t\022\035\n\031EDragonSoulEqui"
    "pPos_limit\020\n\032\002\020\001*\260\002\n\020EGodEvilEquipPos\022\033\n"
    "\027EGodEvilEquipPos_weapon\020)\022\033\n\027EGodEvilEq"
    "uipPos_dagger\020*\022\030\n\024EGodEvilEquipPos_hat\020"
    "+\022\032\n\026EGodEvilEquipPos_armor\020,\022\031\n\025EGodEvi"
    "lEquipPos_hand\020-\022\031\n\025EGodEvilEquipPos_bel"
    "t\020.\022\031\n\025EGodEvilEquipPos_shoe\020/\022\035\n\031EGodEv"
    "ilEquipPos_bracelet\0200\022\031\n\025EGodEvilEquipPo"
    "s_ring\0201\022\035\n\031EGodEvilEquipPos_necklace\0202\032"
    "\002\020\001*P\n\tChannelId\022\014\n\010Chan_Dev\020\001\022\032\n\023Chan_A"
    "ofei_andrioid\020\200\225\365*\022\025\n\016Chan_Aofei_ios\020\200\204\257"
    "_\032\002\020\001*Y\n\rEStarEquipPos\022\027\n\023EStarEquipPos_"
    "start\0203\022\026\n\022EStarEquipPos_jiao\020\000\022\027\n\023EStar"
    "EquipPos_limit\020\010*j\n\021EMountKunEquipPos\022\033\n"
    "\027EMountKunEquipPos_start\020;\022\033\n\027EMountKunE"
    "quipPos_first\020\000\022\033\n\027EMountKunEquipPos_lim"
    "it\020\005*Z\n\rEMoFaEquipPos\022\027\n\023EMoFaEquipPos_s"
    "tart\020e\022\027\n\023EMoFaEquipPos_first\020\000\022\027\n\023EMoFa"
    "EquipPos_limit\020\n", 35496);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ComDefine.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ComDefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ComDefine_2eproto {
  StaticDescriptorInitializer_ComDefine_2eproto() {
    protobuf_AddDesc_ComDefine_2eproto();
  }
} static_descriptor_initializer_ComDefine_2eproto_;
const ::google::protobuf::EnumDescriptor* PingConfig_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingConfig_descriptor_;
}
bool PingConfig_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoleSex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoleSex_descriptor_;
}
bool ERoleSex_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoleProf_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoleProf_descriptor_;
}
bool ERoleProf_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrencyType_descriptor_;
}
bool CurrencyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AreaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreaType_descriptor_;
}
bool AreaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SamplePolyFlags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SamplePolyFlags_descriptor_;
}
bool SamplePolyFlags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 65535:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MapDefine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapDefine_descriptor_;
}
bool MapDefine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1024:
    case 3076:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REGION_DEFINE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REGION_DEFINE_descriptor_;
}
bool REGION_DEFINE_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CharacterDefine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDefine_descriptor_;
}
bool CharacterDefine_IsValid(int value) {
  switch(value) {
    case 3:
    case 4:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemType_descriptor_;
}
bool EItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPackageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPackageType_descriptor_;
}
bool EPackageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuality_descriptor_;
}
bool EQuality_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEquipPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEquipPos_descriptor_;
}
bool EEquipPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EConst_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EConst_descriptor_;
}
bool EConst_IsValid(int value) {
  switch(value) {
    case 20:
    case 21:
    case 22:
    case 23:
    case 25:
    case 26:
    case 34:
    case 61:
    case 66:
    case 75:
    case 76:
    case 113:
    case 117:
    case 118:
    case 142:
    case 143:
    case 146:
    case 149:
    case 181:
    case 182:
    case 183:
    case 190:
    case 192:
    case 193:
    case 200:
    case 201:
    case 202:
    case 203:
    case 206:
    case 214:
    case 215:
    case 216:
    case 217:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 240:
    case 241:
    case 242:
    case 249:
    case 252:
    case 253:
    case 254:
    case 266:
    case 267:
    case 269:
    case 270:
    case 272:
    case 273:
    case 276:
    case 277:
    case 278:
    case 291:
    case 296:
    case 300:
    case 302:
    case 306:
    case 307:
    case 308:
    case 314:
    case 316:
    case 319:
    case 327:
    case 1000:
    case 1001:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERetCode_descriptor_;
}
bool ERetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 28:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 200:
    case 201:
    case 202:
    case 203:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 417:
    case 421:
    case 433:
    case 436:
    case 437:
    case 438:
    case 439:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 447:
    case 448:
    case 449:
    case 450:
    case 451:
    case 452:
    case 453:
    case 454:
    case 500:
    case 501:
    case 502:
    case 510:
    case 511:
    case 512:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 558:
    case 559:
    case 601:
    case 602:
    case 603:
    case 620:
    case 621:
    case 622:
    case 623:
    case 624:
    case 625:
    case 626:
    case 627:
    case 628:
    case 629:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 637:
    case 638:
    case 639:
    case 640:
    case 641:
    case 642:
    case 643:
    case 644:
    case 645:
    case 646:
    case 647:
    case 649:
    case 650:
    case 651:
    case 652:
    case 653:
    case 700:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 718:
    case 719:
    case 720:
    case 721:
    case 723:
    case 724:
    case 725:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 825:
    case 826:
    case 827:
    case 828:
    case 829:
    case 830:
    case 831:
    case 832:
    case 833:
    case 834:
    case 835:
    case 836:
    case 837:
    case 838:
    case 839:
    case 840:
    case 900:
    case 901:
    case 902:
    case 903:
    case 904:
    case 905:
    case 906:
    case 907:
    case 908:
    case 909:
    case 910:
    case 920:
    case 921:
    case 922:
    case 923:
    case 924:
    case 925:
    case 926:
    case 927:
    case 928:
    case 929:
    case 930:
    case 931:
    case 932:
    case 933:
    case 934:
    case 935:
    case 936:
    case 937:
    case 938:
    case 939:
    case 940:
    case 941:
    case 942:
    case 943:
    case 944:
    case 945:
    case 946:
    case 947:
    case 948:
    case 949:
    case 950:
    case 951:
    case 952:
    case 953:
    case 954:
    case 955:
    case 956:
    case 957:
    case 958:
    case 959:
    case 960:
    case 961:
    case 962:
    case 963:
    case 964:
    case 965:
    case 966:
    case 967:
    case 968:
    case 969:
    case 970:
    case 971:
    case 972:
    case 973:
    case 974:
    case 975:
    case 976:
    case 977:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1700:
    case 1701:
    case 1702:
    case 1703:
    case 1704:
    case 1705:
    case 1706:
    case 1707:
    case 1708:
    case 1709:
    case 1710:
    case 1711:
    case 1712:
    case 1713:
    case 1714:
    case 1715:
    case 1716:
    case 1717:
    case 1718:
    case 1719:
    case 1720:
    case 1721:
    case 1722:
    case 1723:
    case 1800:
    case 1900:
    case 1901:
    case 1902:
    case 1903:
    case 1904:
    case 1905:
    case 1906:
    case 1907:
    case 1908:
    case 1909:
    case 1910:
    case 1911:
    case 1912:
    case 1913:
    case 1914:
    case 1915:
    case 1916:
    case 1917:
    case 1918:
    case 1919:
    case 1920:
    case 1921:
    case 1922:
    case 1923:
    case 1924:
    case 1925:
    case 1926:
    case 1927:
    case 1928:
    case 1929:
    case 1930:
    case 1931:
    case 1932:
    case 1933:
    case 1934:
    case 1935:
    case 1936:
    case 1937:
    case 1938:
    case 1939:
    case 1940:
    case 1941:
    case 1942:
    case 1943:
    case 1944:
    case 1945:
    case 1946:
    case 1947:
    case 1948:
    case 1949:
    case 1950:
    case 1951:
    case 1952:
    case 1953:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2050:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2059:
    case 2060:
    case 2061:
    case 2062:
    case 2100:
    case 2101:
    case 2102:
    case 2103:
    case 2104:
    case 2201:
    case 2202:
    case 2203:
    case 2204:
    case 2205:
    case 2206:
    case 2207:
    case 2208:
    case 2209:
    case 2210:
    case 2250:
    case 2251:
    case 2252:
    case 2253:
    case 2254:
    case 2255:
    case 2550:
    case 2570:
    case 2571:
    case 2572:
    case 2573:
    case 2574:
    case 2575:
    case 2576:
    case 2577:
    case 2578:
    case 2579:
    case 2580:
    case 2581:
    case 2582:
    case 2583:
    case 2584:
    case 2585:
    case 2586:
    case 2587:
    case 2588:
    case 2589:
    case 2590:
    case 2591:
    case 2592:
    case 2593:
    case 2594:
    case 2595:
    case 2596:
    case 2597:
    case 2598:
    case 2599:
    case 2600:
    case 2601:
    case 2602:
    case 2603:
    case 2700:
    case 2701:
    case 2702:
    case 2703:
    case 2704:
    case 2720:
    case 2721:
    case 2722:
    case 2723:
    case 2724:
    case 2725:
    case 2726:
    case 2800:
    case 2801:
    case 2802:
    case 2803:
    case 2804:
    case 2805:
    case 2806:
    case 2807:
    case 2808:
    case 2809:
    case 2810:
    case 2811:
    case 2812:
    case 2813:
    case 2814:
    case 2815:
    case 2816:
    case 2817:
    case 2818:
    case 2819:
    case 2820:
    case 2821:
    case 2822:
    case 2823:
    case 2824:
    case 2825:
    case 2826:
    case 2827:
    case 2828:
    case 2840:
    case 2841:
    case 2842:
    case 2843:
    case 2844:
    case 2845:
    case 2846:
    case 2847:
    case 2900:
    case 2901:
    case 2902:
    case 2903:
    case 2904:
    case 2905:
    case 2906:
    case 2907:
    case 2908:
    case 3000:
    case 3001:
    case 3002:
    case 3003:
    case 3004:
    case 3005:
    case 3100:
    case 3101:
    case 3102:
    case 3301:
    case 3302:
    case 3303:
    case 3304:
    case 3305:
    case 3306:
    case 3307:
    case 3308:
    case 3309:
    case 3310:
    case 3311:
    case 3312:
    case 3313:
    case 3800:
    case 3801:
    case 3802:
    case 3803:
    case 3804:
    case 3805:
    case 3806:
    case 3807:
    case 3808:
    case 3809:
    case 3850:
    case 3851:
    case 3900:
    case 3901:
    case 3902:
    case 3903:
    case 3904:
    case 3905:
    case 3906:
    case 3907:
    case 3908:
    case 3909:
    case 3910:
    case 3911:
    case 3912:
    case 3913:
    case 3950:
    case 3951:
    case 3952:
    case 3953:
    case 3954:
    case 3955:
    case 3956:
    case 3957:
    case 4000:
    case 4001:
    case 4002:
    case 4003:
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4008:
    case 4009:
    case 4010:
    case 4011:
    case 4012:
    case 4013:
    case 4014:
    case 4015:
    case 4016:
    case 4017:
    case 4018:
    case 4019:
    case 4020:
    case 4021:
    case 4022:
    case 4023:
    case 4024:
    case 4025:
    case 4026:
    case 4027:
    case 4028:
    case 4029:
    case 4030:
    case 4031:
    case 4032:
    case 4033:
    case 4034:
    case 4035:
    case 4036:
    case 4037:
    case 4038:
    case 4039:
    case 4040:
    case 4041:
    case 4042:
    case 4043:
    case 4044:
    case 4045:
    case 4046:
    case 4200:
    case 4201:
    case 4202:
    case 4230:
    case 4231:
    case 4232:
    case 4233:
    case 4234:
    case 4400:
    case 4401:
    case 4402:
    case 4450:
    case 4451:
    case 4452:
    case 4453:
    case 4454:
    case 4455:
    case 4456:
    case 4457:
    case 4470:
    case 4471:
    case 4472:
    case 4473:
    case 4474:
    case 4475:
    case 4476:
    case 4477:
    case 4490:
    case 4500:
    case 4501:
    case 4502:
    case 4503:
    case 4504:
    case 4505:
    case 4506:
    case 4507:
    case 4508:
    case 4509:
    case 4510:
    case 4511:
    case 4512:
    case 4513:
    case 4514:
    case 4515:
    case 4516:
    case 4517:
    case 4518:
    case 4520:
    case 4521:
    case 4522:
    case 4523:
    case 4524:
    case 4525:
    case 4526:
    case 4527:
    case 4550:
    case 4551:
    case 4552:
    case 4553:
    case 4554:
    case 4555:
    case 4556:
    case 4557:
    case 4558:
    case 4559:
    case 4601:
    case 4602:
    case 4603:
    case 4604:
    case 4605:
    case 4606:
    case 4670:
    case 4671:
    case 4672:
    case 5250:
    case 5251:
    case 5252:
    case 5253:
    case 5254:
    case 5255:
    case 5256:
    case 5257:
    case 5258:
    case 5259:
    case 5260:
    case 5261:
    case 5262:
    case 5263:
    case 5264:
    case 5265:
    case 5267:
    case 5268:
    case 5269:
    case 5270:
    case 5271:
    case 5272:
    case 5273:
    case 5274:
    case 5275:
    case 5276:
    case 5277:
    case 5278:
    case 5279:
    case 5280:
    case 5281:
    case 5282:
    case 5290:
    case 5291:
    case 5292:
    case 5293:
    case 5294:
    case 5295:
    case 5296:
    case 5297:
    case 5298:
    case 5299:
    case 5300:
    case 5301:
    case 5302:
    case 5303:
    case 5304:
    case 5305:
    case 5306:
    case 5307:
    case 5308:
    case 5309:
    case 5310:
    case 5311:
    case 5320:
    case 5321:
    case 5322:
    case 5323:
    case 5324:
    case 5325:
    case 5326:
    case 5327:
    case 5328:
    case 5329:
    case 5330:
    case 5331:
    case 5332:
    case 5333:
    case 5500:
    case 5501:
    case 5502:
    case 5503:
    case 5504:
    case 5505:
    case 5506:
    case 5507:
    case 5508:
    case 5509:
    case 5510:
    case 5511:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Privilege_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Privilege_Type_descriptor_;
}
bool Privilege_Type_IsValid(int value) {
  switch(value) {
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LOGOUT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGOUT_TYPE_descriptor_;
}
bool LOGOUT_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMailType_descriptor_;
}
bool EMailType_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHAT_CHANNEL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHAT_CHANNEL_descriptor_;
}
bool CHAT_CHANNEL_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FacadeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeType_descriptor_;
}
bool FacadeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FunctionUnlock_ID_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlock_ID_TYPE_descriptor_;
}
bool FunctionUnlock_ID_TYPE_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 1024:
    case 2014:
    case 2022:
    case 2026:
    case 2029:
    case 2030:
    case 2036:
    case 2063:
    case 2064:
    case 2075:
    case 3053:
    case 4005:
    case 4023:
    case 4024:
    case 4025:
    case 4026:
    case 4027:
    case 4028:
    case 4029:
    case 4070:
    case 4101:
    case 5186:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFacadeAttrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFacadeAttrType_descriptor_;
}
bool EFacadeAttrType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDailyTaskPlayType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDailyTaskPlayType_descriptor_;
}
bool EDailyTaskPlayType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDailyTaskBackType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDailyTaskBackType_descriptor_;
}
bool EDailyTaskBackType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PGType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PGType_descriptor_;
}
bool PGType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 22:
    case 23:
    case 24:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ARENA_CHALLENGE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ARENA_CHALLENGE_TYPE_descriptor_;
}
bool ARENA_CHALLENGE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ArenaRewardState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaRewardState_descriptor_;
}
bool ArenaRewardState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ArenaChallType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaChallType_descriptor_;
}
bool ArenaChallType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VIP_PRIVILEGE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIP_PRIVILEGE_TYPE_descriptor_;
}
bool VIP_PRIVILEGE_TYPE_IsValid(int value) {
  switch(value) {
    case 12:
    case 14:
    case 15:
    case 21:
    case 108:
    case 109:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMountRideState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMountRideState_descriptor_;
}
bool EMountRideState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDeityEquipPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDeityEquipPos_descriptor_;
}
bool EDeityEquipPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMoneyRewardTaskReward_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMoneyRewardTaskReward_descriptor_;
}
bool EMoneyRewardTaskReward_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETitleSubType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETitleSubType_descriptor_;
}
bool ETitleSubType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 6:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETitleTimeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETitleTimeType_descriptor_;
}
bool ETitleTimeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBeastEquipPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBeastEquipPos_descriptor_;
}
bool EBeastEquipPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDragonSoulEquipPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDragonSoulEquipPos_descriptor_;
}
bool EDragonSoulEquipPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 8:
    case 9:
    case 10:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGodEvilEquipPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGodEvilEquipPos_descriptor_;
}
bool EGodEvilEquipPos_IsValid(int value) {
  switch(value) {
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChannelId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelId_descriptor_;
}
bool ChannelId_IsValid(int value) {
  switch(value) {
    case 1:
    case 90000000:
    case 200000000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStarEquipPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EStarEquipPos_descriptor_;
}
bool EStarEquipPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 8:
    case 51:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMountKunEquipPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMountKunEquipPos_descriptor_;
}
bool EMountKunEquipPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 5:
    case 59:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMoFaEquipPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMoFaEquipPos_descriptor_;
}
bool EMoFaEquipPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
    case 101:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
