// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#ifndef PROTOBUF_task_2eproto__INCLUDED
#define PROTOBUF_task_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_task_2eproto();
void protobuf_AssignDesc_task_2eproto();
void protobuf_ShutdownFile_task_2eproto();

class tasktask;
class Sheet_tasktask;

// ===================================================================

class tasktask : public ::google::protobuf::Message {
 public:
  tasktask();
  virtual ~tasktask();

  tasktask(const tasktask& from);

  inline tasktask& operator=(const tasktask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tasktask& default_instance();

  void Swap(tasktask* other);

  // implements Message ----------------------------------------------

  tasktask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tasktask& from);
  void MergeFrom(const tasktask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 minlv = 2;
  inline bool has_minlv() const;
  inline void clear_minlv();
  static const int kMinlvFieldNumber = 2;
  inline ::google::protobuf::int32 minlv() const;
  inline void set_minlv(::google::protobuf::int32 value);

  // optional int32 truelv = 3;
  inline bool has_truelv() const;
  inline void clear_truelv();
  static const int kTruelvFieldNumber = 3;
  inline ::google::protobuf::int32 truelv() const;
  inline void set_truelv(::google::protobuf::int32 value);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string showtype = 5;
  inline bool has_showtype() const;
  inline void clear_showtype();
  static const int kShowtypeFieldNumber = 5;
  inline const ::std::string& showtype() const;
  inline void set_showtype(const ::std::string& value);
  inline void set_showtype(const char* value);
  inline void set_showtype(const char* value, size_t size);
  inline ::std::string* mutable_showtype();
  inline ::std::string* release_showtype();
  inline void set_allocated_showtype(::std::string* showtype);

  // optional int32 weights = 6;
  inline bool has_weights() const;
  inline void clear_weights();
  static const int kWeightsFieldNumber = 6;
  inline ::google::protobuf::int32 weights() const;
  inline void set_weights(::google::protobuf::int32 value);

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string rececond = 8;
  inline bool has_rececond() const;
  inline void clear_rececond();
  static const int kRececondFieldNumber = 8;
  inline const ::std::string& rececond() const;
  inline void set_rececond(const ::std::string& value);
  inline void set_rececond(const char* value);
  inline void set_rececond(const char* value, size_t size);
  inline ::std::string* mutable_rececond();
  inline ::std::string* release_rececond();
  inline void set_allocated_rececond(::std::string* rececond);

  // optional string receadd = 9;
  inline bool has_receadd() const;
  inline void clear_receadd();
  static const int kReceaddFieldNumber = 9;
  inline const ::std::string& receadd() const;
  inline void set_receadd(const ::std::string& value);
  inline void set_receadd(const char* value);
  inline void set_receadd(const char* value, size_t size);
  inline ::std::string* mutable_receadd();
  inline ::std::string* release_receadd();
  inline void set_allocated_receadd(::std::string* receadd);

  // optional string comcond = 10;
  inline bool has_comcond() const;
  inline void clear_comcond();
  static const int kComcondFieldNumber = 10;
  inline const ::std::string& comcond() const;
  inline void set_comcond(const ::std::string& value);
  inline void set_comcond(const char* value);
  inline void set_comcond(const char* value, size_t size);
  inline ::std::string* mutable_comcond();
  inline ::std::string* release_comcond();
  inline void set_allocated_comcond(::std::string* comcond);

  // optional int32 nexttask = 11;
  inline bool has_nexttask() const;
  inline void clear_nexttask();
  static const int kNexttaskFieldNumber = 11;
  inline ::google::protobuf::int32 nexttask() const;
  inline void set_nexttask(::google::protobuf::int32 value);

  // optional string tracker = 12;
  inline bool has_tracker() const;
  inline void clear_tracker();
  static const int kTrackerFieldNumber = 12;
  inline const ::std::string& tracker() const;
  inline void set_tracker(const ::std::string& value);
  inline void set_tracker(const char* value);
  inline void set_tracker(const char* value, size_t size);
  inline ::std::string* mutable_tracker();
  inline ::std::string* release_tracker();
  inline void set_allocated_tracker(::std::string* tracker);

  // optional string subtype = 13;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubtypeFieldNumber = 13;
  inline const ::std::string& subtype() const;
  inline void set_subtype(const ::std::string& value);
  inline void set_subtype(const char* value);
  inline void set_subtype(const char* value, size_t size);
  inline ::std::string* mutable_subtype();
  inline ::std::string* release_subtype();
  inline void set_allocated_subtype(::std::string* subtype);

  // optional int32 subnpc = 14;
  inline bool has_subnpc() const;
  inline void clear_subnpc();
  static const int kSubnpcFieldNumber = 14;
  inline ::google::protobuf::int32 subnpc() const;
  inline void set_subnpc(::google::protobuf::int32 value);

  // optional string subdesc = 15;
  inline bool has_subdesc() const;
  inline void clear_subdesc();
  static const int kSubdescFieldNumber = 15;
  inline const ::std::string& subdesc() const;
  inline void set_subdesc(const ::std::string& value);
  inline void set_subdesc(const char* value);
  inline void set_subdesc(const char* value, size_t size);
  inline ::std::string* mutable_subdesc();
  inline ::std::string* release_subdesc();
  inline void set_allocated_subdesc(::std::string* subdesc);

  // optional int32 subaward = 16;
  inline bool has_subaward() const;
  inline void clear_subaward();
  static const int kSubawardFieldNumber = 16;
  inline ::google::protobuf::int32 subaward() const;
  inline void set_subaward(::google::protobuf::int32 value);

  // repeated string submsg = 17;
  inline int submsg_size() const;
  inline void clear_submsg();
  static const int kSubmsgFieldNumber = 17;
  inline const ::std::string& submsg(int index) const;
  inline ::std::string* mutable_submsg(int index);
  inline void set_submsg(int index, const ::std::string& value);
  inline void set_submsg(int index, const char* value);
  inline void set_submsg(int index, const char* value, size_t size);
  inline ::std::string* add_submsg();
  inline void add_submsg(const ::std::string& value);
  inline void add_submsg(const char* value);
  inline void add_submsg(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& submsg() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_submsg();

  // @@protoc_insertion_point(class_scope:proto_ff.tasktask)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_minlv();
  inline void clear_has_minlv();
  inline void set_has_truelv();
  inline void clear_has_truelv();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_showtype();
  inline void clear_has_showtype();
  inline void set_has_weights();
  inline void clear_has_weights();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rececond();
  inline void clear_has_rececond();
  inline void set_has_receadd();
  inline void clear_has_receadd();
  inline void set_has_comcond();
  inline void clear_has_comcond();
  inline void set_has_nexttask();
  inline void clear_has_nexttask();
  inline void set_has_tracker();
  inline void clear_has_tracker();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_subnpc();
  inline void clear_has_subnpc();
  inline void set_has_subdesc();
  inline void clear_has_subdesc();
  inline void set_has_subaward();
  inline void clear_has_subaward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 minlv_;
  ::google::protobuf::int32 truelv_;
  ::google::protobuf::int32 type_;
  ::std::string* showtype_;
  ::std::string* name_;
  ::std::string* rececond_;
  ::google::protobuf::int32 weights_;
  ::google::protobuf::int32 nexttask_;
  ::std::string* receadd_;
  ::std::string* comcond_;
  ::std::string* tracker_;
  ::std::string* subtype_;
  ::std::string* subdesc_;
  ::google::protobuf::int32 subnpc_;
  ::google::protobuf::int32 subaward_;
  ::google::protobuf::RepeatedPtrField< ::std::string> submsg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static tasktask* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_tasktask : public ::google::protobuf::Message {
 public:
  Sheet_tasktask();
  virtual ~Sheet_tasktask();

  Sheet_tasktask(const Sheet_tasktask& from);

  inline Sheet_tasktask& operator=(const Sheet_tasktask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_tasktask& default_instance();

  void Swap(Sheet_tasktask* other);

  // implements Message ----------------------------------------------

  Sheet_tasktask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_tasktask& from);
  void MergeFrom(const Sheet_tasktask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.tasktask tasktask_List = 1;
  inline int tasktask_list_size() const;
  inline void clear_tasktask_list();
  static const int kTasktaskListFieldNumber = 1;
  inline const ::proto_ff::tasktask& tasktask_list(int index) const;
  inline ::proto_ff::tasktask* mutable_tasktask_list(int index);
  inline ::proto_ff::tasktask* add_tasktask_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::tasktask >&
      tasktask_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::tasktask >*
      mutable_tasktask_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_tasktask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::tasktask > tasktask_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static Sheet_tasktask* default_instance_;
};
// ===================================================================


// ===================================================================

// tasktask

// optional int32 id = 1;
inline bool tasktask::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tasktask::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tasktask::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tasktask::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 tasktask::id() const {
  return id_;
}
inline void tasktask::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 minlv = 2;
inline bool tasktask::has_minlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tasktask::set_has_minlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tasktask::clear_has_minlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tasktask::clear_minlv() {
  minlv_ = 0;
  clear_has_minlv();
}
inline ::google::protobuf::int32 tasktask::minlv() const {
  return minlv_;
}
inline void tasktask::set_minlv(::google::protobuf::int32 value) {
  set_has_minlv();
  minlv_ = value;
}

// optional int32 truelv = 3;
inline bool tasktask::has_truelv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tasktask::set_has_truelv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tasktask::clear_has_truelv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tasktask::clear_truelv() {
  truelv_ = 0;
  clear_has_truelv();
}
inline ::google::protobuf::int32 tasktask::truelv() const {
  return truelv_;
}
inline void tasktask::set_truelv(::google::protobuf::int32 value) {
  set_has_truelv();
  truelv_ = value;
}

// optional int32 type = 4;
inline bool tasktask::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tasktask::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tasktask::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tasktask::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 tasktask::type() const {
  return type_;
}
inline void tasktask::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string showtype = 5;
inline bool tasktask::has_showtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tasktask::set_has_showtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tasktask::clear_has_showtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tasktask::clear_showtype() {
  if (showtype_ != &::google::protobuf::internal::kEmptyString) {
    showtype_->clear();
  }
  clear_has_showtype();
}
inline const ::std::string& tasktask::showtype() const {
  return *showtype_;
}
inline void tasktask::set_showtype(const ::std::string& value) {
  set_has_showtype();
  if (showtype_ == &::google::protobuf::internal::kEmptyString) {
    showtype_ = new ::std::string;
  }
  showtype_->assign(value);
}
inline void tasktask::set_showtype(const char* value) {
  set_has_showtype();
  if (showtype_ == &::google::protobuf::internal::kEmptyString) {
    showtype_ = new ::std::string;
  }
  showtype_->assign(value);
}
inline void tasktask::set_showtype(const char* value, size_t size) {
  set_has_showtype();
  if (showtype_ == &::google::protobuf::internal::kEmptyString) {
    showtype_ = new ::std::string;
  }
  showtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tasktask::mutable_showtype() {
  set_has_showtype();
  if (showtype_ == &::google::protobuf::internal::kEmptyString) {
    showtype_ = new ::std::string;
  }
  return showtype_;
}
inline ::std::string* tasktask::release_showtype() {
  clear_has_showtype();
  if (showtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = showtype_;
    showtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tasktask::set_allocated_showtype(::std::string* showtype) {
  if (showtype_ != &::google::protobuf::internal::kEmptyString) {
    delete showtype_;
  }
  if (showtype) {
    set_has_showtype();
    showtype_ = showtype;
  } else {
    clear_has_showtype();
    showtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 weights = 6;
inline bool tasktask::has_weights() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tasktask::set_has_weights() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tasktask::clear_has_weights() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tasktask::clear_weights() {
  weights_ = 0;
  clear_has_weights();
}
inline ::google::protobuf::int32 tasktask::weights() const {
  return weights_;
}
inline void tasktask::set_weights(::google::protobuf::int32 value) {
  set_has_weights();
  weights_ = value;
}

// optional string name = 7;
inline bool tasktask::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tasktask::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tasktask::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tasktask::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& tasktask::name() const {
  return *name_;
}
inline void tasktask::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void tasktask::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void tasktask::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tasktask::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* tasktask::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tasktask::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string rececond = 8;
inline bool tasktask::has_rececond() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tasktask::set_has_rececond() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tasktask::clear_has_rececond() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tasktask::clear_rececond() {
  if (rececond_ != &::google::protobuf::internal::kEmptyString) {
    rececond_->clear();
  }
  clear_has_rececond();
}
inline const ::std::string& tasktask::rececond() const {
  return *rececond_;
}
inline void tasktask::set_rececond(const ::std::string& value) {
  set_has_rececond();
  if (rececond_ == &::google::protobuf::internal::kEmptyString) {
    rececond_ = new ::std::string;
  }
  rececond_->assign(value);
}
inline void tasktask::set_rececond(const char* value) {
  set_has_rececond();
  if (rececond_ == &::google::protobuf::internal::kEmptyString) {
    rececond_ = new ::std::string;
  }
  rececond_->assign(value);
}
inline void tasktask::set_rececond(const char* value, size_t size) {
  set_has_rececond();
  if (rececond_ == &::google::protobuf::internal::kEmptyString) {
    rececond_ = new ::std::string;
  }
  rececond_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tasktask::mutable_rececond() {
  set_has_rececond();
  if (rececond_ == &::google::protobuf::internal::kEmptyString) {
    rececond_ = new ::std::string;
  }
  return rececond_;
}
inline ::std::string* tasktask::release_rececond() {
  clear_has_rececond();
  if (rececond_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rececond_;
    rececond_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tasktask::set_allocated_rececond(::std::string* rececond) {
  if (rececond_ != &::google::protobuf::internal::kEmptyString) {
    delete rececond_;
  }
  if (rececond) {
    set_has_rececond();
    rececond_ = rececond;
  } else {
    clear_has_rececond();
    rececond_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string receadd = 9;
inline bool tasktask::has_receadd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tasktask::set_has_receadd() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tasktask::clear_has_receadd() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tasktask::clear_receadd() {
  if (receadd_ != &::google::protobuf::internal::kEmptyString) {
    receadd_->clear();
  }
  clear_has_receadd();
}
inline const ::std::string& tasktask::receadd() const {
  return *receadd_;
}
inline void tasktask::set_receadd(const ::std::string& value) {
  set_has_receadd();
  if (receadd_ == &::google::protobuf::internal::kEmptyString) {
    receadd_ = new ::std::string;
  }
  receadd_->assign(value);
}
inline void tasktask::set_receadd(const char* value) {
  set_has_receadd();
  if (receadd_ == &::google::protobuf::internal::kEmptyString) {
    receadd_ = new ::std::string;
  }
  receadd_->assign(value);
}
inline void tasktask::set_receadd(const char* value, size_t size) {
  set_has_receadd();
  if (receadd_ == &::google::protobuf::internal::kEmptyString) {
    receadd_ = new ::std::string;
  }
  receadd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tasktask::mutable_receadd() {
  set_has_receadd();
  if (receadd_ == &::google::protobuf::internal::kEmptyString) {
    receadd_ = new ::std::string;
  }
  return receadd_;
}
inline ::std::string* tasktask::release_receadd() {
  clear_has_receadd();
  if (receadd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receadd_;
    receadd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tasktask::set_allocated_receadd(::std::string* receadd) {
  if (receadd_ != &::google::protobuf::internal::kEmptyString) {
    delete receadd_;
  }
  if (receadd) {
    set_has_receadd();
    receadd_ = receadd;
  } else {
    clear_has_receadd();
    receadd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string comcond = 10;
inline bool tasktask::has_comcond() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tasktask::set_has_comcond() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tasktask::clear_has_comcond() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tasktask::clear_comcond() {
  if (comcond_ != &::google::protobuf::internal::kEmptyString) {
    comcond_->clear();
  }
  clear_has_comcond();
}
inline const ::std::string& tasktask::comcond() const {
  return *comcond_;
}
inline void tasktask::set_comcond(const ::std::string& value) {
  set_has_comcond();
  if (comcond_ == &::google::protobuf::internal::kEmptyString) {
    comcond_ = new ::std::string;
  }
  comcond_->assign(value);
}
inline void tasktask::set_comcond(const char* value) {
  set_has_comcond();
  if (comcond_ == &::google::protobuf::internal::kEmptyString) {
    comcond_ = new ::std::string;
  }
  comcond_->assign(value);
}
inline void tasktask::set_comcond(const char* value, size_t size) {
  set_has_comcond();
  if (comcond_ == &::google::protobuf::internal::kEmptyString) {
    comcond_ = new ::std::string;
  }
  comcond_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tasktask::mutable_comcond() {
  set_has_comcond();
  if (comcond_ == &::google::protobuf::internal::kEmptyString) {
    comcond_ = new ::std::string;
  }
  return comcond_;
}
inline ::std::string* tasktask::release_comcond() {
  clear_has_comcond();
  if (comcond_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comcond_;
    comcond_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tasktask::set_allocated_comcond(::std::string* comcond) {
  if (comcond_ != &::google::protobuf::internal::kEmptyString) {
    delete comcond_;
  }
  if (comcond) {
    set_has_comcond();
    comcond_ = comcond;
  } else {
    clear_has_comcond();
    comcond_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 nexttask = 11;
inline bool tasktask::has_nexttask() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tasktask::set_has_nexttask() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tasktask::clear_has_nexttask() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tasktask::clear_nexttask() {
  nexttask_ = 0;
  clear_has_nexttask();
}
inline ::google::protobuf::int32 tasktask::nexttask() const {
  return nexttask_;
}
inline void tasktask::set_nexttask(::google::protobuf::int32 value) {
  set_has_nexttask();
  nexttask_ = value;
}

// optional string tracker = 12;
inline bool tasktask::has_tracker() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tasktask::set_has_tracker() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tasktask::clear_has_tracker() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tasktask::clear_tracker() {
  if (tracker_ != &::google::protobuf::internal::kEmptyString) {
    tracker_->clear();
  }
  clear_has_tracker();
}
inline const ::std::string& tasktask::tracker() const {
  return *tracker_;
}
inline void tasktask::set_tracker(const ::std::string& value) {
  set_has_tracker();
  if (tracker_ == &::google::protobuf::internal::kEmptyString) {
    tracker_ = new ::std::string;
  }
  tracker_->assign(value);
}
inline void tasktask::set_tracker(const char* value) {
  set_has_tracker();
  if (tracker_ == &::google::protobuf::internal::kEmptyString) {
    tracker_ = new ::std::string;
  }
  tracker_->assign(value);
}
inline void tasktask::set_tracker(const char* value, size_t size) {
  set_has_tracker();
  if (tracker_ == &::google::protobuf::internal::kEmptyString) {
    tracker_ = new ::std::string;
  }
  tracker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tasktask::mutable_tracker() {
  set_has_tracker();
  if (tracker_ == &::google::protobuf::internal::kEmptyString) {
    tracker_ = new ::std::string;
  }
  return tracker_;
}
inline ::std::string* tasktask::release_tracker() {
  clear_has_tracker();
  if (tracker_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tracker_;
    tracker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tasktask::set_allocated_tracker(::std::string* tracker) {
  if (tracker_ != &::google::protobuf::internal::kEmptyString) {
    delete tracker_;
  }
  if (tracker) {
    set_has_tracker();
    tracker_ = tracker;
  } else {
    clear_has_tracker();
    tracker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string subtype = 13;
inline bool tasktask::has_subtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tasktask::set_has_subtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tasktask::clear_has_subtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tasktask::clear_subtype() {
  if (subtype_ != &::google::protobuf::internal::kEmptyString) {
    subtype_->clear();
  }
  clear_has_subtype();
}
inline const ::std::string& tasktask::subtype() const {
  return *subtype_;
}
inline void tasktask::set_subtype(const ::std::string& value) {
  set_has_subtype();
  if (subtype_ == &::google::protobuf::internal::kEmptyString) {
    subtype_ = new ::std::string;
  }
  subtype_->assign(value);
}
inline void tasktask::set_subtype(const char* value) {
  set_has_subtype();
  if (subtype_ == &::google::protobuf::internal::kEmptyString) {
    subtype_ = new ::std::string;
  }
  subtype_->assign(value);
}
inline void tasktask::set_subtype(const char* value, size_t size) {
  set_has_subtype();
  if (subtype_ == &::google::protobuf::internal::kEmptyString) {
    subtype_ = new ::std::string;
  }
  subtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tasktask::mutable_subtype() {
  set_has_subtype();
  if (subtype_ == &::google::protobuf::internal::kEmptyString) {
    subtype_ = new ::std::string;
  }
  return subtype_;
}
inline ::std::string* tasktask::release_subtype() {
  clear_has_subtype();
  if (subtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subtype_;
    subtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tasktask::set_allocated_subtype(::std::string* subtype) {
  if (subtype_ != &::google::protobuf::internal::kEmptyString) {
    delete subtype_;
  }
  if (subtype) {
    set_has_subtype();
    subtype_ = subtype;
  } else {
    clear_has_subtype();
    subtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 subnpc = 14;
inline bool tasktask::has_subnpc() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tasktask::set_has_subnpc() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tasktask::clear_has_subnpc() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tasktask::clear_subnpc() {
  subnpc_ = 0;
  clear_has_subnpc();
}
inline ::google::protobuf::int32 tasktask::subnpc() const {
  return subnpc_;
}
inline void tasktask::set_subnpc(::google::protobuf::int32 value) {
  set_has_subnpc();
  subnpc_ = value;
}

// optional string subdesc = 15;
inline bool tasktask::has_subdesc() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void tasktask::set_has_subdesc() {
  _has_bits_[0] |= 0x00004000u;
}
inline void tasktask::clear_has_subdesc() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void tasktask::clear_subdesc() {
  if (subdesc_ != &::google::protobuf::internal::kEmptyString) {
    subdesc_->clear();
  }
  clear_has_subdesc();
}
inline const ::std::string& tasktask::subdesc() const {
  return *subdesc_;
}
inline void tasktask::set_subdesc(const ::std::string& value) {
  set_has_subdesc();
  if (subdesc_ == &::google::protobuf::internal::kEmptyString) {
    subdesc_ = new ::std::string;
  }
  subdesc_->assign(value);
}
inline void tasktask::set_subdesc(const char* value) {
  set_has_subdesc();
  if (subdesc_ == &::google::protobuf::internal::kEmptyString) {
    subdesc_ = new ::std::string;
  }
  subdesc_->assign(value);
}
inline void tasktask::set_subdesc(const char* value, size_t size) {
  set_has_subdesc();
  if (subdesc_ == &::google::protobuf::internal::kEmptyString) {
    subdesc_ = new ::std::string;
  }
  subdesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tasktask::mutable_subdesc() {
  set_has_subdesc();
  if (subdesc_ == &::google::protobuf::internal::kEmptyString) {
    subdesc_ = new ::std::string;
  }
  return subdesc_;
}
inline ::std::string* tasktask::release_subdesc() {
  clear_has_subdesc();
  if (subdesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subdesc_;
    subdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tasktask::set_allocated_subdesc(::std::string* subdesc) {
  if (subdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete subdesc_;
  }
  if (subdesc) {
    set_has_subdesc();
    subdesc_ = subdesc;
  } else {
    clear_has_subdesc();
    subdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 subaward = 16;
inline bool tasktask::has_subaward() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void tasktask::set_has_subaward() {
  _has_bits_[0] |= 0x00008000u;
}
inline void tasktask::clear_has_subaward() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void tasktask::clear_subaward() {
  subaward_ = 0;
  clear_has_subaward();
}
inline ::google::protobuf::int32 tasktask::subaward() const {
  return subaward_;
}
inline void tasktask::set_subaward(::google::protobuf::int32 value) {
  set_has_subaward();
  subaward_ = value;
}

// repeated string submsg = 17;
inline int tasktask::submsg_size() const {
  return submsg_.size();
}
inline void tasktask::clear_submsg() {
  submsg_.Clear();
}
inline const ::std::string& tasktask::submsg(int index) const {
  return submsg_.Get(index);
}
inline ::std::string* tasktask::mutable_submsg(int index) {
  return submsg_.Mutable(index);
}
inline void tasktask::set_submsg(int index, const ::std::string& value) {
  submsg_.Mutable(index)->assign(value);
}
inline void tasktask::set_submsg(int index, const char* value) {
  submsg_.Mutable(index)->assign(value);
}
inline void tasktask::set_submsg(int index, const char* value, size_t size) {
  submsg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tasktask::add_submsg() {
  return submsg_.Add();
}
inline void tasktask::add_submsg(const ::std::string& value) {
  submsg_.Add()->assign(value);
}
inline void tasktask::add_submsg(const char* value) {
  submsg_.Add()->assign(value);
}
inline void tasktask::add_submsg(const char* value, size_t size) {
  submsg_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
tasktask::submsg() const {
  return submsg_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
tasktask::mutable_submsg() {
  return &submsg_;
}

// -------------------------------------------------------------------

// Sheet_tasktask

// repeated .proto_ff.tasktask tasktask_List = 1;
inline int Sheet_tasktask::tasktask_list_size() const {
  return tasktask_list_.size();
}
inline void Sheet_tasktask::clear_tasktask_list() {
  tasktask_list_.Clear();
}
inline const ::proto_ff::tasktask& Sheet_tasktask::tasktask_list(int index) const {
  return tasktask_list_.Get(index);
}
inline ::proto_ff::tasktask* Sheet_tasktask::mutable_tasktask_list(int index) {
  return tasktask_list_.Mutable(index);
}
inline ::proto_ff::tasktask* Sheet_tasktask::add_tasktask_list() {
  return tasktask_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::tasktask >&
Sheet_tasktask::tasktask_list() const {
  return tasktask_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::tasktask >*
Sheet_tasktask::mutable_tasktask_list() {
  return &tasktask_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_task_2eproto__INCLUDED
