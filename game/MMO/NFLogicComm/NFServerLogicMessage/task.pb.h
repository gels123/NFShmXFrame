// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#ifndef PROTOBUF_task_2eproto__INCLUDED
#define PROTOBUF_task_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_task_2eproto();
void protobuf_AssignDesc_task_2eproto();
void protobuf_ShutdownFile_task_2eproto();

class E_TaskTask;
class Sheet_TaskTask;

// ===================================================================

class E_TaskTask : public ::google::protobuf::Message {
 public:
  E_TaskTask();
  virtual ~E_TaskTask();

  E_TaskTask(const E_TaskTask& from);

  inline E_TaskTask& operator=(const E_TaskTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_TaskTask& default_instance();

  void Swap(E_TaskTask* other);

  // implements Message ----------------------------------------------

  E_TaskTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_TaskTask& from);
  void MergeFrom(const E_TaskTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_minlv = 2;
  inline bool has_m_minlv() const;
  inline void clear_m_minlv();
  static const int kMMinlvFieldNumber = 2;
  inline ::google::protobuf::int32 m_minlv() const;
  inline void set_m_minlv(::google::protobuf::int32 value);

  // optional int32 m_truelv = 3;
  inline bool has_m_truelv() const;
  inline void clear_m_truelv();
  static const int kMTruelvFieldNumber = 3;
  inline ::google::protobuf::int32 m_truelv() const;
  inline void set_m_truelv(::google::protobuf::int32 value);

  // optional int32 m_type = 4;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional string m_showtype = 5;
  inline bool has_m_showtype() const;
  inline void clear_m_showtype();
  static const int kMShowtypeFieldNumber = 5;
  inline const ::std::string& m_showtype() const;
  inline void set_m_showtype(const ::std::string& value);
  inline void set_m_showtype(const char* value);
  inline void set_m_showtype(const char* value, size_t size);
  inline ::std::string* mutable_m_showtype();
  inline ::std::string* release_m_showtype();
  inline void set_allocated_m_showtype(::std::string* m_showtype);

  // optional int32 m_weights = 6;
  inline bool has_m_weights() const;
  inline void clear_m_weights();
  static const int kMWeightsFieldNumber = 6;
  inline ::google::protobuf::int32 m_weights() const;
  inline void set_m_weights(::google::protobuf::int32 value);

  // optional string m_name = 7;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 7;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // optional string m_rececond = 8;
  inline bool has_m_rececond() const;
  inline void clear_m_rececond();
  static const int kMRececondFieldNumber = 8;
  inline const ::std::string& m_rececond() const;
  inline void set_m_rececond(const ::std::string& value);
  inline void set_m_rececond(const char* value);
  inline void set_m_rececond(const char* value, size_t size);
  inline ::std::string* mutable_m_rececond();
  inline ::std::string* release_m_rececond();
  inline void set_allocated_m_rececond(::std::string* m_rececond);

  // optional string m_receadd = 9;
  inline bool has_m_receadd() const;
  inline void clear_m_receadd();
  static const int kMReceaddFieldNumber = 9;
  inline const ::std::string& m_receadd() const;
  inline void set_m_receadd(const ::std::string& value);
  inline void set_m_receadd(const char* value);
  inline void set_m_receadd(const char* value, size_t size);
  inline ::std::string* mutable_m_receadd();
  inline ::std::string* release_m_receadd();
  inline void set_allocated_m_receadd(::std::string* m_receadd);

  // optional string m_comcond = 10;
  inline bool has_m_comcond() const;
  inline void clear_m_comcond();
  static const int kMComcondFieldNumber = 10;
  inline const ::std::string& m_comcond() const;
  inline void set_m_comcond(const ::std::string& value);
  inline void set_m_comcond(const char* value);
  inline void set_m_comcond(const char* value, size_t size);
  inline ::std::string* mutable_m_comcond();
  inline ::std::string* release_m_comcond();
  inline void set_allocated_m_comcond(::std::string* m_comcond);

  // optional int32 m_nexttask = 11;
  inline bool has_m_nexttask() const;
  inline void clear_m_nexttask();
  static const int kMNexttaskFieldNumber = 11;
  inline ::google::protobuf::int32 m_nexttask() const;
  inline void set_m_nexttask(::google::protobuf::int32 value);

  // optional string m_tracker = 12;
  inline bool has_m_tracker() const;
  inline void clear_m_tracker();
  static const int kMTrackerFieldNumber = 12;
  inline const ::std::string& m_tracker() const;
  inline void set_m_tracker(const ::std::string& value);
  inline void set_m_tracker(const char* value);
  inline void set_m_tracker(const char* value, size_t size);
  inline ::std::string* mutable_m_tracker();
  inline ::std::string* release_m_tracker();
  inline void set_allocated_m_tracker(::std::string* m_tracker);

  // optional string m_subtype = 13;
  inline bool has_m_subtype() const;
  inline void clear_m_subtype();
  static const int kMSubtypeFieldNumber = 13;
  inline const ::std::string& m_subtype() const;
  inline void set_m_subtype(const ::std::string& value);
  inline void set_m_subtype(const char* value);
  inline void set_m_subtype(const char* value, size_t size);
  inline ::std::string* mutable_m_subtype();
  inline ::std::string* release_m_subtype();
  inline void set_allocated_m_subtype(::std::string* m_subtype);

  // optional int32 m_subnpc = 14;
  inline bool has_m_subnpc() const;
  inline void clear_m_subnpc();
  static const int kMSubnpcFieldNumber = 14;
  inline ::google::protobuf::int32 m_subnpc() const;
  inline void set_m_subnpc(::google::protobuf::int32 value);

  // optional string m_subdesc = 15;
  inline bool has_m_subdesc() const;
  inline void clear_m_subdesc();
  static const int kMSubdescFieldNumber = 15;
  inline const ::std::string& m_subdesc() const;
  inline void set_m_subdesc(const ::std::string& value);
  inline void set_m_subdesc(const char* value);
  inline void set_m_subdesc(const char* value, size_t size);
  inline ::std::string* mutable_m_subdesc();
  inline ::std::string* release_m_subdesc();
  inline void set_allocated_m_subdesc(::std::string* m_subdesc);

  // optional int32 m_subaward = 16;
  inline bool has_m_subaward() const;
  inline void clear_m_subaward();
  static const int kMSubawardFieldNumber = 16;
  inline ::google::protobuf::int32 m_subaward() const;
  inline void set_m_subaward(::google::protobuf::int32 value);

  // repeated string m_submsg = 17;
  inline int m_submsg_size() const;
  inline void clear_m_submsg();
  static const int kMSubmsgFieldNumber = 17;
  inline const ::std::string& m_submsg(int index) const;
  inline ::std::string* mutable_m_submsg(int index);
  inline void set_m_submsg(int index, const ::std::string& value);
  inline void set_m_submsg(int index, const char* value);
  inline void set_m_submsg(int index, const char* value, size_t size);
  inline ::std::string* add_m_submsg();
  inline void add_m_submsg(const ::std::string& value);
  inline void add_m_submsg(const char* value);
  inline void add_m_submsg(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_submsg() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_submsg();

  // @@protoc_insertion_point(class_scope:proto_ff.E_TaskTask)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_minlv();
  inline void clear_has_m_minlv();
  inline void set_has_m_truelv();
  inline void clear_has_m_truelv();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_showtype();
  inline void clear_has_m_showtype();
  inline void set_has_m_weights();
  inline void clear_has_m_weights();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_rececond();
  inline void clear_has_m_rececond();
  inline void set_has_m_receadd();
  inline void clear_has_m_receadd();
  inline void set_has_m_comcond();
  inline void clear_has_m_comcond();
  inline void set_has_m_nexttask();
  inline void clear_has_m_nexttask();
  inline void set_has_m_tracker();
  inline void clear_has_m_tracker();
  inline void set_has_m_subtype();
  inline void clear_has_m_subtype();
  inline void set_has_m_subnpc();
  inline void clear_has_m_subnpc();
  inline void set_has_m_subdesc();
  inline void clear_has_m_subdesc();
  inline void set_has_m_subaward();
  inline void clear_has_m_subaward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_minlv_;
  ::google::protobuf::int32 m_truelv_;
  ::google::protobuf::int32 m_type_;
  ::std::string* m_showtype_;
  ::std::string* m_name_;
  ::std::string* m_rececond_;
  ::google::protobuf::int32 m_weights_;
  ::google::protobuf::int32 m_nexttask_;
  ::std::string* m_receadd_;
  ::std::string* m_comcond_;
  ::std::string* m_tracker_;
  ::std::string* m_subtype_;
  ::std::string* m_subdesc_;
  ::google::protobuf::int32 m_subnpc_;
  ::google::protobuf::int32 m_subaward_;
  ::google::protobuf::RepeatedPtrField< ::std::string> m_submsg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static E_TaskTask* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_TaskTask : public ::google::protobuf::Message {
 public:
  Sheet_TaskTask();
  virtual ~Sheet_TaskTask();

  Sheet_TaskTask(const Sheet_TaskTask& from);

  inline Sheet_TaskTask& operator=(const Sheet_TaskTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_TaskTask& default_instance();

  void Swap(Sheet_TaskTask* other);

  // implements Message ----------------------------------------------

  Sheet_TaskTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_TaskTask& from);
  void MergeFrom(const Sheet_TaskTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_TaskTask E_TaskTask_List = 1;
  inline int e_tasktask_list_size() const;
  inline void clear_e_tasktask_list();
  static const int kETaskTaskListFieldNumber = 1;
  inline const ::proto_ff::E_TaskTask& e_tasktask_list(int index) const;
  inline ::proto_ff::E_TaskTask* mutable_e_tasktask_list(int index);
  inline ::proto_ff::E_TaskTask* add_e_tasktask_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_TaskTask >&
      e_tasktask_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_TaskTask >*
      mutable_e_tasktask_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_TaskTask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_TaskTask > e_tasktask_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static Sheet_TaskTask* default_instance_;
};
// ===================================================================


// ===================================================================

// E_TaskTask

// optional int32 m_id = 1;
inline bool E_TaskTask::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_TaskTask::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_TaskTask::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_TaskTask::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_TaskTask::m_id() const {
  return m_id_;
}
inline void E_TaskTask::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_minlv = 2;
inline bool E_TaskTask::has_m_minlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_TaskTask::set_has_m_minlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_TaskTask::clear_has_m_minlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_TaskTask::clear_m_minlv() {
  m_minlv_ = 0;
  clear_has_m_minlv();
}
inline ::google::protobuf::int32 E_TaskTask::m_minlv() const {
  return m_minlv_;
}
inline void E_TaskTask::set_m_minlv(::google::protobuf::int32 value) {
  set_has_m_minlv();
  m_minlv_ = value;
}

// optional int32 m_truelv = 3;
inline bool E_TaskTask::has_m_truelv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_TaskTask::set_has_m_truelv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_TaskTask::clear_has_m_truelv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_TaskTask::clear_m_truelv() {
  m_truelv_ = 0;
  clear_has_m_truelv();
}
inline ::google::protobuf::int32 E_TaskTask::m_truelv() const {
  return m_truelv_;
}
inline void E_TaskTask::set_m_truelv(::google::protobuf::int32 value) {
  set_has_m_truelv();
  m_truelv_ = value;
}

// optional int32 m_type = 4;
inline bool E_TaskTask::has_m_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_TaskTask::set_has_m_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_TaskTask::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_TaskTask::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_TaskTask::m_type() const {
  return m_type_;
}
inline void E_TaskTask::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional string m_showtype = 5;
inline bool E_TaskTask::has_m_showtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_TaskTask::set_has_m_showtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_TaskTask::clear_has_m_showtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_TaskTask::clear_m_showtype() {
  if (m_showtype_ != &::google::protobuf::internal::kEmptyString) {
    m_showtype_->clear();
  }
  clear_has_m_showtype();
}
inline const ::std::string& E_TaskTask::m_showtype() const {
  return *m_showtype_;
}
inline void E_TaskTask::set_m_showtype(const ::std::string& value) {
  set_has_m_showtype();
  if (m_showtype_ == &::google::protobuf::internal::kEmptyString) {
    m_showtype_ = new ::std::string;
  }
  m_showtype_->assign(value);
}
inline void E_TaskTask::set_m_showtype(const char* value) {
  set_has_m_showtype();
  if (m_showtype_ == &::google::protobuf::internal::kEmptyString) {
    m_showtype_ = new ::std::string;
  }
  m_showtype_->assign(value);
}
inline void E_TaskTask::set_m_showtype(const char* value, size_t size) {
  set_has_m_showtype();
  if (m_showtype_ == &::google::protobuf::internal::kEmptyString) {
    m_showtype_ = new ::std::string;
  }
  m_showtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_TaskTask::mutable_m_showtype() {
  set_has_m_showtype();
  if (m_showtype_ == &::google::protobuf::internal::kEmptyString) {
    m_showtype_ = new ::std::string;
  }
  return m_showtype_;
}
inline ::std::string* E_TaskTask::release_m_showtype() {
  clear_has_m_showtype();
  if (m_showtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_showtype_;
    m_showtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_TaskTask::set_allocated_m_showtype(::std::string* m_showtype) {
  if (m_showtype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_showtype_;
  }
  if (m_showtype) {
    set_has_m_showtype();
    m_showtype_ = m_showtype;
  } else {
    clear_has_m_showtype();
    m_showtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_weights = 6;
inline bool E_TaskTask::has_m_weights() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_TaskTask::set_has_m_weights() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_TaskTask::clear_has_m_weights() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_TaskTask::clear_m_weights() {
  m_weights_ = 0;
  clear_has_m_weights();
}
inline ::google::protobuf::int32 E_TaskTask::m_weights() const {
  return m_weights_;
}
inline void E_TaskTask::set_m_weights(::google::protobuf::int32 value) {
  set_has_m_weights();
  m_weights_ = value;
}

// optional string m_name = 7;
inline bool E_TaskTask::has_m_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_TaskTask::set_has_m_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_TaskTask::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_TaskTask::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& E_TaskTask::m_name() const {
  return *m_name_;
}
inline void E_TaskTask::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_TaskTask::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_TaskTask::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_TaskTask::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* E_TaskTask::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_TaskTask::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_rececond = 8;
inline bool E_TaskTask::has_m_rececond() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_TaskTask::set_has_m_rececond() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_TaskTask::clear_has_m_rececond() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_TaskTask::clear_m_rececond() {
  if (m_rececond_ != &::google::protobuf::internal::kEmptyString) {
    m_rececond_->clear();
  }
  clear_has_m_rececond();
}
inline const ::std::string& E_TaskTask::m_rececond() const {
  return *m_rececond_;
}
inline void E_TaskTask::set_m_rececond(const ::std::string& value) {
  set_has_m_rececond();
  if (m_rececond_ == &::google::protobuf::internal::kEmptyString) {
    m_rececond_ = new ::std::string;
  }
  m_rececond_->assign(value);
}
inline void E_TaskTask::set_m_rececond(const char* value) {
  set_has_m_rececond();
  if (m_rececond_ == &::google::protobuf::internal::kEmptyString) {
    m_rececond_ = new ::std::string;
  }
  m_rececond_->assign(value);
}
inline void E_TaskTask::set_m_rececond(const char* value, size_t size) {
  set_has_m_rececond();
  if (m_rececond_ == &::google::protobuf::internal::kEmptyString) {
    m_rececond_ = new ::std::string;
  }
  m_rececond_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_TaskTask::mutable_m_rececond() {
  set_has_m_rececond();
  if (m_rececond_ == &::google::protobuf::internal::kEmptyString) {
    m_rececond_ = new ::std::string;
  }
  return m_rececond_;
}
inline ::std::string* E_TaskTask::release_m_rececond() {
  clear_has_m_rececond();
  if (m_rececond_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_rececond_;
    m_rececond_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_TaskTask::set_allocated_m_rececond(::std::string* m_rececond) {
  if (m_rececond_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rececond_;
  }
  if (m_rececond) {
    set_has_m_rececond();
    m_rececond_ = m_rececond;
  } else {
    clear_has_m_rececond();
    m_rececond_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_receadd = 9;
inline bool E_TaskTask::has_m_receadd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_TaskTask::set_has_m_receadd() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_TaskTask::clear_has_m_receadd() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_TaskTask::clear_m_receadd() {
  if (m_receadd_ != &::google::protobuf::internal::kEmptyString) {
    m_receadd_->clear();
  }
  clear_has_m_receadd();
}
inline const ::std::string& E_TaskTask::m_receadd() const {
  return *m_receadd_;
}
inline void E_TaskTask::set_m_receadd(const ::std::string& value) {
  set_has_m_receadd();
  if (m_receadd_ == &::google::protobuf::internal::kEmptyString) {
    m_receadd_ = new ::std::string;
  }
  m_receadd_->assign(value);
}
inline void E_TaskTask::set_m_receadd(const char* value) {
  set_has_m_receadd();
  if (m_receadd_ == &::google::protobuf::internal::kEmptyString) {
    m_receadd_ = new ::std::string;
  }
  m_receadd_->assign(value);
}
inline void E_TaskTask::set_m_receadd(const char* value, size_t size) {
  set_has_m_receadd();
  if (m_receadd_ == &::google::protobuf::internal::kEmptyString) {
    m_receadd_ = new ::std::string;
  }
  m_receadd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_TaskTask::mutable_m_receadd() {
  set_has_m_receadd();
  if (m_receadd_ == &::google::protobuf::internal::kEmptyString) {
    m_receadd_ = new ::std::string;
  }
  return m_receadd_;
}
inline ::std::string* E_TaskTask::release_m_receadd() {
  clear_has_m_receadd();
  if (m_receadd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_receadd_;
    m_receadd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_TaskTask::set_allocated_m_receadd(::std::string* m_receadd) {
  if (m_receadd_ != &::google::protobuf::internal::kEmptyString) {
    delete m_receadd_;
  }
  if (m_receadd) {
    set_has_m_receadd();
    m_receadd_ = m_receadd;
  } else {
    clear_has_m_receadd();
    m_receadd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_comcond = 10;
inline bool E_TaskTask::has_m_comcond() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_TaskTask::set_has_m_comcond() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_TaskTask::clear_has_m_comcond() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_TaskTask::clear_m_comcond() {
  if (m_comcond_ != &::google::protobuf::internal::kEmptyString) {
    m_comcond_->clear();
  }
  clear_has_m_comcond();
}
inline const ::std::string& E_TaskTask::m_comcond() const {
  return *m_comcond_;
}
inline void E_TaskTask::set_m_comcond(const ::std::string& value) {
  set_has_m_comcond();
  if (m_comcond_ == &::google::protobuf::internal::kEmptyString) {
    m_comcond_ = new ::std::string;
  }
  m_comcond_->assign(value);
}
inline void E_TaskTask::set_m_comcond(const char* value) {
  set_has_m_comcond();
  if (m_comcond_ == &::google::protobuf::internal::kEmptyString) {
    m_comcond_ = new ::std::string;
  }
  m_comcond_->assign(value);
}
inline void E_TaskTask::set_m_comcond(const char* value, size_t size) {
  set_has_m_comcond();
  if (m_comcond_ == &::google::protobuf::internal::kEmptyString) {
    m_comcond_ = new ::std::string;
  }
  m_comcond_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_TaskTask::mutable_m_comcond() {
  set_has_m_comcond();
  if (m_comcond_ == &::google::protobuf::internal::kEmptyString) {
    m_comcond_ = new ::std::string;
  }
  return m_comcond_;
}
inline ::std::string* E_TaskTask::release_m_comcond() {
  clear_has_m_comcond();
  if (m_comcond_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_comcond_;
    m_comcond_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_TaskTask::set_allocated_m_comcond(::std::string* m_comcond) {
  if (m_comcond_ != &::google::protobuf::internal::kEmptyString) {
    delete m_comcond_;
  }
  if (m_comcond) {
    set_has_m_comcond();
    m_comcond_ = m_comcond;
  } else {
    clear_has_m_comcond();
    m_comcond_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_nexttask = 11;
inline bool E_TaskTask::has_m_nexttask() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_TaskTask::set_has_m_nexttask() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_TaskTask::clear_has_m_nexttask() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_TaskTask::clear_m_nexttask() {
  m_nexttask_ = 0;
  clear_has_m_nexttask();
}
inline ::google::protobuf::int32 E_TaskTask::m_nexttask() const {
  return m_nexttask_;
}
inline void E_TaskTask::set_m_nexttask(::google::protobuf::int32 value) {
  set_has_m_nexttask();
  m_nexttask_ = value;
}

// optional string m_tracker = 12;
inline bool E_TaskTask::has_m_tracker() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_TaskTask::set_has_m_tracker() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_TaskTask::clear_has_m_tracker() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_TaskTask::clear_m_tracker() {
  if (m_tracker_ != &::google::protobuf::internal::kEmptyString) {
    m_tracker_->clear();
  }
  clear_has_m_tracker();
}
inline const ::std::string& E_TaskTask::m_tracker() const {
  return *m_tracker_;
}
inline void E_TaskTask::set_m_tracker(const ::std::string& value) {
  set_has_m_tracker();
  if (m_tracker_ == &::google::protobuf::internal::kEmptyString) {
    m_tracker_ = new ::std::string;
  }
  m_tracker_->assign(value);
}
inline void E_TaskTask::set_m_tracker(const char* value) {
  set_has_m_tracker();
  if (m_tracker_ == &::google::protobuf::internal::kEmptyString) {
    m_tracker_ = new ::std::string;
  }
  m_tracker_->assign(value);
}
inline void E_TaskTask::set_m_tracker(const char* value, size_t size) {
  set_has_m_tracker();
  if (m_tracker_ == &::google::protobuf::internal::kEmptyString) {
    m_tracker_ = new ::std::string;
  }
  m_tracker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_TaskTask::mutable_m_tracker() {
  set_has_m_tracker();
  if (m_tracker_ == &::google::protobuf::internal::kEmptyString) {
    m_tracker_ = new ::std::string;
  }
  return m_tracker_;
}
inline ::std::string* E_TaskTask::release_m_tracker() {
  clear_has_m_tracker();
  if (m_tracker_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_tracker_;
    m_tracker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_TaskTask::set_allocated_m_tracker(::std::string* m_tracker) {
  if (m_tracker_ != &::google::protobuf::internal::kEmptyString) {
    delete m_tracker_;
  }
  if (m_tracker) {
    set_has_m_tracker();
    m_tracker_ = m_tracker;
  } else {
    clear_has_m_tracker();
    m_tracker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_subtype = 13;
inline bool E_TaskTask::has_m_subtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_TaskTask::set_has_m_subtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_TaskTask::clear_has_m_subtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_TaskTask::clear_m_subtype() {
  if (m_subtype_ != &::google::protobuf::internal::kEmptyString) {
    m_subtype_->clear();
  }
  clear_has_m_subtype();
}
inline const ::std::string& E_TaskTask::m_subtype() const {
  return *m_subtype_;
}
inline void E_TaskTask::set_m_subtype(const ::std::string& value) {
  set_has_m_subtype();
  if (m_subtype_ == &::google::protobuf::internal::kEmptyString) {
    m_subtype_ = new ::std::string;
  }
  m_subtype_->assign(value);
}
inline void E_TaskTask::set_m_subtype(const char* value) {
  set_has_m_subtype();
  if (m_subtype_ == &::google::protobuf::internal::kEmptyString) {
    m_subtype_ = new ::std::string;
  }
  m_subtype_->assign(value);
}
inline void E_TaskTask::set_m_subtype(const char* value, size_t size) {
  set_has_m_subtype();
  if (m_subtype_ == &::google::protobuf::internal::kEmptyString) {
    m_subtype_ = new ::std::string;
  }
  m_subtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_TaskTask::mutable_m_subtype() {
  set_has_m_subtype();
  if (m_subtype_ == &::google::protobuf::internal::kEmptyString) {
    m_subtype_ = new ::std::string;
  }
  return m_subtype_;
}
inline ::std::string* E_TaskTask::release_m_subtype() {
  clear_has_m_subtype();
  if (m_subtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_subtype_;
    m_subtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_TaskTask::set_allocated_m_subtype(::std::string* m_subtype) {
  if (m_subtype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_subtype_;
  }
  if (m_subtype) {
    set_has_m_subtype();
    m_subtype_ = m_subtype;
  } else {
    clear_has_m_subtype();
    m_subtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_subnpc = 14;
inline bool E_TaskTask::has_m_subnpc() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_TaskTask::set_has_m_subnpc() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_TaskTask::clear_has_m_subnpc() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_TaskTask::clear_m_subnpc() {
  m_subnpc_ = 0;
  clear_has_m_subnpc();
}
inline ::google::protobuf::int32 E_TaskTask::m_subnpc() const {
  return m_subnpc_;
}
inline void E_TaskTask::set_m_subnpc(::google::protobuf::int32 value) {
  set_has_m_subnpc();
  m_subnpc_ = value;
}

// optional string m_subdesc = 15;
inline bool E_TaskTask::has_m_subdesc() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_TaskTask::set_has_m_subdesc() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_TaskTask::clear_has_m_subdesc() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_TaskTask::clear_m_subdesc() {
  if (m_subdesc_ != &::google::protobuf::internal::kEmptyString) {
    m_subdesc_->clear();
  }
  clear_has_m_subdesc();
}
inline const ::std::string& E_TaskTask::m_subdesc() const {
  return *m_subdesc_;
}
inline void E_TaskTask::set_m_subdesc(const ::std::string& value) {
  set_has_m_subdesc();
  if (m_subdesc_ == &::google::protobuf::internal::kEmptyString) {
    m_subdesc_ = new ::std::string;
  }
  m_subdesc_->assign(value);
}
inline void E_TaskTask::set_m_subdesc(const char* value) {
  set_has_m_subdesc();
  if (m_subdesc_ == &::google::protobuf::internal::kEmptyString) {
    m_subdesc_ = new ::std::string;
  }
  m_subdesc_->assign(value);
}
inline void E_TaskTask::set_m_subdesc(const char* value, size_t size) {
  set_has_m_subdesc();
  if (m_subdesc_ == &::google::protobuf::internal::kEmptyString) {
    m_subdesc_ = new ::std::string;
  }
  m_subdesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_TaskTask::mutable_m_subdesc() {
  set_has_m_subdesc();
  if (m_subdesc_ == &::google::protobuf::internal::kEmptyString) {
    m_subdesc_ = new ::std::string;
  }
  return m_subdesc_;
}
inline ::std::string* E_TaskTask::release_m_subdesc() {
  clear_has_m_subdesc();
  if (m_subdesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_subdesc_;
    m_subdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_TaskTask::set_allocated_m_subdesc(::std::string* m_subdesc) {
  if (m_subdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete m_subdesc_;
  }
  if (m_subdesc) {
    set_has_m_subdesc();
    m_subdesc_ = m_subdesc;
  } else {
    clear_has_m_subdesc();
    m_subdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_subaward = 16;
inline bool E_TaskTask::has_m_subaward() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_TaskTask::set_has_m_subaward() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_TaskTask::clear_has_m_subaward() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_TaskTask::clear_m_subaward() {
  m_subaward_ = 0;
  clear_has_m_subaward();
}
inline ::google::protobuf::int32 E_TaskTask::m_subaward() const {
  return m_subaward_;
}
inline void E_TaskTask::set_m_subaward(::google::protobuf::int32 value) {
  set_has_m_subaward();
  m_subaward_ = value;
}

// repeated string m_submsg = 17;
inline int E_TaskTask::m_submsg_size() const {
  return m_submsg_.size();
}
inline void E_TaskTask::clear_m_submsg() {
  m_submsg_.Clear();
}
inline const ::std::string& E_TaskTask::m_submsg(int index) const {
  return m_submsg_.Get(index);
}
inline ::std::string* E_TaskTask::mutable_m_submsg(int index) {
  return m_submsg_.Mutable(index);
}
inline void E_TaskTask::set_m_submsg(int index, const ::std::string& value) {
  m_submsg_.Mutable(index)->assign(value);
}
inline void E_TaskTask::set_m_submsg(int index, const char* value) {
  m_submsg_.Mutable(index)->assign(value);
}
inline void E_TaskTask::set_m_submsg(int index, const char* value, size_t size) {
  m_submsg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_TaskTask::add_m_submsg() {
  return m_submsg_.Add();
}
inline void E_TaskTask::add_m_submsg(const ::std::string& value) {
  m_submsg_.Add()->assign(value);
}
inline void E_TaskTask::add_m_submsg(const char* value) {
  m_submsg_.Add()->assign(value);
}
inline void E_TaskTask::add_m_submsg(const char* value, size_t size) {
  m_submsg_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
E_TaskTask::m_submsg() const {
  return m_submsg_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
E_TaskTask::mutable_m_submsg() {
  return &m_submsg_;
}

// -------------------------------------------------------------------

// Sheet_TaskTask

// repeated .proto_ff.E_TaskTask E_TaskTask_List = 1;
inline int Sheet_TaskTask::e_tasktask_list_size() const {
  return e_tasktask_list_.size();
}
inline void Sheet_TaskTask::clear_e_tasktask_list() {
  e_tasktask_list_.Clear();
}
inline const ::proto_ff::E_TaskTask& Sheet_TaskTask::e_tasktask_list(int index) const {
  return e_tasktask_list_.Get(index);
}
inline ::proto_ff::E_TaskTask* Sheet_TaskTask::mutable_e_tasktask_list(int index) {
  return e_tasktask_list_.Mutable(index);
}
inline ::proto_ff::E_TaskTask* Sheet_TaskTask::add_e_tasktask_list() {
  return e_tasktask_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_TaskTask >&
Sheet_TaskTask::e_tasktask_list() const {
  return e_tasktask_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_TaskTask >*
Sheet_TaskTask::mutable_e_tasktask_list() {
  return &e_tasktask_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_task_2eproto__INCLUDED
