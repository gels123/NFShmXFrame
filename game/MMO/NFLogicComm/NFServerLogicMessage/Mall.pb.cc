// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Mall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* MallProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallMutProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallMutProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallBuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallBuyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallBuyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallBuyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallHolyBeastExchargeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallHolyBeastExchargeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallHolyBeastExchargeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallHolyBeastExchargeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallSendFlowerGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallSendFlowerGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallSendFlowerGiftRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallSendFlowerGiftRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallRecvFlowerGiftNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallRecvFlowerGiftNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCSendFlowerGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCSendFlowerGift_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Mall_2eproto() {
  protobuf_AddDesc_Mall_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Mall.proto");
  GOOGLE_CHECK(file != NULL);
  MallProto_descriptor_ = file->message_type(0);
  static const int MallProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallProto, num_),
  };
  MallProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallProto_descriptor_,
      MallProto::default_instance_,
      MallProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallProto));
  MallMutProto_descriptor_ = file->message_type(1);
  static const int MallMutProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallMutProto, lst_),
  };
  MallMutProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallMutProto_descriptor_,
      MallMutProto::default_instance_,
      MallMutProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallMutProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallMutProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallMutProto));
  MallInfoReq_descriptor_ = file->message_type(2);
  static const int MallInfoReq_offsets_[1] = {
  };
  MallInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallInfoReq_descriptor_,
      MallInfoReq::default_instance_,
      MallInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallInfoReq));
  MallInfoRsp_descriptor_ = file->message_type(3);
  static const int MallInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfoRsp, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfoRsp, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfoRsp, forever_),
  };
  MallInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallInfoRsp_descriptor_,
      MallInfoRsp::default_instance_,
      MallInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallInfoRsp));
  MallBuyReq_descriptor_ = file->message_type(4);
  static const int MallBuyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallBuyReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallBuyReq, num_),
  };
  MallBuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallBuyReq_descriptor_,
      MallBuyReq::default_instance_,
      MallBuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallBuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallBuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallBuyReq));
  MallBuyRsp_descriptor_ = file->message_type(5);
  static const int MallBuyRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallBuyRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallBuyRsp, id_),
  };
  MallBuyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallBuyRsp_descriptor_,
      MallBuyRsp::default_instance_,
      MallBuyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallBuyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallBuyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallBuyRsp));
  MallUpdateRsp_descriptor_ = file->message_type(6);
  static const int MallUpdateRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallUpdateRsp, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallUpdateRsp, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallUpdateRsp, forever_),
  };
  MallUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallUpdateRsp_descriptor_,
      MallUpdateRsp::default_instance_,
      MallUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallUpdateRsp));
  MallHolyBeastExchargeReq_descriptor_ = file->message_type(7);
  static const int MallHolyBeastExchargeReq_offsets_[1] = {
  };
  MallHolyBeastExchargeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallHolyBeastExchargeReq_descriptor_,
      MallHolyBeastExchargeReq::default_instance_,
      MallHolyBeastExchargeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallHolyBeastExchargeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallHolyBeastExchargeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallHolyBeastExchargeReq));
  MallHolyBeastExchargeRsp_descriptor_ = file->message_type(8);
  static const int MallHolyBeastExchargeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallHolyBeastExchargeRsp, ret_),
  };
  MallHolyBeastExchargeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallHolyBeastExchargeRsp_descriptor_,
      MallHolyBeastExchargeRsp::default_instance_,
      MallHolyBeastExchargeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallHolyBeastExchargeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallHolyBeastExchargeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallHolyBeastExchargeRsp));
  MallSendFlowerGiftReq_descriptor_ = file->message_type(9);
  static const int MallSendFlowerGiftReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallSendFlowerGiftReq, gift_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallSendFlowerGiftReq, gift_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallSendFlowerGiftReq, recv_cid_),
  };
  MallSendFlowerGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallSendFlowerGiftReq_descriptor_,
      MallSendFlowerGiftReq::default_instance_,
      MallSendFlowerGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallSendFlowerGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallSendFlowerGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallSendFlowerGiftReq));
  MallSendFlowerGiftRsp_descriptor_ = file->message_type(10);
  static const int MallSendFlowerGiftRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallSendFlowerGiftRsp, ret_),
  };
  MallSendFlowerGiftRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallSendFlowerGiftRsp_descriptor_,
      MallSendFlowerGiftRsp::default_instance_,
      MallSendFlowerGiftRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallSendFlowerGiftRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallSendFlowerGiftRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallSendFlowerGiftRsp));
  MallRecvFlowerGiftNotify_descriptor_ = file->message_type(11);
  static const int MallRecvFlowerGiftNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallRecvFlowerGiftNotify, gift_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallRecvFlowerGiftNotify, gift_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallRecvFlowerGiftNotify, send_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallRecvFlowerGiftNotify, send_name_),
  };
  MallRecvFlowerGiftNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallRecvFlowerGiftNotify_descriptor_,
      MallRecvFlowerGiftNotify::default_instance_,
      MallRecvFlowerGiftNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallRecvFlowerGiftNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallRecvFlowerGiftNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallRecvFlowerGiftNotify));
  LCSendFlowerGift_descriptor_ = file->message_type(12);
  static const int LCSendFlowerGift_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCSendFlowerGift, gift_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCSendFlowerGift, gift_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCSendFlowerGift, recv_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCSendFlowerGift, send_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCSendFlowerGift, use_item_),
  };
  LCSendFlowerGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCSendFlowerGift_descriptor_,
      LCSendFlowerGift::default_instance_,
      LCSendFlowerGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCSendFlowerGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCSendFlowerGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCSendFlowerGift));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Mall_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallProto_descriptor_, &MallProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallMutProto_descriptor_, &MallMutProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallInfoReq_descriptor_, &MallInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallInfoRsp_descriptor_, &MallInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallBuyReq_descriptor_, &MallBuyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallBuyRsp_descriptor_, &MallBuyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallUpdateRsp_descriptor_, &MallUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallHolyBeastExchargeReq_descriptor_, &MallHolyBeastExchargeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallHolyBeastExchargeRsp_descriptor_, &MallHolyBeastExchargeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallSendFlowerGiftReq_descriptor_, &MallSendFlowerGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallSendFlowerGiftRsp_descriptor_, &MallSendFlowerGiftRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallRecvFlowerGiftNotify_descriptor_, &MallRecvFlowerGiftNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCSendFlowerGift_descriptor_, &LCSendFlowerGift::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Mall_2eproto() {
  delete MallProto::default_instance_;
  delete MallProto_reflection_;
  delete MallMutProto::default_instance_;
  delete MallMutProto_reflection_;
  delete MallInfoReq::default_instance_;
  delete MallInfoReq_reflection_;
  delete MallInfoRsp::default_instance_;
  delete MallInfoRsp_reflection_;
  delete MallBuyReq::default_instance_;
  delete MallBuyReq_reflection_;
  delete MallBuyRsp::default_instance_;
  delete MallBuyRsp_reflection_;
  delete MallUpdateRsp::default_instance_;
  delete MallUpdateRsp_reflection_;
  delete MallHolyBeastExchargeReq::default_instance_;
  delete MallHolyBeastExchargeReq_reflection_;
  delete MallHolyBeastExchargeRsp::default_instance_;
  delete MallHolyBeastExchargeRsp_reflection_;
  delete MallSendFlowerGiftReq::default_instance_;
  delete MallSendFlowerGiftReq_reflection_;
  delete MallSendFlowerGiftRsp::default_instance_;
  delete MallSendFlowerGiftRsp_reflection_;
  delete MallRecvFlowerGiftNotify::default_instance_;
  delete MallRecvFlowerGiftNotify_reflection_;
  delete LCSendFlowerGift::default_instance_;
  delete LCSendFlowerGift_reflection_;
}

void protobuf_AddDesc_Mall_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nMall.proto\022\010proto_ff\032\tCom.proto\032\017ComDe"
    "fine.proto\"$\n\tMallProto\022\n\n\002id\030\001 \001(\003\022\013\n\003n"
    "um\030\002 \001(\r\"0\n\014MallMutProto\022 \n\003lst\030\001 \003(\0132\023."
    "proto_ff.MallProto\"\r\n\013MallInfoReq\"\201\001\n\013Ma"
    "llInfoRsp\022#\n\003day\030\001 \001(\0132\026.proto_ff.MallMu"
    "tProto\022$\n\004week\030\002 \001(\0132\026.proto_ff.MallMutP"
    "roto\022\'\n\007forever\030\003 \001(\0132\026.proto_ff.MallMut"
    "Proto\"%\n\nMallBuyReq\022\n\n\002id\030\001 \002(\003\022\013\n\003num\030\002"
    " \002(\r\"%\n\nMallBuyRsp\022\013\n\003ret\030\001 \002(\005\022\n\n\002id\030\002 "
    "\001(\005\"\203\001\n\rMallUpdateRsp\022#\n\003day\030\001 \001(\0132\026.pro"
    "to_ff.MallMutProto\022$\n\004week\030\002 \001(\0132\026.proto"
    "_ff.MallMutProto\022\'\n\007forever\030\003 \001(\0132\026.prot"
    "o_ff.MallMutProto\"\032\n\030MallHolyBeastExchar"
    "geReq\"\'\n\030MallHolyBeastExchargeRsp\022\013\n\003ret"
    "\030\001 \001(\005\"L\n\025MallSendFlowerGiftReq\022\017\n\007gift_"
    "id\030\001 \001(\005\022\020\n\010gift_num\030\002 \001(\005\022\020\n\010recv_cid\030\003"
    " \001(\004\"$\n\025MallSendFlowerGiftRsp\022\013\n\003ret\030\001 \001"
    "(\005\"b\n\030MallRecvFlowerGiftNotify\022\017\n\007gift_i"
    "d\030\001 \001(\005\022\020\n\010gift_num\030\002 \001(\005\022\020\n\010send_cid\030\003 "
    "\001(\004\022\021\n\tsend_name\030\004 \001(\014\"k\n\020LCSendFlowerGi"
    "ft\022\017\n\007gift_id\030\001 \001(\005\022\020\n\010gift_num\030\002 \001(\005\022\020\n"
    "\010recv_cid\030\003 \001(\004\022\020\n\010send_cid\030\004 \001(\004\022\020\n\010use"
    "_item\030\005 \001(\010", 891);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Mall.proto", &protobuf_RegisterTypes);
  MallProto::default_instance_ = new MallProto();
  MallMutProto::default_instance_ = new MallMutProto();
  MallInfoReq::default_instance_ = new MallInfoReq();
  MallInfoRsp::default_instance_ = new MallInfoRsp();
  MallBuyReq::default_instance_ = new MallBuyReq();
  MallBuyRsp::default_instance_ = new MallBuyRsp();
  MallUpdateRsp::default_instance_ = new MallUpdateRsp();
  MallHolyBeastExchargeReq::default_instance_ = new MallHolyBeastExchargeReq();
  MallHolyBeastExchargeRsp::default_instance_ = new MallHolyBeastExchargeRsp();
  MallSendFlowerGiftReq::default_instance_ = new MallSendFlowerGiftReq();
  MallSendFlowerGiftRsp::default_instance_ = new MallSendFlowerGiftRsp();
  MallRecvFlowerGiftNotify::default_instance_ = new MallRecvFlowerGiftNotify();
  LCSendFlowerGift::default_instance_ = new LCSendFlowerGift();
  MallProto::default_instance_->InitAsDefaultInstance();
  MallMutProto::default_instance_->InitAsDefaultInstance();
  MallInfoReq::default_instance_->InitAsDefaultInstance();
  MallInfoRsp::default_instance_->InitAsDefaultInstance();
  MallBuyReq::default_instance_->InitAsDefaultInstance();
  MallBuyRsp::default_instance_->InitAsDefaultInstance();
  MallUpdateRsp::default_instance_->InitAsDefaultInstance();
  MallHolyBeastExchargeReq::default_instance_->InitAsDefaultInstance();
  MallHolyBeastExchargeRsp::default_instance_->InitAsDefaultInstance();
  MallSendFlowerGiftReq::default_instance_->InitAsDefaultInstance();
  MallSendFlowerGiftRsp::default_instance_->InitAsDefaultInstance();
  MallRecvFlowerGiftNotify::default_instance_->InitAsDefaultInstance();
  LCSendFlowerGift::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Mall_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Mall_2eproto {
  StaticDescriptorInitializer_Mall_2eproto() {
    protobuf_AddDesc_Mall_2eproto();
  }
} static_descriptor_initializer_Mall_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MallProto::kIdFieldNumber;
const int MallProto::kNumFieldNumber;
#endif  // !_MSC_VER

MallProto::MallProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallProto::InitAsDefaultInstance() {
}

MallProto::MallProto(const MallProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallProto::~MallProto() {
  SharedDtor();
}

void MallProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallProto_descriptor_;
}

const MallProto& MallProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mall_2eproto();
  return *default_instance_;
}

MallProto* MallProto::default_instance_ = NULL;

MallProto* MallProto::New() const {
  return new MallProto;
}

void MallProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallProto::MergeFrom(const MallProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallProto::CopyFrom(const MallProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallProto::IsInitialized() const {

  return true;
}

void MallProto::Swap(MallProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallProto_descriptor_;
  metadata.reflection = MallProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallMutProto::kLstFieldNumber;
#endif  // !_MSC_VER

MallMutProto::MallMutProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallMutProto::InitAsDefaultInstance() {
}

MallMutProto::MallMutProto(const MallMutProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallMutProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallMutProto::~MallMutProto() {
  SharedDtor();
}

void MallMutProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallMutProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallMutProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallMutProto_descriptor_;
}

const MallMutProto& MallMutProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mall_2eproto();
  return *default_instance_;
}

MallMutProto* MallMutProto::default_instance_ = NULL;

MallMutProto* MallMutProto::New() const {
  return new MallMutProto;
}

void MallMutProto::Clear() {
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallMutProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.MallProto lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallMutProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.MallProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallMutProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.MallProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallMutProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.MallProto lst = 1;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallMutProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallMutProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallMutProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallMutProto::MergeFrom(const MallMutProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallMutProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallMutProto::CopyFrom(const MallMutProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallMutProto::IsInitialized() const {

  return true;
}

void MallMutProto::Swap(MallMutProto* other) {
  if (other != this) {
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallMutProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallMutProto_descriptor_;
  metadata.reflection = MallMutProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MallInfoReq::MallInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallInfoReq::InitAsDefaultInstance() {
}

MallInfoReq::MallInfoReq(const MallInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallInfoReq::~MallInfoReq() {
  SharedDtor();
}

void MallInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallInfoReq_descriptor_;
}

const MallInfoReq& MallInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mall_2eproto();
  return *default_instance_;
}

MallInfoReq* MallInfoReq::default_instance_ = NULL;

MallInfoReq* MallInfoReq::New() const {
  return new MallInfoReq;
}

void MallInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MallInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallInfoReq::MergeFrom(const MallInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallInfoReq::CopyFrom(const MallInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallInfoReq::IsInitialized() const {

  return true;
}

void MallInfoReq::Swap(MallInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallInfoReq_descriptor_;
  metadata.reflection = MallInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallInfoRsp::kDayFieldNumber;
const int MallInfoRsp::kWeekFieldNumber;
const int MallInfoRsp::kForeverFieldNumber;
#endif  // !_MSC_VER

MallInfoRsp::MallInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallInfoRsp::InitAsDefaultInstance() {
  day_ = const_cast< ::proto_ff::MallMutProto*>(&::proto_ff::MallMutProto::default_instance());
  week_ = const_cast< ::proto_ff::MallMutProto*>(&::proto_ff::MallMutProto::default_instance());
  forever_ = const_cast< ::proto_ff::MallMutProto*>(&::proto_ff::MallMutProto::default_instance());
}

MallInfoRsp::MallInfoRsp(const MallInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  day_ = NULL;
  week_ = NULL;
  forever_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallInfoRsp::~MallInfoRsp() {
  SharedDtor();
}

void MallInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete day_;
    delete week_;
    delete forever_;
  }
}

void MallInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallInfoRsp_descriptor_;
}

const MallInfoRsp& MallInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mall_2eproto();
  return *default_instance_;
}

MallInfoRsp* MallInfoRsp::default_instance_ = NULL;

MallInfoRsp* MallInfoRsp::New() const {
  return new MallInfoRsp;
}

void MallInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_day()) {
      if (day_ != NULL) day_->::proto_ff::MallMutProto::Clear();
    }
    if (has_week()) {
      if (week_ != NULL) week_->::proto_ff::MallMutProto::Clear();
    }
    if (has_forever()) {
      if (forever_ != NULL) forever_->::proto_ff::MallMutProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.MallMutProto day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_day()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_week;
        break;
      }

      // optional .proto_ff.MallMutProto week = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_week:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_week()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_forever;
        break;
      }

      // optional .proto_ff.MallMutProto forever = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forever:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forever()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.MallMutProto day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->day(), output);
  }

  // optional .proto_ff.MallMutProto week = 2;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->week(), output);
  }

  // optional .proto_ff.MallMutProto forever = 3;
  if (has_forever()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->forever(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.MallMutProto day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->day(), target);
  }

  // optional .proto_ff.MallMutProto week = 2;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->week(), target);
  }

  // optional .proto_ff.MallMutProto forever = 3;
  if (has_forever()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->forever(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.MallMutProto day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->day());
    }

    // optional .proto_ff.MallMutProto week = 2;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->week());
    }

    // optional .proto_ff.MallMutProto forever = 3;
    if (has_forever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forever());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallInfoRsp::MergeFrom(const MallInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      mutable_day()->::proto_ff::MallMutProto::MergeFrom(from.day());
    }
    if (from.has_week()) {
      mutable_week()->::proto_ff::MallMutProto::MergeFrom(from.week());
    }
    if (from.has_forever()) {
      mutable_forever()->::proto_ff::MallMutProto::MergeFrom(from.forever());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallInfoRsp::CopyFrom(const MallInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallInfoRsp::IsInitialized() const {

  return true;
}

void MallInfoRsp::Swap(MallInfoRsp* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(week_, other->week_);
    std::swap(forever_, other->forever_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallInfoRsp_descriptor_;
  metadata.reflection = MallInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallBuyReq::kIdFieldNumber;
const int MallBuyReq::kNumFieldNumber;
#endif  // !_MSC_VER

MallBuyReq::MallBuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallBuyReq::InitAsDefaultInstance() {
}

MallBuyReq::MallBuyReq(const MallBuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallBuyReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallBuyReq::~MallBuyReq() {
  SharedDtor();
}

void MallBuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallBuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallBuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallBuyReq_descriptor_;
}

const MallBuyReq& MallBuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mall_2eproto();
  return *default_instance_;
}

MallBuyReq* MallBuyReq::default_instance_ = NULL;

MallBuyReq* MallBuyReq::New() const {
  return new MallBuyReq;
}

void MallBuyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallBuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallBuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallBuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallBuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallBuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallBuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallBuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallBuyReq::MergeFrom(const MallBuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallBuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallBuyReq::CopyFrom(const MallBuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallBuyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MallBuyReq::Swap(MallBuyReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallBuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallBuyReq_descriptor_;
  metadata.reflection = MallBuyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallBuyRsp::kRetFieldNumber;
const int MallBuyRsp::kIdFieldNumber;
#endif  // !_MSC_VER

MallBuyRsp::MallBuyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallBuyRsp::InitAsDefaultInstance() {
}

MallBuyRsp::MallBuyRsp(const MallBuyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallBuyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallBuyRsp::~MallBuyRsp() {
  SharedDtor();
}

void MallBuyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallBuyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallBuyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallBuyRsp_descriptor_;
}

const MallBuyRsp& MallBuyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mall_2eproto();
  return *default_instance_;
}

MallBuyRsp* MallBuyRsp::default_instance_ = NULL;

MallBuyRsp* MallBuyRsp::New() const {
  return new MallBuyRsp;
}

void MallBuyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallBuyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallBuyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallBuyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallBuyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallBuyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallBuyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallBuyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallBuyRsp::MergeFrom(const MallBuyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallBuyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallBuyRsp::CopyFrom(const MallBuyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallBuyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MallBuyRsp::Swap(MallBuyRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallBuyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallBuyRsp_descriptor_;
  metadata.reflection = MallBuyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallUpdateRsp::kDayFieldNumber;
const int MallUpdateRsp::kWeekFieldNumber;
const int MallUpdateRsp::kForeverFieldNumber;
#endif  // !_MSC_VER

MallUpdateRsp::MallUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallUpdateRsp::InitAsDefaultInstance() {
  day_ = const_cast< ::proto_ff::MallMutProto*>(&::proto_ff::MallMutProto::default_instance());
  week_ = const_cast< ::proto_ff::MallMutProto*>(&::proto_ff::MallMutProto::default_instance());
  forever_ = const_cast< ::proto_ff::MallMutProto*>(&::proto_ff::MallMutProto::default_instance());
}

MallUpdateRsp::MallUpdateRsp(const MallUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  day_ = NULL;
  week_ = NULL;
  forever_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallUpdateRsp::~MallUpdateRsp() {
  SharedDtor();
}

void MallUpdateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete day_;
    delete week_;
    delete forever_;
  }
}

void MallUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallUpdateRsp_descriptor_;
}

const MallUpdateRsp& MallUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mall_2eproto();
  return *default_instance_;
}

MallUpdateRsp* MallUpdateRsp::default_instance_ = NULL;

MallUpdateRsp* MallUpdateRsp::New() const {
  return new MallUpdateRsp;
}

void MallUpdateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_day()) {
      if (day_ != NULL) day_->::proto_ff::MallMutProto::Clear();
    }
    if (has_week()) {
      if (week_ != NULL) week_->::proto_ff::MallMutProto::Clear();
    }
    if (has_forever()) {
      if (forever_ != NULL) forever_->::proto_ff::MallMutProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.MallMutProto day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_day()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_week;
        break;
      }

      // optional .proto_ff.MallMutProto week = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_week:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_week()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_forever;
        break;
      }

      // optional .proto_ff.MallMutProto forever = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forever:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forever()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.MallMutProto day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->day(), output);
  }

  // optional .proto_ff.MallMutProto week = 2;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->week(), output);
  }

  // optional .proto_ff.MallMutProto forever = 3;
  if (has_forever()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->forever(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.MallMutProto day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->day(), target);
  }

  // optional .proto_ff.MallMutProto week = 2;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->week(), target);
  }

  // optional .proto_ff.MallMutProto forever = 3;
  if (has_forever()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->forever(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallUpdateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.MallMutProto day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->day());
    }

    // optional .proto_ff.MallMutProto week = 2;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->week());
    }

    // optional .proto_ff.MallMutProto forever = 3;
    if (has_forever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forever());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallUpdateRsp::MergeFrom(const MallUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      mutable_day()->::proto_ff::MallMutProto::MergeFrom(from.day());
    }
    if (from.has_week()) {
      mutable_week()->::proto_ff::MallMutProto::MergeFrom(from.week());
    }
    if (from.has_forever()) {
      mutable_forever()->::proto_ff::MallMutProto::MergeFrom(from.forever());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallUpdateRsp::CopyFrom(const MallUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallUpdateRsp::IsInitialized() const {

  return true;
}

void MallUpdateRsp::Swap(MallUpdateRsp* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(week_, other->week_);
    std::swap(forever_, other->forever_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallUpdateRsp_descriptor_;
  metadata.reflection = MallUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MallHolyBeastExchargeReq::MallHolyBeastExchargeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallHolyBeastExchargeReq::InitAsDefaultInstance() {
}

MallHolyBeastExchargeReq::MallHolyBeastExchargeReq(const MallHolyBeastExchargeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallHolyBeastExchargeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallHolyBeastExchargeReq::~MallHolyBeastExchargeReq() {
  SharedDtor();
}

void MallHolyBeastExchargeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallHolyBeastExchargeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallHolyBeastExchargeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallHolyBeastExchargeReq_descriptor_;
}

const MallHolyBeastExchargeReq& MallHolyBeastExchargeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mall_2eproto();
  return *default_instance_;
}

MallHolyBeastExchargeReq* MallHolyBeastExchargeReq::default_instance_ = NULL;

MallHolyBeastExchargeReq* MallHolyBeastExchargeReq::New() const {
  return new MallHolyBeastExchargeReq;
}

void MallHolyBeastExchargeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallHolyBeastExchargeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MallHolyBeastExchargeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallHolyBeastExchargeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallHolyBeastExchargeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallHolyBeastExchargeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallHolyBeastExchargeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallHolyBeastExchargeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallHolyBeastExchargeReq::MergeFrom(const MallHolyBeastExchargeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallHolyBeastExchargeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallHolyBeastExchargeReq::CopyFrom(const MallHolyBeastExchargeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallHolyBeastExchargeReq::IsInitialized() const {

  return true;
}

void MallHolyBeastExchargeReq::Swap(MallHolyBeastExchargeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallHolyBeastExchargeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallHolyBeastExchargeReq_descriptor_;
  metadata.reflection = MallHolyBeastExchargeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallHolyBeastExchargeRsp::kRetFieldNumber;
#endif  // !_MSC_VER

MallHolyBeastExchargeRsp::MallHolyBeastExchargeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallHolyBeastExchargeRsp::InitAsDefaultInstance() {
}

MallHolyBeastExchargeRsp::MallHolyBeastExchargeRsp(const MallHolyBeastExchargeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallHolyBeastExchargeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallHolyBeastExchargeRsp::~MallHolyBeastExchargeRsp() {
  SharedDtor();
}

void MallHolyBeastExchargeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallHolyBeastExchargeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallHolyBeastExchargeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallHolyBeastExchargeRsp_descriptor_;
}

const MallHolyBeastExchargeRsp& MallHolyBeastExchargeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mall_2eproto();
  return *default_instance_;
}

MallHolyBeastExchargeRsp* MallHolyBeastExchargeRsp::default_instance_ = NULL;

MallHolyBeastExchargeRsp* MallHolyBeastExchargeRsp::New() const {
  return new MallHolyBeastExchargeRsp;
}

void MallHolyBeastExchargeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallHolyBeastExchargeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallHolyBeastExchargeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallHolyBeastExchargeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallHolyBeastExchargeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallHolyBeastExchargeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallHolyBeastExchargeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallHolyBeastExchargeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallHolyBeastExchargeRsp::MergeFrom(const MallHolyBeastExchargeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallHolyBeastExchargeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallHolyBeastExchargeRsp::CopyFrom(const MallHolyBeastExchargeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallHolyBeastExchargeRsp::IsInitialized() const {

  return true;
}

void MallHolyBeastExchargeRsp::Swap(MallHolyBeastExchargeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallHolyBeastExchargeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallHolyBeastExchargeRsp_descriptor_;
  metadata.reflection = MallHolyBeastExchargeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallSendFlowerGiftReq::kGiftIdFieldNumber;
const int MallSendFlowerGiftReq::kGiftNumFieldNumber;
const int MallSendFlowerGiftReq::kRecvCidFieldNumber;
#endif  // !_MSC_VER

MallSendFlowerGiftReq::MallSendFlowerGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallSendFlowerGiftReq::InitAsDefaultInstance() {
}

MallSendFlowerGiftReq::MallSendFlowerGiftReq(const MallSendFlowerGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallSendFlowerGiftReq::SharedCtor() {
  _cached_size_ = 0;
  gift_id_ = 0;
  gift_num_ = 0;
  recv_cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallSendFlowerGiftReq::~MallSendFlowerGiftReq() {
  SharedDtor();
}

void MallSendFlowerGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallSendFlowerGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallSendFlowerGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallSendFlowerGiftReq_descriptor_;
}

const MallSendFlowerGiftReq& MallSendFlowerGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mall_2eproto();
  return *default_instance_;
}

MallSendFlowerGiftReq* MallSendFlowerGiftReq::default_instance_ = NULL;

MallSendFlowerGiftReq* MallSendFlowerGiftReq::New() const {
  return new MallSendFlowerGiftReq;
}

void MallSendFlowerGiftReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gift_id_ = 0;
    gift_num_ = 0;
    recv_cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallSendFlowerGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gift_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_id_)));
          set_has_gift_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gift_num;
        break;
      }

      // optional int32 gift_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_num_)));
          set_has_gift_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recv_cid;
        break;
      }

      // optional uint64 recv_cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recv_cid_)));
          set_has_recv_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallSendFlowerGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gift_id = 1;
  if (has_gift_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gift_id(), output);
  }

  // optional int32 gift_num = 2;
  if (has_gift_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gift_num(), output);
  }

  // optional uint64 recv_cid = 3;
  if (has_recv_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->recv_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallSendFlowerGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gift_id = 1;
  if (has_gift_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gift_id(), target);
  }

  // optional int32 gift_num = 2;
  if (has_gift_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gift_num(), target);
  }

  // optional uint64 recv_cid = 3;
  if (has_recv_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->recv_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallSendFlowerGiftReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gift_id = 1;
    if (has_gift_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_id());
    }

    // optional int32 gift_num = 2;
    if (has_gift_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_num());
    }

    // optional uint64 recv_cid = 3;
    if (has_recv_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recv_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallSendFlowerGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallSendFlowerGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallSendFlowerGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallSendFlowerGiftReq::MergeFrom(const MallSendFlowerGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gift_id()) {
      set_gift_id(from.gift_id());
    }
    if (from.has_gift_num()) {
      set_gift_num(from.gift_num());
    }
    if (from.has_recv_cid()) {
      set_recv_cid(from.recv_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallSendFlowerGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallSendFlowerGiftReq::CopyFrom(const MallSendFlowerGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallSendFlowerGiftReq::IsInitialized() const {

  return true;
}

void MallSendFlowerGiftReq::Swap(MallSendFlowerGiftReq* other) {
  if (other != this) {
    std::swap(gift_id_, other->gift_id_);
    std::swap(gift_num_, other->gift_num_);
    std::swap(recv_cid_, other->recv_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallSendFlowerGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallSendFlowerGiftReq_descriptor_;
  metadata.reflection = MallSendFlowerGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallSendFlowerGiftRsp::kRetFieldNumber;
#endif  // !_MSC_VER

MallSendFlowerGiftRsp::MallSendFlowerGiftRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallSendFlowerGiftRsp::InitAsDefaultInstance() {
}

MallSendFlowerGiftRsp::MallSendFlowerGiftRsp(const MallSendFlowerGiftRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallSendFlowerGiftRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallSendFlowerGiftRsp::~MallSendFlowerGiftRsp() {
  SharedDtor();
}

void MallSendFlowerGiftRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallSendFlowerGiftRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallSendFlowerGiftRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallSendFlowerGiftRsp_descriptor_;
}

const MallSendFlowerGiftRsp& MallSendFlowerGiftRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mall_2eproto();
  return *default_instance_;
}

MallSendFlowerGiftRsp* MallSendFlowerGiftRsp::default_instance_ = NULL;

MallSendFlowerGiftRsp* MallSendFlowerGiftRsp::New() const {
  return new MallSendFlowerGiftRsp;
}

void MallSendFlowerGiftRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallSendFlowerGiftRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallSendFlowerGiftRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallSendFlowerGiftRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallSendFlowerGiftRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallSendFlowerGiftRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallSendFlowerGiftRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallSendFlowerGiftRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallSendFlowerGiftRsp::MergeFrom(const MallSendFlowerGiftRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallSendFlowerGiftRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallSendFlowerGiftRsp::CopyFrom(const MallSendFlowerGiftRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallSendFlowerGiftRsp::IsInitialized() const {

  return true;
}

void MallSendFlowerGiftRsp::Swap(MallSendFlowerGiftRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallSendFlowerGiftRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallSendFlowerGiftRsp_descriptor_;
  metadata.reflection = MallSendFlowerGiftRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallRecvFlowerGiftNotify::kGiftIdFieldNumber;
const int MallRecvFlowerGiftNotify::kGiftNumFieldNumber;
const int MallRecvFlowerGiftNotify::kSendCidFieldNumber;
const int MallRecvFlowerGiftNotify::kSendNameFieldNumber;
#endif  // !_MSC_VER

MallRecvFlowerGiftNotify::MallRecvFlowerGiftNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallRecvFlowerGiftNotify::InitAsDefaultInstance() {
}

MallRecvFlowerGiftNotify::MallRecvFlowerGiftNotify(const MallRecvFlowerGiftNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallRecvFlowerGiftNotify::SharedCtor() {
  _cached_size_ = 0;
  gift_id_ = 0;
  gift_num_ = 0;
  send_cid_ = GOOGLE_ULONGLONG(0);
  send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallRecvFlowerGiftNotify::~MallRecvFlowerGiftNotify() {
  SharedDtor();
}

void MallRecvFlowerGiftNotify::SharedDtor() {
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    delete send_name_;
  }
  if (this != default_instance_) {
  }
}

void MallRecvFlowerGiftNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallRecvFlowerGiftNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallRecvFlowerGiftNotify_descriptor_;
}

const MallRecvFlowerGiftNotify& MallRecvFlowerGiftNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mall_2eproto();
  return *default_instance_;
}

MallRecvFlowerGiftNotify* MallRecvFlowerGiftNotify::default_instance_ = NULL;

MallRecvFlowerGiftNotify* MallRecvFlowerGiftNotify::New() const {
  return new MallRecvFlowerGiftNotify;
}

void MallRecvFlowerGiftNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gift_id_ = 0;
    gift_num_ = 0;
    send_cid_ = GOOGLE_ULONGLONG(0);
    if (has_send_name()) {
      if (send_name_ != &::google::protobuf::internal::kEmptyString) {
        send_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallRecvFlowerGiftNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gift_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_id_)));
          set_has_gift_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gift_num;
        break;
      }

      // optional int32 gift_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_num_)));
          set_has_gift_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_send_cid;
        break;
      }

      // optional uint64 send_cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_cid_)));
          set_has_send_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_send_name;
        break;
      }

      // optional bytes send_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_send_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallRecvFlowerGiftNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gift_id = 1;
  if (has_gift_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gift_id(), output);
  }

  // optional int32 gift_num = 2;
  if (has_gift_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gift_num(), output);
  }

  // optional uint64 send_cid = 3;
  if (has_send_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->send_cid(), output);
  }

  // optional bytes send_name = 4;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->send_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallRecvFlowerGiftNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gift_id = 1;
  if (has_gift_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gift_id(), target);
  }

  // optional int32 gift_num = 2;
  if (has_gift_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gift_num(), target);
  }

  // optional uint64 send_cid = 3;
  if (has_send_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->send_cid(), target);
  }

  // optional bytes send_name = 4;
  if (has_send_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->send_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallRecvFlowerGiftNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gift_id = 1;
    if (has_gift_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_id());
    }

    // optional int32 gift_num = 2;
    if (has_gift_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_num());
    }

    // optional uint64 send_cid = 3;
    if (has_send_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->send_cid());
    }

    // optional bytes send_name = 4;
    if (has_send_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->send_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallRecvFlowerGiftNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallRecvFlowerGiftNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallRecvFlowerGiftNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallRecvFlowerGiftNotify::MergeFrom(const MallRecvFlowerGiftNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gift_id()) {
      set_gift_id(from.gift_id());
    }
    if (from.has_gift_num()) {
      set_gift_num(from.gift_num());
    }
    if (from.has_send_cid()) {
      set_send_cid(from.send_cid());
    }
    if (from.has_send_name()) {
      set_send_name(from.send_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallRecvFlowerGiftNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallRecvFlowerGiftNotify::CopyFrom(const MallRecvFlowerGiftNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallRecvFlowerGiftNotify::IsInitialized() const {

  return true;
}

void MallRecvFlowerGiftNotify::Swap(MallRecvFlowerGiftNotify* other) {
  if (other != this) {
    std::swap(gift_id_, other->gift_id_);
    std::swap(gift_num_, other->gift_num_);
    std::swap(send_cid_, other->send_cid_);
    std::swap(send_name_, other->send_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallRecvFlowerGiftNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallRecvFlowerGiftNotify_descriptor_;
  metadata.reflection = MallRecvFlowerGiftNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCSendFlowerGift::kGiftIdFieldNumber;
const int LCSendFlowerGift::kGiftNumFieldNumber;
const int LCSendFlowerGift::kRecvCidFieldNumber;
const int LCSendFlowerGift::kSendCidFieldNumber;
const int LCSendFlowerGift::kUseItemFieldNumber;
#endif  // !_MSC_VER

LCSendFlowerGift::LCSendFlowerGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCSendFlowerGift::InitAsDefaultInstance() {
}

LCSendFlowerGift::LCSendFlowerGift(const LCSendFlowerGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCSendFlowerGift::SharedCtor() {
  _cached_size_ = 0;
  gift_id_ = 0;
  gift_num_ = 0;
  recv_cid_ = GOOGLE_ULONGLONG(0);
  send_cid_ = GOOGLE_ULONGLONG(0);
  use_item_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCSendFlowerGift::~LCSendFlowerGift() {
  SharedDtor();
}

void LCSendFlowerGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCSendFlowerGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCSendFlowerGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCSendFlowerGift_descriptor_;
}

const LCSendFlowerGift& LCSendFlowerGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mall_2eproto();
  return *default_instance_;
}

LCSendFlowerGift* LCSendFlowerGift::default_instance_ = NULL;

LCSendFlowerGift* LCSendFlowerGift::New() const {
  return new LCSendFlowerGift;
}

void LCSendFlowerGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gift_id_ = 0;
    gift_num_ = 0;
    recv_cid_ = GOOGLE_ULONGLONG(0);
    send_cid_ = GOOGLE_ULONGLONG(0);
    use_item_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCSendFlowerGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gift_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_id_)));
          set_has_gift_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gift_num;
        break;
      }

      // optional int32 gift_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_num_)));
          set_has_gift_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recv_cid;
        break;
      }

      // optional uint64 recv_cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recv_cid_)));
          set_has_recv_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_send_cid;
        break;
      }

      // optional uint64 send_cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_cid_)));
          set_has_send_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_use_item;
        break;
      }

      // optional bool use_item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_item_)));
          set_has_use_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCSendFlowerGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gift_id = 1;
  if (has_gift_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gift_id(), output);
  }

  // optional int32 gift_num = 2;
  if (has_gift_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gift_num(), output);
  }

  // optional uint64 recv_cid = 3;
  if (has_recv_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->recv_cid(), output);
  }

  // optional uint64 send_cid = 4;
  if (has_send_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->send_cid(), output);
  }

  // optional bool use_item = 5;
  if (has_use_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCSendFlowerGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gift_id = 1;
  if (has_gift_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gift_id(), target);
  }

  // optional int32 gift_num = 2;
  if (has_gift_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gift_num(), target);
  }

  // optional uint64 recv_cid = 3;
  if (has_recv_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->recv_cid(), target);
  }

  // optional uint64 send_cid = 4;
  if (has_send_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->send_cid(), target);
  }

  // optional bool use_item = 5;
  if (has_use_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCSendFlowerGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gift_id = 1;
    if (has_gift_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_id());
    }

    // optional int32 gift_num = 2;
    if (has_gift_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_num());
    }

    // optional uint64 recv_cid = 3;
    if (has_recv_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recv_cid());
    }

    // optional uint64 send_cid = 4;
    if (has_send_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->send_cid());
    }

    // optional bool use_item = 5;
    if (has_use_item()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCSendFlowerGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCSendFlowerGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCSendFlowerGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCSendFlowerGift::MergeFrom(const LCSendFlowerGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gift_id()) {
      set_gift_id(from.gift_id());
    }
    if (from.has_gift_num()) {
      set_gift_num(from.gift_num());
    }
    if (from.has_recv_cid()) {
      set_recv_cid(from.recv_cid());
    }
    if (from.has_send_cid()) {
      set_send_cid(from.send_cid());
    }
    if (from.has_use_item()) {
      set_use_item(from.use_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCSendFlowerGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCSendFlowerGift::CopyFrom(const LCSendFlowerGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCSendFlowerGift::IsInitialized() const {

  return true;
}

void LCSendFlowerGift::Swap(LCSendFlowerGift* other) {
  if (other != this) {
    std::swap(gift_id_, other->gift_id_);
    std::swap(gift_num_, other->gift_num_);
    std::swap(recv_cid_, other->recv_cid_);
    std::swap(send_cid_, other->send_cid_);
    std::swap(use_item_, other->use_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCSendFlowerGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCSendFlowerGift_descriptor_;
  metadata.reflection = LCSendFlowerGift_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
