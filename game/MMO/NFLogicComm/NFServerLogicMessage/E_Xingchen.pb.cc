// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Xingchen.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Xingchen.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_XingchenXcsetup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcsetup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXcsetup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXcsetup_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcmosaic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcmosaic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXcmosaic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXcmosaic_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcmaterialQualityDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcmaterialQualityDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcmaterial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcmaterial_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXcmaterial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXcmaterial_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXinchenAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXinchenAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXinchen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXinchen_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXinchen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXinchen_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXclvatt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXclvatt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXclvatt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXclvatt_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXclvexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXclvexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXclvexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXclvexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXctpTpDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXctpTpDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXctp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXctp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXctp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXctp_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXctpexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXctpexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXctpexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXctpexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXctpaddi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXctpaddi_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXctpaddi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXctpaddi_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXctpatt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXctpatt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXctpatt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXctpatt_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcstarAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcstarAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcstar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcstar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXcstar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXcstar_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcawakenAwakenDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcawakenAwakenDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcawaken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcawaken_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXcawaken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXcawaken_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcmagicalHhDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcmagicalHhDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcmagical_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcmagical_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXcmagical_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXcmagical_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcmagatt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcmagatt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXcmagatt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXcmagatt_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcadvattUpattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcadvattUpattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcadvatt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcadvatt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXcadvatt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXcadvatt_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcguizhenXxDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcguizhenXxDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcguizhenGzDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcguizhenGzDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXcguizhen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXcguizhen_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXcguizhen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXcguizhen_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXingjunActDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXingjunActDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXingjun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXingjun_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXingjun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXingjun_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXjattXjDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXjattXjDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXjatt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXjatt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXjatt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXjatt_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXingji_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXingji_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXingji_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXingji_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXjcw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXjcw_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXjcw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXjcw_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenXjlvexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenXjlvexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenXjlvexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenXjlvexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XingchenZbshop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XingchenZbshop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XingchenZbshop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XingchenZbshop_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fXingchen_2eproto() {
  protobuf_AddDesc_E_5fXingchen_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Xingchen.proto");
  GOOGLE_CHECK(file != NULL);
  E_XingchenXcsetup_descriptor_ = file->message_type(0);
  static const int E_XingchenXcsetup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcsetup, m_xsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcsetup, m_unlockdj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcsetup, m_unlockpf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcsetup, m_xstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcsetup, m_xssubtype_),
  };
  E_XingchenXcsetup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcsetup_descriptor_,
      E_XingchenXcsetup::default_instance_,
      E_XingchenXcsetup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcsetup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcsetup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcsetup));
  Sheet_XingchenXcsetup_descriptor_ = file->message_type(1);
  static const int Sheet_XingchenXcsetup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcsetup, e_xingchenxcsetup_list_),
  };
  Sheet_XingchenXcsetup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXcsetup_descriptor_,
      Sheet_XingchenXcsetup::default_instance_,
      Sheet_XingchenXcsetup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcsetup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcsetup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXcsetup));
  E_XingchenXcmosaic_descriptor_ = file->message_type(2);
  static const int E_XingchenXcmosaic_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmosaic, m_positionnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmosaic, m_positionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmosaic, m_posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmosaic, m_posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmosaic, m_next_posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmosaic, m_next_posy_),
  };
  E_XingchenXcmosaic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcmosaic_descriptor_,
      E_XingchenXcmosaic::default_instance_,
      E_XingchenXcmosaic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmosaic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmosaic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcmosaic));
  Sheet_XingchenXcmosaic_descriptor_ = file->message_type(3);
  static const int Sheet_XingchenXcmosaic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcmosaic, e_xingchenxcmosaic_list_),
  };
  Sheet_XingchenXcmosaic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXcmosaic_descriptor_,
      Sheet_XingchenXcmosaic::default_instance_,
      Sheet_XingchenXcmosaic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcmosaic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcmosaic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXcmosaic));
  E_XingchenXcmaterialQualityDesc_descriptor_ = file->message_type(4);
  static const int E_XingchenXcmaterialQualityDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmaterialQualityDesc, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmaterialQualityDesc, m_type_),
  };
  E_XingchenXcmaterialQualityDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcmaterialQualityDesc_descriptor_,
      E_XingchenXcmaterialQualityDesc::default_instance_,
      E_XingchenXcmaterialQualityDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmaterialQualityDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmaterialQualityDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcmaterialQualityDesc));
  E_XingchenXcmaterial_descriptor_ = file->message_type(5);
  static const int E_XingchenXcmaterial_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmaterial, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmaterial, m_materialtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmaterial, m_functiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmaterial, m_xcposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmaterial, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmaterial, m_itemexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmaterial, m_quality_),
  };
  E_XingchenXcmaterial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcmaterial_descriptor_,
      E_XingchenXcmaterial::default_instance_,
      E_XingchenXcmaterial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmaterial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmaterial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcmaterial));
  Sheet_XingchenXcmaterial_descriptor_ = file->message_type(6);
  static const int Sheet_XingchenXcmaterial_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcmaterial, e_xingchenxcmaterial_list_),
  };
  Sheet_XingchenXcmaterial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXcmaterial_descriptor_,
      Sheet_XingchenXcmaterial::default_instance_,
      Sheet_XingchenXcmaterial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcmaterial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcmaterial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXcmaterial));
  E_XingchenXinchenAttributeDesc_descriptor_ = file->message_type(7);
  static const int E_XingchenXinchenAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXinchenAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXinchenAttributeDesc, m_type_),
  };
  E_XingchenXinchenAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXinchenAttributeDesc_descriptor_,
      E_XingchenXinchenAttributeDesc::default_instance_,
      E_XingchenXinchenAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXinchenAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXinchenAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXinchenAttributeDesc));
  E_XingchenXinchen_descriptor_ = file->message_type(8);
  static const int E_XingchenXinchen_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXinchen, m_xcequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXinchen, m_attribute_),
  };
  E_XingchenXinchen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXinchen_descriptor_,
      E_XingchenXinchen::default_instance_,
      E_XingchenXinchen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXinchen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXinchen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXinchen));
  Sheet_XingchenXinchen_descriptor_ = file->message_type(9);
  static const int Sheet_XingchenXinchen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXinchen, e_xingchenxinchen_list_),
  };
  Sheet_XingchenXinchen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXinchen_descriptor_,
      Sheet_XingchenXinchen::default_instance_,
      Sheet_XingchenXinchen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXinchen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXinchen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXinchen));
  E_XingchenXclvatt_descriptor_ = file->message_type(10);
  static const int E_XingchenXclvatt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXclvatt, m_attid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXclvatt, m_att_),
  };
  E_XingchenXclvatt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXclvatt_descriptor_,
      E_XingchenXclvatt::default_instance_,
      E_XingchenXclvatt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXclvatt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXclvatt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXclvatt));
  Sheet_XingchenXclvatt_descriptor_ = file->message_type(11);
  static const int Sheet_XingchenXclvatt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXclvatt, e_xingchenxclvatt_list_),
  };
  Sheet_XingchenXclvatt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXclvatt_descriptor_,
      Sheet_XingchenXclvatt::default_instance_,
      Sheet_XingchenXclvatt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXclvatt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXclvatt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXclvatt));
  E_XingchenXclvexp_descriptor_ = file->message_type(12);
  static const int E_XingchenXclvexp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXclvexp, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXclvexp, m_exp_),
  };
  E_XingchenXclvexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXclvexp_descriptor_,
      E_XingchenXclvexp::default_instance_,
      E_XingchenXclvexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXclvexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXclvexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXclvexp));
  Sheet_XingchenXclvexp_descriptor_ = file->message_type(13);
  static const int Sheet_XingchenXclvexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXclvexp, e_xingchenxclvexp_list_),
  };
  Sheet_XingchenXclvexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXclvexp_descriptor_,
      Sheet_XingchenXclvexp::default_instance_,
      Sheet_XingchenXclvexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXclvexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXclvexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXclvexp));
  E_XingchenXctpTpDesc_descriptor_ = file->message_type(14);
  static const int E_XingchenXctpTpDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpTpDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpTpDesc, m_type_),
  };
  E_XingchenXctpTpDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXctpTpDesc_descriptor_,
      E_XingchenXctpTpDesc::default_instance_,
      E_XingchenXctpTpDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpTpDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpTpDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXctpTpDesc));
  E_XingchenXctp_descriptor_ = file->message_type(15);
  static const int E_XingchenXctp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctp, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctp, m_positionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctp, m_xcquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctp, m_xclvmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctp, m_tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctp, m_attr_),
  };
  E_XingchenXctp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXctp_descriptor_,
      E_XingchenXctp::default_instance_,
      E_XingchenXctp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXctp));
  Sheet_XingchenXctp_descriptor_ = file->message_type(16);
  static const int Sheet_XingchenXctp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXctp, e_xingchenxctp_list_),
  };
  Sheet_XingchenXctp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXctp_descriptor_,
      Sheet_XingchenXctp::default_instance_,
      Sheet_XingchenXctp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXctp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXctp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXctp));
  E_XingchenXctpexp_descriptor_ = file->message_type(17);
  static const int E_XingchenXctpexp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpexp, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpexp, m_lvdisplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpexp, m_exp_),
  };
  E_XingchenXctpexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXctpexp_descriptor_,
      E_XingchenXctpexp::default_instance_,
      E_XingchenXctpexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXctpexp));
  Sheet_XingchenXctpexp_descriptor_ = file->message_type(18);
  static const int Sheet_XingchenXctpexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXctpexp, e_xingchenxctpexp_list_),
  };
  Sheet_XingchenXctpexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXctpexp_descriptor_,
      Sheet_XingchenXctpexp::default_instance_,
      Sheet_XingchenXctpexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXctpexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXctpexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXctpexp));
  E_XingchenXctpaddi_descriptor_ = file->message_type(19);
  static const int E_XingchenXctpaddi_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpaddi, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpaddi, m_attid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpaddi, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpaddi, m_atttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpaddi, m_att_),
  };
  E_XingchenXctpaddi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXctpaddi_descriptor_,
      E_XingchenXctpaddi::default_instance_,
      E_XingchenXctpaddi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpaddi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpaddi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXctpaddi));
  Sheet_XingchenXctpaddi_descriptor_ = file->message_type(20);
  static const int Sheet_XingchenXctpaddi_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXctpaddi, e_xingchenxctpaddi_list_),
  };
  Sheet_XingchenXctpaddi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXctpaddi_descriptor_,
      Sheet_XingchenXctpaddi::default_instance_,
      Sheet_XingchenXctpaddi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXctpaddi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXctpaddi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXctpaddi));
  E_XingchenXctpatt_descriptor_ = file->message_type(21);
  static const int E_XingchenXctpatt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpatt, m_attid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpatt, m_att_),
  };
  E_XingchenXctpatt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXctpatt_descriptor_,
      E_XingchenXctpatt::default_instance_,
      E_XingchenXctpatt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpatt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXctpatt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXctpatt));
  Sheet_XingchenXctpatt_descriptor_ = file->message_type(22);
  static const int Sheet_XingchenXctpatt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXctpatt, e_xingchenxctpatt_list_),
  };
  Sheet_XingchenXctpatt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXctpatt_descriptor_,
      Sheet_XingchenXctpatt::default_instance_,
      Sheet_XingchenXctpatt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXctpatt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXctpatt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXctpatt));
  E_XingchenXcstarAttributeDesc_descriptor_ = file->message_type(23);
  static const int E_XingchenXcstarAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcstarAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcstarAttributeDesc, m_type_),
  };
  E_XingchenXcstarAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcstarAttributeDesc_descriptor_,
      E_XingchenXcstarAttributeDesc::default_instance_,
      E_XingchenXcstarAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcstarAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcstarAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcstarAttributeDesc));
  E_XingchenXcstar_descriptor_ = file->message_type(24);
  static const int E_XingchenXcstar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcstar, m_starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcstar, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcstar, m_attribute_),
  };
  E_XingchenXcstar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcstar_descriptor_,
      E_XingchenXcstar::default_instance_,
      E_XingchenXcstar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcstar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcstar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcstar));
  Sheet_XingchenXcstar_descriptor_ = file->message_type(25);
  static const int Sheet_XingchenXcstar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcstar, e_xingchenxcstar_list_),
  };
  Sheet_XingchenXcstar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXcstar_descriptor_,
      Sheet_XingchenXcstar::default_instance_,
      Sheet_XingchenXcstar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcstar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcstar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXcstar));
  E_XingchenXcawakenAwakenDesc_descriptor_ = file->message_type(26);
  static const int E_XingchenXcawakenAwakenDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcawakenAwakenDesc, m_tpaddratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcawakenAwakenDesc, m_lvaddratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcawakenAwakenDesc, m_num_),
  };
  E_XingchenXcawakenAwakenDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcawakenAwakenDesc_descriptor_,
      E_XingchenXcawakenAwakenDesc::default_instance_,
      E_XingchenXcawakenAwakenDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcawakenAwakenDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcawakenAwakenDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcawakenAwakenDesc));
  E_XingchenXcawaken_descriptor_ = file->message_type(27);
  static const int E_XingchenXcawaken_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcawaken, m_positionnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcawaken, m_positionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcawaken, m_awaken_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcawaken, m_awaken_lvmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcawaken, m_awaken_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcawaken, m_awaken_),
  };
  E_XingchenXcawaken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcawaken_descriptor_,
      E_XingchenXcawaken::default_instance_,
      E_XingchenXcawaken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcawaken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcawaken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcawaken));
  Sheet_XingchenXcawaken_descriptor_ = file->message_type(28);
  static const int Sheet_XingchenXcawaken_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcawaken, e_xingchenxcawaken_list_),
  };
  Sheet_XingchenXcawaken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXcawaken_descriptor_,
      Sheet_XingchenXcawaken::default_instance_,
      Sheet_XingchenXcawaken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcawaken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcawaken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXcawaken));
  E_XingchenXcmagicalHhDesc_descriptor_ = file->message_type(29);
  static const int E_XingchenXcmagicalHhDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagicalHhDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagicalHhDesc, m_type_),
  };
  E_XingchenXcmagicalHhDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcmagicalHhDesc_descriptor_,
      E_XingchenXcmagicalHhDesc::default_instance_,
      E_XingchenXcmagicalHhDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagicalHhDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagicalHhDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcmagicalHhDesc));
  E_XingchenXcmagical_descriptor_ = file->message_type(30);
  static const int E_XingchenXcmagical_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagical, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagical, m_hhquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagical, m_isadvanced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagical, m_hhact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagical, m_hhstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagical, m_advskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagical, m_hh_),
  };
  E_XingchenXcmagical_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcmagical_descriptor_,
      E_XingchenXcmagical::default_instance_,
      E_XingchenXcmagical_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagical, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagical, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcmagical));
  Sheet_XingchenXcmagical_descriptor_ = file->message_type(31);
  static const int Sheet_XingchenXcmagical_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcmagical, e_xingchenxcmagical_list_),
  };
  Sheet_XingchenXcmagical_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXcmagical_descriptor_,
      Sheet_XingchenXcmagical::default_instance_,
      Sheet_XingchenXcmagical_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcmagical, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcmagical, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXcmagical));
  E_XingchenXcmagatt_descriptor_ = file->message_type(32);
  static const int E_XingchenXcmagatt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagatt, m_attid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagatt, m_att_),
  };
  E_XingchenXcmagatt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcmagatt_descriptor_,
      E_XingchenXcmagatt::default_instance_,
      E_XingchenXcmagatt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagatt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcmagatt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcmagatt));
  Sheet_XingchenXcmagatt_descriptor_ = file->message_type(33);
  static const int Sheet_XingchenXcmagatt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcmagatt, e_xingchenxcmagatt_list_),
  };
  Sheet_XingchenXcmagatt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXcmagatt_descriptor_,
      Sheet_XingchenXcmagatt::default_instance_,
      Sheet_XingchenXcmagatt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcmagatt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcmagatt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXcmagatt));
  E_XingchenXcadvattUpattributeDesc_descriptor_ = file->message_type(34);
  static const int E_XingchenXcadvattUpattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcadvattUpattributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcadvattUpattributeDesc, m_type_),
  };
  E_XingchenXcadvattUpattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcadvattUpattributeDesc_descriptor_,
      E_XingchenXcadvattUpattributeDesc::default_instance_,
      E_XingchenXcadvattUpattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcadvattUpattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcadvattUpattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcadvattUpattributeDesc));
  E_XingchenXcadvatt_descriptor_ = file->message_type(35);
  static const int E_XingchenXcadvatt_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcadvatt, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcadvatt, m_upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcadvatt, m_classlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcadvatt, m_starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcadvatt, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcadvatt, m_activeskillidlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcadvatt, m_upattribute_),
  };
  E_XingchenXcadvatt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcadvatt_descriptor_,
      E_XingchenXcadvatt::default_instance_,
      E_XingchenXcadvatt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcadvatt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcadvatt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcadvatt));
  Sheet_XingchenXcadvatt_descriptor_ = file->message_type(36);
  static const int Sheet_XingchenXcadvatt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcadvatt, e_xingchenxcadvatt_list_),
  };
  Sheet_XingchenXcadvatt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXcadvatt_descriptor_,
      Sheet_XingchenXcadvatt::default_instance_,
      Sheet_XingchenXcadvatt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcadvatt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcadvatt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXcadvatt));
  E_XingchenXcguizhenXxDesc_descriptor_ = file->message_type(37);
  static const int E_XingchenXcguizhenXxDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhenXxDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhenXxDesc, m_type_),
  };
  E_XingchenXcguizhenXxDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcguizhenXxDesc_descriptor_,
      E_XingchenXcguizhenXxDesc::default_instance_,
      E_XingchenXcguizhenXxDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhenXxDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhenXxDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcguizhenXxDesc));
  E_XingchenXcguizhenGzDesc_descriptor_ = file->message_type(38);
  static const int E_XingchenXcguizhenGzDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhenGzDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhenGzDesc, m_type_),
  };
  E_XingchenXcguizhenGzDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcguizhenGzDesc_descriptor_,
      E_XingchenXcguizhenGzDesc::default_instance_,
      E_XingchenXcguizhenGzDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhenGzDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhenGzDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcguizhenGzDesc));
  E_XingchenXcguizhen_descriptor_ = file->message_type(39);
  static const int E_XingchenXcguizhen_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhen, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhen, m_xsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhen, m_gzquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhen, m_gznum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhen, m_gzxh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhen, m_xx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhen, m_gz_),
  };
  E_XingchenXcguizhen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXcguizhen_descriptor_,
      E_XingchenXcguizhen::default_instance_,
      E_XingchenXcguizhen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXcguizhen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXcguizhen));
  Sheet_XingchenXcguizhen_descriptor_ = file->message_type(40);
  static const int Sheet_XingchenXcguizhen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcguizhen, e_xingchenxcguizhen_list_),
  };
  Sheet_XingchenXcguizhen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXcguizhen_descriptor_,
      Sheet_XingchenXcguizhen::default_instance_,
      Sheet_XingchenXcguizhen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcguizhen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXcguizhen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXcguizhen));
  E_XingchenXingjunActDesc_descriptor_ = file->message_type(41);
  static const int E_XingchenXingjunActDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingjunActDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingjunActDesc, m_num_),
  };
  E_XingchenXingjunActDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXingjunActDesc_descriptor_,
      E_XingchenXingjunActDesc::default_instance_,
      E_XingchenXingjunActDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingjunActDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingjunActDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXingjunActDesc));
  E_XingchenXingjun_descriptor_ = file->message_type(42);
  static const int E_XingchenXingjun_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingjun, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingjun, m_xstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingjun, m_xjquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingjun, m_act_),
  };
  E_XingchenXingjun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXingjun_descriptor_,
      E_XingchenXingjun::default_instance_,
      E_XingchenXingjun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingjun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingjun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXingjun));
  Sheet_XingchenXingjun_descriptor_ = file->message_type(43);
  static const int Sheet_XingchenXingjun_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXingjun, e_xingchenxingjun_list_),
  };
  Sheet_XingchenXingjun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXingjun_descriptor_,
      Sheet_XingchenXingjun::default_instance_,
      Sheet_XingchenXingjun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXingjun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXingjun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXingjun));
  E_XingchenXjattXjDesc_descriptor_ = file->message_type(44);
  static const int E_XingchenXjattXjDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjattXjDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjattXjDesc, m_type_),
  };
  E_XingchenXjattXjDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXjattXjDesc_descriptor_,
      E_XingchenXjattXjDesc::default_instance_,
      E_XingchenXjattXjDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjattXjDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjattXjDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXjattXjDesc));
  E_XingchenXjatt_descriptor_ = file->message_type(45);
  static const int E_XingchenXjatt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjatt, m_attid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjatt, m_xj_),
  };
  E_XingchenXjatt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXjatt_descriptor_,
      E_XingchenXjatt::default_instance_,
      E_XingchenXjatt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjatt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjatt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXjatt));
  Sheet_XingchenXjatt_descriptor_ = file->message_type(46);
  static const int Sheet_XingchenXjatt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXjatt, e_xingchenxjatt_list_),
  };
  Sheet_XingchenXjatt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXjatt_descriptor_,
      Sheet_XingchenXjatt::default_instance_,
      Sheet_XingchenXjatt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXjatt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXjatt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXjatt));
  E_XingchenXingji_descriptor_ = file->message_type(47);
  static const int E_XingchenXingji_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingji, m_xjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingji, m_xjclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingji, m_xjskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingji, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingji, m_skillmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingji, m_unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingji, m_unlocklv_),
  };
  E_XingchenXingji_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXingji_descriptor_,
      E_XingchenXingji::default_instance_,
      E_XingchenXingji_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingji, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXingji, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXingji));
  Sheet_XingchenXingji_descriptor_ = file->message_type(48);
  static const int Sheet_XingchenXingji_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXingji, e_xingchenxingji_list_),
  };
  Sheet_XingchenXingji_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXingji_descriptor_,
      Sheet_XingchenXingji::default_instance_,
      Sheet_XingchenXingji_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXingji, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXingji, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXingji));
  E_XingchenXjcw_descriptor_ = file->message_type(49);
  static const int E_XingchenXjcw_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjcw, m_xjslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjcw, m_unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjcw, m_num_),
  };
  E_XingchenXjcw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXjcw_descriptor_,
      E_XingchenXjcw::default_instance_,
      E_XingchenXjcw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjcw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjcw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXjcw));
  Sheet_XingchenXjcw_descriptor_ = file->message_type(50);
  static const int Sheet_XingchenXjcw_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXjcw, e_xingchenxjcw_list_),
  };
  Sheet_XingchenXjcw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXjcw_descriptor_,
      Sheet_XingchenXjcw::default_instance_,
      Sheet_XingchenXjcw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXjcw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXjcw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXjcw));
  E_XingchenXjlvexp_descriptor_ = file->message_type(51);
  static const int E_XingchenXjlvexp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjlvexp, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjlvexp, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjlvexp, m_time_),
  };
  E_XingchenXjlvexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenXjlvexp_descriptor_,
      E_XingchenXjlvexp::default_instance_,
      E_XingchenXjlvexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjlvexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenXjlvexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenXjlvexp));
  Sheet_XingchenXjlvexp_descriptor_ = file->message_type(52);
  static const int Sheet_XingchenXjlvexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXjlvexp, e_xingchenxjlvexp_list_),
  };
  Sheet_XingchenXjlvexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenXjlvexp_descriptor_,
      Sheet_XingchenXjlvexp::default_instance_,
      Sheet_XingchenXjlvexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXjlvexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenXjlvexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenXjlvexp));
  E_XingchenZbshop_descriptor_ = file->message_type(53);
  static const int E_XingchenZbshop_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenZbshop, m_shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenZbshop, m_shopitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenZbshop, m_shopquota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenZbshop, m_shopnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenZbshop, m_buyconsume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenZbshop, m_buynum_),
  };
  E_XingchenZbshop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XingchenZbshop_descriptor_,
      E_XingchenZbshop::default_instance_,
      E_XingchenZbshop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenZbshop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XingchenZbshop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XingchenZbshop));
  Sheet_XingchenZbshop_descriptor_ = file->message_type(54);
  static const int Sheet_XingchenZbshop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenZbshop, e_xingchenzbshop_list_),
  };
  Sheet_XingchenZbshop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XingchenZbshop_descriptor_,
      Sheet_XingchenZbshop::default_instance_,
      Sheet_XingchenZbshop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenZbshop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XingchenZbshop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XingchenZbshop));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fXingchen_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcsetup_descriptor_, &E_XingchenXcsetup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXcsetup_descriptor_, &Sheet_XingchenXcsetup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcmosaic_descriptor_, &E_XingchenXcmosaic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXcmosaic_descriptor_, &Sheet_XingchenXcmosaic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcmaterialQualityDesc_descriptor_, &E_XingchenXcmaterialQualityDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcmaterial_descriptor_, &E_XingchenXcmaterial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXcmaterial_descriptor_, &Sheet_XingchenXcmaterial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXinchenAttributeDesc_descriptor_, &E_XingchenXinchenAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXinchen_descriptor_, &E_XingchenXinchen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXinchen_descriptor_, &Sheet_XingchenXinchen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXclvatt_descriptor_, &E_XingchenXclvatt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXclvatt_descriptor_, &Sheet_XingchenXclvatt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXclvexp_descriptor_, &E_XingchenXclvexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXclvexp_descriptor_, &Sheet_XingchenXclvexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXctpTpDesc_descriptor_, &E_XingchenXctpTpDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXctp_descriptor_, &E_XingchenXctp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXctp_descriptor_, &Sheet_XingchenXctp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXctpexp_descriptor_, &E_XingchenXctpexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXctpexp_descriptor_, &Sheet_XingchenXctpexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXctpaddi_descriptor_, &E_XingchenXctpaddi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXctpaddi_descriptor_, &Sheet_XingchenXctpaddi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXctpatt_descriptor_, &E_XingchenXctpatt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXctpatt_descriptor_, &Sheet_XingchenXctpatt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcstarAttributeDesc_descriptor_, &E_XingchenXcstarAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcstar_descriptor_, &E_XingchenXcstar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXcstar_descriptor_, &Sheet_XingchenXcstar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcawakenAwakenDesc_descriptor_, &E_XingchenXcawakenAwakenDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcawaken_descriptor_, &E_XingchenXcawaken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXcawaken_descriptor_, &Sheet_XingchenXcawaken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcmagicalHhDesc_descriptor_, &E_XingchenXcmagicalHhDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcmagical_descriptor_, &E_XingchenXcmagical::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXcmagical_descriptor_, &Sheet_XingchenXcmagical::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcmagatt_descriptor_, &E_XingchenXcmagatt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXcmagatt_descriptor_, &Sheet_XingchenXcmagatt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcadvattUpattributeDesc_descriptor_, &E_XingchenXcadvattUpattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcadvatt_descriptor_, &E_XingchenXcadvatt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXcadvatt_descriptor_, &Sheet_XingchenXcadvatt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcguizhenXxDesc_descriptor_, &E_XingchenXcguizhenXxDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcguizhenGzDesc_descriptor_, &E_XingchenXcguizhenGzDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXcguizhen_descriptor_, &E_XingchenXcguizhen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXcguizhen_descriptor_, &Sheet_XingchenXcguizhen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXingjunActDesc_descriptor_, &E_XingchenXingjunActDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXingjun_descriptor_, &E_XingchenXingjun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXingjun_descriptor_, &Sheet_XingchenXingjun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXjattXjDesc_descriptor_, &E_XingchenXjattXjDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXjatt_descriptor_, &E_XingchenXjatt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXjatt_descriptor_, &Sheet_XingchenXjatt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXingji_descriptor_, &E_XingchenXingji::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXingji_descriptor_, &Sheet_XingchenXingji::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXjcw_descriptor_, &E_XingchenXjcw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXjcw_descriptor_, &Sheet_XingchenXjcw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenXjlvexp_descriptor_, &E_XingchenXjlvexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenXjlvexp_descriptor_, &Sheet_XingchenXjlvexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XingchenZbshop_descriptor_, &E_XingchenZbshop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XingchenZbshop_descriptor_, &Sheet_XingchenZbshop::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fXingchen_2eproto() {
  delete E_XingchenXcsetup::default_instance_;
  delete E_XingchenXcsetup_reflection_;
  delete Sheet_XingchenXcsetup::default_instance_;
  delete Sheet_XingchenXcsetup_reflection_;
  delete E_XingchenXcmosaic::default_instance_;
  delete E_XingchenXcmosaic_reflection_;
  delete Sheet_XingchenXcmosaic::default_instance_;
  delete Sheet_XingchenXcmosaic_reflection_;
  delete E_XingchenXcmaterialQualityDesc::default_instance_;
  delete E_XingchenXcmaterialQualityDesc_reflection_;
  delete E_XingchenXcmaterial::default_instance_;
  delete E_XingchenXcmaterial_reflection_;
  delete Sheet_XingchenXcmaterial::default_instance_;
  delete Sheet_XingchenXcmaterial_reflection_;
  delete E_XingchenXinchenAttributeDesc::default_instance_;
  delete E_XingchenXinchenAttributeDesc_reflection_;
  delete E_XingchenXinchen::default_instance_;
  delete E_XingchenXinchen_reflection_;
  delete Sheet_XingchenXinchen::default_instance_;
  delete Sheet_XingchenXinchen_reflection_;
  delete E_XingchenXclvatt::default_instance_;
  delete E_XingchenXclvatt_reflection_;
  delete Sheet_XingchenXclvatt::default_instance_;
  delete Sheet_XingchenXclvatt_reflection_;
  delete E_XingchenXclvexp::default_instance_;
  delete E_XingchenXclvexp_reflection_;
  delete Sheet_XingchenXclvexp::default_instance_;
  delete Sheet_XingchenXclvexp_reflection_;
  delete E_XingchenXctpTpDesc::default_instance_;
  delete E_XingchenXctpTpDesc_reflection_;
  delete E_XingchenXctp::default_instance_;
  delete E_XingchenXctp_reflection_;
  delete Sheet_XingchenXctp::default_instance_;
  delete Sheet_XingchenXctp_reflection_;
  delete E_XingchenXctpexp::default_instance_;
  delete E_XingchenXctpexp_reflection_;
  delete Sheet_XingchenXctpexp::default_instance_;
  delete Sheet_XingchenXctpexp_reflection_;
  delete E_XingchenXctpaddi::default_instance_;
  delete E_XingchenXctpaddi_reflection_;
  delete Sheet_XingchenXctpaddi::default_instance_;
  delete Sheet_XingchenXctpaddi_reflection_;
  delete E_XingchenXctpatt::default_instance_;
  delete E_XingchenXctpatt_reflection_;
  delete Sheet_XingchenXctpatt::default_instance_;
  delete Sheet_XingchenXctpatt_reflection_;
  delete E_XingchenXcstarAttributeDesc::default_instance_;
  delete E_XingchenXcstarAttributeDesc_reflection_;
  delete E_XingchenXcstar::default_instance_;
  delete E_XingchenXcstar_reflection_;
  delete Sheet_XingchenXcstar::default_instance_;
  delete Sheet_XingchenXcstar_reflection_;
  delete E_XingchenXcawakenAwakenDesc::default_instance_;
  delete E_XingchenXcawakenAwakenDesc_reflection_;
  delete E_XingchenXcawaken::default_instance_;
  delete E_XingchenXcawaken_reflection_;
  delete Sheet_XingchenXcawaken::default_instance_;
  delete Sheet_XingchenXcawaken_reflection_;
  delete E_XingchenXcmagicalHhDesc::default_instance_;
  delete E_XingchenXcmagicalHhDesc_reflection_;
  delete E_XingchenXcmagical::default_instance_;
  delete E_XingchenXcmagical_reflection_;
  delete Sheet_XingchenXcmagical::default_instance_;
  delete Sheet_XingchenXcmagical_reflection_;
  delete E_XingchenXcmagatt::default_instance_;
  delete E_XingchenXcmagatt_reflection_;
  delete Sheet_XingchenXcmagatt::default_instance_;
  delete Sheet_XingchenXcmagatt_reflection_;
  delete E_XingchenXcadvattUpattributeDesc::default_instance_;
  delete E_XingchenXcadvattUpattributeDesc_reflection_;
  delete E_XingchenXcadvatt::default_instance_;
  delete E_XingchenXcadvatt_reflection_;
  delete Sheet_XingchenXcadvatt::default_instance_;
  delete Sheet_XingchenXcadvatt_reflection_;
  delete E_XingchenXcguizhenXxDesc::default_instance_;
  delete E_XingchenXcguizhenXxDesc_reflection_;
  delete E_XingchenXcguizhenGzDesc::default_instance_;
  delete E_XingchenXcguizhenGzDesc_reflection_;
  delete E_XingchenXcguizhen::default_instance_;
  delete E_XingchenXcguizhen_reflection_;
  delete Sheet_XingchenXcguizhen::default_instance_;
  delete Sheet_XingchenXcguizhen_reflection_;
  delete E_XingchenXingjunActDesc::default_instance_;
  delete E_XingchenXingjunActDesc_reflection_;
  delete E_XingchenXingjun::default_instance_;
  delete E_XingchenXingjun_reflection_;
  delete Sheet_XingchenXingjun::default_instance_;
  delete Sheet_XingchenXingjun_reflection_;
  delete E_XingchenXjattXjDesc::default_instance_;
  delete E_XingchenXjattXjDesc_reflection_;
  delete E_XingchenXjatt::default_instance_;
  delete E_XingchenXjatt_reflection_;
  delete Sheet_XingchenXjatt::default_instance_;
  delete Sheet_XingchenXjatt_reflection_;
  delete E_XingchenXingji::default_instance_;
  delete E_XingchenXingji_reflection_;
  delete Sheet_XingchenXingji::default_instance_;
  delete Sheet_XingchenXingji_reflection_;
  delete E_XingchenXjcw::default_instance_;
  delete E_XingchenXjcw_reflection_;
  delete Sheet_XingchenXjcw::default_instance_;
  delete Sheet_XingchenXjcw_reflection_;
  delete E_XingchenXjlvexp::default_instance_;
  delete E_XingchenXjlvexp_reflection_;
  delete Sheet_XingchenXjlvexp::default_instance_;
  delete Sheet_XingchenXjlvexp_reflection_;
  delete E_XingchenZbshop::default_instance_;
  delete E_XingchenZbshop_reflection_;
  delete Sheet_XingchenZbshop::default_instance_;
  delete Sheet_XingchenZbshop_reflection_;
}

void protobuf_AddDesc_E_5fXingchen_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020E_Xingchen.proto\022\010proto_ff\032\025yd_fieldop"
    "tions.proto\"\327\001\n\021E_XingchenXcsetup\022\034\n\006m_X"
    "sId\030\001 \001(\005B\014\302\377\024\010\346\230\237\345\256\277id\022*\n\nm_UnlockDj\030\002 "
    "\001(\005B\026\302\377\024\022\350\247\243\351\224\201\346\235\241\344\273\266\345\244\251\346\225\260\022*\n\nm_UnlockP"
    "f\030\003 \001(\005B\026\302\377\024\022\350\247\243\351\224\201\346\235\241\344\273\266\350\257\204\345\210\206\022\"\n\010m_XST"
    "ype\030\004 \001(\005B\020\302\377\024\014\346\230\237\345\256\277\347\261\273\345\236\213\022(\n\013m_XSSubTy"
    "pe\030\005 \001(\005B\023\302\377\024\017\346\230\237\345\256\277\345\255\220\347\261\273\345\236\213\"Z\n\025Sheet_X"
    "ingchenXcsetup\022A\n\026E_XingchenXcsetup_List"
    "\030\001 \003(\0132\033.proto_ff.E_XingchenXcsetupB\004\210\301\024"
    " \"\367\001\n\022E_XingchenXcmosaic\022\'\n\rm_PositionNu"
    "m\030\001 \001(\005B\020\302\377\024\014\351\203\250\344\275\215\345\272\217\345\217\267\022\"\n\014m_PositionI"
    "D\030\002 \001(\005B\014\302\377\024\010\351\203\250\344\275\215ID\022!\n\006m_posx\030\003 \001(\005B\021\302"
    "\377\024\r\345\275\223\345\211\215\344\275\215\347\275\256X\022!\n\006m_posy\030\004 \001(\005B\021\302\377\024\r\345\275"
    "\223\345\211\215\344\275\215\347\275\256Y\022&\n\013m_next_posx\030\005 \001(\005B\021\302\377\024\r\344\270"
    "\213\344\270\252\344\275\215\347\275\256X\022&\n\013m_next_posy\030\006 \001(\005B\021\302\377\024\r\344\270"
    "\213\344\270\252\344\275\215\347\275\256Y\"]\n\026Sheet_XingchenXcmosaic\022C\n"
    "\027E_XingchenXcmosaic_List\030\001 \003(\0132\034.proto_f"
    "f.E_XingchenXcmosaicB\004\210\301\024\020\"X\n\037E_Xingchen"
    "XcmaterialQualityDesc\022\031\n\005m_exp\030\001 \001(\005B\n\302\377"
    "\024\006\347\273\217\351\252\214\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\"\302\002\n"
    "\024E_XingchenXcmaterial\022\024\n\004m_Id\030\001 \001(\005B\006\302\377\024"
    "\002id\022(\n\016m_MaterialType\030\002 \001(\005B\020\302\377\024\014\346\235\220\346\226\231\347"
    "\261\273\345\236\213\022(\n\016m_FunctionType\030\003 \001(\005B\020\302\377\024\014\345\212\237\350\203"
    "\275\347\261\273\345\236\213\022*\n\014m_XcPosition\030\004 \001(\tB\024\302\377\024\014\346\230\237\350\276"
    "\260\344\275\215\347\275\256\220\301\024@\022\036\n\010m_itemId\030\005 \001(\005B\014\302\377\024\010\351\201\223\345\205"
    "\267id\022&\n\tm_itemExp\030\006 \001(\005B\023\302\377\024\017\351\201\223\345\205\267\347\273\217\351\252\214"
    "\345\200\274\022L\n\tm_quality\030\007 \003(\0132).proto_ff.E_Xing"
    "chenXcmaterialQualityDescB\016\302\377\024\006\345\223\201\350\264\250\210\301\024"
    "\002\"c\n\030Sheet_XingchenXcmaterial\022G\n\031E_Xingc"
    "henXcmaterial_List\030\001 \003(\0132\036.proto_ff.E_Xi"
    "ngchenXcmaterialB\004\210\301\024\010\"V\n\036E_XingchenXinc"
    "henAttributeDesc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345"
    "\200\274\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\"\203\001\n\021E_Xin"
    "gchenXinchen\022\037\n\tm_XcEquip\030\001 \001(\005B\014\302\377\024\010\350\243\205"
    "\345\244\207id\022M\n\013m_attribute\030\002 \003(\0132(.proto_ff.E_"
    "XingchenXinchenAttributeDescB\016\302\377\024\006\345\261\236\346\200\247"
    "\210\301\024\002\"Z\n\025Sheet_XingchenXinchen\022A\n\026E_Xingc"
    "henXinchen_List\030\001 \003(\0132\033.proto_ff.E_Xingc"
    "henXinchenB\004\210\301\024@\"Z\n\021E_XingchenXclvatt\022 \n"
    "\007m_attId\030\001 \001(\003B\017\302\377\024\013\345\261\236\346\200\247\347\273\204id\022#\n\005m_att"
    "\030\002 \003(\005B\024\302\377\024\014\345\261\236\346\200\247\347\255\211\347\272\247\210\301\024d\"Z\n\025Sheet_Xi"
    "ngchenXclvatt\022A\n\026E_XingchenXclvatt_List\030"
    "\001 \003(\0132\033.proto_ff.E_XingchenXclvattB\004\210\301\024@"
    "\"T\n\021E_XingchenXclvexp\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024"
    "\006\347\255\211\347\272\247\022%\n\005m_exp\030\002 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\346\211\200\351\234\200"
    "\347\273\217\351\252\214\"[\n\025Sheet_XingchenXclvexp\022B\n\026E_Xin"
    "gchenXclvexp_List\030\001 \003(\0132\033.proto_ff.E_Xin"
    "gchenXclvexpB\005\210\301\024\200\001\"L\n\024E_XingchenXctpTpD"
    "esc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\032\n\006m_type\030"
    "\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\"\372\001\n\016E_XingchenXctp\022\024\n\004"
    "m_id\030\001 \001(\005B\006\302\377\024\002ID\022\"\n\014m_PositionID\030\002 \001(\005"
    "B\014\302\377\024\010\351\203\250\344\275\215ID\022%\n\013m_XcQuality\030\003 \001(\005B\020\302\377\024"
    "\014\346\230\237\350\276\260\345\223\201\350\264\250\022#\n\tm_XcLvmax\030\004 \001(\005B\020\302\377\024\014\347\252"
    "\201\347\240\264\344\270\212\351\231\220\022<\n\004m_TP\030\005 \003(\0132\036.proto_ff.E_Xi"
    "ngchenXctpTpDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\002\022$\n\006m_at"
    "tr\030\006 \003(\005B\024\302\377\024\014\347\252\201\347\240\264\345\261\236\346\200\247\210\301\024\024\"Q\n\022Sheet_"
    "XingchenXctp\022;\n\023E_XingchenXctp_List\030\001 \003("
    "\0132\030.proto_ff.E_XingchenXctpB\004\210\301\024 \"\205\001\n\021E_"
    "XingchenXctpexp\022\036\n\004m_lv\030\001 \001(\005B\020\302\377\024\014\344\270\213\344\270"
    "\252\347\255\211\347\272\247\022)\n\013m_Lvdisplay\030\002 \001(\tB\024\302\377\024\014\347\255\211\347\272\247"
    "\346\230\276\347\244\272\220\301\024@\022%\n\005m_exp\030\003 \001(\005B\026\302\377\024\022\347\252\201\347\240\264\346\211\200"
    "\351\234\200\347\273\217\351\252\214\"Z\n\025Sheet_XingchenXctpexp\022A\n\026E_"
    "XingchenXctpexp_List\030\001 \003(\0132\033.proto_ff.E_"
    "XingchenXctpexpB\004\210\301\024 \"\273\001\n\022E_XingchenXctp"
    "addi\022\035\n\004m_id\030\001 \001(\003B\017\302\377\024\013\345\261\236\346\200\247\347\273\204id\022\035\n\007m"
    "_attId\030\002 \001(\003B\014\302\377\024\010\345\261\236\346\200\247id\022!\n\007m_count\030\003 "
    "\001(\005B\020\302\377\024\014\350\256\241\347\256\227\346\226\271\345\274\217\022#\n\tm_attType\030\004 \001(\005"
    "B\020\302\377\024\014\345\261\236\346\200\247\347\261\273\345\236\213\022\037\n\005m_att\030\005 \001(\005B\020\302\377\024\014\345"
    "\261\236\346\200\247\347\252\201\347\240\264\"^\n\026Sheet_XingchenXctpaddi\022D\n"
    "\027E_XingchenXctpaddi_List\030\001 \003(\0132\034.proto_f"
    "f.E_XingchenXctpaddiB\005\210\301\024\200\001\"Z\n\021E_Xingche"
    "nXctpatt\022 \n\007m_attID\030\001 \001(\003B\017\302\377\024\013\345\261\236\346\200\247\347\273\204"
    "id\022#\n\005m_att\030\002 \003(\005B\024\302\377\024\014\345\261\236\346\200\247\347\255\211\347\272\247\210\301\024\020\""
    "Z\n\025Sheet_XingchenXctpatt\022A\n\026E_XingchenXc"
    "tpatt_List\030\001 \003(\0132\033.proto_ff.E_XingchenXc"
    "tpattB\004\210\301\024\020\"R\n\035E_XingchenXcstarAttribute"
    "Desc\022\033\n\007m_value\030\001 \001(\005B\n\302\377\024\006\346\225\260\345\200\274\022\024\n\006m_t"
    "ype\030\002 \001(\005B\004\302\377\024\000\"\236\001\n\020E_XingchenXcstar\022\034\n\010"
    "m_StarLv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\030\n\004m_id\030\002 \001(\005"
    "B\n\302\377\024\006\346\230\237\346\225\260\022R\n\013m_attribute\030\003 \003(\0132\'.prot"
    "o_ff.E_XingchenXcstarAttributeDescB\024\302\377\024\014"
    "\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\003\"W\n\024Sheet_XingchenXcstar"
    "\022\?\n\025E_XingchenXcstar_List\030\001 \003(\0132\032.proto_"
    "ff.E_XingchenXcstarB\004\210\301\024\020\"\255\001\n\034E_Xingchen"
    "XcawakenAwakenDesc\0225\n\014m_TPAddratio\030\001 \001(\005"
    "B\037\302\377\024\033\347\252\201\347\240\264\345\261\236\346\200\247\345\212\240\346\210\220\347\231\276\345\210\206\346\257\224\0225\n\014m_l"
    "vAddratio\030\002 \001(\005B\037\302\377\024\033\345\215\207\347\272\247\345\261\236\346\200\247\345\212\240\346\210\220\347"
    "\231\276\345\210\206\346\257\224\022\037\n\005m_num\030\003 \001(\005B\020\302\377\024\014\346\235\220\346\226\231\346\225\260\351\207"
    "\217\"\244\002\n\022E_XingchenXcawaken\022\'\n\rm_PositionNu"
    "m\030\001 \001(\005B\020\302\377\024\014\351\203\250\344\275\215\345\272\217\345\217\267\022\"\n\014m_PositionI"
    "D\030\002 \001(\005B\014\302\377\024\010\351\203\250\344\275\215ID\022$\n\020m_awaken_qualit"
    "y\030\003 \001(\005B\n\302\377\024\006\345\223\201\350\264\250\022(\n\016m_awaken_Lvmax\030\004 "
    "\001(\005B\020\302\377\024\014\350\247\211\351\206\222\344\270\212\351\231\220\022\'\n\rm_awaken_item\030\005"
    " \001(\005B\020\302\377\024\014\350\247\211\351\206\222\346\235\220\346\226\231\022H\n\010m_awaken\030\006 \003(\013"
    "2&.proto_ff.E_XingchenXcawakenAwakenDesc"
    "B\016\302\377\024\006\350\247\211\351\206\222\210\301\024\003\"]\n\026Sheet_XingchenXcawak"
    "en\022C\n\027E_XingchenXcawaken_List\030\001 \003(\0132\034.pr"
    "oto_ff.E_XingchenXcawakenB\004\210\301\024 \"Q\n\031E_Xin"
    "gchenXcmagicalHhDesc\022\030\n\007m_value\030\001 \001(\005B\007\302"
    "\377\024\003\345\200\274\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\"\244\002\n\023E"
    "_XingchenXcmagical\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002ID"
    "\022\037\n\013m_HhQuality\030\002 \001(\005B\n\302\377\024\006\345\223\201\350\264\250\022)\n\014m_i"
    "sAdvanced\030\003 \001(\005B\023\302\377\024\017\346\230\257\345\220\246\345\217\257\350\277\233\351\230\266\022!\n\007"
    "m_HhAct\030\004 \001(\005B\020\302\377\024\014\346\277\200\346\264\273\346\266\210\350\200\227\022\"\n\010m_HhS"
    "tar\030\005 \001(\005B\020\302\377\024\014\345\215\207\346\230\237\346\266\210\350\200\227\022!\n\nm_AdvSkil"
    "l\030\006 \001(\005B\r\302\377\024\t\350\277\233\351\230\266\347\273\204\022A\n\004m_Hh\030\007 \003(\0132#.p"
    "roto_ff.E_XingchenXcmagicalHhDescB\016\302\377\024\006\345"
    "\261\236\346\200\247\210\301\024\006\"`\n\027Sheet_XingchenXcmagical\022E\n\030"
    "E_XingchenXcmagical_List\030\001 \003(\0132\035.proto_f"
    "f.E_XingchenXcmagicalB\004\210\301\024 \"[\n\022E_Xingche"
    "nXcmagatt\022 \n\007m_attID\030\001 \001(\003B\017\302\377\024\013\345\261\236\346\200\247\347\273"
    "\204id\022#\n\005m_att\030\002 \003(\005B\024\302\377\024\014\345\261\236\346\200\247\347\255\211\347\272\247\210\301\024\013"
    "\"]\n\026Sheet_XingchenXcmagatt\022C\n\027E_Xingchen"
    "Xcmagatt_List\030\001 \003(\0132\034.proto_ff.E_Xingche"
    "nXcmagattB\004\210\301\024\020\"U\n!E_XingchenXcadvattUpa"
    "ttributeDesc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026"
    "\n\006m_type\030\002 \001(\005B\006\302\377\024\002ID\"\313\002\n\022E_XingchenXca"
    "dvatt\022\032\n\004m_ID\030\001 \001(\005B\014\302\377\024\010\345\224\257\344\270\200ID\022.\n\017m_u"
    "pAttributeId\030\002 \001(\003B\025\302\377\024\021\350\277\233\351\230\266\345\261\236\346\200\247\347\273\204I"
    "D\022#\n\tm_ClassLv\030\003 \001(\005B\020\302\377\024\014\351\230\266\347\272\247\347\255\211\347\272\247\022\034"
    "\n\010m_starID\030\004 \001(\005B\n\302\377\024\006\346\230\237\347\272\247\022\037\n\tm_skillI"
    "D\030\005 \001(\005B\014\302\377\024\010\346\212\200\350\203\275id\022+\n\021m_activeSkillID"
    "Lv\030\006 \001(\005B\020\302\377\024\014\346\212\200\350\203\275\347\255\211\347\272\247\022X\n\rm_upAttrib"
    "ute\030\007 \003(\0132+.proto_ff.E_XingchenXcadvattU"
    "pattributeDescB\024\302\377\024\014\346\277\200\346\264\273\345\261\236\346\200\247\210\301\024\003\"]\n\026"
    "Sheet_XingchenXcadvatt\022C\n\027E_XingchenXcad"
    "vatt_List\030\001 \003(\0132\034.proto_ff.E_XingchenXca"
    "dvattB\004\210\301\024\004\"Q\n\031E_XingchenXcguizhenXxDesc"
    "\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\032\n\006m_type\030\002 \001"
    "(\005B\n\302\377\024\006\347\261\273\345\236\213\"Q\n\031E_XingchenXcguizhenGzD"
    "esc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\032\n\006m_type\030"
    "\002 \001(\005B\n\302\377\024\006\345\261\236\346\200\247\"\307\002\n\023E_XingchenXcguizhe"
    "n\022\024\n\004m_ID\030\001 \001(\005B\006\302\377\024\002id\022\034\n\006m_XsId\030\002 \001(\005B"
    "\014\302\377\024\010\346\230\237\345\256\277id\022+\n\013m_GzQuality\030\003 \001(\005B\026\302\377\024\022"
    "\346\277\200\346\264\273\346\211\200\351\234\200\345\223\201\350\264\250\022\'\n\007m_GzNum\030\004 \001(\005B\026\302\377\024"
    "\022\346\277\200\346\264\273\346\211\200\351\234\200\346\225\260\351\207\217\022 \n\006m_GzXh\030\005 \001(\005B\020\302\377\024"
    "\014\345\275\222\347\234\237\346\266\210\350\200\227\022A\n\004m_Xx\030\006 \003(\0132#.proto_ff.E"
    "_XingchenXcguizhenXxDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\010"
    "\022A\n\004m_Gz\030\007 \003(\0132#.proto_ff.E_XingchenXcgu"
    "izhenGzDescB\016\302\377\024\006\345\275\222\347\234\237\210\301\024\010\"`\n\027Sheet_Xin"
    "gchenXcguizhen\022E\n\030E_XingchenXcguizhen_Li"
    "st\030\001 \003(\0132\035.proto_ff.E_XingchenXcguizhenB"
    "\004\210\301\024 \"Q\n\030E_XingchenXingjunActDesc\022\024\n\004m_I"
    "D\030\001 \001(\005B\006\302\377\024\002ID\022\037\n\005m_Num\030\002 \001(\005B\020\302\377\024\014\346\211\200\351"
    "\234\200\346\225\260\351\207\217\"\275\001\n\021E_XingchenXingjun\022\024\n\004m_ID\030\001"
    " \001(\005B\006\302\377\024\002id\022\"\n\010m_XSType\030\002 \001(\005B\020\302\377\024\014\346\230\237\345"
    "\256\277\347\261\273\345\236\213\022+\n\013m_XJQuality\030\003 \001(\005B\026\302\377\024\022\346\277\200\346\264"
    "\273\346\211\200\351\234\200\345\223\201\350\264\250\022A\n\005m_Act\030\004 \003(\0132\".proto_ff."
    "E_XingchenXingjunActDescB\016\302\377\024\006\346\277\200\346\264\273\210\301\024\004"
    "\"Z\n\025Sheet_XingchenXingjun\022A\n\026E_XingchenX"
    "ingjun_List\030\001 \003(\0132\033.proto_ff.E_XingchenX"
    "ingjunB\004\210\301\024\010\"M\n\025E_XingchenXjattXjDesc\022\030\n"
    "\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\032\n\006m_type\030\002 \001(\005B"
    "\n\302\377\024\006\347\261\273\345\236\213\"r\n\017E_XingchenXjatt\022 \n\007m_AttI"
    "d\030\001 \001(\003B\017\302\377\024\013\345\261\236\346\200\247\347\273\204id\022=\n\004m_XJ\030\002 \003(\0132\037"
    ".proto_ff.E_XingchenXjattXjDescB\016\302\377\024\006\345\261\236"
    "\346\200\247\210\301\024\005\"T\n\023Sheet_XingchenXjatt\022=\n\024E_Xing"
    "chenXjatt_List\030\001 \003(\0132\031.proto_ff.E_Xingch"
    "enXjattB\004\210\301\024 \"\223\002\n\020E_XingchenXingji\022\026\n\006m_"
    "XJId\030\001 \001(\005B\006\302\377\024\002id\022#\n\tm_XJClass\030\002 \001(\005B\020\302"
    "\377\024\014\346\230\237\346\212\200\345\210\206\347\261\273\022#\n\tm_XJSkill\030\003 \001(\005B\020\302\377\024\014"
    "\346\230\237\346\212\200\346\212\200\350\203\275\022\037\n\tm_SkillId\030\004 \001(\005B\014\302\377\024\010\346\212\200"
    "\350\203\275id\022$\n\nm_SkillMax\030\005 \001(\005B\020\302\377\024\014\346\212\200\350\203\275\347\255\211"
    "\347\272\247\022&\n\010m_Unlock\030\006 \003(\005B\024\302\377\024\014\350\247\243\351\224\201\346\235\241\344\273\266\210"
    "\301\024\003\022.\n\nm_UnlockLV\030\007 \003(\005B\032\302\377\024\022\350\247\243\351\224\201\346\212\200\350\203"
    "\275\347\255\211\347\272\247\210\301\024\003\"W\n\024Sheet_XingchenXingji\022\?\n\025E"
    "_XingchenXingji_List\030\001 \003(\0132\032.proto_ff.E_"
    "XingchenXingjiB\004\210\301\024@\"y\n\016E_XingchenXjcw\022\""
    "\n\010m_XjSlot\030\001 \001(\005B\020\302\377\024\014\346\230\237\346\212\200\346\247\275\344\275\215\022\"\n\010m_"
    "Unlock\030\002 \001(\005B\020\302\377\024\014\350\247\243\351\224\201\350\264\247\345\270\201\022\037\n\005m_Num\030"
    "\003 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\346\225\260\351\207\217\"Q\n\022Sheet_Xingche"
    "nXjcw\022;\n\023E_XingchenXjcw_List\030\001 \003(\0132\030.pro"
    "to_ff.E_XingchenXjcwB\004\210\301\024\004\"p\n\021E_Xingchen"
    "Xjlvexp\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022%\n\005m_e"
    "xp\030\002 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\346\211\200\351\234\200\350\264\247\345\270\201\022\032\n\006m_ti"
    "me\030\003 \001(\005B\n\302\377\024\006\346\227\266\351\227\264\"Z\n\025Sheet_XingchenXj"
    "lvexp\022A\n\026E_XingchenXjlvexp_List\030\001 \003(\0132\033."
    "proto_ff.E_XingchenXjlvexpB\004\210\301\024 \"\343\001\n\020E_X"
    "ingchenZbshop\022\030\n\010m_ShopId\030\001 \001(\005B\006\302\377\024\002id\022"
    " \n\nm_ShopItem\030\002 \001(\005B\014\302\377\024\010\347\211\251\345\223\201ID\022\037\n\013m_S"
    "hopQuota\030\003 \001(\005B\n\302\377\024\006\351\231\220\350\264\255\022&\n\tm_ShopNum\030"
    "\004 \001(\005B\023\302\377\024\017\345\217\257\350\264\255\344\271\260\346\254\241\346\225\260\022&\n\014m_BuyConsu"
    "me\030\005 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\351\201\223\345\205\267\022\"\n\010m_BuyNum\030\006"
    " \001(\005B\020\302\377\024\014\346\266\210\350\200\227\346\225\260\351\207\217\"W\n\024Sheet_Xingchen"
    "Zbshop\022\?\n\025E_XingchenZbshop_List\030\001 \003(\0132\032."
    "proto_ff.E_XingchenZbshopB\004\210\301\024\020", 7431);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Xingchen.proto", &protobuf_RegisterTypes);
  E_XingchenXcsetup::default_instance_ = new E_XingchenXcsetup();
  Sheet_XingchenXcsetup::default_instance_ = new Sheet_XingchenXcsetup();
  E_XingchenXcmosaic::default_instance_ = new E_XingchenXcmosaic();
  Sheet_XingchenXcmosaic::default_instance_ = new Sheet_XingchenXcmosaic();
  E_XingchenXcmaterialQualityDesc::default_instance_ = new E_XingchenXcmaterialQualityDesc();
  E_XingchenXcmaterial::default_instance_ = new E_XingchenXcmaterial();
  Sheet_XingchenXcmaterial::default_instance_ = new Sheet_XingchenXcmaterial();
  E_XingchenXinchenAttributeDesc::default_instance_ = new E_XingchenXinchenAttributeDesc();
  E_XingchenXinchen::default_instance_ = new E_XingchenXinchen();
  Sheet_XingchenXinchen::default_instance_ = new Sheet_XingchenXinchen();
  E_XingchenXclvatt::default_instance_ = new E_XingchenXclvatt();
  Sheet_XingchenXclvatt::default_instance_ = new Sheet_XingchenXclvatt();
  E_XingchenXclvexp::default_instance_ = new E_XingchenXclvexp();
  Sheet_XingchenXclvexp::default_instance_ = new Sheet_XingchenXclvexp();
  E_XingchenXctpTpDesc::default_instance_ = new E_XingchenXctpTpDesc();
  E_XingchenXctp::default_instance_ = new E_XingchenXctp();
  Sheet_XingchenXctp::default_instance_ = new Sheet_XingchenXctp();
  E_XingchenXctpexp::default_instance_ = new E_XingchenXctpexp();
  Sheet_XingchenXctpexp::default_instance_ = new Sheet_XingchenXctpexp();
  E_XingchenXctpaddi::default_instance_ = new E_XingchenXctpaddi();
  Sheet_XingchenXctpaddi::default_instance_ = new Sheet_XingchenXctpaddi();
  E_XingchenXctpatt::default_instance_ = new E_XingchenXctpatt();
  Sheet_XingchenXctpatt::default_instance_ = new Sheet_XingchenXctpatt();
  E_XingchenXcstarAttributeDesc::default_instance_ = new E_XingchenXcstarAttributeDesc();
  E_XingchenXcstar::default_instance_ = new E_XingchenXcstar();
  Sheet_XingchenXcstar::default_instance_ = new Sheet_XingchenXcstar();
  E_XingchenXcawakenAwakenDesc::default_instance_ = new E_XingchenXcawakenAwakenDesc();
  E_XingchenXcawaken::default_instance_ = new E_XingchenXcawaken();
  Sheet_XingchenXcawaken::default_instance_ = new Sheet_XingchenXcawaken();
  E_XingchenXcmagicalHhDesc::default_instance_ = new E_XingchenXcmagicalHhDesc();
  E_XingchenXcmagical::default_instance_ = new E_XingchenXcmagical();
  Sheet_XingchenXcmagical::default_instance_ = new Sheet_XingchenXcmagical();
  E_XingchenXcmagatt::default_instance_ = new E_XingchenXcmagatt();
  Sheet_XingchenXcmagatt::default_instance_ = new Sheet_XingchenXcmagatt();
  E_XingchenXcadvattUpattributeDesc::default_instance_ = new E_XingchenXcadvattUpattributeDesc();
  E_XingchenXcadvatt::default_instance_ = new E_XingchenXcadvatt();
  Sheet_XingchenXcadvatt::default_instance_ = new Sheet_XingchenXcadvatt();
  E_XingchenXcguizhenXxDesc::default_instance_ = new E_XingchenXcguizhenXxDesc();
  E_XingchenXcguizhenGzDesc::default_instance_ = new E_XingchenXcguizhenGzDesc();
  E_XingchenXcguizhen::default_instance_ = new E_XingchenXcguizhen();
  Sheet_XingchenXcguizhen::default_instance_ = new Sheet_XingchenXcguizhen();
  E_XingchenXingjunActDesc::default_instance_ = new E_XingchenXingjunActDesc();
  E_XingchenXingjun::default_instance_ = new E_XingchenXingjun();
  Sheet_XingchenXingjun::default_instance_ = new Sheet_XingchenXingjun();
  E_XingchenXjattXjDesc::default_instance_ = new E_XingchenXjattXjDesc();
  E_XingchenXjatt::default_instance_ = new E_XingchenXjatt();
  Sheet_XingchenXjatt::default_instance_ = new Sheet_XingchenXjatt();
  E_XingchenXingji::default_instance_ = new E_XingchenXingji();
  Sheet_XingchenXingji::default_instance_ = new Sheet_XingchenXingji();
  E_XingchenXjcw::default_instance_ = new E_XingchenXjcw();
  Sheet_XingchenXjcw::default_instance_ = new Sheet_XingchenXjcw();
  E_XingchenXjlvexp::default_instance_ = new E_XingchenXjlvexp();
  Sheet_XingchenXjlvexp::default_instance_ = new Sheet_XingchenXjlvexp();
  E_XingchenZbshop::default_instance_ = new E_XingchenZbshop();
  Sheet_XingchenZbshop::default_instance_ = new Sheet_XingchenZbshop();
  E_XingchenXcsetup::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXcsetup::default_instance_->InitAsDefaultInstance();
  E_XingchenXcmosaic::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXcmosaic::default_instance_->InitAsDefaultInstance();
  E_XingchenXcmaterialQualityDesc::default_instance_->InitAsDefaultInstance();
  E_XingchenXcmaterial::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXcmaterial::default_instance_->InitAsDefaultInstance();
  E_XingchenXinchenAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_XingchenXinchen::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXinchen::default_instance_->InitAsDefaultInstance();
  E_XingchenXclvatt::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXclvatt::default_instance_->InitAsDefaultInstance();
  E_XingchenXclvexp::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXclvexp::default_instance_->InitAsDefaultInstance();
  E_XingchenXctpTpDesc::default_instance_->InitAsDefaultInstance();
  E_XingchenXctp::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXctp::default_instance_->InitAsDefaultInstance();
  E_XingchenXctpexp::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXctpexp::default_instance_->InitAsDefaultInstance();
  E_XingchenXctpaddi::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXctpaddi::default_instance_->InitAsDefaultInstance();
  E_XingchenXctpatt::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXctpatt::default_instance_->InitAsDefaultInstance();
  E_XingchenXcstarAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_XingchenXcstar::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXcstar::default_instance_->InitAsDefaultInstance();
  E_XingchenXcawakenAwakenDesc::default_instance_->InitAsDefaultInstance();
  E_XingchenXcawaken::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXcawaken::default_instance_->InitAsDefaultInstance();
  E_XingchenXcmagicalHhDesc::default_instance_->InitAsDefaultInstance();
  E_XingchenXcmagical::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXcmagical::default_instance_->InitAsDefaultInstance();
  E_XingchenXcmagatt::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXcmagatt::default_instance_->InitAsDefaultInstance();
  E_XingchenXcadvattUpattributeDesc::default_instance_->InitAsDefaultInstance();
  E_XingchenXcadvatt::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXcadvatt::default_instance_->InitAsDefaultInstance();
  E_XingchenXcguizhenXxDesc::default_instance_->InitAsDefaultInstance();
  E_XingchenXcguizhenGzDesc::default_instance_->InitAsDefaultInstance();
  E_XingchenXcguizhen::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXcguizhen::default_instance_->InitAsDefaultInstance();
  E_XingchenXingjunActDesc::default_instance_->InitAsDefaultInstance();
  E_XingchenXingjun::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXingjun::default_instance_->InitAsDefaultInstance();
  E_XingchenXjattXjDesc::default_instance_->InitAsDefaultInstance();
  E_XingchenXjatt::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXjatt::default_instance_->InitAsDefaultInstance();
  E_XingchenXingji::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXingji::default_instance_->InitAsDefaultInstance();
  E_XingchenXjcw::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXjcw::default_instance_->InitAsDefaultInstance();
  E_XingchenXjlvexp::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenXjlvexp::default_instance_->InitAsDefaultInstance();
  E_XingchenZbshop::default_instance_->InitAsDefaultInstance();
  Sheet_XingchenZbshop::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fXingchen_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fXingchen_2eproto {
  StaticDescriptorInitializer_E_5fXingchen_2eproto() {
    protobuf_AddDesc_E_5fXingchen_2eproto();
  }
} static_descriptor_initializer_E_5fXingchen_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcsetup::kMXsIdFieldNumber;
const int E_XingchenXcsetup::kMUnlockDjFieldNumber;
const int E_XingchenXcsetup::kMUnlockPfFieldNumber;
const int E_XingchenXcsetup::kMXSTypeFieldNumber;
const int E_XingchenXcsetup::kMXSSubTypeFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcsetup::E_XingchenXcsetup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcsetup::InitAsDefaultInstance() {
}

E_XingchenXcsetup::E_XingchenXcsetup(const E_XingchenXcsetup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcsetup::SharedCtor() {
  _cached_size_ = 0;
  m_xsid_ = 0;
  m_unlockdj_ = 0;
  m_unlockpf_ = 0;
  m_xstype_ = 0;
  m_xssubtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcsetup::~E_XingchenXcsetup() {
  SharedDtor();
}

void E_XingchenXcsetup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcsetup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcsetup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcsetup_descriptor_;
}

const E_XingchenXcsetup& E_XingchenXcsetup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcsetup* E_XingchenXcsetup::default_instance_ = NULL;

E_XingchenXcsetup* E_XingchenXcsetup::New() const {
  return new E_XingchenXcsetup;
}

void E_XingchenXcsetup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_xsid_ = 0;
    m_unlockdj_ = 0;
    m_unlockpf_ = 0;
    m_xstype_ = 0;
    m_xssubtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcsetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_XsId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xsid_)));
          set_has_m_xsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_UnlockDj;
        break;
      }

      // optional int32 m_UnlockDj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_UnlockDj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_unlockdj_)));
          set_has_m_unlockdj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_UnlockPf;
        break;
      }

      // optional int32 m_UnlockPf = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_UnlockPf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_unlockpf_)));
          set_has_m_unlockpf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_XSType;
        break;
      }

      // optional int32 m_XSType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_XSType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xstype_)));
          set_has_m_xstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_XSSubType;
        break;
      }

      // optional int32 m_XSSubType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_XSSubType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xssubtype_)));
          set_has_m_xssubtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcsetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_XsId = 1;
  if (has_m_xsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_xsid(), output);
  }

  // optional int32 m_UnlockDj = 2;
  if (has_m_unlockdj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_unlockdj(), output);
  }

  // optional int32 m_UnlockPf = 3;
  if (has_m_unlockpf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_unlockpf(), output);
  }

  // optional int32 m_XSType = 4;
  if (has_m_xstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_xstype(), output);
  }

  // optional int32 m_XSSubType = 5;
  if (has_m_xssubtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_xssubtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcsetup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_XsId = 1;
  if (has_m_xsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_xsid(), target);
  }

  // optional int32 m_UnlockDj = 2;
  if (has_m_unlockdj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_unlockdj(), target);
  }

  // optional int32 m_UnlockPf = 3;
  if (has_m_unlockpf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_unlockpf(), target);
  }

  // optional int32 m_XSType = 4;
  if (has_m_xstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_xstype(), target);
  }

  // optional int32 m_XSSubType = 5;
  if (has_m_xssubtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_xssubtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcsetup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_XsId = 1;
    if (has_m_xsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xsid());
    }

    // optional int32 m_UnlockDj = 2;
    if (has_m_unlockdj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_unlockdj());
    }

    // optional int32 m_UnlockPf = 3;
    if (has_m_unlockpf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_unlockpf());
    }

    // optional int32 m_XSType = 4;
    if (has_m_xstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xstype());
    }

    // optional int32 m_XSSubType = 5;
    if (has_m_xssubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xssubtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcsetup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcsetup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcsetup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcsetup::MergeFrom(const E_XingchenXcsetup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_xsid()) {
      set_m_xsid(from.m_xsid());
    }
    if (from.has_m_unlockdj()) {
      set_m_unlockdj(from.m_unlockdj());
    }
    if (from.has_m_unlockpf()) {
      set_m_unlockpf(from.m_unlockpf());
    }
    if (from.has_m_xstype()) {
      set_m_xstype(from.m_xstype());
    }
    if (from.has_m_xssubtype()) {
      set_m_xssubtype(from.m_xssubtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcsetup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcsetup::CopyFrom(const E_XingchenXcsetup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcsetup::IsInitialized() const {

  return true;
}

void E_XingchenXcsetup::Swap(E_XingchenXcsetup* other) {
  if (other != this) {
    std::swap(m_xsid_, other->m_xsid_);
    std::swap(m_unlockdj_, other->m_unlockdj_);
    std::swap(m_unlockpf_, other->m_unlockpf_);
    std::swap(m_xstype_, other->m_xstype_);
    std::swap(m_xssubtype_, other->m_xssubtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcsetup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcsetup_descriptor_;
  metadata.reflection = E_XingchenXcsetup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXcsetup::kEXingchenXcsetupListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXcsetup::Sheet_XingchenXcsetup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXcsetup::InitAsDefaultInstance() {
}

Sheet_XingchenXcsetup::Sheet_XingchenXcsetup(const Sheet_XingchenXcsetup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXcsetup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXcsetup::~Sheet_XingchenXcsetup() {
  SharedDtor();
}

void Sheet_XingchenXcsetup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXcsetup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXcsetup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXcsetup_descriptor_;
}

const Sheet_XingchenXcsetup& Sheet_XingchenXcsetup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXcsetup* Sheet_XingchenXcsetup::default_instance_ = NULL;

Sheet_XingchenXcsetup* Sheet_XingchenXcsetup::New() const {
  return new Sheet_XingchenXcsetup;
}

void Sheet_XingchenXcsetup::Clear() {
  e_xingchenxcsetup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXcsetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXcsetup E_XingchenXcsetup_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXcsetup_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxcsetup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXcsetup_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXcsetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXcsetup E_XingchenXcsetup_List = 1;
  for (int i = 0; i < this->e_xingchenxcsetup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxcsetup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXcsetup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXcsetup E_XingchenXcsetup_List = 1;
  for (int i = 0; i < this->e_xingchenxcsetup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxcsetup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXcsetup::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXcsetup E_XingchenXcsetup_List = 1;
  total_size += 1 * this->e_xingchenxcsetup_list_size();
  for (int i = 0; i < this->e_xingchenxcsetup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxcsetup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXcsetup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXcsetup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXcsetup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXcsetup::MergeFrom(const Sheet_XingchenXcsetup& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxcsetup_list_.MergeFrom(from.e_xingchenxcsetup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXcsetup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXcsetup::CopyFrom(const Sheet_XingchenXcsetup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXcsetup::IsInitialized() const {

  return true;
}

void Sheet_XingchenXcsetup::Swap(Sheet_XingchenXcsetup* other) {
  if (other != this) {
    e_xingchenxcsetup_list_.Swap(&other->e_xingchenxcsetup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXcsetup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXcsetup_descriptor_;
  metadata.reflection = Sheet_XingchenXcsetup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcmosaic::kMPositionNumFieldNumber;
const int E_XingchenXcmosaic::kMPositionIDFieldNumber;
const int E_XingchenXcmosaic::kMPosxFieldNumber;
const int E_XingchenXcmosaic::kMPosyFieldNumber;
const int E_XingchenXcmosaic::kMNextPosxFieldNumber;
const int E_XingchenXcmosaic::kMNextPosyFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcmosaic::E_XingchenXcmosaic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcmosaic::InitAsDefaultInstance() {
}

E_XingchenXcmosaic::E_XingchenXcmosaic(const E_XingchenXcmosaic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcmosaic::SharedCtor() {
  _cached_size_ = 0;
  m_positionnum_ = 0;
  m_positionid_ = 0;
  m_posx_ = 0;
  m_posy_ = 0;
  m_next_posx_ = 0;
  m_next_posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcmosaic::~E_XingchenXcmosaic() {
  SharedDtor();
}

void E_XingchenXcmosaic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcmosaic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcmosaic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcmosaic_descriptor_;
}

const E_XingchenXcmosaic& E_XingchenXcmosaic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcmosaic* E_XingchenXcmosaic::default_instance_ = NULL;

E_XingchenXcmosaic* E_XingchenXcmosaic::New() const {
  return new E_XingchenXcmosaic;
}

void E_XingchenXcmosaic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_positionnum_ = 0;
    m_positionid_ = 0;
    m_posx_ = 0;
    m_posy_ = 0;
    m_next_posx_ = 0;
    m_next_posy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcmosaic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_PositionNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_positionnum_)));
          set_has_m_positionnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_PositionID;
        break;
      }

      // optional int32 m_PositionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PositionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_positionid_)));
          set_has_m_positionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_posx;
        break;
      }

      // optional int32 m_posx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_posx_)));
          set_has_m_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_posy;
        break;
      }

      // optional int32 m_posy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_posy_)));
          set_has_m_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_next_posx;
        break;
      }

      // optional int32 m_next_posx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_next_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_next_posx_)));
          set_has_m_next_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_next_posy;
        break;
      }

      // optional int32 m_next_posy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_next_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_next_posy_)));
          set_has_m_next_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcmosaic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_PositionNum = 1;
  if (has_m_positionnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_positionnum(), output);
  }

  // optional int32 m_PositionID = 2;
  if (has_m_positionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_positionid(), output);
  }

  // optional int32 m_posx = 3;
  if (has_m_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_posx(), output);
  }

  // optional int32 m_posy = 4;
  if (has_m_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_posy(), output);
  }

  // optional int32 m_next_posx = 5;
  if (has_m_next_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_next_posx(), output);
  }

  // optional int32 m_next_posy = 6;
  if (has_m_next_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_next_posy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcmosaic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_PositionNum = 1;
  if (has_m_positionnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_positionnum(), target);
  }

  // optional int32 m_PositionID = 2;
  if (has_m_positionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_positionid(), target);
  }

  // optional int32 m_posx = 3;
  if (has_m_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_posx(), target);
  }

  // optional int32 m_posy = 4;
  if (has_m_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_posy(), target);
  }

  // optional int32 m_next_posx = 5;
  if (has_m_next_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_next_posx(), target);
  }

  // optional int32 m_next_posy = 6;
  if (has_m_next_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_next_posy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcmosaic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_PositionNum = 1;
    if (has_m_positionnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_positionnum());
    }

    // optional int32 m_PositionID = 2;
    if (has_m_positionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_positionid());
    }

    // optional int32 m_posx = 3;
    if (has_m_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_posx());
    }

    // optional int32 m_posy = 4;
    if (has_m_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_posy());
    }

    // optional int32 m_next_posx = 5;
    if (has_m_next_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_next_posx());
    }

    // optional int32 m_next_posy = 6;
    if (has_m_next_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_next_posy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcmosaic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcmosaic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcmosaic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcmosaic::MergeFrom(const E_XingchenXcmosaic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_positionnum()) {
      set_m_positionnum(from.m_positionnum());
    }
    if (from.has_m_positionid()) {
      set_m_positionid(from.m_positionid());
    }
    if (from.has_m_posx()) {
      set_m_posx(from.m_posx());
    }
    if (from.has_m_posy()) {
      set_m_posy(from.m_posy());
    }
    if (from.has_m_next_posx()) {
      set_m_next_posx(from.m_next_posx());
    }
    if (from.has_m_next_posy()) {
      set_m_next_posy(from.m_next_posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcmosaic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcmosaic::CopyFrom(const E_XingchenXcmosaic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcmosaic::IsInitialized() const {

  return true;
}

void E_XingchenXcmosaic::Swap(E_XingchenXcmosaic* other) {
  if (other != this) {
    std::swap(m_positionnum_, other->m_positionnum_);
    std::swap(m_positionid_, other->m_positionid_);
    std::swap(m_posx_, other->m_posx_);
    std::swap(m_posy_, other->m_posy_);
    std::swap(m_next_posx_, other->m_next_posx_);
    std::swap(m_next_posy_, other->m_next_posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcmosaic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcmosaic_descriptor_;
  metadata.reflection = E_XingchenXcmosaic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXcmosaic::kEXingchenXcmosaicListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXcmosaic::Sheet_XingchenXcmosaic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXcmosaic::InitAsDefaultInstance() {
}

Sheet_XingchenXcmosaic::Sheet_XingchenXcmosaic(const Sheet_XingchenXcmosaic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXcmosaic::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXcmosaic::~Sheet_XingchenXcmosaic() {
  SharedDtor();
}

void Sheet_XingchenXcmosaic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXcmosaic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXcmosaic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXcmosaic_descriptor_;
}

const Sheet_XingchenXcmosaic& Sheet_XingchenXcmosaic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXcmosaic* Sheet_XingchenXcmosaic::default_instance_ = NULL;

Sheet_XingchenXcmosaic* Sheet_XingchenXcmosaic::New() const {
  return new Sheet_XingchenXcmosaic;
}

void Sheet_XingchenXcmosaic::Clear() {
  e_xingchenxcmosaic_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXcmosaic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXcmosaic E_XingchenXcmosaic_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXcmosaic_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxcmosaic_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXcmosaic_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXcmosaic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXcmosaic E_XingchenXcmosaic_List = 1;
  for (int i = 0; i < this->e_xingchenxcmosaic_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxcmosaic_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXcmosaic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXcmosaic E_XingchenXcmosaic_List = 1;
  for (int i = 0; i < this->e_xingchenxcmosaic_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxcmosaic_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXcmosaic::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXcmosaic E_XingchenXcmosaic_List = 1;
  total_size += 1 * this->e_xingchenxcmosaic_list_size();
  for (int i = 0; i < this->e_xingchenxcmosaic_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxcmosaic_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXcmosaic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXcmosaic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXcmosaic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXcmosaic::MergeFrom(const Sheet_XingchenXcmosaic& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxcmosaic_list_.MergeFrom(from.e_xingchenxcmosaic_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXcmosaic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXcmosaic::CopyFrom(const Sheet_XingchenXcmosaic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXcmosaic::IsInitialized() const {

  return true;
}

void Sheet_XingchenXcmosaic::Swap(Sheet_XingchenXcmosaic* other) {
  if (other != this) {
    e_xingchenxcmosaic_list_.Swap(&other->e_xingchenxcmosaic_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXcmosaic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXcmosaic_descriptor_;
  metadata.reflection = Sheet_XingchenXcmosaic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcmaterialQualityDesc::kMExpFieldNumber;
const int E_XingchenXcmaterialQualityDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcmaterialQualityDesc::E_XingchenXcmaterialQualityDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcmaterialQualityDesc::InitAsDefaultInstance() {
}

E_XingchenXcmaterialQualityDesc::E_XingchenXcmaterialQualityDesc(const E_XingchenXcmaterialQualityDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcmaterialQualityDesc::SharedCtor() {
  _cached_size_ = 0;
  m_exp_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcmaterialQualityDesc::~E_XingchenXcmaterialQualityDesc() {
  SharedDtor();
}

void E_XingchenXcmaterialQualityDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcmaterialQualityDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcmaterialQualityDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcmaterialQualityDesc_descriptor_;
}

const E_XingchenXcmaterialQualityDesc& E_XingchenXcmaterialQualityDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcmaterialQualityDesc* E_XingchenXcmaterialQualityDesc::default_instance_ = NULL;

E_XingchenXcmaterialQualityDesc* E_XingchenXcmaterialQualityDesc::New() const {
  return new E_XingchenXcmaterialQualityDesc;
}

void E_XingchenXcmaterialQualityDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_exp_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcmaterialQualityDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcmaterialQualityDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_exp = 1;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_exp(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcmaterialQualityDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_exp = 1;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_exp(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcmaterialQualityDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_exp = 1;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcmaterialQualityDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcmaterialQualityDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcmaterialQualityDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcmaterialQualityDesc::MergeFrom(const E_XingchenXcmaterialQualityDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcmaterialQualityDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcmaterialQualityDesc::CopyFrom(const E_XingchenXcmaterialQualityDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcmaterialQualityDesc::IsInitialized() const {

  return true;
}

void E_XingchenXcmaterialQualityDesc::Swap(E_XingchenXcmaterialQualityDesc* other) {
  if (other != this) {
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcmaterialQualityDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcmaterialQualityDesc_descriptor_;
  metadata.reflection = E_XingchenXcmaterialQualityDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcmaterial::kMIdFieldNumber;
const int E_XingchenXcmaterial::kMMaterialTypeFieldNumber;
const int E_XingchenXcmaterial::kMFunctionTypeFieldNumber;
const int E_XingchenXcmaterial::kMXcPositionFieldNumber;
const int E_XingchenXcmaterial::kMItemIdFieldNumber;
const int E_XingchenXcmaterial::kMItemExpFieldNumber;
const int E_XingchenXcmaterial::kMQualityFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcmaterial::E_XingchenXcmaterial()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcmaterial::InitAsDefaultInstance() {
}

E_XingchenXcmaterial::E_XingchenXcmaterial(const E_XingchenXcmaterial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcmaterial::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_materialtype_ = 0;
  m_functiontype_ = 0;
  m_xcposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_itemid_ = 0;
  m_itemexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcmaterial::~E_XingchenXcmaterial() {
  SharedDtor();
}

void E_XingchenXcmaterial::SharedDtor() {
  if (m_xcposition_ != &::google::protobuf::internal::kEmptyString) {
    delete m_xcposition_;
  }
  if (this != default_instance_) {
  }
}

void E_XingchenXcmaterial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcmaterial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcmaterial_descriptor_;
}

const E_XingchenXcmaterial& E_XingchenXcmaterial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcmaterial* E_XingchenXcmaterial::default_instance_ = NULL;

E_XingchenXcmaterial* E_XingchenXcmaterial::New() const {
  return new E_XingchenXcmaterial;
}

void E_XingchenXcmaterial::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_materialtype_ = 0;
    m_functiontype_ = 0;
    if (has_m_xcposition()) {
      if (m_xcposition_ != &::google::protobuf::internal::kEmptyString) {
        m_xcposition_->clear();
      }
    }
    m_itemid_ = 0;
    m_itemexp_ = 0;
  }
  m_quality_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcmaterial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_MaterialType;
        break;
      }

      // optional int32 m_MaterialType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_MaterialType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_materialtype_)));
          set_has_m_materialtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_FunctionType;
        break;
      }

      // optional int32 m_FunctionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FunctionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_functiontype_)));
          set_has_m_functiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_XcPosition;
        break;
      }

      // optional string m_XcPosition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_XcPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_xcposition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_xcposition().data(), this->m_xcposition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_itemId;
        break;
      }

      // optional int32 m_itemId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_itemExp;
        break;
      }

      // optional int32 m_itemExp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemexp_)));
          set_has_m_itemexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_quality;
        break;
      }

      // repeated .proto_ff.E_XingchenXcmaterialQualityDesc m_quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_quality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_quality()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_quality;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcmaterial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_Id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_MaterialType = 2;
  if (has_m_materialtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_materialtype(), output);
  }

  // optional int32 m_FunctionType = 3;
  if (has_m_functiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_functiontype(), output);
  }

  // optional string m_XcPosition = 4;
  if (has_m_xcposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_xcposition().data(), this->m_xcposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_xcposition(), output);
  }

  // optional int32 m_itemId = 5;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_itemid(), output);
  }

  // optional int32 m_itemExp = 6;
  if (has_m_itemexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_itemexp(), output);
  }

  // repeated .proto_ff.E_XingchenXcmaterialQualityDesc m_quality = 7;
  for (int i = 0; i < this->m_quality_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_quality(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcmaterial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_Id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_MaterialType = 2;
  if (has_m_materialtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_materialtype(), target);
  }

  // optional int32 m_FunctionType = 3;
  if (has_m_functiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_functiontype(), target);
  }

  // optional string m_XcPosition = 4;
  if (has_m_xcposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_xcposition().data(), this->m_xcposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_xcposition(), target);
  }

  // optional int32 m_itemId = 5;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_itemid(), target);
  }

  // optional int32 m_itemExp = 6;
  if (has_m_itemexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_itemexp(), target);
  }

  // repeated .proto_ff.E_XingchenXcmaterialQualityDesc m_quality = 7;
  for (int i = 0; i < this->m_quality_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_quality(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcmaterial::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_Id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_MaterialType = 2;
    if (has_m_materialtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_materialtype());
    }

    // optional int32 m_FunctionType = 3;
    if (has_m_functiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_functiontype());
    }

    // optional string m_XcPosition = 4;
    if (has_m_xcposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_xcposition());
    }

    // optional int32 m_itemId = 5;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_itemExp = 6;
    if (has_m_itemexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemexp());
    }

  }
  // repeated .proto_ff.E_XingchenXcmaterialQualityDesc m_quality = 7;
  total_size += 1 * this->m_quality_size();
  for (int i = 0; i < this->m_quality_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_quality(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcmaterial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcmaterial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcmaterial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcmaterial::MergeFrom(const E_XingchenXcmaterial& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_quality_.MergeFrom(from.m_quality_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_materialtype()) {
      set_m_materialtype(from.m_materialtype());
    }
    if (from.has_m_functiontype()) {
      set_m_functiontype(from.m_functiontype());
    }
    if (from.has_m_xcposition()) {
      set_m_xcposition(from.m_xcposition());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_itemexp()) {
      set_m_itemexp(from.m_itemexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcmaterial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcmaterial::CopyFrom(const E_XingchenXcmaterial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcmaterial::IsInitialized() const {

  return true;
}

void E_XingchenXcmaterial::Swap(E_XingchenXcmaterial* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_materialtype_, other->m_materialtype_);
    std::swap(m_functiontype_, other->m_functiontype_);
    std::swap(m_xcposition_, other->m_xcposition_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_itemexp_, other->m_itemexp_);
    m_quality_.Swap(&other->m_quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcmaterial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcmaterial_descriptor_;
  metadata.reflection = E_XingchenXcmaterial_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXcmaterial::kEXingchenXcmaterialListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXcmaterial::Sheet_XingchenXcmaterial()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXcmaterial::InitAsDefaultInstance() {
}

Sheet_XingchenXcmaterial::Sheet_XingchenXcmaterial(const Sheet_XingchenXcmaterial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXcmaterial::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXcmaterial::~Sheet_XingchenXcmaterial() {
  SharedDtor();
}

void Sheet_XingchenXcmaterial::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXcmaterial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXcmaterial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXcmaterial_descriptor_;
}

const Sheet_XingchenXcmaterial& Sheet_XingchenXcmaterial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXcmaterial* Sheet_XingchenXcmaterial::default_instance_ = NULL;

Sheet_XingchenXcmaterial* Sheet_XingchenXcmaterial::New() const {
  return new Sheet_XingchenXcmaterial;
}

void Sheet_XingchenXcmaterial::Clear() {
  e_xingchenxcmaterial_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXcmaterial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXcmaterial E_XingchenXcmaterial_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXcmaterial_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxcmaterial_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXcmaterial_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXcmaterial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXcmaterial E_XingchenXcmaterial_List = 1;
  for (int i = 0; i < this->e_xingchenxcmaterial_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxcmaterial_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXcmaterial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXcmaterial E_XingchenXcmaterial_List = 1;
  for (int i = 0; i < this->e_xingchenxcmaterial_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxcmaterial_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXcmaterial::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXcmaterial E_XingchenXcmaterial_List = 1;
  total_size += 1 * this->e_xingchenxcmaterial_list_size();
  for (int i = 0; i < this->e_xingchenxcmaterial_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxcmaterial_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXcmaterial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXcmaterial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXcmaterial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXcmaterial::MergeFrom(const Sheet_XingchenXcmaterial& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxcmaterial_list_.MergeFrom(from.e_xingchenxcmaterial_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXcmaterial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXcmaterial::CopyFrom(const Sheet_XingchenXcmaterial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXcmaterial::IsInitialized() const {

  return true;
}

void Sheet_XingchenXcmaterial::Swap(Sheet_XingchenXcmaterial* other) {
  if (other != this) {
    e_xingchenxcmaterial_list_.Swap(&other->e_xingchenxcmaterial_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXcmaterial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXcmaterial_descriptor_;
  metadata.reflection = Sheet_XingchenXcmaterial_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXinchenAttributeDesc::kMValueFieldNumber;
const int E_XingchenXinchenAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_XingchenXinchenAttributeDesc::E_XingchenXinchenAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXinchenAttributeDesc::InitAsDefaultInstance() {
}

E_XingchenXinchenAttributeDesc::E_XingchenXinchenAttributeDesc(const E_XingchenXinchenAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXinchenAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXinchenAttributeDesc::~E_XingchenXinchenAttributeDesc() {
  SharedDtor();
}

void E_XingchenXinchenAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXinchenAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXinchenAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXinchenAttributeDesc_descriptor_;
}

const E_XingchenXinchenAttributeDesc& E_XingchenXinchenAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXinchenAttributeDesc* E_XingchenXinchenAttributeDesc::default_instance_ = NULL;

E_XingchenXinchenAttributeDesc* E_XingchenXinchenAttributeDesc::New() const {
  return new E_XingchenXinchenAttributeDesc;
}

void E_XingchenXinchenAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXinchenAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXinchenAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXinchenAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXinchenAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXinchenAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXinchenAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXinchenAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXinchenAttributeDesc::MergeFrom(const E_XingchenXinchenAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXinchenAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXinchenAttributeDesc::CopyFrom(const E_XingchenXinchenAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXinchenAttributeDesc::IsInitialized() const {

  return true;
}

void E_XingchenXinchenAttributeDesc::Swap(E_XingchenXinchenAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXinchenAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXinchenAttributeDesc_descriptor_;
  metadata.reflection = E_XingchenXinchenAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXinchen::kMXcEquipFieldNumber;
const int E_XingchenXinchen::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_XingchenXinchen::E_XingchenXinchen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXinchen::InitAsDefaultInstance() {
}

E_XingchenXinchen::E_XingchenXinchen(const E_XingchenXinchen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXinchen::SharedCtor() {
  _cached_size_ = 0;
  m_xcequip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXinchen::~E_XingchenXinchen() {
  SharedDtor();
}

void E_XingchenXinchen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXinchen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXinchen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXinchen_descriptor_;
}

const E_XingchenXinchen& E_XingchenXinchen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXinchen* E_XingchenXinchen::default_instance_ = NULL;

E_XingchenXinchen* E_XingchenXinchen::New() const {
  return new E_XingchenXinchen;
}

void E_XingchenXinchen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_xcequip_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXinchen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_XcEquip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xcequip_)));
          set_has_m_xcequip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_XingchenXinchenAttributeDesc m_attribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXinchen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_XcEquip = 1;
  if (has_m_xcequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_xcequip(), output);
  }

  // repeated .proto_ff.E_XingchenXinchenAttributeDesc m_attribute = 2;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXinchen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_XcEquip = 1;
  if (has_m_xcequip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_xcequip(), target);
  }

  // repeated .proto_ff.E_XingchenXinchenAttributeDesc m_attribute = 2;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXinchen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_XcEquip = 1;
    if (has_m_xcequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xcequip());
    }

  }
  // repeated .proto_ff.E_XingchenXinchenAttributeDesc m_attribute = 2;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXinchen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXinchen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXinchen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXinchen::MergeFrom(const E_XingchenXinchen& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_xcequip()) {
      set_m_xcequip(from.m_xcequip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXinchen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXinchen::CopyFrom(const E_XingchenXinchen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXinchen::IsInitialized() const {

  return true;
}

void E_XingchenXinchen::Swap(E_XingchenXinchen* other) {
  if (other != this) {
    std::swap(m_xcequip_, other->m_xcequip_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXinchen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXinchen_descriptor_;
  metadata.reflection = E_XingchenXinchen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXinchen::kEXingchenXinchenListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXinchen::Sheet_XingchenXinchen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXinchen::InitAsDefaultInstance() {
}

Sheet_XingchenXinchen::Sheet_XingchenXinchen(const Sheet_XingchenXinchen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXinchen::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXinchen::~Sheet_XingchenXinchen() {
  SharedDtor();
}

void Sheet_XingchenXinchen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXinchen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXinchen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXinchen_descriptor_;
}

const Sheet_XingchenXinchen& Sheet_XingchenXinchen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXinchen* Sheet_XingchenXinchen::default_instance_ = NULL;

Sheet_XingchenXinchen* Sheet_XingchenXinchen::New() const {
  return new Sheet_XingchenXinchen;
}

void Sheet_XingchenXinchen::Clear() {
  e_xingchenxinchen_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXinchen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXinchen E_XingchenXinchen_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXinchen_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxinchen_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXinchen_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXinchen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXinchen E_XingchenXinchen_List = 1;
  for (int i = 0; i < this->e_xingchenxinchen_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxinchen_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXinchen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXinchen E_XingchenXinchen_List = 1;
  for (int i = 0; i < this->e_xingchenxinchen_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxinchen_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXinchen::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXinchen E_XingchenXinchen_List = 1;
  total_size += 1 * this->e_xingchenxinchen_list_size();
  for (int i = 0; i < this->e_xingchenxinchen_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxinchen_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXinchen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXinchen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXinchen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXinchen::MergeFrom(const Sheet_XingchenXinchen& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxinchen_list_.MergeFrom(from.e_xingchenxinchen_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXinchen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXinchen::CopyFrom(const Sheet_XingchenXinchen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXinchen::IsInitialized() const {

  return true;
}

void Sheet_XingchenXinchen::Swap(Sheet_XingchenXinchen* other) {
  if (other != this) {
    e_xingchenxinchen_list_.Swap(&other->e_xingchenxinchen_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXinchen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXinchen_descriptor_;
  metadata.reflection = Sheet_XingchenXinchen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXclvatt::kMAttIdFieldNumber;
const int E_XingchenXclvatt::kMAttFieldNumber;
#endif  // !_MSC_VER

E_XingchenXclvatt::E_XingchenXclvatt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXclvatt::InitAsDefaultInstance() {
}

E_XingchenXclvatt::E_XingchenXclvatt(const E_XingchenXclvatt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXclvatt::SharedCtor() {
  _cached_size_ = 0;
  m_attid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXclvatt::~E_XingchenXclvatt() {
  SharedDtor();
}

void E_XingchenXclvatt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXclvatt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXclvatt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXclvatt_descriptor_;
}

const E_XingchenXclvatt& E_XingchenXclvatt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXclvatt* E_XingchenXclvatt::default_instance_ = NULL;

E_XingchenXclvatt* E_XingchenXclvatt::New() const {
  return new E_XingchenXclvatt;
}

void E_XingchenXclvatt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_attid_ = GOOGLE_LONGLONG(0);
  }
  m_att_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXclvatt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_attId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_attid_)));
          set_has_m_attid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_att;
        break;
      }

      // repeated int32 m_att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_att())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_att())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_att;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXclvatt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_attId = 1;
  if (has_m_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_attid(), output);
  }

  // repeated int32 m_att = 2;
  for (int i = 0; i < this->m_att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_att(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXclvatt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_attId = 1;
  if (has_m_attid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_attid(), target);
  }

  // repeated int32 m_att = 2;
  for (int i = 0; i < this->m_att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_att(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXclvatt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_attId = 1;
    if (has_m_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_attid());
    }

  }
  // repeated int32 m_att = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_att_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_att(i));
    }
    total_size += 1 * this->m_att_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXclvatt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXclvatt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXclvatt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXclvatt::MergeFrom(const E_XingchenXclvatt& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_att_.MergeFrom(from.m_att_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_attid()) {
      set_m_attid(from.m_attid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXclvatt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXclvatt::CopyFrom(const E_XingchenXclvatt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXclvatt::IsInitialized() const {

  return true;
}

void E_XingchenXclvatt::Swap(E_XingchenXclvatt* other) {
  if (other != this) {
    std::swap(m_attid_, other->m_attid_);
    m_att_.Swap(&other->m_att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXclvatt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXclvatt_descriptor_;
  metadata.reflection = E_XingchenXclvatt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXclvatt::kEXingchenXclvattListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXclvatt::Sheet_XingchenXclvatt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXclvatt::InitAsDefaultInstance() {
}

Sheet_XingchenXclvatt::Sheet_XingchenXclvatt(const Sheet_XingchenXclvatt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXclvatt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXclvatt::~Sheet_XingchenXclvatt() {
  SharedDtor();
}

void Sheet_XingchenXclvatt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXclvatt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXclvatt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXclvatt_descriptor_;
}

const Sheet_XingchenXclvatt& Sheet_XingchenXclvatt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXclvatt* Sheet_XingchenXclvatt::default_instance_ = NULL;

Sheet_XingchenXclvatt* Sheet_XingchenXclvatt::New() const {
  return new Sheet_XingchenXclvatt;
}

void Sheet_XingchenXclvatt::Clear() {
  e_xingchenxclvatt_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXclvatt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXclvatt E_XingchenXclvatt_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXclvatt_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxclvatt_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXclvatt_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXclvatt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXclvatt E_XingchenXclvatt_List = 1;
  for (int i = 0; i < this->e_xingchenxclvatt_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxclvatt_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXclvatt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXclvatt E_XingchenXclvatt_List = 1;
  for (int i = 0; i < this->e_xingchenxclvatt_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxclvatt_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXclvatt::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXclvatt E_XingchenXclvatt_List = 1;
  total_size += 1 * this->e_xingchenxclvatt_list_size();
  for (int i = 0; i < this->e_xingchenxclvatt_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxclvatt_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXclvatt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXclvatt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXclvatt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXclvatt::MergeFrom(const Sheet_XingchenXclvatt& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxclvatt_list_.MergeFrom(from.e_xingchenxclvatt_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXclvatt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXclvatt::CopyFrom(const Sheet_XingchenXclvatt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXclvatt::IsInitialized() const {

  return true;
}

void Sheet_XingchenXclvatt::Swap(Sheet_XingchenXclvatt* other) {
  if (other != this) {
    e_xingchenxclvatt_list_.Swap(&other->e_xingchenxclvatt_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXclvatt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXclvatt_descriptor_;
  metadata.reflection = Sheet_XingchenXclvatt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXclvexp::kMLvFieldNumber;
const int E_XingchenXclvexp::kMExpFieldNumber;
#endif  // !_MSC_VER

E_XingchenXclvexp::E_XingchenXclvexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXclvexp::InitAsDefaultInstance() {
}

E_XingchenXclvexp::E_XingchenXclvexp(const E_XingchenXclvexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXclvexp::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXclvexp::~E_XingchenXclvexp() {
  SharedDtor();
}

void E_XingchenXclvexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXclvexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXclvexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXclvexp_descriptor_;
}

const E_XingchenXclvexp& E_XingchenXclvexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXclvexp* E_XingchenXclvexp::default_instance_ = NULL;

E_XingchenXclvexp* E_XingchenXclvexp::New() const {
  return new E_XingchenXclvexp;
}

void E_XingchenXclvexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXclvexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXclvexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXclvexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXclvexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXclvexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXclvexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXclvexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXclvexp::MergeFrom(const E_XingchenXclvexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXclvexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXclvexp::CopyFrom(const E_XingchenXclvexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXclvexp::IsInitialized() const {

  return true;
}

void E_XingchenXclvexp::Swap(E_XingchenXclvexp* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXclvexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXclvexp_descriptor_;
  metadata.reflection = E_XingchenXclvexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXclvexp::kEXingchenXclvexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXclvexp::Sheet_XingchenXclvexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXclvexp::InitAsDefaultInstance() {
}

Sheet_XingchenXclvexp::Sheet_XingchenXclvexp(const Sheet_XingchenXclvexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXclvexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXclvexp::~Sheet_XingchenXclvexp() {
  SharedDtor();
}

void Sheet_XingchenXclvexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXclvexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXclvexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXclvexp_descriptor_;
}

const Sheet_XingchenXclvexp& Sheet_XingchenXclvexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXclvexp* Sheet_XingchenXclvexp::default_instance_ = NULL;

Sheet_XingchenXclvexp* Sheet_XingchenXclvexp::New() const {
  return new Sheet_XingchenXclvexp;
}

void Sheet_XingchenXclvexp::Clear() {
  e_xingchenxclvexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXclvexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXclvexp E_XingchenXclvexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXclvexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxclvexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXclvexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXclvexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXclvexp E_XingchenXclvexp_List = 1;
  for (int i = 0; i < this->e_xingchenxclvexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxclvexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXclvexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXclvexp E_XingchenXclvexp_List = 1;
  for (int i = 0; i < this->e_xingchenxclvexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxclvexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXclvexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXclvexp E_XingchenXclvexp_List = 1;
  total_size += 1 * this->e_xingchenxclvexp_list_size();
  for (int i = 0; i < this->e_xingchenxclvexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxclvexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXclvexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXclvexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXclvexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXclvexp::MergeFrom(const Sheet_XingchenXclvexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxclvexp_list_.MergeFrom(from.e_xingchenxclvexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXclvexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXclvexp::CopyFrom(const Sheet_XingchenXclvexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXclvexp::IsInitialized() const {

  return true;
}

void Sheet_XingchenXclvexp::Swap(Sheet_XingchenXclvexp* other) {
  if (other != this) {
    e_xingchenxclvexp_list_.Swap(&other->e_xingchenxclvexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXclvexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXclvexp_descriptor_;
  metadata.reflection = Sheet_XingchenXclvexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXctpTpDesc::kMValueFieldNumber;
const int E_XingchenXctpTpDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_XingchenXctpTpDesc::E_XingchenXctpTpDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXctpTpDesc::InitAsDefaultInstance() {
}

E_XingchenXctpTpDesc::E_XingchenXctpTpDesc(const E_XingchenXctpTpDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXctpTpDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXctpTpDesc::~E_XingchenXctpTpDesc() {
  SharedDtor();
}

void E_XingchenXctpTpDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXctpTpDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXctpTpDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXctpTpDesc_descriptor_;
}

const E_XingchenXctpTpDesc& E_XingchenXctpTpDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXctpTpDesc* E_XingchenXctpTpDesc::default_instance_ = NULL;

E_XingchenXctpTpDesc* E_XingchenXctpTpDesc::New() const {
  return new E_XingchenXctpTpDesc;
}

void E_XingchenXctpTpDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXctpTpDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXctpTpDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXctpTpDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXctpTpDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXctpTpDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXctpTpDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXctpTpDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXctpTpDesc::MergeFrom(const E_XingchenXctpTpDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXctpTpDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXctpTpDesc::CopyFrom(const E_XingchenXctpTpDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXctpTpDesc::IsInitialized() const {

  return true;
}

void E_XingchenXctpTpDesc::Swap(E_XingchenXctpTpDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXctpTpDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXctpTpDesc_descriptor_;
  metadata.reflection = E_XingchenXctpTpDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXctp::kMIdFieldNumber;
const int E_XingchenXctp::kMPositionIDFieldNumber;
const int E_XingchenXctp::kMXcQualityFieldNumber;
const int E_XingchenXctp::kMXcLvmaxFieldNumber;
const int E_XingchenXctp::kMTPFieldNumber;
const int E_XingchenXctp::kMAttrFieldNumber;
#endif  // !_MSC_VER

E_XingchenXctp::E_XingchenXctp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXctp::InitAsDefaultInstance() {
}

E_XingchenXctp::E_XingchenXctp(const E_XingchenXctp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXctp::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_positionid_ = 0;
  m_xcquality_ = 0;
  m_xclvmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXctp::~E_XingchenXctp() {
  SharedDtor();
}

void E_XingchenXctp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXctp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXctp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXctp_descriptor_;
}

const E_XingchenXctp& E_XingchenXctp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXctp* E_XingchenXctp::default_instance_ = NULL;

E_XingchenXctp* E_XingchenXctp::New() const {
  return new E_XingchenXctp;
}

void E_XingchenXctp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_positionid_ = 0;
    m_xcquality_ = 0;
    m_xclvmax_ = 0;
  }
  m_tp_.Clear();
  m_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXctp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_PositionID;
        break;
      }

      // optional int32 m_PositionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PositionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_positionid_)));
          set_has_m_positionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_XcQuality;
        break;
      }

      // optional int32 m_XcQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_XcQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xcquality_)));
          set_has_m_xcquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_XcLvmax;
        break;
      }

      // optional int32 m_XcLvmax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_XcLvmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xclvmax_)));
          set_has_m_xclvmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_TP;
        break;
      }

      // repeated .proto_ff.E_XingchenXctpTpDesc m_TP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_TP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_TP;
        if (input->ExpectTag(48)) goto parse_m_attr;
        break;
      }

      // repeated int32 m_attr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_m_attr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_attr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXctp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_PositionID = 2;
  if (has_m_positionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_positionid(), output);
  }

  // optional int32 m_XcQuality = 3;
  if (has_m_xcquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_xcquality(), output);
  }

  // optional int32 m_XcLvmax = 4;
  if (has_m_xclvmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_xclvmax(), output);
  }

  // repeated .proto_ff.E_XingchenXctpTpDesc m_TP = 5;
  for (int i = 0; i < this->m_tp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_tp(i), output);
  }

  // repeated int32 m_attr = 6;
  for (int i = 0; i < this->m_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->m_attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXctp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_PositionID = 2;
  if (has_m_positionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_positionid(), target);
  }

  // optional int32 m_XcQuality = 3;
  if (has_m_xcquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_xcquality(), target);
  }

  // optional int32 m_XcLvmax = 4;
  if (has_m_xclvmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_xclvmax(), target);
  }

  // repeated .proto_ff.E_XingchenXctpTpDesc m_TP = 5;
  for (int i = 0; i < this->m_tp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_tp(i), target);
  }

  // repeated int32 m_attr = 6;
  for (int i = 0; i < this->m_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->m_attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXctp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_PositionID = 2;
    if (has_m_positionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_positionid());
    }

    // optional int32 m_XcQuality = 3;
    if (has_m_xcquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xcquality());
    }

    // optional int32 m_XcLvmax = 4;
    if (has_m_xclvmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xclvmax());
    }

  }
  // repeated .proto_ff.E_XingchenXctpTpDesc m_TP = 5;
  total_size += 1 * this->m_tp_size();
  for (int i = 0; i < this->m_tp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tp(i));
  }

  // repeated int32 m_attr = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_attr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_attr(i));
    }
    total_size += 1 * this->m_attr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXctp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXctp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXctp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXctp::MergeFrom(const E_XingchenXctp& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tp_.MergeFrom(from.m_tp_);
  m_attr_.MergeFrom(from.m_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_positionid()) {
      set_m_positionid(from.m_positionid());
    }
    if (from.has_m_xcquality()) {
      set_m_xcquality(from.m_xcquality());
    }
    if (from.has_m_xclvmax()) {
      set_m_xclvmax(from.m_xclvmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXctp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXctp::CopyFrom(const E_XingchenXctp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXctp::IsInitialized() const {

  return true;
}

void E_XingchenXctp::Swap(E_XingchenXctp* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_positionid_, other->m_positionid_);
    std::swap(m_xcquality_, other->m_xcquality_);
    std::swap(m_xclvmax_, other->m_xclvmax_);
    m_tp_.Swap(&other->m_tp_);
    m_attr_.Swap(&other->m_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXctp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXctp_descriptor_;
  metadata.reflection = E_XingchenXctp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXctp::kEXingchenXctpListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXctp::Sheet_XingchenXctp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXctp::InitAsDefaultInstance() {
}

Sheet_XingchenXctp::Sheet_XingchenXctp(const Sheet_XingchenXctp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXctp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXctp::~Sheet_XingchenXctp() {
  SharedDtor();
}

void Sheet_XingchenXctp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXctp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXctp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXctp_descriptor_;
}

const Sheet_XingchenXctp& Sheet_XingchenXctp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXctp* Sheet_XingchenXctp::default_instance_ = NULL;

Sheet_XingchenXctp* Sheet_XingchenXctp::New() const {
  return new Sheet_XingchenXctp;
}

void Sheet_XingchenXctp::Clear() {
  e_xingchenxctp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXctp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXctp E_XingchenXctp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXctp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxctp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXctp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXctp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXctp E_XingchenXctp_List = 1;
  for (int i = 0; i < this->e_xingchenxctp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxctp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXctp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXctp E_XingchenXctp_List = 1;
  for (int i = 0; i < this->e_xingchenxctp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxctp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXctp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXctp E_XingchenXctp_List = 1;
  total_size += 1 * this->e_xingchenxctp_list_size();
  for (int i = 0; i < this->e_xingchenxctp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxctp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXctp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXctp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXctp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXctp::MergeFrom(const Sheet_XingchenXctp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxctp_list_.MergeFrom(from.e_xingchenxctp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXctp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXctp::CopyFrom(const Sheet_XingchenXctp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXctp::IsInitialized() const {

  return true;
}

void Sheet_XingchenXctp::Swap(Sheet_XingchenXctp* other) {
  if (other != this) {
    e_xingchenxctp_list_.Swap(&other->e_xingchenxctp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXctp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXctp_descriptor_;
  metadata.reflection = Sheet_XingchenXctp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXctpexp::kMLvFieldNumber;
const int E_XingchenXctpexp::kMLvdisplayFieldNumber;
const int E_XingchenXctpexp::kMExpFieldNumber;
#endif  // !_MSC_VER

E_XingchenXctpexp::E_XingchenXctpexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXctpexp::InitAsDefaultInstance() {
}

E_XingchenXctpexp::E_XingchenXctpexp(const E_XingchenXctpexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXctpexp::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_lvdisplay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXctpexp::~E_XingchenXctpexp() {
  SharedDtor();
}

void E_XingchenXctpexp::SharedDtor() {
  if (m_lvdisplay_ != &::google::protobuf::internal::kEmptyString) {
    delete m_lvdisplay_;
  }
  if (this != default_instance_) {
  }
}

void E_XingchenXctpexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXctpexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXctpexp_descriptor_;
}

const E_XingchenXctpexp& E_XingchenXctpexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXctpexp* E_XingchenXctpexp::default_instance_ = NULL;

E_XingchenXctpexp* E_XingchenXctpexp::New() const {
  return new E_XingchenXctpexp;
}

void E_XingchenXctpexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    if (has_m_lvdisplay()) {
      if (m_lvdisplay_ != &::google::protobuf::internal::kEmptyString) {
        m_lvdisplay_->clear();
      }
    }
    m_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXctpexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Lvdisplay;
        break;
      }

      // optional string m_Lvdisplay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Lvdisplay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_lvdisplay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_lvdisplay().data(), this->m_lvdisplay().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXctpexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional string m_Lvdisplay = 2;
  if (has_m_lvdisplay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_lvdisplay().data(), this->m_lvdisplay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_lvdisplay(), output);
  }

  // optional int32 m_exp = 3;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXctpexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional string m_Lvdisplay = 2;
  if (has_m_lvdisplay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_lvdisplay().data(), this->m_lvdisplay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_lvdisplay(), target);
  }

  // optional int32 m_exp = 3;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXctpexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional string m_Lvdisplay = 2;
    if (has_m_lvdisplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_lvdisplay());
    }

    // optional int32 m_exp = 3;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXctpexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXctpexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXctpexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXctpexp::MergeFrom(const E_XingchenXctpexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_lvdisplay()) {
      set_m_lvdisplay(from.m_lvdisplay());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXctpexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXctpexp::CopyFrom(const E_XingchenXctpexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXctpexp::IsInitialized() const {

  return true;
}

void E_XingchenXctpexp::Swap(E_XingchenXctpexp* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_lvdisplay_, other->m_lvdisplay_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXctpexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXctpexp_descriptor_;
  metadata.reflection = E_XingchenXctpexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXctpexp::kEXingchenXctpexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXctpexp::Sheet_XingchenXctpexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXctpexp::InitAsDefaultInstance() {
}

Sheet_XingchenXctpexp::Sheet_XingchenXctpexp(const Sheet_XingchenXctpexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXctpexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXctpexp::~Sheet_XingchenXctpexp() {
  SharedDtor();
}

void Sheet_XingchenXctpexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXctpexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXctpexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXctpexp_descriptor_;
}

const Sheet_XingchenXctpexp& Sheet_XingchenXctpexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXctpexp* Sheet_XingchenXctpexp::default_instance_ = NULL;

Sheet_XingchenXctpexp* Sheet_XingchenXctpexp::New() const {
  return new Sheet_XingchenXctpexp;
}

void Sheet_XingchenXctpexp::Clear() {
  e_xingchenxctpexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXctpexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXctpexp E_XingchenXctpexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXctpexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxctpexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXctpexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXctpexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXctpexp E_XingchenXctpexp_List = 1;
  for (int i = 0; i < this->e_xingchenxctpexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxctpexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXctpexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXctpexp E_XingchenXctpexp_List = 1;
  for (int i = 0; i < this->e_xingchenxctpexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxctpexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXctpexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXctpexp E_XingchenXctpexp_List = 1;
  total_size += 1 * this->e_xingchenxctpexp_list_size();
  for (int i = 0; i < this->e_xingchenxctpexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxctpexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXctpexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXctpexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXctpexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXctpexp::MergeFrom(const Sheet_XingchenXctpexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxctpexp_list_.MergeFrom(from.e_xingchenxctpexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXctpexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXctpexp::CopyFrom(const Sheet_XingchenXctpexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXctpexp::IsInitialized() const {

  return true;
}

void Sheet_XingchenXctpexp::Swap(Sheet_XingchenXctpexp* other) {
  if (other != this) {
    e_xingchenxctpexp_list_.Swap(&other->e_xingchenxctpexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXctpexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXctpexp_descriptor_;
  metadata.reflection = Sheet_XingchenXctpexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXctpaddi::kMIdFieldNumber;
const int E_XingchenXctpaddi::kMAttIdFieldNumber;
const int E_XingchenXctpaddi::kMCountFieldNumber;
const int E_XingchenXctpaddi::kMAttTypeFieldNumber;
const int E_XingchenXctpaddi::kMAttFieldNumber;
#endif  // !_MSC_VER

E_XingchenXctpaddi::E_XingchenXctpaddi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXctpaddi::InitAsDefaultInstance() {
}

E_XingchenXctpaddi::E_XingchenXctpaddi(const E_XingchenXctpaddi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXctpaddi::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_attid_ = GOOGLE_LONGLONG(0);
  m_count_ = 0;
  m_atttype_ = 0;
  m_att_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXctpaddi::~E_XingchenXctpaddi() {
  SharedDtor();
}

void E_XingchenXctpaddi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXctpaddi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXctpaddi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXctpaddi_descriptor_;
}

const E_XingchenXctpaddi& E_XingchenXctpaddi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXctpaddi* E_XingchenXctpaddi::default_instance_ = NULL;

E_XingchenXctpaddi* E_XingchenXctpaddi::New() const {
  return new E_XingchenXctpaddi;
}

void E_XingchenXctpaddi::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_attid_ = GOOGLE_LONGLONG(0);
    m_count_ = 0;
    m_atttype_ = 0;
    m_att_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXctpaddi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_attId;
        break;
      }

      // optional int64 m_attId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_attid_)));
          set_has_m_attid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_count;
        break;
      }

      // optional int32 m_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_attType;
        break;
      }

      // optional int32 m_attType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_atttype_)));
          set_has_m_atttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_att;
        break;
      }

      // optional int32 m_att = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_att_)));
          set_has_m_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXctpaddi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int64 m_attId = 2;
  if (has_m_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_attid(), output);
  }

  // optional int32 m_count = 3;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_count(), output);
  }

  // optional int32 m_attType = 4;
  if (has_m_atttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_atttype(), output);
  }

  // optional int32 m_att = 5;
  if (has_m_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_att(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXctpaddi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int64 m_attId = 2;
  if (has_m_attid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_attid(), target);
  }

  // optional int32 m_count = 3;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_count(), target);
  }

  // optional int32 m_attType = 4;
  if (has_m_atttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_atttype(), target);
  }

  // optional int32 m_att = 5;
  if (has_m_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_att(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXctpaddi::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int64 m_attId = 2;
    if (has_m_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_attid());
    }

    // optional int32 m_count = 3;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

    // optional int32 m_attType = 4;
    if (has_m_atttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_atttype());
    }

    // optional int32 m_att = 5;
    if (has_m_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_att());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXctpaddi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXctpaddi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXctpaddi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXctpaddi::MergeFrom(const E_XingchenXctpaddi& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_attid()) {
      set_m_attid(from.m_attid());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
    if (from.has_m_atttype()) {
      set_m_atttype(from.m_atttype());
    }
    if (from.has_m_att()) {
      set_m_att(from.m_att());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXctpaddi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXctpaddi::CopyFrom(const E_XingchenXctpaddi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXctpaddi::IsInitialized() const {

  return true;
}

void E_XingchenXctpaddi::Swap(E_XingchenXctpaddi* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_attid_, other->m_attid_);
    std::swap(m_count_, other->m_count_);
    std::swap(m_atttype_, other->m_atttype_);
    std::swap(m_att_, other->m_att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXctpaddi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXctpaddi_descriptor_;
  metadata.reflection = E_XingchenXctpaddi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXctpaddi::kEXingchenXctpaddiListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXctpaddi::Sheet_XingchenXctpaddi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXctpaddi::InitAsDefaultInstance() {
}

Sheet_XingchenXctpaddi::Sheet_XingchenXctpaddi(const Sheet_XingchenXctpaddi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXctpaddi::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXctpaddi::~Sheet_XingchenXctpaddi() {
  SharedDtor();
}

void Sheet_XingchenXctpaddi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXctpaddi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXctpaddi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXctpaddi_descriptor_;
}

const Sheet_XingchenXctpaddi& Sheet_XingchenXctpaddi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXctpaddi* Sheet_XingchenXctpaddi::default_instance_ = NULL;

Sheet_XingchenXctpaddi* Sheet_XingchenXctpaddi::New() const {
  return new Sheet_XingchenXctpaddi;
}

void Sheet_XingchenXctpaddi::Clear() {
  e_xingchenxctpaddi_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXctpaddi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXctpaddi E_XingchenXctpaddi_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXctpaddi_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxctpaddi_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXctpaddi_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXctpaddi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXctpaddi E_XingchenXctpaddi_List = 1;
  for (int i = 0; i < this->e_xingchenxctpaddi_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxctpaddi_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXctpaddi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXctpaddi E_XingchenXctpaddi_List = 1;
  for (int i = 0; i < this->e_xingchenxctpaddi_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxctpaddi_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXctpaddi::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXctpaddi E_XingchenXctpaddi_List = 1;
  total_size += 1 * this->e_xingchenxctpaddi_list_size();
  for (int i = 0; i < this->e_xingchenxctpaddi_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxctpaddi_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXctpaddi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXctpaddi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXctpaddi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXctpaddi::MergeFrom(const Sheet_XingchenXctpaddi& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxctpaddi_list_.MergeFrom(from.e_xingchenxctpaddi_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXctpaddi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXctpaddi::CopyFrom(const Sheet_XingchenXctpaddi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXctpaddi::IsInitialized() const {

  return true;
}

void Sheet_XingchenXctpaddi::Swap(Sheet_XingchenXctpaddi* other) {
  if (other != this) {
    e_xingchenxctpaddi_list_.Swap(&other->e_xingchenxctpaddi_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXctpaddi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXctpaddi_descriptor_;
  metadata.reflection = Sheet_XingchenXctpaddi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXctpatt::kMAttIDFieldNumber;
const int E_XingchenXctpatt::kMAttFieldNumber;
#endif  // !_MSC_VER

E_XingchenXctpatt::E_XingchenXctpatt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXctpatt::InitAsDefaultInstance() {
}

E_XingchenXctpatt::E_XingchenXctpatt(const E_XingchenXctpatt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXctpatt::SharedCtor() {
  _cached_size_ = 0;
  m_attid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXctpatt::~E_XingchenXctpatt() {
  SharedDtor();
}

void E_XingchenXctpatt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXctpatt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXctpatt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXctpatt_descriptor_;
}

const E_XingchenXctpatt& E_XingchenXctpatt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXctpatt* E_XingchenXctpatt::default_instance_ = NULL;

E_XingchenXctpatt* E_XingchenXctpatt::New() const {
  return new E_XingchenXctpatt;
}

void E_XingchenXctpatt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_attid_ = GOOGLE_LONGLONG(0);
  }
  m_att_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXctpatt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_attID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_attid_)));
          set_has_m_attid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_att;
        break;
      }

      // repeated int32 m_att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_att())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_att())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_att;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXctpatt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_attID = 1;
  if (has_m_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_attid(), output);
  }

  // repeated int32 m_att = 2;
  for (int i = 0; i < this->m_att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_att(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXctpatt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_attID = 1;
  if (has_m_attid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_attid(), target);
  }

  // repeated int32 m_att = 2;
  for (int i = 0; i < this->m_att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_att(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXctpatt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_attID = 1;
    if (has_m_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_attid());
    }

  }
  // repeated int32 m_att = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_att_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_att(i));
    }
    total_size += 1 * this->m_att_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXctpatt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXctpatt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXctpatt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXctpatt::MergeFrom(const E_XingchenXctpatt& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_att_.MergeFrom(from.m_att_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_attid()) {
      set_m_attid(from.m_attid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXctpatt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXctpatt::CopyFrom(const E_XingchenXctpatt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXctpatt::IsInitialized() const {

  return true;
}

void E_XingchenXctpatt::Swap(E_XingchenXctpatt* other) {
  if (other != this) {
    std::swap(m_attid_, other->m_attid_);
    m_att_.Swap(&other->m_att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXctpatt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXctpatt_descriptor_;
  metadata.reflection = E_XingchenXctpatt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXctpatt::kEXingchenXctpattListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXctpatt::Sheet_XingchenXctpatt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXctpatt::InitAsDefaultInstance() {
}

Sheet_XingchenXctpatt::Sheet_XingchenXctpatt(const Sheet_XingchenXctpatt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXctpatt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXctpatt::~Sheet_XingchenXctpatt() {
  SharedDtor();
}

void Sheet_XingchenXctpatt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXctpatt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXctpatt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXctpatt_descriptor_;
}

const Sheet_XingchenXctpatt& Sheet_XingchenXctpatt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXctpatt* Sheet_XingchenXctpatt::default_instance_ = NULL;

Sheet_XingchenXctpatt* Sheet_XingchenXctpatt::New() const {
  return new Sheet_XingchenXctpatt;
}

void Sheet_XingchenXctpatt::Clear() {
  e_xingchenxctpatt_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXctpatt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXctpatt E_XingchenXctpatt_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXctpatt_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxctpatt_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXctpatt_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXctpatt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXctpatt E_XingchenXctpatt_List = 1;
  for (int i = 0; i < this->e_xingchenxctpatt_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxctpatt_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXctpatt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXctpatt E_XingchenXctpatt_List = 1;
  for (int i = 0; i < this->e_xingchenxctpatt_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxctpatt_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXctpatt::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXctpatt E_XingchenXctpatt_List = 1;
  total_size += 1 * this->e_xingchenxctpatt_list_size();
  for (int i = 0; i < this->e_xingchenxctpatt_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxctpatt_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXctpatt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXctpatt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXctpatt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXctpatt::MergeFrom(const Sheet_XingchenXctpatt& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxctpatt_list_.MergeFrom(from.e_xingchenxctpatt_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXctpatt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXctpatt::CopyFrom(const Sheet_XingchenXctpatt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXctpatt::IsInitialized() const {

  return true;
}

void Sheet_XingchenXctpatt::Swap(Sheet_XingchenXctpatt* other) {
  if (other != this) {
    e_xingchenxctpatt_list_.Swap(&other->e_xingchenxctpatt_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXctpatt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXctpatt_descriptor_;
  metadata.reflection = Sheet_XingchenXctpatt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcstarAttributeDesc::kMValueFieldNumber;
const int E_XingchenXcstarAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcstarAttributeDesc::E_XingchenXcstarAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcstarAttributeDesc::InitAsDefaultInstance() {
}

E_XingchenXcstarAttributeDesc::E_XingchenXcstarAttributeDesc(const E_XingchenXcstarAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcstarAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcstarAttributeDesc::~E_XingchenXcstarAttributeDesc() {
  SharedDtor();
}

void E_XingchenXcstarAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcstarAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcstarAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcstarAttributeDesc_descriptor_;
}

const E_XingchenXcstarAttributeDesc& E_XingchenXcstarAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcstarAttributeDesc* E_XingchenXcstarAttributeDesc::default_instance_ = NULL;

E_XingchenXcstarAttributeDesc* E_XingchenXcstarAttributeDesc::New() const {
  return new E_XingchenXcstarAttributeDesc;
}

void E_XingchenXcstarAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcstarAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcstarAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcstarAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcstarAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcstarAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcstarAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcstarAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcstarAttributeDesc::MergeFrom(const E_XingchenXcstarAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcstarAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcstarAttributeDesc::CopyFrom(const E_XingchenXcstarAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcstarAttributeDesc::IsInitialized() const {

  return true;
}

void E_XingchenXcstarAttributeDesc::Swap(E_XingchenXcstarAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcstarAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcstarAttributeDesc_descriptor_;
  metadata.reflection = E_XingchenXcstarAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcstar::kMStarLvFieldNumber;
const int E_XingchenXcstar::kMIdFieldNumber;
const int E_XingchenXcstar::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcstar::E_XingchenXcstar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcstar::InitAsDefaultInstance() {
}

E_XingchenXcstar::E_XingchenXcstar(const E_XingchenXcstar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcstar::SharedCtor() {
  _cached_size_ = 0;
  m_starlv_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcstar::~E_XingchenXcstar() {
  SharedDtor();
}

void E_XingchenXcstar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcstar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcstar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcstar_descriptor_;
}

const E_XingchenXcstar& E_XingchenXcstar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcstar* E_XingchenXcstar::default_instance_ = NULL;

E_XingchenXcstar* E_XingchenXcstar::New() const {
  return new E_XingchenXcstar;
}

void E_XingchenXcstar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_starlv_ = 0;
    m_id_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcstar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_StarLv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starlv_)));
          set_has_m_starlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_XingchenXcstarAttributeDesc m_attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcstar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_StarLv = 1;
  if (has_m_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_starlv(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  // repeated .proto_ff.E_XingchenXcstarAttributeDesc m_attribute = 3;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcstar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_StarLv = 1;
  if (has_m_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_starlv(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  // repeated .proto_ff.E_XingchenXcstarAttributeDesc m_attribute = 3;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcstar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_StarLv = 1;
    if (has_m_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starlv());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  // repeated .proto_ff.E_XingchenXcstarAttributeDesc m_attribute = 3;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcstar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcstar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcstar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcstar::MergeFrom(const E_XingchenXcstar& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_starlv()) {
      set_m_starlv(from.m_starlv());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcstar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcstar::CopyFrom(const E_XingchenXcstar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcstar::IsInitialized() const {

  return true;
}

void E_XingchenXcstar::Swap(E_XingchenXcstar* other) {
  if (other != this) {
    std::swap(m_starlv_, other->m_starlv_);
    std::swap(m_id_, other->m_id_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcstar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcstar_descriptor_;
  metadata.reflection = E_XingchenXcstar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXcstar::kEXingchenXcstarListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXcstar::Sheet_XingchenXcstar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXcstar::InitAsDefaultInstance() {
}

Sheet_XingchenXcstar::Sheet_XingchenXcstar(const Sheet_XingchenXcstar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXcstar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXcstar::~Sheet_XingchenXcstar() {
  SharedDtor();
}

void Sheet_XingchenXcstar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXcstar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXcstar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXcstar_descriptor_;
}

const Sheet_XingchenXcstar& Sheet_XingchenXcstar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXcstar* Sheet_XingchenXcstar::default_instance_ = NULL;

Sheet_XingchenXcstar* Sheet_XingchenXcstar::New() const {
  return new Sheet_XingchenXcstar;
}

void Sheet_XingchenXcstar::Clear() {
  e_xingchenxcstar_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXcstar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXcstar E_XingchenXcstar_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXcstar_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxcstar_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXcstar_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXcstar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXcstar E_XingchenXcstar_List = 1;
  for (int i = 0; i < this->e_xingchenxcstar_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxcstar_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXcstar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXcstar E_XingchenXcstar_List = 1;
  for (int i = 0; i < this->e_xingchenxcstar_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxcstar_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXcstar::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXcstar E_XingchenXcstar_List = 1;
  total_size += 1 * this->e_xingchenxcstar_list_size();
  for (int i = 0; i < this->e_xingchenxcstar_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxcstar_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXcstar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXcstar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXcstar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXcstar::MergeFrom(const Sheet_XingchenXcstar& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxcstar_list_.MergeFrom(from.e_xingchenxcstar_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXcstar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXcstar::CopyFrom(const Sheet_XingchenXcstar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXcstar::IsInitialized() const {

  return true;
}

void Sheet_XingchenXcstar::Swap(Sheet_XingchenXcstar* other) {
  if (other != this) {
    e_xingchenxcstar_list_.Swap(&other->e_xingchenxcstar_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXcstar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXcstar_descriptor_;
  metadata.reflection = Sheet_XingchenXcstar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcawakenAwakenDesc::kMTPAddratioFieldNumber;
const int E_XingchenXcawakenAwakenDesc::kMLvAddratioFieldNumber;
const int E_XingchenXcawakenAwakenDesc::kMNumFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcawakenAwakenDesc::E_XingchenXcawakenAwakenDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcawakenAwakenDesc::InitAsDefaultInstance() {
}

E_XingchenXcawakenAwakenDesc::E_XingchenXcawakenAwakenDesc(const E_XingchenXcawakenAwakenDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcawakenAwakenDesc::SharedCtor() {
  _cached_size_ = 0;
  m_tpaddratio_ = 0;
  m_lvaddratio_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcawakenAwakenDesc::~E_XingchenXcawakenAwakenDesc() {
  SharedDtor();
}

void E_XingchenXcawakenAwakenDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcawakenAwakenDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcawakenAwakenDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcawakenAwakenDesc_descriptor_;
}

const E_XingchenXcawakenAwakenDesc& E_XingchenXcawakenAwakenDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcawakenAwakenDesc* E_XingchenXcawakenAwakenDesc::default_instance_ = NULL;

E_XingchenXcawakenAwakenDesc* E_XingchenXcawakenAwakenDesc::New() const {
  return new E_XingchenXcawakenAwakenDesc;
}

void E_XingchenXcawakenAwakenDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_tpaddratio_ = 0;
    m_lvaddratio_ = 0;
    m_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcawakenAwakenDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_TPAddratio = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tpaddratio_)));
          set_has_m_tpaddratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lvAddratio;
        break;
      }

      // optional int32 m_lvAddratio = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvAddratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvaddratio_)));
          set_has_m_lvaddratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcawakenAwakenDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_TPAddratio = 1;
  if (has_m_tpaddratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_tpaddratio(), output);
  }

  // optional int32 m_lvAddratio = 2;
  if (has_m_lvaddratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lvaddratio(), output);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcawakenAwakenDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_TPAddratio = 1;
  if (has_m_tpaddratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_tpaddratio(), target);
  }

  // optional int32 m_lvAddratio = 2;
  if (has_m_lvaddratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lvaddratio(), target);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcawakenAwakenDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_TPAddratio = 1;
    if (has_m_tpaddratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tpaddratio());
    }

    // optional int32 m_lvAddratio = 2;
    if (has_m_lvaddratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvaddratio());
    }

    // optional int32 m_num = 3;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcawakenAwakenDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcawakenAwakenDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcawakenAwakenDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcawakenAwakenDesc::MergeFrom(const E_XingchenXcawakenAwakenDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_tpaddratio()) {
      set_m_tpaddratio(from.m_tpaddratio());
    }
    if (from.has_m_lvaddratio()) {
      set_m_lvaddratio(from.m_lvaddratio());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcawakenAwakenDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcawakenAwakenDesc::CopyFrom(const E_XingchenXcawakenAwakenDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcawakenAwakenDesc::IsInitialized() const {

  return true;
}

void E_XingchenXcawakenAwakenDesc::Swap(E_XingchenXcawakenAwakenDesc* other) {
  if (other != this) {
    std::swap(m_tpaddratio_, other->m_tpaddratio_);
    std::swap(m_lvaddratio_, other->m_lvaddratio_);
    std::swap(m_num_, other->m_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcawakenAwakenDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcawakenAwakenDesc_descriptor_;
  metadata.reflection = E_XingchenXcawakenAwakenDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcawaken::kMPositionNumFieldNumber;
const int E_XingchenXcawaken::kMPositionIDFieldNumber;
const int E_XingchenXcawaken::kMAwakenQualityFieldNumber;
const int E_XingchenXcawaken::kMAwakenLvmaxFieldNumber;
const int E_XingchenXcawaken::kMAwakenItemFieldNumber;
const int E_XingchenXcawaken::kMAwakenFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcawaken::E_XingchenXcawaken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcawaken::InitAsDefaultInstance() {
}

E_XingchenXcawaken::E_XingchenXcawaken(const E_XingchenXcawaken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcawaken::SharedCtor() {
  _cached_size_ = 0;
  m_positionnum_ = 0;
  m_positionid_ = 0;
  m_awaken_quality_ = 0;
  m_awaken_lvmax_ = 0;
  m_awaken_item_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcawaken::~E_XingchenXcawaken() {
  SharedDtor();
}

void E_XingchenXcawaken::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcawaken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcawaken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcawaken_descriptor_;
}

const E_XingchenXcawaken& E_XingchenXcawaken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcawaken* E_XingchenXcawaken::default_instance_ = NULL;

E_XingchenXcawaken* E_XingchenXcawaken::New() const {
  return new E_XingchenXcawaken;
}

void E_XingchenXcawaken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_positionnum_ = 0;
    m_positionid_ = 0;
    m_awaken_quality_ = 0;
    m_awaken_lvmax_ = 0;
    m_awaken_item_ = 0;
  }
  m_awaken_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcawaken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_PositionNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_positionnum_)));
          set_has_m_positionnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_PositionID;
        break;
      }

      // optional int32 m_PositionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PositionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_positionid_)));
          set_has_m_positionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_awaken_quality;
        break;
      }

      // optional int32 m_awaken_quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_awaken_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_awaken_quality_)));
          set_has_m_awaken_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_awaken_Lvmax;
        break;
      }

      // optional int32 m_awaken_Lvmax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_awaken_Lvmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_awaken_lvmax_)));
          set_has_m_awaken_lvmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_awaken_item;
        break;
      }

      // optional int32 m_awaken_item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_awaken_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_awaken_item_)));
          set_has_m_awaken_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_awaken;
        break;
      }

      // repeated .proto_ff.E_XingchenXcawakenAwakenDesc m_awaken = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_awaken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_awaken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_awaken;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcawaken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_PositionNum = 1;
  if (has_m_positionnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_positionnum(), output);
  }

  // optional int32 m_PositionID = 2;
  if (has_m_positionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_positionid(), output);
  }

  // optional int32 m_awaken_quality = 3;
  if (has_m_awaken_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_awaken_quality(), output);
  }

  // optional int32 m_awaken_Lvmax = 4;
  if (has_m_awaken_lvmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_awaken_lvmax(), output);
  }

  // optional int32 m_awaken_item = 5;
  if (has_m_awaken_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_awaken_item(), output);
  }

  // repeated .proto_ff.E_XingchenXcawakenAwakenDesc m_awaken = 6;
  for (int i = 0; i < this->m_awaken_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_awaken(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcawaken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_PositionNum = 1;
  if (has_m_positionnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_positionnum(), target);
  }

  // optional int32 m_PositionID = 2;
  if (has_m_positionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_positionid(), target);
  }

  // optional int32 m_awaken_quality = 3;
  if (has_m_awaken_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_awaken_quality(), target);
  }

  // optional int32 m_awaken_Lvmax = 4;
  if (has_m_awaken_lvmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_awaken_lvmax(), target);
  }

  // optional int32 m_awaken_item = 5;
  if (has_m_awaken_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_awaken_item(), target);
  }

  // repeated .proto_ff.E_XingchenXcawakenAwakenDesc m_awaken = 6;
  for (int i = 0; i < this->m_awaken_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_awaken(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcawaken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_PositionNum = 1;
    if (has_m_positionnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_positionnum());
    }

    // optional int32 m_PositionID = 2;
    if (has_m_positionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_positionid());
    }

    // optional int32 m_awaken_quality = 3;
    if (has_m_awaken_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_awaken_quality());
    }

    // optional int32 m_awaken_Lvmax = 4;
    if (has_m_awaken_lvmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_awaken_lvmax());
    }

    // optional int32 m_awaken_item = 5;
    if (has_m_awaken_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_awaken_item());
    }

  }
  // repeated .proto_ff.E_XingchenXcawakenAwakenDesc m_awaken = 6;
  total_size += 1 * this->m_awaken_size();
  for (int i = 0; i < this->m_awaken_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_awaken(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcawaken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcawaken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcawaken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcawaken::MergeFrom(const E_XingchenXcawaken& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_awaken_.MergeFrom(from.m_awaken_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_positionnum()) {
      set_m_positionnum(from.m_positionnum());
    }
    if (from.has_m_positionid()) {
      set_m_positionid(from.m_positionid());
    }
    if (from.has_m_awaken_quality()) {
      set_m_awaken_quality(from.m_awaken_quality());
    }
    if (from.has_m_awaken_lvmax()) {
      set_m_awaken_lvmax(from.m_awaken_lvmax());
    }
    if (from.has_m_awaken_item()) {
      set_m_awaken_item(from.m_awaken_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcawaken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcawaken::CopyFrom(const E_XingchenXcawaken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcawaken::IsInitialized() const {

  return true;
}

void E_XingchenXcawaken::Swap(E_XingchenXcawaken* other) {
  if (other != this) {
    std::swap(m_positionnum_, other->m_positionnum_);
    std::swap(m_positionid_, other->m_positionid_);
    std::swap(m_awaken_quality_, other->m_awaken_quality_);
    std::swap(m_awaken_lvmax_, other->m_awaken_lvmax_);
    std::swap(m_awaken_item_, other->m_awaken_item_);
    m_awaken_.Swap(&other->m_awaken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcawaken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcawaken_descriptor_;
  metadata.reflection = E_XingchenXcawaken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXcawaken::kEXingchenXcawakenListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXcawaken::Sheet_XingchenXcawaken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXcawaken::InitAsDefaultInstance() {
}

Sheet_XingchenXcawaken::Sheet_XingchenXcawaken(const Sheet_XingchenXcawaken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXcawaken::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXcawaken::~Sheet_XingchenXcawaken() {
  SharedDtor();
}

void Sheet_XingchenXcawaken::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXcawaken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXcawaken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXcawaken_descriptor_;
}

const Sheet_XingchenXcawaken& Sheet_XingchenXcawaken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXcawaken* Sheet_XingchenXcawaken::default_instance_ = NULL;

Sheet_XingchenXcawaken* Sheet_XingchenXcawaken::New() const {
  return new Sheet_XingchenXcawaken;
}

void Sheet_XingchenXcawaken::Clear() {
  e_xingchenxcawaken_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXcawaken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXcawaken E_XingchenXcawaken_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXcawaken_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxcawaken_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXcawaken_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXcawaken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXcawaken E_XingchenXcawaken_List = 1;
  for (int i = 0; i < this->e_xingchenxcawaken_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxcawaken_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXcawaken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXcawaken E_XingchenXcawaken_List = 1;
  for (int i = 0; i < this->e_xingchenxcawaken_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxcawaken_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXcawaken::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXcawaken E_XingchenXcawaken_List = 1;
  total_size += 1 * this->e_xingchenxcawaken_list_size();
  for (int i = 0; i < this->e_xingchenxcawaken_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxcawaken_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXcawaken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXcawaken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXcawaken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXcawaken::MergeFrom(const Sheet_XingchenXcawaken& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxcawaken_list_.MergeFrom(from.e_xingchenxcawaken_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXcawaken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXcawaken::CopyFrom(const Sheet_XingchenXcawaken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXcawaken::IsInitialized() const {

  return true;
}

void Sheet_XingchenXcawaken::Swap(Sheet_XingchenXcawaken* other) {
  if (other != this) {
    e_xingchenxcawaken_list_.Swap(&other->e_xingchenxcawaken_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXcawaken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXcawaken_descriptor_;
  metadata.reflection = Sheet_XingchenXcawaken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcmagicalHhDesc::kMValueFieldNumber;
const int E_XingchenXcmagicalHhDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcmagicalHhDesc::E_XingchenXcmagicalHhDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcmagicalHhDesc::InitAsDefaultInstance() {
}

E_XingchenXcmagicalHhDesc::E_XingchenXcmagicalHhDesc(const E_XingchenXcmagicalHhDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcmagicalHhDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcmagicalHhDesc::~E_XingchenXcmagicalHhDesc() {
  SharedDtor();
}

void E_XingchenXcmagicalHhDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcmagicalHhDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcmagicalHhDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcmagicalHhDesc_descriptor_;
}

const E_XingchenXcmagicalHhDesc& E_XingchenXcmagicalHhDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcmagicalHhDesc* E_XingchenXcmagicalHhDesc::default_instance_ = NULL;

E_XingchenXcmagicalHhDesc* E_XingchenXcmagicalHhDesc::New() const {
  return new E_XingchenXcmagicalHhDesc;
}

void E_XingchenXcmagicalHhDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcmagicalHhDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcmagicalHhDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcmagicalHhDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcmagicalHhDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcmagicalHhDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcmagicalHhDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcmagicalHhDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcmagicalHhDesc::MergeFrom(const E_XingchenXcmagicalHhDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcmagicalHhDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcmagicalHhDesc::CopyFrom(const E_XingchenXcmagicalHhDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcmagicalHhDesc::IsInitialized() const {

  return true;
}

void E_XingchenXcmagicalHhDesc::Swap(E_XingchenXcmagicalHhDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcmagicalHhDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcmagicalHhDesc_descriptor_;
  metadata.reflection = E_XingchenXcmagicalHhDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcmagical::kMIdFieldNumber;
const int E_XingchenXcmagical::kMHhQualityFieldNumber;
const int E_XingchenXcmagical::kMIsAdvancedFieldNumber;
const int E_XingchenXcmagical::kMHhActFieldNumber;
const int E_XingchenXcmagical::kMHhStarFieldNumber;
const int E_XingchenXcmagical::kMAdvSkillFieldNumber;
const int E_XingchenXcmagical::kMHhFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcmagical::E_XingchenXcmagical()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcmagical::InitAsDefaultInstance() {
}

E_XingchenXcmagical::E_XingchenXcmagical(const E_XingchenXcmagical& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcmagical::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_hhquality_ = 0;
  m_isadvanced_ = 0;
  m_hhact_ = 0;
  m_hhstar_ = 0;
  m_advskill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcmagical::~E_XingchenXcmagical() {
  SharedDtor();
}

void E_XingchenXcmagical::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcmagical::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcmagical::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcmagical_descriptor_;
}

const E_XingchenXcmagical& E_XingchenXcmagical::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcmagical* E_XingchenXcmagical::default_instance_ = NULL;

E_XingchenXcmagical* E_XingchenXcmagical::New() const {
  return new E_XingchenXcmagical;
}

void E_XingchenXcmagical::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_hhquality_ = 0;
    m_isadvanced_ = 0;
    m_hhact_ = 0;
    m_hhstar_ = 0;
    m_advskill_ = 0;
  }
  m_hh_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcmagical::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_HhQuality;
        break;
      }

      // optional int32 m_HhQuality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_HhQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hhquality_)));
          set_has_m_hhquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_isAdvanced;
        break;
      }

      // optional int32 m_isAdvanced = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isAdvanced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isadvanced_)));
          set_has_m_isadvanced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_HhAct;
        break;
      }

      // optional int32 m_HhAct = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_HhAct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hhact_)));
          set_has_m_hhact();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_HhStar;
        break;
      }

      // optional int32 m_HhStar = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_HhStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hhstar_)));
          set_has_m_hhstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_AdvSkill;
        break;
      }

      // optional int32 m_AdvSkill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_AdvSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advskill_)));
          set_has_m_advskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_Hh;
        break;
      }

      // repeated .proto_ff.E_XingchenXcmagicalHhDesc m_Hh = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Hh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_hh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_Hh;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcmagical::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_HhQuality = 2;
  if (has_m_hhquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_hhquality(), output);
  }

  // optional int32 m_isAdvanced = 3;
  if (has_m_isadvanced()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_isadvanced(), output);
  }

  // optional int32 m_HhAct = 4;
  if (has_m_hhact()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_hhact(), output);
  }

  // optional int32 m_HhStar = 5;
  if (has_m_hhstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_hhstar(), output);
  }

  // optional int32 m_AdvSkill = 6;
  if (has_m_advskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_advskill(), output);
  }

  // repeated .proto_ff.E_XingchenXcmagicalHhDesc m_Hh = 7;
  for (int i = 0; i < this->m_hh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_hh(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcmagical::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_HhQuality = 2;
  if (has_m_hhquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_hhquality(), target);
  }

  // optional int32 m_isAdvanced = 3;
  if (has_m_isadvanced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_isadvanced(), target);
  }

  // optional int32 m_HhAct = 4;
  if (has_m_hhact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_hhact(), target);
  }

  // optional int32 m_HhStar = 5;
  if (has_m_hhstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_hhstar(), target);
  }

  // optional int32 m_AdvSkill = 6;
  if (has_m_advskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_advskill(), target);
  }

  // repeated .proto_ff.E_XingchenXcmagicalHhDesc m_Hh = 7;
  for (int i = 0; i < this->m_hh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_hh(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcmagical::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_HhQuality = 2;
    if (has_m_hhquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hhquality());
    }

    // optional int32 m_isAdvanced = 3;
    if (has_m_isadvanced()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isadvanced());
    }

    // optional int32 m_HhAct = 4;
    if (has_m_hhact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hhact());
    }

    // optional int32 m_HhStar = 5;
    if (has_m_hhstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hhstar());
    }

    // optional int32 m_AdvSkill = 6;
    if (has_m_advskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advskill());
    }

  }
  // repeated .proto_ff.E_XingchenXcmagicalHhDesc m_Hh = 7;
  total_size += 1 * this->m_hh_size();
  for (int i = 0; i < this->m_hh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_hh(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcmagical::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcmagical* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcmagical*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcmagical::MergeFrom(const E_XingchenXcmagical& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_hh_.MergeFrom(from.m_hh_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_hhquality()) {
      set_m_hhquality(from.m_hhquality());
    }
    if (from.has_m_isadvanced()) {
      set_m_isadvanced(from.m_isadvanced());
    }
    if (from.has_m_hhact()) {
      set_m_hhact(from.m_hhact());
    }
    if (from.has_m_hhstar()) {
      set_m_hhstar(from.m_hhstar());
    }
    if (from.has_m_advskill()) {
      set_m_advskill(from.m_advskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcmagical::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcmagical::CopyFrom(const E_XingchenXcmagical& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcmagical::IsInitialized() const {

  return true;
}

void E_XingchenXcmagical::Swap(E_XingchenXcmagical* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_hhquality_, other->m_hhquality_);
    std::swap(m_isadvanced_, other->m_isadvanced_);
    std::swap(m_hhact_, other->m_hhact_);
    std::swap(m_hhstar_, other->m_hhstar_);
    std::swap(m_advskill_, other->m_advskill_);
    m_hh_.Swap(&other->m_hh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcmagical::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcmagical_descriptor_;
  metadata.reflection = E_XingchenXcmagical_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXcmagical::kEXingchenXcmagicalListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXcmagical::Sheet_XingchenXcmagical()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXcmagical::InitAsDefaultInstance() {
}

Sheet_XingchenXcmagical::Sheet_XingchenXcmagical(const Sheet_XingchenXcmagical& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXcmagical::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXcmagical::~Sheet_XingchenXcmagical() {
  SharedDtor();
}

void Sheet_XingchenXcmagical::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXcmagical::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXcmagical::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXcmagical_descriptor_;
}

const Sheet_XingchenXcmagical& Sheet_XingchenXcmagical::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXcmagical* Sheet_XingchenXcmagical::default_instance_ = NULL;

Sheet_XingchenXcmagical* Sheet_XingchenXcmagical::New() const {
  return new Sheet_XingchenXcmagical;
}

void Sheet_XingchenXcmagical::Clear() {
  e_xingchenxcmagical_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXcmagical::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXcmagical E_XingchenXcmagical_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXcmagical_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxcmagical_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXcmagical_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXcmagical::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXcmagical E_XingchenXcmagical_List = 1;
  for (int i = 0; i < this->e_xingchenxcmagical_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxcmagical_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXcmagical::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXcmagical E_XingchenXcmagical_List = 1;
  for (int i = 0; i < this->e_xingchenxcmagical_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxcmagical_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXcmagical::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXcmagical E_XingchenXcmagical_List = 1;
  total_size += 1 * this->e_xingchenxcmagical_list_size();
  for (int i = 0; i < this->e_xingchenxcmagical_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxcmagical_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXcmagical::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXcmagical* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXcmagical*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXcmagical::MergeFrom(const Sheet_XingchenXcmagical& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxcmagical_list_.MergeFrom(from.e_xingchenxcmagical_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXcmagical::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXcmagical::CopyFrom(const Sheet_XingchenXcmagical& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXcmagical::IsInitialized() const {

  return true;
}

void Sheet_XingchenXcmagical::Swap(Sheet_XingchenXcmagical* other) {
  if (other != this) {
    e_xingchenxcmagical_list_.Swap(&other->e_xingchenxcmagical_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXcmagical::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXcmagical_descriptor_;
  metadata.reflection = Sheet_XingchenXcmagical_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcmagatt::kMAttIDFieldNumber;
const int E_XingchenXcmagatt::kMAttFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcmagatt::E_XingchenXcmagatt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcmagatt::InitAsDefaultInstance() {
}

E_XingchenXcmagatt::E_XingchenXcmagatt(const E_XingchenXcmagatt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcmagatt::SharedCtor() {
  _cached_size_ = 0;
  m_attid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcmagatt::~E_XingchenXcmagatt() {
  SharedDtor();
}

void E_XingchenXcmagatt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcmagatt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcmagatt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcmagatt_descriptor_;
}

const E_XingchenXcmagatt& E_XingchenXcmagatt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcmagatt* E_XingchenXcmagatt::default_instance_ = NULL;

E_XingchenXcmagatt* E_XingchenXcmagatt::New() const {
  return new E_XingchenXcmagatt;
}

void E_XingchenXcmagatt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_attid_ = GOOGLE_LONGLONG(0);
  }
  m_att_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcmagatt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_attID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_attid_)));
          set_has_m_attid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_att;
        break;
      }

      // repeated int32 m_att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_att())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_att())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_att;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcmagatt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_attID = 1;
  if (has_m_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_attid(), output);
  }

  // repeated int32 m_att = 2;
  for (int i = 0; i < this->m_att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_att(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcmagatt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_attID = 1;
  if (has_m_attid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_attid(), target);
  }

  // repeated int32 m_att = 2;
  for (int i = 0; i < this->m_att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_att(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcmagatt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_attID = 1;
    if (has_m_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_attid());
    }

  }
  // repeated int32 m_att = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_att_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_att(i));
    }
    total_size += 1 * this->m_att_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcmagatt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcmagatt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcmagatt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcmagatt::MergeFrom(const E_XingchenXcmagatt& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_att_.MergeFrom(from.m_att_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_attid()) {
      set_m_attid(from.m_attid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcmagatt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcmagatt::CopyFrom(const E_XingchenXcmagatt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcmagatt::IsInitialized() const {

  return true;
}

void E_XingchenXcmagatt::Swap(E_XingchenXcmagatt* other) {
  if (other != this) {
    std::swap(m_attid_, other->m_attid_);
    m_att_.Swap(&other->m_att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcmagatt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcmagatt_descriptor_;
  metadata.reflection = E_XingchenXcmagatt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXcmagatt::kEXingchenXcmagattListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXcmagatt::Sheet_XingchenXcmagatt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXcmagatt::InitAsDefaultInstance() {
}

Sheet_XingchenXcmagatt::Sheet_XingchenXcmagatt(const Sheet_XingchenXcmagatt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXcmagatt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXcmagatt::~Sheet_XingchenXcmagatt() {
  SharedDtor();
}

void Sheet_XingchenXcmagatt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXcmagatt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXcmagatt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXcmagatt_descriptor_;
}

const Sheet_XingchenXcmagatt& Sheet_XingchenXcmagatt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXcmagatt* Sheet_XingchenXcmagatt::default_instance_ = NULL;

Sheet_XingchenXcmagatt* Sheet_XingchenXcmagatt::New() const {
  return new Sheet_XingchenXcmagatt;
}

void Sheet_XingchenXcmagatt::Clear() {
  e_xingchenxcmagatt_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXcmagatt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXcmagatt E_XingchenXcmagatt_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXcmagatt_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxcmagatt_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXcmagatt_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXcmagatt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXcmagatt E_XingchenXcmagatt_List = 1;
  for (int i = 0; i < this->e_xingchenxcmagatt_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxcmagatt_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXcmagatt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXcmagatt E_XingchenXcmagatt_List = 1;
  for (int i = 0; i < this->e_xingchenxcmagatt_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxcmagatt_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXcmagatt::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXcmagatt E_XingchenXcmagatt_List = 1;
  total_size += 1 * this->e_xingchenxcmagatt_list_size();
  for (int i = 0; i < this->e_xingchenxcmagatt_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxcmagatt_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXcmagatt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXcmagatt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXcmagatt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXcmagatt::MergeFrom(const Sheet_XingchenXcmagatt& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxcmagatt_list_.MergeFrom(from.e_xingchenxcmagatt_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXcmagatt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXcmagatt::CopyFrom(const Sheet_XingchenXcmagatt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXcmagatt::IsInitialized() const {

  return true;
}

void Sheet_XingchenXcmagatt::Swap(Sheet_XingchenXcmagatt* other) {
  if (other != this) {
    e_xingchenxcmagatt_list_.Swap(&other->e_xingchenxcmagatt_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXcmagatt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXcmagatt_descriptor_;
  metadata.reflection = Sheet_XingchenXcmagatt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcadvattUpattributeDesc::kMValueFieldNumber;
const int E_XingchenXcadvattUpattributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcadvattUpattributeDesc::E_XingchenXcadvattUpattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcadvattUpattributeDesc::InitAsDefaultInstance() {
}

E_XingchenXcadvattUpattributeDesc::E_XingchenXcadvattUpattributeDesc(const E_XingchenXcadvattUpattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcadvattUpattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcadvattUpattributeDesc::~E_XingchenXcadvattUpattributeDesc() {
  SharedDtor();
}

void E_XingchenXcadvattUpattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcadvattUpattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcadvattUpattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcadvattUpattributeDesc_descriptor_;
}

const E_XingchenXcadvattUpattributeDesc& E_XingchenXcadvattUpattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcadvattUpattributeDesc* E_XingchenXcadvattUpattributeDesc::default_instance_ = NULL;

E_XingchenXcadvattUpattributeDesc* E_XingchenXcadvattUpattributeDesc::New() const {
  return new E_XingchenXcadvattUpattributeDesc;
}

void E_XingchenXcadvattUpattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcadvattUpattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcadvattUpattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcadvattUpattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcadvattUpattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcadvattUpattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcadvattUpattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcadvattUpattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcadvattUpattributeDesc::MergeFrom(const E_XingchenXcadvattUpattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcadvattUpattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcadvattUpattributeDesc::CopyFrom(const E_XingchenXcadvattUpattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcadvattUpattributeDesc::IsInitialized() const {

  return true;
}

void E_XingchenXcadvattUpattributeDesc::Swap(E_XingchenXcadvattUpattributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcadvattUpattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcadvattUpattributeDesc_descriptor_;
  metadata.reflection = E_XingchenXcadvattUpattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcadvatt::kMIDFieldNumber;
const int E_XingchenXcadvatt::kMUpAttributeIdFieldNumber;
const int E_XingchenXcadvatt::kMClassLvFieldNumber;
const int E_XingchenXcadvatt::kMStarIDFieldNumber;
const int E_XingchenXcadvatt::kMSkillIDFieldNumber;
const int E_XingchenXcadvatt::kMActiveSkillIDLvFieldNumber;
const int E_XingchenXcadvatt::kMUpAttributeFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcadvatt::E_XingchenXcadvatt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcadvatt::InitAsDefaultInstance() {
}

E_XingchenXcadvatt::E_XingchenXcadvatt(const E_XingchenXcadvatt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcadvatt::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_upattributeid_ = GOOGLE_LONGLONG(0);
  m_classlv_ = 0;
  m_starid_ = 0;
  m_skillid_ = 0;
  m_activeskillidlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcadvatt::~E_XingchenXcadvatt() {
  SharedDtor();
}

void E_XingchenXcadvatt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcadvatt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcadvatt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcadvatt_descriptor_;
}

const E_XingchenXcadvatt& E_XingchenXcadvatt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcadvatt* E_XingchenXcadvatt::default_instance_ = NULL;

E_XingchenXcadvatt* E_XingchenXcadvatt::New() const {
  return new E_XingchenXcadvatt;
}

void E_XingchenXcadvatt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_upattributeid_ = GOOGLE_LONGLONG(0);
    m_classlv_ = 0;
    m_starid_ = 0;
    m_skillid_ = 0;
    m_activeskillidlv_ = 0;
  }
  m_upattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcadvatt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_upAttributeId;
        break;
      }

      // optional int64 m_upAttributeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_upAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_upattributeid_)));
          set_has_m_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_ClassLv;
        break;
      }

      // optional int32 m_ClassLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ClassLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_classlv_)));
          set_has_m_classlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_starID;
        break;
      }

      // optional int32 m_starID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starid_)));
          set_has_m_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_skillID;
        break;
      }

      // optional int32 m_skillID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_activeSkillIDLv;
        break;
      }

      // optional int32 m_activeSkillIDLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activeSkillIDLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activeskillidlv_)));
          set_has_m_activeskillidlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_upAttribute;
        break;
      }

      // repeated .proto_ff.E_XingchenXcadvattUpattributeDesc m_upAttribute = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_upAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_upattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_upAttribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcadvatt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int64 m_upAttributeId = 2;
  if (has_m_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_upattributeid(), output);
  }

  // optional int32 m_ClassLv = 3;
  if (has_m_classlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_classlv(), output);
  }

  // optional int32 m_starID = 4;
  if (has_m_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_starid(), output);
  }

  // optional int32 m_skillID = 5;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_skillid(), output);
  }

  // optional int32 m_activeSkillIDLv = 6;
  if (has_m_activeskillidlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_activeskillidlv(), output);
  }

  // repeated .proto_ff.E_XingchenXcadvattUpattributeDesc m_upAttribute = 7;
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_upattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcadvatt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int64 m_upAttributeId = 2;
  if (has_m_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_upattributeid(), target);
  }

  // optional int32 m_ClassLv = 3;
  if (has_m_classlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_classlv(), target);
  }

  // optional int32 m_starID = 4;
  if (has_m_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_starid(), target);
  }

  // optional int32 m_skillID = 5;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_skillid(), target);
  }

  // optional int32 m_activeSkillIDLv = 6;
  if (has_m_activeskillidlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_activeskillidlv(), target);
  }

  // repeated .proto_ff.E_XingchenXcadvattUpattributeDesc m_upAttribute = 7;
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_upattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcadvatt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int64 m_upAttributeId = 2;
    if (has_m_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_upattributeid());
    }

    // optional int32 m_ClassLv = 3;
    if (has_m_classlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_classlv());
    }

    // optional int32 m_starID = 4;
    if (has_m_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starid());
    }

    // optional int32 m_skillID = 5;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_activeSkillIDLv = 6;
    if (has_m_activeskillidlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activeskillidlv());
    }

  }
  // repeated .proto_ff.E_XingchenXcadvattUpattributeDesc m_upAttribute = 7;
  total_size += 1 * this->m_upattribute_size();
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_upattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcadvatt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcadvatt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcadvatt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcadvatt::MergeFrom(const E_XingchenXcadvatt& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_upattribute_.MergeFrom(from.m_upattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_upattributeid()) {
      set_m_upattributeid(from.m_upattributeid());
    }
    if (from.has_m_classlv()) {
      set_m_classlv(from.m_classlv());
    }
    if (from.has_m_starid()) {
      set_m_starid(from.m_starid());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_activeskillidlv()) {
      set_m_activeskillidlv(from.m_activeskillidlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcadvatt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcadvatt::CopyFrom(const E_XingchenXcadvatt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcadvatt::IsInitialized() const {

  return true;
}

void E_XingchenXcadvatt::Swap(E_XingchenXcadvatt* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_upattributeid_, other->m_upattributeid_);
    std::swap(m_classlv_, other->m_classlv_);
    std::swap(m_starid_, other->m_starid_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_activeskillidlv_, other->m_activeskillidlv_);
    m_upattribute_.Swap(&other->m_upattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcadvatt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcadvatt_descriptor_;
  metadata.reflection = E_XingchenXcadvatt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXcadvatt::kEXingchenXcadvattListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXcadvatt::Sheet_XingchenXcadvatt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXcadvatt::InitAsDefaultInstance() {
}

Sheet_XingchenXcadvatt::Sheet_XingchenXcadvatt(const Sheet_XingchenXcadvatt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXcadvatt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXcadvatt::~Sheet_XingchenXcadvatt() {
  SharedDtor();
}

void Sheet_XingchenXcadvatt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXcadvatt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXcadvatt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXcadvatt_descriptor_;
}

const Sheet_XingchenXcadvatt& Sheet_XingchenXcadvatt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXcadvatt* Sheet_XingchenXcadvatt::default_instance_ = NULL;

Sheet_XingchenXcadvatt* Sheet_XingchenXcadvatt::New() const {
  return new Sheet_XingchenXcadvatt;
}

void Sheet_XingchenXcadvatt::Clear() {
  e_xingchenxcadvatt_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXcadvatt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXcadvatt E_XingchenXcadvatt_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXcadvatt_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxcadvatt_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXcadvatt_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXcadvatt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXcadvatt E_XingchenXcadvatt_List = 1;
  for (int i = 0; i < this->e_xingchenxcadvatt_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxcadvatt_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXcadvatt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXcadvatt E_XingchenXcadvatt_List = 1;
  for (int i = 0; i < this->e_xingchenxcadvatt_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxcadvatt_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXcadvatt::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXcadvatt E_XingchenXcadvatt_List = 1;
  total_size += 1 * this->e_xingchenxcadvatt_list_size();
  for (int i = 0; i < this->e_xingchenxcadvatt_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxcadvatt_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXcadvatt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXcadvatt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXcadvatt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXcadvatt::MergeFrom(const Sheet_XingchenXcadvatt& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxcadvatt_list_.MergeFrom(from.e_xingchenxcadvatt_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXcadvatt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXcadvatt::CopyFrom(const Sheet_XingchenXcadvatt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXcadvatt::IsInitialized() const {

  return true;
}

void Sheet_XingchenXcadvatt::Swap(Sheet_XingchenXcadvatt* other) {
  if (other != this) {
    e_xingchenxcadvatt_list_.Swap(&other->e_xingchenxcadvatt_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXcadvatt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXcadvatt_descriptor_;
  metadata.reflection = Sheet_XingchenXcadvatt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcguizhenXxDesc::kMValueFieldNumber;
const int E_XingchenXcguizhenXxDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcguizhenXxDesc::E_XingchenXcguizhenXxDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcguizhenXxDesc::InitAsDefaultInstance() {
}

E_XingchenXcguizhenXxDesc::E_XingchenXcguizhenXxDesc(const E_XingchenXcguizhenXxDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcguizhenXxDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcguizhenXxDesc::~E_XingchenXcguizhenXxDesc() {
  SharedDtor();
}

void E_XingchenXcguizhenXxDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcguizhenXxDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcguizhenXxDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcguizhenXxDesc_descriptor_;
}

const E_XingchenXcguizhenXxDesc& E_XingchenXcguizhenXxDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcguizhenXxDesc* E_XingchenXcguizhenXxDesc::default_instance_ = NULL;

E_XingchenXcguizhenXxDesc* E_XingchenXcguizhenXxDesc::New() const {
  return new E_XingchenXcguizhenXxDesc;
}

void E_XingchenXcguizhenXxDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcguizhenXxDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcguizhenXxDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcguizhenXxDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcguizhenXxDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcguizhenXxDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcguizhenXxDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcguizhenXxDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcguizhenXxDesc::MergeFrom(const E_XingchenXcguizhenXxDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcguizhenXxDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcguizhenXxDesc::CopyFrom(const E_XingchenXcguizhenXxDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcguizhenXxDesc::IsInitialized() const {

  return true;
}

void E_XingchenXcguizhenXxDesc::Swap(E_XingchenXcguizhenXxDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcguizhenXxDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcguizhenXxDesc_descriptor_;
  metadata.reflection = E_XingchenXcguizhenXxDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcguizhenGzDesc::kMValueFieldNumber;
const int E_XingchenXcguizhenGzDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcguizhenGzDesc::E_XingchenXcguizhenGzDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcguizhenGzDesc::InitAsDefaultInstance() {
}

E_XingchenXcguizhenGzDesc::E_XingchenXcguizhenGzDesc(const E_XingchenXcguizhenGzDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcguizhenGzDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcguizhenGzDesc::~E_XingchenXcguizhenGzDesc() {
  SharedDtor();
}

void E_XingchenXcguizhenGzDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcguizhenGzDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcguizhenGzDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcguizhenGzDesc_descriptor_;
}

const E_XingchenXcguizhenGzDesc& E_XingchenXcguizhenGzDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcguizhenGzDesc* E_XingchenXcguizhenGzDesc::default_instance_ = NULL;

E_XingchenXcguizhenGzDesc* E_XingchenXcguizhenGzDesc::New() const {
  return new E_XingchenXcguizhenGzDesc;
}

void E_XingchenXcguizhenGzDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcguizhenGzDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcguizhenGzDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcguizhenGzDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcguizhenGzDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcguizhenGzDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcguizhenGzDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcguizhenGzDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcguizhenGzDesc::MergeFrom(const E_XingchenXcguizhenGzDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcguizhenGzDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcguizhenGzDesc::CopyFrom(const E_XingchenXcguizhenGzDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcguizhenGzDesc::IsInitialized() const {

  return true;
}

void E_XingchenXcguizhenGzDesc::Swap(E_XingchenXcguizhenGzDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcguizhenGzDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcguizhenGzDesc_descriptor_;
  metadata.reflection = E_XingchenXcguizhenGzDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXcguizhen::kMIDFieldNumber;
const int E_XingchenXcguizhen::kMXsIdFieldNumber;
const int E_XingchenXcguizhen::kMGzQualityFieldNumber;
const int E_XingchenXcguizhen::kMGzNumFieldNumber;
const int E_XingchenXcguizhen::kMGzXhFieldNumber;
const int E_XingchenXcguizhen::kMXxFieldNumber;
const int E_XingchenXcguizhen::kMGzFieldNumber;
#endif  // !_MSC_VER

E_XingchenXcguizhen::E_XingchenXcguizhen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXcguizhen::InitAsDefaultInstance() {
}

E_XingchenXcguizhen::E_XingchenXcguizhen(const E_XingchenXcguizhen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXcguizhen::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_xsid_ = 0;
  m_gzquality_ = 0;
  m_gznum_ = 0;
  m_gzxh_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXcguizhen::~E_XingchenXcguizhen() {
  SharedDtor();
}

void E_XingchenXcguizhen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXcguizhen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXcguizhen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXcguizhen_descriptor_;
}

const E_XingchenXcguizhen& E_XingchenXcguizhen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXcguizhen* E_XingchenXcguizhen::default_instance_ = NULL;

E_XingchenXcguizhen* E_XingchenXcguizhen::New() const {
  return new E_XingchenXcguizhen;
}

void E_XingchenXcguizhen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_xsid_ = 0;
    m_gzquality_ = 0;
    m_gznum_ = 0;
    m_gzxh_ = 0;
  }
  m_xx_.Clear();
  m_gz_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXcguizhen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_XsId;
        break;
      }

      // optional int32 m_XsId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_XsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xsid_)));
          set_has_m_xsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_GzQuality;
        break;
      }

      // optional int32 m_GzQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GzQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gzquality_)));
          set_has_m_gzquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_GzNum;
        break;
      }

      // optional int32 m_GzNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GzNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gznum_)));
          set_has_m_gznum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_GzXh;
        break;
      }

      // optional int32 m_GzXh = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GzXh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gzxh_)));
          set_has_m_gzxh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_Xx;
        break;
      }

      // repeated .proto_ff.E_XingchenXcguizhenXxDesc m_Xx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Xx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_xx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_Xx;
        if (input->ExpectTag(58)) goto parse_m_Gz;
        break;
      }

      // repeated .proto_ff.E_XingchenXcguizhenGzDesc m_Gz = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Gz:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_gz()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_Gz;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXcguizhen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_XsId = 2;
  if (has_m_xsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_xsid(), output);
  }

  // optional int32 m_GzQuality = 3;
  if (has_m_gzquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_gzquality(), output);
  }

  // optional int32 m_GzNum = 4;
  if (has_m_gznum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_gznum(), output);
  }

  // optional int32 m_GzXh = 5;
  if (has_m_gzxh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_gzxh(), output);
  }

  // repeated .proto_ff.E_XingchenXcguizhenXxDesc m_Xx = 6;
  for (int i = 0; i < this->m_xx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_xx(i), output);
  }

  // repeated .proto_ff.E_XingchenXcguizhenGzDesc m_Gz = 7;
  for (int i = 0; i < this->m_gz_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_gz(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXcguizhen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_XsId = 2;
  if (has_m_xsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_xsid(), target);
  }

  // optional int32 m_GzQuality = 3;
  if (has_m_gzquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_gzquality(), target);
  }

  // optional int32 m_GzNum = 4;
  if (has_m_gznum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_gznum(), target);
  }

  // optional int32 m_GzXh = 5;
  if (has_m_gzxh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_gzxh(), target);
  }

  // repeated .proto_ff.E_XingchenXcguizhenXxDesc m_Xx = 6;
  for (int i = 0; i < this->m_xx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_xx(i), target);
  }

  // repeated .proto_ff.E_XingchenXcguizhenGzDesc m_Gz = 7;
  for (int i = 0; i < this->m_gz_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_gz(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXcguizhen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_XsId = 2;
    if (has_m_xsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xsid());
    }

    // optional int32 m_GzQuality = 3;
    if (has_m_gzquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gzquality());
    }

    // optional int32 m_GzNum = 4;
    if (has_m_gznum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gznum());
    }

    // optional int32 m_GzXh = 5;
    if (has_m_gzxh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gzxh());
    }

  }
  // repeated .proto_ff.E_XingchenXcguizhenXxDesc m_Xx = 6;
  total_size += 1 * this->m_xx_size();
  for (int i = 0; i < this->m_xx_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_xx(i));
  }

  // repeated .proto_ff.E_XingchenXcguizhenGzDesc m_Gz = 7;
  total_size += 1 * this->m_gz_size();
  for (int i = 0; i < this->m_gz_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_gz(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXcguizhen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXcguizhen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXcguizhen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXcguizhen::MergeFrom(const E_XingchenXcguizhen& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_xx_.MergeFrom(from.m_xx_);
  m_gz_.MergeFrom(from.m_gz_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_xsid()) {
      set_m_xsid(from.m_xsid());
    }
    if (from.has_m_gzquality()) {
      set_m_gzquality(from.m_gzquality());
    }
    if (from.has_m_gznum()) {
      set_m_gznum(from.m_gznum());
    }
    if (from.has_m_gzxh()) {
      set_m_gzxh(from.m_gzxh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXcguizhen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXcguizhen::CopyFrom(const E_XingchenXcguizhen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXcguizhen::IsInitialized() const {

  return true;
}

void E_XingchenXcguizhen::Swap(E_XingchenXcguizhen* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_xsid_, other->m_xsid_);
    std::swap(m_gzquality_, other->m_gzquality_);
    std::swap(m_gznum_, other->m_gznum_);
    std::swap(m_gzxh_, other->m_gzxh_);
    m_xx_.Swap(&other->m_xx_);
    m_gz_.Swap(&other->m_gz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXcguizhen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXcguizhen_descriptor_;
  metadata.reflection = E_XingchenXcguizhen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXcguizhen::kEXingchenXcguizhenListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXcguizhen::Sheet_XingchenXcguizhen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXcguizhen::InitAsDefaultInstance() {
}

Sheet_XingchenXcguizhen::Sheet_XingchenXcguizhen(const Sheet_XingchenXcguizhen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXcguizhen::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXcguizhen::~Sheet_XingchenXcguizhen() {
  SharedDtor();
}

void Sheet_XingchenXcguizhen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXcguizhen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXcguizhen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXcguizhen_descriptor_;
}

const Sheet_XingchenXcguizhen& Sheet_XingchenXcguizhen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXcguizhen* Sheet_XingchenXcguizhen::default_instance_ = NULL;

Sheet_XingchenXcguizhen* Sheet_XingchenXcguizhen::New() const {
  return new Sheet_XingchenXcguizhen;
}

void Sheet_XingchenXcguizhen::Clear() {
  e_xingchenxcguizhen_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXcguizhen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXcguizhen E_XingchenXcguizhen_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXcguizhen_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxcguizhen_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXcguizhen_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXcguizhen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXcguizhen E_XingchenXcguizhen_List = 1;
  for (int i = 0; i < this->e_xingchenxcguizhen_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxcguizhen_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXcguizhen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXcguizhen E_XingchenXcguizhen_List = 1;
  for (int i = 0; i < this->e_xingchenxcguizhen_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxcguizhen_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXcguizhen::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXcguizhen E_XingchenXcguizhen_List = 1;
  total_size += 1 * this->e_xingchenxcguizhen_list_size();
  for (int i = 0; i < this->e_xingchenxcguizhen_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxcguizhen_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXcguizhen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXcguizhen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXcguizhen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXcguizhen::MergeFrom(const Sheet_XingchenXcguizhen& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxcguizhen_list_.MergeFrom(from.e_xingchenxcguizhen_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXcguizhen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXcguizhen::CopyFrom(const Sheet_XingchenXcguizhen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXcguizhen::IsInitialized() const {

  return true;
}

void Sheet_XingchenXcguizhen::Swap(Sheet_XingchenXcguizhen* other) {
  if (other != this) {
    e_xingchenxcguizhen_list_.Swap(&other->e_xingchenxcguizhen_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXcguizhen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXcguizhen_descriptor_;
  metadata.reflection = Sheet_XingchenXcguizhen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXingjunActDesc::kMIDFieldNumber;
const int E_XingchenXingjunActDesc::kMNumFieldNumber;
#endif  // !_MSC_VER

E_XingchenXingjunActDesc::E_XingchenXingjunActDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXingjunActDesc::InitAsDefaultInstance() {
}

E_XingchenXingjunActDesc::E_XingchenXingjunActDesc(const E_XingchenXingjunActDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXingjunActDesc::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXingjunActDesc::~E_XingchenXingjunActDesc() {
  SharedDtor();
}

void E_XingchenXingjunActDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXingjunActDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXingjunActDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXingjunActDesc_descriptor_;
}

const E_XingchenXingjunActDesc& E_XingchenXingjunActDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXingjunActDesc* E_XingchenXingjunActDesc::default_instance_ = NULL;

E_XingchenXingjunActDesc* E_XingchenXingjunActDesc::New() const {
  return new E_XingchenXingjunActDesc;
}

void E_XingchenXingjunActDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXingjunActDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Num;
        break;
      }

      // optional int32 m_Num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXingjunActDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_Num = 2;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXingjunActDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_Num = 2;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXingjunActDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_Num = 2;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXingjunActDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXingjunActDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXingjunActDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXingjunActDesc::MergeFrom(const E_XingchenXingjunActDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXingjunActDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXingjunActDesc::CopyFrom(const E_XingchenXingjunActDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXingjunActDesc::IsInitialized() const {

  return true;
}

void E_XingchenXingjunActDesc::Swap(E_XingchenXingjunActDesc* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_num_, other->m_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXingjunActDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXingjunActDesc_descriptor_;
  metadata.reflection = E_XingchenXingjunActDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXingjun::kMIDFieldNumber;
const int E_XingchenXingjun::kMXSTypeFieldNumber;
const int E_XingchenXingjun::kMXJQualityFieldNumber;
const int E_XingchenXingjun::kMActFieldNumber;
#endif  // !_MSC_VER

E_XingchenXingjun::E_XingchenXingjun()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXingjun::InitAsDefaultInstance() {
}

E_XingchenXingjun::E_XingchenXingjun(const E_XingchenXingjun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXingjun::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_xstype_ = 0;
  m_xjquality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXingjun::~E_XingchenXingjun() {
  SharedDtor();
}

void E_XingchenXingjun::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXingjun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXingjun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXingjun_descriptor_;
}

const E_XingchenXingjun& E_XingchenXingjun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXingjun* E_XingchenXingjun::default_instance_ = NULL;

E_XingchenXingjun* E_XingchenXingjun::New() const {
  return new E_XingchenXingjun;
}

void E_XingchenXingjun::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_xstype_ = 0;
    m_xjquality_ = 0;
  }
  m_act_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXingjun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_XSType;
        break;
      }

      // optional int32 m_XSType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_XSType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xstype_)));
          set_has_m_xstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_XJQuality;
        break;
      }

      // optional int32 m_XJQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_XJQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xjquality_)));
          set_has_m_xjquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_Act;
        break;
      }

      // repeated .proto_ff.E_XingchenXingjunActDesc m_Act = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Act:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_act()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_Act;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXingjun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_XSType = 2;
  if (has_m_xstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_xstype(), output);
  }

  // optional int32 m_XJQuality = 3;
  if (has_m_xjquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_xjquality(), output);
  }

  // repeated .proto_ff.E_XingchenXingjunActDesc m_Act = 4;
  for (int i = 0; i < this->m_act_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_act(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXingjun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_XSType = 2;
  if (has_m_xstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_xstype(), target);
  }

  // optional int32 m_XJQuality = 3;
  if (has_m_xjquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_xjquality(), target);
  }

  // repeated .proto_ff.E_XingchenXingjunActDesc m_Act = 4;
  for (int i = 0; i < this->m_act_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_act(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXingjun::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_XSType = 2;
    if (has_m_xstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xstype());
    }

    // optional int32 m_XJQuality = 3;
    if (has_m_xjquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xjquality());
    }

  }
  // repeated .proto_ff.E_XingchenXingjunActDesc m_Act = 4;
  total_size += 1 * this->m_act_size();
  for (int i = 0; i < this->m_act_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_act(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXingjun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXingjun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXingjun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXingjun::MergeFrom(const E_XingchenXingjun& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_act_.MergeFrom(from.m_act_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_xstype()) {
      set_m_xstype(from.m_xstype());
    }
    if (from.has_m_xjquality()) {
      set_m_xjquality(from.m_xjquality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXingjun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXingjun::CopyFrom(const E_XingchenXingjun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXingjun::IsInitialized() const {

  return true;
}

void E_XingchenXingjun::Swap(E_XingchenXingjun* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_xstype_, other->m_xstype_);
    std::swap(m_xjquality_, other->m_xjquality_);
    m_act_.Swap(&other->m_act_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXingjun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXingjun_descriptor_;
  metadata.reflection = E_XingchenXingjun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXingjun::kEXingchenXingjunListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXingjun::Sheet_XingchenXingjun()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXingjun::InitAsDefaultInstance() {
}

Sheet_XingchenXingjun::Sheet_XingchenXingjun(const Sheet_XingchenXingjun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXingjun::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXingjun::~Sheet_XingchenXingjun() {
  SharedDtor();
}

void Sheet_XingchenXingjun::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXingjun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXingjun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXingjun_descriptor_;
}

const Sheet_XingchenXingjun& Sheet_XingchenXingjun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXingjun* Sheet_XingchenXingjun::default_instance_ = NULL;

Sheet_XingchenXingjun* Sheet_XingchenXingjun::New() const {
  return new Sheet_XingchenXingjun;
}

void Sheet_XingchenXingjun::Clear() {
  e_xingchenxingjun_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXingjun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXingjun E_XingchenXingjun_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXingjun_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxingjun_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXingjun_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXingjun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXingjun E_XingchenXingjun_List = 1;
  for (int i = 0; i < this->e_xingchenxingjun_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxingjun_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXingjun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXingjun E_XingchenXingjun_List = 1;
  for (int i = 0; i < this->e_xingchenxingjun_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxingjun_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXingjun::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXingjun E_XingchenXingjun_List = 1;
  total_size += 1 * this->e_xingchenxingjun_list_size();
  for (int i = 0; i < this->e_xingchenxingjun_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxingjun_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXingjun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXingjun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXingjun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXingjun::MergeFrom(const Sheet_XingchenXingjun& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxingjun_list_.MergeFrom(from.e_xingchenxingjun_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXingjun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXingjun::CopyFrom(const Sheet_XingchenXingjun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXingjun::IsInitialized() const {

  return true;
}

void Sheet_XingchenXingjun::Swap(Sheet_XingchenXingjun* other) {
  if (other != this) {
    e_xingchenxingjun_list_.Swap(&other->e_xingchenxingjun_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXingjun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXingjun_descriptor_;
  metadata.reflection = Sheet_XingchenXingjun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXjattXjDesc::kMValueFieldNumber;
const int E_XingchenXjattXjDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_XingchenXjattXjDesc::E_XingchenXjattXjDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXjattXjDesc::InitAsDefaultInstance() {
}

E_XingchenXjattXjDesc::E_XingchenXjattXjDesc(const E_XingchenXjattXjDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXjattXjDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXjattXjDesc::~E_XingchenXjattXjDesc() {
  SharedDtor();
}

void E_XingchenXjattXjDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXjattXjDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXjattXjDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXjattXjDesc_descriptor_;
}

const E_XingchenXjattXjDesc& E_XingchenXjattXjDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXjattXjDesc* E_XingchenXjattXjDesc::default_instance_ = NULL;

E_XingchenXjattXjDesc* E_XingchenXjattXjDesc::New() const {
  return new E_XingchenXjattXjDesc;
}

void E_XingchenXjattXjDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXjattXjDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXjattXjDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXjattXjDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXjattXjDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXjattXjDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXjattXjDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXjattXjDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXjattXjDesc::MergeFrom(const E_XingchenXjattXjDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXjattXjDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXjattXjDesc::CopyFrom(const E_XingchenXjattXjDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXjattXjDesc::IsInitialized() const {

  return true;
}

void E_XingchenXjattXjDesc::Swap(E_XingchenXjattXjDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXjattXjDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXjattXjDesc_descriptor_;
  metadata.reflection = E_XingchenXjattXjDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXjatt::kMAttIdFieldNumber;
const int E_XingchenXjatt::kMXJFieldNumber;
#endif  // !_MSC_VER

E_XingchenXjatt::E_XingchenXjatt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXjatt::InitAsDefaultInstance() {
}

E_XingchenXjatt::E_XingchenXjatt(const E_XingchenXjatt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXjatt::SharedCtor() {
  _cached_size_ = 0;
  m_attid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXjatt::~E_XingchenXjatt() {
  SharedDtor();
}

void E_XingchenXjatt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXjatt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXjatt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXjatt_descriptor_;
}

const E_XingchenXjatt& E_XingchenXjatt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXjatt* E_XingchenXjatt::default_instance_ = NULL;

E_XingchenXjatt* E_XingchenXjatt::New() const {
  return new E_XingchenXjatt;
}

void E_XingchenXjatt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_attid_ = GOOGLE_LONGLONG(0);
  }
  m_xj_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXjatt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_AttId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_attid_)));
          set_has_m_attid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_XJ;
        break;
      }

      // repeated .proto_ff.E_XingchenXjattXjDesc m_XJ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_XJ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_xj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_XJ;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXjatt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_AttId = 1;
  if (has_m_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_attid(), output);
  }

  // repeated .proto_ff.E_XingchenXjattXjDesc m_XJ = 2;
  for (int i = 0; i < this->m_xj_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_xj(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXjatt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_AttId = 1;
  if (has_m_attid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_attid(), target);
  }

  // repeated .proto_ff.E_XingchenXjattXjDesc m_XJ = 2;
  for (int i = 0; i < this->m_xj_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_xj(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXjatt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_AttId = 1;
    if (has_m_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_attid());
    }

  }
  // repeated .proto_ff.E_XingchenXjattXjDesc m_XJ = 2;
  total_size += 1 * this->m_xj_size();
  for (int i = 0; i < this->m_xj_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_xj(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXjatt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXjatt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXjatt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXjatt::MergeFrom(const E_XingchenXjatt& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_xj_.MergeFrom(from.m_xj_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_attid()) {
      set_m_attid(from.m_attid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXjatt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXjatt::CopyFrom(const E_XingchenXjatt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXjatt::IsInitialized() const {

  return true;
}

void E_XingchenXjatt::Swap(E_XingchenXjatt* other) {
  if (other != this) {
    std::swap(m_attid_, other->m_attid_);
    m_xj_.Swap(&other->m_xj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXjatt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXjatt_descriptor_;
  metadata.reflection = E_XingchenXjatt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXjatt::kEXingchenXjattListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXjatt::Sheet_XingchenXjatt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXjatt::InitAsDefaultInstance() {
}

Sheet_XingchenXjatt::Sheet_XingchenXjatt(const Sheet_XingchenXjatt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXjatt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXjatt::~Sheet_XingchenXjatt() {
  SharedDtor();
}

void Sheet_XingchenXjatt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXjatt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXjatt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXjatt_descriptor_;
}

const Sheet_XingchenXjatt& Sheet_XingchenXjatt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXjatt* Sheet_XingchenXjatt::default_instance_ = NULL;

Sheet_XingchenXjatt* Sheet_XingchenXjatt::New() const {
  return new Sheet_XingchenXjatt;
}

void Sheet_XingchenXjatt::Clear() {
  e_xingchenxjatt_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXjatt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXjatt E_XingchenXjatt_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXjatt_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxjatt_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXjatt_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXjatt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXjatt E_XingchenXjatt_List = 1;
  for (int i = 0; i < this->e_xingchenxjatt_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxjatt_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXjatt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXjatt E_XingchenXjatt_List = 1;
  for (int i = 0; i < this->e_xingchenxjatt_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxjatt_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXjatt::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXjatt E_XingchenXjatt_List = 1;
  total_size += 1 * this->e_xingchenxjatt_list_size();
  for (int i = 0; i < this->e_xingchenxjatt_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxjatt_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXjatt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXjatt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXjatt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXjatt::MergeFrom(const Sheet_XingchenXjatt& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxjatt_list_.MergeFrom(from.e_xingchenxjatt_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXjatt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXjatt::CopyFrom(const Sheet_XingchenXjatt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXjatt::IsInitialized() const {

  return true;
}

void Sheet_XingchenXjatt::Swap(Sheet_XingchenXjatt* other) {
  if (other != this) {
    e_xingchenxjatt_list_.Swap(&other->e_xingchenxjatt_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXjatt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXjatt_descriptor_;
  metadata.reflection = Sheet_XingchenXjatt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXingji::kMXJIdFieldNumber;
const int E_XingchenXingji::kMXJClassFieldNumber;
const int E_XingchenXingji::kMXJSkillFieldNumber;
const int E_XingchenXingji::kMSkillIdFieldNumber;
const int E_XingchenXingji::kMSkillMaxFieldNumber;
const int E_XingchenXingji::kMUnlockFieldNumber;
const int E_XingchenXingji::kMUnlockLVFieldNumber;
#endif  // !_MSC_VER

E_XingchenXingji::E_XingchenXingji()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXingji::InitAsDefaultInstance() {
}

E_XingchenXingji::E_XingchenXingji(const E_XingchenXingji& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXingji::SharedCtor() {
  _cached_size_ = 0;
  m_xjid_ = 0;
  m_xjclass_ = 0;
  m_xjskill_ = 0;
  m_skillid_ = 0;
  m_skillmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXingji::~E_XingchenXingji() {
  SharedDtor();
}

void E_XingchenXingji::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXingji::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXingji::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXingji_descriptor_;
}

const E_XingchenXingji& E_XingchenXingji::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXingji* E_XingchenXingji::default_instance_ = NULL;

E_XingchenXingji* E_XingchenXingji::New() const {
  return new E_XingchenXingji;
}

void E_XingchenXingji::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_xjid_ = 0;
    m_xjclass_ = 0;
    m_xjskill_ = 0;
    m_skillid_ = 0;
    m_skillmax_ = 0;
  }
  m_unlock_.Clear();
  m_unlocklv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXingji::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_XJId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xjid_)));
          set_has_m_xjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_XJClass;
        break;
      }

      // optional int32 m_XJClass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_XJClass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xjclass_)));
          set_has_m_xjclass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_XJSkill;
        break;
      }

      // optional int32 m_XJSkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_XJSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xjskill_)));
          set_has_m_xjskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_SkillId;
        break;
      }

      // optional int32 m_SkillId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_SkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_SkillMax;
        break;
      }

      // optional int32 m_SkillMax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_SkillMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillmax_)));
          set_has_m_skillmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_Unlock;
        break;
      }

      // repeated int32 m_Unlock = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_m_unlock())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_unlock())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_Unlock;
        if (input->ExpectTag(56)) goto parse_m_UnlockLV;
        break;
      }

      // repeated int32 m_UnlockLV = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_UnlockLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_m_unlocklv())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_unlocklv())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_UnlockLV;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXingji::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_XJId = 1;
  if (has_m_xjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_xjid(), output);
  }

  // optional int32 m_XJClass = 2;
  if (has_m_xjclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_xjclass(), output);
  }

  // optional int32 m_XJSkill = 3;
  if (has_m_xjskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_xjskill(), output);
  }

  // optional int32 m_SkillId = 4;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_skillid(), output);
  }

  // optional int32 m_SkillMax = 5;
  if (has_m_skillmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_skillmax(), output);
  }

  // repeated int32 m_Unlock = 6;
  for (int i = 0; i < this->m_unlock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->m_unlock(i), output);
  }

  // repeated int32 m_UnlockLV = 7;
  for (int i = 0; i < this->m_unlocklv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->m_unlocklv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXingji::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_XJId = 1;
  if (has_m_xjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_xjid(), target);
  }

  // optional int32 m_XJClass = 2;
  if (has_m_xjclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_xjclass(), target);
  }

  // optional int32 m_XJSkill = 3;
  if (has_m_xjskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_xjskill(), target);
  }

  // optional int32 m_SkillId = 4;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_skillid(), target);
  }

  // optional int32 m_SkillMax = 5;
  if (has_m_skillmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_skillmax(), target);
  }

  // repeated int32 m_Unlock = 6;
  for (int i = 0; i < this->m_unlock_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->m_unlock(i), target);
  }

  // repeated int32 m_UnlockLV = 7;
  for (int i = 0; i < this->m_unlocklv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->m_unlocklv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXingji::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_XJId = 1;
    if (has_m_xjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xjid());
    }

    // optional int32 m_XJClass = 2;
    if (has_m_xjclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xjclass());
    }

    // optional int32 m_XJSkill = 3;
    if (has_m_xjskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xjskill());
    }

    // optional int32 m_SkillId = 4;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_SkillMax = 5;
    if (has_m_skillmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillmax());
    }

  }
  // repeated int32 m_Unlock = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_unlock_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_unlock(i));
    }
    total_size += 1 * this->m_unlock_size() + data_size;
  }

  // repeated int32 m_UnlockLV = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_unlocklv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_unlocklv(i));
    }
    total_size += 1 * this->m_unlocklv_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXingji::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXingji* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXingji*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXingji::MergeFrom(const E_XingchenXingji& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_unlock_.MergeFrom(from.m_unlock_);
  m_unlocklv_.MergeFrom(from.m_unlocklv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_xjid()) {
      set_m_xjid(from.m_xjid());
    }
    if (from.has_m_xjclass()) {
      set_m_xjclass(from.m_xjclass());
    }
    if (from.has_m_xjskill()) {
      set_m_xjskill(from.m_xjskill());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_skillmax()) {
      set_m_skillmax(from.m_skillmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXingji::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXingji::CopyFrom(const E_XingchenXingji& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXingji::IsInitialized() const {

  return true;
}

void E_XingchenXingji::Swap(E_XingchenXingji* other) {
  if (other != this) {
    std::swap(m_xjid_, other->m_xjid_);
    std::swap(m_xjclass_, other->m_xjclass_);
    std::swap(m_xjskill_, other->m_xjskill_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_skillmax_, other->m_skillmax_);
    m_unlock_.Swap(&other->m_unlock_);
    m_unlocklv_.Swap(&other->m_unlocklv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXingji::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXingji_descriptor_;
  metadata.reflection = E_XingchenXingji_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXingji::kEXingchenXingjiListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXingji::Sheet_XingchenXingji()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXingji::InitAsDefaultInstance() {
}

Sheet_XingchenXingji::Sheet_XingchenXingji(const Sheet_XingchenXingji& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXingji::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXingji::~Sheet_XingchenXingji() {
  SharedDtor();
}

void Sheet_XingchenXingji::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXingji::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXingji::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXingji_descriptor_;
}

const Sheet_XingchenXingji& Sheet_XingchenXingji::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXingji* Sheet_XingchenXingji::default_instance_ = NULL;

Sheet_XingchenXingji* Sheet_XingchenXingji::New() const {
  return new Sheet_XingchenXingji;
}

void Sheet_XingchenXingji::Clear() {
  e_xingchenxingji_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXingji::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXingji E_XingchenXingji_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXingji_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxingji_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXingji_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXingji::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXingji E_XingchenXingji_List = 1;
  for (int i = 0; i < this->e_xingchenxingji_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxingji_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXingji::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXingji E_XingchenXingji_List = 1;
  for (int i = 0; i < this->e_xingchenxingji_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxingji_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXingji::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXingji E_XingchenXingji_List = 1;
  total_size += 1 * this->e_xingchenxingji_list_size();
  for (int i = 0; i < this->e_xingchenxingji_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxingji_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXingji::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXingji* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXingji*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXingji::MergeFrom(const Sheet_XingchenXingji& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxingji_list_.MergeFrom(from.e_xingchenxingji_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXingji::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXingji::CopyFrom(const Sheet_XingchenXingji& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXingji::IsInitialized() const {

  return true;
}

void Sheet_XingchenXingji::Swap(Sheet_XingchenXingji* other) {
  if (other != this) {
    e_xingchenxingji_list_.Swap(&other->e_xingchenxingji_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXingji::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXingji_descriptor_;
  metadata.reflection = Sheet_XingchenXingji_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXjcw::kMXjSlotFieldNumber;
const int E_XingchenXjcw::kMUnlockFieldNumber;
const int E_XingchenXjcw::kMNumFieldNumber;
#endif  // !_MSC_VER

E_XingchenXjcw::E_XingchenXjcw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXjcw::InitAsDefaultInstance() {
}

E_XingchenXjcw::E_XingchenXjcw(const E_XingchenXjcw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXjcw::SharedCtor() {
  _cached_size_ = 0;
  m_xjslot_ = 0;
  m_unlock_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXjcw::~E_XingchenXjcw() {
  SharedDtor();
}

void E_XingchenXjcw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXjcw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXjcw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXjcw_descriptor_;
}

const E_XingchenXjcw& E_XingchenXjcw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXjcw* E_XingchenXjcw::default_instance_ = NULL;

E_XingchenXjcw* E_XingchenXjcw::New() const {
  return new E_XingchenXjcw;
}

void E_XingchenXjcw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_xjslot_ = 0;
    m_unlock_ = 0;
    m_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXjcw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_XjSlot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xjslot_)));
          set_has_m_xjslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Unlock;
        break;
      }

      // optional int32 m_Unlock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_unlock_)));
          set_has_m_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_Num;
        break;
      }

      // optional int32 m_Num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXjcw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_XjSlot = 1;
  if (has_m_xjslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_xjslot(), output);
  }

  // optional int32 m_Unlock = 2;
  if (has_m_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_unlock(), output);
  }

  // optional int32 m_Num = 3;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXjcw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_XjSlot = 1;
  if (has_m_xjslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_xjslot(), target);
  }

  // optional int32 m_Unlock = 2;
  if (has_m_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_unlock(), target);
  }

  // optional int32 m_Num = 3;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXjcw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_XjSlot = 1;
    if (has_m_xjslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xjslot());
    }

    // optional int32 m_Unlock = 2;
    if (has_m_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_unlock());
    }

    // optional int32 m_Num = 3;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXjcw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXjcw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXjcw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXjcw::MergeFrom(const E_XingchenXjcw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_xjslot()) {
      set_m_xjslot(from.m_xjslot());
    }
    if (from.has_m_unlock()) {
      set_m_unlock(from.m_unlock());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXjcw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXjcw::CopyFrom(const E_XingchenXjcw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXjcw::IsInitialized() const {

  return true;
}

void E_XingchenXjcw::Swap(E_XingchenXjcw* other) {
  if (other != this) {
    std::swap(m_xjslot_, other->m_xjslot_);
    std::swap(m_unlock_, other->m_unlock_);
    std::swap(m_num_, other->m_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXjcw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXjcw_descriptor_;
  metadata.reflection = E_XingchenXjcw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXjcw::kEXingchenXjcwListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXjcw::Sheet_XingchenXjcw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXjcw::InitAsDefaultInstance() {
}

Sheet_XingchenXjcw::Sheet_XingchenXjcw(const Sheet_XingchenXjcw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXjcw::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXjcw::~Sheet_XingchenXjcw() {
  SharedDtor();
}

void Sheet_XingchenXjcw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXjcw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXjcw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXjcw_descriptor_;
}

const Sheet_XingchenXjcw& Sheet_XingchenXjcw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXjcw* Sheet_XingchenXjcw::default_instance_ = NULL;

Sheet_XingchenXjcw* Sheet_XingchenXjcw::New() const {
  return new Sheet_XingchenXjcw;
}

void Sheet_XingchenXjcw::Clear() {
  e_xingchenxjcw_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXjcw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXjcw E_XingchenXjcw_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXjcw_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxjcw_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXjcw_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXjcw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXjcw E_XingchenXjcw_List = 1;
  for (int i = 0; i < this->e_xingchenxjcw_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxjcw_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXjcw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXjcw E_XingchenXjcw_List = 1;
  for (int i = 0; i < this->e_xingchenxjcw_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxjcw_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXjcw::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXjcw E_XingchenXjcw_List = 1;
  total_size += 1 * this->e_xingchenxjcw_list_size();
  for (int i = 0; i < this->e_xingchenxjcw_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxjcw_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXjcw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXjcw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXjcw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXjcw::MergeFrom(const Sheet_XingchenXjcw& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxjcw_list_.MergeFrom(from.e_xingchenxjcw_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXjcw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXjcw::CopyFrom(const Sheet_XingchenXjcw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXjcw::IsInitialized() const {

  return true;
}

void Sheet_XingchenXjcw::Swap(Sheet_XingchenXjcw* other) {
  if (other != this) {
    e_xingchenxjcw_list_.Swap(&other->e_xingchenxjcw_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXjcw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXjcw_descriptor_;
  metadata.reflection = Sheet_XingchenXjcw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenXjlvexp::kMLvFieldNumber;
const int E_XingchenXjlvexp::kMExpFieldNumber;
const int E_XingchenXjlvexp::kMTimeFieldNumber;
#endif  // !_MSC_VER

E_XingchenXjlvexp::E_XingchenXjlvexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenXjlvexp::InitAsDefaultInstance() {
}

E_XingchenXjlvexp::E_XingchenXjlvexp(const E_XingchenXjlvexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenXjlvexp::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_exp_ = 0;
  m_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenXjlvexp::~E_XingchenXjlvexp() {
  SharedDtor();
}

void E_XingchenXjlvexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenXjlvexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenXjlvexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenXjlvexp_descriptor_;
}

const E_XingchenXjlvexp& E_XingchenXjlvexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenXjlvexp* E_XingchenXjlvexp::default_instance_ = NULL;

E_XingchenXjlvexp* E_XingchenXjlvexp::New() const {
  return new E_XingchenXjlvexp;
}

void E_XingchenXjlvexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_exp_ = 0;
    m_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenXjlvexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_time;
        break;
      }

      // optional int32 m_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenXjlvexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_exp(), output);
  }

  // optional int32 m_time = 3;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenXjlvexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_exp(), target);
  }

  // optional int32 m_time = 3;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenXjlvexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int32 m_time = 3;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenXjlvexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenXjlvexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenXjlvexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenXjlvexp::MergeFrom(const E_XingchenXjlvexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenXjlvexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenXjlvexp::CopyFrom(const E_XingchenXjlvexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenXjlvexp::IsInitialized() const {

  return true;
}

void E_XingchenXjlvexp::Swap(E_XingchenXjlvexp* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_time_, other->m_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenXjlvexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenXjlvexp_descriptor_;
  metadata.reflection = E_XingchenXjlvexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenXjlvexp::kEXingchenXjlvexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenXjlvexp::Sheet_XingchenXjlvexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenXjlvexp::InitAsDefaultInstance() {
}

Sheet_XingchenXjlvexp::Sheet_XingchenXjlvexp(const Sheet_XingchenXjlvexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenXjlvexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenXjlvexp::~Sheet_XingchenXjlvexp() {
  SharedDtor();
}

void Sheet_XingchenXjlvexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenXjlvexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenXjlvexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenXjlvexp_descriptor_;
}

const Sheet_XingchenXjlvexp& Sheet_XingchenXjlvexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenXjlvexp* Sheet_XingchenXjlvexp::default_instance_ = NULL;

Sheet_XingchenXjlvexp* Sheet_XingchenXjlvexp::New() const {
  return new Sheet_XingchenXjlvexp;
}

void Sheet_XingchenXjlvexp::Clear() {
  e_xingchenxjlvexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenXjlvexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenXjlvexp E_XingchenXjlvexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenXjlvexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenxjlvexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenXjlvexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenXjlvexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenXjlvexp E_XingchenXjlvexp_List = 1;
  for (int i = 0; i < this->e_xingchenxjlvexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenxjlvexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenXjlvexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenXjlvexp E_XingchenXjlvexp_List = 1;
  for (int i = 0; i < this->e_xingchenxjlvexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenxjlvexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenXjlvexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenXjlvexp E_XingchenXjlvexp_List = 1;
  total_size += 1 * this->e_xingchenxjlvexp_list_size();
  for (int i = 0; i < this->e_xingchenxjlvexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenxjlvexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenXjlvexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenXjlvexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenXjlvexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenXjlvexp::MergeFrom(const Sheet_XingchenXjlvexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenxjlvexp_list_.MergeFrom(from.e_xingchenxjlvexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenXjlvexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenXjlvexp::CopyFrom(const Sheet_XingchenXjlvexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenXjlvexp::IsInitialized() const {

  return true;
}

void Sheet_XingchenXjlvexp::Swap(Sheet_XingchenXjlvexp* other) {
  if (other != this) {
    e_xingchenxjlvexp_list_.Swap(&other->e_xingchenxjlvexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenXjlvexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenXjlvexp_descriptor_;
  metadata.reflection = Sheet_XingchenXjlvexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XingchenZbshop::kMShopIdFieldNumber;
const int E_XingchenZbshop::kMShopItemFieldNumber;
const int E_XingchenZbshop::kMShopQuotaFieldNumber;
const int E_XingchenZbshop::kMShopNumFieldNumber;
const int E_XingchenZbshop::kMBuyConsumeFieldNumber;
const int E_XingchenZbshop::kMBuyNumFieldNumber;
#endif  // !_MSC_VER

E_XingchenZbshop::E_XingchenZbshop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XingchenZbshop::InitAsDefaultInstance() {
}

E_XingchenZbshop::E_XingchenZbshop(const E_XingchenZbshop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XingchenZbshop::SharedCtor() {
  _cached_size_ = 0;
  m_shopid_ = 0;
  m_shopitem_ = 0;
  m_shopquota_ = 0;
  m_shopnum_ = 0;
  m_buyconsume_ = 0;
  m_buynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XingchenZbshop::~E_XingchenZbshop() {
  SharedDtor();
}

void E_XingchenZbshop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XingchenZbshop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XingchenZbshop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XingchenZbshop_descriptor_;
}

const E_XingchenZbshop& E_XingchenZbshop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

E_XingchenZbshop* E_XingchenZbshop::default_instance_ = NULL;

E_XingchenZbshop* E_XingchenZbshop::New() const {
  return new E_XingchenZbshop;
}

void E_XingchenZbshop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_shopid_ = 0;
    m_shopitem_ = 0;
    m_shopquota_ = 0;
    m_shopnum_ = 0;
    m_buyconsume_ = 0;
    m_buynum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XingchenZbshop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_ShopId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shopid_)));
          set_has_m_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_ShopItem;
        break;
      }

      // optional int32 m_ShopItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ShopItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shopitem_)));
          set_has_m_shopitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_ShopQuota;
        break;
      }

      // optional int32 m_ShopQuota = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ShopQuota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shopquota_)));
          set_has_m_shopquota();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_ShopNum;
        break;
      }

      // optional int32 m_ShopNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ShopNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shopnum_)));
          set_has_m_shopnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_BuyConsume;
        break;
      }

      // optional int32 m_BuyConsume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BuyConsume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buyconsume_)));
          set_has_m_buyconsume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_BuyNum;
        break;
      }

      // optional int32 m_BuyNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buynum_)));
          set_has_m_buynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XingchenZbshop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_ShopId = 1;
  if (has_m_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_shopid(), output);
  }

  // optional int32 m_ShopItem = 2;
  if (has_m_shopitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_shopitem(), output);
  }

  // optional int32 m_ShopQuota = 3;
  if (has_m_shopquota()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_shopquota(), output);
  }

  // optional int32 m_ShopNum = 4;
  if (has_m_shopnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_shopnum(), output);
  }

  // optional int32 m_BuyConsume = 5;
  if (has_m_buyconsume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_buyconsume(), output);
  }

  // optional int32 m_BuyNum = 6;
  if (has_m_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XingchenZbshop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_ShopId = 1;
  if (has_m_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_shopid(), target);
  }

  // optional int32 m_ShopItem = 2;
  if (has_m_shopitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_shopitem(), target);
  }

  // optional int32 m_ShopQuota = 3;
  if (has_m_shopquota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_shopquota(), target);
  }

  // optional int32 m_ShopNum = 4;
  if (has_m_shopnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_shopnum(), target);
  }

  // optional int32 m_BuyConsume = 5;
  if (has_m_buyconsume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_buyconsume(), target);
  }

  // optional int32 m_BuyNum = 6;
  if (has_m_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XingchenZbshop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_ShopId = 1;
    if (has_m_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shopid());
    }

    // optional int32 m_ShopItem = 2;
    if (has_m_shopitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shopitem());
    }

    // optional int32 m_ShopQuota = 3;
    if (has_m_shopquota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shopquota());
    }

    // optional int32 m_ShopNum = 4;
    if (has_m_shopnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shopnum());
    }

    // optional int32 m_BuyConsume = 5;
    if (has_m_buyconsume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buyconsume());
    }

    // optional int32 m_BuyNum = 6;
    if (has_m_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XingchenZbshop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XingchenZbshop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XingchenZbshop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XingchenZbshop::MergeFrom(const E_XingchenZbshop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_shopid()) {
      set_m_shopid(from.m_shopid());
    }
    if (from.has_m_shopitem()) {
      set_m_shopitem(from.m_shopitem());
    }
    if (from.has_m_shopquota()) {
      set_m_shopquota(from.m_shopquota());
    }
    if (from.has_m_shopnum()) {
      set_m_shopnum(from.m_shopnum());
    }
    if (from.has_m_buyconsume()) {
      set_m_buyconsume(from.m_buyconsume());
    }
    if (from.has_m_buynum()) {
      set_m_buynum(from.m_buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XingchenZbshop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XingchenZbshop::CopyFrom(const E_XingchenZbshop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XingchenZbshop::IsInitialized() const {

  return true;
}

void E_XingchenZbshop::Swap(E_XingchenZbshop* other) {
  if (other != this) {
    std::swap(m_shopid_, other->m_shopid_);
    std::swap(m_shopitem_, other->m_shopitem_);
    std::swap(m_shopquota_, other->m_shopquota_);
    std::swap(m_shopnum_, other->m_shopnum_);
    std::swap(m_buyconsume_, other->m_buyconsume_);
    std::swap(m_buynum_, other->m_buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XingchenZbshop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XingchenZbshop_descriptor_;
  metadata.reflection = E_XingchenZbshop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XingchenZbshop::kEXingchenZbshopListFieldNumber;
#endif  // !_MSC_VER

Sheet_XingchenZbshop::Sheet_XingchenZbshop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XingchenZbshop::InitAsDefaultInstance() {
}

Sheet_XingchenZbshop::Sheet_XingchenZbshop(const Sheet_XingchenZbshop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XingchenZbshop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XingchenZbshop::~Sheet_XingchenZbshop() {
  SharedDtor();
}

void Sheet_XingchenZbshop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XingchenZbshop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XingchenZbshop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XingchenZbshop_descriptor_;
}

const Sheet_XingchenZbshop& Sheet_XingchenZbshop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXingchen_2eproto();
  return *default_instance_;
}

Sheet_XingchenZbshop* Sheet_XingchenZbshop::default_instance_ = NULL;

Sheet_XingchenZbshop* Sheet_XingchenZbshop::New() const {
  return new Sheet_XingchenZbshop;
}

void Sheet_XingchenZbshop::Clear() {
  e_xingchenzbshop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XingchenZbshop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XingchenZbshop E_XingchenZbshop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XingchenZbshop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xingchenzbshop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XingchenZbshop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XingchenZbshop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XingchenZbshop E_XingchenZbshop_List = 1;
  for (int i = 0; i < this->e_xingchenzbshop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xingchenzbshop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XingchenZbshop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XingchenZbshop E_XingchenZbshop_List = 1;
  for (int i = 0; i < this->e_xingchenzbshop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xingchenzbshop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XingchenZbshop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XingchenZbshop E_XingchenZbshop_List = 1;
  total_size += 1 * this->e_xingchenzbshop_list_size();
  for (int i = 0; i < this->e_xingchenzbshop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xingchenzbshop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XingchenZbshop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XingchenZbshop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XingchenZbshop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XingchenZbshop::MergeFrom(const Sheet_XingchenZbshop& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xingchenzbshop_list_.MergeFrom(from.e_xingchenzbshop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XingchenZbshop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XingchenZbshop::CopyFrom(const Sheet_XingchenZbshop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XingchenZbshop::IsInitialized() const {

  return true;
}

void Sheet_XingchenZbshop::Swap(Sheet_XingchenZbshop* other) {
  if (other != this) {
    e_xingchenzbshop_list_.Swap(&other->e_xingchenzbshop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XingchenZbshop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XingchenZbshop_descriptor_;
  metadata.reflection = Sheet_XingchenZbshop_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
