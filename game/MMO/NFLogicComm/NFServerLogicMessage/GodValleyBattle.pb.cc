// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GodValleyBattle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GodValleyBattle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* GVBEnterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBEnterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBEnterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBEnterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBSCrystalCollectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBSCrystalCollectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBCrystallSubmitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBCrystallSubmitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBExitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBExitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBDatasRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBDatasRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBRankPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBRankPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBResultBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBResultBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBM1AttrChgBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBM1AttrChgBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBM2AttrChgBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBM2AttrChgBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBM3AttrChgBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBM3AttrChgBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBSelfInfoUpdateNT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBSelfInfoUpdateNT_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBKillPlayerBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBKillPlayerBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBResPointChg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBResPointChg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBCrystalStateBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBCrystalStateBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBCrystalCollectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBCrystalCollectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBCrystalCollectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBCrystalCollectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBDailyScoreDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBDailyScoreDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBDailyScoreDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBDailyScoreDataRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GodValleyBattle_2eproto() {
  protobuf_AddDesc_GodValleyBattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GodValleyBattle.proto");
  GOOGLE_CHECK(file != NULL);
  GVBEnterReq_descriptor_ = file->message_type(0);
  static const int GVBEnterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterReq, unused_),
  };
  GVBEnterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBEnterReq_descriptor_,
      GVBEnterReq::default_instance_,
      GVBEnterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBEnterReq));
  GVBEnterRsp_descriptor_ = file->message_type(1);
  static const int GVBEnterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterRsp, result_),
  };
  GVBEnterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBEnterRsp_descriptor_,
      GVBEnterRsp::default_instance_,
      GVBEnterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBEnterRsp));
  GVBSCrystalCollectReq_descriptor_ = file->message_type(2);
  static const int GVBSCrystalCollectReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSCrystalCollectReq, number_),
  };
  GVBSCrystalCollectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBSCrystalCollectReq_descriptor_,
      GVBSCrystalCollectReq::default_instance_,
      GVBSCrystalCollectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSCrystalCollectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSCrystalCollectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBSCrystalCollectReq));
  GVBCrystallSubmitReq_descriptor_ = file->message_type(3);
  static const int GVBCrystallSubmitReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystallSubmitReq, monstereid_),
  };
  GVBCrystallSubmitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBCrystallSubmitReq_descriptor_,
      GVBCrystallSubmitReq::default_instance_,
      GVBCrystallSubmitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystallSubmitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystallSubmitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBCrystallSubmitReq));
  GVBExitReq_descriptor_ = file->message_type(4);
  static const int GVBExitReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBExitReq, unused_),
  };
  GVBExitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBExitReq_descriptor_,
      GVBExitReq::default_instance_,
      GVBExitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBExitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBExitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBExitReq));
  GVBMonster_descriptor_ = file->message_type(5);
  static const int GVBMonster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBMonster, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBMonster, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBMonster, hpmax_),
  };
  GVBMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBMonster_descriptor_,
      GVBMonster::default_instance_,
      GVBMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBMonster));
  GVBDataReq_descriptor_ = file->message_type(6);
  static const int GVBDataReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDataReq, unused_),
  };
  GVBDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBDataReq_descriptor_,
      GVBDataReq::default_instance_,
      GVBDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBDataReq));
  GVBDatasRsp_descriptor_ = file->message_type(7);
  static const int GVBDatasRsp_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, team1score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, team2score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, selfscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, selfteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, crystalstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, crystalowner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, crystalborncountdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, crystalownerteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, crystalownerprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, m2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, m3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, killscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, breakkillscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, interceptcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, crystalcount_),
  };
  GVBDatasRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBDatasRsp_descriptor_,
      GVBDatasRsp::default_instance_,
      GVBDatasRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBDatasRsp));
  GVBRankReq_descriptor_ = file->message_type(8);
  static const int GVBRankReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankReq, unused_),
  };
  GVBRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBRankReq_descriptor_,
      GVBRankReq::default_instance_,
      GVBRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBRankReq));
  GVBRankPlayerInfo_descriptor_ = file->message_type(9);
  static const int GVBRankPlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankPlayerInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankPlayerInfo, score_),
  };
  GVBRankPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBRankPlayerInfo_descriptor_,
      GVBRankPlayerInfo::default_instance_,
      GVBRankPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBRankPlayerInfo));
  GVBRankRsp_descriptor_ = file->message_type(10);
  static const int GVBRankRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankRsp, players_),
  };
  GVBRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBRankRsp_descriptor_,
      GVBRankRsp::default_instance_,
      GVBRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBRankRsp));
  GVBPlayerInfo_descriptor_ = file->message_type(11);
  static const int GVBPlayerInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, diecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, interceptcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, crystalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, team_),
  };
  GVBPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBPlayerInfo_descriptor_,
      GVBPlayerInfo::default_instance_,
      GVBPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBPlayerInfo));
  GVBResultBC_descriptor_ = file->message_type(12);
  static const int GVBResultBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResultBC, winteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResultBC, players_),
  };
  GVBResultBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBResultBC_descriptor_,
      GVBResultBC::default_instance_,
      GVBResultBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResultBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResultBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBResultBC));
  GVBM1AttrChgBC_descriptor_ = file->message_type(13);
  static const int GVBM1AttrChgBC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM1AttrChgBC, m1_),
  };
  GVBM1AttrChgBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBM1AttrChgBC_descriptor_,
      GVBM1AttrChgBC::default_instance_,
      GVBM1AttrChgBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM1AttrChgBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM1AttrChgBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBM1AttrChgBC));
  GVBM2AttrChgBC_descriptor_ = file->message_type(14);
  static const int GVBM2AttrChgBC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM2AttrChgBC, m2_),
  };
  GVBM2AttrChgBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBM2AttrChgBC_descriptor_,
      GVBM2AttrChgBC::default_instance_,
      GVBM2AttrChgBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM2AttrChgBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM2AttrChgBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBM2AttrChgBC));
  GVBM3AttrChgBC_descriptor_ = file->message_type(15);
  static const int GVBM3AttrChgBC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM3AttrChgBC, m3_),
  };
  GVBM3AttrChgBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBM3AttrChgBC_descriptor_,
      GVBM3AttrChgBC::default_instance_,
      GVBM3AttrChgBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM3AttrChgBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM3AttrChgBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBM3AttrChgBC));
  GVBSelfInfoUpdateNT_descriptor_ = file->message_type(16);
  static const int GVBSelfInfoUpdateNT_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, killscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, breakkillscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, interceptcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, crystalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, selfscore_),
  };
  GVBSelfInfoUpdateNT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBSelfInfoUpdateNT_descriptor_,
      GVBSelfInfoUpdateNT::default_instance_,
      GVBSelfInfoUpdateNT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBSelfInfoUpdateNT));
  GVBKillPlayerBC_descriptor_ = file->message_type(17);
  static const int GVBKillPlayerBC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerBC, killerteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerBC, killedteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerBC, killerprof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerBC, killedprof_),
  };
  GVBKillPlayerBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBKillPlayerBC_descriptor_,
      GVBKillPlayerBC::default_instance_,
      GVBKillPlayerBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBKillPlayerBC));
  GVBResPointChg_descriptor_ = file->message_type(18);
  static const int GVBResPointChg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResPointChg, team1score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResPointChg, team2score_),
  };
  GVBResPointChg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBResPointChg_descriptor_,
      GVBResPointChg::default_instance_,
      GVBResPointChg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResPointChg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResPointChg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBResPointChg));
  GVBCrystalStateBC_descriptor_ = file->message_type(19);
  static const int GVBCrystalStateBC_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalStateBC, crystalstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalStateBC, crystalborncountdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalStateBC, crystalowner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalStateBC, crystalownerteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalStateBC, crystalownerprofession_),
  };
  GVBCrystalStateBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBCrystalStateBC_descriptor_,
      GVBCrystalStateBC::default_instance_,
      GVBCrystalStateBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalStateBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalStateBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBCrystalStateBC));
  GVBCrystalCollectReq_descriptor_ = file->message_type(20);
  static const int GVBCrystalCollectReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalCollectReq, type_),
  };
  GVBCrystalCollectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBCrystalCollectReq_descriptor_,
      GVBCrystalCollectReq::default_instance_,
      GVBCrystalCollectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalCollectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalCollectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBCrystalCollectReq));
  GVBCrystalCollectRsp_descriptor_ = file->message_type(21);
  static const int GVBCrystalCollectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalCollectRsp, type_),
  };
  GVBCrystalCollectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBCrystalCollectRsp_descriptor_,
      GVBCrystalCollectRsp::default_instance_,
      GVBCrystalCollectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalCollectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalCollectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBCrystalCollectRsp));
  GVBDailyScoreDataReq_descriptor_ = file->message_type(22);
  static const int GVBDailyScoreDataReq_offsets_[1] = {
  };
  GVBDailyScoreDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBDailyScoreDataReq_descriptor_,
      GVBDailyScoreDataReq::default_instance_,
      GVBDailyScoreDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBDailyScoreDataReq));
  GVBDailyScoreDataRsp_descriptor_ = file->message_type(23);
  static const int GVBDailyScoreDataRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreDataRsp, rewardsstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreDataRsp, dailyscore_),
  };
  GVBDailyScoreDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBDailyScoreDataRsp_descriptor_,
      GVBDailyScoreDataRsp::default_instance_,
      GVBDailyScoreDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBDailyScoreDataRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GodValleyBattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBEnterReq_descriptor_, &GVBEnterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBEnterRsp_descriptor_, &GVBEnterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBSCrystalCollectReq_descriptor_, &GVBSCrystalCollectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBCrystallSubmitReq_descriptor_, &GVBCrystallSubmitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBExitReq_descriptor_, &GVBExitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBMonster_descriptor_, &GVBMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBDataReq_descriptor_, &GVBDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBDatasRsp_descriptor_, &GVBDatasRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBRankReq_descriptor_, &GVBRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBRankPlayerInfo_descriptor_, &GVBRankPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBRankRsp_descriptor_, &GVBRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBPlayerInfo_descriptor_, &GVBPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBResultBC_descriptor_, &GVBResultBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBM1AttrChgBC_descriptor_, &GVBM1AttrChgBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBM2AttrChgBC_descriptor_, &GVBM2AttrChgBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBM3AttrChgBC_descriptor_, &GVBM3AttrChgBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBSelfInfoUpdateNT_descriptor_, &GVBSelfInfoUpdateNT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBKillPlayerBC_descriptor_, &GVBKillPlayerBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBResPointChg_descriptor_, &GVBResPointChg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBCrystalStateBC_descriptor_, &GVBCrystalStateBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBCrystalCollectReq_descriptor_, &GVBCrystalCollectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBCrystalCollectRsp_descriptor_, &GVBCrystalCollectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBDailyScoreDataReq_descriptor_, &GVBDailyScoreDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBDailyScoreDataRsp_descriptor_, &GVBDailyScoreDataRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GodValleyBattle_2eproto() {
  delete GVBEnterReq::default_instance_;
  delete GVBEnterReq_reflection_;
  delete GVBEnterRsp::default_instance_;
  delete GVBEnterRsp_reflection_;
  delete GVBSCrystalCollectReq::default_instance_;
  delete GVBSCrystalCollectReq_reflection_;
  delete GVBCrystallSubmitReq::default_instance_;
  delete GVBCrystallSubmitReq_reflection_;
  delete GVBExitReq::default_instance_;
  delete GVBExitReq_reflection_;
  delete GVBMonster::default_instance_;
  delete GVBMonster_reflection_;
  delete GVBDataReq::default_instance_;
  delete GVBDataReq_reflection_;
  delete GVBDatasRsp::default_instance_;
  delete GVBDatasRsp_reflection_;
  delete GVBRankReq::default_instance_;
  delete GVBRankReq_reflection_;
  delete GVBRankPlayerInfo::default_instance_;
  delete GVBRankPlayerInfo_reflection_;
  delete GVBRankRsp::default_instance_;
  delete GVBRankRsp_reflection_;
  delete GVBPlayerInfo::default_instance_;
  delete GVBPlayerInfo_reflection_;
  delete GVBResultBC::default_instance_;
  delete GVBResultBC_reflection_;
  delete GVBM1AttrChgBC::default_instance_;
  delete GVBM1AttrChgBC_reflection_;
  delete GVBM2AttrChgBC::default_instance_;
  delete GVBM2AttrChgBC_reflection_;
  delete GVBM3AttrChgBC::default_instance_;
  delete GVBM3AttrChgBC_reflection_;
  delete GVBSelfInfoUpdateNT::default_instance_;
  delete GVBSelfInfoUpdateNT_reflection_;
  delete GVBKillPlayerBC::default_instance_;
  delete GVBKillPlayerBC_reflection_;
  delete GVBResPointChg::default_instance_;
  delete GVBResPointChg_reflection_;
  delete GVBCrystalStateBC::default_instance_;
  delete GVBCrystalStateBC_reflection_;
  delete GVBCrystalCollectReq::default_instance_;
  delete GVBCrystalCollectReq_reflection_;
  delete GVBCrystalCollectRsp::default_instance_;
  delete GVBCrystalCollectRsp_reflection_;
  delete GVBDailyScoreDataReq::default_instance_;
  delete GVBDailyScoreDataReq_reflection_;
  delete GVBDailyScoreDataRsp::default_instance_;
  delete GVBDailyScoreDataRsp_reflection_;
}

void protobuf_AddDesc_GodValleyBattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025GodValleyBattle.proto\022\010proto_ff\032\025yd_fi"
    "eldoptions.proto\032\022common_logic.proto\032\tCo"
    "m.proto\"\035\n\013GVBEnterReq\022\016\n\006unused\030\001 \002(\r\"\035"
    "\n\013GVBEnterRsp\022\016\n\006Result\030\001 \002(\r\"\'\n\025GVBSCry"
    "stalCollectReq\022\016\n\006number\030\001 \002(\r\"*\n\024GVBCry"
    "stallSubmitReq\022\022\n\nmonsterEid\030\001 \002(\004\"\034\n\nGV"
    "BExitReq\022\016\n\006unused\030\001 \002(\r\"5\n\nGVBMonster\022\014"
    "\n\004team\030\001 \002(\r\022\n\n\002hp\030\002 \002(\004\022\r\n\005hpmax\030\003 \002(\004\""
    "\034\n\nGVBDataReq\022\016\n\006unused\030\001 \002(\r\"\324\003\n\013GVBDat"
    "asRsp\022\r\n\005state\030\001 \002(\r\022\021\n\tcountdown\030\002 \002(\r\022"
    "\022\n\nteam1Score\030\003 \001(\r\022\022\n\nteam2Score\030\004 \001(\r\022"
    "\021\n\tselfScore\030\005 \001(\r\022\020\n\010selfTeam\030\006 \001(\r\022\024\n\014"
    "crystalState\030\007 \001(\r\022\024\n\014crystalOwner\030\010 \001(\004"
    "\022\034\n\024crystalBornCountdown\030\t \001(\r\022\030\n\020crysta"
    "lOwnerTeam\030\n \001(\r\022\036\n\026crystalOwnerProfessi"
    "on\030\013 \001(\r\022 \n\002m1\030\014 \001(\0132\024.proto_ff.GVBMonst"
    "er\022 \n\002m2\030\r \001(\0132\024.proto_ff.GVBMonster\022 \n\002"
    "m3\030\016 \001(\0132\024.proto_ff.GVBMonster\022\021\n\tkillCo"
    "unt\030\017 \001(\r\022\022\n\nkillsCount\030\020 \001(\r\022\027\n\017breakKi"
    "llsCount\030\021 \001(\r\022\026\n\016interceptCount\030\022 \001(\r\022\024"
    "\n\014crystalCount\030\023 \001(\r\"\034\n\nGVBRankReq\022\016\n\006un"
    "used\030\001 \002(\r\">\n\021GVBRankPlayerInfo\022\014\n\004rank\030"
    "\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\r\n\005score\030\003 \002(\r\":\n\nGV"
    "BRankRsp\022,\n\007players\030\001 \003(\0132\033.proto_ff.GVB"
    "RankPlayerInfo\"\215\001\n\rGVBPlayerInfo\022\r\n\005scor"
    "e\030\001 \002(\r\022\021\n\tkillCount\030\002 \002(\r\022\020\n\010dieCount\030\003"
    " \002(\r\022\026\n\016interceptCount\030\004 \002(\r\022\024\n\014crystalC"
    "ount\030\005 \002(\r\022\014\n\004name\030\006 \002(\t\022\014\n\004team\030\007 \002(\r\"H"
    "\n\013GVBResultBC\022\017\n\007winTeam\030\001 \002(\r\022(\n\007player"
    "s\030\002 \003(\0132\027.proto_ff.GVBPlayerInfo\"2\n\016GVBM"
    "1AttrChgBC\022 \n\002m1\030\001 \002(\0132\024.proto_ff.GVBMon"
    "ster\"2\n\016GVBM2AttrChgBC\022 \n\002m2\030\001 \002(\0132\024.pro"
    "to_ff.GVBMonster\"2\n\016GVBM3AttrChgBC\022 \n\002m3"
    "\030\001 \002(\0132\024.proto_ff.GVBMonster\"\226\001\n\023GVBSelf"
    "InfoUpdateNT\022\021\n\tkillCount\030\001 \001(\r\022\022\n\nkills"
    "Count\030\002 \001(\r\022\027\n\017breakKillsCount\030\003 \001(\r\022\026\n\016"
    "interceptCount\030\004 \001(\r\022\024\n\014crystalCount\030\005 \001"
    "(\r\022\021\n\tselfScore\030\006 \001(\r\"a\n\017GVBKillPlayerBC"
    "\022\022\n\nkillerTeam\030\001 \002(\r\022\022\n\nkilledTeam\030\002 \002(\r"
    "\022\022\n\nkillerProf\030\003 \002(\r\022\022\n\nkilledProf\030\004 \002(\r"
    "\"8\n\016GVBResPointChg\022\022\n\nteam1Score\030\001 \002(\r\022\022"
    "\n\nteam2Score\030\002 \002(\r\"\227\001\n\021GVBCrystalStateBC"
    "\022\024\n\014crystalState\030\001 \002(\r\022\034\n\024crystalBornCou"
    "ntdown\030\002 \002(\r\022\024\n\014crystalOwner\030\003 \001(\004\022\030\n\020cr"
    "ystalOwnerTeam\030\004 \001(\r\022\036\n\026crystalOwnerProf"
    "ession\030\005 \001(\r\"$\n\024GVBCrystalCollectReq\022\014\n\004"
    "type\030\001 \002(\r\"$\n\024GVBCrystalCollectRsp\022\014\n\004ty"
    "pe\030\001 \002(\r\"\026\n\024GVBDailyScoreDataReq\"@\n\024GVBD"
    "ailyScoreDataRsp\022\024\n\014rewardsState\030\001 \003(\r\022\022"
    "\n\ndailyScore\030\002 \002(\r", 1978);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GodValleyBattle.proto", &protobuf_RegisterTypes);
  GVBEnterReq::default_instance_ = new GVBEnterReq();
  GVBEnterRsp::default_instance_ = new GVBEnterRsp();
  GVBSCrystalCollectReq::default_instance_ = new GVBSCrystalCollectReq();
  GVBCrystallSubmitReq::default_instance_ = new GVBCrystallSubmitReq();
  GVBExitReq::default_instance_ = new GVBExitReq();
  GVBMonster::default_instance_ = new GVBMonster();
  GVBDataReq::default_instance_ = new GVBDataReq();
  GVBDatasRsp::default_instance_ = new GVBDatasRsp();
  GVBRankReq::default_instance_ = new GVBRankReq();
  GVBRankPlayerInfo::default_instance_ = new GVBRankPlayerInfo();
  GVBRankRsp::default_instance_ = new GVBRankRsp();
  GVBPlayerInfo::default_instance_ = new GVBPlayerInfo();
  GVBResultBC::default_instance_ = new GVBResultBC();
  GVBM1AttrChgBC::default_instance_ = new GVBM1AttrChgBC();
  GVBM2AttrChgBC::default_instance_ = new GVBM2AttrChgBC();
  GVBM3AttrChgBC::default_instance_ = new GVBM3AttrChgBC();
  GVBSelfInfoUpdateNT::default_instance_ = new GVBSelfInfoUpdateNT();
  GVBKillPlayerBC::default_instance_ = new GVBKillPlayerBC();
  GVBResPointChg::default_instance_ = new GVBResPointChg();
  GVBCrystalStateBC::default_instance_ = new GVBCrystalStateBC();
  GVBCrystalCollectReq::default_instance_ = new GVBCrystalCollectReq();
  GVBCrystalCollectRsp::default_instance_ = new GVBCrystalCollectRsp();
  GVBDailyScoreDataReq::default_instance_ = new GVBDailyScoreDataReq();
  GVBDailyScoreDataRsp::default_instance_ = new GVBDailyScoreDataRsp();
  GVBEnterReq::default_instance_->InitAsDefaultInstance();
  GVBEnterRsp::default_instance_->InitAsDefaultInstance();
  GVBSCrystalCollectReq::default_instance_->InitAsDefaultInstance();
  GVBCrystallSubmitReq::default_instance_->InitAsDefaultInstance();
  GVBExitReq::default_instance_->InitAsDefaultInstance();
  GVBMonster::default_instance_->InitAsDefaultInstance();
  GVBDataReq::default_instance_->InitAsDefaultInstance();
  GVBDatasRsp::default_instance_->InitAsDefaultInstance();
  GVBRankReq::default_instance_->InitAsDefaultInstance();
  GVBRankPlayerInfo::default_instance_->InitAsDefaultInstance();
  GVBRankRsp::default_instance_->InitAsDefaultInstance();
  GVBPlayerInfo::default_instance_->InitAsDefaultInstance();
  GVBResultBC::default_instance_->InitAsDefaultInstance();
  GVBM1AttrChgBC::default_instance_->InitAsDefaultInstance();
  GVBM2AttrChgBC::default_instance_->InitAsDefaultInstance();
  GVBM3AttrChgBC::default_instance_->InitAsDefaultInstance();
  GVBSelfInfoUpdateNT::default_instance_->InitAsDefaultInstance();
  GVBKillPlayerBC::default_instance_->InitAsDefaultInstance();
  GVBResPointChg::default_instance_->InitAsDefaultInstance();
  GVBCrystalStateBC::default_instance_->InitAsDefaultInstance();
  GVBCrystalCollectReq::default_instance_->InitAsDefaultInstance();
  GVBCrystalCollectRsp::default_instance_->InitAsDefaultInstance();
  GVBDailyScoreDataReq::default_instance_->InitAsDefaultInstance();
  GVBDailyScoreDataRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GodValleyBattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GodValleyBattle_2eproto {
  StaticDescriptorInitializer_GodValleyBattle_2eproto() {
    protobuf_AddDesc_GodValleyBattle_2eproto();
  }
} static_descriptor_initializer_GodValleyBattle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GVBEnterReq::kUnusedFieldNumber;
#endif  // !_MSC_VER

GVBEnterReq::GVBEnterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBEnterReq::InitAsDefaultInstance() {
}

GVBEnterReq::GVBEnterReq(const GVBEnterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBEnterReq::SharedCtor() {
  _cached_size_ = 0;
  unused_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBEnterReq::~GVBEnterReq() {
  SharedDtor();
}

void GVBEnterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBEnterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBEnterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBEnterReq_descriptor_;
}

const GVBEnterReq& GVBEnterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBEnterReq* GVBEnterReq::default_instance_ = NULL;

GVBEnterReq* GVBEnterReq::New() const {
  return new GVBEnterReq;
}

void GVBEnterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unused_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBEnterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unused = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unused_)));
          set_has_unused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBEnterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBEnterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBEnterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unused = 1;
    if (has_unused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unused());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBEnterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBEnterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBEnterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBEnterReq::MergeFrom(const GVBEnterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unused()) {
      set_unused(from.unused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBEnterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBEnterReq::CopyFrom(const GVBEnterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBEnterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBEnterReq::Swap(GVBEnterReq* other) {
  if (other != this) {
    std::swap(unused_, other->unused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBEnterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBEnterReq_descriptor_;
  metadata.reflection = GVBEnterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBEnterRsp::kResultFieldNumber;
#endif  // !_MSC_VER

GVBEnterRsp::GVBEnterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBEnterRsp::InitAsDefaultInstance() {
}

GVBEnterRsp::GVBEnterRsp(const GVBEnterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBEnterRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBEnterRsp::~GVBEnterRsp() {
  SharedDtor();
}

void GVBEnterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBEnterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBEnterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBEnterRsp_descriptor_;
}

const GVBEnterRsp& GVBEnterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBEnterRsp* GVBEnterRsp::default_instance_ = NULL;

GVBEnterRsp* GVBEnterRsp::New() const {
  return new GVBEnterRsp;
}

void GVBEnterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBEnterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBEnterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBEnterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBEnterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBEnterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBEnterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBEnterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBEnterRsp::MergeFrom(const GVBEnterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBEnterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBEnterRsp::CopyFrom(const GVBEnterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBEnterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBEnterRsp::Swap(GVBEnterRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBEnterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBEnterRsp_descriptor_;
  metadata.reflection = GVBEnterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBSCrystalCollectReq::kNumberFieldNumber;
#endif  // !_MSC_VER

GVBSCrystalCollectReq::GVBSCrystalCollectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBSCrystalCollectReq::InitAsDefaultInstance() {
}

GVBSCrystalCollectReq::GVBSCrystalCollectReq(const GVBSCrystalCollectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBSCrystalCollectReq::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBSCrystalCollectReq::~GVBSCrystalCollectReq() {
  SharedDtor();
}

void GVBSCrystalCollectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBSCrystalCollectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBSCrystalCollectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBSCrystalCollectReq_descriptor_;
}

const GVBSCrystalCollectReq& GVBSCrystalCollectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBSCrystalCollectReq* GVBSCrystalCollectReq::default_instance_ = NULL;

GVBSCrystalCollectReq* GVBSCrystalCollectReq::New() const {
  return new GVBSCrystalCollectReq;
}

void GVBSCrystalCollectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBSCrystalCollectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBSCrystalCollectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBSCrystalCollectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBSCrystalCollectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBSCrystalCollectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBSCrystalCollectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBSCrystalCollectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBSCrystalCollectReq::MergeFrom(const GVBSCrystalCollectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBSCrystalCollectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBSCrystalCollectReq::CopyFrom(const GVBSCrystalCollectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBSCrystalCollectReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBSCrystalCollectReq::Swap(GVBSCrystalCollectReq* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBSCrystalCollectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBSCrystalCollectReq_descriptor_;
  metadata.reflection = GVBSCrystalCollectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBCrystallSubmitReq::kMonsterEidFieldNumber;
#endif  // !_MSC_VER

GVBCrystallSubmitReq::GVBCrystallSubmitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBCrystallSubmitReq::InitAsDefaultInstance() {
}

GVBCrystallSubmitReq::GVBCrystallSubmitReq(const GVBCrystallSubmitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBCrystallSubmitReq::SharedCtor() {
  _cached_size_ = 0;
  monstereid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBCrystallSubmitReq::~GVBCrystallSubmitReq() {
  SharedDtor();
}

void GVBCrystallSubmitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBCrystallSubmitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBCrystallSubmitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBCrystallSubmitReq_descriptor_;
}

const GVBCrystallSubmitReq& GVBCrystallSubmitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBCrystallSubmitReq* GVBCrystallSubmitReq::default_instance_ = NULL;

GVBCrystallSubmitReq* GVBCrystallSubmitReq::New() const {
  return new GVBCrystallSubmitReq;
}

void GVBCrystallSubmitReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monstereid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBCrystallSubmitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 monsterEid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &monstereid_)));
          set_has_monstereid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBCrystallSubmitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 monsterEid = 1;
  if (has_monstereid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->monstereid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBCrystallSubmitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 monsterEid = 1;
  if (has_monstereid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->monstereid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBCrystallSubmitReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 monsterEid = 1;
    if (has_monstereid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->monstereid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBCrystallSubmitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBCrystallSubmitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBCrystallSubmitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBCrystallSubmitReq::MergeFrom(const GVBCrystallSubmitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monstereid()) {
      set_monstereid(from.monstereid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBCrystallSubmitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBCrystallSubmitReq::CopyFrom(const GVBCrystallSubmitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBCrystallSubmitReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBCrystallSubmitReq::Swap(GVBCrystallSubmitReq* other) {
  if (other != this) {
    std::swap(monstereid_, other->monstereid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBCrystallSubmitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBCrystallSubmitReq_descriptor_;
  metadata.reflection = GVBCrystallSubmitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBExitReq::kUnusedFieldNumber;
#endif  // !_MSC_VER

GVBExitReq::GVBExitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBExitReq::InitAsDefaultInstance() {
}

GVBExitReq::GVBExitReq(const GVBExitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBExitReq::SharedCtor() {
  _cached_size_ = 0;
  unused_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBExitReq::~GVBExitReq() {
  SharedDtor();
}

void GVBExitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBExitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBExitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBExitReq_descriptor_;
}

const GVBExitReq& GVBExitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBExitReq* GVBExitReq::default_instance_ = NULL;

GVBExitReq* GVBExitReq::New() const {
  return new GVBExitReq;
}

void GVBExitReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unused_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBExitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unused = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unused_)));
          set_has_unused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBExitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBExitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBExitReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unused = 1;
    if (has_unused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unused());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBExitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBExitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBExitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBExitReq::MergeFrom(const GVBExitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unused()) {
      set_unused(from.unused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBExitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBExitReq::CopyFrom(const GVBExitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBExitReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBExitReq::Swap(GVBExitReq* other) {
  if (other != this) {
    std::swap(unused_, other->unused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBExitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBExitReq_descriptor_;
  metadata.reflection = GVBExitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBMonster::kTeamFieldNumber;
const int GVBMonster::kHpFieldNumber;
const int GVBMonster::kHpmaxFieldNumber;
#endif  // !_MSC_VER

GVBMonster::GVBMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBMonster::InitAsDefaultInstance() {
}

GVBMonster::GVBMonster(const GVBMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBMonster::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0u;
  hp_ = GOOGLE_ULONGLONG(0);
  hpmax_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBMonster::~GVBMonster() {
  SharedDtor();
}

void GVBMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBMonster_descriptor_;
}

const GVBMonster& GVBMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBMonster* GVBMonster::default_instance_ = NULL;

GVBMonster* GVBMonster::New() const {
  return new GVBMonster;
}

void GVBMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0u;
    hp_ = GOOGLE_ULONGLONG(0);
    hpmax_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // required uint64 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hpmax;
        break;
      }

      // required uint64 hpmax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // required uint64 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hp(), output);
  }

  // required uint64 hpmax = 3;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hpmax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // required uint64 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hp(), target);
  }

  // required uint64 hpmax = 3;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hpmax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // required uint64 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp());
    }

    // required uint64 hpmax = 3;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hpmax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBMonster::MergeFrom(const GVBMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBMonster::CopyFrom(const GVBMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBMonster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GVBMonster::Swap(GVBMonster* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(hp_, other->hp_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBMonster_descriptor_;
  metadata.reflection = GVBMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBDataReq::kUnusedFieldNumber;
#endif  // !_MSC_VER

GVBDataReq::GVBDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBDataReq::InitAsDefaultInstance() {
}

GVBDataReq::GVBDataReq(const GVBDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBDataReq::SharedCtor() {
  _cached_size_ = 0;
  unused_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBDataReq::~GVBDataReq() {
  SharedDtor();
}

void GVBDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBDataReq_descriptor_;
}

const GVBDataReq& GVBDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBDataReq* GVBDataReq::default_instance_ = NULL;

GVBDataReq* GVBDataReq::New() const {
  return new GVBDataReq;
}

void GVBDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unused_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unused = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unused_)));
          set_has_unused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unused = 1;
    if (has_unused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unused());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBDataReq::MergeFrom(const GVBDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unused()) {
      set_unused(from.unused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBDataReq::CopyFrom(const GVBDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBDataReq::Swap(GVBDataReq* other) {
  if (other != this) {
    std::swap(unused_, other->unused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBDataReq_descriptor_;
  metadata.reflection = GVBDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBDatasRsp::kStateFieldNumber;
const int GVBDatasRsp::kCountdownFieldNumber;
const int GVBDatasRsp::kTeam1ScoreFieldNumber;
const int GVBDatasRsp::kTeam2ScoreFieldNumber;
const int GVBDatasRsp::kSelfScoreFieldNumber;
const int GVBDatasRsp::kSelfTeamFieldNumber;
const int GVBDatasRsp::kCrystalStateFieldNumber;
const int GVBDatasRsp::kCrystalOwnerFieldNumber;
const int GVBDatasRsp::kCrystalBornCountdownFieldNumber;
const int GVBDatasRsp::kCrystalOwnerTeamFieldNumber;
const int GVBDatasRsp::kCrystalOwnerProfessionFieldNumber;
const int GVBDatasRsp::kM1FieldNumber;
const int GVBDatasRsp::kM2FieldNumber;
const int GVBDatasRsp::kM3FieldNumber;
const int GVBDatasRsp::kKillCountFieldNumber;
const int GVBDatasRsp::kKillsCountFieldNumber;
const int GVBDatasRsp::kBreakKillsCountFieldNumber;
const int GVBDatasRsp::kInterceptCountFieldNumber;
const int GVBDatasRsp::kCrystalCountFieldNumber;
#endif  // !_MSC_VER

GVBDatasRsp::GVBDatasRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBDatasRsp::InitAsDefaultInstance() {
  m1_ = const_cast< ::proto_ff::GVBMonster*>(&::proto_ff::GVBMonster::default_instance());
  m2_ = const_cast< ::proto_ff::GVBMonster*>(&::proto_ff::GVBMonster::default_instance());
  m3_ = const_cast< ::proto_ff::GVBMonster*>(&::proto_ff::GVBMonster::default_instance());
}

GVBDatasRsp::GVBDatasRsp(const GVBDatasRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBDatasRsp::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  countdown_ = 0u;
  team1score_ = 0u;
  team2score_ = 0u;
  selfscore_ = 0u;
  selfteam_ = 0u;
  crystalstate_ = 0u;
  crystalowner_ = GOOGLE_ULONGLONG(0);
  crystalborncountdown_ = 0u;
  crystalownerteam_ = 0u;
  crystalownerprofession_ = 0u;
  m1_ = NULL;
  m2_ = NULL;
  m3_ = NULL;
  killcount_ = 0u;
  killscount_ = 0u;
  breakkillscount_ = 0u;
  interceptcount_ = 0u;
  crystalcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBDatasRsp::~GVBDatasRsp() {
  SharedDtor();
}

void GVBDatasRsp::SharedDtor() {
  if (this != default_instance_) {
    delete m1_;
    delete m2_;
    delete m3_;
  }
}

void GVBDatasRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBDatasRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBDatasRsp_descriptor_;
}

const GVBDatasRsp& GVBDatasRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBDatasRsp* GVBDatasRsp::default_instance_ = NULL;

GVBDatasRsp* GVBDatasRsp::New() const {
  return new GVBDatasRsp;
}

void GVBDatasRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0u;
    countdown_ = 0u;
    team1score_ = 0u;
    team2score_ = 0u;
    selfscore_ = 0u;
    selfteam_ = 0u;
    crystalstate_ = 0u;
    crystalowner_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    crystalborncountdown_ = 0u;
    crystalownerteam_ = 0u;
    crystalownerprofession_ = 0u;
    if (has_m1()) {
      if (m1_ != NULL) m1_->::proto_ff::GVBMonster::Clear();
    }
    if (has_m2()) {
      if (m2_ != NULL) m2_->::proto_ff::GVBMonster::Clear();
    }
    if (has_m3()) {
      if (m3_ != NULL) m3_->::proto_ff::GVBMonster::Clear();
    }
    killcount_ = 0u;
    killscount_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    breakkillscount_ = 0u;
    interceptcount_ = 0u;
    crystalcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBDatasRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_countdown;
        break;
      }

      // required uint32 countdown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team1Score;
        break;
      }

      // optional uint32 team1Score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team1Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1score_)));
          set_has_team1score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team2Score;
        break;
      }

      // optional uint32 team2Score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team2Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2score_)));
          set_has_team2score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_selfScore;
        break;
      }

      // optional uint32 selfScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfscore_)));
          set_has_selfscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_selfTeam;
        break;
      }

      // optional uint32 selfTeam = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfTeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfteam_)));
          set_has_selfteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_crystalState;
        break;
      }

      // optional uint32 crystalState = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalstate_)));
          set_has_crystalstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_crystalOwner;
        break;
      }

      // optional uint64 crystalOwner = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalOwner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &crystalowner_)));
          set_has_crystalowner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_crystalBornCountdown;
        break;
      }

      // optional uint32 crystalBornCountdown = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalBornCountdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalborncountdown_)));
          set_has_crystalborncountdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_crystalOwnerTeam;
        break;
      }

      // optional uint32 crystalOwnerTeam = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalOwnerTeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalownerteam_)));
          set_has_crystalownerteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_crystalOwnerProfession;
        break;
      }

      // optional uint32 crystalOwnerProfession = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalOwnerProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalownerprofession_)));
          set_has_crystalownerprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m1;
        break;
      }

      // optional .proto_ff.GVBMonster m1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m2;
        break;
      }

      // optional .proto_ff.GVBMonster m2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m3;
        break;
      }

      // optional .proto_ff.GVBMonster m3 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_killCount;
        break;
      }

      // optional uint32 killCount = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_killsCount;
        break;
      }

      // optional uint32 killsCount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killscount_)));
          set_has_killscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_breakKillsCount;
        break;
      }

      // optional uint32 breakKillsCount = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breakKillsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &breakkillscount_)));
          set_has_breakkillscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_interceptCount;
        break;
      }

      // optional uint32 interceptCount = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interceptCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interceptcount_)));
          set_has_interceptcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_crystalCount;
        break;
      }

      // optional uint32 crystalCount = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalcount_)));
          set_has_crystalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBDatasRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  // required uint32 countdown = 2;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->countdown(), output);
  }

  // optional uint32 team1Score = 3;
  if (has_team1score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team1score(), output);
  }

  // optional uint32 team2Score = 4;
  if (has_team2score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team2score(), output);
  }

  // optional uint32 selfScore = 5;
  if (has_selfscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->selfscore(), output);
  }

  // optional uint32 selfTeam = 6;
  if (has_selfteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->selfteam(), output);
  }

  // optional uint32 crystalState = 7;
  if (has_crystalstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->crystalstate(), output);
  }

  // optional uint64 crystalOwner = 8;
  if (has_crystalowner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->crystalowner(), output);
  }

  // optional uint32 crystalBornCountdown = 9;
  if (has_crystalborncountdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->crystalborncountdown(), output);
  }

  // optional uint32 crystalOwnerTeam = 10;
  if (has_crystalownerteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->crystalownerteam(), output);
  }

  // optional uint32 crystalOwnerProfession = 11;
  if (has_crystalownerprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->crystalownerprofession(), output);
  }

  // optional .proto_ff.GVBMonster m1 = 12;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m1(), output);
  }

  // optional .proto_ff.GVBMonster m2 = 13;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->m2(), output);
  }

  // optional .proto_ff.GVBMonster m3 = 14;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->m3(), output);
  }

  // optional uint32 killCount = 15;
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->killcount(), output);
  }

  // optional uint32 killsCount = 16;
  if (has_killscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->killscount(), output);
  }

  // optional uint32 breakKillsCount = 17;
  if (has_breakkillscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->breakkillscount(), output);
  }

  // optional uint32 interceptCount = 18;
  if (has_interceptcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->interceptcount(), output);
  }

  // optional uint32 crystalCount = 19;
  if (has_crystalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->crystalcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBDatasRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  // required uint32 countdown = 2;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->countdown(), target);
  }

  // optional uint32 team1Score = 3;
  if (has_team1score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team1score(), target);
  }

  // optional uint32 team2Score = 4;
  if (has_team2score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team2score(), target);
  }

  // optional uint32 selfScore = 5;
  if (has_selfscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->selfscore(), target);
  }

  // optional uint32 selfTeam = 6;
  if (has_selfteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->selfteam(), target);
  }

  // optional uint32 crystalState = 7;
  if (has_crystalstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->crystalstate(), target);
  }

  // optional uint64 crystalOwner = 8;
  if (has_crystalowner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->crystalowner(), target);
  }

  // optional uint32 crystalBornCountdown = 9;
  if (has_crystalborncountdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->crystalborncountdown(), target);
  }

  // optional uint32 crystalOwnerTeam = 10;
  if (has_crystalownerteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->crystalownerteam(), target);
  }

  // optional uint32 crystalOwnerProfession = 11;
  if (has_crystalownerprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->crystalownerprofession(), target);
  }

  // optional .proto_ff.GVBMonster m1 = 12;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m1(), target);
  }

  // optional .proto_ff.GVBMonster m2 = 13;
  if (has_m2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->m2(), target);
  }

  // optional .proto_ff.GVBMonster m3 = 14;
  if (has_m3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->m3(), target);
  }

  // optional uint32 killCount = 15;
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->killcount(), target);
  }

  // optional uint32 killsCount = 16;
  if (has_killscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->killscount(), target);
  }

  // optional uint32 breakKillsCount = 17;
  if (has_breakkillscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->breakkillscount(), target);
  }

  // optional uint32 interceptCount = 18;
  if (has_interceptcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->interceptcount(), target);
  }

  // optional uint32 crystalCount = 19;
  if (has_crystalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->crystalcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBDatasRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required uint32 countdown = 2;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countdown());
    }

    // optional uint32 team1Score = 3;
    if (has_team1score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1score());
    }

    // optional uint32 team2Score = 4;
    if (has_team2score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2score());
    }

    // optional uint32 selfScore = 5;
    if (has_selfscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfscore());
    }

    // optional uint32 selfTeam = 6;
    if (has_selfteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfteam());
    }

    // optional uint32 crystalState = 7;
    if (has_crystalstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalstate());
    }

    // optional uint64 crystalOwner = 8;
    if (has_crystalowner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->crystalowner());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 crystalBornCountdown = 9;
    if (has_crystalborncountdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalborncountdown());
    }

    // optional uint32 crystalOwnerTeam = 10;
    if (has_crystalownerteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalownerteam());
    }

    // optional uint32 crystalOwnerProfession = 11;
    if (has_crystalownerprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalownerprofession());
    }

    // optional .proto_ff.GVBMonster m1 = 12;
    if (has_m1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m1());
    }

    // optional .proto_ff.GVBMonster m2 = 13;
    if (has_m2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m2());
    }

    // optional .proto_ff.GVBMonster m3 = 14;
    if (has_m3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m3());
    }

    // optional uint32 killCount = 15;
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcount());
    }

    // optional uint32 killsCount = 16;
    if (has_killscount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killscount());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 breakKillsCount = 17;
    if (has_breakkillscount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->breakkillscount());
    }

    // optional uint32 interceptCount = 18;
    if (has_interceptcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interceptcount());
    }

    // optional uint32 crystalCount = 19;
    if (has_crystalcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBDatasRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBDatasRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBDatasRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBDatasRsp::MergeFrom(const GVBDatasRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
    if (from.has_team1score()) {
      set_team1score(from.team1score());
    }
    if (from.has_team2score()) {
      set_team2score(from.team2score());
    }
    if (from.has_selfscore()) {
      set_selfscore(from.selfscore());
    }
    if (from.has_selfteam()) {
      set_selfteam(from.selfteam());
    }
    if (from.has_crystalstate()) {
      set_crystalstate(from.crystalstate());
    }
    if (from.has_crystalowner()) {
      set_crystalowner(from.crystalowner());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_crystalborncountdown()) {
      set_crystalborncountdown(from.crystalborncountdown());
    }
    if (from.has_crystalownerteam()) {
      set_crystalownerteam(from.crystalownerteam());
    }
    if (from.has_crystalownerprofession()) {
      set_crystalownerprofession(from.crystalownerprofession());
    }
    if (from.has_m1()) {
      mutable_m1()->::proto_ff::GVBMonster::MergeFrom(from.m1());
    }
    if (from.has_m2()) {
      mutable_m2()->::proto_ff::GVBMonster::MergeFrom(from.m2());
    }
    if (from.has_m3()) {
      mutable_m3()->::proto_ff::GVBMonster::MergeFrom(from.m3());
    }
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
    if (from.has_killscount()) {
      set_killscount(from.killscount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_breakkillscount()) {
      set_breakkillscount(from.breakkillscount());
    }
    if (from.has_interceptcount()) {
      set_interceptcount(from.interceptcount());
    }
    if (from.has_crystalcount()) {
      set_crystalcount(from.crystalcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBDatasRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBDatasRsp::CopyFrom(const GVBDatasRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBDatasRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_m1()) {
    if (!this->m1().IsInitialized()) return false;
  }
  if (has_m2()) {
    if (!this->m2().IsInitialized()) return false;
  }
  if (has_m3()) {
    if (!this->m3().IsInitialized()) return false;
  }
  return true;
}

void GVBDatasRsp::Swap(GVBDatasRsp* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(countdown_, other->countdown_);
    std::swap(team1score_, other->team1score_);
    std::swap(team2score_, other->team2score_);
    std::swap(selfscore_, other->selfscore_);
    std::swap(selfteam_, other->selfteam_);
    std::swap(crystalstate_, other->crystalstate_);
    std::swap(crystalowner_, other->crystalowner_);
    std::swap(crystalborncountdown_, other->crystalborncountdown_);
    std::swap(crystalownerteam_, other->crystalownerteam_);
    std::swap(crystalownerprofession_, other->crystalownerprofession_);
    std::swap(m1_, other->m1_);
    std::swap(m2_, other->m2_);
    std::swap(m3_, other->m3_);
    std::swap(killcount_, other->killcount_);
    std::swap(killscount_, other->killscount_);
    std::swap(breakkillscount_, other->breakkillscount_);
    std::swap(interceptcount_, other->interceptcount_);
    std::swap(crystalcount_, other->crystalcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBDatasRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBDatasRsp_descriptor_;
  metadata.reflection = GVBDatasRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBRankReq::kUnusedFieldNumber;
#endif  // !_MSC_VER

GVBRankReq::GVBRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBRankReq::InitAsDefaultInstance() {
}

GVBRankReq::GVBRankReq(const GVBRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBRankReq::SharedCtor() {
  _cached_size_ = 0;
  unused_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBRankReq::~GVBRankReq() {
  SharedDtor();
}

void GVBRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBRankReq_descriptor_;
}

const GVBRankReq& GVBRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBRankReq* GVBRankReq::default_instance_ = NULL;

GVBRankReq* GVBRankReq::New() const {
  return new GVBRankReq;
}

void GVBRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unused_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unused = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unused_)));
          set_has_unused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unused = 1;
    if (has_unused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unused());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBRankReq::MergeFrom(const GVBRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unused()) {
      set_unused(from.unused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBRankReq::CopyFrom(const GVBRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBRankReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBRankReq::Swap(GVBRankReq* other) {
  if (other != this) {
    std::swap(unused_, other->unused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBRankReq_descriptor_;
  metadata.reflection = GVBRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBRankPlayerInfo::kRankFieldNumber;
const int GVBRankPlayerInfo::kNameFieldNumber;
const int GVBRankPlayerInfo::kScoreFieldNumber;
#endif  // !_MSC_VER

GVBRankPlayerInfo::GVBRankPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBRankPlayerInfo::InitAsDefaultInstance() {
}

GVBRankPlayerInfo::GVBRankPlayerInfo(const GVBRankPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBRankPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBRankPlayerInfo::~GVBRankPlayerInfo() {
  SharedDtor();
}

void GVBRankPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GVBRankPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBRankPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBRankPlayerInfo_descriptor_;
}

const GVBRankPlayerInfo& GVBRankPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBRankPlayerInfo* GVBRankPlayerInfo::default_instance_ = NULL;

GVBRankPlayerInfo* GVBRankPlayerInfo::New() const {
  return new GVBRankPlayerInfo;
}

void GVBRankPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBRankPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required uint32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBRankPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBRankPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBRankPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBRankPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBRankPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBRankPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBRankPlayerInfo::MergeFrom(const GVBRankPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBRankPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBRankPlayerInfo::CopyFrom(const GVBRankPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBRankPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GVBRankPlayerInfo::Swap(GVBRankPlayerInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBRankPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBRankPlayerInfo_descriptor_;
  metadata.reflection = GVBRankPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBRankRsp::kPlayersFieldNumber;
#endif  // !_MSC_VER

GVBRankRsp::GVBRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBRankRsp::InitAsDefaultInstance() {
}

GVBRankRsp::GVBRankRsp(const GVBRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBRankRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBRankRsp::~GVBRankRsp() {
  SharedDtor();
}

void GVBRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBRankRsp_descriptor_;
}

const GVBRankRsp& GVBRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBRankRsp* GVBRankRsp::default_instance_ = NULL;

GVBRankRsp* GVBRankRsp::New() const {
  return new GVBRankRsp;
}

void GVBRankRsp::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GVBRankPlayerInfo players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GVBRankPlayerInfo players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GVBRankPlayerInfo players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBRankRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GVBRankPlayerInfo players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBRankRsp::MergeFrom(const GVBRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBRankRsp::CopyFrom(const GVBRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBRankRsp::IsInitialized() const {

  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void GVBRankRsp::Swap(GVBRankRsp* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBRankRsp_descriptor_;
  metadata.reflection = GVBRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBPlayerInfo::kScoreFieldNumber;
const int GVBPlayerInfo::kKillCountFieldNumber;
const int GVBPlayerInfo::kDieCountFieldNumber;
const int GVBPlayerInfo::kInterceptCountFieldNumber;
const int GVBPlayerInfo::kCrystalCountFieldNumber;
const int GVBPlayerInfo::kNameFieldNumber;
const int GVBPlayerInfo::kTeamFieldNumber;
#endif  // !_MSC_VER

GVBPlayerInfo::GVBPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBPlayerInfo::InitAsDefaultInstance() {
}

GVBPlayerInfo::GVBPlayerInfo(const GVBPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  killcount_ = 0u;
  diecount_ = 0u;
  interceptcount_ = 0u;
  crystalcount_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBPlayerInfo::~GVBPlayerInfo() {
  SharedDtor();
}

void GVBPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GVBPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBPlayerInfo_descriptor_;
}

const GVBPlayerInfo& GVBPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBPlayerInfo* GVBPlayerInfo::default_instance_ = NULL;

GVBPlayerInfo* GVBPlayerInfo::New() const {
  return new GVBPlayerInfo;
}

void GVBPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
    killcount_ = 0u;
    diecount_ = 0u;
    interceptcount_ = 0u;
    crystalcount_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    team_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_killCount;
        break;
      }

      // required uint32 killCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dieCount;
        break;
      }

      // required uint32 dieCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dieCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diecount_)));
          set_has_diecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_interceptCount;
        break;
      }

      // required uint32 interceptCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interceptCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interceptcount_)));
          set_has_interceptcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_crystalCount;
        break;
      }

      // required uint32 crystalCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalcount_)));
          set_has_crystalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // required string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_team;
        break;
      }

      // required uint32 team = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // required uint32 killCount = 2;
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killcount(), output);
  }

  // required uint32 dieCount = 3;
  if (has_diecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->diecount(), output);
  }

  // required uint32 interceptCount = 4;
  if (has_interceptcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->interceptcount(), output);
  }

  // required uint32 crystalCount = 5;
  if (has_crystalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crystalcount(), output);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // required uint32 team = 7;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  // required uint32 killCount = 2;
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killcount(), target);
  }

  // required uint32 dieCount = 3;
  if (has_diecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->diecount(), target);
  }

  // required uint32 interceptCount = 4;
  if (has_interceptcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->interceptcount(), target);
  }

  // required uint32 crystalCount = 5;
  if (has_crystalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crystalcount(), target);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // required uint32 team = 7;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 killCount = 2;
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcount());
    }

    // required uint32 dieCount = 3;
    if (has_diecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diecount());
    }

    // required uint32 interceptCount = 4;
    if (has_interceptcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interceptcount());
    }

    // required uint32 crystalCount = 5;
    if (has_crystalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalcount());
    }

    // required string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 team = 7;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBPlayerInfo::MergeFrom(const GVBPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
    if (from.has_diecount()) {
      set_diecount(from.diecount());
    }
    if (from.has_interceptcount()) {
      set_interceptcount(from.interceptcount());
    }
    if (from.has_crystalcount()) {
      set_crystalcount(from.crystalcount());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBPlayerInfo::CopyFrom(const GVBPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void GVBPlayerInfo::Swap(GVBPlayerInfo* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(killcount_, other->killcount_);
    std::swap(diecount_, other->diecount_);
    std::swap(interceptcount_, other->interceptcount_);
    std::swap(crystalcount_, other->crystalcount_);
    std::swap(name_, other->name_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBPlayerInfo_descriptor_;
  metadata.reflection = GVBPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBResultBC::kWinTeamFieldNumber;
const int GVBResultBC::kPlayersFieldNumber;
#endif  // !_MSC_VER

GVBResultBC::GVBResultBC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBResultBC::InitAsDefaultInstance() {
}

GVBResultBC::GVBResultBC(const GVBResultBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBResultBC::SharedCtor() {
  _cached_size_ = 0;
  winteam_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBResultBC::~GVBResultBC() {
  SharedDtor();
}

void GVBResultBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBResultBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBResultBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBResultBC_descriptor_;
}

const GVBResultBC& GVBResultBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBResultBC* GVBResultBC::default_instance_ = NULL;

GVBResultBC* GVBResultBC::New() const {
  return new GVBResultBC;
}

void GVBResultBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winteam_ = 0u;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBResultBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 winTeam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winteam_)));
          set_has_winteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }

      // repeated .proto_ff.GVBPlayerInfo players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBResultBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 winTeam = 1;
  if (has_winteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->winteam(), output);
  }

  // repeated .proto_ff.GVBPlayerInfo players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBResultBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 winTeam = 1;
  if (has_winteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->winteam(), target);
  }

  // repeated .proto_ff.GVBPlayerInfo players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBResultBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 winTeam = 1;
    if (has_winteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winteam());
    }

  }
  // repeated .proto_ff.GVBPlayerInfo players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBResultBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBResultBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBResultBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBResultBC::MergeFrom(const GVBResultBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winteam()) {
      set_winteam(from.winteam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBResultBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBResultBC::CopyFrom(const GVBResultBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBResultBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void GVBResultBC::Swap(GVBResultBC* other) {
  if (other != this) {
    std::swap(winteam_, other->winteam_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBResultBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBResultBC_descriptor_;
  metadata.reflection = GVBResultBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBM1AttrChgBC::kM1FieldNumber;
#endif  // !_MSC_VER

GVBM1AttrChgBC::GVBM1AttrChgBC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBM1AttrChgBC::InitAsDefaultInstance() {
  m1_ = const_cast< ::proto_ff::GVBMonster*>(&::proto_ff::GVBMonster::default_instance());
}

GVBM1AttrChgBC::GVBM1AttrChgBC(const GVBM1AttrChgBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBM1AttrChgBC::SharedCtor() {
  _cached_size_ = 0;
  m1_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBM1AttrChgBC::~GVBM1AttrChgBC() {
  SharedDtor();
}

void GVBM1AttrChgBC::SharedDtor() {
  if (this != default_instance_) {
    delete m1_;
  }
}

void GVBM1AttrChgBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBM1AttrChgBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBM1AttrChgBC_descriptor_;
}

const GVBM1AttrChgBC& GVBM1AttrChgBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBM1AttrChgBC* GVBM1AttrChgBC::default_instance_ = NULL;

GVBM1AttrChgBC* GVBM1AttrChgBC::New() const {
  return new GVBM1AttrChgBC;
}

void GVBM1AttrChgBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m1()) {
      if (m1_ != NULL) m1_->::proto_ff::GVBMonster::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBM1AttrChgBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.GVBMonster m1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBM1AttrChgBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.GVBMonster m1 = 1;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBM1AttrChgBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.GVBMonster m1 = 1;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBM1AttrChgBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.GVBMonster m1 = 1;
    if (has_m1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBM1AttrChgBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBM1AttrChgBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBM1AttrChgBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBM1AttrChgBC::MergeFrom(const GVBM1AttrChgBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m1()) {
      mutable_m1()->::proto_ff::GVBMonster::MergeFrom(from.m1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBM1AttrChgBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBM1AttrChgBC::CopyFrom(const GVBM1AttrChgBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBM1AttrChgBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_m1()) {
    if (!this->m1().IsInitialized()) return false;
  }
  return true;
}

void GVBM1AttrChgBC::Swap(GVBM1AttrChgBC* other) {
  if (other != this) {
    std::swap(m1_, other->m1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBM1AttrChgBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBM1AttrChgBC_descriptor_;
  metadata.reflection = GVBM1AttrChgBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBM2AttrChgBC::kM2FieldNumber;
#endif  // !_MSC_VER

GVBM2AttrChgBC::GVBM2AttrChgBC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBM2AttrChgBC::InitAsDefaultInstance() {
  m2_ = const_cast< ::proto_ff::GVBMonster*>(&::proto_ff::GVBMonster::default_instance());
}

GVBM2AttrChgBC::GVBM2AttrChgBC(const GVBM2AttrChgBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBM2AttrChgBC::SharedCtor() {
  _cached_size_ = 0;
  m2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBM2AttrChgBC::~GVBM2AttrChgBC() {
  SharedDtor();
}

void GVBM2AttrChgBC::SharedDtor() {
  if (this != default_instance_) {
    delete m2_;
  }
}

void GVBM2AttrChgBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBM2AttrChgBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBM2AttrChgBC_descriptor_;
}

const GVBM2AttrChgBC& GVBM2AttrChgBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBM2AttrChgBC* GVBM2AttrChgBC::default_instance_ = NULL;

GVBM2AttrChgBC* GVBM2AttrChgBC::New() const {
  return new GVBM2AttrChgBC;
}

void GVBM2AttrChgBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m2()) {
      if (m2_ != NULL) m2_->::proto_ff::GVBMonster::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBM2AttrChgBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.GVBMonster m2 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBM2AttrChgBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.GVBMonster m2 = 1;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBM2AttrChgBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.GVBMonster m2 = 1;
  if (has_m2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBM2AttrChgBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.GVBMonster m2 = 1;
    if (has_m2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBM2AttrChgBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBM2AttrChgBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBM2AttrChgBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBM2AttrChgBC::MergeFrom(const GVBM2AttrChgBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m2()) {
      mutable_m2()->::proto_ff::GVBMonster::MergeFrom(from.m2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBM2AttrChgBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBM2AttrChgBC::CopyFrom(const GVBM2AttrChgBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBM2AttrChgBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_m2()) {
    if (!this->m2().IsInitialized()) return false;
  }
  return true;
}

void GVBM2AttrChgBC::Swap(GVBM2AttrChgBC* other) {
  if (other != this) {
    std::swap(m2_, other->m2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBM2AttrChgBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBM2AttrChgBC_descriptor_;
  metadata.reflection = GVBM2AttrChgBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBM3AttrChgBC::kM3FieldNumber;
#endif  // !_MSC_VER

GVBM3AttrChgBC::GVBM3AttrChgBC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBM3AttrChgBC::InitAsDefaultInstance() {
  m3_ = const_cast< ::proto_ff::GVBMonster*>(&::proto_ff::GVBMonster::default_instance());
}

GVBM3AttrChgBC::GVBM3AttrChgBC(const GVBM3AttrChgBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBM3AttrChgBC::SharedCtor() {
  _cached_size_ = 0;
  m3_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBM3AttrChgBC::~GVBM3AttrChgBC() {
  SharedDtor();
}

void GVBM3AttrChgBC::SharedDtor() {
  if (this != default_instance_) {
    delete m3_;
  }
}

void GVBM3AttrChgBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBM3AttrChgBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBM3AttrChgBC_descriptor_;
}

const GVBM3AttrChgBC& GVBM3AttrChgBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBM3AttrChgBC* GVBM3AttrChgBC::default_instance_ = NULL;

GVBM3AttrChgBC* GVBM3AttrChgBC::New() const {
  return new GVBM3AttrChgBC;
}

void GVBM3AttrChgBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m3()) {
      if (m3_ != NULL) m3_->::proto_ff::GVBMonster::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBM3AttrChgBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.GVBMonster m3 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBM3AttrChgBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.GVBMonster m3 = 1;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBM3AttrChgBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.GVBMonster m3 = 1;
  if (has_m3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBM3AttrChgBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.GVBMonster m3 = 1;
    if (has_m3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBM3AttrChgBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBM3AttrChgBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBM3AttrChgBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBM3AttrChgBC::MergeFrom(const GVBM3AttrChgBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m3()) {
      mutable_m3()->::proto_ff::GVBMonster::MergeFrom(from.m3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBM3AttrChgBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBM3AttrChgBC::CopyFrom(const GVBM3AttrChgBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBM3AttrChgBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_m3()) {
    if (!this->m3().IsInitialized()) return false;
  }
  return true;
}

void GVBM3AttrChgBC::Swap(GVBM3AttrChgBC* other) {
  if (other != this) {
    std::swap(m3_, other->m3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBM3AttrChgBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBM3AttrChgBC_descriptor_;
  metadata.reflection = GVBM3AttrChgBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBSelfInfoUpdateNT::kKillCountFieldNumber;
const int GVBSelfInfoUpdateNT::kKillsCountFieldNumber;
const int GVBSelfInfoUpdateNT::kBreakKillsCountFieldNumber;
const int GVBSelfInfoUpdateNT::kInterceptCountFieldNumber;
const int GVBSelfInfoUpdateNT::kCrystalCountFieldNumber;
const int GVBSelfInfoUpdateNT::kSelfScoreFieldNumber;
#endif  // !_MSC_VER

GVBSelfInfoUpdateNT::GVBSelfInfoUpdateNT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBSelfInfoUpdateNT::InitAsDefaultInstance() {
}

GVBSelfInfoUpdateNT::GVBSelfInfoUpdateNT(const GVBSelfInfoUpdateNT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBSelfInfoUpdateNT::SharedCtor() {
  _cached_size_ = 0;
  killcount_ = 0u;
  killscount_ = 0u;
  breakkillscount_ = 0u;
  interceptcount_ = 0u;
  crystalcount_ = 0u;
  selfscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBSelfInfoUpdateNT::~GVBSelfInfoUpdateNT() {
  SharedDtor();
}

void GVBSelfInfoUpdateNT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBSelfInfoUpdateNT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBSelfInfoUpdateNT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBSelfInfoUpdateNT_descriptor_;
}

const GVBSelfInfoUpdateNT& GVBSelfInfoUpdateNT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBSelfInfoUpdateNT* GVBSelfInfoUpdateNT::default_instance_ = NULL;

GVBSelfInfoUpdateNT* GVBSelfInfoUpdateNT::New() const {
  return new GVBSelfInfoUpdateNT;
}

void GVBSelfInfoUpdateNT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killcount_ = 0u;
    killscount_ = 0u;
    breakkillscount_ = 0u;
    interceptcount_ = 0u;
    crystalcount_ = 0u;
    selfscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBSelfInfoUpdateNT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 killCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_killsCount;
        break;
      }

      // optional uint32 killsCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killscount_)));
          set_has_killscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_breakKillsCount;
        break;
      }

      // optional uint32 breakKillsCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breakKillsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &breakkillscount_)));
          set_has_breakkillscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_interceptCount;
        break;
      }

      // optional uint32 interceptCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interceptCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interceptcount_)));
          set_has_interceptcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_crystalCount;
        break;
      }

      // optional uint32 crystalCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalcount_)));
          set_has_crystalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_selfScore;
        break;
      }

      // optional uint32 selfScore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfscore_)));
          set_has_selfscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBSelfInfoUpdateNT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 killCount = 1;
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->killcount(), output);
  }

  // optional uint32 killsCount = 2;
  if (has_killscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killscount(), output);
  }

  // optional uint32 breakKillsCount = 3;
  if (has_breakkillscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->breakkillscount(), output);
  }

  // optional uint32 interceptCount = 4;
  if (has_interceptcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->interceptcount(), output);
  }

  // optional uint32 crystalCount = 5;
  if (has_crystalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crystalcount(), output);
  }

  // optional uint32 selfScore = 6;
  if (has_selfscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->selfscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBSelfInfoUpdateNT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 killCount = 1;
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->killcount(), target);
  }

  // optional uint32 killsCount = 2;
  if (has_killscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killscount(), target);
  }

  // optional uint32 breakKillsCount = 3;
  if (has_breakkillscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->breakkillscount(), target);
  }

  // optional uint32 interceptCount = 4;
  if (has_interceptcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->interceptcount(), target);
  }

  // optional uint32 crystalCount = 5;
  if (has_crystalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crystalcount(), target);
  }

  // optional uint32 selfScore = 6;
  if (has_selfscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->selfscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBSelfInfoUpdateNT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 killCount = 1;
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcount());
    }

    // optional uint32 killsCount = 2;
    if (has_killscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killscount());
    }

    // optional uint32 breakKillsCount = 3;
    if (has_breakkillscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->breakkillscount());
    }

    // optional uint32 interceptCount = 4;
    if (has_interceptcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interceptcount());
    }

    // optional uint32 crystalCount = 5;
    if (has_crystalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalcount());
    }

    // optional uint32 selfScore = 6;
    if (has_selfscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBSelfInfoUpdateNT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBSelfInfoUpdateNT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBSelfInfoUpdateNT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBSelfInfoUpdateNT::MergeFrom(const GVBSelfInfoUpdateNT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
    if (from.has_killscount()) {
      set_killscount(from.killscount());
    }
    if (from.has_breakkillscount()) {
      set_breakkillscount(from.breakkillscount());
    }
    if (from.has_interceptcount()) {
      set_interceptcount(from.interceptcount());
    }
    if (from.has_crystalcount()) {
      set_crystalcount(from.crystalcount());
    }
    if (from.has_selfscore()) {
      set_selfscore(from.selfscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBSelfInfoUpdateNT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBSelfInfoUpdateNT::CopyFrom(const GVBSelfInfoUpdateNT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBSelfInfoUpdateNT::IsInitialized() const {

  return true;
}

void GVBSelfInfoUpdateNT::Swap(GVBSelfInfoUpdateNT* other) {
  if (other != this) {
    std::swap(killcount_, other->killcount_);
    std::swap(killscount_, other->killscount_);
    std::swap(breakkillscount_, other->breakkillscount_);
    std::swap(interceptcount_, other->interceptcount_);
    std::swap(crystalcount_, other->crystalcount_);
    std::swap(selfscore_, other->selfscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBSelfInfoUpdateNT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBSelfInfoUpdateNT_descriptor_;
  metadata.reflection = GVBSelfInfoUpdateNT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBKillPlayerBC::kKillerTeamFieldNumber;
const int GVBKillPlayerBC::kKilledTeamFieldNumber;
const int GVBKillPlayerBC::kKillerProfFieldNumber;
const int GVBKillPlayerBC::kKilledProfFieldNumber;
#endif  // !_MSC_VER

GVBKillPlayerBC::GVBKillPlayerBC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBKillPlayerBC::InitAsDefaultInstance() {
}

GVBKillPlayerBC::GVBKillPlayerBC(const GVBKillPlayerBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBKillPlayerBC::SharedCtor() {
  _cached_size_ = 0;
  killerteam_ = 0u;
  killedteam_ = 0u;
  killerprof_ = 0u;
  killedprof_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBKillPlayerBC::~GVBKillPlayerBC() {
  SharedDtor();
}

void GVBKillPlayerBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBKillPlayerBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBKillPlayerBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBKillPlayerBC_descriptor_;
}

const GVBKillPlayerBC& GVBKillPlayerBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBKillPlayerBC* GVBKillPlayerBC::default_instance_ = NULL;

GVBKillPlayerBC* GVBKillPlayerBC::New() const {
  return new GVBKillPlayerBC;
}

void GVBKillPlayerBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killerteam_ = 0u;
    killedteam_ = 0u;
    killerprof_ = 0u;
    killedprof_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBKillPlayerBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 killerTeam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killerteam_)));
          set_has_killerteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_killedTeam;
        break;
      }

      // required uint32 killedTeam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killedTeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killedteam_)));
          set_has_killedteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_killerProf;
        break;
      }

      // required uint32 killerProf = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killerProf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killerprof_)));
          set_has_killerprof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_killedProf;
        break;
      }

      // required uint32 killedProf = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killedProf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killedprof_)));
          set_has_killedprof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBKillPlayerBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 killerTeam = 1;
  if (has_killerteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->killerteam(), output);
  }

  // required uint32 killedTeam = 2;
  if (has_killedteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killedteam(), output);
  }

  // required uint32 killerProf = 3;
  if (has_killerprof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->killerprof(), output);
  }

  // required uint32 killedProf = 4;
  if (has_killedprof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killedprof(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBKillPlayerBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 killerTeam = 1;
  if (has_killerteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->killerteam(), target);
  }

  // required uint32 killedTeam = 2;
  if (has_killedteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killedteam(), target);
  }

  // required uint32 killerProf = 3;
  if (has_killerprof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->killerprof(), target);
  }

  // required uint32 killedProf = 4;
  if (has_killedprof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killedprof(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBKillPlayerBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 killerTeam = 1;
    if (has_killerteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killerteam());
    }

    // required uint32 killedTeam = 2;
    if (has_killedteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killedteam());
    }

    // required uint32 killerProf = 3;
    if (has_killerprof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killerprof());
    }

    // required uint32 killedProf = 4;
    if (has_killedprof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killedprof());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBKillPlayerBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBKillPlayerBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBKillPlayerBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBKillPlayerBC::MergeFrom(const GVBKillPlayerBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killerteam()) {
      set_killerteam(from.killerteam());
    }
    if (from.has_killedteam()) {
      set_killedteam(from.killedteam());
    }
    if (from.has_killerprof()) {
      set_killerprof(from.killerprof());
    }
    if (from.has_killedprof()) {
      set_killedprof(from.killedprof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBKillPlayerBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBKillPlayerBC::CopyFrom(const GVBKillPlayerBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBKillPlayerBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GVBKillPlayerBC::Swap(GVBKillPlayerBC* other) {
  if (other != this) {
    std::swap(killerteam_, other->killerteam_);
    std::swap(killedteam_, other->killedteam_);
    std::swap(killerprof_, other->killerprof_);
    std::swap(killedprof_, other->killedprof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBKillPlayerBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBKillPlayerBC_descriptor_;
  metadata.reflection = GVBKillPlayerBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBResPointChg::kTeam1ScoreFieldNumber;
const int GVBResPointChg::kTeam2ScoreFieldNumber;
#endif  // !_MSC_VER

GVBResPointChg::GVBResPointChg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBResPointChg::InitAsDefaultInstance() {
}

GVBResPointChg::GVBResPointChg(const GVBResPointChg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBResPointChg::SharedCtor() {
  _cached_size_ = 0;
  team1score_ = 0u;
  team2score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBResPointChg::~GVBResPointChg() {
  SharedDtor();
}

void GVBResPointChg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBResPointChg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBResPointChg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBResPointChg_descriptor_;
}

const GVBResPointChg& GVBResPointChg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBResPointChg* GVBResPointChg::default_instance_ = NULL;

GVBResPointChg* GVBResPointChg::New() const {
  return new GVBResPointChg;
}

void GVBResPointChg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team1score_ = 0u;
    team2score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBResPointChg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 team1Score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1score_)));
          set_has_team1score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team2Score;
        break;
      }

      // required uint32 team2Score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team2Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2score_)));
          set_has_team2score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBResPointChg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 team1Score = 1;
  if (has_team1score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team1score(), output);
  }

  // required uint32 team2Score = 2;
  if (has_team2score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team2score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBResPointChg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 team1Score = 1;
  if (has_team1score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team1score(), target);
  }

  // required uint32 team2Score = 2;
  if (has_team2score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team2score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBResPointChg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 team1Score = 1;
    if (has_team1score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1score());
    }

    // required uint32 team2Score = 2;
    if (has_team2score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBResPointChg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBResPointChg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBResPointChg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBResPointChg::MergeFrom(const GVBResPointChg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team1score()) {
      set_team1score(from.team1score());
    }
    if (from.has_team2score()) {
      set_team2score(from.team2score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBResPointChg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBResPointChg::CopyFrom(const GVBResPointChg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBResPointChg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GVBResPointChg::Swap(GVBResPointChg* other) {
  if (other != this) {
    std::swap(team1score_, other->team1score_);
    std::swap(team2score_, other->team2score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBResPointChg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBResPointChg_descriptor_;
  metadata.reflection = GVBResPointChg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBCrystalStateBC::kCrystalStateFieldNumber;
const int GVBCrystalStateBC::kCrystalBornCountdownFieldNumber;
const int GVBCrystalStateBC::kCrystalOwnerFieldNumber;
const int GVBCrystalStateBC::kCrystalOwnerTeamFieldNumber;
const int GVBCrystalStateBC::kCrystalOwnerProfessionFieldNumber;
#endif  // !_MSC_VER

GVBCrystalStateBC::GVBCrystalStateBC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBCrystalStateBC::InitAsDefaultInstance() {
}

GVBCrystalStateBC::GVBCrystalStateBC(const GVBCrystalStateBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBCrystalStateBC::SharedCtor() {
  _cached_size_ = 0;
  crystalstate_ = 0u;
  crystalborncountdown_ = 0u;
  crystalowner_ = GOOGLE_ULONGLONG(0);
  crystalownerteam_ = 0u;
  crystalownerprofession_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBCrystalStateBC::~GVBCrystalStateBC() {
  SharedDtor();
}

void GVBCrystalStateBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBCrystalStateBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBCrystalStateBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBCrystalStateBC_descriptor_;
}

const GVBCrystalStateBC& GVBCrystalStateBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBCrystalStateBC* GVBCrystalStateBC::default_instance_ = NULL;

GVBCrystalStateBC* GVBCrystalStateBC::New() const {
  return new GVBCrystalStateBC;
}

void GVBCrystalStateBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    crystalstate_ = 0u;
    crystalborncountdown_ = 0u;
    crystalowner_ = GOOGLE_ULONGLONG(0);
    crystalownerteam_ = 0u;
    crystalownerprofession_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBCrystalStateBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 crystalState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalstate_)));
          set_has_crystalstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crystalBornCountdown;
        break;
      }

      // required uint32 crystalBornCountdown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalBornCountdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalborncountdown_)));
          set_has_crystalborncountdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_crystalOwner;
        break;
      }

      // optional uint64 crystalOwner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalOwner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &crystalowner_)));
          set_has_crystalowner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_crystalOwnerTeam;
        break;
      }

      // optional uint32 crystalOwnerTeam = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalOwnerTeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalownerteam_)));
          set_has_crystalownerteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_crystalOwnerProfession;
        break;
      }

      // optional uint32 crystalOwnerProfession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalOwnerProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalownerprofession_)));
          set_has_crystalownerprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBCrystalStateBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 crystalState = 1;
  if (has_crystalstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->crystalstate(), output);
  }

  // required uint32 crystalBornCountdown = 2;
  if (has_crystalborncountdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crystalborncountdown(), output);
  }

  // optional uint64 crystalOwner = 3;
  if (has_crystalowner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->crystalowner(), output);
  }

  // optional uint32 crystalOwnerTeam = 4;
  if (has_crystalownerteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crystalownerteam(), output);
  }

  // optional uint32 crystalOwnerProfession = 5;
  if (has_crystalownerprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crystalownerprofession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBCrystalStateBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 crystalState = 1;
  if (has_crystalstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->crystalstate(), target);
  }

  // required uint32 crystalBornCountdown = 2;
  if (has_crystalborncountdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crystalborncountdown(), target);
  }

  // optional uint64 crystalOwner = 3;
  if (has_crystalowner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->crystalowner(), target);
  }

  // optional uint32 crystalOwnerTeam = 4;
  if (has_crystalownerteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crystalownerteam(), target);
  }

  // optional uint32 crystalOwnerProfession = 5;
  if (has_crystalownerprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crystalownerprofession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBCrystalStateBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 crystalState = 1;
    if (has_crystalstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalstate());
    }

    // required uint32 crystalBornCountdown = 2;
    if (has_crystalborncountdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalborncountdown());
    }

    // optional uint64 crystalOwner = 3;
    if (has_crystalowner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->crystalowner());
    }

    // optional uint32 crystalOwnerTeam = 4;
    if (has_crystalownerteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalownerteam());
    }

    // optional uint32 crystalOwnerProfession = 5;
    if (has_crystalownerprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalownerprofession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBCrystalStateBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBCrystalStateBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBCrystalStateBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBCrystalStateBC::MergeFrom(const GVBCrystalStateBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crystalstate()) {
      set_crystalstate(from.crystalstate());
    }
    if (from.has_crystalborncountdown()) {
      set_crystalborncountdown(from.crystalborncountdown());
    }
    if (from.has_crystalowner()) {
      set_crystalowner(from.crystalowner());
    }
    if (from.has_crystalownerteam()) {
      set_crystalownerteam(from.crystalownerteam());
    }
    if (from.has_crystalownerprofession()) {
      set_crystalownerprofession(from.crystalownerprofession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBCrystalStateBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBCrystalStateBC::CopyFrom(const GVBCrystalStateBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBCrystalStateBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GVBCrystalStateBC::Swap(GVBCrystalStateBC* other) {
  if (other != this) {
    std::swap(crystalstate_, other->crystalstate_);
    std::swap(crystalborncountdown_, other->crystalborncountdown_);
    std::swap(crystalowner_, other->crystalowner_);
    std::swap(crystalownerteam_, other->crystalownerteam_);
    std::swap(crystalownerprofession_, other->crystalownerprofession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBCrystalStateBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBCrystalStateBC_descriptor_;
  metadata.reflection = GVBCrystalStateBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBCrystalCollectReq::kTypeFieldNumber;
#endif  // !_MSC_VER

GVBCrystalCollectReq::GVBCrystalCollectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBCrystalCollectReq::InitAsDefaultInstance() {
}

GVBCrystalCollectReq::GVBCrystalCollectReq(const GVBCrystalCollectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBCrystalCollectReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBCrystalCollectReq::~GVBCrystalCollectReq() {
  SharedDtor();
}

void GVBCrystalCollectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBCrystalCollectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBCrystalCollectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBCrystalCollectReq_descriptor_;
}

const GVBCrystalCollectReq& GVBCrystalCollectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBCrystalCollectReq* GVBCrystalCollectReq::default_instance_ = NULL;

GVBCrystalCollectReq* GVBCrystalCollectReq::New() const {
  return new GVBCrystalCollectReq;
}

void GVBCrystalCollectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBCrystalCollectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBCrystalCollectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBCrystalCollectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBCrystalCollectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBCrystalCollectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBCrystalCollectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBCrystalCollectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBCrystalCollectReq::MergeFrom(const GVBCrystalCollectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBCrystalCollectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBCrystalCollectReq::CopyFrom(const GVBCrystalCollectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBCrystalCollectReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBCrystalCollectReq::Swap(GVBCrystalCollectReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBCrystalCollectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBCrystalCollectReq_descriptor_;
  metadata.reflection = GVBCrystalCollectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBCrystalCollectRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

GVBCrystalCollectRsp::GVBCrystalCollectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBCrystalCollectRsp::InitAsDefaultInstance() {
}

GVBCrystalCollectRsp::GVBCrystalCollectRsp(const GVBCrystalCollectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBCrystalCollectRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBCrystalCollectRsp::~GVBCrystalCollectRsp() {
  SharedDtor();
}

void GVBCrystalCollectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBCrystalCollectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBCrystalCollectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBCrystalCollectRsp_descriptor_;
}

const GVBCrystalCollectRsp& GVBCrystalCollectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBCrystalCollectRsp* GVBCrystalCollectRsp::default_instance_ = NULL;

GVBCrystalCollectRsp* GVBCrystalCollectRsp::New() const {
  return new GVBCrystalCollectRsp;
}

void GVBCrystalCollectRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBCrystalCollectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBCrystalCollectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBCrystalCollectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBCrystalCollectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBCrystalCollectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBCrystalCollectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBCrystalCollectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBCrystalCollectRsp::MergeFrom(const GVBCrystalCollectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBCrystalCollectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBCrystalCollectRsp::CopyFrom(const GVBCrystalCollectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBCrystalCollectRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBCrystalCollectRsp::Swap(GVBCrystalCollectRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBCrystalCollectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBCrystalCollectRsp_descriptor_;
  metadata.reflection = GVBCrystalCollectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GVBDailyScoreDataReq::GVBDailyScoreDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBDailyScoreDataReq::InitAsDefaultInstance() {
}

GVBDailyScoreDataReq::GVBDailyScoreDataReq(const GVBDailyScoreDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBDailyScoreDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBDailyScoreDataReq::~GVBDailyScoreDataReq() {
  SharedDtor();
}

void GVBDailyScoreDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBDailyScoreDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBDailyScoreDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBDailyScoreDataReq_descriptor_;
}

const GVBDailyScoreDataReq& GVBDailyScoreDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBDailyScoreDataReq* GVBDailyScoreDataReq::default_instance_ = NULL;

GVBDailyScoreDataReq* GVBDailyScoreDataReq::New() const {
  return new GVBDailyScoreDataReq;
}

void GVBDailyScoreDataReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBDailyScoreDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GVBDailyScoreDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBDailyScoreDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBDailyScoreDataReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBDailyScoreDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBDailyScoreDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBDailyScoreDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBDailyScoreDataReq::MergeFrom(const GVBDailyScoreDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBDailyScoreDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBDailyScoreDataReq::CopyFrom(const GVBDailyScoreDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBDailyScoreDataReq::IsInitialized() const {

  return true;
}

void GVBDailyScoreDataReq::Swap(GVBDailyScoreDataReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBDailyScoreDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBDailyScoreDataReq_descriptor_;
  metadata.reflection = GVBDailyScoreDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBDailyScoreDataRsp::kRewardsStateFieldNumber;
const int GVBDailyScoreDataRsp::kDailyScoreFieldNumber;
#endif  // !_MSC_VER

GVBDailyScoreDataRsp::GVBDailyScoreDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBDailyScoreDataRsp::InitAsDefaultInstance() {
}

GVBDailyScoreDataRsp::GVBDailyScoreDataRsp(const GVBDailyScoreDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBDailyScoreDataRsp::SharedCtor() {
  _cached_size_ = 0;
  dailyscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBDailyScoreDataRsp::~GVBDailyScoreDataRsp() {
  SharedDtor();
}

void GVBDailyScoreDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBDailyScoreDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBDailyScoreDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBDailyScoreDataRsp_descriptor_;
}

const GVBDailyScoreDataRsp& GVBDailyScoreDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBDailyScoreDataRsp* GVBDailyScoreDataRsp::default_instance_ = NULL;

GVBDailyScoreDataRsp* GVBDailyScoreDataRsp::New() const {
  return new GVBDailyScoreDataRsp;
}

void GVBDailyScoreDataRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    dailyscore_ = 0u;
  }
  rewardsstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBDailyScoreDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 rewardsState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardsState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_rewardsstate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardsstate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_rewardsState;
        if (input->ExpectTag(16)) goto parse_dailyScore;
        break;
      }

      // required uint32 dailyScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyscore_)));
          set_has_dailyscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBDailyScoreDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 rewardsState = 1;
  for (int i = 0; i < this->rewardsstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->rewardsstate(i), output);
  }

  // required uint32 dailyScore = 2;
  if (has_dailyscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dailyscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBDailyScoreDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 rewardsState = 1;
  for (int i = 0; i < this->rewardsstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->rewardsstate(i), target);
  }

  // required uint32 dailyScore = 2;
  if (has_dailyscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dailyscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBDailyScoreDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 dailyScore = 2;
    if (has_dailyscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyscore());
    }

  }
  // repeated uint32 rewardsState = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardsstate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardsstate(i));
    }
    total_size += 1 * this->rewardsstate_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBDailyScoreDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBDailyScoreDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBDailyScoreDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBDailyScoreDataRsp::MergeFrom(const GVBDailyScoreDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardsstate_.MergeFrom(from.rewardsstate_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dailyscore()) {
      set_dailyscore(from.dailyscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBDailyScoreDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBDailyScoreDataRsp::CopyFrom(const GVBDailyScoreDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBDailyScoreDataRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void GVBDailyScoreDataRsp::Swap(GVBDailyScoreDataRsp* other) {
  if (other != this) {
    rewardsstate_.Swap(&other->rewardsstate_);
    std::swap(dailyscore_, other->dailyscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBDailyScoreDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBDailyScoreDataRsp_descriptor_;
  metadata.reflection = GVBDailyScoreDataRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
