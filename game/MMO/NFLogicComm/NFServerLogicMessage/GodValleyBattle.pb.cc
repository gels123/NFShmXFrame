// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GodValleyBattle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GodValleyBattle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* GVBEnterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBEnterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBEnterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBEnterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBSCrystalCollectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBSCrystalCollectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBCrystallSubmitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBCrystallSubmitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBExitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBExitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBTransFailed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBTransFailed_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBDatasRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBDatasRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBRankPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBRankPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBResultBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBResultBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBM1AttrChgBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBM1AttrChgBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBM2AttrChgBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBM2AttrChgBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBM3AttrChgBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBM3AttrChgBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBSelfInfoUpdateNT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBSelfInfoUpdateNT_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBKillPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBKillPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBKillPlayerBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBKillPlayerBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBResPointChg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBResPointChg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBCrystalStateBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBCrystalStateBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBCrystalCollectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBCrystalCollectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBCrystalCollectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBCrystalCollectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBDailyScoreDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBDailyScoreDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBDailyScoreDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBDailyScoreDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBDailyScoreRewardRcvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBDailyScoreRewardRcvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBDailyScoreRewardRcvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBDailyScoreRewardRcvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBRoomCloseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBRoomCloseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBCrystalOwnerPosReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBCrystalOwnerPosReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBCrystalOwnerPosRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBCrystalOwnerPosRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPEnterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPEnterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPExitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPExitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPEnterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPEnterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPPairPracticeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPPairPracticeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPPairPracticeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPPairPracticeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPMassageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPMassageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPMassageRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPMassageRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPSplashReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPSplashReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPSplashRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPSplashRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPCollectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPCollectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPExpAddNt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPExpAddNt_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPCollectCDNt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPCollectCDNt_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPActionNt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPActionNt_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPCancelCurActReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPCancelCurActReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPPCancelCurActRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPPCancelCurActRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTPEnterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTPEnterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTPExitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTPExitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTPPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTPPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTPResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTPResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTPEnterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTPEnterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTPReadyStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTPReadyStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTPRoundStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTPRoundStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTPScoreRankNt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTPScoreRankNt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTPScoreChgNt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTPScoreChgNt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTPKillPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTPKillPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTPKillNt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTPKillNt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTPPlayersChgNt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTPPlayersChgNt_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBEnterError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBEnterError_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMADatas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMADatas_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMABossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMABossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMABossInfoReqData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMABossInfoReqData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMABossInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMABossInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMABossInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMABossInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMABossInfoSingleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMABossInfoSingleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMABossInfoSingleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMABossInfoSingleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAPauseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAPauseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAPauseRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAPauseRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAPayReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAPayReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAPayRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAPayRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAEnterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAEnterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAGotoFloorReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAGotoFloorReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAGotoFloorRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAGotoFloorRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMATimeRechargeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMATimeRechargeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMATimeRechargeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMATimeRechargeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAExitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAExitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAResultReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAResultReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAResultRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GodValleyBattle_2eproto() {
  protobuf_AddDesc_GodValleyBattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GodValleyBattle.proto");
  GOOGLE_CHECK(file != NULL);
  GVBEnterReq_descriptor_ = file->message_type(0);
  static const int GVBEnterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterReq, unused_),
  };
  GVBEnterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBEnterReq_descriptor_,
      GVBEnterReq::default_instance_,
      GVBEnterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBEnterReq));
  GVBEnterRsp_descriptor_ = file->message_type(1);
  static const int GVBEnterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterRsp, result_),
  };
  GVBEnterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBEnterRsp_descriptor_,
      GVBEnterRsp::default_instance_,
      GVBEnterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBEnterRsp));
  GVBSCrystalCollectReq_descriptor_ = file->message_type(2);
  static const int GVBSCrystalCollectReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSCrystalCollectReq, number_),
  };
  GVBSCrystalCollectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBSCrystalCollectReq_descriptor_,
      GVBSCrystalCollectReq::default_instance_,
      GVBSCrystalCollectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSCrystalCollectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSCrystalCollectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBSCrystalCollectReq));
  GVBCrystallSubmitReq_descriptor_ = file->message_type(3);
  static const int GVBCrystallSubmitReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystallSubmitReq, monstereid_),
  };
  GVBCrystallSubmitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBCrystallSubmitReq_descriptor_,
      GVBCrystallSubmitReq::default_instance_,
      GVBCrystallSubmitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystallSubmitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystallSubmitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBCrystallSubmitReq));
  GVBExitReq_descriptor_ = file->message_type(4);
  static const int GVBExitReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBExitReq, unused_),
  };
  GVBExitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBExitReq_descriptor_,
      GVBExitReq::default_instance_,
      GVBExitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBExitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBExitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBExitReq));
  GVBTransFailed_descriptor_ = file->message_type(5);
  static const int GVBTransFailed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBTransFailed, error_),
  };
  GVBTransFailed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBTransFailed_descriptor_,
      GVBTransFailed::default_instance_,
      GVBTransFailed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBTransFailed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBTransFailed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBTransFailed));
  GVBMonster_descriptor_ = file->message_type(6);
  static const int GVBMonster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBMonster, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBMonster, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBMonster, hpmax_),
  };
  GVBMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBMonster_descriptor_,
      GVBMonster::default_instance_,
      GVBMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBMonster));
  GVBDataReq_descriptor_ = file->message_type(7);
  static const int GVBDataReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDataReq, unused_),
  };
  GVBDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBDataReq_descriptor_,
      GVBDataReq::default_instance_,
      GVBDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBDataReq));
  GVBDatasRsp_descriptor_ = file->message_type(8);
  static const int GVBDatasRsp_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, team1score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, team2score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, selfscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, selfteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, crystalstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, crystalowner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, crystalborncountdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, crystalownerteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, crystalownerprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, m2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, m3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, killscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, breakkillscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, interceptcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, crystalcount_),
  };
  GVBDatasRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBDatasRsp_descriptor_,
      GVBDatasRsp::default_instance_,
      GVBDatasRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDatasRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBDatasRsp));
  GVBRankReq_descriptor_ = file->message_type(9);
  static const int GVBRankReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankReq, unused_),
  };
  GVBRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBRankReq_descriptor_,
      GVBRankReq::default_instance_,
      GVBRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBRankReq));
  GVBRankPlayerInfo_descriptor_ = file->message_type(10);
  static const int GVBRankPlayerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankPlayerInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankPlayerInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankPlayerInfo, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankPlayerInfo, cid_),
  };
  GVBRankPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBRankPlayerInfo_descriptor_,
      GVBRankPlayerInfo::default_instance_,
      GVBRankPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBRankPlayerInfo));
  GVBRankRsp_descriptor_ = file->message_type(11);
  static const int GVBRankRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankRsp, players_),
  };
  GVBRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBRankRsp_descriptor_,
      GVBRankRsp::default_instance_,
      GVBRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBRankRsp));
  GVBPlayerInfo_descriptor_ = file->message_type(12);
  static const int GVBPlayerInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, diecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, interceptcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, crystalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, killmonstercount_),
  };
  GVBPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBPlayerInfo_descriptor_,
      GVBPlayerInfo::default_instance_,
      GVBPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBPlayerInfo));
  GVBResultBC_descriptor_ = file->message_type(13);
  static const int GVBResultBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResultBC, winteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResultBC, players_),
  };
  GVBResultBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBResultBC_descriptor_,
      GVBResultBC::default_instance_,
      GVBResultBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResultBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResultBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBResultBC));
  GVBM1AttrChgBC_descriptor_ = file->message_type(14);
  static const int GVBM1AttrChgBC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM1AttrChgBC, m1_),
  };
  GVBM1AttrChgBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBM1AttrChgBC_descriptor_,
      GVBM1AttrChgBC::default_instance_,
      GVBM1AttrChgBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM1AttrChgBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM1AttrChgBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBM1AttrChgBC));
  GVBM2AttrChgBC_descriptor_ = file->message_type(15);
  static const int GVBM2AttrChgBC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM2AttrChgBC, m2_),
  };
  GVBM2AttrChgBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBM2AttrChgBC_descriptor_,
      GVBM2AttrChgBC::default_instance_,
      GVBM2AttrChgBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM2AttrChgBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM2AttrChgBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBM2AttrChgBC));
  GVBM3AttrChgBC_descriptor_ = file->message_type(16);
  static const int GVBM3AttrChgBC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM3AttrChgBC, m3_),
  };
  GVBM3AttrChgBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBM3AttrChgBC_descriptor_,
      GVBM3AttrChgBC::default_instance_,
      GVBM3AttrChgBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM3AttrChgBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBM3AttrChgBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBM3AttrChgBC));
  GVBSelfInfoUpdateNT_descriptor_ = file->message_type(17);
  static const int GVBSelfInfoUpdateNT_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, killscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, breakkillscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, interceptcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, crystalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, selfscore_),
  };
  GVBSelfInfoUpdateNT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBSelfInfoUpdateNT_descriptor_,
      GVBSelfInfoUpdateNT::default_instance_,
      GVBSelfInfoUpdateNT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBSelfInfoUpdateNT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBSelfInfoUpdateNT));
  GVBKillPlayerInfo_descriptor_ = file->message_type(18);
  static const int GVBKillPlayerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerInfo, killscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerInfo, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerInfo, team_),
  };
  GVBKillPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBKillPlayerInfo_descriptor_,
      GVBKillPlayerInfo::default_instance_,
      GVBKillPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBKillPlayerInfo));
  GVBKillPlayerBC_descriptor_ = file->message_type(19);
  static const int GVBKillPlayerBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerBC, atker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerBC, behit_),
  };
  GVBKillPlayerBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBKillPlayerBC_descriptor_,
      GVBKillPlayerBC::default_instance_,
      GVBKillPlayerBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBKillPlayerBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBKillPlayerBC));
  GVBResPointChg_descriptor_ = file->message_type(20);
  static const int GVBResPointChg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResPointChg, team1score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResPointChg, team2score_),
  };
  GVBResPointChg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBResPointChg_descriptor_,
      GVBResPointChg::default_instance_,
      GVBResPointChg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResPointChg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBResPointChg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBResPointChg));
  GVBCrystalStateBC_descriptor_ = file->message_type(21);
  static const int GVBCrystalStateBC_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalStateBC, crystalstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalStateBC, crystalborncountdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalStateBC, crystalowner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalStateBC, crystalownerteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalStateBC, crystalownerprofession_),
  };
  GVBCrystalStateBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBCrystalStateBC_descriptor_,
      GVBCrystalStateBC::default_instance_,
      GVBCrystalStateBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalStateBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalStateBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBCrystalStateBC));
  GVBCrystalCollectReq_descriptor_ = file->message_type(22);
  static const int GVBCrystalCollectReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalCollectReq, type_),
  };
  GVBCrystalCollectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBCrystalCollectReq_descriptor_,
      GVBCrystalCollectReq::default_instance_,
      GVBCrystalCollectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalCollectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalCollectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBCrystalCollectReq));
  GVBCrystalCollectRsp_descriptor_ = file->message_type(23);
  static const int GVBCrystalCollectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalCollectRsp, type_),
  };
  GVBCrystalCollectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBCrystalCollectRsp_descriptor_,
      GVBCrystalCollectRsp::default_instance_,
      GVBCrystalCollectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalCollectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalCollectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBCrystalCollectRsp));
  GVBDailyScoreDataReq_descriptor_ = file->message_type(24);
  static const int GVBDailyScoreDataReq_offsets_[1] = {
  };
  GVBDailyScoreDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBDailyScoreDataReq_descriptor_,
      GVBDailyScoreDataReq::default_instance_,
      GVBDailyScoreDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBDailyScoreDataReq));
  GVBDailyScoreDataRsp_descriptor_ = file->message_type(25);
  static const int GVBDailyScoreDataRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreDataRsp, rewardsstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreDataRsp, dailyscore_),
  };
  GVBDailyScoreDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBDailyScoreDataRsp_descriptor_,
      GVBDailyScoreDataRsp::default_instance_,
      GVBDailyScoreDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBDailyScoreDataRsp));
  GVBDailyScoreRewardRcvReq_descriptor_ = file->message_type(26);
  static const int GVBDailyScoreRewardRcvReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreRewardRcvReq, idx_),
  };
  GVBDailyScoreRewardRcvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBDailyScoreRewardRcvReq_descriptor_,
      GVBDailyScoreRewardRcvReq::default_instance_,
      GVBDailyScoreRewardRcvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreRewardRcvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreRewardRcvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBDailyScoreRewardRcvReq));
  GVBDailyScoreRewardRcvRsp_descriptor_ = file->message_type(27);
  static const int GVBDailyScoreRewardRcvRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreRewardRcvRsp, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreRewardRcvRsp, idx_),
  };
  GVBDailyScoreRewardRcvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBDailyScoreRewardRcvRsp_descriptor_,
      GVBDailyScoreRewardRcvRsp::default_instance_,
      GVBDailyScoreRewardRcvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreRewardRcvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBDailyScoreRewardRcvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBDailyScoreRewardRcvRsp));
  GVBRoomReq_descriptor_ = file->message_type(28);
  static const int GVBRoomReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomReq, fromlogicserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomReq, fromzone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomReq, enterprev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomReq, playersmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomReq, lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomReq, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomReq, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomReq, actid_),
  };
  GVBRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBRoomReq_descriptor_,
      GVBRoomReq::default_instance_,
      GVBRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBRoomReq));
  GVBRoomRsp_descriptor_ = file->message_type(29);
  static const int GVBRoomRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomRsp, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomRsp, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomRsp, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomRsp, error_),
  };
  GVBRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBRoomRsp_descriptor_,
      GVBRoomRsp::default_instance_,
      GVBRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBRoomRsp));
  GVBRoomCloseReq_descriptor_ = file->message_type(30);
  static const int GVBRoomCloseReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomCloseReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomCloseReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomCloseReq, option_),
  };
  GVBRoomCloseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBRoomCloseReq_descriptor_,
      GVBRoomCloseReq::default_instance_,
      GVBRoomCloseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomCloseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBRoomCloseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBRoomCloseReq));
  GVBCrystalOwnerPosReq_descriptor_ = file->message_type(31);
  static const int GVBCrystalOwnerPosReq_offsets_[1] = {
  };
  GVBCrystalOwnerPosReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBCrystalOwnerPosReq_descriptor_,
      GVBCrystalOwnerPosReq::default_instance_,
      GVBCrystalOwnerPosReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalOwnerPosReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalOwnerPosReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBCrystalOwnerPosReq));
  GVBCrystalOwnerPosRsp_descriptor_ = file->message_type(32);
  static const int GVBCrystalOwnerPosRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalOwnerPosRsp, pos_),
  };
  GVBCrystalOwnerPosRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBCrystalOwnerPosRsp_descriptor_,
      GVBCrystalOwnerPosRsp::default_instance_,
      GVBCrystalOwnerPosRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalOwnerPosRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBCrystalOwnerPosRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBCrystalOwnerPosRsp));
  WPPEnterReq_descriptor_ = file->message_type(33);
  static const int WPPEnterReq_offsets_[1] = {
  };
  WPPEnterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPEnterReq_descriptor_,
      WPPEnterReq::default_instance_,
      WPPEnterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPEnterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPEnterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPEnterReq));
  WPPExitReq_descriptor_ = file->message_type(34);
  static const int WPPExitReq_offsets_[1] = {
  };
  WPPExitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPExitReq_descriptor_,
      WPPExitReq::default_instance_,
      WPPExitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPExitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPExitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPExitReq));
  WPPEnterRsp_descriptor_ = file->message_type(35);
  static const int WPPEnterRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPEnterRsp, collecttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPEnterRsp, exptotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPEnterRsp, splashtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPEnterRsp, massagetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPEnterRsp, collectcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPEnterRsp, wpp_state_),
  };
  WPPEnterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPEnterRsp_descriptor_,
      WPPEnterRsp::default_instance_,
      WPPEnterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPEnterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPEnterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPEnterRsp));
  WPPPairPracticeReq_descriptor_ = file->message_type(36);
  static const int WPPPairPracticeReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPPairPracticeReq, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPPairPracticeReq, selfpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPPairPracticeReq, selfdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPPairPracticeReq, targetpos_),
  };
  WPPPairPracticeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPPairPracticeReq_descriptor_,
      WPPPairPracticeReq::default_instance_,
      WPPPairPracticeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPPairPracticeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPPairPracticeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPPairPracticeReq));
  WPPPairPracticeRsp_descriptor_ = file->message_type(37);
  static const int WPPPairPracticeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPPairPracticeRsp, error_),
  };
  WPPPairPracticeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPPairPracticeRsp_descriptor_,
      WPPPairPracticeRsp::default_instance_,
      WPPPairPracticeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPPairPracticeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPPairPracticeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPPairPracticeRsp));
  WPPMassageReq_descriptor_ = file->message_type(38);
  static const int WPPMassageReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPMassageReq, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPMassageReq, selfpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPMassageReq, selfdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPMassageReq, targetpos_),
  };
  WPPMassageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPMassageReq_descriptor_,
      WPPMassageReq::default_instance_,
      WPPMassageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPMassageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPMassageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPMassageReq));
  WPPMassageRsp_descriptor_ = file->message_type(39);
  static const int WPPMassageRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPMassageRsp, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPMassageRsp, massagetimes_),
  };
  WPPMassageRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPMassageRsp_descriptor_,
      WPPMassageRsp::default_instance_,
      WPPMassageRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPMassageRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPMassageRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPMassageRsp));
  WPPSplashReq_descriptor_ = file->message_type(40);
  static const int WPPSplashReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPSplashReq, skillreq_),
  };
  WPPSplashReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPSplashReq_descriptor_,
      WPPSplashReq::default_instance_,
      WPPSplashReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPSplashReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPSplashReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPSplashReq));
  WPPSplashRsp_descriptor_ = file->message_type(41);
  static const int WPPSplashRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPSplashRsp, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPSplashRsp, splashtimes_),
  };
  WPPSplashRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPSplashRsp_descriptor_,
      WPPSplashRsp::default_instance_,
      WPPSplashRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPSplashRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPSplashRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPSplashRsp));
  WPPCollectRsp_descriptor_ = file->message_type(42);
  static const int WPPCollectRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPCollectRsp, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPCollectRsp, collecttimes_),
  };
  WPPCollectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPCollectRsp_descriptor_,
      WPPCollectRsp::default_instance_,
      WPPCollectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPCollectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPCollectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPCollectRsp));
  WPPExpAddNt_descriptor_ = file->message_type(43);
  static const int WPPExpAddNt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPExpAddNt, exptotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPExpAddNt, expadd_),
  };
  WPPExpAddNt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPExpAddNt_descriptor_,
      WPPExpAddNt::default_instance_,
      WPPExpAddNt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPExpAddNt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPExpAddNt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPExpAddNt));
  WPPCollectCDNt_descriptor_ = file->message_type(44);
  static const int WPPCollectCDNt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPCollectCDNt, cd_),
  };
  WPPCollectCDNt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPCollectCDNt_descriptor_,
      WPPCollectCDNt::default_instance_,
      WPPCollectCDNt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPCollectCDNt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPCollectCDNt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPCollectCDNt));
  WPPActionNt_descriptor_ = file->message_type(45);
  static const int WPPActionNt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPActionNt, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPActionNt, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPActionNt, other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPActionNt, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPActionNt, dir_),
  };
  WPPActionNt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPActionNt_descriptor_,
      WPPActionNt::default_instance_,
      WPPActionNt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPActionNt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPActionNt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPActionNt));
  WPPCancelCurActReq_descriptor_ = file->message_type(46);
  static const int WPPCancelCurActReq_offsets_[1] = {
  };
  WPPCancelCurActReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPCancelCurActReq_descriptor_,
      WPPCancelCurActReq::default_instance_,
      WPPCancelCurActReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPCancelCurActReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPCancelCurActReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPCancelCurActReq));
  WPPCancelCurActRsp_descriptor_ = file->message_type(47);
  static const int WPPCancelCurActRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPCancelCurActRsp, error_),
  };
  WPPCancelCurActRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPPCancelCurActRsp_descriptor_,
      WPPCancelCurActRsp::default_instance_,
      WPPCancelCurActRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPCancelCurActRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPPCancelCurActRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPPCancelCurActRsp));
  CTPEnterReq_descriptor_ = file->message_type(48);
  static const int CTPEnterReq_offsets_[1] = {
  };
  CTPEnterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTPEnterReq_descriptor_,
      CTPEnterReq::default_instance_,
      CTPEnterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTPEnterReq));
  CTPExitReq_descriptor_ = file->message_type(49);
  static const int CTPExitReq_offsets_[1] = {
  };
  CTPExitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTPExitReq_descriptor_,
      CTPExitReq::default_instance_,
      CTPExitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPExitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPExitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTPExitReq));
  CTPPlayerInfo_descriptor_ = file->message_type(50);
  static const int CTPPlayerInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayerInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayerInfo, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayerInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayerInfo, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayerInfo, atkpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayerInfo, diecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayerInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayerInfo, isrebot_),
  };
  CTPPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTPPlayerInfo_descriptor_,
      CTPPlayerInfo::default_instance_,
      CTPPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTPPlayerInfo));
  CTPResult_descriptor_ = file->message_type(51);
  static const int CTPResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPResult, winteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPResult, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPResult, team1score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPResult, team2score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPResult, last_),
  };
  CTPResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTPResult_descriptor_,
      CTPResult::default_instance_,
      CTPResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTPResult));
  CTPEnterRsp_descriptor_ = file->message_type(52);
  static const int CTPEnterRsp_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, matchstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, readystarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, relifestarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, roundstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, roundstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, team1score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, team2score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, team1players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, team2players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, myscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, team1realplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, team2realplayers_),
  };
  CTPEnterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTPEnterRsp_descriptor_,
      CTPEnterRsp::default_instance_,
      CTPEnterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPEnterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTPEnterRsp));
  CTPReadyStart_descriptor_ = file->message_type(53);
  static const int CTPReadyStart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPReadyStart, readystarttime_),
  };
  CTPReadyStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTPReadyStart_descriptor_,
      CTPReadyStart::default_instance_,
      CTPReadyStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPReadyStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPReadyStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTPReadyStart));
  CTPRoundStart_descriptor_ = file->message_type(54);
  static const int CTPRoundStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPRoundStart, roundstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPRoundStart, roundstart_),
  };
  CTPRoundStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTPRoundStart_descriptor_,
      CTPRoundStart::default_instance_,
      CTPRoundStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPRoundStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPRoundStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTPRoundStart));
  CTPScoreRankNt_descriptor_ = file->message_type(55);
  static const int CTPScoreRankNt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPScoreRankNt, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPScoreRankNt, team1score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPScoreRankNt, team2score_),
  };
  CTPScoreRankNt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTPScoreRankNt_descriptor_,
      CTPScoreRankNt::default_instance_,
      CTPScoreRankNt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPScoreRankNt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPScoreRankNt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTPScoreRankNt));
  CTPScoreChgNt_descriptor_ = file->message_type(56);
  static const int CTPScoreChgNt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPScoreChgNt, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPScoreChgNt, team1score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPScoreChgNt, team2score_),
  };
  CTPScoreChgNt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTPScoreChgNt_descriptor_,
      CTPScoreChgNt::default_instance_,
      CTPScoreChgNt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPScoreChgNt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPScoreChgNt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTPScoreChgNt));
  CTPKillPlayerInfo_descriptor_ = file->message_type(57);
  static const int CTPKillPlayerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPKillPlayerInfo, killscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPKillPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPKillPlayerInfo, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPKillPlayerInfo, team_),
  };
  CTPKillPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTPKillPlayerInfo_descriptor_,
      CTPKillPlayerInfo::default_instance_,
      CTPKillPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPKillPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPKillPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTPKillPlayerInfo));
  CTPKillNt_descriptor_ = file->message_type(58);
  static const int CTPKillNt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPKillNt, atker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPKillNt, behit_),
  };
  CTPKillNt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTPKillNt_descriptor_,
      CTPKillNt::default_instance_,
      CTPKillNt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPKillNt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPKillNt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTPKillNt));
  CTPPlayersChgNt_descriptor_ = file->message_type(59);
  static const int CTPPlayersChgNt_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayersChgNt, team1players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayersChgNt, team2players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayersChgNt, team1realplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayersChgNt, team2realplayers_),
  };
  CTPPlayersChgNt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTPPlayersChgNt_descriptor_,
      CTPPlayersChgNt::default_instance_,
      CTPPlayersChgNt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayersChgNt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPPlayersChgNt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTPPlayersChgNt));
  GVBEnterError_descriptor_ = file->message_type(60);
  static const int GVBEnterError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterError, errcode_),
  };
  GVBEnterError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBEnterError_descriptor_,
      GVBEnterError::default_instance_,
      GVBEnterError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBEnterError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBEnterError));
  GMADatas_descriptor_ = file->message_type(61);
  static const int GMADatas_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADatas, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADatas, freetimeremain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADatas, freetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADatas, privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADatas, recvfreetimeprev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADatas, ispause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADatas, expget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADatas, getfreetimecd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADatas, exptotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADatas, expaccumulate_),
  };
  GMADatas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMADatas_descriptor_,
      GMADatas::default_instance_,
      GMADatas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADatas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADatas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMADatas));
  GMABossInfo_descriptor_ = file->message_type(62);
  static const int GMABossInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfo, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfo, posid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfo, cfgid_),
  };
  GMABossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMABossInfo_descriptor_,
      GMABossInfo::default_instance_,
      GMABossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMABossInfo));
  GMABossInfoReqData_descriptor_ = file->message_type(63);
  static const int GMABossInfoReqData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoReqData, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoReqData, posid_),
  };
  GMABossInfoReqData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMABossInfoReqData_descriptor_,
      GMABossInfoReqData::default_instance_,
      GMABossInfoReqData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoReqData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoReqData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMABossInfoReqData));
  GMABossInfoReq_descriptor_ = file->message_type(64);
  static const int GMABossInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoReq, list_),
  };
  GMABossInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMABossInfoReq_descriptor_,
      GMABossInfoReq::default_instance_,
      GMABossInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMABossInfoReq));
  GMABossInfoRsp_descriptor_ = file->message_type(65);
  static const int GMABossInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoRsp, bosslistinfo_),
  };
  GMABossInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMABossInfoRsp_descriptor_,
      GMABossInfoRsp::default_instance_,
      GMABossInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMABossInfoRsp));
  GMABossInfoSingleReq_descriptor_ = file->message_type(66);
  static const int GMABossInfoSingleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoSingleReq, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoSingleReq, posid_),
  };
  GMABossInfoSingleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMABossInfoSingleReq_descriptor_,
      GMABossInfoSingleReq::default_instance_,
      GMABossInfoSingleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoSingleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoSingleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMABossInfoSingleReq));
  GMABossInfoSingleRsp_descriptor_ = file->message_type(67);
  static const int GMABossInfoSingleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoSingleRsp, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoSingleRsp, posid_),
  };
  GMABossInfoSingleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMABossInfoSingleRsp_descriptor_,
      GMABossInfoSingleRsp::default_instance_,
      GMABossInfoSingleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoSingleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMABossInfoSingleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMABossInfoSingleRsp));
  GMAPauseReq_descriptor_ = file->message_type(68);
  static const int GMAPauseReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAPauseReq, ispause_),
  };
  GMAPauseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAPauseReq_descriptor_,
      GMAPauseReq::default_instance_,
      GMAPauseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAPauseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAPauseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAPauseReq));
  GMAPauseRsp_descriptor_ = file->message_type(69);
  static const int GMAPauseRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAPauseRsp, ispause_),
  };
  GMAPauseRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAPauseRsp_descriptor_,
      GMAPauseRsp::default_instance_,
      GMAPauseRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAPauseRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAPauseRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAPauseRsp));
  GMAPayReq_descriptor_ = file->message_type(70);
  static const int GMAPayReq_offsets_[1] = {
  };
  GMAPayReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAPayReq_descriptor_,
      GMAPayReq::default_instance_,
      GMAPayReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAPayReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAPayReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAPayReq));
  GMAPayRsp_descriptor_ = file->message_type(71);
  static const int GMAPayRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAPayRsp, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAPayRsp, privilege_),
  };
  GMAPayRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAPayRsp_descriptor_,
      GMAPayRsp::default_instance_,
      GMAPayRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAPayRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAPayRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAPayRsp));
  GMAEnterReq_descriptor_ = file->message_type(72);
  static const int GMAEnterReq_offsets_[1] = {
  };
  GMAEnterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAEnterReq_descriptor_,
      GMAEnterReq::default_instance_,
      GMAEnterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAEnterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAEnterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAEnterReq));
  GMAGotoFloorReq_descriptor_ = file->message_type(73);
  static const int GMAGotoFloorReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAGotoFloorReq, posidx_),
  };
  GMAGotoFloorReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAGotoFloorReq_descriptor_,
      GMAGotoFloorReq::default_instance_,
      GMAGotoFloorReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAGotoFloorReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAGotoFloorReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAGotoFloorReq));
  GMAGotoFloorRsp_descriptor_ = file->message_type(74);
  static const int GMAGotoFloorRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAGotoFloorRsp, error_),
  };
  GMAGotoFloorRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAGotoFloorRsp_descriptor_,
      GMAGotoFloorRsp::default_instance_,
      GMAGotoFloorRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAGotoFloorRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAGotoFloorRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAGotoFloorRsp));
  GMATimeRechargeReq_descriptor_ = file->message_type(75);
  static const int GMATimeRechargeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMATimeRechargeReq, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMATimeRechargeReq, count_),
  };
  GMATimeRechargeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMATimeRechargeReq_descriptor_,
      GMATimeRechargeReq::default_instance_,
      GMATimeRechargeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMATimeRechargeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMATimeRechargeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMATimeRechargeReq));
  GMATimeRechargeRsp_descriptor_ = file->message_type(76);
  static const int GMATimeRechargeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMATimeRechargeRsp, error_),
  };
  GMATimeRechargeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMATimeRechargeRsp_descriptor_,
      GMATimeRechargeRsp::default_instance_,
      GMATimeRechargeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMATimeRechargeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMATimeRechargeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMATimeRechargeRsp));
  GMAExitReq_descriptor_ = file->message_type(77);
  static const int GMAExitReq_offsets_[1] = {
  };
  GMAExitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAExitReq_descriptor_,
      GMAExitReq::default_instance_,
      GMAExitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAExitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAExitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAExitReq));
  GMAResultReq_descriptor_ = file->message_type(78);
  static const int GMAResultReq_offsets_[1] = {
  };
  GMAResultReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAResultReq_descriptor_,
      GMAResultReq::default_instance_,
      GMAResultReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAResultReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAResultReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAResultReq));
  GMAResultRsp_descriptor_ = file->message_type(79);
  static const int GMAResultRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAResultRsp, itemids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAResultRsp, itemcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAResultRsp, timeused_),
  };
  GMAResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAResultRsp_descriptor_,
      GMAResultRsp::default_instance_,
      GMAResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAResultRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GodValleyBattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBEnterReq_descriptor_, &GVBEnterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBEnterRsp_descriptor_, &GVBEnterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBSCrystalCollectReq_descriptor_, &GVBSCrystalCollectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBCrystallSubmitReq_descriptor_, &GVBCrystallSubmitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBExitReq_descriptor_, &GVBExitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBTransFailed_descriptor_, &GVBTransFailed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBMonster_descriptor_, &GVBMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBDataReq_descriptor_, &GVBDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBDatasRsp_descriptor_, &GVBDatasRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBRankReq_descriptor_, &GVBRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBRankPlayerInfo_descriptor_, &GVBRankPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBRankRsp_descriptor_, &GVBRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBPlayerInfo_descriptor_, &GVBPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBResultBC_descriptor_, &GVBResultBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBM1AttrChgBC_descriptor_, &GVBM1AttrChgBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBM2AttrChgBC_descriptor_, &GVBM2AttrChgBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBM3AttrChgBC_descriptor_, &GVBM3AttrChgBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBSelfInfoUpdateNT_descriptor_, &GVBSelfInfoUpdateNT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBKillPlayerInfo_descriptor_, &GVBKillPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBKillPlayerBC_descriptor_, &GVBKillPlayerBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBResPointChg_descriptor_, &GVBResPointChg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBCrystalStateBC_descriptor_, &GVBCrystalStateBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBCrystalCollectReq_descriptor_, &GVBCrystalCollectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBCrystalCollectRsp_descriptor_, &GVBCrystalCollectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBDailyScoreDataReq_descriptor_, &GVBDailyScoreDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBDailyScoreDataRsp_descriptor_, &GVBDailyScoreDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBDailyScoreRewardRcvReq_descriptor_, &GVBDailyScoreRewardRcvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBDailyScoreRewardRcvRsp_descriptor_, &GVBDailyScoreRewardRcvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBRoomReq_descriptor_, &GVBRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBRoomRsp_descriptor_, &GVBRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBRoomCloseReq_descriptor_, &GVBRoomCloseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBCrystalOwnerPosReq_descriptor_, &GVBCrystalOwnerPosReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBCrystalOwnerPosRsp_descriptor_, &GVBCrystalOwnerPosRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPEnterReq_descriptor_, &WPPEnterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPExitReq_descriptor_, &WPPExitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPEnterRsp_descriptor_, &WPPEnterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPPairPracticeReq_descriptor_, &WPPPairPracticeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPPairPracticeRsp_descriptor_, &WPPPairPracticeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPMassageReq_descriptor_, &WPPMassageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPMassageRsp_descriptor_, &WPPMassageRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPSplashReq_descriptor_, &WPPSplashReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPSplashRsp_descriptor_, &WPPSplashRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPCollectRsp_descriptor_, &WPPCollectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPExpAddNt_descriptor_, &WPPExpAddNt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPCollectCDNt_descriptor_, &WPPCollectCDNt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPActionNt_descriptor_, &WPPActionNt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPCancelCurActReq_descriptor_, &WPPCancelCurActReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPPCancelCurActRsp_descriptor_, &WPPCancelCurActRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTPEnterReq_descriptor_, &CTPEnterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTPExitReq_descriptor_, &CTPExitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTPPlayerInfo_descriptor_, &CTPPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTPResult_descriptor_, &CTPResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTPEnterRsp_descriptor_, &CTPEnterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTPReadyStart_descriptor_, &CTPReadyStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTPRoundStart_descriptor_, &CTPRoundStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTPScoreRankNt_descriptor_, &CTPScoreRankNt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTPScoreChgNt_descriptor_, &CTPScoreChgNt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTPKillPlayerInfo_descriptor_, &CTPKillPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTPKillNt_descriptor_, &CTPKillNt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTPPlayersChgNt_descriptor_, &CTPPlayersChgNt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBEnterError_descriptor_, &GVBEnterError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMADatas_descriptor_, &GMADatas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMABossInfo_descriptor_, &GMABossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMABossInfoReqData_descriptor_, &GMABossInfoReqData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMABossInfoReq_descriptor_, &GMABossInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMABossInfoRsp_descriptor_, &GMABossInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMABossInfoSingleReq_descriptor_, &GMABossInfoSingleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMABossInfoSingleRsp_descriptor_, &GMABossInfoSingleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAPauseReq_descriptor_, &GMAPauseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAPauseRsp_descriptor_, &GMAPauseRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAPayReq_descriptor_, &GMAPayReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAPayRsp_descriptor_, &GMAPayRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAEnterReq_descriptor_, &GMAEnterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAGotoFloorReq_descriptor_, &GMAGotoFloorReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAGotoFloorRsp_descriptor_, &GMAGotoFloorRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMATimeRechargeReq_descriptor_, &GMATimeRechargeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMATimeRechargeRsp_descriptor_, &GMATimeRechargeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAExitReq_descriptor_, &GMAExitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAResultReq_descriptor_, &GMAResultReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAResultRsp_descriptor_, &GMAResultRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GodValleyBattle_2eproto() {
  delete GVBEnterReq::default_instance_;
  delete GVBEnterReq_reflection_;
  delete GVBEnterRsp::default_instance_;
  delete GVBEnterRsp_reflection_;
  delete GVBSCrystalCollectReq::default_instance_;
  delete GVBSCrystalCollectReq_reflection_;
  delete GVBCrystallSubmitReq::default_instance_;
  delete GVBCrystallSubmitReq_reflection_;
  delete GVBExitReq::default_instance_;
  delete GVBExitReq_reflection_;
  delete GVBTransFailed::default_instance_;
  delete GVBTransFailed_reflection_;
  delete GVBMonster::default_instance_;
  delete GVBMonster_reflection_;
  delete GVBDataReq::default_instance_;
  delete GVBDataReq_reflection_;
  delete GVBDatasRsp::default_instance_;
  delete GVBDatasRsp_reflection_;
  delete GVBRankReq::default_instance_;
  delete GVBRankReq_reflection_;
  delete GVBRankPlayerInfo::default_instance_;
  delete GVBRankPlayerInfo_reflection_;
  delete GVBRankRsp::default_instance_;
  delete GVBRankRsp_reflection_;
  delete GVBPlayerInfo::default_instance_;
  delete GVBPlayerInfo_reflection_;
  delete GVBResultBC::default_instance_;
  delete GVBResultBC_reflection_;
  delete GVBM1AttrChgBC::default_instance_;
  delete GVBM1AttrChgBC_reflection_;
  delete GVBM2AttrChgBC::default_instance_;
  delete GVBM2AttrChgBC_reflection_;
  delete GVBM3AttrChgBC::default_instance_;
  delete GVBM3AttrChgBC_reflection_;
  delete GVBSelfInfoUpdateNT::default_instance_;
  delete GVBSelfInfoUpdateNT_reflection_;
  delete GVBKillPlayerInfo::default_instance_;
  delete GVBKillPlayerInfo_reflection_;
  delete GVBKillPlayerBC::default_instance_;
  delete GVBKillPlayerBC_reflection_;
  delete GVBResPointChg::default_instance_;
  delete GVBResPointChg_reflection_;
  delete GVBCrystalStateBC::default_instance_;
  delete GVBCrystalStateBC_reflection_;
  delete GVBCrystalCollectReq::default_instance_;
  delete GVBCrystalCollectReq_reflection_;
  delete GVBCrystalCollectRsp::default_instance_;
  delete GVBCrystalCollectRsp_reflection_;
  delete GVBDailyScoreDataReq::default_instance_;
  delete GVBDailyScoreDataReq_reflection_;
  delete GVBDailyScoreDataRsp::default_instance_;
  delete GVBDailyScoreDataRsp_reflection_;
  delete GVBDailyScoreRewardRcvReq::default_instance_;
  delete GVBDailyScoreRewardRcvReq_reflection_;
  delete GVBDailyScoreRewardRcvRsp::default_instance_;
  delete GVBDailyScoreRewardRcvRsp_reflection_;
  delete GVBRoomReq::default_instance_;
  delete GVBRoomReq_reflection_;
  delete GVBRoomRsp::default_instance_;
  delete GVBRoomRsp_reflection_;
  delete GVBRoomCloseReq::default_instance_;
  delete GVBRoomCloseReq_reflection_;
  delete GVBCrystalOwnerPosReq::default_instance_;
  delete GVBCrystalOwnerPosReq_reflection_;
  delete GVBCrystalOwnerPosRsp::default_instance_;
  delete GVBCrystalOwnerPosRsp_reflection_;
  delete WPPEnterReq::default_instance_;
  delete WPPEnterReq_reflection_;
  delete WPPExitReq::default_instance_;
  delete WPPExitReq_reflection_;
  delete WPPEnterRsp::default_instance_;
  delete WPPEnterRsp_reflection_;
  delete WPPPairPracticeReq::default_instance_;
  delete WPPPairPracticeReq_reflection_;
  delete WPPPairPracticeRsp::default_instance_;
  delete WPPPairPracticeRsp_reflection_;
  delete WPPMassageReq::default_instance_;
  delete WPPMassageReq_reflection_;
  delete WPPMassageRsp::default_instance_;
  delete WPPMassageRsp_reflection_;
  delete WPPSplashReq::default_instance_;
  delete WPPSplashReq_reflection_;
  delete WPPSplashRsp::default_instance_;
  delete WPPSplashRsp_reflection_;
  delete WPPCollectRsp::default_instance_;
  delete WPPCollectRsp_reflection_;
  delete WPPExpAddNt::default_instance_;
  delete WPPExpAddNt_reflection_;
  delete WPPCollectCDNt::default_instance_;
  delete WPPCollectCDNt_reflection_;
  delete WPPActionNt::default_instance_;
  delete WPPActionNt_reflection_;
  delete WPPCancelCurActReq::default_instance_;
  delete WPPCancelCurActReq_reflection_;
  delete WPPCancelCurActRsp::default_instance_;
  delete WPPCancelCurActRsp_reflection_;
  delete CTPEnterReq::default_instance_;
  delete CTPEnterReq_reflection_;
  delete CTPExitReq::default_instance_;
  delete CTPExitReq_reflection_;
  delete CTPPlayerInfo::default_instance_;
  delete CTPPlayerInfo_reflection_;
  delete CTPResult::default_instance_;
  delete CTPResult_reflection_;
  delete CTPEnterRsp::default_instance_;
  delete CTPEnterRsp_reflection_;
  delete CTPReadyStart::default_instance_;
  delete CTPReadyStart_reflection_;
  delete CTPRoundStart::default_instance_;
  delete CTPRoundStart_reflection_;
  delete CTPScoreRankNt::default_instance_;
  delete CTPScoreRankNt_reflection_;
  delete CTPScoreChgNt::default_instance_;
  delete CTPScoreChgNt_reflection_;
  delete CTPKillPlayerInfo::default_instance_;
  delete CTPKillPlayerInfo_reflection_;
  delete CTPKillNt::default_instance_;
  delete CTPKillNt_reflection_;
  delete CTPPlayersChgNt::default_instance_;
  delete CTPPlayersChgNt_reflection_;
  delete GVBEnterError::default_instance_;
  delete GVBEnterError_reflection_;
  delete GMADatas::default_instance_;
  delete GMADatas_reflection_;
  delete GMABossInfo::default_instance_;
  delete GMABossInfo_reflection_;
  delete GMABossInfoReqData::default_instance_;
  delete GMABossInfoReqData_reflection_;
  delete GMABossInfoReq::default_instance_;
  delete GMABossInfoReq_reflection_;
  delete GMABossInfoRsp::default_instance_;
  delete GMABossInfoRsp_reflection_;
  delete GMABossInfoSingleReq::default_instance_;
  delete GMABossInfoSingleReq_reflection_;
  delete GMABossInfoSingleRsp::default_instance_;
  delete GMABossInfoSingleRsp_reflection_;
  delete GMAPauseReq::default_instance_;
  delete GMAPauseReq_reflection_;
  delete GMAPauseRsp::default_instance_;
  delete GMAPauseRsp_reflection_;
  delete GMAPayReq::default_instance_;
  delete GMAPayReq_reflection_;
  delete GMAPayRsp::default_instance_;
  delete GMAPayRsp_reflection_;
  delete GMAEnterReq::default_instance_;
  delete GMAEnterReq_reflection_;
  delete GMAGotoFloorReq::default_instance_;
  delete GMAGotoFloorReq_reflection_;
  delete GMAGotoFloorRsp::default_instance_;
  delete GMAGotoFloorRsp_reflection_;
  delete GMATimeRechargeReq::default_instance_;
  delete GMATimeRechargeReq_reflection_;
  delete GMATimeRechargeRsp::default_instance_;
  delete GMATimeRechargeRsp_reflection_;
  delete GMAExitReq::default_instance_;
  delete GMAExitReq_reflection_;
  delete GMAResultReq::default_instance_;
  delete GMAResultReq_reflection_;
  delete GMAResultRsp::default_instance_;
  delete GMAResultRsp_reflection_;
}

void protobuf_AddDesc_GodValleyBattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::proto_ff::protobuf_AddDesc_Skill_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025GodValleyBattle.proto\022\010proto_ff\032\tCom.p"
    "roto\032\017ComDefine.proto\032\013Skill.proto\"\035\n\013GV"
    "BEnterReq\022\016\n\006unused\030\001 \002(\r\"\035\n\013GVBEnterRsp"
    "\022\016\n\006Result\030\001 \002(\r\"\'\n\025GVBSCrystalCollectRe"
    "q\022\016\n\006number\030\001 \002(\r\"*\n\024GVBCrystallSubmitRe"
    "q\022\022\n\nmonsterEid\030\001 \002(\004\"\034\n\nGVBExitReq\022\016\n\006u"
    "nused\030\001 \002(\r\"\037\n\016GVBTransFailed\022\r\n\005error\030\001"
    " \002(\r\"5\n\nGVBMonster\022\014\n\004team\030\001 \002(\r\022\n\n\002hp\030\002"
    " \002(\004\022\r\n\005hpmax\030\003 \002(\004\"\034\n\nGVBDataReq\022\016\n\006unu"
    "sed\030\001 \002(\r\"\324\003\n\013GVBDatasRsp\022\r\n\005state\030\001 \002(\r"
    "\022\021\n\tcountdown\030\002 \002(\r\022\022\n\nteam1Score\030\003 \001(\r\022"
    "\022\n\nteam2Score\030\004 \001(\r\022\021\n\tselfScore\030\005 \001(\r\022\020"
    "\n\010selfTeam\030\006 \001(\r\022\024\n\014crystalState\030\007 \001(\r\022\024"
    "\n\014crystalOwner\030\010 \001(\004\022\034\n\024crystalBornCount"
    "down\030\t \001(\r\022\030\n\020crystalOwnerTeam\030\n \001(\r\022\036\n\026"
    "crystalOwnerProfession\030\013 \001(\r\022 \n\002m1\030\014 \001(\013"
    "2\024.proto_ff.GVBMonster\022 \n\002m2\030\r \001(\0132\024.pro"
    "to_ff.GVBMonster\022 \n\002m3\030\016 \001(\0132\024.proto_ff."
    "GVBMonster\022\021\n\tkillCount\030\017 \001(\r\022\022\n\nkillsCo"
    "unt\030\020 \001(\r\022\027\n\017breakKillsCount\030\021 \001(\r\022\026\n\016in"
    "terceptCount\030\022 \001(\r\022\024\n\014crystalCount\030\023 \001(\r"
    "\"\034\n\nGVBRankReq\022\016\n\006unused\030\001 \002(\r\"Y\n\021GVBRan"
    "kPlayerInfo\022\014\n\004rank\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022"
    "\r\n\005score\030\003 \002(\r\022\014\n\004team\030\004 \002(\r\022\013\n\003cid\030\005 \002("
    "\004\":\n\nGVBRankRsp\022,\n\007players\030\001 \003(\0132\033.proto"
    "_ff.GVBRankPlayerInfo\"\247\001\n\rGVBPlayerInfo\022"
    "\r\n\005score\030\001 \002(\r\022\021\n\tkillCount\030\002 \002(\r\022\020\n\010die"
    "Count\030\003 \002(\r\022\026\n\016interceptCount\030\004 \002(\r\022\024\n\014c"
    "rystalCount\030\005 \002(\r\022\014\n\004name\030\006 \002(\t\022\014\n\004team\030"
    "\007 \002(\r\022\030\n\020killMonsterCount\030\010 \002(\r\"H\n\013GVBRe"
    "sultBC\022\017\n\007winTeam\030\001 \002(\r\022(\n\007players\030\002 \003(\013"
    "2\027.proto_ff.GVBPlayerInfo\"2\n\016GVBM1AttrCh"
    "gBC\022 \n\002m1\030\001 \002(\0132\024.proto_ff.GVBMonster\"2\n"
    "\016GVBM2AttrChgBC\022 \n\002m2\030\001 \002(\0132\024.proto_ff.G"
    "VBMonster\"2\n\016GVBM3AttrChgBC\022 \n\002m3\030\001 \002(\0132"
    "\024.proto_ff.GVBMonster\"\226\001\n\023GVBSelfInfoUpd"
    "ateNT\022\021\n\tkillCount\030\001 \001(\r\022\022\n\nkillsCount\030\002"
    " \001(\r\022\027\n\017breakKillsCount\030\003 \001(\r\022\026\n\016interce"
    "ptCount\030\004 \001(\r\022\024\n\014crystalCount\030\005 \001(\r\022\021\n\ts"
    "elfScore\030\006 \001(\r\"n\n\021GVBKillPlayerInfo\022\022\n\nk"
    "illsCount\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022)\n\006facade\030"
    "\003 \002(\0132\031.proto_ff.RoleFacadeProto\022\014\n\004team"
    "\030\004 \002(\r\"i\n\017GVBKillPlayerBC\022*\n\005atker\030\001 \002(\013"
    "2\033.proto_ff.GVBKillPlayerInfo\022*\n\005behit\030\002"
    " \002(\0132\033.proto_ff.GVBKillPlayerInfo\"8\n\016GVB"
    "ResPointChg\022\022\n\nteam1Score\030\001 \002(\r\022\022\n\nteam2"
    "Score\030\002 \002(\r\"\227\001\n\021GVBCrystalStateBC\022\024\n\014cry"
    "stalState\030\001 \002(\r\022\034\n\024crystalBornCountdown\030"
    "\002 \002(\r\022\024\n\014crystalOwner\030\003 \001(\004\022\030\n\020crystalOw"
    "nerTeam\030\004 \001(\r\022\036\n\026crystalOwnerProfession\030"
    "\005 \001(\r\"$\n\024GVBCrystalCollectReq\022\014\n\004type\030\001 "
    "\002(\r\"$\n\024GVBCrystalCollectRsp\022\014\n\004type\030\001 \002("
    "\r\"\026\n\024GVBDailyScoreDataReq\"@\n\024GVBDailySco"
    "reDataRsp\022\024\n\014rewardsState\030\001 \003(\r\022\022\n\ndaily"
    "Score\030\002 \002(\r\"(\n\031GVBDailyScoreRewardRcvReq"
    "\022\013\n\003idx\030\001 \002(\r\"7\n\031GVBDailyScoreRewardRcvR"
    "sp\022\r\n\005error\030\001 \002(\r\022\013\n\003idx\030\002 \001(\r\"\274\001\n\nGVBRo"
    "omReq\022\013\n\003cid\030\001 \002(\004\022\031\n\021fromLogicServerId\030"
    "\002 \002(\004\022\020\n\010fromZone\030\003 \002(\004\022\014\n\004type\030\004 \002(\r\022\021\n"
    "\tenterPrev\030\005 \002(\010\022\022\n\nplayersMax\030\006 \001(\r\022\020\n\010"
    "lifeTime\030\007 \001(\r\022\r\n\005mapId\030\010 \002(\r\022\017\n\007session"
    "\030\t \002(\004\022\r\n\005actId\030\n \002(\r\"f\n\nGVBRoomRsp\022\013\n\003c"
    "id\030\001 \002(\004\022\016\n\006roomId\030\002 \001(\004\022\r\n\005mapId\030\003 \002(\r\022"
    "\014\n\004type\030\004 \002(\r\022\017\n\007session\030\005 \002(\004\022\r\n\005error\030"
    "\006 \001(\r\"\?\n\017GVBRoomCloseReq\022\014\n\004type\030\001 \002(\r\022\016"
    "\n\006roomId\030\002 \002(\004\022\016\n\006option\030\003 \002(\r\"\027\n\025GVBCry"
    "stalOwnerPosReq\"9\n\025GVBCrystalOwnerPosRsp"
    "\022 \n\003pos\030\001 \002(\0132\023.proto_ff.Vector3PB\"\r\n\013WP"
    "PEnterReq\"\014\n\nWPPExitReq\"\206\001\n\013WPPEnterRsp\022"
    "\024\n\014collectTimes\030\001 \002(\r\022\020\n\010expTotal\030\002 \002(\004\022"
    "\023\n\013splashTimes\030\003 \002(\r\022\024\n\014massageTimes\030\004 \002"
    "(\r\022\021\n\tcollectCD\030\005 \002(\003\022\021\n\twpp_state\030\006 \002(\r"
    "\"\230\001\n\022WPPPairPracticeReq\022\016\n\006target\030\001 \002(\004\022"
    "$\n\007selfPos\030\002 \002(\0132\023.proto_ff.Vector3PB\022$\n"
    "\007selfDir\030\003 \002(\0132\023.proto_ff.Vector3PB\022&\n\tt"
    "argetPos\030\004 \002(\0132\023.proto_ff.Vector3PB\"#\n\022W"
    "PPPairPracticeRsp\022\r\n\005error\030\001 \002(\r\"\223\001\n\rWPP"
    "MassageReq\022\016\n\006target\030\001 \002(\004\022$\n\007selfPos\030\002 "
    "\002(\0132\023.proto_ff.Vector3PB\022$\n\007selfDir\030\003 \002("
    "\0132\023.proto_ff.Vector3PB\022&\n\ttargetPos\030\004 \002("
    "\0132\023.proto_ff.Vector3PB\"4\n\rWPPMassageRsp\022"
    "\r\n\005error\030\001 \002(\r\022\024\n\014massageTimes\030\002 \001(\r\"7\n\014"
    "WPPSplashReq\022\'\n\010skillReq\030\001 \002(\0132\025.proto_f"
    "f.SkillUseReq\"2\n\014WPPSplashRsp\022\r\n\005error\030\001"
    " \002(\r\022\023\n\013splashTimes\030\002 \002(\r\"4\n\rWPPCollectR"
    "sp\022\r\n\005error\030\001 \002(\r\022\024\n\014collectTimes\030\002 \001(\r\""
    "/\n\013WPPExpAddNt\022\020\n\010expTotal\030\001 \002(\004\022\016\n\006expA"
    "dd\030\002 \002(\004\"\034\n\016WPPCollectCDNt\022\n\n\002cd\030\001 \002(\004\"{"
    "\n\013WPPActionNt\022\014\n\004type\030\001 \002(\r\022\013\n\003cid\030\002 \002(\004"
    "\022\r\n\005other\030\003 \001(\004\022 \n\003pos\030\004 \001(\0132\023.proto_ff."
    "Vector3PB\022 \n\003dir\030\005 \001(\0132\023.proto_ff.Vector"
    "3PB\"\024\n\022WPPCancelCurActReq\"#\n\022WPPCancelCu"
    "rActRsp\022\r\n\005error\030\001 \002(\r\"\r\n\013CTPEnterReq\"\014\n"
    "\nCTPExitReq\"\241\001\n\rCTPPlayerInfo\022\013\n\003cid\030\001 \002"
    "(\004\022\014\n\004name\030\002 \002(\t\022\014\n\004team\030\003 \002(\r\022\020\n\010server"
    "Id\030\004 \002(\004\022\021\n\tkillCount\030\005 \002(\r\022\020\n\010atkPower\030"
    "\006 \002(\004\022\020\n\010dieCount\030\007 \002(\r\022\r\n\005score\030\010 \002(\r\022\017"
    "\n\007isRebot\030\t \002(\010\"y\n\tCTPResult\022\017\n\007winTeam\030"
    "\001 \002(\r\022%\n\004rank\030\002 \003(\0132\027.proto_ff.CTPPlayer"
    "Info\022\022\n\nteam1Score\030\003 \002(\r\022\022\n\nteam2Score\030\004"
    " \002(\r\022\014\n\004last\030\005 \002(\010\"\366\002\n\013CTPEnterRsp\022\026\n\016ma"
    "tchStartTime\030\001 \001(\004\022\026\n\016readyStartTime\030\002 \001"
    "(\004\022\027\n\017relifeStartTime\030\003 \001(\004\022\026\n\016roundStar"
    "tTime\030\004 \001(\004\022\022\n\nroundStart\030\005 \001(\r\022\022\n\nteam1"
    "Score\030\006 \002(\r\022\022\n\nteam2Score\030\007 \002(\r\022\024\n\014team1"
    "Players\030\010 \002(\r\022\024\n\014team2Players\030\t \002(\r\022\017\n\007m"
    "yScore\030\n \002(\r\022%\n\004rank\030\013 \003(\0132\027.proto_ff.CT"
    "PPlayerInfo\022\014\n\004team\030\014 \002(\r\022$\n\007results\030\r \003"
    "(\0132\023.proto_ff.CTPResult\022\030\n\020team1RealPlay"
    "ers\030\016 \001(\r\022\030\n\020team2RealPlayers\030\017 \001(\r\"\'\n\rC"
    "TPReadyStart\022\026\n\016readyStartTime\030\001 \002(\004\";\n\r"
    "CTPRoundStart\022\026\n\016roundStartTime\030\001 \002(\004\022\022\n"
    "\nroundStart\030\002 \002(\r\"_\n\016CTPScoreRankNt\022%\n\004r"
    "ank\030\001 \003(\0132\027.proto_ff.CTPPlayerInfo\022\022\n\nte"
    "am1Score\030\002 \002(\r\022\022\n\nteam2Score\030\003 \002(\r\"D\n\rCT"
    "PScoreChgNt\022\013\n\003cid\030\001 \002(\004\022\022\n\nteam1Score\030\002"
    " \002(\r\022\022\n\nteam2Score\030\003 \002(\r\"n\n\021CTPKillPlaye"
    "rInfo\022\022\n\nkillsCount\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022"
    ")\n\006facade\030\003 \002(\0132\031.proto_ff.RoleFacadePro"
    "to\022\014\n\004team\030\004 \002(\r\"c\n\tCTPKillNt\022*\n\005atker\030\001"
    " \002(\0132\033.proto_ff.CTPKillPlayerInfo\022*\n\005beh"
    "it\030\002 \002(\0132\033.proto_ff.CTPKillPlayerInfo\"q\n"
    "\017CTPPlayersChgNt\022\024\n\014team1Players\030\001 \002(\r\022\024"
    "\n\014team2Players\030\002 \002(\r\022\030\n\020team1RealPlayers"
    "\030\003 \002(\r\022\030\n\020team2RealPlayers\030\004 \002(\r\" \n\rGVBE"
    "nterError\022\017\n\007errcode\030\001 \002(\r\"\326\001\n\010GMADatas\022"
    "\022\n\nremainTime\030\001 \001(\r\022\026\n\016freeTimeRemain\030\002 "
    "\001(\r\022\020\n\010freeTime\030\003 \001(\r\022\021\n\tprivilege\030\004 \001(\r"
    "\022\030\n\020recvFreeTimePrev\030\005 \001(\004\022\017\n\007isPause\030\006 "
    "\001(\010\022\016\n\006expGet\030\007 \001(\r\022\025\n\rgetFreeTimeCD\030\010 \001"
    "(\r\022\020\n\010expTotal\030\t \001(\003\022\025\n\rexpAccumulate\030\n "
    "\001(\003\"<\n\013GMABossInfo\022\017\n\007players\030\001 \002(\r\022\r\n\005p"
    "osId\030\002 \002(\r\022\r\n\005cfgId\030\003 \002(\r\"2\n\022GMABossInfo"
    "ReqData\022\r\n\005cfgId\030\001 \002(\r\022\r\n\005posId\030\002 \002(\r\"<\n"
    "\016GMABossInfoReq\022*\n\004list\030\001 \003(\0132\034.proto_ff"
    ".GMABossInfoReqData\"=\n\016GMABossInfoRsp\022+\n"
    "\014bossListInfo\030\001 \003(\0132\025.proto_ff.GMABossIn"
    "fo\"4\n\024GMABossInfoSingleReq\022\r\n\005mapId\030\001 \002("
    "\r\022\r\n\005posId\030\002 \002(\r\"6\n\024GMABossInfoSingleRsp"
    "\022\017\n\007players\030\001 \002(\r\022\r\n\005posId\030\002 \002(\r\"\036\n\013GMAP"
    "auseReq\022\017\n\007isPause\030\001 \002(\010\"\036\n\013GMAPauseRsp\022"
    "\017\n\007isPause\030\001 \002(\010\"\013\n\tGMAPayReq\"-\n\tGMAPayR"
    "sp\022\r\n\005error\030\001 \002(\r\022\021\n\tprivilege\030\002 \002(\r\"\r\n\013"
    "GMAEnterReq\"!\n\017GMAGotoFloorReq\022\016\n\006posIdx"
    "\030\001 \002(\r\" \n\017GMAGotoFloorRsp\022\r\n\005error\030\001 \002(\r"
    "\"3\n\022GMATimeRechargeReq\022\016\n\006itemId\030\001 \002(\r\022\r"
    "\n\005count\030\002 \002(\r\"#\n\022GMATimeRechargeRsp\022\r\n\005e"
    "rror\030\001 \002(\r\"\014\n\nGMAExitReq\"\016\n\014GMAResultReq"
    "\"E\n\014GMAResultRsp\022\017\n\007itemIds\030\001 \003(\004\022\022\n\nite"
    "mCounts\030\002 \003(\004\022\020\n\010timeUsed\030\003 \002(\004", 5991);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GodValleyBattle.proto", &protobuf_RegisterTypes);
  GVBEnterReq::default_instance_ = new GVBEnterReq();
  GVBEnterRsp::default_instance_ = new GVBEnterRsp();
  GVBSCrystalCollectReq::default_instance_ = new GVBSCrystalCollectReq();
  GVBCrystallSubmitReq::default_instance_ = new GVBCrystallSubmitReq();
  GVBExitReq::default_instance_ = new GVBExitReq();
  GVBTransFailed::default_instance_ = new GVBTransFailed();
  GVBMonster::default_instance_ = new GVBMonster();
  GVBDataReq::default_instance_ = new GVBDataReq();
  GVBDatasRsp::default_instance_ = new GVBDatasRsp();
  GVBRankReq::default_instance_ = new GVBRankReq();
  GVBRankPlayerInfo::default_instance_ = new GVBRankPlayerInfo();
  GVBRankRsp::default_instance_ = new GVBRankRsp();
  GVBPlayerInfo::default_instance_ = new GVBPlayerInfo();
  GVBResultBC::default_instance_ = new GVBResultBC();
  GVBM1AttrChgBC::default_instance_ = new GVBM1AttrChgBC();
  GVBM2AttrChgBC::default_instance_ = new GVBM2AttrChgBC();
  GVBM3AttrChgBC::default_instance_ = new GVBM3AttrChgBC();
  GVBSelfInfoUpdateNT::default_instance_ = new GVBSelfInfoUpdateNT();
  GVBKillPlayerInfo::default_instance_ = new GVBKillPlayerInfo();
  GVBKillPlayerBC::default_instance_ = new GVBKillPlayerBC();
  GVBResPointChg::default_instance_ = new GVBResPointChg();
  GVBCrystalStateBC::default_instance_ = new GVBCrystalStateBC();
  GVBCrystalCollectReq::default_instance_ = new GVBCrystalCollectReq();
  GVBCrystalCollectRsp::default_instance_ = new GVBCrystalCollectRsp();
  GVBDailyScoreDataReq::default_instance_ = new GVBDailyScoreDataReq();
  GVBDailyScoreDataRsp::default_instance_ = new GVBDailyScoreDataRsp();
  GVBDailyScoreRewardRcvReq::default_instance_ = new GVBDailyScoreRewardRcvReq();
  GVBDailyScoreRewardRcvRsp::default_instance_ = new GVBDailyScoreRewardRcvRsp();
  GVBRoomReq::default_instance_ = new GVBRoomReq();
  GVBRoomRsp::default_instance_ = new GVBRoomRsp();
  GVBRoomCloseReq::default_instance_ = new GVBRoomCloseReq();
  GVBCrystalOwnerPosReq::default_instance_ = new GVBCrystalOwnerPosReq();
  GVBCrystalOwnerPosRsp::default_instance_ = new GVBCrystalOwnerPosRsp();
  WPPEnterReq::default_instance_ = new WPPEnterReq();
  WPPExitReq::default_instance_ = new WPPExitReq();
  WPPEnterRsp::default_instance_ = new WPPEnterRsp();
  WPPPairPracticeReq::default_instance_ = new WPPPairPracticeReq();
  WPPPairPracticeRsp::default_instance_ = new WPPPairPracticeRsp();
  WPPMassageReq::default_instance_ = new WPPMassageReq();
  WPPMassageRsp::default_instance_ = new WPPMassageRsp();
  WPPSplashReq::default_instance_ = new WPPSplashReq();
  WPPSplashRsp::default_instance_ = new WPPSplashRsp();
  WPPCollectRsp::default_instance_ = new WPPCollectRsp();
  WPPExpAddNt::default_instance_ = new WPPExpAddNt();
  WPPCollectCDNt::default_instance_ = new WPPCollectCDNt();
  WPPActionNt::default_instance_ = new WPPActionNt();
  WPPCancelCurActReq::default_instance_ = new WPPCancelCurActReq();
  WPPCancelCurActRsp::default_instance_ = new WPPCancelCurActRsp();
  CTPEnterReq::default_instance_ = new CTPEnterReq();
  CTPExitReq::default_instance_ = new CTPExitReq();
  CTPPlayerInfo::default_instance_ = new CTPPlayerInfo();
  CTPResult::default_instance_ = new CTPResult();
  CTPEnterRsp::default_instance_ = new CTPEnterRsp();
  CTPReadyStart::default_instance_ = new CTPReadyStart();
  CTPRoundStart::default_instance_ = new CTPRoundStart();
  CTPScoreRankNt::default_instance_ = new CTPScoreRankNt();
  CTPScoreChgNt::default_instance_ = new CTPScoreChgNt();
  CTPKillPlayerInfo::default_instance_ = new CTPKillPlayerInfo();
  CTPKillNt::default_instance_ = new CTPKillNt();
  CTPPlayersChgNt::default_instance_ = new CTPPlayersChgNt();
  GVBEnterError::default_instance_ = new GVBEnterError();
  GMADatas::default_instance_ = new GMADatas();
  GMABossInfo::default_instance_ = new GMABossInfo();
  GMABossInfoReqData::default_instance_ = new GMABossInfoReqData();
  GMABossInfoReq::default_instance_ = new GMABossInfoReq();
  GMABossInfoRsp::default_instance_ = new GMABossInfoRsp();
  GMABossInfoSingleReq::default_instance_ = new GMABossInfoSingleReq();
  GMABossInfoSingleRsp::default_instance_ = new GMABossInfoSingleRsp();
  GMAPauseReq::default_instance_ = new GMAPauseReq();
  GMAPauseRsp::default_instance_ = new GMAPauseRsp();
  GMAPayReq::default_instance_ = new GMAPayReq();
  GMAPayRsp::default_instance_ = new GMAPayRsp();
  GMAEnterReq::default_instance_ = new GMAEnterReq();
  GMAGotoFloorReq::default_instance_ = new GMAGotoFloorReq();
  GMAGotoFloorRsp::default_instance_ = new GMAGotoFloorRsp();
  GMATimeRechargeReq::default_instance_ = new GMATimeRechargeReq();
  GMATimeRechargeRsp::default_instance_ = new GMATimeRechargeRsp();
  GMAExitReq::default_instance_ = new GMAExitReq();
  GMAResultReq::default_instance_ = new GMAResultReq();
  GMAResultRsp::default_instance_ = new GMAResultRsp();
  GVBEnterReq::default_instance_->InitAsDefaultInstance();
  GVBEnterRsp::default_instance_->InitAsDefaultInstance();
  GVBSCrystalCollectReq::default_instance_->InitAsDefaultInstance();
  GVBCrystallSubmitReq::default_instance_->InitAsDefaultInstance();
  GVBExitReq::default_instance_->InitAsDefaultInstance();
  GVBTransFailed::default_instance_->InitAsDefaultInstance();
  GVBMonster::default_instance_->InitAsDefaultInstance();
  GVBDataReq::default_instance_->InitAsDefaultInstance();
  GVBDatasRsp::default_instance_->InitAsDefaultInstance();
  GVBRankReq::default_instance_->InitAsDefaultInstance();
  GVBRankPlayerInfo::default_instance_->InitAsDefaultInstance();
  GVBRankRsp::default_instance_->InitAsDefaultInstance();
  GVBPlayerInfo::default_instance_->InitAsDefaultInstance();
  GVBResultBC::default_instance_->InitAsDefaultInstance();
  GVBM1AttrChgBC::default_instance_->InitAsDefaultInstance();
  GVBM2AttrChgBC::default_instance_->InitAsDefaultInstance();
  GVBM3AttrChgBC::default_instance_->InitAsDefaultInstance();
  GVBSelfInfoUpdateNT::default_instance_->InitAsDefaultInstance();
  GVBKillPlayerInfo::default_instance_->InitAsDefaultInstance();
  GVBKillPlayerBC::default_instance_->InitAsDefaultInstance();
  GVBResPointChg::default_instance_->InitAsDefaultInstance();
  GVBCrystalStateBC::default_instance_->InitAsDefaultInstance();
  GVBCrystalCollectReq::default_instance_->InitAsDefaultInstance();
  GVBCrystalCollectRsp::default_instance_->InitAsDefaultInstance();
  GVBDailyScoreDataReq::default_instance_->InitAsDefaultInstance();
  GVBDailyScoreDataRsp::default_instance_->InitAsDefaultInstance();
  GVBDailyScoreRewardRcvReq::default_instance_->InitAsDefaultInstance();
  GVBDailyScoreRewardRcvRsp::default_instance_->InitAsDefaultInstance();
  GVBRoomReq::default_instance_->InitAsDefaultInstance();
  GVBRoomRsp::default_instance_->InitAsDefaultInstance();
  GVBRoomCloseReq::default_instance_->InitAsDefaultInstance();
  GVBCrystalOwnerPosReq::default_instance_->InitAsDefaultInstance();
  GVBCrystalOwnerPosRsp::default_instance_->InitAsDefaultInstance();
  WPPEnterReq::default_instance_->InitAsDefaultInstance();
  WPPExitReq::default_instance_->InitAsDefaultInstance();
  WPPEnterRsp::default_instance_->InitAsDefaultInstance();
  WPPPairPracticeReq::default_instance_->InitAsDefaultInstance();
  WPPPairPracticeRsp::default_instance_->InitAsDefaultInstance();
  WPPMassageReq::default_instance_->InitAsDefaultInstance();
  WPPMassageRsp::default_instance_->InitAsDefaultInstance();
  WPPSplashReq::default_instance_->InitAsDefaultInstance();
  WPPSplashRsp::default_instance_->InitAsDefaultInstance();
  WPPCollectRsp::default_instance_->InitAsDefaultInstance();
  WPPExpAddNt::default_instance_->InitAsDefaultInstance();
  WPPCollectCDNt::default_instance_->InitAsDefaultInstance();
  WPPActionNt::default_instance_->InitAsDefaultInstance();
  WPPCancelCurActReq::default_instance_->InitAsDefaultInstance();
  WPPCancelCurActRsp::default_instance_->InitAsDefaultInstance();
  CTPEnterReq::default_instance_->InitAsDefaultInstance();
  CTPExitReq::default_instance_->InitAsDefaultInstance();
  CTPPlayerInfo::default_instance_->InitAsDefaultInstance();
  CTPResult::default_instance_->InitAsDefaultInstance();
  CTPEnterRsp::default_instance_->InitAsDefaultInstance();
  CTPReadyStart::default_instance_->InitAsDefaultInstance();
  CTPRoundStart::default_instance_->InitAsDefaultInstance();
  CTPScoreRankNt::default_instance_->InitAsDefaultInstance();
  CTPScoreChgNt::default_instance_->InitAsDefaultInstance();
  CTPKillPlayerInfo::default_instance_->InitAsDefaultInstance();
  CTPKillNt::default_instance_->InitAsDefaultInstance();
  CTPPlayersChgNt::default_instance_->InitAsDefaultInstance();
  GVBEnterError::default_instance_->InitAsDefaultInstance();
  GMADatas::default_instance_->InitAsDefaultInstance();
  GMABossInfo::default_instance_->InitAsDefaultInstance();
  GMABossInfoReqData::default_instance_->InitAsDefaultInstance();
  GMABossInfoReq::default_instance_->InitAsDefaultInstance();
  GMABossInfoRsp::default_instance_->InitAsDefaultInstance();
  GMABossInfoSingleReq::default_instance_->InitAsDefaultInstance();
  GMABossInfoSingleRsp::default_instance_->InitAsDefaultInstance();
  GMAPauseReq::default_instance_->InitAsDefaultInstance();
  GMAPauseRsp::default_instance_->InitAsDefaultInstance();
  GMAPayReq::default_instance_->InitAsDefaultInstance();
  GMAPayRsp::default_instance_->InitAsDefaultInstance();
  GMAEnterReq::default_instance_->InitAsDefaultInstance();
  GMAGotoFloorReq::default_instance_->InitAsDefaultInstance();
  GMAGotoFloorRsp::default_instance_->InitAsDefaultInstance();
  GMATimeRechargeReq::default_instance_->InitAsDefaultInstance();
  GMATimeRechargeRsp::default_instance_->InitAsDefaultInstance();
  GMAExitReq::default_instance_->InitAsDefaultInstance();
  GMAResultReq::default_instance_->InitAsDefaultInstance();
  GMAResultRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GodValleyBattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GodValleyBattle_2eproto {
  StaticDescriptorInitializer_GodValleyBattle_2eproto() {
    protobuf_AddDesc_GodValleyBattle_2eproto();
  }
} static_descriptor_initializer_GodValleyBattle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GVBEnterReq::kUnusedFieldNumber;
#endif  // !_MSC_VER

GVBEnterReq::GVBEnterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBEnterReq::InitAsDefaultInstance() {
}

GVBEnterReq::GVBEnterReq(const GVBEnterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBEnterReq::SharedCtor() {
  _cached_size_ = 0;
  unused_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBEnterReq::~GVBEnterReq() {
  SharedDtor();
}

void GVBEnterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBEnterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBEnterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBEnterReq_descriptor_;
}

const GVBEnterReq& GVBEnterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBEnterReq* GVBEnterReq::default_instance_ = NULL;

GVBEnterReq* GVBEnterReq::New() const {
  return new GVBEnterReq;
}

void GVBEnterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unused_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBEnterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unused = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unused_)));
          set_has_unused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBEnterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBEnterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBEnterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unused = 1;
    if (has_unused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unused());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBEnterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBEnterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBEnterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBEnterReq::MergeFrom(const GVBEnterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unused()) {
      set_unused(from.unused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBEnterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBEnterReq::CopyFrom(const GVBEnterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBEnterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBEnterReq::Swap(GVBEnterReq* other) {
  if (other != this) {
    std::swap(unused_, other->unused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBEnterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBEnterReq_descriptor_;
  metadata.reflection = GVBEnterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBEnterRsp::kResultFieldNumber;
#endif  // !_MSC_VER

GVBEnterRsp::GVBEnterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBEnterRsp::InitAsDefaultInstance() {
}

GVBEnterRsp::GVBEnterRsp(const GVBEnterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBEnterRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBEnterRsp::~GVBEnterRsp() {
  SharedDtor();
}

void GVBEnterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBEnterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBEnterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBEnterRsp_descriptor_;
}

const GVBEnterRsp& GVBEnterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBEnterRsp* GVBEnterRsp::default_instance_ = NULL;

GVBEnterRsp* GVBEnterRsp::New() const {
  return new GVBEnterRsp;
}

void GVBEnterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBEnterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBEnterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBEnterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBEnterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBEnterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBEnterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBEnterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBEnterRsp::MergeFrom(const GVBEnterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBEnterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBEnterRsp::CopyFrom(const GVBEnterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBEnterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBEnterRsp::Swap(GVBEnterRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBEnterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBEnterRsp_descriptor_;
  metadata.reflection = GVBEnterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBSCrystalCollectReq::kNumberFieldNumber;
#endif  // !_MSC_VER

GVBSCrystalCollectReq::GVBSCrystalCollectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBSCrystalCollectReq::InitAsDefaultInstance() {
}

GVBSCrystalCollectReq::GVBSCrystalCollectReq(const GVBSCrystalCollectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBSCrystalCollectReq::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBSCrystalCollectReq::~GVBSCrystalCollectReq() {
  SharedDtor();
}

void GVBSCrystalCollectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBSCrystalCollectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBSCrystalCollectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBSCrystalCollectReq_descriptor_;
}

const GVBSCrystalCollectReq& GVBSCrystalCollectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBSCrystalCollectReq* GVBSCrystalCollectReq::default_instance_ = NULL;

GVBSCrystalCollectReq* GVBSCrystalCollectReq::New() const {
  return new GVBSCrystalCollectReq;
}

void GVBSCrystalCollectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBSCrystalCollectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBSCrystalCollectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBSCrystalCollectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBSCrystalCollectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBSCrystalCollectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBSCrystalCollectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBSCrystalCollectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBSCrystalCollectReq::MergeFrom(const GVBSCrystalCollectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBSCrystalCollectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBSCrystalCollectReq::CopyFrom(const GVBSCrystalCollectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBSCrystalCollectReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBSCrystalCollectReq::Swap(GVBSCrystalCollectReq* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBSCrystalCollectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBSCrystalCollectReq_descriptor_;
  metadata.reflection = GVBSCrystalCollectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBCrystallSubmitReq::kMonsterEidFieldNumber;
#endif  // !_MSC_VER

GVBCrystallSubmitReq::GVBCrystallSubmitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBCrystallSubmitReq::InitAsDefaultInstance() {
}

GVBCrystallSubmitReq::GVBCrystallSubmitReq(const GVBCrystallSubmitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBCrystallSubmitReq::SharedCtor() {
  _cached_size_ = 0;
  monstereid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBCrystallSubmitReq::~GVBCrystallSubmitReq() {
  SharedDtor();
}

void GVBCrystallSubmitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBCrystallSubmitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBCrystallSubmitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBCrystallSubmitReq_descriptor_;
}

const GVBCrystallSubmitReq& GVBCrystallSubmitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBCrystallSubmitReq* GVBCrystallSubmitReq::default_instance_ = NULL;

GVBCrystallSubmitReq* GVBCrystallSubmitReq::New() const {
  return new GVBCrystallSubmitReq;
}

void GVBCrystallSubmitReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monstereid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBCrystallSubmitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 monsterEid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &monstereid_)));
          set_has_monstereid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBCrystallSubmitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 monsterEid = 1;
  if (has_monstereid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->monstereid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBCrystallSubmitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 monsterEid = 1;
  if (has_monstereid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->monstereid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBCrystallSubmitReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 monsterEid = 1;
    if (has_monstereid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->monstereid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBCrystallSubmitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBCrystallSubmitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBCrystallSubmitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBCrystallSubmitReq::MergeFrom(const GVBCrystallSubmitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monstereid()) {
      set_monstereid(from.monstereid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBCrystallSubmitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBCrystallSubmitReq::CopyFrom(const GVBCrystallSubmitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBCrystallSubmitReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBCrystallSubmitReq::Swap(GVBCrystallSubmitReq* other) {
  if (other != this) {
    std::swap(monstereid_, other->monstereid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBCrystallSubmitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBCrystallSubmitReq_descriptor_;
  metadata.reflection = GVBCrystallSubmitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBExitReq::kUnusedFieldNumber;
#endif  // !_MSC_VER

GVBExitReq::GVBExitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBExitReq::InitAsDefaultInstance() {
}

GVBExitReq::GVBExitReq(const GVBExitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBExitReq::SharedCtor() {
  _cached_size_ = 0;
  unused_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBExitReq::~GVBExitReq() {
  SharedDtor();
}

void GVBExitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBExitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBExitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBExitReq_descriptor_;
}

const GVBExitReq& GVBExitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBExitReq* GVBExitReq::default_instance_ = NULL;

GVBExitReq* GVBExitReq::New() const {
  return new GVBExitReq;
}

void GVBExitReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unused_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBExitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unused = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unused_)));
          set_has_unused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBExitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBExitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBExitReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unused = 1;
    if (has_unused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unused());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBExitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBExitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBExitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBExitReq::MergeFrom(const GVBExitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unused()) {
      set_unused(from.unused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBExitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBExitReq::CopyFrom(const GVBExitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBExitReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBExitReq::Swap(GVBExitReq* other) {
  if (other != this) {
    std::swap(unused_, other->unused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBExitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBExitReq_descriptor_;
  metadata.reflection = GVBExitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBTransFailed::kErrorFieldNumber;
#endif  // !_MSC_VER

GVBTransFailed::GVBTransFailed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBTransFailed::InitAsDefaultInstance() {
}

GVBTransFailed::GVBTransFailed(const GVBTransFailed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBTransFailed::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBTransFailed::~GVBTransFailed() {
  SharedDtor();
}

void GVBTransFailed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBTransFailed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBTransFailed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBTransFailed_descriptor_;
}

const GVBTransFailed& GVBTransFailed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBTransFailed* GVBTransFailed::default_instance_ = NULL;

GVBTransFailed* GVBTransFailed::New() const {
  return new GVBTransFailed;
}

void GVBTransFailed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBTransFailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBTransFailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBTransFailed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBTransFailed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBTransFailed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBTransFailed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBTransFailed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBTransFailed::MergeFrom(const GVBTransFailed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBTransFailed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBTransFailed::CopyFrom(const GVBTransFailed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBTransFailed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBTransFailed::Swap(GVBTransFailed* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBTransFailed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBTransFailed_descriptor_;
  metadata.reflection = GVBTransFailed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBMonster::kTeamFieldNumber;
const int GVBMonster::kHpFieldNumber;
const int GVBMonster::kHpmaxFieldNumber;
#endif  // !_MSC_VER

GVBMonster::GVBMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBMonster::InitAsDefaultInstance() {
}

GVBMonster::GVBMonster(const GVBMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBMonster::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0u;
  hp_ = GOOGLE_ULONGLONG(0);
  hpmax_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBMonster::~GVBMonster() {
  SharedDtor();
}

void GVBMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBMonster_descriptor_;
}

const GVBMonster& GVBMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBMonster* GVBMonster::default_instance_ = NULL;

GVBMonster* GVBMonster::New() const {
  return new GVBMonster;
}

void GVBMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0u;
    hp_ = GOOGLE_ULONGLONG(0);
    hpmax_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // required uint64 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hpmax;
        break;
      }

      // required uint64 hpmax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // required uint64 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hp(), output);
  }

  // required uint64 hpmax = 3;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hpmax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // required uint64 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hp(), target);
  }

  // required uint64 hpmax = 3;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hpmax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // required uint64 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp());
    }

    // required uint64 hpmax = 3;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hpmax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBMonster::MergeFrom(const GVBMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBMonster::CopyFrom(const GVBMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBMonster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GVBMonster::Swap(GVBMonster* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(hp_, other->hp_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBMonster_descriptor_;
  metadata.reflection = GVBMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBDataReq::kUnusedFieldNumber;
#endif  // !_MSC_VER

GVBDataReq::GVBDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBDataReq::InitAsDefaultInstance() {
}

GVBDataReq::GVBDataReq(const GVBDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBDataReq::SharedCtor() {
  _cached_size_ = 0;
  unused_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBDataReq::~GVBDataReq() {
  SharedDtor();
}

void GVBDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBDataReq_descriptor_;
}

const GVBDataReq& GVBDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBDataReq* GVBDataReq::default_instance_ = NULL;

GVBDataReq* GVBDataReq::New() const {
  return new GVBDataReq;
}

void GVBDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unused_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unused = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unused_)));
          set_has_unused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unused = 1;
    if (has_unused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unused());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBDataReq::MergeFrom(const GVBDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unused()) {
      set_unused(from.unused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBDataReq::CopyFrom(const GVBDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBDataReq::Swap(GVBDataReq* other) {
  if (other != this) {
    std::swap(unused_, other->unused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBDataReq_descriptor_;
  metadata.reflection = GVBDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBDatasRsp::kStateFieldNumber;
const int GVBDatasRsp::kCountdownFieldNumber;
const int GVBDatasRsp::kTeam1ScoreFieldNumber;
const int GVBDatasRsp::kTeam2ScoreFieldNumber;
const int GVBDatasRsp::kSelfScoreFieldNumber;
const int GVBDatasRsp::kSelfTeamFieldNumber;
const int GVBDatasRsp::kCrystalStateFieldNumber;
const int GVBDatasRsp::kCrystalOwnerFieldNumber;
const int GVBDatasRsp::kCrystalBornCountdownFieldNumber;
const int GVBDatasRsp::kCrystalOwnerTeamFieldNumber;
const int GVBDatasRsp::kCrystalOwnerProfessionFieldNumber;
const int GVBDatasRsp::kM1FieldNumber;
const int GVBDatasRsp::kM2FieldNumber;
const int GVBDatasRsp::kM3FieldNumber;
const int GVBDatasRsp::kKillCountFieldNumber;
const int GVBDatasRsp::kKillsCountFieldNumber;
const int GVBDatasRsp::kBreakKillsCountFieldNumber;
const int GVBDatasRsp::kInterceptCountFieldNumber;
const int GVBDatasRsp::kCrystalCountFieldNumber;
#endif  // !_MSC_VER

GVBDatasRsp::GVBDatasRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBDatasRsp::InitAsDefaultInstance() {
  m1_ = const_cast< ::proto_ff::GVBMonster*>(&::proto_ff::GVBMonster::default_instance());
  m2_ = const_cast< ::proto_ff::GVBMonster*>(&::proto_ff::GVBMonster::default_instance());
  m3_ = const_cast< ::proto_ff::GVBMonster*>(&::proto_ff::GVBMonster::default_instance());
}

GVBDatasRsp::GVBDatasRsp(const GVBDatasRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBDatasRsp::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  countdown_ = 0u;
  team1score_ = 0u;
  team2score_ = 0u;
  selfscore_ = 0u;
  selfteam_ = 0u;
  crystalstate_ = 0u;
  crystalowner_ = GOOGLE_ULONGLONG(0);
  crystalborncountdown_ = 0u;
  crystalownerteam_ = 0u;
  crystalownerprofession_ = 0u;
  m1_ = NULL;
  m2_ = NULL;
  m3_ = NULL;
  killcount_ = 0u;
  killscount_ = 0u;
  breakkillscount_ = 0u;
  interceptcount_ = 0u;
  crystalcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBDatasRsp::~GVBDatasRsp() {
  SharedDtor();
}

void GVBDatasRsp::SharedDtor() {
  if (this != default_instance_) {
    delete m1_;
    delete m2_;
    delete m3_;
  }
}

void GVBDatasRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBDatasRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBDatasRsp_descriptor_;
}

const GVBDatasRsp& GVBDatasRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBDatasRsp* GVBDatasRsp::default_instance_ = NULL;

GVBDatasRsp* GVBDatasRsp::New() const {
  return new GVBDatasRsp;
}

void GVBDatasRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0u;
    countdown_ = 0u;
    team1score_ = 0u;
    team2score_ = 0u;
    selfscore_ = 0u;
    selfteam_ = 0u;
    crystalstate_ = 0u;
    crystalowner_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    crystalborncountdown_ = 0u;
    crystalownerteam_ = 0u;
    crystalownerprofession_ = 0u;
    if (has_m1()) {
      if (m1_ != NULL) m1_->::proto_ff::GVBMonster::Clear();
    }
    if (has_m2()) {
      if (m2_ != NULL) m2_->::proto_ff::GVBMonster::Clear();
    }
    if (has_m3()) {
      if (m3_ != NULL) m3_->::proto_ff::GVBMonster::Clear();
    }
    killcount_ = 0u;
    killscount_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    breakkillscount_ = 0u;
    interceptcount_ = 0u;
    crystalcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBDatasRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_countdown;
        break;
      }

      // required uint32 countdown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team1Score;
        break;
      }

      // optional uint32 team1Score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team1Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1score_)));
          set_has_team1score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team2Score;
        break;
      }

      // optional uint32 team2Score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team2Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2score_)));
          set_has_team2score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_selfScore;
        break;
      }

      // optional uint32 selfScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfscore_)));
          set_has_selfscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_selfTeam;
        break;
      }

      // optional uint32 selfTeam = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfTeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfteam_)));
          set_has_selfteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_crystalState;
        break;
      }

      // optional uint32 crystalState = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalstate_)));
          set_has_crystalstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_crystalOwner;
        break;
      }

      // optional uint64 crystalOwner = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalOwner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &crystalowner_)));
          set_has_crystalowner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_crystalBornCountdown;
        break;
      }

      // optional uint32 crystalBornCountdown = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalBornCountdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalborncountdown_)));
          set_has_crystalborncountdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_crystalOwnerTeam;
        break;
      }

      // optional uint32 crystalOwnerTeam = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalOwnerTeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalownerteam_)));
          set_has_crystalownerteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_crystalOwnerProfession;
        break;
      }

      // optional uint32 crystalOwnerProfession = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalOwnerProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalownerprofession_)));
          set_has_crystalownerprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m1;
        break;
      }

      // optional .proto_ff.GVBMonster m1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m2;
        break;
      }

      // optional .proto_ff.GVBMonster m2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m3;
        break;
      }

      // optional .proto_ff.GVBMonster m3 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_killCount;
        break;
      }

      // optional uint32 killCount = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_killsCount;
        break;
      }

      // optional uint32 killsCount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killscount_)));
          set_has_killscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_breakKillsCount;
        break;
      }

      // optional uint32 breakKillsCount = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breakKillsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &breakkillscount_)));
          set_has_breakkillscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_interceptCount;
        break;
      }

      // optional uint32 interceptCount = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interceptCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interceptcount_)));
          set_has_interceptcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_crystalCount;
        break;
      }

      // optional uint32 crystalCount = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalcount_)));
          set_has_crystalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBDatasRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  // required uint32 countdown = 2;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->countdown(), output);
  }

  // optional uint32 team1Score = 3;
  if (has_team1score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team1score(), output);
  }

  // optional uint32 team2Score = 4;
  if (has_team2score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team2score(), output);
  }

  // optional uint32 selfScore = 5;
  if (has_selfscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->selfscore(), output);
  }

  // optional uint32 selfTeam = 6;
  if (has_selfteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->selfteam(), output);
  }

  // optional uint32 crystalState = 7;
  if (has_crystalstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->crystalstate(), output);
  }

  // optional uint64 crystalOwner = 8;
  if (has_crystalowner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->crystalowner(), output);
  }

  // optional uint32 crystalBornCountdown = 9;
  if (has_crystalborncountdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->crystalborncountdown(), output);
  }

  // optional uint32 crystalOwnerTeam = 10;
  if (has_crystalownerteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->crystalownerteam(), output);
  }

  // optional uint32 crystalOwnerProfession = 11;
  if (has_crystalownerprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->crystalownerprofession(), output);
  }

  // optional .proto_ff.GVBMonster m1 = 12;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m1(), output);
  }

  // optional .proto_ff.GVBMonster m2 = 13;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->m2(), output);
  }

  // optional .proto_ff.GVBMonster m3 = 14;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->m3(), output);
  }

  // optional uint32 killCount = 15;
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->killcount(), output);
  }

  // optional uint32 killsCount = 16;
  if (has_killscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->killscount(), output);
  }

  // optional uint32 breakKillsCount = 17;
  if (has_breakkillscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->breakkillscount(), output);
  }

  // optional uint32 interceptCount = 18;
  if (has_interceptcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->interceptcount(), output);
  }

  // optional uint32 crystalCount = 19;
  if (has_crystalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->crystalcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBDatasRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  // required uint32 countdown = 2;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->countdown(), target);
  }

  // optional uint32 team1Score = 3;
  if (has_team1score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team1score(), target);
  }

  // optional uint32 team2Score = 4;
  if (has_team2score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team2score(), target);
  }

  // optional uint32 selfScore = 5;
  if (has_selfscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->selfscore(), target);
  }

  // optional uint32 selfTeam = 6;
  if (has_selfteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->selfteam(), target);
  }

  // optional uint32 crystalState = 7;
  if (has_crystalstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->crystalstate(), target);
  }

  // optional uint64 crystalOwner = 8;
  if (has_crystalowner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->crystalowner(), target);
  }

  // optional uint32 crystalBornCountdown = 9;
  if (has_crystalborncountdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->crystalborncountdown(), target);
  }

  // optional uint32 crystalOwnerTeam = 10;
  if (has_crystalownerteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->crystalownerteam(), target);
  }

  // optional uint32 crystalOwnerProfession = 11;
  if (has_crystalownerprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->crystalownerprofession(), target);
  }

  // optional .proto_ff.GVBMonster m1 = 12;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m1(), target);
  }

  // optional .proto_ff.GVBMonster m2 = 13;
  if (has_m2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->m2(), target);
  }

  // optional .proto_ff.GVBMonster m3 = 14;
  if (has_m3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->m3(), target);
  }

  // optional uint32 killCount = 15;
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->killcount(), target);
  }

  // optional uint32 killsCount = 16;
  if (has_killscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->killscount(), target);
  }

  // optional uint32 breakKillsCount = 17;
  if (has_breakkillscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->breakkillscount(), target);
  }

  // optional uint32 interceptCount = 18;
  if (has_interceptcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->interceptcount(), target);
  }

  // optional uint32 crystalCount = 19;
  if (has_crystalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->crystalcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBDatasRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required uint32 countdown = 2;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countdown());
    }

    // optional uint32 team1Score = 3;
    if (has_team1score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1score());
    }

    // optional uint32 team2Score = 4;
    if (has_team2score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2score());
    }

    // optional uint32 selfScore = 5;
    if (has_selfscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfscore());
    }

    // optional uint32 selfTeam = 6;
    if (has_selfteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfteam());
    }

    // optional uint32 crystalState = 7;
    if (has_crystalstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalstate());
    }

    // optional uint64 crystalOwner = 8;
    if (has_crystalowner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->crystalowner());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 crystalBornCountdown = 9;
    if (has_crystalborncountdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalborncountdown());
    }

    // optional uint32 crystalOwnerTeam = 10;
    if (has_crystalownerteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalownerteam());
    }

    // optional uint32 crystalOwnerProfession = 11;
    if (has_crystalownerprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalownerprofession());
    }

    // optional .proto_ff.GVBMonster m1 = 12;
    if (has_m1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m1());
    }

    // optional .proto_ff.GVBMonster m2 = 13;
    if (has_m2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m2());
    }

    // optional .proto_ff.GVBMonster m3 = 14;
    if (has_m3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m3());
    }

    // optional uint32 killCount = 15;
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcount());
    }

    // optional uint32 killsCount = 16;
    if (has_killscount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killscount());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 breakKillsCount = 17;
    if (has_breakkillscount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->breakkillscount());
    }

    // optional uint32 interceptCount = 18;
    if (has_interceptcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interceptcount());
    }

    // optional uint32 crystalCount = 19;
    if (has_crystalcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBDatasRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBDatasRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBDatasRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBDatasRsp::MergeFrom(const GVBDatasRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
    if (from.has_team1score()) {
      set_team1score(from.team1score());
    }
    if (from.has_team2score()) {
      set_team2score(from.team2score());
    }
    if (from.has_selfscore()) {
      set_selfscore(from.selfscore());
    }
    if (from.has_selfteam()) {
      set_selfteam(from.selfteam());
    }
    if (from.has_crystalstate()) {
      set_crystalstate(from.crystalstate());
    }
    if (from.has_crystalowner()) {
      set_crystalowner(from.crystalowner());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_crystalborncountdown()) {
      set_crystalborncountdown(from.crystalborncountdown());
    }
    if (from.has_crystalownerteam()) {
      set_crystalownerteam(from.crystalownerteam());
    }
    if (from.has_crystalownerprofession()) {
      set_crystalownerprofession(from.crystalownerprofession());
    }
    if (from.has_m1()) {
      mutable_m1()->::proto_ff::GVBMonster::MergeFrom(from.m1());
    }
    if (from.has_m2()) {
      mutable_m2()->::proto_ff::GVBMonster::MergeFrom(from.m2());
    }
    if (from.has_m3()) {
      mutable_m3()->::proto_ff::GVBMonster::MergeFrom(from.m3());
    }
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
    if (from.has_killscount()) {
      set_killscount(from.killscount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_breakkillscount()) {
      set_breakkillscount(from.breakkillscount());
    }
    if (from.has_interceptcount()) {
      set_interceptcount(from.interceptcount());
    }
    if (from.has_crystalcount()) {
      set_crystalcount(from.crystalcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBDatasRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBDatasRsp::CopyFrom(const GVBDatasRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBDatasRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_m1()) {
    if (!this->m1().IsInitialized()) return false;
  }
  if (has_m2()) {
    if (!this->m2().IsInitialized()) return false;
  }
  if (has_m3()) {
    if (!this->m3().IsInitialized()) return false;
  }
  return true;
}

void GVBDatasRsp::Swap(GVBDatasRsp* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(countdown_, other->countdown_);
    std::swap(team1score_, other->team1score_);
    std::swap(team2score_, other->team2score_);
    std::swap(selfscore_, other->selfscore_);
    std::swap(selfteam_, other->selfteam_);
    std::swap(crystalstate_, other->crystalstate_);
    std::swap(crystalowner_, other->crystalowner_);
    std::swap(crystalborncountdown_, other->crystalborncountdown_);
    std::swap(crystalownerteam_, other->crystalownerteam_);
    std::swap(crystalownerprofession_, other->crystalownerprofession_);
    std::swap(m1_, other->m1_);
    std::swap(m2_, other->m2_);
    std::swap(m3_, other->m3_);
    std::swap(killcount_, other->killcount_);
    std::swap(killscount_, other->killscount_);
    std::swap(breakkillscount_, other->breakkillscount_);
    std::swap(interceptcount_, other->interceptcount_);
    std::swap(crystalcount_, other->crystalcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBDatasRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBDatasRsp_descriptor_;
  metadata.reflection = GVBDatasRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBRankReq::kUnusedFieldNumber;
#endif  // !_MSC_VER

GVBRankReq::GVBRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBRankReq::InitAsDefaultInstance() {
}

GVBRankReq::GVBRankReq(const GVBRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBRankReq::SharedCtor() {
  _cached_size_ = 0;
  unused_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBRankReq::~GVBRankReq() {
  SharedDtor();
}

void GVBRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBRankReq_descriptor_;
}

const GVBRankReq& GVBRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBRankReq* GVBRankReq::default_instance_ = NULL;

GVBRankReq* GVBRankReq::New() const {
  return new GVBRankReq;
}

void GVBRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unused_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unused = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unused_)));
          set_has_unused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unused = 1;
  if (has_unused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unused = 1;
    if (has_unused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unused());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBRankReq::MergeFrom(const GVBRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unused()) {
      set_unused(from.unused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBRankReq::CopyFrom(const GVBRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBRankReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBRankReq::Swap(GVBRankReq* other) {
  if (other != this) {
    std::swap(unused_, other->unused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBRankReq_descriptor_;
  metadata.reflection = GVBRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBRankPlayerInfo::kRankFieldNumber;
const int GVBRankPlayerInfo::kNameFieldNumber;
const int GVBRankPlayerInfo::kScoreFieldNumber;
const int GVBRankPlayerInfo::kTeamFieldNumber;
const int GVBRankPlayerInfo::kCidFieldNumber;
#endif  // !_MSC_VER

GVBRankPlayerInfo::GVBRankPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBRankPlayerInfo::InitAsDefaultInstance() {
}

GVBRankPlayerInfo::GVBRankPlayerInfo(const GVBRankPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBRankPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0u;
  team_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBRankPlayerInfo::~GVBRankPlayerInfo() {
  SharedDtor();
}

void GVBRankPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GVBRankPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBRankPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBRankPlayerInfo_descriptor_;
}

const GVBRankPlayerInfo& GVBRankPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBRankPlayerInfo* GVBRankPlayerInfo::default_instance_ = NULL;

GVBRankPlayerInfo* GVBRankPlayerInfo::New() const {
  return new GVBRankPlayerInfo;
}

void GVBRankPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0u;
    team_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBRankPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required uint32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team;
        break;
      }

      // required uint32 team = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cid;
        break;
      }

      // required uint64 cid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBRankPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // required uint32 team = 4;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team(), output);
  }

  // required uint64 cid = 5;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBRankPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // required uint32 team = 4;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team(), target);
  }

  // required uint64 cid = 5;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBRankPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // required uint64 cid = 5;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBRankPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBRankPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBRankPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBRankPlayerInfo::MergeFrom(const GVBRankPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBRankPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBRankPlayerInfo::CopyFrom(const GVBRankPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBRankPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GVBRankPlayerInfo::Swap(GVBRankPlayerInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(team_, other->team_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBRankPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBRankPlayerInfo_descriptor_;
  metadata.reflection = GVBRankPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBRankRsp::kPlayersFieldNumber;
#endif  // !_MSC_VER

GVBRankRsp::GVBRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBRankRsp::InitAsDefaultInstance() {
}

GVBRankRsp::GVBRankRsp(const GVBRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBRankRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBRankRsp::~GVBRankRsp() {
  SharedDtor();
}

void GVBRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBRankRsp_descriptor_;
}

const GVBRankRsp& GVBRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBRankRsp* GVBRankRsp::default_instance_ = NULL;

GVBRankRsp* GVBRankRsp::New() const {
  return new GVBRankRsp;
}

void GVBRankRsp::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GVBRankPlayerInfo players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GVBRankPlayerInfo players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GVBRankPlayerInfo players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBRankRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GVBRankPlayerInfo players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBRankRsp::MergeFrom(const GVBRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBRankRsp::CopyFrom(const GVBRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBRankRsp::IsInitialized() const {

  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void GVBRankRsp::Swap(GVBRankRsp* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBRankRsp_descriptor_;
  metadata.reflection = GVBRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBPlayerInfo::kScoreFieldNumber;
const int GVBPlayerInfo::kKillCountFieldNumber;
const int GVBPlayerInfo::kDieCountFieldNumber;
const int GVBPlayerInfo::kInterceptCountFieldNumber;
const int GVBPlayerInfo::kCrystalCountFieldNumber;
const int GVBPlayerInfo::kNameFieldNumber;
const int GVBPlayerInfo::kTeamFieldNumber;
const int GVBPlayerInfo::kKillMonsterCountFieldNumber;
#endif  // !_MSC_VER

GVBPlayerInfo::GVBPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBPlayerInfo::InitAsDefaultInstance() {
}

GVBPlayerInfo::GVBPlayerInfo(const GVBPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  killcount_ = 0u;
  diecount_ = 0u;
  interceptcount_ = 0u;
  crystalcount_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_ = 0u;
  killmonstercount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBPlayerInfo::~GVBPlayerInfo() {
  SharedDtor();
}

void GVBPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GVBPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBPlayerInfo_descriptor_;
}

const GVBPlayerInfo& GVBPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBPlayerInfo* GVBPlayerInfo::default_instance_ = NULL;

GVBPlayerInfo* GVBPlayerInfo::New() const {
  return new GVBPlayerInfo;
}

void GVBPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
    killcount_ = 0u;
    diecount_ = 0u;
    interceptcount_ = 0u;
    crystalcount_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    team_ = 0u;
    killmonstercount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_killCount;
        break;
      }

      // required uint32 killCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dieCount;
        break;
      }

      // required uint32 dieCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dieCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diecount_)));
          set_has_diecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_interceptCount;
        break;
      }

      // required uint32 interceptCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interceptCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interceptcount_)));
          set_has_interceptcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_crystalCount;
        break;
      }

      // required uint32 crystalCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalcount_)));
          set_has_crystalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // required string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_team;
        break;
      }

      // required uint32 team = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_killMonsterCount;
        break;
      }

      // required uint32 killMonsterCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killMonsterCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killmonstercount_)));
          set_has_killmonstercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // required uint32 killCount = 2;
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killcount(), output);
  }

  // required uint32 dieCount = 3;
  if (has_diecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->diecount(), output);
  }

  // required uint32 interceptCount = 4;
  if (has_interceptcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->interceptcount(), output);
  }

  // required uint32 crystalCount = 5;
  if (has_crystalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crystalcount(), output);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // required uint32 team = 7;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team(), output);
  }

  // required uint32 killMonsterCount = 8;
  if (has_killmonstercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->killmonstercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  // required uint32 killCount = 2;
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killcount(), target);
  }

  // required uint32 dieCount = 3;
  if (has_diecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->diecount(), target);
  }

  // required uint32 interceptCount = 4;
  if (has_interceptcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->interceptcount(), target);
  }

  // required uint32 crystalCount = 5;
  if (has_crystalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crystalcount(), target);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // required uint32 team = 7;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->team(), target);
  }

  // required uint32 killMonsterCount = 8;
  if (has_killmonstercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->killmonstercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 killCount = 2;
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcount());
    }

    // required uint32 dieCount = 3;
    if (has_diecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diecount());
    }

    // required uint32 interceptCount = 4;
    if (has_interceptcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interceptcount());
    }

    // required uint32 crystalCount = 5;
    if (has_crystalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalcount());
    }

    // required string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 team = 7;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // required uint32 killMonsterCount = 8;
    if (has_killmonstercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killmonstercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBPlayerInfo::MergeFrom(const GVBPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
    if (from.has_diecount()) {
      set_diecount(from.diecount());
    }
    if (from.has_interceptcount()) {
      set_interceptcount(from.interceptcount());
    }
    if (from.has_crystalcount()) {
      set_crystalcount(from.crystalcount());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_killmonstercount()) {
      set_killmonstercount(from.killmonstercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBPlayerInfo::CopyFrom(const GVBPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void GVBPlayerInfo::Swap(GVBPlayerInfo* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(killcount_, other->killcount_);
    std::swap(diecount_, other->diecount_);
    std::swap(interceptcount_, other->interceptcount_);
    std::swap(crystalcount_, other->crystalcount_);
    std::swap(name_, other->name_);
    std::swap(team_, other->team_);
    std::swap(killmonstercount_, other->killmonstercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBPlayerInfo_descriptor_;
  metadata.reflection = GVBPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBResultBC::kWinTeamFieldNumber;
const int GVBResultBC::kPlayersFieldNumber;
#endif  // !_MSC_VER

GVBResultBC::GVBResultBC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBResultBC::InitAsDefaultInstance() {
}

GVBResultBC::GVBResultBC(const GVBResultBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBResultBC::SharedCtor() {
  _cached_size_ = 0;
  winteam_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBResultBC::~GVBResultBC() {
  SharedDtor();
}

void GVBResultBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBResultBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBResultBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBResultBC_descriptor_;
}

const GVBResultBC& GVBResultBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBResultBC* GVBResultBC::default_instance_ = NULL;

GVBResultBC* GVBResultBC::New() const {
  return new GVBResultBC;
}

void GVBResultBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winteam_ = 0u;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBResultBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 winTeam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winteam_)));
          set_has_winteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }

      // repeated .proto_ff.GVBPlayerInfo players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBResultBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 winTeam = 1;
  if (has_winteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->winteam(), output);
  }

  // repeated .proto_ff.GVBPlayerInfo players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBResultBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 winTeam = 1;
  if (has_winteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->winteam(), target);
  }

  // repeated .proto_ff.GVBPlayerInfo players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBResultBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 winTeam = 1;
    if (has_winteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winteam());
    }

  }
  // repeated .proto_ff.GVBPlayerInfo players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBResultBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBResultBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBResultBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBResultBC::MergeFrom(const GVBResultBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winteam()) {
      set_winteam(from.winteam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBResultBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBResultBC::CopyFrom(const GVBResultBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBResultBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void GVBResultBC::Swap(GVBResultBC* other) {
  if (other != this) {
    std::swap(winteam_, other->winteam_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBResultBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBResultBC_descriptor_;
  metadata.reflection = GVBResultBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBM1AttrChgBC::kM1FieldNumber;
#endif  // !_MSC_VER

GVBM1AttrChgBC::GVBM1AttrChgBC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBM1AttrChgBC::InitAsDefaultInstance() {
  m1_ = const_cast< ::proto_ff::GVBMonster*>(&::proto_ff::GVBMonster::default_instance());
}

GVBM1AttrChgBC::GVBM1AttrChgBC(const GVBM1AttrChgBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBM1AttrChgBC::SharedCtor() {
  _cached_size_ = 0;
  m1_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBM1AttrChgBC::~GVBM1AttrChgBC() {
  SharedDtor();
}

void GVBM1AttrChgBC::SharedDtor() {
  if (this != default_instance_) {
    delete m1_;
  }
}

void GVBM1AttrChgBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBM1AttrChgBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBM1AttrChgBC_descriptor_;
}

const GVBM1AttrChgBC& GVBM1AttrChgBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBM1AttrChgBC* GVBM1AttrChgBC::default_instance_ = NULL;

GVBM1AttrChgBC* GVBM1AttrChgBC::New() const {
  return new GVBM1AttrChgBC;
}

void GVBM1AttrChgBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m1()) {
      if (m1_ != NULL) m1_->::proto_ff::GVBMonster::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBM1AttrChgBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.GVBMonster m1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBM1AttrChgBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.GVBMonster m1 = 1;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBM1AttrChgBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.GVBMonster m1 = 1;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBM1AttrChgBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.GVBMonster m1 = 1;
    if (has_m1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBM1AttrChgBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBM1AttrChgBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBM1AttrChgBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBM1AttrChgBC::MergeFrom(const GVBM1AttrChgBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m1()) {
      mutable_m1()->::proto_ff::GVBMonster::MergeFrom(from.m1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBM1AttrChgBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBM1AttrChgBC::CopyFrom(const GVBM1AttrChgBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBM1AttrChgBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_m1()) {
    if (!this->m1().IsInitialized()) return false;
  }
  return true;
}

void GVBM1AttrChgBC::Swap(GVBM1AttrChgBC* other) {
  if (other != this) {
    std::swap(m1_, other->m1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBM1AttrChgBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBM1AttrChgBC_descriptor_;
  metadata.reflection = GVBM1AttrChgBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBM2AttrChgBC::kM2FieldNumber;
#endif  // !_MSC_VER

GVBM2AttrChgBC::GVBM2AttrChgBC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBM2AttrChgBC::InitAsDefaultInstance() {
  m2_ = const_cast< ::proto_ff::GVBMonster*>(&::proto_ff::GVBMonster::default_instance());
}

GVBM2AttrChgBC::GVBM2AttrChgBC(const GVBM2AttrChgBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBM2AttrChgBC::SharedCtor() {
  _cached_size_ = 0;
  m2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBM2AttrChgBC::~GVBM2AttrChgBC() {
  SharedDtor();
}

void GVBM2AttrChgBC::SharedDtor() {
  if (this != default_instance_) {
    delete m2_;
  }
}

void GVBM2AttrChgBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBM2AttrChgBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBM2AttrChgBC_descriptor_;
}

const GVBM2AttrChgBC& GVBM2AttrChgBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBM2AttrChgBC* GVBM2AttrChgBC::default_instance_ = NULL;

GVBM2AttrChgBC* GVBM2AttrChgBC::New() const {
  return new GVBM2AttrChgBC;
}

void GVBM2AttrChgBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m2()) {
      if (m2_ != NULL) m2_->::proto_ff::GVBMonster::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBM2AttrChgBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.GVBMonster m2 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBM2AttrChgBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.GVBMonster m2 = 1;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBM2AttrChgBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.GVBMonster m2 = 1;
  if (has_m2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBM2AttrChgBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.GVBMonster m2 = 1;
    if (has_m2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBM2AttrChgBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBM2AttrChgBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBM2AttrChgBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBM2AttrChgBC::MergeFrom(const GVBM2AttrChgBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m2()) {
      mutable_m2()->::proto_ff::GVBMonster::MergeFrom(from.m2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBM2AttrChgBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBM2AttrChgBC::CopyFrom(const GVBM2AttrChgBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBM2AttrChgBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_m2()) {
    if (!this->m2().IsInitialized()) return false;
  }
  return true;
}

void GVBM2AttrChgBC::Swap(GVBM2AttrChgBC* other) {
  if (other != this) {
    std::swap(m2_, other->m2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBM2AttrChgBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBM2AttrChgBC_descriptor_;
  metadata.reflection = GVBM2AttrChgBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBM3AttrChgBC::kM3FieldNumber;
#endif  // !_MSC_VER

GVBM3AttrChgBC::GVBM3AttrChgBC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBM3AttrChgBC::InitAsDefaultInstance() {
  m3_ = const_cast< ::proto_ff::GVBMonster*>(&::proto_ff::GVBMonster::default_instance());
}

GVBM3AttrChgBC::GVBM3AttrChgBC(const GVBM3AttrChgBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBM3AttrChgBC::SharedCtor() {
  _cached_size_ = 0;
  m3_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBM3AttrChgBC::~GVBM3AttrChgBC() {
  SharedDtor();
}

void GVBM3AttrChgBC::SharedDtor() {
  if (this != default_instance_) {
    delete m3_;
  }
}

void GVBM3AttrChgBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBM3AttrChgBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBM3AttrChgBC_descriptor_;
}

const GVBM3AttrChgBC& GVBM3AttrChgBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBM3AttrChgBC* GVBM3AttrChgBC::default_instance_ = NULL;

GVBM3AttrChgBC* GVBM3AttrChgBC::New() const {
  return new GVBM3AttrChgBC;
}

void GVBM3AttrChgBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m3()) {
      if (m3_ != NULL) m3_->::proto_ff::GVBMonster::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBM3AttrChgBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.GVBMonster m3 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBM3AttrChgBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.GVBMonster m3 = 1;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBM3AttrChgBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.GVBMonster m3 = 1;
  if (has_m3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBM3AttrChgBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.GVBMonster m3 = 1;
    if (has_m3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBM3AttrChgBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBM3AttrChgBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBM3AttrChgBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBM3AttrChgBC::MergeFrom(const GVBM3AttrChgBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m3()) {
      mutable_m3()->::proto_ff::GVBMonster::MergeFrom(from.m3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBM3AttrChgBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBM3AttrChgBC::CopyFrom(const GVBM3AttrChgBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBM3AttrChgBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_m3()) {
    if (!this->m3().IsInitialized()) return false;
  }
  return true;
}

void GVBM3AttrChgBC::Swap(GVBM3AttrChgBC* other) {
  if (other != this) {
    std::swap(m3_, other->m3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBM3AttrChgBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBM3AttrChgBC_descriptor_;
  metadata.reflection = GVBM3AttrChgBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBSelfInfoUpdateNT::kKillCountFieldNumber;
const int GVBSelfInfoUpdateNT::kKillsCountFieldNumber;
const int GVBSelfInfoUpdateNT::kBreakKillsCountFieldNumber;
const int GVBSelfInfoUpdateNT::kInterceptCountFieldNumber;
const int GVBSelfInfoUpdateNT::kCrystalCountFieldNumber;
const int GVBSelfInfoUpdateNT::kSelfScoreFieldNumber;
#endif  // !_MSC_VER

GVBSelfInfoUpdateNT::GVBSelfInfoUpdateNT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBSelfInfoUpdateNT::InitAsDefaultInstance() {
}

GVBSelfInfoUpdateNT::GVBSelfInfoUpdateNT(const GVBSelfInfoUpdateNT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBSelfInfoUpdateNT::SharedCtor() {
  _cached_size_ = 0;
  killcount_ = 0u;
  killscount_ = 0u;
  breakkillscount_ = 0u;
  interceptcount_ = 0u;
  crystalcount_ = 0u;
  selfscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBSelfInfoUpdateNT::~GVBSelfInfoUpdateNT() {
  SharedDtor();
}

void GVBSelfInfoUpdateNT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBSelfInfoUpdateNT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBSelfInfoUpdateNT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBSelfInfoUpdateNT_descriptor_;
}

const GVBSelfInfoUpdateNT& GVBSelfInfoUpdateNT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBSelfInfoUpdateNT* GVBSelfInfoUpdateNT::default_instance_ = NULL;

GVBSelfInfoUpdateNT* GVBSelfInfoUpdateNT::New() const {
  return new GVBSelfInfoUpdateNT;
}

void GVBSelfInfoUpdateNT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killcount_ = 0u;
    killscount_ = 0u;
    breakkillscount_ = 0u;
    interceptcount_ = 0u;
    crystalcount_ = 0u;
    selfscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBSelfInfoUpdateNT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 killCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_killsCount;
        break;
      }

      // optional uint32 killsCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killscount_)));
          set_has_killscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_breakKillsCount;
        break;
      }

      // optional uint32 breakKillsCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breakKillsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &breakkillscount_)));
          set_has_breakkillscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_interceptCount;
        break;
      }

      // optional uint32 interceptCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interceptCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interceptcount_)));
          set_has_interceptcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_crystalCount;
        break;
      }

      // optional uint32 crystalCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalcount_)));
          set_has_crystalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_selfScore;
        break;
      }

      // optional uint32 selfScore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfscore_)));
          set_has_selfscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBSelfInfoUpdateNT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 killCount = 1;
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->killcount(), output);
  }

  // optional uint32 killsCount = 2;
  if (has_killscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killscount(), output);
  }

  // optional uint32 breakKillsCount = 3;
  if (has_breakkillscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->breakkillscount(), output);
  }

  // optional uint32 interceptCount = 4;
  if (has_interceptcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->interceptcount(), output);
  }

  // optional uint32 crystalCount = 5;
  if (has_crystalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crystalcount(), output);
  }

  // optional uint32 selfScore = 6;
  if (has_selfscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->selfscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBSelfInfoUpdateNT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 killCount = 1;
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->killcount(), target);
  }

  // optional uint32 killsCount = 2;
  if (has_killscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killscount(), target);
  }

  // optional uint32 breakKillsCount = 3;
  if (has_breakkillscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->breakkillscount(), target);
  }

  // optional uint32 interceptCount = 4;
  if (has_interceptcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->interceptcount(), target);
  }

  // optional uint32 crystalCount = 5;
  if (has_crystalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crystalcount(), target);
  }

  // optional uint32 selfScore = 6;
  if (has_selfscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->selfscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBSelfInfoUpdateNT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 killCount = 1;
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcount());
    }

    // optional uint32 killsCount = 2;
    if (has_killscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killscount());
    }

    // optional uint32 breakKillsCount = 3;
    if (has_breakkillscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->breakkillscount());
    }

    // optional uint32 interceptCount = 4;
    if (has_interceptcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interceptcount());
    }

    // optional uint32 crystalCount = 5;
    if (has_crystalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalcount());
    }

    // optional uint32 selfScore = 6;
    if (has_selfscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBSelfInfoUpdateNT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBSelfInfoUpdateNT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBSelfInfoUpdateNT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBSelfInfoUpdateNT::MergeFrom(const GVBSelfInfoUpdateNT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
    if (from.has_killscount()) {
      set_killscount(from.killscount());
    }
    if (from.has_breakkillscount()) {
      set_breakkillscount(from.breakkillscount());
    }
    if (from.has_interceptcount()) {
      set_interceptcount(from.interceptcount());
    }
    if (from.has_crystalcount()) {
      set_crystalcount(from.crystalcount());
    }
    if (from.has_selfscore()) {
      set_selfscore(from.selfscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBSelfInfoUpdateNT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBSelfInfoUpdateNT::CopyFrom(const GVBSelfInfoUpdateNT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBSelfInfoUpdateNT::IsInitialized() const {

  return true;
}

void GVBSelfInfoUpdateNT::Swap(GVBSelfInfoUpdateNT* other) {
  if (other != this) {
    std::swap(killcount_, other->killcount_);
    std::swap(killscount_, other->killscount_);
    std::swap(breakkillscount_, other->breakkillscount_);
    std::swap(interceptcount_, other->interceptcount_);
    std::swap(crystalcount_, other->crystalcount_);
    std::swap(selfscore_, other->selfscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBSelfInfoUpdateNT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBSelfInfoUpdateNT_descriptor_;
  metadata.reflection = GVBSelfInfoUpdateNT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBKillPlayerInfo::kKillsCountFieldNumber;
const int GVBKillPlayerInfo::kNameFieldNumber;
const int GVBKillPlayerInfo::kFacadeFieldNumber;
const int GVBKillPlayerInfo::kTeamFieldNumber;
#endif  // !_MSC_VER

GVBKillPlayerInfo::GVBKillPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBKillPlayerInfo::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

GVBKillPlayerInfo::GVBKillPlayerInfo(const GVBKillPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBKillPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  killscount_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  facade_ = NULL;
  team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBKillPlayerInfo::~GVBKillPlayerInfo() {
  SharedDtor();
}

void GVBKillPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void GVBKillPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBKillPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBKillPlayerInfo_descriptor_;
}

const GVBKillPlayerInfo& GVBKillPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBKillPlayerInfo* GVBKillPlayerInfo::default_instance_ = NULL;

GVBKillPlayerInfo* GVBKillPlayerInfo::New() const {
  return new GVBKillPlayerInfo;
}

void GVBKillPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killscount_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    team_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBKillPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 killsCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killscount_)));
          set_has_killscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_facade;
        break;
      }

      // required .proto_ff.RoleFacadeProto facade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team;
        break;
      }

      // required uint32 team = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBKillPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 killsCount = 1;
  if (has_killscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->killscount(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required .proto_ff.RoleFacadeProto facade = 3;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->facade(), output);
  }

  // required uint32 team = 4;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBKillPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 killsCount = 1;
  if (has_killscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->killscount(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .proto_ff.RoleFacadeProto facade = 3;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->facade(), target);
  }

  // required uint32 team = 4;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBKillPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 killsCount = 1;
    if (has_killscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killscount());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .proto_ff.RoleFacadeProto facade = 3;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // required uint32 team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBKillPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBKillPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBKillPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBKillPlayerInfo::MergeFrom(const GVBKillPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killscount()) {
      set_killscount(from.killscount());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBKillPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBKillPlayerInfo::CopyFrom(const GVBKillPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBKillPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void GVBKillPlayerInfo::Swap(GVBKillPlayerInfo* other) {
  if (other != this) {
    std::swap(killscount_, other->killscount_);
    std::swap(name_, other->name_);
    std::swap(facade_, other->facade_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBKillPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBKillPlayerInfo_descriptor_;
  metadata.reflection = GVBKillPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBKillPlayerBC::kAtkerFieldNumber;
const int GVBKillPlayerBC::kBehitFieldNumber;
#endif  // !_MSC_VER

GVBKillPlayerBC::GVBKillPlayerBC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBKillPlayerBC::InitAsDefaultInstance() {
  atker_ = const_cast< ::proto_ff::GVBKillPlayerInfo*>(&::proto_ff::GVBKillPlayerInfo::default_instance());
  behit_ = const_cast< ::proto_ff::GVBKillPlayerInfo*>(&::proto_ff::GVBKillPlayerInfo::default_instance());
}

GVBKillPlayerBC::GVBKillPlayerBC(const GVBKillPlayerBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBKillPlayerBC::SharedCtor() {
  _cached_size_ = 0;
  atker_ = NULL;
  behit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBKillPlayerBC::~GVBKillPlayerBC() {
  SharedDtor();
}

void GVBKillPlayerBC::SharedDtor() {
  if (this != default_instance_) {
    delete atker_;
    delete behit_;
  }
}

void GVBKillPlayerBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBKillPlayerBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBKillPlayerBC_descriptor_;
}

const GVBKillPlayerBC& GVBKillPlayerBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBKillPlayerBC* GVBKillPlayerBC::default_instance_ = NULL;

GVBKillPlayerBC* GVBKillPlayerBC::New() const {
  return new GVBKillPlayerBC;
}

void GVBKillPlayerBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_atker()) {
      if (atker_ != NULL) atker_->::proto_ff::GVBKillPlayerInfo::Clear();
    }
    if (has_behit()) {
      if (behit_ != NULL) behit_->::proto_ff::GVBKillPlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBKillPlayerBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.GVBKillPlayerInfo atker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_behit;
        break;
      }

      // required .proto_ff.GVBKillPlayerInfo behit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_behit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_behit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBKillPlayerBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.GVBKillPlayerInfo atker = 1;
  if (has_atker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->atker(), output);
  }

  // required .proto_ff.GVBKillPlayerInfo behit = 2;
  if (has_behit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->behit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBKillPlayerBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.GVBKillPlayerInfo atker = 1;
  if (has_atker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->atker(), target);
  }

  // required .proto_ff.GVBKillPlayerInfo behit = 2;
  if (has_behit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->behit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBKillPlayerBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.GVBKillPlayerInfo atker = 1;
    if (has_atker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atker());
    }

    // required .proto_ff.GVBKillPlayerInfo behit = 2;
    if (has_behit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->behit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBKillPlayerBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBKillPlayerBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBKillPlayerBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBKillPlayerBC::MergeFrom(const GVBKillPlayerBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atker()) {
      mutable_atker()->::proto_ff::GVBKillPlayerInfo::MergeFrom(from.atker());
    }
    if (from.has_behit()) {
      mutable_behit()->::proto_ff::GVBKillPlayerInfo::MergeFrom(from.behit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBKillPlayerBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBKillPlayerBC::CopyFrom(const GVBKillPlayerBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBKillPlayerBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_atker()) {
    if (!this->atker().IsInitialized()) return false;
  }
  if (has_behit()) {
    if (!this->behit().IsInitialized()) return false;
  }
  return true;
}

void GVBKillPlayerBC::Swap(GVBKillPlayerBC* other) {
  if (other != this) {
    std::swap(atker_, other->atker_);
    std::swap(behit_, other->behit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBKillPlayerBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBKillPlayerBC_descriptor_;
  metadata.reflection = GVBKillPlayerBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBResPointChg::kTeam1ScoreFieldNumber;
const int GVBResPointChg::kTeam2ScoreFieldNumber;
#endif  // !_MSC_VER

GVBResPointChg::GVBResPointChg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBResPointChg::InitAsDefaultInstance() {
}

GVBResPointChg::GVBResPointChg(const GVBResPointChg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBResPointChg::SharedCtor() {
  _cached_size_ = 0;
  team1score_ = 0u;
  team2score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBResPointChg::~GVBResPointChg() {
  SharedDtor();
}

void GVBResPointChg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBResPointChg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBResPointChg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBResPointChg_descriptor_;
}

const GVBResPointChg& GVBResPointChg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBResPointChg* GVBResPointChg::default_instance_ = NULL;

GVBResPointChg* GVBResPointChg::New() const {
  return new GVBResPointChg;
}

void GVBResPointChg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team1score_ = 0u;
    team2score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBResPointChg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 team1Score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1score_)));
          set_has_team1score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team2Score;
        break;
      }

      // required uint32 team2Score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team2Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2score_)));
          set_has_team2score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBResPointChg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 team1Score = 1;
  if (has_team1score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team1score(), output);
  }

  // required uint32 team2Score = 2;
  if (has_team2score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team2score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBResPointChg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 team1Score = 1;
  if (has_team1score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team1score(), target);
  }

  // required uint32 team2Score = 2;
  if (has_team2score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team2score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBResPointChg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 team1Score = 1;
    if (has_team1score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1score());
    }

    // required uint32 team2Score = 2;
    if (has_team2score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBResPointChg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBResPointChg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBResPointChg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBResPointChg::MergeFrom(const GVBResPointChg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team1score()) {
      set_team1score(from.team1score());
    }
    if (from.has_team2score()) {
      set_team2score(from.team2score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBResPointChg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBResPointChg::CopyFrom(const GVBResPointChg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBResPointChg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GVBResPointChg::Swap(GVBResPointChg* other) {
  if (other != this) {
    std::swap(team1score_, other->team1score_);
    std::swap(team2score_, other->team2score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBResPointChg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBResPointChg_descriptor_;
  metadata.reflection = GVBResPointChg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBCrystalStateBC::kCrystalStateFieldNumber;
const int GVBCrystalStateBC::kCrystalBornCountdownFieldNumber;
const int GVBCrystalStateBC::kCrystalOwnerFieldNumber;
const int GVBCrystalStateBC::kCrystalOwnerTeamFieldNumber;
const int GVBCrystalStateBC::kCrystalOwnerProfessionFieldNumber;
#endif  // !_MSC_VER

GVBCrystalStateBC::GVBCrystalStateBC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBCrystalStateBC::InitAsDefaultInstance() {
}

GVBCrystalStateBC::GVBCrystalStateBC(const GVBCrystalStateBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBCrystalStateBC::SharedCtor() {
  _cached_size_ = 0;
  crystalstate_ = 0u;
  crystalborncountdown_ = 0u;
  crystalowner_ = GOOGLE_ULONGLONG(0);
  crystalownerteam_ = 0u;
  crystalownerprofession_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBCrystalStateBC::~GVBCrystalStateBC() {
  SharedDtor();
}

void GVBCrystalStateBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBCrystalStateBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBCrystalStateBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBCrystalStateBC_descriptor_;
}

const GVBCrystalStateBC& GVBCrystalStateBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBCrystalStateBC* GVBCrystalStateBC::default_instance_ = NULL;

GVBCrystalStateBC* GVBCrystalStateBC::New() const {
  return new GVBCrystalStateBC;
}

void GVBCrystalStateBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    crystalstate_ = 0u;
    crystalborncountdown_ = 0u;
    crystalowner_ = GOOGLE_ULONGLONG(0);
    crystalownerteam_ = 0u;
    crystalownerprofession_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBCrystalStateBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 crystalState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalstate_)));
          set_has_crystalstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crystalBornCountdown;
        break;
      }

      // required uint32 crystalBornCountdown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalBornCountdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalborncountdown_)));
          set_has_crystalborncountdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_crystalOwner;
        break;
      }

      // optional uint64 crystalOwner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalOwner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &crystalowner_)));
          set_has_crystalowner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_crystalOwnerTeam;
        break;
      }

      // optional uint32 crystalOwnerTeam = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalOwnerTeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalownerteam_)));
          set_has_crystalownerteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_crystalOwnerProfession;
        break;
      }

      // optional uint32 crystalOwnerProfession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalOwnerProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalownerprofession_)));
          set_has_crystalownerprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBCrystalStateBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 crystalState = 1;
  if (has_crystalstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->crystalstate(), output);
  }

  // required uint32 crystalBornCountdown = 2;
  if (has_crystalborncountdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crystalborncountdown(), output);
  }

  // optional uint64 crystalOwner = 3;
  if (has_crystalowner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->crystalowner(), output);
  }

  // optional uint32 crystalOwnerTeam = 4;
  if (has_crystalownerteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crystalownerteam(), output);
  }

  // optional uint32 crystalOwnerProfession = 5;
  if (has_crystalownerprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crystalownerprofession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBCrystalStateBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 crystalState = 1;
  if (has_crystalstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->crystalstate(), target);
  }

  // required uint32 crystalBornCountdown = 2;
  if (has_crystalborncountdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crystalborncountdown(), target);
  }

  // optional uint64 crystalOwner = 3;
  if (has_crystalowner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->crystalowner(), target);
  }

  // optional uint32 crystalOwnerTeam = 4;
  if (has_crystalownerteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crystalownerteam(), target);
  }

  // optional uint32 crystalOwnerProfession = 5;
  if (has_crystalownerprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crystalownerprofession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBCrystalStateBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 crystalState = 1;
    if (has_crystalstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalstate());
    }

    // required uint32 crystalBornCountdown = 2;
    if (has_crystalborncountdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalborncountdown());
    }

    // optional uint64 crystalOwner = 3;
    if (has_crystalowner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->crystalowner());
    }

    // optional uint32 crystalOwnerTeam = 4;
    if (has_crystalownerteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalownerteam());
    }

    // optional uint32 crystalOwnerProfession = 5;
    if (has_crystalownerprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalownerprofession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBCrystalStateBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBCrystalStateBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBCrystalStateBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBCrystalStateBC::MergeFrom(const GVBCrystalStateBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crystalstate()) {
      set_crystalstate(from.crystalstate());
    }
    if (from.has_crystalborncountdown()) {
      set_crystalborncountdown(from.crystalborncountdown());
    }
    if (from.has_crystalowner()) {
      set_crystalowner(from.crystalowner());
    }
    if (from.has_crystalownerteam()) {
      set_crystalownerteam(from.crystalownerteam());
    }
    if (from.has_crystalownerprofession()) {
      set_crystalownerprofession(from.crystalownerprofession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBCrystalStateBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBCrystalStateBC::CopyFrom(const GVBCrystalStateBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBCrystalStateBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GVBCrystalStateBC::Swap(GVBCrystalStateBC* other) {
  if (other != this) {
    std::swap(crystalstate_, other->crystalstate_);
    std::swap(crystalborncountdown_, other->crystalborncountdown_);
    std::swap(crystalowner_, other->crystalowner_);
    std::swap(crystalownerteam_, other->crystalownerteam_);
    std::swap(crystalownerprofession_, other->crystalownerprofession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBCrystalStateBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBCrystalStateBC_descriptor_;
  metadata.reflection = GVBCrystalStateBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBCrystalCollectReq::kTypeFieldNumber;
#endif  // !_MSC_VER

GVBCrystalCollectReq::GVBCrystalCollectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBCrystalCollectReq::InitAsDefaultInstance() {
}

GVBCrystalCollectReq::GVBCrystalCollectReq(const GVBCrystalCollectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBCrystalCollectReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBCrystalCollectReq::~GVBCrystalCollectReq() {
  SharedDtor();
}

void GVBCrystalCollectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBCrystalCollectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBCrystalCollectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBCrystalCollectReq_descriptor_;
}

const GVBCrystalCollectReq& GVBCrystalCollectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBCrystalCollectReq* GVBCrystalCollectReq::default_instance_ = NULL;

GVBCrystalCollectReq* GVBCrystalCollectReq::New() const {
  return new GVBCrystalCollectReq;
}

void GVBCrystalCollectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBCrystalCollectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBCrystalCollectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBCrystalCollectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBCrystalCollectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBCrystalCollectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBCrystalCollectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBCrystalCollectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBCrystalCollectReq::MergeFrom(const GVBCrystalCollectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBCrystalCollectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBCrystalCollectReq::CopyFrom(const GVBCrystalCollectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBCrystalCollectReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBCrystalCollectReq::Swap(GVBCrystalCollectReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBCrystalCollectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBCrystalCollectReq_descriptor_;
  metadata.reflection = GVBCrystalCollectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBCrystalCollectRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

GVBCrystalCollectRsp::GVBCrystalCollectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBCrystalCollectRsp::InitAsDefaultInstance() {
}

GVBCrystalCollectRsp::GVBCrystalCollectRsp(const GVBCrystalCollectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBCrystalCollectRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBCrystalCollectRsp::~GVBCrystalCollectRsp() {
  SharedDtor();
}

void GVBCrystalCollectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBCrystalCollectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBCrystalCollectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBCrystalCollectRsp_descriptor_;
}

const GVBCrystalCollectRsp& GVBCrystalCollectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBCrystalCollectRsp* GVBCrystalCollectRsp::default_instance_ = NULL;

GVBCrystalCollectRsp* GVBCrystalCollectRsp::New() const {
  return new GVBCrystalCollectRsp;
}

void GVBCrystalCollectRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBCrystalCollectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBCrystalCollectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBCrystalCollectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBCrystalCollectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBCrystalCollectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBCrystalCollectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBCrystalCollectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBCrystalCollectRsp::MergeFrom(const GVBCrystalCollectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBCrystalCollectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBCrystalCollectRsp::CopyFrom(const GVBCrystalCollectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBCrystalCollectRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBCrystalCollectRsp::Swap(GVBCrystalCollectRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBCrystalCollectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBCrystalCollectRsp_descriptor_;
  metadata.reflection = GVBCrystalCollectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GVBDailyScoreDataReq::GVBDailyScoreDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBDailyScoreDataReq::InitAsDefaultInstance() {
}

GVBDailyScoreDataReq::GVBDailyScoreDataReq(const GVBDailyScoreDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBDailyScoreDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBDailyScoreDataReq::~GVBDailyScoreDataReq() {
  SharedDtor();
}

void GVBDailyScoreDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBDailyScoreDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBDailyScoreDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBDailyScoreDataReq_descriptor_;
}

const GVBDailyScoreDataReq& GVBDailyScoreDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBDailyScoreDataReq* GVBDailyScoreDataReq::default_instance_ = NULL;

GVBDailyScoreDataReq* GVBDailyScoreDataReq::New() const {
  return new GVBDailyScoreDataReq;
}

void GVBDailyScoreDataReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBDailyScoreDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GVBDailyScoreDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBDailyScoreDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBDailyScoreDataReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBDailyScoreDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBDailyScoreDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBDailyScoreDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBDailyScoreDataReq::MergeFrom(const GVBDailyScoreDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBDailyScoreDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBDailyScoreDataReq::CopyFrom(const GVBDailyScoreDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBDailyScoreDataReq::IsInitialized() const {

  return true;
}

void GVBDailyScoreDataReq::Swap(GVBDailyScoreDataReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBDailyScoreDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBDailyScoreDataReq_descriptor_;
  metadata.reflection = GVBDailyScoreDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBDailyScoreDataRsp::kRewardsStateFieldNumber;
const int GVBDailyScoreDataRsp::kDailyScoreFieldNumber;
#endif  // !_MSC_VER

GVBDailyScoreDataRsp::GVBDailyScoreDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBDailyScoreDataRsp::InitAsDefaultInstance() {
}

GVBDailyScoreDataRsp::GVBDailyScoreDataRsp(const GVBDailyScoreDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBDailyScoreDataRsp::SharedCtor() {
  _cached_size_ = 0;
  dailyscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBDailyScoreDataRsp::~GVBDailyScoreDataRsp() {
  SharedDtor();
}

void GVBDailyScoreDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBDailyScoreDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBDailyScoreDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBDailyScoreDataRsp_descriptor_;
}

const GVBDailyScoreDataRsp& GVBDailyScoreDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBDailyScoreDataRsp* GVBDailyScoreDataRsp::default_instance_ = NULL;

GVBDailyScoreDataRsp* GVBDailyScoreDataRsp::New() const {
  return new GVBDailyScoreDataRsp;
}

void GVBDailyScoreDataRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    dailyscore_ = 0u;
  }
  rewardsstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBDailyScoreDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 rewardsState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardsState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_rewardsstate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardsstate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_rewardsState;
        if (input->ExpectTag(16)) goto parse_dailyScore;
        break;
      }

      // required uint32 dailyScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyscore_)));
          set_has_dailyscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBDailyScoreDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 rewardsState = 1;
  for (int i = 0; i < this->rewardsstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->rewardsstate(i), output);
  }

  // required uint32 dailyScore = 2;
  if (has_dailyscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dailyscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBDailyScoreDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 rewardsState = 1;
  for (int i = 0; i < this->rewardsstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->rewardsstate(i), target);
  }

  // required uint32 dailyScore = 2;
  if (has_dailyscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dailyscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBDailyScoreDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 dailyScore = 2;
    if (has_dailyscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyscore());
    }

  }
  // repeated uint32 rewardsState = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardsstate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardsstate(i));
    }
    total_size += 1 * this->rewardsstate_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBDailyScoreDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBDailyScoreDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBDailyScoreDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBDailyScoreDataRsp::MergeFrom(const GVBDailyScoreDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardsstate_.MergeFrom(from.rewardsstate_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dailyscore()) {
      set_dailyscore(from.dailyscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBDailyScoreDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBDailyScoreDataRsp::CopyFrom(const GVBDailyScoreDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBDailyScoreDataRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void GVBDailyScoreDataRsp::Swap(GVBDailyScoreDataRsp* other) {
  if (other != this) {
    rewardsstate_.Swap(&other->rewardsstate_);
    std::swap(dailyscore_, other->dailyscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBDailyScoreDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBDailyScoreDataRsp_descriptor_;
  metadata.reflection = GVBDailyScoreDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBDailyScoreRewardRcvReq::kIdxFieldNumber;
#endif  // !_MSC_VER

GVBDailyScoreRewardRcvReq::GVBDailyScoreRewardRcvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBDailyScoreRewardRcvReq::InitAsDefaultInstance() {
}

GVBDailyScoreRewardRcvReq::GVBDailyScoreRewardRcvReq(const GVBDailyScoreRewardRcvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBDailyScoreRewardRcvReq::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBDailyScoreRewardRcvReq::~GVBDailyScoreRewardRcvReq() {
  SharedDtor();
}

void GVBDailyScoreRewardRcvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBDailyScoreRewardRcvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBDailyScoreRewardRcvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBDailyScoreRewardRcvReq_descriptor_;
}

const GVBDailyScoreRewardRcvReq& GVBDailyScoreRewardRcvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBDailyScoreRewardRcvReq* GVBDailyScoreRewardRcvReq::default_instance_ = NULL;

GVBDailyScoreRewardRcvReq* GVBDailyScoreRewardRcvReq::New() const {
  return new GVBDailyScoreRewardRcvReq;
}

void GVBDailyScoreRewardRcvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBDailyScoreRewardRcvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBDailyScoreRewardRcvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBDailyScoreRewardRcvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBDailyScoreRewardRcvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBDailyScoreRewardRcvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBDailyScoreRewardRcvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBDailyScoreRewardRcvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBDailyScoreRewardRcvReq::MergeFrom(const GVBDailyScoreRewardRcvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBDailyScoreRewardRcvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBDailyScoreRewardRcvReq::CopyFrom(const GVBDailyScoreRewardRcvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBDailyScoreRewardRcvReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBDailyScoreRewardRcvReq::Swap(GVBDailyScoreRewardRcvReq* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBDailyScoreRewardRcvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBDailyScoreRewardRcvReq_descriptor_;
  metadata.reflection = GVBDailyScoreRewardRcvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBDailyScoreRewardRcvRsp::kErrorFieldNumber;
const int GVBDailyScoreRewardRcvRsp::kIdxFieldNumber;
#endif  // !_MSC_VER

GVBDailyScoreRewardRcvRsp::GVBDailyScoreRewardRcvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBDailyScoreRewardRcvRsp::InitAsDefaultInstance() {
}

GVBDailyScoreRewardRcvRsp::GVBDailyScoreRewardRcvRsp(const GVBDailyScoreRewardRcvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBDailyScoreRewardRcvRsp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0u;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBDailyScoreRewardRcvRsp::~GVBDailyScoreRewardRcvRsp() {
  SharedDtor();
}

void GVBDailyScoreRewardRcvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBDailyScoreRewardRcvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBDailyScoreRewardRcvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBDailyScoreRewardRcvRsp_descriptor_;
}

const GVBDailyScoreRewardRcvRsp& GVBDailyScoreRewardRcvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBDailyScoreRewardRcvRsp* GVBDailyScoreRewardRcvRsp::default_instance_ = NULL;

GVBDailyScoreRewardRcvRsp* GVBDailyScoreRewardRcvRsp::New() const {
  return new GVBDailyScoreRewardRcvRsp;
}

void GVBDailyScoreRewardRcvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0u;
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBDailyScoreRewardRcvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // optional uint32 idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBDailyScoreRewardRcvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  // optional uint32 idx = 2;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBDailyScoreRewardRcvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  // optional uint32 idx = 2;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBDailyScoreRewardRcvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error());
    }

    // optional uint32 idx = 2;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBDailyScoreRewardRcvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBDailyScoreRewardRcvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBDailyScoreRewardRcvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBDailyScoreRewardRcvRsp::MergeFrom(const GVBDailyScoreRewardRcvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBDailyScoreRewardRcvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBDailyScoreRewardRcvRsp::CopyFrom(const GVBDailyScoreRewardRcvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBDailyScoreRewardRcvRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBDailyScoreRewardRcvRsp::Swap(GVBDailyScoreRewardRcvRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBDailyScoreRewardRcvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBDailyScoreRewardRcvRsp_descriptor_;
  metadata.reflection = GVBDailyScoreRewardRcvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBRoomReq::kCidFieldNumber;
const int GVBRoomReq::kFromLogicServerIdFieldNumber;
const int GVBRoomReq::kFromZoneFieldNumber;
const int GVBRoomReq::kTypeFieldNumber;
const int GVBRoomReq::kEnterPrevFieldNumber;
const int GVBRoomReq::kPlayersMaxFieldNumber;
const int GVBRoomReq::kLifeTimeFieldNumber;
const int GVBRoomReq::kMapIdFieldNumber;
const int GVBRoomReq::kSessionFieldNumber;
const int GVBRoomReq::kActIdFieldNumber;
#endif  // !_MSC_VER

GVBRoomReq::GVBRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBRoomReq::InitAsDefaultInstance() {
}

GVBRoomReq::GVBRoomReq(const GVBRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBRoomReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  fromlogicserverid_ = GOOGLE_ULONGLONG(0);
  fromzone_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  enterprev_ = false;
  playersmax_ = 0u;
  lifetime_ = 0u;
  mapid_ = 0u;
  session_ = GOOGLE_ULONGLONG(0);
  actid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBRoomReq::~GVBRoomReq() {
  SharedDtor();
}

void GVBRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBRoomReq_descriptor_;
}

const GVBRoomReq& GVBRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBRoomReq* GVBRoomReq::default_instance_ = NULL;

GVBRoomReq* GVBRoomReq::New() const {
  return new GVBRoomReq;
}

void GVBRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    fromlogicserverid_ = GOOGLE_ULONGLONG(0);
    fromzone_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    enterprev_ = false;
    playersmax_ = 0u;
    lifetime_ = 0u;
    mapid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    session_ = GOOGLE_ULONGLONG(0);
    actid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fromLogicServerId;
        break;
      }

      // required uint64 fromLogicServerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromLogicServerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromlogicserverid_)));
          set_has_fromlogicserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fromZone;
        break;
      }

      // required uint64 fromZone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromZone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromzone_)));
          set_has_fromzone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_enterPrev;
        break;
      }

      // required bool enterPrev = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterPrev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enterprev_)));
          set_has_enterprev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playersMax;
        break;
      }

      // optional uint32 playersMax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playersMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playersmax_)));
          set_has_playersmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lifeTime;
        break;
      }

      // optional uint32 lifeTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lifeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_)));
          set_has_lifetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mapId;
        break;
      }

      // required uint32 mapId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_session;
        break;
      }

      // required uint64 session = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_actId;
        break;
      }

      // required uint32 actId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint64 fromLogicServerId = 2;
  if (has_fromlogicserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fromlogicserverid(), output);
  }

  // required uint64 fromZone = 3;
  if (has_fromzone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fromzone(), output);
  }

  // required uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // required bool enterPrev = 5;
  if (has_enterprev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enterprev(), output);
  }

  // optional uint32 playersMax = 6;
  if (has_playersmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playersmax(), output);
  }

  // optional uint32 lifeTime = 7;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lifetime(), output);
  }

  // required uint32 mapId = 8;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mapid(), output);
  }

  // required uint64 session = 9;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->session(), output);
  }

  // required uint32 actId = 10;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->actid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint64 fromLogicServerId = 2;
  if (has_fromlogicserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fromlogicserverid(), target);
  }

  // required uint64 fromZone = 3;
  if (has_fromzone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fromzone(), target);
  }

  // required uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // required bool enterPrev = 5;
  if (has_enterprev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enterprev(), target);
  }

  // optional uint32 playersMax = 6;
  if (has_playersmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->playersmax(), target);
  }

  // optional uint32 lifeTime = 7;
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lifetime(), target);
  }

  // required uint32 mapId = 8;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mapid(), target);
  }

  // required uint64 session = 9;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->session(), target);
  }

  // required uint32 actId = 10;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->actid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint64 fromLogicServerId = 2;
    if (has_fromlogicserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromlogicserverid());
    }

    // required uint64 fromZone = 3;
    if (has_fromzone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromzone());
    }

    // required uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required bool enterPrev = 5;
    if (has_enterprev()) {
      total_size += 1 + 1;
    }

    // optional uint32 playersMax = 6;
    if (has_playersmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playersmax());
    }

    // optional uint32 lifeTime = 7;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime());
    }

    // required uint32 mapId = 8;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 session = 9;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session());
    }

    // required uint32 actId = 10;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBRoomReq::MergeFrom(const GVBRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_fromlogicserverid()) {
      set_fromlogicserverid(from.fromlogicserverid());
    }
    if (from.has_fromzone()) {
      set_fromzone(from.fromzone());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_enterprev()) {
      set_enterprev(from.enterprev());
    }
    if (from.has_playersmax()) {
      set_playersmax(from.playersmax());
    }
    if (from.has_lifetime()) {
      set_lifetime(from.lifetime());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_actid()) {
      set_actid(from.actid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBRoomReq::CopyFrom(const GVBRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000039f) != 0x0000039f) return false;

  return true;
}

void GVBRoomReq::Swap(GVBRoomReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(fromlogicserverid_, other->fromlogicserverid_);
    std::swap(fromzone_, other->fromzone_);
    std::swap(type_, other->type_);
    std::swap(enterprev_, other->enterprev_);
    std::swap(playersmax_, other->playersmax_);
    std::swap(lifetime_, other->lifetime_);
    std::swap(mapid_, other->mapid_);
    std::swap(session_, other->session_);
    std::swap(actid_, other->actid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBRoomReq_descriptor_;
  metadata.reflection = GVBRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBRoomRsp::kCidFieldNumber;
const int GVBRoomRsp::kRoomIdFieldNumber;
const int GVBRoomRsp::kMapIdFieldNumber;
const int GVBRoomRsp::kTypeFieldNumber;
const int GVBRoomRsp::kSessionFieldNumber;
const int GVBRoomRsp::kErrorFieldNumber;
#endif  // !_MSC_VER

GVBRoomRsp::GVBRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBRoomRsp::InitAsDefaultInstance() {
}

GVBRoomRsp::GVBRoomRsp(const GVBRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  type_ = 0u;
  session_ = GOOGLE_ULONGLONG(0);
  error_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBRoomRsp::~GVBRoomRsp() {
  SharedDtor();
}

void GVBRoomRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBRoomRsp_descriptor_;
}

const GVBRoomRsp& GVBRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBRoomRsp* GVBRoomRsp::default_instance_ = NULL;

GVBRoomRsp* GVBRoomRsp::New() const {
  return new GVBRoomRsp;
}

void GVBRoomRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    roomid_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
    type_ = 0u;
    session_ = GOOGLE_ULONGLONG(0);
    error_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomId;
        break;
      }

      // optional uint64 roomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mapId;
        break;
      }

      // required uint32 mapId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_session;
        break;
      }

      // required uint64 session = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_error;
        break;
      }

      // optional uint32 error = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint32 mapId = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // required uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // required uint64 session = 5;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->session(), output);
  }

  // optional uint32 error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 roomId = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint32 mapId = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // required uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // required uint64 session = 5;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->session(), target);
  }

  // optional uint32 error = 6;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBRoomRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 mapId = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint64 session = 5;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session());
    }

    // optional uint32 error = 6;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBRoomRsp::MergeFrom(const GVBRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBRoomRsp::CopyFrom(const GVBRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBRoomRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  return true;
}

void GVBRoomRsp::Swap(GVBRoomRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(roomid_, other->roomid_);
    std::swap(mapid_, other->mapid_);
    std::swap(type_, other->type_);
    std::swap(session_, other->session_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBRoomRsp_descriptor_;
  metadata.reflection = GVBRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBRoomCloseReq::kTypeFieldNumber;
const int GVBRoomCloseReq::kRoomIdFieldNumber;
const int GVBRoomCloseReq::kOptionFieldNumber;
#endif  // !_MSC_VER

GVBRoomCloseReq::GVBRoomCloseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBRoomCloseReq::InitAsDefaultInstance() {
}

GVBRoomCloseReq::GVBRoomCloseReq(const GVBRoomCloseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBRoomCloseReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  option_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBRoomCloseReq::~GVBRoomCloseReq() {
  SharedDtor();
}

void GVBRoomCloseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBRoomCloseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBRoomCloseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBRoomCloseReq_descriptor_;
}

const GVBRoomCloseReq& GVBRoomCloseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBRoomCloseReq* GVBRoomCloseReq::default_instance_ = NULL;

GVBRoomCloseReq* GVBRoomCloseReq::New() const {
  return new GVBRoomCloseReq;
}

void GVBRoomCloseReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
    option_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBRoomCloseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomId;
        break;
      }

      // required uint64 roomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_option;
        break;
      }

      // required uint32 option = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_option:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &option_)));
          set_has_option();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBRoomCloseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint64 roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint32 option = 3;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->option(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBRoomCloseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint64 roomId = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint32 option = 3;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->option(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBRoomCloseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint64 roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 option = 3;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->option());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBRoomCloseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBRoomCloseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBRoomCloseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBRoomCloseReq::MergeFrom(const GVBRoomCloseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_option()) {
      set_option(from.option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBRoomCloseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBRoomCloseReq::CopyFrom(const GVBRoomCloseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBRoomCloseReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GVBRoomCloseReq::Swap(GVBRoomCloseReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(roomid_, other->roomid_);
    std::swap(option_, other->option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBRoomCloseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBRoomCloseReq_descriptor_;
  metadata.reflection = GVBRoomCloseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GVBCrystalOwnerPosReq::GVBCrystalOwnerPosReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBCrystalOwnerPosReq::InitAsDefaultInstance() {
}

GVBCrystalOwnerPosReq::GVBCrystalOwnerPosReq(const GVBCrystalOwnerPosReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBCrystalOwnerPosReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBCrystalOwnerPosReq::~GVBCrystalOwnerPosReq() {
  SharedDtor();
}

void GVBCrystalOwnerPosReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBCrystalOwnerPosReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBCrystalOwnerPosReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBCrystalOwnerPosReq_descriptor_;
}

const GVBCrystalOwnerPosReq& GVBCrystalOwnerPosReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBCrystalOwnerPosReq* GVBCrystalOwnerPosReq::default_instance_ = NULL;

GVBCrystalOwnerPosReq* GVBCrystalOwnerPosReq::New() const {
  return new GVBCrystalOwnerPosReq;
}

void GVBCrystalOwnerPosReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBCrystalOwnerPosReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GVBCrystalOwnerPosReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBCrystalOwnerPosReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBCrystalOwnerPosReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBCrystalOwnerPosReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBCrystalOwnerPosReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBCrystalOwnerPosReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBCrystalOwnerPosReq::MergeFrom(const GVBCrystalOwnerPosReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBCrystalOwnerPosReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBCrystalOwnerPosReq::CopyFrom(const GVBCrystalOwnerPosReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBCrystalOwnerPosReq::IsInitialized() const {

  return true;
}

void GVBCrystalOwnerPosReq::Swap(GVBCrystalOwnerPosReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBCrystalOwnerPosReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBCrystalOwnerPosReq_descriptor_;
  metadata.reflection = GVBCrystalOwnerPosReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBCrystalOwnerPosRsp::kPosFieldNumber;
#endif  // !_MSC_VER

GVBCrystalOwnerPosRsp::GVBCrystalOwnerPosRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBCrystalOwnerPosRsp::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

GVBCrystalOwnerPosRsp::GVBCrystalOwnerPosRsp(const GVBCrystalOwnerPosRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBCrystalOwnerPosRsp::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBCrystalOwnerPosRsp::~GVBCrystalOwnerPosRsp() {
  SharedDtor();
}

void GVBCrystalOwnerPosRsp::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void GVBCrystalOwnerPosRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBCrystalOwnerPosRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBCrystalOwnerPosRsp_descriptor_;
}

const GVBCrystalOwnerPosRsp& GVBCrystalOwnerPosRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBCrystalOwnerPosRsp* GVBCrystalOwnerPosRsp::default_instance_ = NULL;

GVBCrystalOwnerPosRsp* GVBCrystalOwnerPosRsp::New() const {
  return new GVBCrystalOwnerPosRsp;
}

void GVBCrystalOwnerPosRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBCrystalOwnerPosRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.Vector3PB pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBCrystalOwnerPosRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.Vector3PB pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBCrystalOwnerPosRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.Vector3PB pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBCrystalOwnerPosRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.Vector3PB pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBCrystalOwnerPosRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBCrystalOwnerPosRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBCrystalOwnerPosRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBCrystalOwnerPosRsp::MergeFrom(const GVBCrystalOwnerPosRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBCrystalOwnerPosRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBCrystalOwnerPosRsp::CopyFrom(const GVBCrystalOwnerPosRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBCrystalOwnerPosRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void GVBCrystalOwnerPosRsp::Swap(GVBCrystalOwnerPosRsp* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBCrystalOwnerPosRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBCrystalOwnerPosRsp_descriptor_;
  metadata.reflection = GVBCrystalOwnerPosRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WPPEnterReq::WPPEnterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPEnterReq::InitAsDefaultInstance() {
}

WPPEnterReq::WPPEnterReq(const WPPEnterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPEnterReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPEnterReq::~WPPEnterReq() {
  SharedDtor();
}

void WPPEnterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WPPEnterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPEnterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPEnterReq_descriptor_;
}

const WPPEnterReq& WPPEnterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPEnterReq* WPPEnterReq::default_instance_ = NULL;

WPPEnterReq* WPPEnterReq::New() const {
  return new WPPEnterReq;
}

void WPPEnterReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPEnterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WPPEnterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPEnterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPEnterReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPEnterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPEnterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPEnterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPEnterReq::MergeFrom(const WPPEnterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPEnterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPEnterReq::CopyFrom(const WPPEnterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPEnterReq::IsInitialized() const {

  return true;
}

void WPPEnterReq::Swap(WPPEnterReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPEnterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPEnterReq_descriptor_;
  metadata.reflection = WPPEnterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WPPExitReq::WPPExitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPExitReq::InitAsDefaultInstance() {
}

WPPExitReq::WPPExitReq(const WPPExitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPExitReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPExitReq::~WPPExitReq() {
  SharedDtor();
}

void WPPExitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WPPExitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPExitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPExitReq_descriptor_;
}

const WPPExitReq& WPPExitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPExitReq* WPPExitReq::default_instance_ = NULL;

WPPExitReq* WPPExitReq::New() const {
  return new WPPExitReq;
}

void WPPExitReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPExitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WPPExitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPExitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPExitReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPExitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPExitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPExitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPExitReq::MergeFrom(const WPPExitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPExitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPExitReq::CopyFrom(const WPPExitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPExitReq::IsInitialized() const {

  return true;
}

void WPPExitReq::Swap(WPPExitReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPExitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPExitReq_descriptor_;
  metadata.reflection = WPPExitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WPPEnterRsp::kCollectTimesFieldNumber;
const int WPPEnterRsp::kExpTotalFieldNumber;
const int WPPEnterRsp::kSplashTimesFieldNumber;
const int WPPEnterRsp::kMassageTimesFieldNumber;
const int WPPEnterRsp::kCollectCDFieldNumber;
const int WPPEnterRsp::kWppStateFieldNumber;
#endif  // !_MSC_VER

WPPEnterRsp::WPPEnterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPEnterRsp::InitAsDefaultInstance() {
}

WPPEnterRsp::WPPEnterRsp(const WPPEnterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPEnterRsp::SharedCtor() {
  _cached_size_ = 0;
  collecttimes_ = 0u;
  exptotal_ = GOOGLE_ULONGLONG(0);
  splashtimes_ = 0u;
  massagetimes_ = 0u;
  collectcd_ = GOOGLE_LONGLONG(0);
  wpp_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPEnterRsp::~WPPEnterRsp() {
  SharedDtor();
}

void WPPEnterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WPPEnterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPEnterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPEnterRsp_descriptor_;
}

const WPPEnterRsp& WPPEnterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPEnterRsp* WPPEnterRsp::default_instance_ = NULL;

WPPEnterRsp* WPPEnterRsp::New() const {
  return new WPPEnterRsp;
}

void WPPEnterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    collecttimes_ = 0u;
    exptotal_ = GOOGLE_ULONGLONG(0);
    splashtimes_ = 0u;
    massagetimes_ = 0u;
    collectcd_ = GOOGLE_LONGLONG(0);
    wpp_state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPEnterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 collectTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collecttimes_)));
          set_has_collecttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expTotal;
        break;
      }

      // required uint64 expTotal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exptotal_)));
          set_has_exptotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_splashTimes;
        break;
      }

      // required uint32 splashTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_splashTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &splashtimes_)));
          set_has_splashtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_massageTimes;
        break;
      }

      // required uint32 massageTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_massageTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &massagetimes_)));
          set_has_massagetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_collectCD;
        break;
      }

      // required int64 collectCD = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collectCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &collectcd_)));
          set_has_collectcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wpp_state;
        break;
      }

      // required uint32 wpp_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wpp_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wpp_state_)));
          set_has_wpp_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WPPEnterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 collectTimes = 1;
  if (has_collecttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->collecttimes(), output);
  }

  // required uint64 expTotal = 2;
  if (has_exptotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->exptotal(), output);
  }

  // required uint32 splashTimes = 3;
  if (has_splashtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->splashtimes(), output);
  }

  // required uint32 massageTimes = 4;
  if (has_massagetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->massagetimes(), output);
  }

  // required int64 collectCD = 5;
  if (has_collectcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->collectcd(), output);
  }

  // required uint32 wpp_state = 6;
  if (has_wpp_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->wpp_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPEnterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 collectTimes = 1;
  if (has_collecttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->collecttimes(), target);
  }

  // required uint64 expTotal = 2;
  if (has_exptotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->exptotal(), target);
  }

  // required uint32 splashTimes = 3;
  if (has_splashtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->splashtimes(), target);
  }

  // required uint32 massageTimes = 4;
  if (has_massagetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->massagetimes(), target);
  }

  // required int64 collectCD = 5;
  if (has_collectcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->collectcd(), target);
  }

  // required uint32 wpp_state = 6;
  if (has_wpp_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->wpp_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPEnterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 collectTimes = 1;
    if (has_collecttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collecttimes());
    }

    // required uint64 expTotal = 2;
    if (has_exptotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exptotal());
    }

    // required uint32 splashTimes = 3;
    if (has_splashtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->splashtimes());
    }

    // required uint32 massageTimes = 4;
    if (has_massagetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->massagetimes());
    }

    // required int64 collectCD = 5;
    if (has_collectcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->collectcd());
    }

    // required uint32 wpp_state = 6;
    if (has_wpp_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wpp_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPEnterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPEnterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPEnterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPEnterRsp::MergeFrom(const WPPEnterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collecttimes()) {
      set_collecttimes(from.collecttimes());
    }
    if (from.has_exptotal()) {
      set_exptotal(from.exptotal());
    }
    if (from.has_splashtimes()) {
      set_splashtimes(from.splashtimes());
    }
    if (from.has_massagetimes()) {
      set_massagetimes(from.massagetimes());
    }
    if (from.has_collectcd()) {
      set_collectcd(from.collectcd());
    }
    if (from.has_wpp_state()) {
      set_wpp_state(from.wpp_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPEnterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPEnterRsp::CopyFrom(const WPPEnterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPEnterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void WPPEnterRsp::Swap(WPPEnterRsp* other) {
  if (other != this) {
    std::swap(collecttimes_, other->collecttimes_);
    std::swap(exptotal_, other->exptotal_);
    std::swap(splashtimes_, other->splashtimes_);
    std::swap(massagetimes_, other->massagetimes_);
    std::swap(collectcd_, other->collectcd_);
    std::swap(wpp_state_, other->wpp_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPEnterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPEnterRsp_descriptor_;
  metadata.reflection = WPPEnterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WPPPairPracticeReq::kTargetFieldNumber;
const int WPPPairPracticeReq::kSelfPosFieldNumber;
const int WPPPairPracticeReq::kSelfDirFieldNumber;
const int WPPPairPracticeReq::kTargetPosFieldNumber;
#endif  // !_MSC_VER

WPPPairPracticeReq::WPPPairPracticeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPPairPracticeReq::InitAsDefaultInstance() {
  selfpos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  selfdir_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  targetpos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

WPPPairPracticeReq::WPPPairPracticeReq(const WPPPairPracticeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPPairPracticeReq::SharedCtor() {
  _cached_size_ = 0;
  target_ = GOOGLE_ULONGLONG(0);
  selfpos_ = NULL;
  selfdir_ = NULL;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPPairPracticeReq::~WPPPairPracticeReq() {
  SharedDtor();
}

void WPPPairPracticeReq::SharedDtor() {
  if (this != default_instance_) {
    delete selfpos_;
    delete selfdir_;
    delete targetpos_;
  }
}

void WPPPairPracticeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPPairPracticeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPPairPracticeReq_descriptor_;
}

const WPPPairPracticeReq& WPPPairPracticeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPPairPracticeReq* WPPPairPracticeReq::default_instance_ = NULL;

WPPPairPracticeReq* WPPPairPracticeReq::New() const {
  return new WPPPairPracticeReq;
}

void WPPPairPracticeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_ = GOOGLE_ULONGLONG(0);
    if (has_selfpos()) {
      if (selfpos_ != NULL) selfpos_->::proto_ff::Vector3PB::Clear();
    }
    if (has_selfdir()) {
      if (selfdir_ != NULL) selfdir_->::proto_ff::Vector3PB::Clear();
    }
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPPairPracticeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selfPos;
        break;
      }

      // required .proto_ff.Vector3PB selfPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selfDir;
        break;
      }

      // required .proto_ff.Vector3PB selfDir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfdir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_targetPos;
        break;
      }

      // required .proto_ff.Vector3PB targetPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WPPPairPracticeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->target(), output);
  }

  // required .proto_ff.Vector3PB selfPos = 2;
  if (has_selfpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selfpos(), output);
  }

  // required .proto_ff.Vector3PB selfDir = 3;
  if (has_selfdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->selfdir(), output);
  }

  // required .proto_ff.Vector3PB targetPos = 4;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPPairPracticeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->target(), target);
  }

  // required .proto_ff.Vector3PB selfPos = 2;
  if (has_selfpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selfpos(), target);
  }

  // required .proto_ff.Vector3PB selfDir = 3;
  if (has_selfdir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->selfdir(), target);
  }

  // required .proto_ff.Vector3PB targetPos = 4;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPPairPracticeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target());
    }

    // required .proto_ff.Vector3PB selfPos = 2;
    if (has_selfpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfpos());
    }

    // required .proto_ff.Vector3PB selfDir = 3;
    if (has_selfdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfdir());
    }

    // required .proto_ff.Vector3PB targetPos = 4;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPPairPracticeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPPairPracticeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPPairPracticeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPPairPracticeReq::MergeFrom(const WPPPairPracticeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_selfpos()) {
      mutable_selfpos()->::proto_ff::Vector3PB::MergeFrom(from.selfpos());
    }
    if (from.has_selfdir()) {
      mutable_selfdir()->::proto_ff::Vector3PB::MergeFrom(from.selfdir());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::proto_ff::Vector3PB::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPPairPracticeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPPairPracticeReq::CopyFrom(const WPPPairPracticeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPPairPracticeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_selfpos()) {
    if (!this->selfpos().IsInitialized()) return false;
  }
  if (has_selfdir()) {
    if (!this->selfdir().IsInitialized()) return false;
  }
  if (has_targetpos()) {
    if (!this->targetpos().IsInitialized()) return false;
  }
  return true;
}

void WPPPairPracticeReq::Swap(WPPPairPracticeReq* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(selfpos_, other->selfpos_);
    std::swap(selfdir_, other->selfdir_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPPairPracticeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPPairPracticeReq_descriptor_;
  metadata.reflection = WPPPairPracticeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WPPPairPracticeRsp::kErrorFieldNumber;
#endif  // !_MSC_VER

WPPPairPracticeRsp::WPPPairPracticeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPPairPracticeRsp::InitAsDefaultInstance() {
}

WPPPairPracticeRsp::WPPPairPracticeRsp(const WPPPairPracticeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPPairPracticeRsp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPPairPracticeRsp::~WPPPairPracticeRsp() {
  SharedDtor();
}

void WPPPairPracticeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WPPPairPracticeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPPairPracticeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPPairPracticeRsp_descriptor_;
}

const WPPPairPracticeRsp& WPPPairPracticeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPPairPracticeRsp* WPPPairPracticeRsp::default_instance_ = NULL;

WPPPairPracticeRsp* WPPPairPracticeRsp::New() const {
  return new WPPPairPracticeRsp;
}

void WPPPairPracticeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPPairPracticeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WPPPairPracticeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPPairPracticeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPPairPracticeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPPairPracticeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPPairPracticeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPPairPracticeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPPairPracticeRsp::MergeFrom(const WPPPairPracticeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPPairPracticeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPPairPracticeRsp::CopyFrom(const WPPPairPracticeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPPairPracticeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WPPPairPracticeRsp::Swap(WPPPairPracticeRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPPairPracticeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPPairPracticeRsp_descriptor_;
  metadata.reflection = WPPPairPracticeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WPPMassageReq::kTargetFieldNumber;
const int WPPMassageReq::kSelfPosFieldNumber;
const int WPPMassageReq::kSelfDirFieldNumber;
const int WPPMassageReq::kTargetPosFieldNumber;
#endif  // !_MSC_VER

WPPMassageReq::WPPMassageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPMassageReq::InitAsDefaultInstance() {
  selfpos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  selfdir_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  targetpos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

WPPMassageReq::WPPMassageReq(const WPPMassageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPMassageReq::SharedCtor() {
  _cached_size_ = 0;
  target_ = GOOGLE_ULONGLONG(0);
  selfpos_ = NULL;
  selfdir_ = NULL;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPMassageReq::~WPPMassageReq() {
  SharedDtor();
}

void WPPMassageReq::SharedDtor() {
  if (this != default_instance_) {
    delete selfpos_;
    delete selfdir_;
    delete targetpos_;
  }
}

void WPPMassageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPMassageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPMassageReq_descriptor_;
}

const WPPMassageReq& WPPMassageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPMassageReq* WPPMassageReq::default_instance_ = NULL;

WPPMassageReq* WPPMassageReq::New() const {
  return new WPPMassageReq;
}

void WPPMassageReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_ = GOOGLE_ULONGLONG(0);
    if (has_selfpos()) {
      if (selfpos_ != NULL) selfpos_->::proto_ff::Vector3PB::Clear();
    }
    if (has_selfdir()) {
      if (selfdir_ != NULL) selfdir_->::proto_ff::Vector3PB::Clear();
    }
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPMassageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selfPos;
        break;
      }

      // required .proto_ff.Vector3PB selfPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selfDir;
        break;
      }

      // required .proto_ff.Vector3PB selfDir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfdir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_targetPos;
        break;
      }

      // required .proto_ff.Vector3PB targetPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WPPMassageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->target(), output);
  }

  // required .proto_ff.Vector3PB selfPos = 2;
  if (has_selfpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selfpos(), output);
  }

  // required .proto_ff.Vector3PB selfDir = 3;
  if (has_selfdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->selfdir(), output);
  }

  // required .proto_ff.Vector3PB targetPos = 4;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPMassageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->target(), target);
  }

  // required .proto_ff.Vector3PB selfPos = 2;
  if (has_selfpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selfpos(), target);
  }

  // required .proto_ff.Vector3PB selfDir = 3;
  if (has_selfdir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->selfdir(), target);
  }

  // required .proto_ff.Vector3PB targetPos = 4;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPMassageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target());
    }

    // required .proto_ff.Vector3PB selfPos = 2;
    if (has_selfpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfpos());
    }

    // required .proto_ff.Vector3PB selfDir = 3;
    if (has_selfdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfdir());
    }

    // required .proto_ff.Vector3PB targetPos = 4;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPMassageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPMassageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPMassageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPMassageReq::MergeFrom(const WPPMassageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_selfpos()) {
      mutable_selfpos()->::proto_ff::Vector3PB::MergeFrom(from.selfpos());
    }
    if (from.has_selfdir()) {
      mutable_selfdir()->::proto_ff::Vector3PB::MergeFrom(from.selfdir());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::proto_ff::Vector3PB::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPMassageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPMassageReq::CopyFrom(const WPPMassageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPMassageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_selfpos()) {
    if (!this->selfpos().IsInitialized()) return false;
  }
  if (has_selfdir()) {
    if (!this->selfdir().IsInitialized()) return false;
  }
  if (has_targetpos()) {
    if (!this->targetpos().IsInitialized()) return false;
  }
  return true;
}

void WPPMassageReq::Swap(WPPMassageReq* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(selfpos_, other->selfpos_);
    std::swap(selfdir_, other->selfdir_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPMassageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPMassageReq_descriptor_;
  metadata.reflection = WPPMassageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WPPMassageRsp::kErrorFieldNumber;
const int WPPMassageRsp::kMassageTimesFieldNumber;
#endif  // !_MSC_VER

WPPMassageRsp::WPPMassageRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPMassageRsp::InitAsDefaultInstance() {
}

WPPMassageRsp::WPPMassageRsp(const WPPMassageRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPMassageRsp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0u;
  massagetimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPMassageRsp::~WPPMassageRsp() {
  SharedDtor();
}

void WPPMassageRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WPPMassageRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPMassageRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPMassageRsp_descriptor_;
}

const WPPMassageRsp& WPPMassageRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPMassageRsp* WPPMassageRsp::default_instance_ = NULL;

WPPMassageRsp* WPPMassageRsp::New() const {
  return new WPPMassageRsp;
}

void WPPMassageRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0u;
    massagetimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPMassageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_massageTimes;
        break;
      }

      // optional uint32 massageTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_massageTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &massagetimes_)));
          set_has_massagetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WPPMassageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  // optional uint32 massageTimes = 2;
  if (has_massagetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->massagetimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPMassageRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  // optional uint32 massageTimes = 2;
  if (has_massagetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->massagetimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPMassageRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error());
    }

    // optional uint32 massageTimes = 2;
    if (has_massagetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->massagetimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPMassageRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPMassageRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPMassageRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPMassageRsp::MergeFrom(const WPPMassageRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_massagetimes()) {
      set_massagetimes(from.massagetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPMassageRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPMassageRsp::CopyFrom(const WPPMassageRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPMassageRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WPPMassageRsp::Swap(WPPMassageRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(massagetimes_, other->massagetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPMassageRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPMassageRsp_descriptor_;
  metadata.reflection = WPPMassageRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WPPSplashReq::kSkillReqFieldNumber;
#endif  // !_MSC_VER

WPPSplashReq::WPPSplashReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPSplashReq::InitAsDefaultInstance() {
  skillreq_ = const_cast< ::proto_ff::SkillUseReq*>(&::proto_ff::SkillUseReq::default_instance());
}

WPPSplashReq::WPPSplashReq(const WPPSplashReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPSplashReq::SharedCtor() {
  _cached_size_ = 0;
  skillreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPSplashReq::~WPPSplashReq() {
  SharedDtor();
}

void WPPSplashReq::SharedDtor() {
  if (this != default_instance_) {
    delete skillreq_;
  }
}

void WPPSplashReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPSplashReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPSplashReq_descriptor_;
}

const WPPSplashReq& WPPSplashReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPSplashReq* WPPSplashReq::default_instance_ = NULL;

WPPSplashReq* WPPSplashReq::New() const {
  return new WPPSplashReq;
}

void WPPSplashReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_skillreq()) {
      if (skillreq_ != NULL) skillreq_->::proto_ff::SkillUseReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPSplashReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.SkillUseReq skillReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skillreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WPPSplashReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.SkillUseReq skillReq = 1;
  if (has_skillreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skillreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPSplashReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.SkillUseReq skillReq = 1;
  if (has_skillreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skillreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPSplashReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.SkillUseReq skillReq = 1;
    if (has_skillreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skillreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPSplashReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPSplashReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPSplashReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPSplashReq::MergeFrom(const WPPSplashReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillreq()) {
      mutable_skillreq()->::proto_ff::SkillUseReq::MergeFrom(from.skillreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPSplashReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPSplashReq::CopyFrom(const WPPSplashReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPSplashReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_skillreq()) {
    if (!this->skillreq().IsInitialized()) return false;
  }
  return true;
}

void WPPSplashReq::Swap(WPPSplashReq* other) {
  if (other != this) {
    std::swap(skillreq_, other->skillreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPSplashReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPSplashReq_descriptor_;
  metadata.reflection = WPPSplashReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WPPSplashRsp::kErrorFieldNumber;
const int WPPSplashRsp::kSplashTimesFieldNumber;
#endif  // !_MSC_VER

WPPSplashRsp::WPPSplashRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPSplashRsp::InitAsDefaultInstance() {
}

WPPSplashRsp::WPPSplashRsp(const WPPSplashRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPSplashRsp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0u;
  splashtimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPSplashRsp::~WPPSplashRsp() {
  SharedDtor();
}

void WPPSplashRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WPPSplashRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPSplashRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPSplashRsp_descriptor_;
}

const WPPSplashRsp& WPPSplashRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPSplashRsp* WPPSplashRsp::default_instance_ = NULL;

WPPSplashRsp* WPPSplashRsp::New() const {
  return new WPPSplashRsp;
}

void WPPSplashRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0u;
    splashtimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPSplashRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_splashTimes;
        break;
      }

      // required uint32 splashTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_splashTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &splashtimes_)));
          set_has_splashtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WPPSplashRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  // required uint32 splashTimes = 2;
  if (has_splashtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->splashtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPSplashRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  // required uint32 splashTimes = 2;
  if (has_splashtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->splashtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPSplashRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error());
    }

    // required uint32 splashTimes = 2;
    if (has_splashtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->splashtimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPSplashRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPSplashRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPSplashRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPSplashRsp::MergeFrom(const WPPSplashRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_splashtimes()) {
      set_splashtimes(from.splashtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPSplashRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPSplashRsp::CopyFrom(const WPPSplashRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPSplashRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WPPSplashRsp::Swap(WPPSplashRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(splashtimes_, other->splashtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPSplashRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPSplashRsp_descriptor_;
  metadata.reflection = WPPSplashRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WPPCollectRsp::kErrorFieldNumber;
const int WPPCollectRsp::kCollectTimesFieldNumber;
#endif  // !_MSC_VER

WPPCollectRsp::WPPCollectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPCollectRsp::InitAsDefaultInstance() {
}

WPPCollectRsp::WPPCollectRsp(const WPPCollectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPCollectRsp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0u;
  collecttimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPCollectRsp::~WPPCollectRsp() {
  SharedDtor();
}

void WPPCollectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WPPCollectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPCollectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPCollectRsp_descriptor_;
}

const WPPCollectRsp& WPPCollectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPCollectRsp* WPPCollectRsp::default_instance_ = NULL;

WPPCollectRsp* WPPCollectRsp::New() const {
  return new WPPCollectRsp;
}

void WPPCollectRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0u;
    collecttimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPCollectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_collectTimes;
        break;
      }

      // optional uint32 collectTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collectTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collecttimes_)));
          set_has_collecttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WPPCollectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  // optional uint32 collectTimes = 2;
  if (has_collecttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->collecttimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPCollectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  // optional uint32 collectTimes = 2;
  if (has_collecttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->collecttimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPCollectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error());
    }

    // optional uint32 collectTimes = 2;
    if (has_collecttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collecttimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPCollectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPCollectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPCollectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPCollectRsp::MergeFrom(const WPPCollectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_collecttimes()) {
      set_collecttimes(from.collecttimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPCollectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPCollectRsp::CopyFrom(const WPPCollectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPCollectRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WPPCollectRsp::Swap(WPPCollectRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(collecttimes_, other->collecttimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPCollectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPCollectRsp_descriptor_;
  metadata.reflection = WPPCollectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WPPExpAddNt::kExpTotalFieldNumber;
const int WPPExpAddNt::kExpAddFieldNumber;
#endif  // !_MSC_VER

WPPExpAddNt::WPPExpAddNt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPExpAddNt::InitAsDefaultInstance() {
}

WPPExpAddNt::WPPExpAddNt(const WPPExpAddNt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPExpAddNt::SharedCtor() {
  _cached_size_ = 0;
  exptotal_ = GOOGLE_ULONGLONG(0);
  expadd_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPExpAddNt::~WPPExpAddNt() {
  SharedDtor();
}

void WPPExpAddNt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WPPExpAddNt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPExpAddNt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPExpAddNt_descriptor_;
}

const WPPExpAddNt& WPPExpAddNt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPExpAddNt* WPPExpAddNt::default_instance_ = NULL;

WPPExpAddNt* WPPExpAddNt::New() const {
  return new WPPExpAddNt;
}

void WPPExpAddNt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exptotal_ = GOOGLE_ULONGLONG(0);
    expadd_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPExpAddNt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 expTotal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exptotal_)));
          set_has_exptotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expAdd;
        break;
      }

      // required uint64 expAdd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expadd_)));
          set_has_expadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WPPExpAddNt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 expTotal = 1;
  if (has_exptotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->exptotal(), output);
  }

  // required uint64 expAdd = 2;
  if (has_expadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->expadd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPExpAddNt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 expTotal = 1;
  if (has_exptotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->exptotal(), target);
  }

  // required uint64 expAdd = 2;
  if (has_expadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->expadd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPExpAddNt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 expTotal = 1;
    if (has_exptotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exptotal());
    }

    // required uint64 expAdd = 2;
    if (has_expadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expadd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPExpAddNt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPExpAddNt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPExpAddNt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPExpAddNt::MergeFrom(const WPPExpAddNt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exptotal()) {
      set_exptotal(from.exptotal());
    }
    if (from.has_expadd()) {
      set_expadd(from.expadd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPExpAddNt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPExpAddNt::CopyFrom(const WPPExpAddNt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPExpAddNt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WPPExpAddNt::Swap(WPPExpAddNt* other) {
  if (other != this) {
    std::swap(exptotal_, other->exptotal_);
    std::swap(expadd_, other->expadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPExpAddNt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPExpAddNt_descriptor_;
  metadata.reflection = WPPExpAddNt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WPPCollectCDNt::kCdFieldNumber;
#endif  // !_MSC_VER

WPPCollectCDNt::WPPCollectCDNt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPCollectCDNt::InitAsDefaultInstance() {
}

WPPCollectCDNt::WPPCollectCDNt(const WPPCollectCDNt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPCollectCDNt::SharedCtor() {
  _cached_size_ = 0;
  cd_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPCollectCDNt::~WPPCollectCDNt() {
  SharedDtor();
}

void WPPCollectCDNt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WPPCollectCDNt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPCollectCDNt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPCollectCDNt_descriptor_;
}

const WPPCollectCDNt& WPPCollectCDNt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPCollectCDNt* WPPCollectCDNt::default_instance_ = NULL;

WPPCollectCDNt* WPPCollectCDNt::New() const {
  return new WPPCollectCDNt;
}

void WPPCollectCDNt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cd_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPCollectCDNt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WPPCollectCDNt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cd = 1;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPCollectCDNt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cd = 1;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPCollectCDNt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cd = 1;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPCollectCDNt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPCollectCDNt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPCollectCDNt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPCollectCDNt::MergeFrom(const WPPCollectCDNt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPCollectCDNt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPCollectCDNt::CopyFrom(const WPPCollectCDNt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPCollectCDNt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WPPCollectCDNt::Swap(WPPCollectCDNt* other) {
  if (other != this) {
    std::swap(cd_, other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPCollectCDNt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPCollectCDNt_descriptor_;
  metadata.reflection = WPPCollectCDNt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WPPActionNt::kTypeFieldNumber;
const int WPPActionNt::kCidFieldNumber;
const int WPPActionNt::kOtherFieldNumber;
const int WPPActionNt::kPosFieldNumber;
const int WPPActionNt::kDirFieldNumber;
#endif  // !_MSC_VER

WPPActionNt::WPPActionNt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPActionNt::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  dir_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

WPPActionNt::WPPActionNt(const WPPActionNt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPActionNt::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  other_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  dir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPActionNt::~WPPActionNt() {
  SharedDtor();
}

void WPPActionNt::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete dir_;
  }
}

void WPPActionNt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPActionNt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPActionNt_descriptor_;
}

const WPPActionNt& WPPActionNt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPActionNt* WPPActionNt::default_instance_ = NULL;

WPPActionNt* WPPActionNt::New() const {
  return new WPPActionNt;
}

void WPPActionNt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
    other_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPActionNt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_other;
        break;
      }

      // optional uint64 other = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &other_)));
          set_has_other();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dir;
        break;
      }

      // optional .proto_ff.Vector3PB dir = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WPPActionNt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint64 other = 3;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->other(), output);
  }

  // optional .proto_ff.Vector3PB pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional .proto_ff.Vector3PB dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPActionNt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint64 other = 3;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->other(), target);
  }

  // optional .proto_ff.Vector3PB pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional .proto_ff.Vector3PB dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPActionNt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 other = 3;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->other());
    }

    // optional .proto_ff.Vector3PB pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .proto_ff.Vector3PB dir = 5;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPActionNt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPActionNt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPActionNt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPActionNt::MergeFrom(const WPPActionNt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_other()) {
      set_other(from.other());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::proto_ff::Vector3PB::MergeFrom(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPActionNt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPActionNt::CopyFrom(const WPPActionNt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPActionNt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_dir()) {
    if (!this->dir().IsInitialized()) return false;
  }
  return true;
}

void WPPActionNt::Swap(WPPActionNt* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cid_, other->cid_);
    std::swap(other_, other->other_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPActionNt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPActionNt_descriptor_;
  metadata.reflection = WPPActionNt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WPPCancelCurActReq::WPPCancelCurActReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPCancelCurActReq::InitAsDefaultInstance() {
}

WPPCancelCurActReq::WPPCancelCurActReq(const WPPCancelCurActReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPCancelCurActReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPCancelCurActReq::~WPPCancelCurActReq() {
  SharedDtor();
}

void WPPCancelCurActReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WPPCancelCurActReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPCancelCurActReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPCancelCurActReq_descriptor_;
}

const WPPCancelCurActReq& WPPCancelCurActReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPCancelCurActReq* WPPCancelCurActReq::default_instance_ = NULL;

WPPCancelCurActReq* WPPCancelCurActReq::New() const {
  return new WPPCancelCurActReq;
}

void WPPCancelCurActReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPCancelCurActReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WPPCancelCurActReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPCancelCurActReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPCancelCurActReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPCancelCurActReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPCancelCurActReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPCancelCurActReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPCancelCurActReq::MergeFrom(const WPPCancelCurActReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPCancelCurActReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPCancelCurActReq::CopyFrom(const WPPCancelCurActReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPCancelCurActReq::IsInitialized() const {

  return true;
}

void WPPCancelCurActReq::Swap(WPPCancelCurActReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPCancelCurActReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPCancelCurActReq_descriptor_;
  metadata.reflection = WPPCancelCurActReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WPPCancelCurActRsp::kErrorFieldNumber;
#endif  // !_MSC_VER

WPPCancelCurActRsp::WPPCancelCurActRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPPCancelCurActRsp::InitAsDefaultInstance() {
}

WPPCancelCurActRsp::WPPCancelCurActRsp(const WPPCancelCurActRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPPCancelCurActRsp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPPCancelCurActRsp::~WPPCancelCurActRsp() {
  SharedDtor();
}

void WPPCancelCurActRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WPPCancelCurActRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPPCancelCurActRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPPCancelCurActRsp_descriptor_;
}

const WPPCancelCurActRsp& WPPCancelCurActRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

WPPCancelCurActRsp* WPPCancelCurActRsp::default_instance_ = NULL;

WPPCancelCurActRsp* WPPCancelCurActRsp::New() const {
  return new WPPCancelCurActRsp;
}

void WPPCancelCurActRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPPCancelCurActRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WPPCancelCurActRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPPCancelCurActRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPPCancelCurActRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPPCancelCurActRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPPCancelCurActRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPPCancelCurActRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPPCancelCurActRsp::MergeFrom(const WPPCancelCurActRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPPCancelCurActRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPPCancelCurActRsp::CopyFrom(const WPPCancelCurActRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPPCancelCurActRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WPPCancelCurActRsp::Swap(WPPCancelCurActRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPPCancelCurActRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPPCancelCurActRsp_descriptor_;
  metadata.reflection = WPPCancelCurActRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CTPEnterReq::CTPEnterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTPEnterReq::InitAsDefaultInstance() {
}

CTPEnterReq::CTPEnterReq(const CTPEnterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTPEnterReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTPEnterReq::~CTPEnterReq() {
  SharedDtor();
}

void CTPEnterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTPEnterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTPEnterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTPEnterReq_descriptor_;
}

const CTPEnterReq& CTPEnterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

CTPEnterReq* CTPEnterReq::default_instance_ = NULL;

CTPEnterReq* CTPEnterReq::New() const {
  return new CTPEnterReq;
}

void CTPEnterReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTPEnterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CTPEnterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTPEnterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTPEnterReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTPEnterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTPEnterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTPEnterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTPEnterReq::MergeFrom(const CTPEnterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTPEnterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPEnterReq::CopyFrom(const CTPEnterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPEnterReq::IsInitialized() const {

  return true;
}

void CTPEnterReq::Swap(CTPEnterReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTPEnterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTPEnterReq_descriptor_;
  metadata.reflection = CTPEnterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CTPExitReq::CTPExitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTPExitReq::InitAsDefaultInstance() {
}

CTPExitReq::CTPExitReq(const CTPExitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTPExitReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTPExitReq::~CTPExitReq() {
  SharedDtor();
}

void CTPExitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTPExitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTPExitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTPExitReq_descriptor_;
}

const CTPExitReq& CTPExitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

CTPExitReq* CTPExitReq::default_instance_ = NULL;

CTPExitReq* CTPExitReq::New() const {
  return new CTPExitReq;
}

void CTPExitReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTPExitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CTPExitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTPExitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTPExitReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTPExitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTPExitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTPExitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTPExitReq::MergeFrom(const CTPExitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTPExitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPExitReq::CopyFrom(const CTPExitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPExitReq::IsInitialized() const {

  return true;
}

void CTPExitReq::Swap(CTPExitReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTPExitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTPExitReq_descriptor_;
  metadata.reflection = CTPExitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTPPlayerInfo::kCidFieldNumber;
const int CTPPlayerInfo::kNameFieldNumber;
const int CTPPlayerInfo::kTeamFieldNumber;
const int CTPPlayerInfo::kServerIdFieldNumber;
const int CTPPlayerInfo::kKillCountFieldNumber;
const int CTPPlayerInfo::kAtkPowerFieldNumber;
const int CTPPlayerInfo::kDieCountFieldNumber;
const int CTPPlayerInfo::kScoreFieldNumber;
const int CTPPlayerInfo::kIsRebotFieldNumber;
#endif  // !_MSC_VER

CTPPlayerInfo::CTPPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTPPlayerInfo::InitAsDefaultInstance() {
}

CTPPlayerInfo::CTPPlayerInfo(const CTPPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTPPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_ = 0u;
  serverid_ = GOOGLE_ULONGLONG(0);
  killcount_ = 0u;
  atkpower_ = GOOGLE_ULONGLONG(0);
  diecount_ = 0u;
  score_ = 0u;
  isrebot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTPPlayerInfo::~CTPPlayerInfo() {
  SharedDtor();
}

void CTPPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CTPPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTPPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTPPlayerInfo_descriptor_;
}

const CTPPlayerInfo& CTPPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

CTPPlayerInfo* CTPPlayerInfo::default_instance_ = NULL;

CTPPlayerInfo* CTPPlayerInfo::New() const {
  return new CTPPlayerInfo;
}

void CTPPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    team_ = 0u;
    serverid_ = GOOGLE_ULONGLONG(0);
    killcount_ = 0u;
    atkpower_ = GOOGLE_ULONGLONG(0);
    diecount_ = 0u;
    score_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isrebot_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTPPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team;
        break;
      }

      // required uint32 team = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverId;
        break;
      }

      // required uint64 serverId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_killCount;
        break;
      }

      // required uint32 killCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_atkPower;
        break;
      }

      // required uint64 atkPower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atkPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atkpower_)));
          set_has_atkpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dieCount;
        break;
      }

      // required uint32 dieCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dieCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diecount_)));
          set_has_diecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_score;
        break;
      }

      // required uint32 score = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isRebot;
        break;
      }

      // required bool isRebot = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRebot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrebot_)));
          set_has_isrebot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTPPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 team = 3;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team(), output);
  }

  // required uint64 serverId = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->serverid(), output);
  }

  // required uint32 killCount = 5;
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->killcount(), output);
  }

  // required uint64 atkPower = 6;
  if (has_atkpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->atkpower(), output);
  }

  // required uint32 dieCount = 7;
  if (has_diecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->diecount(), output);
  }

  // required uint32 score = 8;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->score(), output);
  }

  // required bool isRebot = 9;
  if (has_isrebot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isrebot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTPPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 team = 3;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team(), target);
  }

  // required uint64 serverId = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->serverid(), target);
  }

  // required uint32 killCount = 5;
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->killcount(), target);
  }

  // required uint64 atkPower = 6;
  if (has_atkpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->atkpower(), target);
  }

  // required uint32 dieCount = 7;
  if (has_diecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->diecount(), target);
  }

  // required uint32 score = 8;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->score(), target);
  }

  // required bool isRebot = 9;
  if (has_isrebot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isrebot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTPPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 team = 3;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // required uint64 serverId = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // required uint32 killCount = 5;
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcount());
    }

    // required uint64 atkPower = 6;
    if (has_atkpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->atkpower());
    }

    // required uint32 dieCount = 7;
    if (has_diecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diecount());
    }

    // required uint32 score = 8;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool isRebot = 9;
    if (has_isrebot()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTPPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTPPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTPPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTPPlayerInfo::MergeFrom(const CTPPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
    if (from.has_atkpower()) {
      set_atkpower(from.atkpower());
    }
    if (from.has_diecount()) {
      set_diecount(from.diecount());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isrebot()) {
      set_isrebot(from.isrebot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTPPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPPlayerInfo::CopyFrom(const CTPPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void CTPPlayerInfo::Swap(CTPPlayerInfo* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(team_, other->team_);
    std::swap(serverid_, other->serverid_);
    std::swap(killcount_, other->killcount_);
    std::swap(atkpower_, other->atkpower_);
    std::swap(diecount_, other->diecount_);
    std::swap(score_, other->score_);
    std::swap(isrebot_, other->isrebot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTPPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTPPlayerInfo_descriptor_;
  metadata.reflection = CTPPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTPResult::kWinTeamFieldNumber;
const int CTPResult::kRankFieldNumber;
const int CTPResult::kTeam1ScoreFieldNumber;
const int CTPResult::kTeam2ScoreFieldNumber;
const int CTPResult::kLastFieldNumber;
#endif  // !_MSC_VER

CTPResult::CTPResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTPResult::InitAsDefaultInstance() {
}

CTPResult::CTPResult(const CTPResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTPResult::SharedCtor() {
  _cached_size_ = 0;
  winteam_ = 0u;
  team1score_ = 0u;
  team2score_ = 0u;
  last_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTPResult::~CTPResult() {
  SharedDtor();
}

void CTPResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTPResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTPResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTPResult_descriptor_;
}

const CTPResult& CTPResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

CTPResult* CTPResult::default_instance_ = NULL;

CTPResult* CTPResult::New() const {
  return new CTPResult;
}

void CTPResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winteam_ = 0u;
    team1score_ = 0u;
    team2score_ = 0u;
    last_ = false;
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTPResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 winTeam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winteam_)));
          set_has_winteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        break;
      }

      // repeated .proto_ff.CTPPlayerInfo rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        if (input->ExpectTag(24)) goto parse_team1Score;
        break;
      }

      // required uint32 team1Score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team1Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1score_)));
          set_has_team1score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team2Score;
        break;
      }

      // required uint32 team2Score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team2Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2score_)));
          set_has_team2score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last;
        break;
      }

      // required bool last = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTPResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 winTeam = 1;
  if (has_winteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->winteam(), output);
  }

  // repeated .proto_ff.CTPPlayerInfo rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank(i), output);
  }

  // required uint32 team1Score = 3;
  if (has_team1score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team1score(), output);
  }

  // required uint32 team2Score = 4;
  if (has_team2score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team2score(), output);
  }

  // required bool last = 5;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->last(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTPResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 winTeam = 1;
  if (has_winteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->winteam(), target);
  }

  // repeated .proto_ff.CTPPlayerInfo rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank(i), target);
  }

  // required uint32 team1Score = 3;
  if (has_team1score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team1score(), target);
  }

  // required uint32 team2Score = 4;
  if (has_team2score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team2score(), target);
  }

  // required bool last = 5;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->last(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTPResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 winTeam = 1;
    if (has_winteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winteam());
    }

    // required uint32 team1Score = 3;
    if (has_team1score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1score());
    }

    // required uint32 team2Score = 4;
    if (has_team2score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2score());
    }

    // required bool last = 5;
    if (has_last()) {
      total_size += 1 + 1;
    }

  }
  // repeated .proto_ff.CTPPlayerInfo rank = 2;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTPResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTPResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTPResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTPResult::MergeFrom(const CTPResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winteam()) {
      set_winteam(from.winteam());
    }
    if (from.has_team1score()) {
      set_team1score(from.team1score());
    }
    if (from.has_team2score()) {
      set_team2score(from.team2score());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTPResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPResult::CopyFrom(const CTPResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  for (int i = 0; i < rank_size(); i++) {
    if (!this->rank(i).IsInitialized()) return false;
  }
  return true;
}

void CTPResult::Swap(CTPResult* other) {
  if (other != this) {
    std::swap(winteam_, other->winteam_);
    rank_.Swap(&other->rank_);
    std::swap(team1score_, other->team1score_);
    std::swap(team2score_, other->team2score_);
    std::swap(last_, other->last_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTPResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTPResult_descriptor_;
  metadata.reflection = CTPResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTPEnterRsp::kMatchStartTimeFieldNumber;
const int CTPEnterRsp::kReadyStartTimeFieldNumber;
const int CTPEnterRsp::kRelifeStartTimeFieldNumber;
const int CTPEnterRsp::kRoundStartTimeFieldNumber;
const int CTPEnterRsp::kRoundStartFieldNumber;
const int CTPEnterRsp::kTeam1ScoreFieldNumber;
const int CTPEnterRsp::kTeam2ScoreFieldNumber;
const int CTPEnterRsp::kTeam1PlayersFieldNumber;
const int CTPEnterRsp::kTeam2PlayersFieldNumber;
const int CTPEnterRsp::kMyScoreFieldNumber;
const int CTPEnterRsp::kRankFieldNumber;
const int CTPEnterRsp::kTeamFieldNumber;
const int CTPEnterRsp::kResultsFieldNumber;
const int CTPEnterRsp::kTeam1RealPlayersFieldNumber;
const int CTPEnterRsp::kTeam2RealPlayersFieldNumber;
#endif  // !_MSC_VER

CTPEnterRsp::CTPEnterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTPEnterRsp::InitAsDefaultInstance() {
}

CTPEnterRsp::CTPEnterRsp(const CTPEnterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTPEnterRsp::SharedCtor() {
  _cached_size_ = 0;
  matchstarttime_ = GOOGLE_ULONGLONG(0);
  readystarttime_ = GOOGLE_ULONGLONG(0);
  relifestarttime_ = GOOGLE_ULONGLONG(0);
  roundstarttime_ = GOOGLE_ULONGLONG(0);
  roundstart_ = 0u;
  team1score_ = 0u;
  team2score_ = 0u;
  team1players_ = 0u;
  team2players_ = 0u;
  myscore_ = 0u;
  team_ = 0u;
  team1realplayers_ = 0u;
  team2realplayers_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTPEnterRsp::~CTPEnterRsp() {
  SharedDtor();
}

void CTPEnterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTPEnterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTPEnterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTPEnterRsp_descriptor_;
}

const CTPEnterRsp& CTPEnterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

CTPEnterRsp* CTPEnterRsp::default_instance_ = NULL;

CTPEnterRsp* CTPEnterRsp::New() const {
  return new CTPEnterRsp;
}

void CTPEnterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchstarttime_ = GOOGLE_ULONGLONG(0);
    readystarttime_ = GOOGLE_ULONGLONG(0);
    relifestarttime_ = GOOGLE_ULONGLONG(0);
    roundstarttime_ = GOOGLE_ULONGLONG(0);
    roundstart_ = 0u;
    team1score_ = 0u;
    team2score_ = 0u;
    team1players_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    team2players_ = 0u;
    myscore_ = 0u;
    team_ = 0u;
    team1realplayers_ = 0u;
    team2realplayers_ = 0u;
  }
  rank_.Clear();
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTPEnterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 matchStartTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchstarttime_)));
          set_has_matchstarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_readyStartTime;
        break;
      }

      // optional uint64 readyStartTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readyStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &readystarttime_)));
          set_has_readystarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_relifeStartTime;
        break;
      }

      // optional uint64 relifeStartTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relifeStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &relifestarttime_)));
          set_has_relifestarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roundStartTime;
        break;
      }

      // optional uint64 roundStartTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundstarttime_)));
          set_has_roundstarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roundStart;
        break;
      }

      // optional uint32 roundStart = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roundstart_)));
          set_has_roundstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_team1Score;
        break;
      }

      // required uint32 team1Score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team1Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1score_)));
          set_has_team1score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_team2Score;
        break;
      }

      // required uint32 team2Score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team2Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2score_)));
          set_has_team2score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_team1Players;
        break;
      }

      // required uint32 team1Players = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team1Players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1players_)));
          set_has_team1players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_team2Players;
        break;
      }

      // required uint32 team2Players = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team2Players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2players_)));
          set_has_team2players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_myScore;
        break;
      }

      // required uint32 myScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myscore_)));
          set_has_myscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_rank;
        break;
      }

      // repeated .proto_ff.CTPPlayerInfo rank = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_rank;
        if (input->ExpectTag(96)) goto parse_team;
        break;
      }

      // required uint32 team = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_results;
        break;
      }

      // repeated .proto_ff.CTPResult results = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_results;
        if (input->ExpectTag(112)) goto parse_team1RealPlayers;
        break;
      }

      // optional uint32 team1RealPlayers = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team1RealPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1realplayers_)));
          set_has_team1realplayers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_team2RealPlayers;
        break;
      }

      // optional uint32 team2RealPlayers = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team2RealPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2realplayers_)));
          set_has_team2realplayers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTPEnterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 matchStartTime = 1;
  if (has_matchstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->matchstarttime(), output);
  }

  // optional uint64 readyStartTime = 2;
  if (has_readystarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->readystarttime(), output);
  }

  // optional uint64 relifeStartTime = 3;
  if (has_relifestarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->relifestarttime(), output);
  }

  // optional uint64 roundStartTime = 4;
  if (has_roundstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roundstarttime(), output);
  }

  // optional uint32 roundStart = 5;
  if (has_roundstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->roundstart(), output);
  }

  // required uint32 team1Score = 6;
  if (has_team1score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team1score(), output);
  }

  // required uint32 team2Score = 7;
  if (has_team2score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team2score(), output);
  }

  // required uint32 team1Players = 8;
  if (has_team1players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->team1players(), output);
  }

  // required uint32 team2Players = 9;
  if (has_team2players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->team2players(), output);
  }

  // required uint32 myScore = 10;
  if (has_myscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->myscore(), output);
  }

  // repeated .proto_ff.CTPPlayerInfo rank = 11;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->rank(i), output);
  }

  // required uint32 team = 12;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->team(), output);
  }

  // repeated .proto_ff.CTPResult results = 13;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->results(i), output);
  }

  // optional uint32 team1RealPlayers = 14;
  if (has_team1realplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->team1realplayers(), output);
  }

  // optional uint32 team2RealPlayers = 15;
  if (has_team2realplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->team2realplayers(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTPEnterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 matchStartTime = 1;
  if (has_matchstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->matchstarttime(), target);
  }

  // optional uint64 readyStartTime = 2;
  if (has_readystarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->readystarttime(), target);
  }

  // optional uint64 relifeStartTime = 3;
  if (has_relifestarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->relifestarttime(), target);
  }

  // optional uint64 roundStartTime = 4;
  if (has_roundstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roundstarttime(), target);
  }

  // optional uint32 roundStart = 5;
  if (has_roundstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->roundstart(), target);
  }

  // required uint32 team1Score = 6;
  if (has_team1score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team1score(), target);
  }

  // required uint32 team2Score = 7;
  if (has_team2score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->team2score(), target);
  }

  // required uint32 team1Players = 8;
  if (has_team1players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->team1players(), target);
  }

  // required uint32 team2Players = 9;
  if (has_team2players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->team2players(), target);
  }

  // required uint32 myScore = 10;
  if (has_myscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->myscore(), target);
  }

  // repeated .proto_ff.CTPPlayerInfo rank = 11;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->rank(i), target);
  }

  // required uint32 team = 12;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->team(), target);
  }

  // repeated .proto_ff.CTPResult results = 13;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->results(i), target);
  }

  // optional uint32 team1RealPlayers = 14;
  if (has_team1realplayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->team1realplayers(), target);
  }

  // optional uint32 team2RealPlayers = 15;
  if (has_team2realplayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->team2realplayers(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTPEnterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 matchStartTime = 1;
    if (has_matchstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchstarttime());
    }

    // optional uint64 readyStartTime = 2;
    if (has_readystarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->readystarttime());
    }

    // optional uint64 relifeStartTime = 3;
    if (has_relifestarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->relifestarttime());
    }

    // optional uint64 roundStartTime = 4;
    if (has_roundstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roundstarttime());
    }

    // optional uint32 roundStart = 5;
    if (has_roundstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roundstart());
    }

    // required uint32 team1Score = 6;
    if (has_team1score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1score());
    }

    // required uint32 team2Score = 7;
    if (has_team2score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2score());
    }

    // required uint32 team1Players = 8;
    if (has_team1players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1players());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 team2Players = 9;
    if (has_team2players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2players());
    }

    // required uint32 myScore = 10;
    if (has_myscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myscore());
    }

    // required uint32 team = 12;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 team1RealPlayers = 14;
    if (has_team1realplayers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1realplayers());
    }

    // optional uint32 team2RealPlayers = 15;
    if (has_team2realplayers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2realplayers());
    }

  }
  // repeated .proto_ff.CTPPlayerInfo rank = 11;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  // repeated .proto_ff.CTPResult results = 13;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTPEnterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTPEnterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTPEnterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTPEnterRsp::MergeFrom(const CTPEnterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchstarttime()) {
      set_matchstarttime(from.matchstarttime());
    }
    if (from.has_readystarttime()) {
      set_readystarttime(from.readystarttime());
    }
    if (from.has_relifestarttime()) {
      set_relifestarttime(from.relifestarttime());
    }
    if (from.has_roundstarttime()) {
      set_roundstarttime(from.roundstarttime());
    }
    if (from.has_roundstart()) {
      set_roundstart(from.roundstart());
    }
    if (from.has_team1score()) {
      set_team1score(from.team1score());
    }
    if (from.has_team2score()) {
      set_team2score(from.team2score());
    }
    if (from.has_team1players()) {
      set_team1players(from.team1players());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_team2players()) {
      set_team2players(from.team2players());
    }
    if (from.has_myscore()) {
      set_myscore(from.myscore());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_team1realplayers()) {
      set_team1realplayers(from.team1realplayers());
    }
    if (from.has_team2realplayers()) {
      set_team2realplayers(from.team2realplayers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTPEnterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPEnterRsp::CopyFrom(const CTPEnterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPEnterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000be0) != 0x00000be0) return false;

  for (int i = 0; i < rank_size(); i++) {
    if (!this->rank(i).IsInitialized()) return false;
  }
  for (int i = 0; i < results_size(); i++) {
    if (!this->results(i).IsInitialized()) return false;
  }
  return true;
}

void CTPEnterRsp::Swap(CTPEnterRsp* other) {
  if (other != this) {
    std::swap(matchstarttime_, other->matchstarttime_);
    std::swap(readystarttime_, other->readystarttime_);
    std::swap(relifestarttime_, other->relifestarttime_);
    std::swap(roundstarttime_, other->roundstarttime_);
    std::swap(roundstart_, other->roundstart_);
    std::swap(team1score_, other->team1score_);
    std::swap(team2score_, other->team2score_);
    std::swap(team1players_, other->team1players_);
    std::swap(team2players_, other->team2players_);
    std::swap(myscore_, other->myscore_);
    rank_.Swap(&other->rank_);
    std::swap(team_, other->team_);
    results_.Swap(&other->results_);
    std::swap(team1realplayers_, other->team1realplayers_);
    std::swap(team2realplayers_, other->team2realplayers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTPEnterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTPEnterRsp_descriptor_;
  metadata.reflection = CTPEnterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTPReadyStart::kReadyStartTimeFieldNumber;
#endif  // !_MSC_VER

CTPReadyStart::CTPReadyStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTPReadyStart::InitAsDefaultInstance() {
}

CTPReadyStart::CTPReadyStart(const CTPReadyStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTPReadyStart::SharedCtor() {
  _cached_size_ = 0;
  readystarttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTPReadyStart::~CTPReadyStart() {
  SharedDtor();
}

void CTPReadyStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTPReadyStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTPReadyStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTPReadyStart_descriptor_;
}

const CTPReadyStart& CTPReadyStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

CTPReadyStart* CTPReadyStart::default_instance_ = NULL;

CTPReadyStart* CTPReadyStart::New() const {
  return new CTPReadyStart;
}

void CTPReadyStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    readystarttime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTPReadyStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 readyStartTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &readystarttime_)));
          set_has_readystarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTPReadyStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 readyStartTime = 1;
  if (has_readystarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->readystarttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTPReadyStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 readyStartTime = 1;
  if (has_readystarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->readystarttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTPReadyStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 readyStartTime = 1;
    if (has_readystarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->readystarttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTPReadyStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTPReadyStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTPReadyStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTPReadyStart::MergeFrom(const CTPReadyStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_readystarttime()) {
      set_readystarttime(from.readystarttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTPReadyStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPReadyStart::CopyFrom(const CTPReadyStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPReadyStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CTPReadyStart::Swap(CTPReadyStart* other) {
  if (other != this) {
    std::swap(readystarttime_, other->readystarttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTPReadyStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTPReadyStart_descriptor_;
  metadata.reflection = CTPReadyStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTPRoundStart::kRoundStartTimeFieldNumber;
const int CTPRoundStart::kRoundStartFieldNumber;
#endif  // !_MSC_VER

CTPRoundStart::CTPRoundStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTPRoundStart::InitAsDefaultInstance() {
}

CTPRoundStart::CTPRoundStart(const CTPRoundStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTPRoundStart::SharedCtor() {
  _cached_size_ = 0;
  roundstarttime_ = GOOGLE_ULONGLONG(0);
  roundstart_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTPRoundStart::~CTPRoundStart() {
  SharedDtor();
}

void CTPRoundStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTPRoundStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTPRoundStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTPRoundStart_descriptor_;
}

const CTPRoundStart& CTPRoundStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

CTPRoundStart* CTPRoundStart::default_instance_ = NULL;

CTPRoundStart* CTPRoundStart::New() const {
  return new CTPRoundStart;
}

void CTPRoundStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roundstarttime_ = GOOGLE_ULONGLONG(0);
    roundstart_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTPRoundStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roundStartTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundstarttime_)));
          set_has_roundstarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roundStart;
        break;
      }

      // required uint32 roundStart = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roundstart_)));
          set_has_roundstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTPRoundStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roundStartTime = 1;
  if (has_roundstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roundstarttime(), output);
  }

  // required uint32 roundStart = 2;
  if (has_roundstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roundstart(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTPRoundStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roundStartTime = 1;
  if (has_roundstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roundstarttime(), target);
  }

  // required uint32 roundStart = 2;
  if (has_roundstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roundstart(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTPRoundStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roundStartTime = 1;
    if (has_roundstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roundstarttime());
    }

    // required uint32 roundStart = 2;
    if (has_roundstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roundstart());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTPRoundStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTPRoundStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTPRoundStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTPRoundStart::MergeFrom(const CTPRoundStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roundstarttime()) {
      set_roundstarttime(from.roundstarttime());
    }
    if (from.has_roundstart()) {
      set_roundstart(from.roundstart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTPRoundStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPRoundStart::CopyFrom(const CTPRoundStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPRoundStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CTPRoundStart::Swap(CTPRoundStart* other) {
  if (other != this) {
    std::swap(roundstarttime_, other->roundstarttime_);
    std::swap(roundstart_, other->roundstart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTPRoundStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTPRoundStart_descriptor_;
  metadata.reflection = CTPRoundStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTPScoreRankNt::kRankFieldNumber;
const int CTPScoreRankNt::kTeam1ScoreFieldNumber;
const int CTPScoreRankNt::kTeam2ScoreFieldNumber;
#endif  // !_MSC_VER

CTPScoreRankNt::CTPScoreRankNt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTPScoreRankNt::InitAsDefaultInstance() {
}

CTPScoreRankNt::CTPScoreRankNt(const CTPScoreRankNt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTPScoreRankNt::SharedCtor() {
  _cached_size_ = 0;
  team1score_ = 0u;
  team2score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTPScoreRankNt::~CTPScoreRankNt() {
  SharedDtor();
}

void CTPScoreRankNt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTPScoreRankNt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTPScoreRankNt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTPScoreRankNt_descriptor_;
}

const CTPScoreRankNt& CTPScoreRankNt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

CTPScoreRankNt* CTPScoreRankNt::default_instance_ = NULL;

CTPScoreRankNt* CTPScoreRankNt::New() const {
  return new CTPScoreRankNt;
}

void CTPScoreRankNt::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    team1score_ = 0u;
    team2score_ = 0u;
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTPScoreRankNt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CTPPlayerInfo rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank;
        if (input->ExpectTag(16)) goto parse_team1Score;
        break;
      }

      // required uint32 team1Score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team1Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1score_)));
          set_has_team1score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team2Score;
        break;
      }

      // required uint32 team2Score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team2Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2score_)));
          set_has_team2score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTPScoreRankNt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CTPPlayerInfo rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(i), output);
  }

  // required uint32 team1Score = 2;
  if (has_team1score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team1score(), output);
  }

  // required uint32 team2Score = 3;
  if (has_team2score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team2score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTPScoreRankNt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CTPPlayerInfo rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(i), target);
  }

  // required uint32 team1Score = 2;
  if (has_team1score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team1score(), target);
  }

  // required uint32 team2Score = 3;
  if (has_team2score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team2score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTPScoreRankNt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 team1Score = 2;
    if (has_team1score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1score());
    }

    // required uint32 team2Score = 3;
    if (has_team2score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2score());
    }

  }
  // repeated .proto_ff.CTPPlayerInfo rank = 1;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTPScoreRankNt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTPScoreRankNt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTPScoreRankNt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTPScoreRankNt::MergeFrom(const CTPScoreRankNt& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_team1score()) {
      set_team1score(from.team1score());
    }
    if (from.has_team2score()) {
      set_team2score(from.team2score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTPScoreRankNt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPScoreRankNt::CopyFrom(const CTPScoreRankNt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPScoreRankNt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < rank_size(); i++) {
    if (!this->rank(i).IsInitialized()) return false;
  }
  return true;
}

void CTPScoreRankNt::Swap(CTPScoreRankNt* other) {
  if (other != this) {
    rank_.Swap(&other->rank_);
    std::swap(team1score_, other->team1score_);
    std::swap(team2score_, other->team2score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTPScoreRankNt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTPScoreRankNt_descriptor_;
  metadata.reflection = CTPScoreRankNt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTPScoreChgNt::kCidFieldNumber;
const int CTPScoreChgNt::kTeam1ScoreFieldNumber;
const int CTPScoreChgNt::kTeam2ScoreFieldNumber;
#endif  // !_MSC_VER

CTPScoreChgNt::CTPScoreChgNt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTPScoreChgNt::InitAsDefaultInstance() {
}

CTPScoreChgNt::CTPScoreChgNt(const CTPScoreChgNt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTPScoreChgNt::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  team1score_ = 0u;
  team2score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTPScoreChgNt::~CTPScoreChgNt() {
  SharedDtor();
}

void CTPScoreChgNt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTPScoreChgNt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTPScoreChgNt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTPScoreChgNt_descriptor_;
}

const CTPScoreChgNt& CTPScoreChgNt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

CTPScoreChgNt* CTPScoreChgNt::default_instance_ = NULL;

CTPScoreChgNt* CTPScoreChgNt::New() const {
  return new CTPScoreChgNt;
}

void CTPScoreChgNt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    team1score_ = 0u;
    team2score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTPScoreChgNt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team1Score;
        break;
      }

      // required uint32 team1Score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team1Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1score_)));
          set_has_team1score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team2Score;
        break;
      }

      // required uint32 team2Score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team2Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2score_)));
          set_has_team2score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTPScoreChgNt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 team1Score = 2;
  if (has_team1score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team1score(), output);
  }

  // required uint32 team2Score = 3;
  if (has_team2score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team2score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTPScoreChgNt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 team1Score = 2;
  if (has_team1score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team1score(), target);
  }

  // required uint32 team2Score = 3;
  if (has_team2score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team2score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTPScoreChgNt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 team1Score = 2;
    if (has_team1score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1score());
    }

    // required uint32 team2Score = 3;
    if (has_team2score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTPScoreChgNt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTPScoreChgNt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTPScoreChgNt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTPScoreChgNt::MergeFrom(const CTPScoreChgNt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_team1score()) {
      set_team1score(from.team1score());
    }
    if (from.has_team2score()) {
      set_team2score(from.team2score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTPScoreChgNt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPScoreChgNt::CopyFrom(const CTPScoreChgNt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPScoreChgNt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CTPScoreChgNt::Swap(CTPScoreChgNt* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(team1score_, other->team1score_);
    std::swap(team2score_, other->team2score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTPScoreChgNt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTPScoreChgNt_descriptor_;
  metadata.reflection = CTPScoreChgNt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTPKillPlayerInfo::kKillsCountFieldNumber;
const int CTPKillPlayerInfo::kNameFieldNumber;
const int CTPKillPlayerInfo::kFacadeFieldNumber;
const int CTPKillPlayerInfo::kTeamFieldNumber;
#endif  // !_MSC_VER

CTPKillPlayerInfo::CTPKillPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTPKillPlayerInfo::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

CTPKillPlayerInfo::CTPKillPlayerInfo(const CTPKillPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTPKillPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  killscount_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  facade_ = NULL;
  team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTPKillPlayerInfo::~CTPKillPlayerInfo() {
  SharedDtor();
}

void CTPKillPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void CTPKillPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTPKillPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTPKillPlayerInfo_descriptor_;
}

const CTPKillPlayerInfo& CTPKillPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

CTPKillPlayerInfo* CTPKillPlayerInfo::default_instance_ = NULL;

CTPKillPlayerInfo* CTPKillPlayerInfo::New() const {
  return new CTPKillPlayerInfo;
}

void CTPKillPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killscount_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    team_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTPKillPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 killsCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killscount_)));
          set_has_killscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_facade;
        break;
      }

      // required .proto_ff.RoleFacadeProto facade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team;
        break;
      }

      // required uint32 team = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTPKillPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 killsCount = 1;
  if (has_killscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->killscount(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required .proto_ff.RoleFacadeProto facade = 3;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->facade(), output);
  }

  // required uint32 team = 4;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTPKillPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 killsCount = 1;
  if (has_killscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->killscount(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .proto_ff.RoleFacadeProto facade = 3;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->facade(), target);
  }

  // required uint32 team = 4;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTPKillPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 killsCount = 1;
    if (has_killscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killscount());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .proto_ff.RoleFacadeProto facade = 3;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // required uint32 team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTPKillPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTPKillPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTPKillPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTPKillPlayerInfo::MergeFrom(const CTPKillPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killscount()) {
      set_killscount(from.killscount());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTPKillPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPKillPlayerInfo::CopyFrom(const CTPKillPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPKillPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void CTPKillPlayerInfo::Swap(CTPKillPlayerInfo* other) {
  if (other != this) {
    std::swap(killscount_, other->killscount_);
    std::swap(name_, other->name_);
    std::swap(facade_, other->facade_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTPKillPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTPKillPlayerInfo_descriptor_;
  metadata.reflection = CTPKillPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTPKillNt::kAtkerFieldNumber;
const int CTPKillNt::kBehitFieldNumber;
#endif  // !_MSC_VER

CTPKillNt::CTPKillNt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTPKillNt::InitAsDefaultInstance() {
  atker_ = const_cast< ::proto_ff::CTPKillPlayerInfo*>(&::proto_ff::CTPKillPlayerInfo::default_instance());
  behit_ = const_cast< ::proto_ff::CTPKillPlayerInfo*>(&::proto_ff::CTPKillPlayerInfo::default_instance());
}

CTPKillNt::CTPKillNt(const CTPKillNt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTPKillNt::SharedCtor() {
  _cached_size_ = 0;
  atker_ = NULL;
  behit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTPKillNt::~CTPKillNt() {
  SharedDtor();
}

void CTPKillNt::SharedDtor() {
  if (this != default_instance_) {
    delete atker_;
    delete behit_;
  }
}

void CTPKillNt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTPKillNt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTPKillNt_descriptor_;
}

const CTPKillNt& CTPKillNt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

CTPKillNt* CTPKillNt::default_instance_ = NULL;

CTPKillNt* CTPKillNt::New() const {
  return new CTPKillNt;
}

void CTPKillNt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_atker()) {
      if (atker_ != NULL) atker_->::proto_ff::CTPKillPlayerInfo::Clear();
    }
    if (has_behit()) {
      if (behit_ != NULL) behit_->::proto_ff::CTPKillPlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTPKillNt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.CTPKillPlayerInfo atker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_behit;
        break;
      }

      // required .proto_ff.CTPKillPlayerInfo behit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_behit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_behit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTPKillNt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.CTPKillPlayerInfo atker = 1;
  if (has_atker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->atker(), output);
  }

  // required .proto_ff.CTPKillPlayerInfo behit = 2;
  if (has_behit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->behit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTPKillNt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.CTPKillPlayerInfo atker = 1;
  if (has_atker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->atker(), target);
  }

  // required .proto_ff.CTPKillPlayerInfo behit = 2;
  if (has_behit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->behit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTPKillNt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.CTPKillPlayerInfo atker = 1;
    if (has_atker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atker());
    }

    // required .proto_ff.CTPKillPlayerInfo behit = 2;
    if (has_behit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->behit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTPKillNt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTPKillNt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTPKillNt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTPKillNt::MergeFrom(const CTPKillNt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atker()) {
      mutable_atker()->::proto_ff::CTPKillPlayerInfo::MergeFrom(from.atker());
    }
    if (from.has_behit()) {
      mutable_behit()->::proto_ff::CTPKillPlayerInfo::MergeFrom(from.behit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTPKillNt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPKillNt::CopyFrom(const CTPKillNt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPKillNt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_atker()) {
    if (!this->atker().IsInitialized()) return false;
  }
  if (has_behit()) {
    if (!this->behit().IsInitialized()) return false;
  }
  return true;
}

void CTPKillNt::Swap(CTPKillNt* other) {
  if (other != this) {
    std::swap(atker_, other->atker_);
    std::swap(behit_, other->behit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTPKillNt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTPKillNt_descriptor_;
  metadata.reflection = CTPKillNt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTPPlayersChgNt::kTeam1PlayersFieldNumber;
const int CTPPlayersChgNt::kTeam2PlayersFieldNumber;
const int CTPPlayersChgNt::kTeam1RealPlayersFieldNumber;
const int CTPPlayersChgNt::kTeam2RealPlayersFieldNumber;
#endif  // !_MSC_VER

CTPPlayersChgNt::CTPPlayersChgNt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTPPlayersChgNt::InitAsDefaultInstance() {
}

CTPPlayersChgNt::CTPPlayersChgNt(const CTPPlayersChgNt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTPPlayersChgNt::SharedCtor() {
  _cached_size_ = 0;
  team1players_ = 0u;
  team2players_ = 0u;
  team1realplayers_ = 0u;
  team2realplayers_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTPPlayersChgNt::~CTPPlayersChgNt() {
  SharedDtor();
}

void CTPPlayersChgNt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTPPlayersChgNt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTPPlayersChgNt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTPPlayersChgNt_descriptor_;
}

const CTPPlayersChgNt& CTPPlayersChgNt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

CTPPlayersChgNt* CTPPlayersChgNt::default_instance_ = NULL;

CTPPlayersChgNt* CTPPlayersChgNt::New() const {
  return new CTPPlayersChgNt;
}

void CTPPlayersChgNt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team1players_ = 0u;
    team2players_ = 0u;
    team1realplayers_ = 0u;
    team2realplayers_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTPPlayersChgNt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 team1Players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1players_)));
          set_has_team1players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team2Players;
        break;
      }

      // required uint32 team2Players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team2Players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2players_)));
          set_has_team2players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team1RealPlayers;
        break;
      }

      // required uint32 team1RealPlayers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team1RealPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1realplayers_)));
          set_has_team1realplayers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team2RealPlayers;
        break;
      }

      // required uint32 team2RealPlayers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team2RealPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2realplayers_)));
          set_has_team2realplayers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTPPlayersChgNt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 team1Players = 1;
  if (has_team1players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team1players(), output);
  }

  // required uint32 team2Players = 2;
  if (has_team2players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team2players(), output);
  }

  // required uint32 team1RealPlayers = 3;
  if (has_team1realplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team1realplayers(), output);
  }

  // required uint32 team2RealPlayers = 4;
  if (has_team2realplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team2realplayers(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTPPlayersChgNt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 team1Players = 1;
  if (has_team1players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team1players(), target);
  }

  // required uint32 team2Players = 2;
  if (has_team2players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team2players(), target);
  }

  // required uint32 team1RealPlayers = 3;
  if (has_team1realplayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team1realplayers(), target);
  }

  // required uint32 team2RealPlayers = 4;
  if (has_team2realplayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team2realplayers(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTPPlayersChgNt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 team1Players = 1;
    if (has_team1players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1players());
    }

    // required uint32 team2Players = 2;
    if (has_team2players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2players());
    }

    // required uint32 team1RealPlayers = 3;
    if (has_team1realplayers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1realplayers());
    }

    // required uint32 team2RealPlayers = 4;
    if (has_team2realplayers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2realplayers());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTPPlayersChgNt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTPPlayersChgNt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTPPlayersChgNt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTPPlayersChgNt::MergeFrom(const CTPPlayersChgNt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team1players()) {
      set_team1players(from.team1players());
    }
    if (from.has_team2players()) {
      set_team2players(from.team2players());
    }
    if (from.has_team1realplayers()) {
      set_team1realplayers(from.team1realplayers());
    }
    if (from.has_team2realplayers()) {
      set_team2realplayers(from.team2realplayers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTPPlayersChgNt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPPlayersChgNt::CopyFrom(const CTPPlayersChgNt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPPlayersChgNt::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CTPPlayersChgNt::Swap(CTPPlayersChgNt* other) {
  if (other != this) {
    std::swap(team1players_, other->team1players_);
    std::swap(team2players_, other->team2players_);
    std::swap(team1realplayers_, other->team1realplayers_);
    std::swap(team2realplayers_, other->team2realplayers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTPPlayersChgNt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTPPlayersChgNt_descriptor_;
  metadata.reflection = CTPPlayersChgNt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBEnterError::kErrcodeFieldNumber;
#endif  // !_MSC_VER

GVBEnterError::GVBEnterError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBEnterError::InitAsDefaultInstance() {
}

GVBEnterError::GVBEnterError(const GVBEnterError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBEnterError::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBEnterError::~GVBEnterError() {
  SharedDtor();
}

void GVBEnterError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBEnterError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBEnterError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBEnterError_descriptor_;
}

const GVBEnterError& GVBEnterError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GVBEnterError* GVBEnterError::default_instance_ = NULL;

GVBEnterError* GVBEnterError::New() const {
  return new GVBEnterError;
}

void GVBEnterError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBEnterError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBEnterError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBEnterError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBEnterError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBEnterError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBEnterError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBEnterError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBEnterError::MergeFrom(const GVBEnterError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBEnterError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBEnterError::CopyFrom(const GVBEnterError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBEnterError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GVBEnterError::Swap(GVBEnterError* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBEnterError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBEnterError_descriptor_;
  metadata.reflection = GVBEnterError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMADatas::kRemainTimeFieldNumber;
const int GMADatas::kFreeTimeRemainFieldNumber;
const int GMADatas::kFreeTimeFieldNumber;
const int GMADatas::kPrivilegeFieldNumber;
const int GMADatas::kRecvFreeTimePrevFieldNumber;
const int GMADatas::kIsPauseFieldNumber;
const int GMADatas::kExpGetFieldNumber;
const int GMADatas::kGetFreeTimeCDFieldNumber;
const int GMADatas::kExpTotalFieldNumber;
const int GMADatas::kExpAccumulateFieldNumber;
#endif  // !_MSC_VER

GMADatas::GMADatas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMADatas::InitAsDefaultInstance() {
}

GMADatas::GMADatas(const GMADatas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMADatas::SharedCtor() {
  _cached_size_ = 0;
  remaintime_ = 0u;
  freetimeremain_ = 0u;
  freetime_ = 0u;
  privilege_ = 0u;
  recvfreetimeprev_ = GOOGLE_ULONGLONG(0);
  ispause_ = false;
  expget_ = 0u;
  getfreetimecd_ = 0u;
  exptotal_ = GOOGLE_LONGLONG(0);
  expaccumulate_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMADatas::~GMADatas() {
  SharedDtor();
}

void GMADatas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMADatas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMADatas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMADatas_descriptor_;
}

const GMADatas& GMADatas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMADatas* GMADatas::default_instance_ = NULL;

GMADatas* GMADatas::New() const {
  return new GMADatas;
}

void GMADatas::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remaintime_ = 0u;
    freetimeremain_ = 0u;
    freetime_ = 0u;
    privilege_ = 0u;
    recvfreetimeprev_ = GOOGLE_ULONGLONG(0);
    ispause_ = false;
    expget_ = 0u;
    getfreetimecd_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exptotal_ = GOOGLE_LONGLONG(0);
    expaccumulate_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMADatas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 remainTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_freeTimeRemain;
        break;
      }

      // optional uint32 freeTimeRemain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeTimeRemain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freetimeremain_)));
          set_has_freetimeremain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freeTime;
        break;
      }

      // optional uint32 freeTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freetime_)));
          set_has_freetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_privilege;
        break;
      }

      // optional uint32 privilege = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privilege:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &privilege_)));
          set_has_privilege();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recvFreeTimePrev;
        break;
      }

      // optional uint64 recvFreeTimePrev = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvFreeTimePrev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvfreetimeprev_)));
          set_has_recvfreetimeprev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isPause;
        break;
      }

      // optional bool isPause = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispause_)));
          set_has_ispause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_expGet;
        break;
      }

      // optional uint32 expGet = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expget_)));
          set_has_expget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_getFreeTimeCD;
        break;
      }

      // optional uint32 getFreeTimeCD = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getFreeTimeCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getfreetimecd_)));
          set_has_getfreetimecd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_expTotal;
        break;
      }

      // optional int64 expTotal = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exptotal_)));
          set_has_exptotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_expAccumulate;
        break;
      }

      // optional int64 expAccumulate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expAccumulate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expaccumulate_)));
          set_has_expaccumulate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMADatas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 remainTime = 1;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remaintime(), output);
  }

  // optional uint32 freeTimeRemain = 2;
  if (has_freetimeremain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->freetimeremain(), output);
  }

  // optional uint32 freeTime = 3;
  if (has_freetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->freetime(), output);
  }

  // optional uint32 privilege = 4;
  if (has_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->privilege(), output);
  }

  // optional uint64 recvFreeTimePrev = 5;
  if (has_recvfreetimeprev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->recvfreetimeprev(), output);
  }

  // optional bool isPause = 6;
  if (has_ispause()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ispause(), output);
  }

  // optional uint32 expGet = 7;
  if (has_expget()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->expget(), output);
  }

  // optional uint32 getFreeTimeCD = 8;
  if (has_getfreetimecd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->getfreetimecd(), output);
  }

  // optional int64 expTotal = 9;
  if (has_exptotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->exptotal(), output);
  }

  // optional int64 expAccumulate = 10;
  if (has_expaccumulate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->expaccumulate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMADatas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 remainTime = 1;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remaintime(), target);
  }

  // optional uint32 freeTimeRemain = 2;
  if (has_freetimeremain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->freetimeremain(), target);
  }

  // optional uint32 freeTime = 3;
  if (has_freetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->freetime(), target);
  }

  // optional uint32 privilege = 4;
  if (has_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->privilege(), target);
  }

  // optional uint64 recvFreeTimePrev = 5;
  if (has_recvfreetimeprev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->recvfreetimeprev(), target);
  }

  // optional bool isPause = 6;
  if (has_ispause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ispause(), target);
  }

  // optional uint32 expGet = 7;
  if (has_expget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->expget(), target);
  }

  // optional uint32 getFreeTimeCD = 8;
  if (has_getfreetimecd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->getfreetimecd(), target);
  }

  // optional int64 expTotal = 9;
  if (has_exptotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->exptotal(), target);
  }

  // optional int64 expAccumulate = 10;
  if (has_expaccumulate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->expaccumulate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMADatas::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 remainTime = 1;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintime());
    }

    // optional uint32 freeTimeRemain = 2;
    if (has_freetimeremain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freetimeremain());
    }

    // optional uint32 freeTime = 3;
    if (has_freetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freetime());
    }

    // optional uint32 privilege = 4;
    if (has_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->privilege());
    }

    // optional uint64 recvFreeTimePrev = 5;
    if (has_recvfreetimeprev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvfreetimeprev());
    }

    // optional bool isPause = 6;
    if (has_ispause()) {
      total_size += 1 + 1;
    }

    // optional uint32 expGet = 7;
    if (has_expget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expget());
    }

    // optional uint32 getFreeTimeCD = 8;
    if (has_getfreetimecd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getfreetimecd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 expTotal = 9;
    if (has_exptotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exptotal());
    }

    // optional int64 expAccumulate = 10;
    if (has_expaccumulate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expaccumulate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMADatas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMADatas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMADatas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMADatas::MergeFrom(const GMADatas& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_freetimeremain()) {
      set_freetimeremain(from.freetimeremain());
    }
    if (from.has_freetime()) {
      set_freetime(from.freetime());
    }
    if (from.has_privilege()) {
      set_privilege(from.privilege());
    }
    if (from.has_recvfreetimeprev()) {
      set_recvfreetimeprev(from.recvfreetimeprev());
    }
    if (from.has_ispause()) {
      set_ispause(from.ispause());
    }
    if (from.has_expget()) {
      set_expget(from.expget());
    }
    if (from.has_getfreetimecd()) {
      set_getfreetimecd(from.getfreetimecd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exptotal()) {
      set_exptotal(from.exptotal());
    }
    if (from.has_expaccumulate()) {
      set_expaccumulate(from.expaccumulate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMADatas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMADatas::CopyFrom(const GMADatas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMADatas::IsInitialized() const {

  return true;
}

void GMADatas::Swap(GMADatas* other) {
  if (other != this) {
    std::swap(remaintime_, other->remaintime_);
    std::swap(freetimeremain_, other->freetimeremain_);
    std::swap(freetime_, other->freetime_);
    std::swap(privilege_, other->privilege_);
    std::swap(recvfreetimeprev_, other->recvfreetimeprev_);
    std::swap(ispause_, other->ispause_);
    std::swap(expget_, other->expget_);
    std::swap(getfreetimecd_, other->getfreetimecd_);
    std::swap(exptotal_, other->exptotal_);
    std::swap(expaccumulate_, other->expaccumulate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMADatas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMADatas_descriptor_;
  metadata.reflection = GMADatas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMABossInfo::kPlayersFieldNumber;
const int GMABossInfo::kPosIdFieldNumber;
const int GMABossInfo::kCfgIdFieldNumber;
#endif  // !_MSC_VER

GMABossInfo::GMABossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMABossInfo::InitAsDefaultInstance() {
}

GMABossInfo::GMABossInfo(const GMABossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMABossInfo::SharedCtor() {
  _cached_size_ = 0;
  players_ = 0u;
  posid_ = 0u;
  cfgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMABossInfo::~GMABossInfo() {
  SharedDtor();
}

void GMABossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMABossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMABossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMABossInfo_descriptor_;
}

const GMABossInfo& GMABossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMABossInfo* GMABossInfo::default_instance_ = NULL;

GMABossInfo* GMABossInfo::New() const {
  return new GMABossInfo;
}

void GMABossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    players_ = 0u;
    posid_ = 0u;
    cfgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMABossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_)));
          set_has_players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posId;
        break;
      }

      // required uint32 posId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cfgId;
        break;
      }

      // required uint32 cfgId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMABossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 players = 1;
  if (has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->players(), output);
  }

  // required uint32 posId = 2;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->posid(), output);
  }

  // required uint32 cfgId = 3;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cfgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMABossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 players = 1;
  if (has_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->players(), target);
  }

  // required uint32 posId = 2;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->posid(), target);
  }

  // required uint32 cfgId = 3;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cfgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMABossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 players = 1;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players());
    }

    // required uint32 posId = 2;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posid());
    }

    // required uint32 cfgId = 3;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMABossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMABossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMABossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMABossInfo::MergeFrom(const GMABossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_players()) {
      set_players(from.players());
    }
    if (from.has_posid()) {
      set_posid(from.posid());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMABossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMABossInfo::CopyFrom(const GMABossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMABossInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMABossInfo::Swap(GMABossInfo* other) {
  if (other != this) {
    std::swap(players_, other->players_);
    std::swap(posid_, other->posid_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMABossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMABossInfo_descriptor_;
  metadata.reflection = GMABossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMABossInfoReqData::kCfgIdFieldNumber;
const int GMABossInfoReqData::kPosIdFieldNumber;
#endif  // !_MSC_VER

GMABossInfoReqData::GMABossInfoReqData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMABossInfoReqData::InitAsDefaultInstance() {
}

GMABossInfoReqData::GMABossInfoReqData(const GMABossInfoReqData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMABossInfoReqData::SharedCtor() {
  _cached_size_ = 0;
  cfgid_ = 0u;
  posid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMABossInfoReqData::~GMABossInfoReqData() {
  SharedDtor();
}

void GMABossInfoReqData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMABossInfoReqData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMABossInfoReqData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMABossInfoReqData_descriptor_;
}

const GMABossInfoReqData& GMABossInfoReqData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMABossInfoReqData* GMABossInfoReqData::default_instance_ = NULL;

GMABossInfoReqData* GMABossInfoReqData::New() const {
  return new GMABossInfoReqData;
}

void GMABossInfoReqData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfgid_ = 0u;
    posid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMABossInfoReqData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cfgId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posId;
        break;
      }

      // required uint32 posId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMABossInfoReqData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cfgId = 1;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cfgid(), output);
  }

  // required uint32 posId = 2;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->posid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMABossInfoReqData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cfgId = 1;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cfgid(), target);
  }

  // required uint32 posId = 2;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->posid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMABossInfoReqData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cfgId = 1;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

    // required uint32 posId = 2;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMABossInfoReqData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMABossInfoReqData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMABossInfoReqData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMABossInfoReqData::MergeFrom(const GMABossInfoReqData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_posid()) {
      set_posid(from.posid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMABossInfoReqData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMABossInfoReqData::CopyFrom(const GMABossInfoReqData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMABossInfoReqData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMABossInfoReqData::Swap(GMABossInfoReqData* other) {
  if (other != this) {
    std::swap(cfgid_, other->cfgid_);
    std::swap(posid_, other->posid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMABossInfoReqData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMABossInfoReqData_descriptor_;
  metadata.reflection = GMABossInfoReqData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMABossInfoReq::kListFieldNumber;
#endif  // !_MSC_VER

GMABossInfoReq::GMABossInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMABossInfoReq::InitAsDefaultInstance() {
}

GMABossInfoReq::GMABossInfoReq(const GMABossInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMABossInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMABossInfoReq::~GMABossInfoReq() {
  SharedDtor();
}

void GMABossInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMABossInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMABossInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMABossInfoReq_descriptor_;
}

const GMABossInfoReq& GMABossInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMABossInfoReq* GMABossInfoReq::default_instance_ = NULL;

GMABossInfoReq* GMABossInfoReq::New() const {
  return new GMABossInfoReq;
}

void GMABossInfoReq::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMABossInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GMABossInfoReqData list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMABossInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GMABossInfoReqData list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMABossInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GMABossInfoReqData list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMABossInfoReq::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GMABossInfoReqData list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMABossInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMABossInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMABossInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMABossInfoReq::MergeFrom(const GMABossInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMABossInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMABossInfoReq::CopyFrom(const GMABossInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMABossInfoReq::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void GMABossInfoReq::Swap(GMABossInfoReq* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMABossInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMABossInfoReq_descriptor_;
  metadata.reflection = GMABossInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMABossInfoRsp::kBossListInfoFieldNumber;
#endif  // !_MSC_VER

GMABossInfoRsp::GMABossInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMABossInfoRsp::InitAsDefaultInstance() {
}

GMABossInfoRsp::GMABossInfoRsp(const GMABossInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMABossInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMABossInfoRsp::~GMABossInfoRsp() {
  SharedDtor();
}

void GMABossInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMABossInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMABossInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMABossInfoRsp_descriptor_;
}

const GMABossInfoRsp& GMABossInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMABossInfoRsp* GMABossInfoRsp::default_instance_ = NULL;

GMABossInfoRsp* GMABossInfoRsp::New() const {
  return new GMABossInfoRsp;
}

void GMABossInfoRsp::Clear() {
  bosslistinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMABossInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GMABossInfo bossListInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossListInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bosslistinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bossListInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMABossInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GMABossInfo bossListInfo = 1;
  for (int i = 0; i < this->bosslistinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bosslistinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMABossInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GMABossInfo bossListInfo = 1;
  for (int i = 0; i < this->bosslistinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bosslistinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMABossInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GMABossInfo bossListInfo = 1;
  total_size += 1 * this->bosslistinfo_size();
  for (int i = 0; i < this->bosslistinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bosslistinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMABossInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMABossInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMABossInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMABossInfoRsp::MergeFrom(const GMABossInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  bosslistinfo_.MergeFrom(from.bosslistinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMABossInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMABossInfoRsp::CopyFrom(const GMABossInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMABossInfoRsp::IsInitialized() const {

  for (int i = 0; i < bosslistinfo_size(); i++) {
    if (!this->bosslistinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GMABossInfoRsp::Swap(GMABossInfoRsp* other) {
  if (other != this) {
    bosslistinfo_.Swap(&other->bosslistinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMABossInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMABossInfoRsp_descriptor_;
  metadata.reflection = GMABossInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMABossInfoSingleReq::kMapIdFieldNumber;
const int GMABossInfoSingleReq::kPosIdFieldNumber;
#endif  // !_MSC_VER

GMABossInfoSingleReq::GMABossInfoSingleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMABossInfoSingleReq::InitAsDefaultInstance() {
}

GMABossInfoSingleReq::GMABossInfoSingleReq(const GMABossInfoSingleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMABossInfoSingleReq::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  posid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMABossInfoSingleReq::~GMABossInfoSingleReq() {
  SharedDtor();
}

void GMABossInfoSingleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMABossInfoSingleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMABossInfoSingleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMABossInfoSingleReq_descriptor_;
}

const GMABossInfoSingleReq& GMABossInfoSingleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMABossInfoSingleReq* GMABossInfoSingleReq::default_instance_ = NULL;

GMABossInfoSingleReq* GMABossInfoSingleReq::New() const {
  return new GMABossInfoSingleReq;
}

void GMABossInfoSingleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    posid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMABossInfoSingleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posId;
        break;
      }

      // required uint32 posId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMABossInfoSingleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // required uint32 posId = 2;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->posid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMABossInfoSingleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // required uint32 posId = 2;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->posid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMABossInfoSingleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required uint32 posId = 2;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMABossInfoSingleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMABossInfoSingleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMABossInfoSingleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMABossInfoSingleReq::MergeFrom(const GMABossInfoSingleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_posid()) {
      set_posid(from.posid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMABossInfoSingleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMABossInfoSingleReq::CopyFrom(const GMABossInfoSingleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMABossInfoSingleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMABossInfoSingleReq::Swap(GMABossInfoSingleReq* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(posid_, other->posid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMABossInfoSingleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMABossInfoSingleReq_descriptor_;
  metadata.reflection = GMABossInfoSingleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMABossInfoSingleRsp::kPlayersFieldNumber;
const int GMABossInfoSingleRsp::kPosIdFieldNumber;
#endif  // !_MSC_VER

GMABossInfoSingleRsp::GMABossInfoSingleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMABossInfoSingleRsp::InitAsDefaultInstance() {
}

GMABossInfoSingleRsp::GMABossInfoSingleRsp(const GMABossInfoSingleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMABossInfoSingleRsp::SharedCtor() {
  _cached_size_ = 0;
  players_ = 0u;
  posid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMABossInfoSingleRsp::~GMABossInfoSingleRsp() {
  SharedDtor();
}

void GMABossInfoSingleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMABossInfoSingleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMABossInfoSingleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMABossInfoSingleRsp_descriptor_;
}

const GMABossInfoSingleRsp& GMABossInfoSingleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMABossInfoSingleRsp* GMABossInfoSingleRsp::default_instance_ = NULL;

GMABossInfoSingleRsp* GMABossInfoSingleRsp::New() const {
  return new GMABossInfoSingleRsp;
}

void GMABossInfoSingleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    players_ = 0u;
    posid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMABossInfoSingleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_)));
          set_has_players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posId;
        break;
      }

      // required uint32 posId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMABossInfoSingleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 players = 1;
  if (has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->players(), output);
  }

  // required uint32 posId = 2;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->posid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMABossInfoSingleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 players = 1;
  if (has_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->players(), target);
  }

  // required uint32 posId = 2;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->posid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMABossInfoSingleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 players = 1;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players());
    }

    // required uint32 posId = 2;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMABossInfoSingleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMABossInfoSingleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMABossInfoSingleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMABossInfoSingleRsp::MergeFrom(const GMABossInfoSingleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_players()) {
      set_players(from.players());
    }
    if (from.has_posid()) {
      set_posid(from.posid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMABossInfoSingleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMABossInfoSingleRsp::CopyFrom(const GMABossInfoSingleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMABossInfoSingleRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMABossInfoSingleRsp::Swap(GMABossInfoSingleRsp* other) {
  if (other != this) {
    std::swap(players_, other->players_);
    std::swap(posid_, other->posid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMABossInfoSingleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMABossInfoSingleRsp_descriptor_;
  metadata.reflection = GMABossInfoSingleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAPauseReq::kIsPauseFieldNumber;
#endif  // !_MSC_VER

GMAPauseReq::GMAPauseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAPauseReq::InitAsDefaultInstance() {
}

GMAPauseReq::GMAPauseReq(const GMAPauseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAPauseReq::SharedCtor() {
  _cached_size_ = 0;
  ispause_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAPauseReq::~GMAPauseReq() {
  SharedDtor();
}

void GMAPauseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAPauseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAPauseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAPauseReq_descriptor_;
}

const GMAPauseReq& GMAPauseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMAPauseReq* GMAPauseReq::default_instance_ = NULL;

GMAPauseReq* GMAPauseReq::New() const {
  return new GMAPauseReq;
}

void GMAPauseReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ispause_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAPauseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isPause = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispause_)));
          set_has_ispause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAPauseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isPause = 1;
  if (has_ispause()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ispause(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAPauseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isPause = 1;
  if (has_ispause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ispause(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAPauseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isPause = 1;
    if (has_ispause()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAPauseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAPauseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAPauseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAPauseReq::MergeFrom(const GMAPauseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ispause()) {
      set_ispause(from.ispause());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAPauseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAPauseReq::CopyFrom(const GMAPauseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAPauseReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMAPauseReq::Swap(GMAPauseReq* other) {
  if (other != this) {
    std::swap(ispause_, other->ispause_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAPauseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAPauseReq_descriptor_;
  metadata.reflection = GMAPauseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAPauseRsp::kIsPauseFieldNumber;
#endif  // !_MSC_VER

GMAPauseRsp::GMAPauseRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAPauseRsp::InitAsDefaultInstance() {
}

GMAPauseRsp::GMAPauseRsp(const GMAPauseRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAPauseRsp::SharedCtor() {
  _cached_size_ = 0;
  ispause_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAPauseRsp::~GMAPauseRsp() {
  SharedDtor();
}

void GMAPauseRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAPauseRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAPauseRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAPauseRsp_descriptor_;
}

const GMAPauseRsp& GMAPauseRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMAPauseRsp* GMAPauseRsp::default_instance_ = NULL;

GMAPauseRsp* GMAPauseRsp::New() const {
  return new GMAPauseRsp;
}

void GMAPauseRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ispause_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAPauseRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isPause = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispause_)));
          set_has_ispause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAPauseRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isPause = 1;
  if (has_ispause()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ispause(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAPauseRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isPause = 1;
  if (has_ispause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ispause(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAPauseRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isPause = 1;
    if (has_ispause()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAPauseRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAPauseRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAPauseRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAPauseRsp::MergeFrom(const GMAPauseRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ispause()) {
      set_ispause(from.ispause());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAPauseRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAPauseRsp::CopyFrom(const GMAPauseRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAPauseRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMAPauseRsp::Swap(GMAPauseRsp* other) {
  if (other != this) {
    std::swap(ispause_, other->ispause_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAPauseRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAPauseRsp_descriptor_;
  metadata.reflection = GMAPauseRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GMAPayReq::GMAPayReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAPayReq::InitAsDefaultInstance() {
}

GMAPayReq::GMAPayReq(const GMAPayReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAPayReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAPayReq::~GMAPayReq() {
  SharedDtor();
}

void GMAPayReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAPayReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAPayReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAPayReq_descriptor_;
}

const GMAPayReq& GMAPayReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMAPayReq* GMAPayReq::default_instance_ = NULL;

GMAPayReq* GMAPayReq::New() const {
  return new GMAPayReq;
}

void GMAPayReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAPayReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GMAPayReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAPayReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAPayReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAPayReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAPayReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAPayReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAPayReq::MergeFrom(const GMAPayReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAPayReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAPayReq::CopyFrom(const GMAPayReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAPayReq::IsInitialized() const {

  return true;
}

void GMAPayReq::Swap(GMAPayReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAPayReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAPayReq_descriptor_;
  metadata.reflection = GMAPayReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAPayRsp::kErrorFieldNumber;
const int GMAPayRsp::kPrivilegeFieldNumber;
#endif  // !_MSC_VER

GMAPayRsp::GMAPayRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAPayRsp::InitAsDefaultInstance() {
}

GMAPayRsp::GMAPayRsp(const GMAPayRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAPayRsp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0u;
  privilege_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAPayRsp::~GMAPayRsp() {
  SharedDtor();
}

void GMAPayRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAPayRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAPayRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAPayRsp_descriptor_;
}

const GMAPayRsp& GMAPayRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMAPayRsp* GMAPayRsp::default_instance_ = NULL;

GMAPayRsp* GMAPayRsp::New() const {
  return new GMAPayRsp;
}

void GMAPayRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0u;
    privilege_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAPayRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_privilege;
        break;
      }

      // required uint32 privilege = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privilege:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &privilege_)));
          set_has_privilege();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAPayRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  // required uint32 privilege = 2;
  if (has_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->privilege(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAPayRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  // required uint32 privilege = 2;
  if (has_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->privilege(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAPayRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error());
    }

    // required uint32 privilege = 2;
    if (has_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->privilege());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAPayRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAPayRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAPayRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAPayRsp::MergeFrom(const GMAPayRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_privilege()) {
      set_privilege(from.privilege());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAPayRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAPayRsp::CopyFrom(const GMAPayRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAPayRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMAPayRsp::Swap(GMAPayRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(privilege_, other->privilege_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAPayRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAPayRsp_descriptor_;
  metadata.reflection = GMAPayRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GMAEnterReq::GMAEnterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAEnterReq::InitAsDefaultInstance() {
}

GMAEnterReq::GMAEnterReq(const GMAEnterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAEnterReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAEnterReq::~GMAEnterReq() {
  SharedDtor();
}

void GMAEnterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAEnterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAEnterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAEnterReq_descriptor_;
}

const GMAEnterReq& GMAEnterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMAEnterReq* GMAEnterReq::default_instance_ = NULL;

GMAEnterReq* GMAEnterReq::New() const {
  return new GMAEnterReq;
}

void GMAEnterReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAEnterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GMAEnterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAEnterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAEnterReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAEnterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAEnterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAEnterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAEnterReq::MergeFrom(const GMAEnterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAEnterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAEnterReq::CopyFrom(const GMAEnterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAEnterReq::IsInitialized() const {

  return true;
}

void GMAEnterReq::Swap(GMAEnterReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAEnterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAEnterReq_descriptor_;
  metadata.reflection = GMAEnterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAGotoFloorReq::kPosIdxFieldNumber;
#endif  // !_MSC_VER

GMAGotoFloorReq::GMAGotoFloorReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAGotoFloorReq::InitAsDefaultInstance() {
}

GMAGotoFloorReq::GMAGotoFloorReq(const GMAGotoFloorReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAGotoFloorReq::SharedCtor() {
  _cached_size_ = 0;
  posidx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAGotoFloorReq::~GMAGotoFloorReq() {
  SharedDtor();
}

void GMAGotoFloorReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAGotoFloorReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAGotoFloorReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAGotoFloorReq_descriptor_;
}

const GMAGotoFloorReq& GMAGotoFloorReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMAGotoFloorReq* GMAGotoFloorReq::default_instance_ = NULL;

GMAGotoFloorReq* GMAGotoFloorReq::New() const {
  return new GMAGotoFloorReq;
}

void GMAGotoFloorReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posidx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAGotoFloorReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 posIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posidx_)));
          set_has_posidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAGotoFloorReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 posIdx = 1;
  if (has_posidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->posidx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAGotoFloorReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 posIdx = 1;
  if (has_posidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->posidx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAGotoFloorReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 posIdx = 1;
    if (has_posidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posidx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAGotoFloorReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAGotoFloorReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAGotoFloorReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAGotoFloorReq::MergeFrom(const GMAGotoFloorReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posidx()) {
      set_posidx(from.posidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAGotoFloorReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAGotoFloorReq::CopyFrom(const GMAGotoFloorReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAGotoFloorReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMAGotoFloorReq::Swap(GMAGotoFloorReq* other) {
  if (other != this) {
    std::swap(posidx_, other->posidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAGotoFloorReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAGotoFloorReq_descriptor_;
  metadata.reflection = GMAGotoFloorReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAGotoFloorRsp::kErrorFieldNumber;
#endif  // !_MSC_VER

GMAGotoFloorRsp::GMAGotoFloorRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAGotoFloorRsp::InitAsDefaultInstance() {
}

GMAGotoFloorRsp::GMAGotoFloorRsp(const GMAGotoFloorRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAGotoFloorRsp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAGotoFloorRsp::~GMAGotoFloorRsp() {
  SharedDtor();
}

void GMAGotoFloorRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAGotoFloorRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAGotoFloorRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAGotoFloorRsp_descriptor_;
}

const GMAGotoFloorRsp& GMAGotoFloorRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMAGotoFloorRsp* GMAGotoFloorRsp::default_instance_ = NULL;

GMAGotoFloorRsp* GMAGotoFloorRsp::New() const {
  return new GMAGotoFloorRsp;
}

void GMAGotoFloorRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAGotoFloorRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAGotoFloorRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAGotoFloorRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAGotoFloorRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAGotoFloorRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAGotoFloorRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAGotoFloorRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAGotoFloorRsp::MergeFrom(const GMAGotoFloorRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAGotoFloorRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAGotoFloorRsp::CopyFrom(const GMAGotoFloorRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAGotoFloorRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMAGotoFloorRsp::Swap(GMAGotoFloorRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAGotoFloorRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAGotoFloorRsp_descriptor_;
  metadata.reflection = GMAGotoFloorRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMATimeRechargeReq::kItemIdFieldNumber;
const int GMATimeRechargeReq::kCountFieldNumber;
#endif  // !_MSC_VER

GMATimeRechargeReq::GMATimeRechargeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMATimeRechargeReq::InitAsDefaultInstance() {
}

GMATimeRechargeReq::GMATimeRechargeReq(const GMATimeRechargeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMATimeRechargeReq::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMATimeRechargeReq::~GMATimeRechargeReq() {
  SharedDtor();
}

void GMATimeRechargeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMATimeRechargeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMATimeRechargeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMATimeRechargeReq_descriptor_;
}

const GMATimeRechargeReq& GMATimeRechargeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMATimeRechargeReq* GMATimeRechargeReq::default_instance_ = NULL;

GMATimeRechargeReq* GMATimeRechargeReq::New() const {
  return new GMATimeRechargeReq;
}

void GMATimeRechargeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMATimeRechargeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMATimeRechargeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMATimeRechargeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMATimeRechargeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMATimeRechargeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMATimeRechargeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMATimeRechargeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMATimeRechargeReq::MergeFrom(const GMATimeRechargeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMATimeRechargeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMATimeRechargeReq::CopyFrom(const GMATimeRechargeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMATimeRechargeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMATimeRechargeReq::Swap(GMATimeRechargeReq* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMATimeRechargeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMATimeRechargeReq_descriptor_;
  metadata.reflection = GMATimeRechargeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMATimeRechargeRsp::kErrorFieldNumber;
#endif  // !_MSC_VER

GMATimeRechargeRsp::GMATimeRechargeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMATimeRechargeRsp::InitAsDefaultInstance() {
}

GMATimeRechargeRsp::GMATimeRechargeRsp(const GMATimeRechargeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMATimeRechargeRsp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMATimeRechargeRsp::~GMATimeRechargeRsp() {
  SharedDtor();
}

void GMATimeRechargeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMATimeRechargeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMATimeRechargeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMATimeRechargeRsp_descriptor_;
}

const GMATimeRechargeRsp& GMATimeRechargeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMATimeRechargeRsp* GMATimeRechargeRsp::default_instance_ = NULL;

GMATimeRechargeRsp* GMATimeRechargeRsp::New() const {
  return new GMATimeRechargeRsp;
}

void GMATimeRechargeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMATimeRechargeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMATimeRechargeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMATimeRechargeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMATimeRechargeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMATimeRechargeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMATimeRechargeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMATimeRechargeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMATimeRechargeRsp::MergeFrom(const GMATimeRechargeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMATimeRechargeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMATimeRechargeRsp::CopyFrom(const GMATimeRechargeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMATimeRechargeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMATimeRechargeRsp::Swap(GMATimeRechargeRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMATimeRechargeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMATimeRechargeRsp_descriptor_;
  metadata.reflection = GMATimeRechargeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GMAExitReq::GMAExitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAExitReq::InitAsDefaultInstance() {
}

GMAExitReq::GMAExitReq(const GMAExitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAExitReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAExitReq::~GMAExitReq() {
  SharedDtor();
}

void GMAExitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAExitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAExitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAExitReq_descriptor_;
}

const GMAExitReq& GMAExitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMAExitReq* GMAExitReq::default_instance_ = NULL;

GMAExitReq* GMAExitReq::New() const {
  return new GMAExitReq;
}

void GMAExitReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAExitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GMAExitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAExitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAExitReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAExitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAExitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAExitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAExitReq::MergeFrom(const GMAExitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAExitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAExitReq::CopyFrom(const GMAExitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAExitReq::IsInitialized() const {

  return true;
}

void GMAExitReq::Swap(GMAExitReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAExitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAExitReq_descriptor_;
  metadata.reflection = GMAExitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GMAResultReq::GMAResultReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAResultReq::InitAsDefaultInstance() {
}

GMAResultReq::GMAResultReq(const GMAResultReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAResultReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAResultReq::~GMAResultReq() {
  SharedDtor();
}

void GMAResultReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAResultReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAResultReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAResultReq_descriptor_;
}

const GMAResultReq& GMAResultReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMAResultReq* GMAResultReq::default_instance_ = NULL;

GMAResultReq* GMAResultReq::New() const {
  return new GMAResultReq;
}

void GMAResultReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAResultReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GMAResultReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAResultReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAResultReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAResultReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAResultReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAResultReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAResultReq::MergeFrom(const GMAResultReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAResultReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAResultReq::CopyFrom(const GMAResultReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAResultReq::IsInitialized() const {

  return true;
}

void GMAResultReq::Swap(GMAResultReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAResultReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAResultReq_descriptor_;
  metadata.reflection = GMAResultReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAResultRsp::kItemIdsFieldNumber;
const int GMAResultRsp::kItemCountsFieldNumber;
const int GMAResultRsp::kTimeUsedFieldNumber;
#endif  // !_MSC_VER

GMAResultRsp::GMAResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAResultRsp::InitAsDefaultInstance() {
}

GMAResultRsp::GMAResultRsp(const GMAResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAResultRsp::SharedCtor() {
  _cached_size_ = 0;
  timeused_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAResultRsp::~GMAResultRsp() {
  SharedDtor();
}

void GMAResultRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAResultRsp_descriptor_;
}

const GMAResultRsp& GMAResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodValleyBattle_2eproto();
  return *default_instance_;
}

GMAResultRsp* GMAResultRsp::default_instance_ = NULL;

GMAResultRsp* GMAResultRsp::New() const {
  return new GMAResultRsp;
}

void GMAResultRsp::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    timeused_ = GOOGLE_ULONGLONG(0);
  }
  itemids_.Clear();
  itemcounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 itemIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_itemids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_itemids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_itemIds;
        if (input->ExpectTag(16)) goto parse_itemCounts;
        break;
      }

      // repeated uint64 itemCounts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_itemcounts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_itemcounts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemCounts;
        if (input->ExpectTag(24)) goto parse_timeUsed;
        break;
      }

      // required uint64 timeUsed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeUsed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeused_)));
          set_has_timeused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 itemIds = 1;
  for (int i = 0; i < this->itemids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->itemids(i), output);
  }

  // repeated uint64 itemCounts = 2;
  for (int i = 0; i < this->itemcounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->itemcounts(i), output);
  }

  // required uint64 timeUsed = 3;
  if (has_timeused()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timeused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 itemIds = 1;
  for (int i = 0; i < this->itemids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->itemids(i), target);
  }

  // repeated uint64 itemCounts = 2;
  for (int i = 0; i < this->itemcounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->itemcounts(i), target);
  }

  // required uint64 timeUsed = 3;
  if (has_timeused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timeused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint64 timeUsed = 3;
    if (has_timeused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeused());
    }

  }
  // repeated uint64 itemIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->itemids(i));
    }
    total_size += 1 * this->itemids_size() + data_size;
  }

  // repeated uint64 itemCounts = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemcounts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->itemcounts(i));
    }
    total_size += 1 * this->itemcounts_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAResultRsp::MergeFrom(const GMAResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemids_.MergeFrom(from.itemids_);
  itemcounts_.MergeFrom(from.itemcounts_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_timeused()) {
      set_timeused(from.timeused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAResultRsp::CopyFrom(const GMAResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAResultRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void GMAResultRsp::Swap(GMAResultRsp* other) {
  if (other != this) {
    itemids_.Swap(&other->itemids_);
    itemcounts_.Swap(&other->itemcounts_);
    std::swap(timeused_, other->timeused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAResultRsp_descriptor_;
  metadata.reflection = GMAResultRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
