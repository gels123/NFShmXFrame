// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_svr_event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_svr_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* FunctionUnlockEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionUnlockEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLeveUpEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLeveUpEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemUseEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemUseEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptTaskEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptTaskEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinishTaskEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinishTaskEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveSceneEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveSceneEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChgSceneEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChgSceneEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterSceneEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterSceneEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncScenePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncScenePos_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncSceneState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncSceneState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowPartActiveEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowPartActiveEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowPartLvUpEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowPartLvUpEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowPartDressEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowPartDressEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeFacadeEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeFacadeEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassDupEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassDupEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeityFantasyBattleEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeityFantasyBattleEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeityActiveEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeityActiveEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingFightChgEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingFightChgEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartnerFightChgEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartnerFightChgEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtifactFightChgEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtifactFightChgEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureFightChgEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureFightChgEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtifactFantasy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtifactFantasy_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureFantasy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureFantasy_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingFantasy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingFantasy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartnerFantasy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartnerFantasy_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingAdvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingAdvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureAdvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureAdvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtifactAdvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtifactAdvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountAdvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountAdvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* OccupationAdvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OccupationAdvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartnerAdvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartnerAdvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodRelicsFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodRelicsFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatWorldEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatWorldEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipScoreChangeEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipScoreChangeEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoneInlayEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoneInlayEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountFightChgEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountFightChgEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MagicSumChangeEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MagicSumChangeEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattlePassXianCe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattlePassXianCe_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattlePassBaoDing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattlePassBaoDing_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeityFightChgEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeityFightChgEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeastFightChgEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeastFightChgEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryExpressExpEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryExpressExpEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShenjiFightChgEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShenjiFightChgEvent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fsvr_5fevent_2eproto() {
  protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_svr_event.proto");
  GOOGLE_CHECK(file != NULL);
  FunctionUnlockEvent_descriptor_ = file->message_type(0);
  static const int FunctionUnlockEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockEvent, functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockEvent, sync_),
  };
  FunctionUnlockEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionUnlockEvent_descriptor_,
      FunctionUnlockEvent::default_instance_,
      FunctionUnlockEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionUnlockEvent));
  PlayerLeveUpEvent_descriptor_ = file->message_type(1);
  static const int PlayerLeveUpEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeveUpEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeveUpEvent, level_),
  };
  PlayerLeveUpEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLeveUpEvent_descriptor_,
      PlayerLeveUpEvent::default_instance_,
      PlayerLeveUpEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeveUpEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeveUpEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLeveUpEvent));
  ItemUseEvent_descriptor_ = file->message_type(2);
  static const int ItemUseEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseEvent, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseEvent, num_),
  };
  ItemUseEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemUseEvent_descriptor_,
      ItemUseEvent::default_instance_,
      ItemUseEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemUseEvent));
  AcceptTaskEvent_descriptor_ = file->message_type(3);
  static const int AcceptTaskEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptTaskEvent, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptTaskEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptTaskEvent, tasktype_),
  };
  AcceptTaskEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptTaskEvent_descriptor_,
      AcceptTaskEvent::default_instance_,
      AcceptTaskEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptTaskEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptTaskEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptTaskEvent));
  FinishTaskEvent_descriptor_ = file->message_type(4);
  static const int FinishTaskEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishTaskEvent, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishTaskEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishTaskEvent, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishTaskEvent, mapgroup_),
  };
  FinishTaskEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinishTaskEvent_descriptor_,
      FinishTaskEvent::default_instance_,
      FinishTaskEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishTaskEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishTaskEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinishTaskEvent));
  LeaveSceneEvent_descriptor_ = file->message_type(5);
  static const int LeaveSceneEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveSceneEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveSceneEvent, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveSceneEvent, mapid_),
  };
  LeaveSceneEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveSceneEvent_descriptor_,
      LeaveSceneEvent::default_instance_,
      LeaveSceneEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveSceneEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveSceneEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveSceneEvent));
  ChgSceneEvent_descriptor_ = file->message_type(6);
  static const int ChgSceneEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgSceneEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgSceneEvent, enterflag_),
  };
  ChgSceneEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChgSceneEvent_descriptor_,
      ChgSceneEvent::default_instance_,
      ChgSceneEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgSceneEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgSceneEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChgSceneEvent));
  EnterSceneEvent_descriptor_ = file->message_type(7);
  static const int EnterSceneEvent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, z_),
  };
  EnterSceneEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterSceneEvent_descriptor_,
      EnterSceneEvent::default_instance_,
      EnterSceneEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterSceneEvent));
  SyncScenePos_descriptor_ = file->message_type(8);
  static const int SyncScenePos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncScenePos, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncScenePos, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncScenePos, pos_),
  };
  SyncScenePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncScenePos_descriptor_,
      SyncScenePos::default_instance_,
      SyncScenePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncScenePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncScenePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncScenePos));
  SyncSceneState_descriptor_ = file->message_type(9);
  static const int SyncSceneState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSceneState, last_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSceneState, cur_state_),
  };
  SyncSceneState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncSceneState_descriptor_,
      SyncSceneState::default_instance_,
      SyncSceneState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSceneState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSceneState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncSceneState));
  GrowPartActiveEvent_descriptor_ = file->message_type(10);
  static const int GrowPartActiveEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartActiveEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartActiveEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartActiveEvent, curlv_),
  };
  GrowPartActiveEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowPartActiveEvent_descriptor_,
      GrowPartActiveEvent::default_instance_,
      GrowPartActiveEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartActiveEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartActiveEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowPartActiveEvent));
  GrowPartLvUpEvent_descriptor_ = file->message_type(11);
  static const int GrowPartLvUpEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartLvUpEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartLvUpEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartLvUpEvent, curlv_),
  };
  GrowPartLvUpEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowPartLvUpEvent_descriptor_,
      GrowPartLvUpEvent::default_instance_,
      GrowPartLvUpEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartLvUpEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartLvUpEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowPartLvUpEvent));
  GrowPartDressEvent_descriptor_ = file->message_type(12);
  static const int GrowPartDressEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDressEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDressEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDressEvent, curlv_),
  };
  GrowPartDressEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowPartDressEvent_descriptor_,
      GrowPartDressEvent::default_instance_,
      GrowPartDressEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDressEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDressEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowPartDressEvent));
  ChangeFacadeEvent_descriptor_ = file->message_type(13);
  static const int ChangeFacadeEvent_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFacadeEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFacadeEvent, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFacadeEvent, fashionclothesid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFacadeEvent, fashionweaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFacadeEvent, occupationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFacadeEvent, mountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFacadeEvent, treasure_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFacadeEvent, treasure_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFacadeEvent, artifact_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFacadeEvent, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFacadeEvent, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFacadeEvent, bubble_id_),
  };
  ChangeFacadeEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeFacadeEvent_descriptor_,
      ChangeFacadeEvent::default_instance_,
      ChangeFacadeEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFacadeEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFacadeEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeFacadeEvent));
  PayEvent_descriptor_ = file->message_type(14);
  static const int PayEvent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayEvent, payindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayEvent, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayEvent, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayEvent, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayEvent, indexfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayEvent, allfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayEvent, chanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayEvent, productid_),
  };
  PayEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayEvent_descriptor_,
      PayEvent::default_instance_,
      PayEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayEvent));
  PassDupEvent_descriptor_ = file->message_type(15);
  static const int PassDupEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDupEvent, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDupEvent, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDupEvent, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDupEvent, zid_),
  };
  PassDupEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassDupEvent_descriptor_,
      PassDupEvent::default_instance_,
      PassDupEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDupEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDupEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassDupEvent));
  DeityFantasyBattleEvent_descriptor_ = file->message_type(16);
  static const int DeityFantasyBattleEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasyBattleEvent, num_),
  };
  DeityFantasyBattleEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeityFantasyBattleEvent_descriptor_,
      DeityFantasyBattleEvent::default_instance_,
      DeityFantasyBattleEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasyBattleEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasyBattleEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeityFantasyBattleEvent));
  DeityActiveEvent_descriptor_ = file->message_type(17);
  static const int DeityActiveEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityActiveEvent, id_),
  };
  DeityActiveEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeityActiveEvent_descriptor_,
      DeityActiveEvent::default_instance_,
      DeityActiveEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityActiveEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityActiveEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeityActiveEvent));
  WingFightChgEvent_descriptor_ = file->message_type(18);
  static const int WingFightChgEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingFightChgEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingFightChgEvent, fight_),
  };
  WingFightChgEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingFightChgEvent_descriptor_,
      WingFightChgEvent::default_instance_,
      WingFightChgEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingFightChgEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingFightChgEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingFightChgEvent));
  PartnerFightChgEvent_descriptor_ = file->message_type(19);
  static const int PartnerFightChgEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerFightChgEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerFightChgEvent, fight_),
  };
  PartnerFightChgEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartnerFightChgEvent_descriptor_,
      PartnerFightChgEvent::default_instance_,
      PartnerFightChgEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerFightChgEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerFightChgEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartnerFightChgEvent));
  ArtifactFightChgEvent_descriptor_ = file->message_type(20);
  static const int ArtifactFightChgEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactFightChgEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactFightChgEvent, fight_),
  };
  ArtifactFightChgEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArtifactFightChgEvent_descriptor_,
      ArtifactFightChgEvent::default_instance_,
      ArtifactFightChgEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactFightChgEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactFightChgEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtifactFightChgEvent));
  TreasureFightChgEvent_descriptor_ = file->message_type(21);
  static const int TreasureFightChgEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureFightChgEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureFightChgEvent, fight_),
  };
  TreasureFightChgEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureFightChgEvent_descriptor_,
      TreasureFightChgEvent::default_instance_,
      TreasureFightChgEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureFightChgEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureFightChgEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureFightChgEvent));
  ArtifactFantasy_descriptor_ = file->message_type(22);
  static const int ArtifactFantasy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactFantasy, nfantasyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactFantasy, nlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactFantasy, ntotallv_),
  };
  ArtifactFantasy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArtifactFantasy_descriptor_,
      ArtifactFantasy::default_instance_,
      ArtifactFantasy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactFantasy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactFantasy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtifactFantasy));
  TreasureFantasy_descriptor_ = file->message_type(23);
  static const int TreasureFantasy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureFantasy, nfantasyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureFantasy, nlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureFantasy, ntotallv_),
  };
  TreasureFantasy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureFantasy_descriptor_,
      TreasureFantasy::default_instance_,
      TreasureFantasy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureFantasy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureFantasy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureFantasy));
  WingFantasy_descriptor_ = file->message_type(24);
  static const int WingFantasy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingFantasy, nfantasyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingFantasy, nlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingFantasy, ntotallv_),
  };
  WingFantasy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingFantasy_descriptor_,
      WingFantasy::default_instance_,
      WingFantasy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingFantasy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingFantasy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingFantasy));
  PartnerFantasy_descriptor_ = file->message_type(25);
  static const int PartnerFantasy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerFantasy, nfantasyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerFantasy, nlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerFantasy, ntotallv_),
  };
  PartnerFantasy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartnerFantasy_descriptor_,
      PartnerFantasy::default_instance_,
      PartnerFantasy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerFantasy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerFantasy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartnerFantasy));
  WingAdvance_descriptor_ = file->message_type(26);
  static const int WingAdvance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingAdvance, nlevel_),
  };
  WingAdvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingAdvance_descriptor_,
      WingAdvance::default_instance_,
      WingAdvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingAdvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingAdvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingAdvance));
  TreasureAdvance_descriptor_ = file->message_type(27);
  static const int TreasureAdvance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureAdvance, nlevel_),
  };
  TreasureAdvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureAdvance_descriptor_,
      TreasureAdvance::default_instance_,
      TreasureAdvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureAdvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureAdvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureAdvance));
  ArtifactAdvance_descriptor_ = file->message_type(28);
  static const int ArtifactAdvance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactAdvance, nlevel_),
  };
  ArtifactAdvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArtifactAdvance_descriptor_,
      ArtifactAdvance::default_instance_,
      ArtifactAdvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactAdvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactAdvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtifactAdvance));
  MountAdvance_descriptor_ = file->message_type(29);
  static const int MountAdvance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountAdvance, nlevel_),
  };
  MountAdvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountAdvance_descriptor_,
      MountAdvance::default_instance_,
      MountAdvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountAdvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountAdvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountAdvance));
  OccupationAdvance_descriptor_ = file->message_type(30);
  static const int OccupationAdvance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationAdvance, ngrade_),
  };
  OccupationAdvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OccupationAdvance_descriptor_,
      OccupationAdvance::default_instance_,
      OccupationAdvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationAdvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationAdvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OccupationAdvance));
  PartnerAdvance_descriptor_ = file->message_type(31);
  static const int PartnerAdvance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerAdvance, nlevel_),
  };
  PartnerAdvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartnerAdvance_descriptor_,
      PartnerAdvance::default_instance_,
      PartnerAdvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerAdvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerAdvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartnerAdvance));
  GodRelicsFinish_descriptor_ = file->message_type(32);
  static const int GodRelicsFinish_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsFinish, id_),
  };
  GodRelicsFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodRelicsFinish_descriptor_,
      GodRelicsFinish::default_instance_,
      GodRelicsFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodRelicsFinish));
  ChatWorldEvent_descriptor_ = file->message_type(33);
  static const int ChatWorldEvent_offsets_[1] = {
  };
  ChatWorldEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatWorldEvent_descriptor_,
      ChatWorldEvent::default_instance_,
      ChatWorldEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatWorldEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatWorldEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatWorldEvent));
  EquipScoreChangeEvent_descriptor_ = file->message_type(34);
  static const int EquipScoreChangeEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipScoreChangeEvent, all_score_),
  };
  EquipScoreChangeEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipScoreChangeEvent_descriptor_,
      EquipScoreChangeEvent::default_instance_,
      EquipScoreChangeEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipScoreChangeEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipScoreChangeEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipScoreChangeEvent));
  StoneInlayEvent_descriptor_ = file->message_type(35);
  static const int StoneInlayEvent_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayEvent, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayEvent, stone_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayEvent, stone_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayEvent, total_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayEvent, ave_stone_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayEvent, count_),
  };
  StoneInlayEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoneInlayEvent_descriptor_,
      StoneInlayEvent::default_instance_,
      StoneInlayEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoneInlayEvent));
  MountFightChgEvent_descriptor_ = file->message_type(36);
  static const int MountFightChgEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFightChgEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFightChgEvent, fight_),
  };
  MountFightChgEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountFightChgEvent_descriptor_,
      MountFightChgEvent::default_instance_,
      MountFightChgEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFightChgEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFightChgEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountFightChgEvent));
  MagicSumChangeEvent_descriptor_ = file->message_type(37);
  static const int MagicSumChangeEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicSumChangeEvent, sum_),
  };
  MagicSumChangeEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MagicSumChangeEvent_descriptor_,
      MagicSumChangeEvent::default_instance_,
      MagicSumChangeEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicSumChangeEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicSumChangeEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MagicSumChangeEvent));
  BattlePassXianCe_descriptor_ = file->message_type(38);
  static const int BattlePassXianCe_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassXianCe, buy_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassXianCe, lv_),
  };
  BattlePassXianCe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattlePassXianCe_descriptor_,
      BattlePassXianCe::default_instance_,
      BattlePassXianCe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassXianCe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassXianCe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattlePassXianCe));
  BattlePassBaoDing_descriptor_ = file->message_type(39);
  static const int BattlePassBaoDing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassBaoDing, buy_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassBaoDing, lv_),
  };
  BattlePassBaoDing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattlePassBaoDing_descriptor_,
      BattlePassBaoDing::default_instance_,
      BattlePassBaoDing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassBaoDing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassBaoDing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattlePassBaoDing));
  DeityFightChgEvent_descriptor_ = file->message_type(40);
  static const int DeityFightChgEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFightChgEvent, fight_),
  };
  DeityFightChgEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeityFightChgEvent_descriptor_,
      DeityFightChgEvent::default_instance_,
      DeityFightChgEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFightChgEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFightChgEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeityFightChgEvent));
  BeastFightChgEvent_descriptor_ = file->message_type(41);
  static const int BeastFightChgEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeastFightChgEvent, fight_),
  };
  BeastFightChgEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeastFightChgEvent_descriptor_,
      BeastFightChgEvent::default_instance_,
      BeastFightChgEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeastFightChgEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeastFightChgEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeastFightChgEvent));
  MarryExpressExpEvent_descriptor_ = file->message_type(42);
  static const int MarryExpressExpEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryExpressExpEvent, exp_),
  };
  MarryExpressExpEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryExpressExpEvent_descriptor_,
      MarryExpressExpEvent::default_instance_,
      MarryExpressExpEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryExpressExpEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryExpressExpEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryExpressExpEvent));
  ShenjiFightChgEvent_descriptor_ = file->message_type(43);
  static const int ShenjiFightChgEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenjiFightChgEvent, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenjiFightChgEvent, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenjiFightChgEvent, star_),
  };
  ShenjiFightChgEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShenjiFightChgEvent_descriptor_,
      ShenjiFightChgEvent::default_instance_,
      ShenjiFightChgEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenjiFightChgEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenjiFightChgEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShenjiFightChgEvent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fsvr_5fevent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionUnlockEvent_descriptor_, &FunctionUnlockEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLeveUpEvent_descriptor_, &PlayerLeveUpEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemUseEvent_descriptor_, &ItemUseEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptTaskEvent_descriptor_, &AcceptTaskEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinishTaskEvent_descriptor_, &FinishTaskEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveSceneEvent_descriptor_, &LeaveSceneEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChgSceneEvent_descriptor_, &ChgSceneEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterSceneEvent_descriptor_, &EnterSceneEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncScenePos_descriptor_, &SyncScenePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncSceneState_descriptor_, &SyncSceneState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowPartActiveEvent_descriptor_, &GrowPartActiveEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowPartLvUpEvent_descriptor_, &GrowPartLvUpEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowPartDressEvent_descriptor_, &GrowPartDressEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeFacadeEvent_descriptor_, &ChangeFacadeEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayEvent_descriptor_, &PayEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassDupEvent_descriptor_, &PassDupEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeityFantasyBattleEvent_descriptor_, &DeityFantasyBattleEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeityActiveEvent_descriptor_, &DeityActiveEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingFightChgEvent_descriptor_, &WingFightChgEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartnerFightChgEvent_descriptor_, &PartnerFightChgEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtifactFightChgEvent_descriptor_, &ArtifactFightChgEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureFightChgEvent_descriptor_, &TreasureFightChgEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtifactFantasy_descriptor_, &ArtifactFantasy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureFantasy_descriptor_, &TreasureFantasy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingFantasy_descriptor_, &WingFantasy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartnerFantasy_descriptor_, &PartnerFantasy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingAdvance_descriptor_, &WingAdvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureAdvance_descriptor_, &TreasureAdvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtifactAdvance_descriptor_, &ArtifactAdvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountAdvance_descriptor_, &MountAdvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OccupationAdvance_descriptor_, &OccupationAdvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartnerAdvance_descriptor_, &PartnerAdvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodRelicsFinish_descriptor_, &GodRelicsFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatWorldEvent_descriptor_, &ChatWorldEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipScoreChangeEvent_descriptor_, &EquipScoreChangeEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoneInlayEvent_descriptor_, &StoneInlayEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountFightChgEvent_descriptor_, &MountFightChgEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MagicSumChangeEvent_descriptor_, &MagicSumChangeEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattlePassXianCe_descriptor_, &BattlePassXianCe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattlePassBaoDing_descriptor_, &BattlePassBaoDing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeityFightChgEvent_descriptor_, &DeityFightChgEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeastFightChgEvent_descriptor_, &BeastFightChgEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryExpressExpEvent_descriptor_, &MarryExpressExpEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShenjiFightChgEvent_descriptor_, &ShenjiFightChgEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fsvr_5fevent_2eproto() {
  delete FunctionUnlockEvent::default_instance_;
  delete FunctionUnlockEvent_reflection_;
  delete PlayerLeveUpEvent::default_instance_;
  delete PlayerLeveUpEvent_reflection_;
  delete ItemUseEvent::default_instance_;
  delete ItemUseEvent_reflection_;
  delete AcceptTaskEvent::default_instance_;
  delete AcceptTaskEvent_reflection_;
  delete FinishTaskEvent::default_instance_;
  delete FinishTaskEvent_reflection_;
  delete LeaveSceneEvent::default_instance_;
  delete LeaveSceneEvent_reflection_;
  delete ChgSceneEvent::default_instance_;
  delete ChgSceneEvent_reflection_;
  delete EnterSceneEvent::default_instance_;
  delete EnterSceneEvent_reflection_;
  delete SyncScenePos::default_instance_;
  delete SyncScenePos_reflection_;
  delete SyncSceneState::default_instance_;
  delete SyncSceneState_reflection_;
  delete GrowPartActiveEvent::default_instance_;
  delete GrowPartActiveEvent_reflection_;
  delete GrowPartLvUpEvent::default_instance_;
  delete GrowPartLvUpEvent_reflection_;
  delete GrowPartDressEvent::default_instance_;
  delete GrowPartDressEvent_reflection_;
  delete ChangeFacadeEvent::default_instance_;
  delete ChangeFacadeEvent_reflection_;
  delete PayEvent::default_instance_;
  delete PayEvent_reflection_;
  delete PassDupEvent::default_instance_;
  delete PassDupEvent_reflection_;
  delete DeityFantasyBattleEvent::default_instance_;
  delete DeityFantasyBattleEvent_reflection_;
  delete DeityActiveEvent::default_instance_;
  delete DeityActiveEvent_reflection_;
  delete WingFightChgEvent::default_instance_;
  delete WingFightChgEvent_reflection_;
  delete PartnerFightChgEvent::default_instance_;
  delete PartnerFightChgEvent_reflection_;
  delete ArtifactFightChgEvent::default_instance_;
  delete ArtifactFightChgEvent_reflection_;
  delete TreasureFightChgEvent::default_instance_;
  delete TreasureFightChgEvent_reflection_;
  delete ArtifactFantasy::default_instance_;
  delete ArtifactFantasy_reflection_;
  delete TreasureFantasy::default_instance_;
  delete TreasureFantasy_reflection_;
  delete WingFantasy::default_instance_;
  delete WingFantasy_reflection_;
  delete PartnerFantasy::default_instance_;
  delete PartnerFantasy_reflection_;
  delete WingAdvance::default_instance_;
  delete WingAdvance_reflection_;
  delete TreasureAdvance::default_instance_;
  delete TreasureAdvance_reflection_;
  delete ArtifactAdvance::default_instance_;
  delete ArtifactAdvance_reflection_;
  delete MountAdvance::default_instance_;
  delete MountAdvance_reflection_;
  delete OccupationAdvance::default_instance_;
  delete OccupationAdvance_reflection_;
  delete PartnerAdvance::default_instance_;
  delete PartnerAdvance_reflection_;
  delete GodRelicsFinish::default_instance_;
  delete GodRelicsFinish_reflection_;
  delete ChatWorldEvent::default_instance_;
  delete ChatWorldEvent_reflection_;
  delete EquipScoreChangeEvent::default_instance_;
  delete EquipScoreChangeEvent_reflection_;
  delete StoneInlayEvent::default_instance_;
  delete StoneInlayEvent_reflection_;
  delete MountFightChgEvent::default_instance_;
  delete MountFightChgEvent_reflection_;
  delete MagicSumChangeEvent::default_instance_;
  delete MagicSumChangeEvent_reflection_;
  delete BattlePassXianCe::default_instance_;
  delete BattlePassXianCe_reflection_;
  delete BattlePassBaoDing::default_instance_;
  delete BattlePassBaoDing_reflection_;
  delete DeityFightChgEvent::default_instance_;
  delete DeityFightChgEvent_reflection_;
  delete BeastFightChgEvent::default_instance_;
  delete BeastFightChgEvent_reflection_;
  delete MarryExpressExpEvent::default_instance_;
  delete MarryExpressExpEvent_reflection_;
  delete ShenjiFightChgEvent::default_instance_;
  delete ShenjiFightChgEvent_reflection_;
}

void protobuf_AddDesc_proto_5fsvr_5fevent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025proto_svr_event.proto\022\010proto_ff\032\025yd_fi"
    "eldoptions.proto\032\tCom.proto\"7\n\023FunctionU"
    "nlockEvent\022\022\n\nfunctionId\030\001 \001(\004\022\014\n\004sync\030\002"
    " \001(\010\"/\n\021PlayerLeveUpEvent\022\013\n\003cid\030\001 \001(\004\022\r"
    "\n\005level\030\002 \001(\r\"+\n\014ItemUseEvent\022\016\n\006itemId\030"
    "\001 \001(\004\022\013\n\003num\030\002 \001(\005\"@\n\017AcceptTaskEvent\022\016\n"
    "\006taskId\030\001 \001(\004\022\013\n\003cid\030\002 \001(\004\022\020\n\010taskType\030\003"
    " \001(\r\"R\n\017FinishTaskEvent\022\016\n\006taskId\030\001 \001(\004\022"
    "\013\n\003cid\030\002 \001(\004\022\020\n\010taskType\030\003 \001(\r\022\020\n\010mapGro"
    "up\030\004 \001(\005\">\n\017LeaveSceneEvent\022\013\n\003cid\030\001 \001(\004"
    "\022\017\n\007sceneid\030\002 \001(\004\022\r\n\005mapid\030\003 \001(\004\"/\n\rChgS"
    "ceneEvent\022\013\n\003cid\030\001 \001(\004\022\021\n\tenterflag\030\002 \001("
    "\010\"m\n\017EnterSceneEvent\022\013\n\003cid\030\001 \001(\004\022\013\n\003uid"
    "\030\002 \001(\r\022\020\n\010clientid\030\003 \001(\004\022\r\n\005mapid\030\004 \001(\004\022"
    "\t\n\001x\030\005 \001(\005\022\t\n\001y\030\006 \001(\005\022\t\n\001z\030\007 \001(\005\"R\n\014Sync"
    "ScenePos\022\016\n\006map_id\030\001 \001(\004\022\020\n\010scene_id\030\002 \001"
    "(\004\022 \n\003pos\030\003 \001(\0132\023.proto_ff.Vector3PB\"7\n\016"
    "SyncSceneState\022\022\n\nlast_state\030\001 \001(\r\022\021\n\tcu"
    "r_state\030\002 \001(\r\">\n\023GrowPartActiveEvent\022\014\n\004"
    "type\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\r\n\005curLv\030\003 \001(\005\"<\n"
    "\021GrowPartLvUpEvent\022\014\n\004type\030\001 \001(\005\022\n\n\002id\030\002"
    " \001(\005\022\r\n\005curLv\030\003 \001(\005\"=\n\022GrowPartDressEven"
    "t\022\014\n\004type\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\r\n\005curLv\030\003 \001"
    "(\005\"\201\002\n\021ChangeFacadeEvent\022\013\n\003cid\030\001 \001(\004\022\016\n"
    "\006wingId\030\002 \001(\004\022\030\n\020fashionClothesId\030\003 \001(\004\022"
    "\027\n\017fashionWeaponId\030\004 \001(\004\022\024\n\014occupationId"
    "\030\005 \001(\004\022\017\n\007mountId\030\006 \001(\004\022\023\n\013treasure_id\030\007"
    " \001(\004\022\025\n\rtreasure_type\030\010 \001(\005\022\023\n\013artifact_"
    "id\030\t \001(\004\022\017\n\007head_id\030\n \001(\004\022\020\n\010frame_id\030\013 "
    "\001(\004\022\021\n\tbubble_id\030\014 \001(\004\"\243\001\n\010PayEvent\022\020\n\010p"
    "ayIndex\030\001 \001(\r\022\r\n\005money\030\002 \001(\r\022\r\n\005price\030\003 "
    "\001(\r\022\014\n\004type\030\004 \001(\r\022\020\n\010quantity\030\005 \001(\r\022\022\n\ni"
    "ndexFirst\030\006 \001(\010\022\020\n\010allFirst\030\007 \001(\010\022\016\n\006cha"
    "nid\030\010 \001(\r\022\021\n\tproductid\030\t \001(\t\"I\n\014PassDupE"
    "vent\022\r\n\005dupId\030\001 \001(\004\022\017\n\007groupId\030\002 \001(\004\022\014\n\004"
    "star\030\003 \001(\r\022\013\n\003zid\030\004 \001(\r\"&\n\027DeityFantasyB"
    "attleEvent\022\013\n\003num\030\001 \001(\r\"\036\n\020DeityActiveEv"
    "ent\022\n\n\002id\030\001 \001(\003\"/\n\021WingFightChgEvent\022\013\n\003"
    "cid\030\001 \001(\004\022\r\n\005fight\030\002 \001(\004\"2\n\024PartnerFight"
    "ChgEvent\022\013\n\003cid\030\001 \001(\004\022\r\n\005fight\030\002 \001(\004\"3\n\025"
    "ArtifactFightChgEvent\022\013\n\003cid\030\001 \001(\004\022\r\n\005fi"
    "ght\030\002 \001(\004\"3\n\025TreasureFightChgEvent\022\013\n\003ci"
    "d\030\001 \001(\004\022\r\n\005fight\030\002 \001(\004\"G\n\017ArtifactFantas"
    "y\022\022\n\nnFantasyId\030\001 \001(\004\022\016\n\006nLevel\030\002 \001(\r\022\020\n"
    "\010nTotalLv\030\003 \001(\r\"G\n\017TreasureFantasy\022\022\n\nnF"
    "antasyId\030\001 \001(\004\022\016\n\006nLevel\030\002 \001(\r\022\020\n\010nTotal"
    "Lv\030\003 \001(\r\"C\n\013WingFantasy\022\022\n\nnFantasyId\030\001 "
    "\001(\004\022\016\n\006nLevel\030\002 \001(\r\022\020\n\010nTotalLv\030\003 \001(\r\"F\n"
    "\016PartnerFantasy\022\022\n\nnFantasyId\030\001 \001(\004\022\016\n\006n"
    "Level\030\002 \001(\r\022\020\n\010nTotalLv\030\003 \001(\r\"\035\n\013WingAdv"
    "ance\022\016\n\006nLevel\030\001 \001(\r\"!\n\017TreasureAdvance\022"
    "\016\n\006nLevel\030\001 \001(\r\"!\n\017ArtifactAdvance\022\016\n\006nL"
    "evel\030\001 \001(\r\"\036\n\014MountAdvance\022\016\n\006nLevel\030\001 \001"
    "(\r\"#\n\021OccupationAdvance\022\016\n\006nGrade\030\001 \001(\r\""
    " \n\016PartnerAdvance\022\016\n\006nLevel\030\001 \001(\r\"\035\n\017God"
    "RelicsFinish\022\n\n\002id\030\001 \001(\003\"\020\n\016ChatWorldEve"
    "nt\"*\n\025EquipScoreChangeEvent\022\021\n\tall_score"
    "\030\001 \001(\004\"\206\001\n\017StoneInlayEvent\022\013\n\003pos\030\001 \001(\005\022"
    "\024\n\014stone_itemId\030\002 \001(\004\022\023\n\013stone_level\030\003 \001"
    "(\r\022\023\n\013total_level\030\004 \001(\r\022\027\n\017ave_stone_lev"
    "el\030\005 \001(\r\022\r\n\005count\030\006 \001(\r\"0\n\022MountFightChg"
    "Event\022\013\n\003cid\030\001 \001(\004\022\r\n\005fight\030\002 \001(\004\"\"\n\023Mag"
    "icSumChangeEvent\022\013\n\003sum\030\001 \001(\004\"2\n\020BattleP"
    "assXianCe\022\022\n\nbuy_status\030\001 \001(\005\022\n\n\002lv\030\002 \001("
    "\005\"3\n\021BattlePassBaoDing\022\022\n\nbuy_status\030\001 \001"
    "(\005\022\n\n\002lv\030\002 \001(\005\"#\n\022DeityFightChgEvent\022\r\n\005"
    "fight\030\001 \001(\004\"#\n\022BeastFightChgEvent\022\r\n\005fig"
    "ht\030\001 \001(\004\"#\n\024MarryExpressExpEvent\022\013\n\003exp\030"
    "\001 \001(\005\"@\n\023ShenjiFightChgEvent\022\014\n\004slot\030\001 \001"
    "(\r\022\r\n\005fight\030\002 \001(\004\022\014\n\004star\030\003 \001(\r", 2791);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_svr_event.proto", &protobuf_RegisterTypes);
  FunctionUnlockEvent::default_instance_ = new FunctionUnlockEvent();
  PlayerLeveUpEvent::default_instance_ = new PlayerLeveUpEvent();
  ItemUseEvent::default_instance_ = new ItemUseEvent();
  AcceptTaskEvent::default_instance_ = new AcceptTaskEvent();
  FinishTaskEvent::default_instance_ = new FinishTaskEvent();
  LeaveSceneEvent::default_instance_ = new LeaveSceneEvent();
  ChgSceneEvent::default_instance_ = new ChgSceneEvent();
  EnterSceneEvent::default_instance_ = new EnterSceneEvent();
  SyncScenePos::default_instance_ = new SyncScenePos();
  SyncSceneState::default_instance_ = new SyncSceneState();
  GrowPartActiveEvent::default_instance_ = new GrowPartActiveEvent();
  GrowPartLvUpEvent::default_instance_ = new GrowPartLvUpEvent();
  GrowPartDressEvent::default_instance_ = new GrowPartDressEvent();
  ChangeFacadeEvent::default_instance_ = new ChangeFacadeEvent();
  PayEvent::default_instance_ = new PayEvent();
  PassDupEvent::default_instance_ = new PassDupEvent();
  DeityFantasyBattleEvent::default_instance_ = new DeityFantasyBattleEvent();
  DeityActiveEvent::default_instance_ = new DeityActiveEvent();
  WingFightChgEvent::default_instance_ = new WingFightChgEvent();
  PartnerFightChgEvent::default_instance_ = new PartnerFightChgEvent();
  ArtifactFightChgEvent::default_instance_ = new ArtifactFightChgEvent();
  TreasureFightChgEvent::default_instance_ = new TreasureFightChgEvent();
  ArtifactFantasy::default_instance_ = new ArtifactFantasy();
  TreasureFantasy::default_instance_ = new TreasureFantasy();
  WingFantasy::default_instance_ = new WingFantasy();
  PartnerFantasy::default_instance_ = new PartnerFantasy();
  WingAdvance::default_instance_ = new WingAdvance();
  TreasureAdvance::default_instance_ = new TreasureAdvance();
  ArtifactAdvance::default_instance_ = new ArtifactAdvance();
  MountAdvance::default_instance_ = new MountAdvance();
  OccupationAdvance::default_instance_ = new OccupationAdvance();
  PartnerAdvance::default_instance_ = new PartnerAdvance();
  GodRelicsFinish::default_instance_ = new GodRelicsFinish();
  ChatWorldEvent::default_instance_ = new ChatWorldEvent();
  EquipScoreChangeEvent::default_instance_ = new EquipScoreChangeEvent();
  StoneInlayEvent::default_instance_ = new StoneInlayEvent();
  MountFightChgEvent::default_instance_ = new MountFightChgEvent();
  MagicSumChangeEvent::default_instance_ = new MagicSumChangeEvent();
  BattlePassXianCe::default_instance_ = new BattlePassXianCe();
  BattlePassBaoDing::default_instance_ = new BattlePassBaoDing();
  DeityFightChgEvent::default_instance_ = new DeityFightChgEvent();
  BeastFightChgEvent::default_instance_ = new BeastFightChgEvent();
  MarryExpressExpEvent::default_instance_ = new MarryExpressExpEvent();
  ShenjiFightChgEvent::default_instance_ = new ShenjiFightChgEvent();
  FunctionUnlockEvent::default_instance_->InitAsDefaultInstance();
  PlayerLeveUpEvent::default_instance_->InitAsDefaultInstance();
  ItemUseEvent::default_instance_->InitAsDefaultInstance();
  AcceptTaskEvent::default_instance_->InitAsDefaultInstance();
  FinishTaskEvent::default_instance_->InitAsDefaultInstance();
  LeaveSceneEvent::default_instance_->InitAsDefaultInstance();
  ChgSceneEvent::default_instance_->InitAsDefaultInstance();
  EnterSceneEvent::default_instance_->InitAsDefaultInstance();
  SyncScenePos::default_instance_->InitAsDefaultInstance();
  SyncSceneState::default_instance_->InitAsDefaultInstance();
  GrowPartActiveEvent::default_instance_->InitAsDefaultInstance();
  GrowPartLvUpEvent::default_instance_->InitAsDefaultInstance();
  GrowPartDressEvent::default_instance_->InitAsDefaultInstance();
  ChangeFacadeEvent::default_instance_->InitAsDefaultInstance();
  PayEvent::default_instance_->InitAsDefaultInstance();
  PassDupEvent::default_instance_->InitAsDefaultInstance();
  DeityFantasyBattleEvent::default_instance_->InitAsDefaultInstance();
  DeityActiveEvent::default_instance_->InitAsDefaultInstance();
  WingFightChgEvent::default_instance_->InitAsDefaultInstance();
  PartnerFightChgEvent::default_instance_->InitAsDefaultInstance();
  ArtifactFightChgEvent::default_instance_->InitAsDefaultInstance();
  TreasureFightChgEvent::default_instance_->InitAsDefaultInstance();
  ArtifactFantasy::default_instance_->InitAsDefaultInstance();
  TreasureFantasy::default_instance_->InitAsDefaultInstance();
  WingFantasy::default_instance_->InitAsDefaultInstance();
  PartnerFantasy::default_instance_->InitAsDefaultInstance();
  WingAdvance::default_instance_->InitAsDefaultInstance();
  TreasureAdvance::default_instance_->InitAsDefaultInstance();
  ArtifactAdvance::default_instance_->InitAsDefaultInstance();
  MountAdvance::default_instance_->InitAsDefaultInstance();
  OccupationAdvance::default_instance_->InitAsDefaultInstance();
  PartnerAdvance::default_instance_->InitAsDefaultInstance();
  GodRelicsFinish::default_instance_->InitAsDefaultInstance();
  ChatWorldEvent::default_instance_->InitAsDefaultInstance();
  EquipScoreChangeEvent::default_instance_->InitAsDefaultInstance();
  StoneInlayEvent::default_instance_->InitAsDefaultInstance();
  MountFightChgEvent::default_instance_->InitAsDefaultInstance();
  MagicSumChangeEvent::default_instance_->InitAsDefaultInstance();
  BattlePassXianCe::default_instance_->InitAsDefaultInstance();
  BattlePassBaoDing::default_instance_->InitAsDefaultInstance();
  DeityFightChgEvent::default_instance_->InitAsDefaultInstance();
  BeastFightChgEvent::default_instance_->InitAsDefaultInstance();
  MarryExpressExpEvent::default_instance_->InitAsDefaultInstance();
  ShenjiFightChgEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fsvr_5fevent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fsvr_5fevent_2eproto {
  StaticDescriptorInitializer_proto_5fsvr_5fevent_2eproto() {
    protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  }
} static_descriptor_initializer_proto_5fsvr_5fevent_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FunctionUnlockEvent::kFunctionIdFieldNumber;
const int FunctionUnlockEvent::kSyncFieldNumber;
#endif  // !_MSC_VER

FunctionUnlockEvent::FunctionUnlockEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionUnlockEvent::InitAsDefaultInstance() {
}

FunctionUnlockEvent::FunctionUnlockEvent(const FunctionUnlockEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionUnlockEvent::SharedCtor() {
  _cached_size_ = 0;
  functionid_ = GOOGLE_ULONGLONG(0);
  sync_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionUnlockEvent::~FunctionUnlockEvent() {
  SharedDtor();
}

void FunctionUnlockEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionUnlockEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionUnlockEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlockEvent_descriptor_;
}

const FunctionUnlockEvent& FunctionUnlockEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

FunctionUnlockEvent* FunctionUnlockEvent::default_instance_ = NULL;

FunctionUnlockEvent* FunctionUnlockEvent::New() const {
  return new FunctionUnlockEvent;
}

void FunctionUnlockEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    functionid_ = GOOGLE_ULONGLONG(0);
    sync_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionUnlockEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 functionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &functionid_)));
          set_has_functionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sync;
        break;
      }

      // optional bool sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_)));
          set_has_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionUnlockEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 functionId = 1;
  if (has_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->functionid(), output);
  }

  // optional bool sync = 2;
  if (has_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionUnlockEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 functionId = 1;
  if (has_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->functionid(), target);
  }

  // optional bool sync = 2;
  if (has_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionUnlockEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 functionId = 1;
    if (has_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->functionid());
    }

    // optional bool sync = 2;
    if (has_sync()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionUnlockEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionUnlockEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionUnlockEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionUnlockEvent::MergeFrom(const FunctionUnlockEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_functionid()) {
      set_functionid(from.functionid());
    }
    if (from.has_sync()) {
      set_sync(from.sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionUnlockEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionUnlockEvent::CopyFrom(const FunctionUnlockEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionUnlockEvent::IsInitialized() const {

  return true;
}

void FunctionUnlockEvent::Swap(FunctionUnlockEvent* other) {
  if (other != this) {
    std::swap(functionid_, other->functionid_);
    std::swap(sync_, other->sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionUnlockEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionUnlockEvent_descriptor_;
  metadata.reflection = FunctionUnlockEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLeveUpEvent::kCidFieldNumber;
const int PlayerLeveUpEvent::kLevelFieldNumber;
#endif  // !_MSC_VER

PlayerLeveUpEvent::PlayerLeveUpEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLeveUpEvent::InitAsDefaultInstance() {
}

PlayerLeveUpEvent::PlayerLeveUpEvent(const PlayerLeveUpEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLeveUpEvent::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLeveUpEvent::~PlayerLeveUpEvent() {
  SharedDtor();
}

void PlayerLeveUpEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLeveUpEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLeveUpEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLeveUpEvent_descriptor_;
}

const PlayerLeveUpEvent& PlayerLeveUpEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

PlayerLeveUpEvent* PlayerLeveUpEvent::default_instance_ = NULL;

PlayerLeveUpEvent* PlayerLeveUpEvent::New() const {
  return new PlayerLeveUpEvent;
}

void PlayerLeveUpEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLeveUpEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLeveUpEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLeveUpEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLeveUpEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLeveUpEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLeveUpEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLeveUpEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLeveUpEvent::MergeFrom(const PlayerLeveUpEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLeveUpEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLeveUpEvent::CopyFrom(const PlayerLeveUpEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLeveUpEvent::IsInitialized() const {

  return true;
}

void PlayerLeveUpEvent::Swap(PlayerLeveUpEvent* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLeveUpEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLeveUpEvent_descriptor_;
  metadata.reflection = PlayerLeveUpEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemUseEvent::kItemIdFieldNumber;
const int ItemUseEvent::kNumFieldNumber;
#endif  // !_MSC_VER

ItemUseEvent::ItemUseEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemUseEvent::InitAsDefaultInstance() {
}

ItemUseEvent::ItemUseEvent(const ItemUseEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemUseEvent::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_ULONGLONG(0);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemUseEvent::~ItemUseEvent() {
  SharedDtor();
}

void ItemUseEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemUseEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemUseEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemUseEvent_descriptor_;
}

const ItemUseEvent& ItemUseEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

ItemUseEvent* ItemUseEvent::default_instance_ = NULL;

ItemUseEvent* ItemUseEvent::New() const {
  return new ItemUseEvent;
}

void ItemUseEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_ULONGLONG(0);
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemUseEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemUseEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemUseEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemUseEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemUseEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemUseEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemUseEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemUseEvent::MergeFrom(const ItemUseEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemUseEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemUseEvent::CopyFrom(const ItemUseEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemUseEvent::IsInitialized() const {

  return true;
}

void ItemUseEvent::Swap(ItemUseEvent* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemUseEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemUseEvent_descriptor_;
  metadata.reflection = ItemUseEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptTaskEvent::kTaskIdFieldNumber;
const int AcceptTaskEvent::kCidFieldNumber;
const int AcceptTaskEvent::kTaskTypeFieldNumber;
#endif  // !_MSC_VER

AcceptTaskEvent::AcceptTaskEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcceptTaskEvent::InitAsDefaultInstance() {
}

AcceptTaskEvent::AcceptTaskEvent(const AcceptTaskEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcceptTaskEvent::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  tasktype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptTaskEvent::~AcceptTaskEvent() {
  SharedDtor();
}

void AcceptTaskEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AcceptTaskEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptTaskEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptTaskEvent_descriptor_;
}

const AcceptTaskEvent& AcceptTaskEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

AcceptTaskEvent* AcceptTaskEvent::default_instance_ = NULL;

AcceptTaskEvent* AcceptTaskEvent::New() const {
  return new AcceptTaskEvent;
}

void AcceptTaskEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    tasktype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptTaskEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taskType;
        break;
      }

      // optional uint32 taskType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcceptTaskEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->taskid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint32 taskType = 3;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tasktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcceptTaskEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 taskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->taskid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint32 taskType = 3;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tasktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcceptTaskEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->taskid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 taskType = 3;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptTaskEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptTaskEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptTaskEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptTaskEvent::MergeFrom(const AcceptTaskEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptTaskEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptTaskEvent::CopyFrom(const AcceptTaskEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptTaskEvent::IsInitialized() const {

  return true;
}

void AcceptTaskEvent::Swap(AcceptTaskEvent* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(cid_, other->cid_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptTaskEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptTaskEvent_descriptor_;
  metadata.reflection = AcceptTaskEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinishTaskEvent::kTaskIdFieldNumber;
const int FinishTaskEvent::kCidFieldNumber;
const int FinishTaskEvent::kTaskTypeFieldNumber;
const int FinishTaskEvent::kMapGroupFieldNumber;
#endif  // !_MSC_VER

FinishTaskEvent::FinishTaskEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinishTaskEvent::InitAsDefaultInstance() {
}

FinishTaskEvent::FinishTaskEvent(const FinishTaskEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinishTaskEvent::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  tasktype_ = 0u;
  mapgroup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinishTaskEvent::~FinishTaskEvent() {
  SharedDtor();
}

void FinishTaskEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinishTaskEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishTaskEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishTaskEvent_descriptor_;
}

const FinishTaskEvent& FinishTaskEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

FinishTaskEvent* FinishTaskEvent::default_instance_ = NULL;

FinishTaskEvent* FinishTaskEvent::New() const {
  return new FinishTaskEvent;
}

void FinishTaskEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    tasktype_ = 0u;
    mapgroup_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinishTaskEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taskType;
        break;
      }

      // optional uint32 taskType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mapGroup;
        break;
      }

      // optional int32 mapGroup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapgroup_)));
          set_has_mapgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinishTaskEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->taskid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint32 taskType = 3;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tasktype(), output);
  }

  // optional int32 mapGroup = 4;
  if (has_mapgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapgroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinishTaskEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 taskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->taskid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint32 taskType = 3;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tasktype(), target);
  }

  // optional int32 mapGroup = 4;
  if (has_mapgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapgroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinishTaskEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->taskid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 taskType = 3;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }

    // optional int32 mapGroup = 4;
    if (has_mapgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapgroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishTaskEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinishTaskEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinishTaskEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinishTaskEvent::MergeFrom(const FinishTaskEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_mapgroup()) {
      set_mapgroup(from.mapgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinishTaskEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishTaskEvent::CopyFrom(const FinishTaskEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishTaskEvent::IsInitialized() const {

  return true;
}

void FinishTaskEvent::Swap(FinishTaskEvent* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(cid_, other->cid_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(mapgroup_, other->mapgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinishTaskEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinishTaskEvent_descriptor_;
  metadata.reflection = FinishTaskEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveSceneEvent::kCidFieldNumber;
const int LeaveSceneEvent::kSceneidFieldNumber;
const int LeaveSceneEvent::kMapidFieldNumber;
#endif  // !_MSC_VER

LeaveSceneEvent::LeaveSceneEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveSceneEvent::InitAsDefaultInstance() {
}

LeaveSceneEvent::LeaveSceneEvent(const LeaveSceneEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveSceneEvent::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = GOOGLE_ULONGLONG(0);
  mapid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveSceneEvent::~LeaveSceneEvent() {
  SharedDtor();
}

void LeaveSceneEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveSceneEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveSceneEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveSceneEvent_descriptor_;
}

const LeaveSceneEvent& LeaveSceneEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

LeaveSceneEvent* LeaveSceneEvent::default_instance_ = NULL;

LeaveSceneEvent* LeaveSceneEvent::New() const {
  return new LeaveSceneEvent;
}

void LeaveSceneEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = GOOGLE_ULONGLONG(0);
    mapid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveSceneEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveSceneEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 sceneid = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sceneid(), output);
  }

  // optional uint64 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveSceneEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 sceneid = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sceneid(), target);
  }

  // optional uint64 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveSceneEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 sceneid = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveSceneEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveSceneEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveSceneEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveSceneEvent::MergeFrom(const LeaveSceneEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveSceneEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveSceneEvent::CopyFrom(const LeaveSceneEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveSceneEvent::IsInitialized() const {

  return true;
}

void LeaveSceneEvent::Swap(LeaveSceneEvent* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveSceneEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveSceneEvent_descriptor_;
  metadata.reflection = LeaveSceneEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChgSceneEvent::kCidFieldNumber;
const int ChgSceneEvent::kEnterflagFieldNumber;
#endif  // !_MSC_VER

ChgSceneEvent::ChgSceneEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChgSceneEvent::InitAsDefaultInstance() {
}

ChgSceneEvent::ChgSceneEvent(const ChgSceneEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChgSceneEvent::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  enterflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChgSceneEvent::~ChgSceneEvent() {
  SharedDtor();
}

void ChgSceneEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChgSceneEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChgSceneEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChgSceneEvent_descriptor_;
}

const ChgSceneEvent& ChgSceneEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

ChgSceneEvent* ChgSceneEvent::default_instance_ = NULL;

ChgSceneEvent* ChgSceneEvent::New() const {
  return new ChgSceneEvent;
}

void ChgSceneEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    enterflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChgSceneEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enterflag;
        break;
      }

      // optional bool enterflag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enterflag_)));
          set_has_enterflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChgSceneEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bool enterflag = 2;
  if (has_enterflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enterflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChgSceneEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bool enterflag = 2;
  if (has_enterflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enterflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChgSceneEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bool enterflag = 2;
    if (has_enterflag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChgSceneEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChgSceneEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChgSceneEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChgSceneEvent::MergeFrom(const ChgSceneEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_enterflag()) {
      set_enterflag(from.enterflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChgSceneEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChgSceneEvent::CopyFrom(const ChgSceneEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChgSceneEvent::IsInitialized() const {

  return true;
}

void ChgSceneEvent::Swap(ChgSceneEvent* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(enterflag_, other->enterflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChgSceneEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChgSceneEvent_descriptor_;
  metadata.reflection = ChgSceneEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterSceneEvent::kCidFieldNumber;
const int EnterSceneEvent::kUidFieldNumber;
const int EnterSceneEvent::kClientidFieldNumber;
const int EnterSceneEvent::kMapidFieldNumber;
const int EnterSceneEvent::kXFieldNumber;
const int EnterSceneEvent::kYFieldNumber;
const int EnterSceneEvent::kZFieldNumber;
#endif  // !_MSC_VER

EnterSceneEvent::EnterSceneEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterSceneEvent::InitAsDefaultInstance() {
}

EnterSceneEvent::EnterSceneEvent(const EnterSceneEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterSceneEvent::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  clientid_ = GOOGLE_ULONGLONG(0);
  mapid_ = GOOGLE_ULONGLONG(0);
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterSceneEvent::~EnterSceneEvent() {
  SharedDtor();
}

void EnterSceneEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterSceneEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterSceneEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterSceneEvent_descriptor_;
}

const EnterSceneEvent& EnterSceneEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

EnterSceneEvent* EnterSceneEvent::default_instance_ = NULL;

EnterSceneEvent* EnterSceneEvent::New() const {
  return new EnterSceneEvent;
}

void EnterSceneEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    clientid_ = GOOGLE_ULONGLONG(0);
    mapid_ = GOOGLE_ULONGLONG(0);
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterSceneEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // optional uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_x;
        break;
      }

      // optional int32 x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_y;
        break;
      }

      // optional int32 y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_z;
        break;
      }

      // optional int32 z = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterSceneEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // optional uint64 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mapid(), output);
  }

  // optional int32 x = 5;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->x(), output);
  }

  // optional int32 y = 6;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->y(), output);
  }

  // optional int32 z = 7;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterSceneEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // optional uint64 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mapid(), target);
  }

  // optional int32 x = 5;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->x(), target);
  }

  // optional int32 y = 6;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->y(), target);
  }

  // optional int32 z = 7;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterSceneEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // optional uint64 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional int32 x = 5;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 6;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 z = 7;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterSceneEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterSceneEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterSceneEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterSceneEvent::MergeFrom(const EnterSceneEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterSceneEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterSceneEvent::CopyFrom(const EnterSceneEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterSceneEvent::IsInitialized() const {

  return true;
}

void EnterSceneEvent::Swap(EnterSceneEvent* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(clientid_, other->clientid_);
    std::swap(mapid_, other->mapid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterSceneEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterSceneEvent_descriptor_;
  metadata.reflection = EnterSceneEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncScenePos::kMapIdFieldNumber;
const int SyncScenePos::kSceneIdFieldNumber;
const int SyncScenePos::kPosFieldNumber;
#endif  // !_MSC_VER

SyncScenePos::SyncScenePos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncScenePos::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

SyncScenePos::SyncScenePos(const SyncScenePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncScenePos::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = GOOGLE_ULONGLONG(0);
  scene_id_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncScenePos::~SyncScenePos() {
  SharedDtor();
}

void SyncScenePos::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void SyncScenePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncScenePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncScenePos_descriptor_;
}

const SyncScenePos& SyncScenePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

SyncScenePos* SyncScenePos::default_instance_ = NULL;

SyncScenePos* SyncScenePos::New() const {
  return new SyncScenePos;
}

void SyncScenePos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = GOOGLE_ULONGLONG(0);
    scene_id_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncScenePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional uint64 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncScenePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->map_id(), output);
  }

  // optional uint64 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scene_id(), output);
  }

  // optional .proto_ff.Vector3PB pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncScenePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->map_id(), target);
  }

  // optional uint64 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scene_id(), target);
  }

  // optional .proto_ff.Vector3PB pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncScenePos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->map_id());
    }

    // optional uint64 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional .proto_ff.Vector3PB pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncScenePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncScenePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncScenePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncScenePos::MergeFrom(const SyncScenePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncScenePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncScenePos::CopyFrom(const SyncScenePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncScenePos::IsInitialized() const {

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void SyncScenePos::Swap(SyncScenePos* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncScenePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncScenePos_descriptor_;
  metadata.reflection = SyncScenePos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncSceneState::kLastStateFieldNumber;
const int SyncSceneState::kCurStateFieldNumber;
#endif  // !_MSC_VER

SyncSceneState::SyncSceneState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncSceneState::InitAsDefaultInstance() {
}

SyncSceneState::SyncSceneState(const SyncSceneState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncSceneState::SharedCtor() {
  _cached_size_ = 0;
  last_state_ = 0u;
  cur_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncSceneState::~SyncSceneState() {
  SharedDtor();
}

void SyncSceneState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncSceneState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncSceneState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncSceneState_descriptor_;
}

const SyncSceneState& SyncSceneState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

SyncSceneState* SyncSceneState::default_instance_ = NULL;

SyncSceneState* SyncSceneState::New() const {
  return new SyncSceneState;
}

void SyncSceneState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_state_ = 0u;
    cur_state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncSceneState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_state_)));
          set_has_last_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_state;
        break;
      }

      // optional uint32 cur_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_state_)));
          set_has_cur_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncSceneState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 last_state = 1;
  if (has_last_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_state(), output);
  }

  // optional uint32 cur_state = 2;
  if (has_cur_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncSceneState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 last_state = 1;
  if (has_last_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_state(), target);
  }

  // optional uint32 cur_state = 2;
  if (has_cur_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncSceneState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_state = 1;
    if (has_last_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_state());
    }

    // optional uint32 cur_state = 2;
    if (has_cur_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncSceneState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncSceneState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncSceneState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncSceneState::MergeFrom(const SyncSceneState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_state()) {
      set_last_state(from.last_state());
    }
    if (from.has_cur_state()) {
      set_cur_state(from.cur_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncSceneState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncSceneState::CopyFrom(const SyncSceneState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncSceneState::IsInitialized() const {

  return true;
}

void SyncSceneState::Swap(SyncSceneState* other) {
  if (other != this) {
    std::swap(last_state_, other->last_state_);
    std::swap(cur_state_, other->cur_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncSceneState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncSceneState_descriptor_;
  metadata.reflection = SyncSceneState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowPartActiveEvent::kTypeFieldNumber;
const int GrowPartActiveEvent::kIdFieldNumber;
const int GrowPartActiveEvent::kCurLvFieldNumber;
#endif  // !_MSC_VER

GrowPartActiveEvent::GrowPartActiveEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowPartActiveEvent::InitAsDefaultInstance() {
}

GrowPartActiveEvent::GrowPartActiveEvent(const GrowPartActiveEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowPartActiveEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  curlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowPartActiveEvent::~GrowPartActiveEvent() {
  SharedDtor();
}

void GrowPartActiveEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowPartActiveEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowPartActiveEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowPartActiveEvent_descriptor_;
}

const GrowPartActiveEvent& GrowPartActiveEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

GrowPartActiveEvent* GrowPartActiveEvent::default_instance_ = NULL;

GrowPartActiveEvent* GrowPartActiveEvent::New() const {
  return new GrowPartActiveEvent;
}

void GrowPartActiveEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    curlv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowPartActiveEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curLv;
        break;
      }

      // optional int32 curLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlv_)));
          set_has_curlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowPartActiveEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 curLv = 3;
  if (has_curlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowPartActiveEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 curLv = 3;
  if (has_curlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowPartActiveEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 curLv = 3;
    if (has_curlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowPartActiveEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowPartActiveEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowPartActiveEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowPartActiveEvent::MergeFrom(const GrowPartActiveEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_curlv()) {
      set_curlv(from.curlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowPartActiveEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowPartActiveEvent::CopyFrom(const GrowPartActiveEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowPartActiveEvent::IsInitialized() const {

  return true;
}

void GrowPartActiveEvent::Swap(GrowPartActiveEvent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(curlv_, other->curlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowPartActiveEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowPartActiveEvent_descriptor_;
  metadata.reflection = GrowPartActiveEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowPartLvUpEvent::kTypeFieldNumber;
const int GrowPartLvUpEvent::kIdFieldNumber;
const int GrowPartLvUpEvent::kCurLvFieldNumber;
#endif  // !_MSC_VER

GrowPartLvUpEvent::GrowPartLvUpEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowPartLvUpEvent::InitAsDefaultInstance() {
}

GrowPartLvUpEvent::GrowPartLvUpEvent(const GrowPartLvUpEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowPartLvUpEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  curlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowPartLvUpEvent::~GrowPartLvUpEvent() {
  SharedDtor();
}

void GrowPartLvUpEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowPartLvUpEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowPartLvUpEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowPartLvUpEvent_descriptor_;
}

const GrowPartLvUpEvent& GrowPartLvUpEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

GrowPartLvUpEvent* GrowPartLvUpEvent::default_instance_ = NULL;

GrowPartLvUpEvent* GrowPartLvUpEvent::New() const {
  return new GrowPartLvUpEvent;
}

void GrowPartLvUpEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    curlv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowPartLvUpEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curLv;
        break;
      }

      // optional int32 curLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlv_)));
          set_has_curlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowPartLvUpEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 curLv = 3;
  if (has_curlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowPartLvUpEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 curLv = 3;
  if (has_curlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowPartLvUpEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 curLv = 3;
    if (has_curlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowPartLvUpEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowPartLvUpEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowPartLvUpEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowPartLvUpEvent::MergeFrom(const GrowPartLvUpEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_curlv()) {
      set_curlv(from.curlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowPartLvUpEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowPartLvUpEvent::CopyFrom(const GrowPartLvUpEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowPartLvUpEvent::IsInitialized() const {

  return true;
}

void GrowPartLvUpEvent::Swap(GrowPartLvUpEvent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(curlv_, other->curlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowPartLvUpEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowPartLvUpEvent_descriptor_;
  metadata.reflection = GrowPartLvUpEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowPartDressEvent::kTypeFieldNumber;
const int GrowPartDressEvent::kIdFieldNumber;
const int GrowPartDressEvent::kCurLvFieldNumber;
#endif  // !_MSC_VER

GrowPartDressEvent::GrowPartDressEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowPartDressEvent::InitAsDefaultInstance() {
}

GrowPartDressEvent::GrowPartDressEvent(const GrowPartDressEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowPartDressEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  curlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowPartDressEvent::~GrowPartDressEvent() {
  SharedDtor();
}

void GrowPartDressEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowPartDressEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowPartDressEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowPartDressEvent_descriptor_;
}

const GrowPartDressEvent& GrowPartDressEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

GrowPartDressEvent* GrowPartDressEvent::default_instance_ = NULL;

GrowPartDressEvent* GrowPartDressEvent::New() const {
  return new GrowPartDressEvent;
}

void GrowPartDressEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    curlv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowPartDressEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curLv;
        break;
      }

      // optional int32 curLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlv_)));
          set_has_curlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowPartDressEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 curLv = 3;
  if (has_curlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowPartDressEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 curLv = 3;
  if (has_curlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowPartDressEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 curLv = 3;
    if (has_curlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowPartDressEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowPartDressEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowPartDressEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowPartDressEvent::MergeFrom(const GrowPartDressEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_curlv()) {
      set_curlv(from.curlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowPartDressEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowPartDressEvent::CopyFrom(const GrowPartDressEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowPartDressEvent::IsInitialized() const {

  return true;
}

void GrowPartDressEvent::Swap(GrowPartDressEvent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(curlv_, other->curlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowPartDressEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowPartDressEvent_descriptor_;
  metadata.reflection = GrowPartDressEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeFacadeEvent::kCidFieldNumber;
const int ChangeFacadeEvent::kWingIdFieldNumber;
const int ChangeFacadeEvent::kFashionClothesIdFieldNumber;
const int ChangeFacadeEvent::kFashionWeaponIdFieldNumber;
const int ChangeFacadeEvent::kOccupationIdFieldNumber;
const int ChangeFacadeEvent::kMountIdFieldNumber;
const int ChangeFacadeEvent::kTreasureIdFieldNumber;
const int ChangeFacadeEvent::kTreasureTypeFieldNumber;
const int ChangeFacadeEvent::kArtifactIdFieldNumber;
const int ChangeFacadeEvent::kHeadIdFieldNumber;
const int ChangeFacadeEvent::kFrameIdFieldNumber;
const int ChangeFacadeEvent::kBubbleIdFieldNumber;
#endif  // !_MSC_VER

ChangeFacadeEvent::ChangeFacadeEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeFacadeEvent::InitAsDefaultInstance() {
}

ChangeFacadeEvent::ChangeFacadeEvent(const ChangeFacadeEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeFacadeEvent::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  wingid_ = GOOGLE_ULONGLONG(0);
  fashionclothesid_ = GOOGLE_ULONGLONG(0);
  fashionweaponid_ = GOOGLE_ULONGLONG(0);
  occupationid_ = GOOGLE_ULONGLONG(0);
  mountid_ = GOOGLE_ULONGLONG(0);
  treasure_id_ = GOOGLE_ULONGLONG(0);
  treasure_type_ = 0;
  artifact_id_ = GOOGLE_ULONGLONG(0);
  head_id_ = GOOGLE_ULONGLONG(0);
  frame_id_ = GOOGLE_ULONGLONG(0);
  bubble_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeFacadeEvent::~ChangeFacadeEvent() {
  SharedDtor();
}

void ChangeFacadeEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeFacadeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeFacadeEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeFacadeEvent_descriptor_;
}

const ChangeFacadeEvent& ChangeFacadeEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

ChangeFacadeEvent* ChangeFacadeEvent::default_instance_ = NULL;

ChangeFacadeEvent* ChangeFacadeEvent::New() const {
  return new ChangeFacadeEvent;
}

void ChangeFacadeEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    wingid_ = GOOGLE_ULONGLONG(0);
    fashionclothesid_ = GOOGLE_ULONGLONG(0);
    fashionweaponid_ = GOOGLE_ULONGLONG(0);
    occupationid_ = GOOGLE_ULONGLONG(0);
    mountid_ = GOOGLE_ULONGLONG(0);
    treasure_id_ = GOOGLE_ULONGLONG(0);
    treasure_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    artifact_id_ = GOOGLE_ULONGLONG(0);
    head_id_ = GOOGLE_ULONGLONG(0);
    frame_id_ = GOOGLE_ULONGLONG(0);
    bubble_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeFacadeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wingId;
        break;
      }

      // optional uint64 wingId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fashionClothesId;
        break;
      }

      // optional uint64 fashionClothesId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionClothesId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fashionclothesid_)));
          set_has_fashionclothesid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fashionWeaponId;
        break;
      }

      // optional uint64 fashionWeaponId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeaponId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fashionweaponid_)));
          set_has_fashionweaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_occupationId;
        break;
      }

      // optional uint64 occupationId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupationId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &occupationid_)));
          set_has_occupationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mountId;
        break;
      }

      // optional uint64 mountId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mountId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mountid_)));
          set_has_mountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_treasure_id;
        break;
      }

      // optional uint64 treasure_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &treasure_id_)));
          set_has_treasure_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_treasure_type;
        break;
      }

      // optional int32 treasure_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_type_)));
          set_has_treasure_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_artifact_id;
        break;
      }

      // optional uint64 artifact_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_artifact_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &artifact_id_)));
          set_has_artifact_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_head_id;
        break;
      }

      // optional uint64 head_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_frame_id;
        break;
      }

      // optional uint64 frame_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bubble_id;
        break;
      }

      // optional uint64 bubble_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bubble_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bubble_id_)));
          set_has_bubble_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeFacadeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 wingId = 2;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->wingid(), output);
  }

  // optional uint64 fashionClothesId = 3;
  if (has_fashionclothesid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fashionclothesid(), output);
  }

  // optional uint64 fashionWeaponId = 4;
  if (has_fashionweaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fashionweaponid(), output);
  }

  // optional uint64 occupationId = 5;
  if (has_occupationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->occupationid(), output);
  }

  // optional uint64 mountId = 6;
  if (has_mountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->mountid(), output);
  }

  // optional uint64 treasure_id = 7;
  if (has_treasure_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->treasure_id(), output);
  }

  // optional int32 treasure_type = 8;
  if (has_treasure_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->treasure_type(), output);
  }

  // optional uint64 artifact_id = 9;
  if (has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->artifact_id(), output);
  }

  // optional uint64 head_id = 10;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->head_id(), output);
  }

  // optional uint64 frame_id = 11;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->frame_id(), output);
  }

  // optional uint64 bubble_id = 12;
  if (has_bubble_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->bubble_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeFacadeEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 wingId = 2;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->wingid(), target);
  }

  // optional uint64 fashionClothesId = 3;
  if (has_fashionclothesid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fashionclothesid(), target);
  }

  // optional uint64 fashionWeaponId = 4;
  if (has_fashionweaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fashionweaponid(), target);
  }

  // optional uint64 occupationId = 5;
  if (has_occupationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->occupationid(), target);
  }

  // optional uint64 mountId = 6;
  if (has_mountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->mountid(), target);
  }

  // optional uint64 treasure_id = 7;
  if (has_treasure_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->treasure_id(), target);
  }

  // optional int32 treasure_type = 8;
  if (has_treasure_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->treasure_type(), target);
  }

  // optional uint64 artifact_id = 9;
  if (has_artifact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->artifact_id(), target);
  }

  // optional uint64 head_id = 10;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->head_id(), target);
  }

  // optional uint64 frame_id = 11;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->frame_id(), target);
  }

  // optional uint64 bubble_id = 12;
  if (has_bubble_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->bubble_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeFacadeEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 wingId = 2;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wingid());
    }

    // optional uint64 fashionClothesId = 3;
    if (has_fashionclothesid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fashionclothesid());
    }

    // optional uint64 fashionWeaponId = 4;
    if (has_fashionweaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fashionweaponid());
    }

    // optional uint64 occupationId = 5;
    if (has_occupationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->occupationid());
    }

    // optional uint64 mountId = 6;
    if (has_mountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mountid());
    }

    // optional uint64 treasure_id = 7;
    if (has_treasure_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->treasure_id());
    }

    // optional int32 treasure_type = 8;
    if (has_treasure_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 artifact_id = 9;
    if (has_artifact_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->artifact_id());
    }

    // optional uint64 head_id = 10;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->head_id());
    }

    // optional uint64 frame_id = 11;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frame_id());
    }

    // optional uint64 bubble_id = 12;
    if (has_bubble_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bubble_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeFacadeEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeFacadeEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeFacadeEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeFacadeEvent::MergeFrom(const ChangeFacadeEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_fashionclothesid()) {
      set_fashionclothesid(from.fashionclothesid());
    }
    if (from.has_fashionweaponid()) {
      set_fashionweaponid(from.fashionweaponid());
    }
    if (from.has_occupationid()) {
      set_occupationid(from.occupationid());
    }
    if (from.has_mountid()) {
      set_mountid(from.mountid());
    }
    if (from.has_treasure_id()) {
      set_treasure_id(from.treasure_id());
    }
    if (from.has_treasure_type()) {
      set_treasure_type(from.treasure_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_artifact_id()) {
      set_artifact_id(from.artifact_id());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_bubble_id()) {
      set_bubble_id(from.bubble_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeFacadeEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFacadeEvent::CopyFrom(const ChangeFacadeEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFacadeEvent::IsInitialized() const {

  return true;
}

void ChangeFacadeEvent::Swap(ChangeFacadeEvent* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(wingid_, other->wingid_);
    std::swap(fashionclothesid_, other->fashionclothesid_);
    std::swap(fashionweaponid_, other->fashionweaponid_);
    std::swap(occupationid_, other->occupationid_);
    std::swap(mountid_, other->mountid_);
    std::swap(treasure_id_, other->treasure_id_);
    std::swap(treasure_type_, other->treasure_type_);
    std::swap(artifact_id_, other->artifact_id_);
    std::swap(head_id_, other->head_id_);
    std::swap(frame_id_, other->frame_id_);
    std::swap(bubble_id_, other->bubble_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeFacadeEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeFacadeEvent_descriptor_;
  metadata.reflection = ChangeFacadeEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayEvent::kPayIndexFieldNumber;
const int PayEvent::kMoneyFieldNumber;
const int PayEvent::kPriceFieldNumber;
const int PayEvent::kTypeFieldNumber;
const int PayEvent::kQuantityFieldNumber;
const int PayEvent::kIndexFirstFieldNumber;
const int PayEvent::kAllFirstFieldNumber;
const int PayEvent::kChanidFieldNumber;
const int PayEvent::kProductidFieldNumber;
#endif  // !_MSC_VER

PayEvent::PayEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayEvent::InitAsDefaultInstance() {
}

PayEvent::PayEvent(const PayEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayEvent::SharedCtor() {
  _cached_size_ = 0;
  payindex_ = 0u;
  money_ = 0u;
  price_ = 0u;
  type_ = 0u;
  quantity_ = 0u;
  indexfirst_ = false;
  allfirst_ = false;
  chanid_ = 0u;
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayEvent::~PayEvent() {
  SharedDtor();
}

void PayEvent::SharedDtor() {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (this != default_instance_) {
  }
}

void PayEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayEvent_descriptor_;
}

const PayEvent& PayEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

PayEvent* PayEvent::default_instance_ = NULL;

PayEvent* PayEvent::New() const {
  return new PayEvent;
}

void PayEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    payindex_ = 0u;
    money_ = 0u;
    price_ = 0u;
    type_ = 0u;
    quantity_ = 0u;
    indexfirst_ = false;
    allfirst_ = false;
    chanid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 payIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payindex_)));
          set_has_payindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional uint32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional uint32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quantity;
        break;
      }

      // optional uint32 quantity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_indexFirst;
        break;
      }

      // optional bool indexFirst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexFirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &indexfirst_)));
          set_has_indexfirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_allFirst;
        break;
      }

      // optional bool allFirst = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allFirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allfirst_)));
          set_has_allfirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_chanid;
        break;
      }

      // optional uint32 chanid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chanid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chanid_)));
          set_has_chanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_productid;
        break;
      }

      // optional string productid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 payIndex = 1;
  if (has_payindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->payindex(), output);
  }

  // optional uint32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->money(), output);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint32 quantity = 5;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->quantity(), output);
  }

  // optional bool indexFirst = 6;
  if (has_indexfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->indexfirst(), output);
  }

  // optional bool allFirst = 7;
  if (has_allfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->allfirst(), output);
  }

  // optional uint32 chanid = 8;
  if (has_chanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->chanid(), output);
  }

  // optional string productid = 9;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->productid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 payIndex = 1;
  if (has_payindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->payindex(), target);
  }

  // optional uint32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->money(), target);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint32 quantity = 5;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->quantity(), target);
  }

  // optional bool indexFirst = 6;
  if (has_indexfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->indexfirst(), target);
  }

  // optional bool allFirst = 7;
  if (has_allfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->allfirst(), target);
  }

  // optional uint32 chanid = 8;
  if (has_chanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->chanid(), target);
  }

  // optional string productid = 9;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->productid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 payIndex = 1;
    if (has_payindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payindex());
    }

    // optional uint32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 quantity = 5;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

    // optional bool indexFirst = 6;
    if (has_indexfirst()) {
      total_size += 1 + 1;
    }

    // optional bool allFirst = 7;
    if (has_allfirst()) {
      total_size += 1 + 1;
    }

    // optional uint32 chanid = 8;
    if (has_chanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chanid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string productid = 9;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayEvent::MergeFrom(const PayEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payindex()) {
      set_payindex(from.payindex());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_indexfirst()) {
      set_indexfirst(from.indexfirst());
    }
    if (from.has_allfirst()) {
      set_allfirst(from.allfirst());
    }
    if (from.has_chanid()) {
      set_chanid(from.chanid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayEvent::CopyFrom(const PayEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayEvent::IsInitialized() const {

  return true;
}

void PayEvent::Swap(PayEvent* other) {
  if (other != this) {
    std::swap(payindex_, other->payindex_);
    std::swap(money_, other->money_);
    std::swap(price_, other->price_);
    std::swap(type_, other->type_);
    std::swap(quantity_, other->quantity_);
    std::swap(indexfirst_, other->indexfirst_);
    std::swap(allfirst_, other->allfirst_);
    std::swap(chanid_, other->chanid_);
    std::swap(productid_, other->productid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayEvent_descriptor_;
  metadata.reflection = PayEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassDupEvent::kDupIdFieldNumber;
const int PassDupEvent::kGroupIdFieldNumber;
const int PassDupEvent::kStarFieldNumber;
const int PassDupEvent::kZidFieldNumber;
#endif  // !_MSC_VER

PassDupEvent::PassDupEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassDupEvent::InitAsDefaultInstance() {
}

PassDupEvent::PassDupEvent(const PassDupEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassDupEvent::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  groupid_ = GOOGLE_ULONGLONG(0);
  star_ = 0u;
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassDupEvent::~PassDupEvent() {
  SharedDtor();
}

void PassDupEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassDupEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassDupEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassDupEvent_descriptor_;
}

const PassDupEvent& PassDupEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

PassDupEvent* PassDupEvent::default_instance_ = NULL;

PassDupEvent* PassDupEvent::New() const {
  return new PassDupEvent;
}

void PassDupEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = GOOGLE_ULONGLONG(0);
    groupid_ = GOOGLE_ULONGLONG(0);
    star_ = 0u;
    zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassDupEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupId;
        break;
      }

      // optional uint64 groupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional uint32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassDupEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dupid(), output);
  }

  // optional uint64 groupId = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassDupEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dupid(), target);
  }

  // optional uint64 groupId = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groupid(), target);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star(), target);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassDupEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dupId = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional uint64 groupId = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // optional uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassDupEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassDupEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassDupEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassDupEvent::MergeFrom(const PassDupEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassDupEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassDupEvent::CopyFrom(const PassDupEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassDupEvent::IsInitialized() const {

  return true;
}

void PassDupEvent::Swap(PassDupEvent* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    std::swap(groupid_, other->groupid_);
    std::swap(star_, other->star_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassDupEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassDupEvent_descriptor_;
  metadata.reflection = PassDupEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeityFantasyBattleEvent::kNumFieldNumber;
#endif  // !_MSC_VER

DeityFantasyBattleEvent::DeityFantasyBattleEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeityFantasyBattleEvent::InitAsDefaultInstance() {
}

DeityFantasyBattleEvent::DeityFantasyBattleEvent(const DeityFantasyBattleEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeityFantasyBattleEvent::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeityFantasyBattleEvent::~DeityFantasyBattleEvent() {
  SharedDtor();
}

void DeityFantasyBattleEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeityFantasyBattleEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeityFantasyBattleEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeityFantasyBattleEvent_descriptor_;
}

const DeityFantasyBattleEvent& DeityFantasyBattleEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

DeityFantasyBattleEvent* DeityFantasyBattleEvent::default_instance_ = NULL;

DeityFantasyBattleEvent* DeityFantasyBattleEvent::New() const {
  return new DeityFantasyBattleEvent;
}

void DeityFantasyBattleEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeityFantasyBattleEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeityFantasyBattleEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeityFantasyBattleEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeityFantasyBattleEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeityFantasyBattleEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeityFantasyBattleEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeityFantasyBattleEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeityFantasyBattleEvent::MergeFrom(const DeityFantasyBattleEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeityFantasyBattleEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeityFantasyBattleEvent::CopyFrom(const DeityFantasyBattleEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeityFantasyBattleEvent::IsInitialized() const {

  return true;
}

void DeityFantasyBattleEvent::Swap(DeityFantasyBattleEvent* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeityFantasyBattleEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeityFantasyBattleEvent_descriptor_;
  metadata.reflection = DeityFantasyBattleEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeityActiveEvent::kIdFieldNumber;
#endif  // !_MSC_VER

DeityActiveEvent::DeityActiveEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeityActiveEvent::InitAsDefaultInstance() {
}

DeityActiveEvent::DeityActiveEvent(const DeityActiveEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeityActiveEvent::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeityActiveEvent::~DeityActiveEvent() {
  SharedDtor();
}

void DeityActiveEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeityActiveEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeityActiveEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeityActiveEvent_descriptor_;
}

const DeityActiveEvent& DeityActiveEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

DeityActiveEvent* DeityActiveEvent::default_instance_ = NULL;

DeityActiveEvent* DeityActiveEvent::New() const {
  return new DeityActiveEvent;
}

void DeityActiveEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeityActiveEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeityActiveEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeityActiveEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeityActiveEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeityActiveEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeityActiveEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeityActiveEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeityActiveEvent::MergeFrom(const DeityActiveEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeityActiveEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeityActiveEvent::CopyFrom(const DeityActiveEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeityActiveEvent::IsInitialized() const {

  return true;
}

void DeityActiveEvent::Swap(DeityActiveEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeityActiveEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeityActiveEvent_descriptor_;
  metadata.reflection = DeityActiveEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingFightChgEvent::kCidFieldNumber;
const int WingFightChgEvent::kFightFieldNumber;
#endif  // !_MSC_VER

WingFightChgEvent::WingFightChgEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WingFightChgEvent::InitAsDefaultInstance() {
}

WingFightChgEvent::WingFightChgEvent(const WingFightChgEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WingFightChgEvent::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingFightChgEvent::~WingFightChgEvent() {
  SharedDtor();
}

void WingFightChgEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WingFightChgEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingFightChgEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingFightChgEvent_descriptor_;
}

const WingFightChgEvent& WingFightChgEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

WingFightChgEvent* WingFightChgEvent::default_instance_ = NULL;

WingFightChgEvent* WingFightChgEvent::New() const {
  return new WingFightChgEvent;
}

void WingFightChgEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingFightChgEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WingFightChgEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 fight = 2;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WingFightChgEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 fight = 2;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WingFightChgEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 fight = 2;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingFightChgEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingFightChgEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingFightChgEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingFightChgEvent::MergeFrom(const WingFightChgEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingFightChgEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingFightChgEvent::CopyFrom(const WingFightChgEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingFightChgEvent::IsInitialized() const {

  return true;
}

void WingFightChgEvent::Swap(WingFightChgEvent* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingFightChgEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingFightChgEvent_descriptor_;
  metadata.reflection = WingFightChgEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartnerFightChgEvent::kCidFieldNumber;
const int PartnerFightChgEvent::kFightFieldNumber;
#endif  // !_MSC_VER

PartnerFightChgEvent::PartnerFightChgEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartnerFightChgEvent::InitAsDefaultInstance() {
}

PartnerFightChgEvent::PartnerFightChgEvent(const PartnerFightChgEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartnerFightChgEvent::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartnerFightChgEvent::~PartnerFightChgEvent() {
  SharedDtor();
}

void PartnerFightChgEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartnerFightChgEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartnerFightChgEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartnerFightChgEvent_descriptor_;
}

const PartnerFightChgEvent& PartnerFightChgEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

PartnerFightChgEvent* PartnerFightChgEvent::default_instance_ = NULL;

PartnerFightChgEvent* PartnerFightChgEvent::New() const {
  return new PartnerFightChgEvent;
}

void PartnerFightChgEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartnerFightChgEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartnerFightChgEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 fight = 2;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartnerFightChgEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 fight = 2;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartnerFightChgEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 fight = 2;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartnerFightChgEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartnerFightChgEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartnerFightChgEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartnerFightChgEvent::MergeFrom(const PartnerFightChgEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartnerFightChgEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartnerFightChgEvent::CopyFrom(const PartnerFightChgEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartnerFightChgEvent::IsInitialized() const {

  return true;
}

void PartnerFightChgEvent::Swap(PartnerFightChgEvent* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartnerFightChgEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartnerFightChgEvent_descriptor_;
  metadata.reflection = PartnerFightChgEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtifactFightChgEvent::kCidFieldNumber;
const int ArtifactFightChgEvent::kFightFieldNumber;
#endif  // !_MSC_VER

ArtifactFightChgEvent::ArtifactFightChgEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArtifactFightChgEvent::InitAsDefaultInstance() {
}

ArtifactFightChgEvent::ArtifactFightChgEvent(const ArtifactFightChgEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArtifactFightChgEvent::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtifactFightChgEvent::~ArtifactFightChgEvent() {
  SharedDtor();
}

void ArtifactFightChgEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtifactFightChgEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtifactFightChgEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtifactFightChgEvent_descriptor_;
}

const ArtifactFightChgEvent& ArtifactFightChgEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

ArtifactFightChgEvent* ArtifactFightChgEvent::default_instance_ = NULL;

ArtifactFightChgEvent* ArtifactFightChgEvent::New() const {
  return new ArtifactFightChgEvent;
}

void ArtifactFightChgEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtifactFightChgEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArtifactFightChgEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 fight = 2;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArtifactFightChgEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 fight = 2;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArtifactFightChgEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 fight = 2;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtifactFightChgEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtifactFightChgEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArtifactFightChgEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtifactFightChgEvent::MergeFrom(const ArtifactFightChgEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtifactFightChgEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactFightChgEvent::CopyFrom(const ArtifactFightChgEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactFightChgEvent::IsInitialized() const {

  return true;
}

void ArtifactFightChgEvent::Swap(ArtifactFightChgEvent* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArtifactFightChgEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtifactFightChgEvent_descriptor_;
  metadata.reflection = ArtifactFightChgEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureFightChgEvent::kCidFieldNumber;
const int TreasureFightChgEvent::kFightFieldNumber;
#endif  // !_MSC_VER

TreasureFightChgEvent::TreasureFightChgEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureFightChgEvent::InitAsDefaultInstance() {
}

TreasureFightChgEvent::TreasureFightChgEvent(const TreasureFightChgEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureFightChgEvent::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureFightChgEvent::~TreasureFightChgEvent() {
  SharedDtor();
}

void TreasureFightChgEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureFightChgEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureFightChgEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureFightChgEvent_descriptor_;
}

const TreasureFightChgEvent& TreasureFightChgEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

TreasureFightChgEvent* TreasureFightChgEvent::default_instance_ = NULL;

TreasureFightChgEvent* TreasureFightChgEvent::New() const {
  return new TreasureFightChgEvent;
}

void TreasureFightChgEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureFightChgEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureFightChgEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 fight = 2;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureFightChgEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 fight = 2;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureFightChgEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 fight = 2;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureFightChgEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureFightChgEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureFightChgEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureFightChgEvent::MergeFrom(const TreasureFightChgEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureFightChgEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureFightChgEvent::CopyFrom(const TreasureFightChgEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureFightChgEvent::IsInitialized() const {

  return true;
}

void TreasureFightChgEvent::Swap(TreasureFightChgEvent* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureFightChgEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureFightChgEvent_descriptor_;
  metadata.reflection = TreasureFightChgEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtifactFantasy::kNFantasyIdFieldNumber;
const int ArtifactFantasy::kNLevelFieldNumber;
const int ArtifactFantasy::kNTotalLvFieldNumber;
#endif  // !_MSC_VER

ArtifactFantasy::ArtifactFantasy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArtifactFantasy::InitAsDefaultInstance() {
}

ArtifactFantasy::ArtifactFantasy(const ArtifactFantasy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArtifactFantasy::SharedCtor() {
  _cached_size_ = 0;
  nfantasyid_ = GOOGLE_ULONGLONG(0);
  nlevel_ = 0u;
  ntotallv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtifactFantasy::~ArtifactFantasy() {
  SharedDtor();
}

void ArtifactFantasy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtifactFantasy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtifactFantasy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtifactFantasy_descriptor_;
}

const ArtifactFantasy& ArtifactFantasy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

ArtifactFantasy* ArtifactFantasy::default_instance_ = NULL;

ArtifactFantasy* ArtifactFantasy::New() const {
  return new ArtifactFantasy;
}

void ArtifactFantasy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nfantasyid_ = GOOGLE_ULONGLONG(0);
    nlevel_ = 0u;
    ntotallv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtifactFantasy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 nFantasyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nfantasyid_)));
          set_has_nfantasyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nLevel;
        break;
      }

      // optional uint32 nLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nTotalLv;
        break;
      }

      // optional uint32 nTotalLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTotalLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntotallv_)));
          set_has_ntotallv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArtifactFantasy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 nFantasyId = 1;
  if (has_nfantasyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nfantasyid(), output);
  }

  // optional uint32 nLevel = 2;
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nlevel(), output);
  }

  // optional uint32 nTotalLv = 3;
  if (has_ntotallv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ntotallv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArtifactFantasy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 nFantasyId = 1;
  if (has_nfantasyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nfantasyid(), target);
  }

  // optional uint32 nLevel = 2;
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nlevel(), target);
  }

  // optional uint32 nTotalLv = 3;
  if (has_ntotallv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ntotallv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArtifactFantasy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 nFantasyId = 1;
    if (has_nfantasyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nfantasyid());
    }

    // optional uint32 nLevel = 2;
    if (has_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nlevel());
    }

    // optional uint32 nTotalLv = 3;
    if (has_ntotallv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ntotallv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtifactFantasy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtifactFantasy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArtifactFantasy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtifactFantasy::MergeFrom(const ArtifactFantasy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nfantasyid()) {
      set_nfantasyid(from.nfantasyid());
    }
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
    if (from.has_ntotallv()) {
      set_ntotallv(from.ntotallv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtifactFantasy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactFantasy::CopyFrom(const ArtifactFantasy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactFantasy::IsInitialized() const {

  return true;
}

void ArtifactFantasy::Swap(ArtifactFantasy* other) {
  if (other != this) {
    std::swap(nfantasyid_, other->nfantasyid_);
    std::swap(nlevel_, other->nlevel_);
    std::swap(ntotallv_, other->ntotallv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArtifactFantasy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtifactFantasy_descriptor_;
  metadata.reflection = ArtifactFantasy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureFantasy::kNFantasyIdFieldNumber;
const int TreasureFantasy::kNLevelFieldNumber;
const int TreasureFantasy::kNTotalLvFieldNumber;
#endif  // !_MSC_VER

TreasureFantasy::TreasureFantasy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureFantasy::InitAsDefaultInstance() {
}

TreasureFantasy::TreasureFantasy(const TreasureFantasy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureFantasy::SharedCtor() {
  _cached_size_ = 0;
  nfantasyid_ = GOOGLE_ULONGLONG(0);
  nlevel_ = 0u;
  ntotallv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureFantasy::~TreasureFantasy() {
  SharedDtor();
}

void TreasureFantasy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureFantasy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureFantasy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureFantasy_descriptor_;
}

const TreasureFantasy& TreasureFantasy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

TreasureFantasy* TreasureFantasy::default_instance_ = NULL;

TreasureFantasy* TreasureFantasy::New() const {
  return new TreasureFantasy;
}

void TreasureFantasy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nfantasyid_ = GOOGLE_ULONGLONG(0);
    nlevel_ = 0u;
    ntotallv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureFantasy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 nFantasyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nfantasyid_)));
          set_has_nfantasyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nLevel;
        break;
      }

      // optional uint32 nLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nTotalLv;
        break;
      }

      // optional uint32 nTotalLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTotalLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntotallv_)));
          set_has_ntotallv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureFantasy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 nFantasyId = 1;
  if (has_nfantasyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nfantasyid(), output);
  }

  // optional uint32 nLevel = 2;
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nlevel(), output);
  }

  // optional uint32 nTotalLv = 3;
  if (has_ntotallv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ntotallv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureFantasy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 nFantasyId = 1;
  if (has_nfantasyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nfantasyid(), target);
  }

  // optional uint32 nLevel = 2;
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nlevel(), target);
  }

  // optional uint32 nTotalLv = 3;
  if (has_ntotallv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ntotallv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureFantasy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 nFantasyId = 1;
    if (has_nfantasyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nfantasyid());
    }

    // optional uint32 nLevel = 2;
    if (has_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nlevel());
    }

    // optional uint32 nTotalLv = 3;
    if (has_ntotallv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ntotallv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureFantasy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureFantasy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureFantasy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureFantasy::MergeFrom(const TreasureFantasy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nfantasyid()) {
      set_nfantasyid(from.nfantasyid());
    }
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
    if (from.has_ntotallv()) {
      set_ntotallv(from.ntotallv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureFantasy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureFantasy::CopyFrom(const TreasureFantasy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureFantasy::IsInitialized() const {

  return true;
}

void TreasureFantasy::Swap(TreasureFantasy* other) {
  if (other != this) {
    std::swap(nfantasyid_, other->nfantasyid_);
    std::swap(nlevel_, other->nlevel_);
    std::swap(ntotallv_, other->ntotallv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureFantasy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureFantasy_descriptor_;
  metadata.reflection = TreasureFantasy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingFantasy::kNFantasyIdFieldNumber;
const int WingFantasy::kNLevelFieldNumber;
const int WingFantasy::kNTotalLvFieldNumber;
#endif  // !_MSC_VER

WingFantasy::WingFantasy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WingFantasy::InitAsDefaultInstance() {
}

WingFantasy::WingFantasy(const WingFantasy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WingFantasy::SharedCtor() {
  _cached_size_ = 0;
  nfantasyid_ = GOOGLE_ULONGLONG(0);
  nlevel_ = 0u;
  ntotallv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingFantasy::~WingFantasy() {
  SharedDtor();
}

void WingFantasy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WingFantasy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingFantasy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingFantasy_descriptor_;
}

const WingFantasy& WingFantasy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

WingFantasy* WingFantasy::default_instance_ = NULL;

WingFantasy* WingFantasy::New() const {
  return new WingFantasy;
}

void WingFantasy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nfantasyid_ = GOOGLE_ULONGLONG(0);
    nlevel_ = 0u;
    ntotallv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingFantasy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 nFantasyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nfantasyid_)));
          set_has_nfantasyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nLevel;
        break;
      }

      // optional uint32 nLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nTotalLv;
        break;
      }

      // optional uint32 nTotalLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTotalLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntotallv_)));
          set_has_ntotallv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WingFantasy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 nFantasyId = 1;
  if (has_nfantasyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nfantasyid(), output);
  }

  // optional uint32 nLevel = 2;
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nlevel(), output);
  }

  // optional uint32 nTotalLv = 3;
  if (has_ntotallv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ntotallv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WingFantasy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 nFantasyId = 1;
  if (has_nfantasyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nfantasyid(), target);
  }

  // optional uint32 nLevel = 2;
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nlevel(), target);
  }

  // optional uint32 nTotalLv = 3;
  if (has_ntotallv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ntotallv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WingFantasy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 nFantasyId = 1;
    if (has_nfantasyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nfantasyid());
    }

    // optional uint32 nLevel = 2;
    if (has_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nlevel());
    }

    // optional uint32 nTotalLv = 3;
    if (has_ntotallv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ntotallv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingFantasy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingFantasy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingFantasy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingFantasy::MergeFrom(const WingFantasy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nfantasyid()) {
      set_nfantasyid(from.nfantasyid());
    }
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
    if (from.has_ntotallv()) {
      set_ntotallv(from.ntotallv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingFantasy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingFantasy::CopyFrom(const WingFantasy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingFantasy::IsInitialized() const {

  return true;
}

void WingFantasy::Swap(WingFantasy* other) {
  if (other != this) {
    std::swap(nfantasyid_, other->nfantasyid_);
    std::swap(nlevel_, other->nlevel_);
    std::swap(ntotallv_, other->ntotallv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingFantasy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingFantasy_descriptor_;
  metadata.reflection = WingFantasy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartnerFantasy::kNFantasyIdFieldNumber;
const int PartnerFantasy::kNLevelFieldNumber;
const int PartnerFantasy::kNTotalLvFieldNumber;
#endif  // !_MSC_VER

PartnerFantasy::PartnerFantasy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartnerFantasy::InitAsDefaultInstance() {
}

PartnerFantasy::PartnerFantasy(const PartnerFantasy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartnerFantasy::SharedCtor() {
  _cached_size_ = 0;
  nfantasyid_ = GOOGLE_ULONGLONG(0);
  nlevel_ = 0u;
  ntotallv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartnerFantasy::~PartnerFantasy() {
  SharedDtor();
}

void PartnerFantasy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartnerFantasy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartnerFantasy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartnerFantasy_descriptor_;
}

const PartnerFantasy& PartnerFantasy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

PartnerFantasy* PartnerFantasy::default_instance_ = NULL;

PartnerFantasy* PartnerFantasy::New() const {
  return new PartnerFantasy;
}

void PartnerFantasy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nfantasyid_ = GOOGLE_ULONGLONG(0);
    nlevel_ = 0u;
    ntotallv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartnerFantasy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 nFantasyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nfantasyid_)));
          set_has_nfantasyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nLevel;
        break;
      }

      // optional uint32 nLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nTotalLv;
        break;
      }

      // optional uint32 nTotalLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTotalLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntotallv_)));
          set_has_ntotallv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartnerFantasy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 nFantasyId = 1;
  if (has_nfantasyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nfantasyid(), output);
  }

  // optional uint32 nLevel = 2;
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nlevel(), output);
  }

  // optional uint32 nTotalLv = 3;
  if (has_ntotallv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ntotallv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartnerFantasy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 nFantasyId = 1;
  if (has_nfantasyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nfantasyid(), target);
  }

  // optional uint32 nLevel = 2;
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nlevel(), target);
  }

  // optional uint32 nTotalLv = 3;
  if (has_ntotallv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ntotallv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartnerFantasy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 nFantasyId = 1;
    if (has_nfantasyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nfantasyid());
    }

    // optional uint32 nLevel = 2;
    if (has_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nlevel());
    }

    // optional uint32 nTotalLv = 3;
    if (has_ntotallv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ntotallv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartnerFantasy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartnerFantasy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartnerFantasy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartnerFantasy::MergeFrom(const PartnerFantasy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nfantasyid()) {
      set_nfantasyid(from.nfantasyid());
    }
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
    if (from.has_ntotallv()) {
      set_ntotallv(from.ntotallv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartnerFantasy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartnerFantasy::CopyFrom(const PartnerFantasy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartnerFantasy::IsInitialized() const {

  return true;
}

void PartnerFantasy::Swap(PartnerFantasy* other) {
  if (other != this) {
    std::swap(nfantasyid_, other->nfantasyid_);
    std::swap(nlevel_, other->nlevel_);
    std::swap(ntotallv_, other->ntotallv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartnerFantasy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartnerFantasy_descriptor_;
  metadata.reflection = PartnerFantasy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingAdvance::kNLevelFieldNumber;
#endif  // !_MSC_VER

WingAdvance::WingAdvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WingAdvance::InitAsDefaultInstance() {
}

WingAdvance::WingAdvance(const WingAdvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WingAdvance::SharedCtor() {
  _cached_size_ = 0;
  nlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingAdvance::~WingAdvance() {
  SharedDtor();
}

void WingAdvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WingAdvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingAdvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingAdvance_descriptor_;
}

const WingAdvance& WingAdvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

WingAdvance* WingAdvance::default_instance_ = NULL;

WingAdvance* WingAdvance::New() const {
  return new WingAdvance;
}

void WingAdvance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingAdvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WingAdvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nLevel = 1;
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WingAdvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nLevel = 1;
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WingAdvance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nLevel = 1;
    if (has_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingAdvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingAdvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingAdvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingAdvance::MergeFrom(const WingAdvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingAdvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingAdvance::CopyFrom(const WingAdvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingAdvance::IsInitialized() const {

  return true;
}

void WingAdvance::Swap(WingAdvance* other) {
  if (other != this) {
    std::swap(nlevel_, other->nlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingAdvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingAdvance_descriptor_;
  metadata.reflection = WingAdvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureAdvance::kNLevelFieldNumber;
#endif  // !_MSC_VER

TreasureAdvance::TreasureAdvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureAdvance::InitAsDefaultInstance() {
}

TreasureAdvance::TreasureAdvance(const TreasureAdvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureAdvance::SharedCtor() {
  _cached_size_ = 0;
  nlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureAdvance::~TreasureAdvance() {
  SharedDtor();
}

void TreasureAdvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureAdvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureAdvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureAdvance_descriptor_;
}

const TreasureAdvance& TreasureAdvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

TreasureAdvance* TreasureAdvance::default_instance_ = NULL;

TreasureAdvance* TreasureAdvance::New() const {
  return new TreasureAdvance;
}

void TreasureAdvance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureAdvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureAdvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nLevel = 1;
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureAdvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nLevel = 1;
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureAdvance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nLevel = 1;
    if (has_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureAdvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureAdvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureAdvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureAdvance::MergeFrom(const TreasureAdvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureAdvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureAdvance::CopyFrom(const TreasureAdvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureAdvance::IsInitialized() const {

  return true;
}

void TreasureAdvance::Swap(TreasureAdvance* other) {
  if (other != this) {
    std::swap(nlevel_, other->nlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureAdvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureAdvance_descriptor_;
  metadata.reflection = TreasureAdvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtifactAdvance::kNLevelFieldNumber;
#endif  // !_MSC_VER

ArtifactAdvance::ArtifactAdvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArtifactAdvance::InitAsDefaultInstance() {
}

ArtifactAdvance::ArtifactAdvance(const ArtifactAdvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArtifactAdvance::SharedCtor() {
  _cached_size_ = 0;
  nlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtifactAdvance::~ArtifactAdvance() {
  SharedDtor();
}

void ArtifactAdvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtifactAdvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtifactAdvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtifactAdvance_descriptor_;
}

const ArtifactAdvance& ArtifactAdvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

ArtifactAdvance* ArtifactAdvance::default_instance_ = NULL;

ArtifactAdvance* ArtifactAdvance::New() const {
  return new ArtifactAdvance;
}

void ArtifactAdvance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtifactAdvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArtifactAdvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nLevel = 1;
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArtifactAdvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nLevel = 1;
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArtifactAdvance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nLevel = 1;
    if (has_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtifactAdvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtifactAdvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArtifactAdvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtifactAdvance::MergeFrom(const ArtifactAdvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtifactAdvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactAdvance::CopyFrom(const ArtifactAdvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactAdvance::IsInitialized() const {

  return true;
}

void ArtifactAdvance::Swap(ArtifactAdvance* other) {
  if (other != this) {
    std::swap(nlevel_, other->nlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArtifactAdvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtifactAdvance_descriptor_;
  metadata.reflection = ArtifactAdvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountAdvance::kNLevelFieldNumber;
#endif  // !_MSC_VER

MountAdvance::MountAdvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountAdvance::InitAsDefaultInstance() {
}

MountAdvance::MountAdvance(const MountAdvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountAdvance::SharedCtor() {
  _cached_size_ = 0;
  nlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountAdvance::~MountAdvance() {
  SharedDtor();
}

void MountAdvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountAdvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountAdvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountAdvance_descriptor_;
}

const MountAdvance& MountAdvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

MountAdvance* MountAdvance::default_instance_ = NULL;

MountAdvance* MountAdvance::New() const {
  return new MountAdvance;
}

void MountAdvance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountAdvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountAdvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nLevel = 1;
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountAdvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nLevel = 1;
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountAdvance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nLevel = 1;
    if (has_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountAdvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountAdvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountAdvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountAdvance::MergeFrom(const MountAdvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountAdvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountAdvance::CopyFrom(const MountAdvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountAdvance::IsInitialized() const {

  return true;
}

void MountAdvance::Swap(MountAdvance* other) {
  if (other != this) {
    std::swap(nlevel_, other->nlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountAdvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountAdvance_descriptor_;
  metadata.reflection = MountAdvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OccupationAdvance::kNGradeFieldNumber;
#endif  // !_MSC_VER

OccupationAdvance::OccupationAdvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OccupationAdvance::InitAsDefaultInstance() {
}

OccupationAdvance::OccupationAdvance(const OccupationAdvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OccupationAdvance::SharedCtor() {
  _cached_size_ = 0;
  ngrade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OccupationAdvance::~OccupationAdvance() {
  SharedDtor();
}

void OccupationAdvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OccupationAdvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OccupationAdvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OccupationAdvance_descriptor_;
}

const OccupationAdvance& OccupationAdvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

OccupationAdvance* OccupationAdvance::default_instance_ = NULL;

OccupationAdvance* OccupationAdvance::New() const {
  return new OccupationAdvance;
}

void OccupationAdvance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ngrade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OccupationAdvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nGrade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ngrade_)));
          set_has_ngrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OccupationAdvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nGrade = 1;
  if (has_ngrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ngrade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OccupationAdvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nGrade = 1;
  if (has_ngrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ngrade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OccupationAdvance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nGrade = 1;
    if (has_ngrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ngrade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OccupationAdvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OccupationAdvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OccupationAdvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OccupationAdvance::MergeFrom(const OccupationAdvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ngrade()) {
      set_ngrade(from.ngrade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OccupationAdvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupationAdvance::CopyFrom(const OccupationAdvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupationAdvance::IsInitialized() const {

  return true;
}

void OccupationAdvance::Swap(OccupationAdvance* other) {
  if (other != this) {
    std::swap(ngrade_, other->ngrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OccupationAdvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OccupationAdvance_descriptor_;
  metadata.reflection = OccupationAdvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartnerAdvance::kNLevelFieldNumber;
#endif  // !_MSC_VER

PartnerAdvance::PartnerAdvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartnerAdvance::InitAsDefaultInstance() {
}

PartnerAdvance::PartnerAdvance(const PartnerAdvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartnerAdvance::SharedCtor() {
  _cached_size_ = 0;
  nlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartnerAdvance::~PartnerAdvance() {
  SharedDtor();
}

void PartnerAdvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartnerAdvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartnerAdvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartnerAdvance_descriptor_;
}

const PartnerAdvance& PartnerAdvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

PartnerAdvance* PartnerAdvance::default_instance_ = NULL;

PartnerAdvance* PartnerAdvance::New() const {
  return new PartnerAdvance;
}

void PartnerAdvance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartnerAdvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartnerAdvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nLevel = 1;
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartnerAdvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nLevel = 1;
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartnerAdvance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nLevel = 1;
    if (has_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartnerAdvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartnerAdvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartnerAdvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartnerAdvance::MergeFrom(const PartnerAdvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartnerAdvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartnerAdvance::CopyFrom(const PartnerAdvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartnerAdvance::IsInitialized() const {

  return true;
}

void PartnerAdvance::Swap(PartnerAdvance* other) {
  if (other != this) {
    std::swap(nlevel_, other->nlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartnerAdvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartnerAdvance_descriptor_;
  metadata.reflection = PartnerAdvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodRelicsFinish::kIdFieldNumber;
#endif  // !_MSC_VER

GodRelicsFinish::GodRelicsFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodRelicsFinish::InitAsDefaultInstance() {
}

GodRelicsFinish::GodRelicsFinish(const GodRelicsFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodRelicsFinish::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodRelicsFinish::~GodRelicsFinish() {
  SharedDtor();
}

void GodRelicsFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodRelicsFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodRelicsFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodRelicsFinish_descriptor_;
}

const GodRelicsFinish& GodRelicsFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

GodRelicsFinish* GodRelicsFinish::default_instance_ = NULL;

GodRelicsFinish* GodRelicsFinish::New() const {
  return new GodRelicsFinish;
}

void GodRelicsFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodRelicsFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodRelicsFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodRelicsFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodRelicsFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodRelicsFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodRelicsFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodRelicsFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodRelicsFinish::MergeFrom(const GodRelicsFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodRelicsFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodRelicsFinish::CopyFrom(const GodRelicsFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodRelicsFinish::IsInitialized() const {

  return true;
}

void GodRelicsFinish::Swap(GodRelicsFinish* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodRelicsFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodRelicsFinish_descriptor_;
  metadata.reflection = GodRelicsFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ChatWorldEvent::ChatWorldEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatWorldEvent::InitAsDefaultInstance() {
}

ChatWorldEvent::ChatWorldEvent(const ChatWorldEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatWorldEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatWorldEvent::~ChatWorldEvent() {
  SharedDtor();
}

void ChatWorldEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatWorldEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatWorldEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatWorldEvent_descriptor_;
}

const ChatWorldEvent& ChatWorldEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

ChatWorldEvent* ChatWorldEvent::default_instance_ = NULL;

ChatWorldEvent* ChatWorldEvent::New() const {
  return new ChatWorldEvent;
}

void ChatWorldEvent::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatWorldEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ChatWorldEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatWorldEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatWorldEvent::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatWorldEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatWorldEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatWorldEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatWorldEvent::MergeFrom(const ChatWorldEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatWorldEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatWorldEvent::CopyFrom(const ChatWorldEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatWorldEvent::IsInitialized() const {

  return true;
}

void ChatWorldEvent::Swap(ChatWorldEvent* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatWorldEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatWorldEvent_descriptor_;
  metadata.reflection = ChatWorldEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipScoreChangeEvent::kAllScoreFieldNumber;
#endif  // !_MSC_VER

EquipScoreChangeEvent::EquipScoreChangeEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipScoreChangeEvent::InitAsDefaultInstance() {
}

EquipScoreChangeEvent::EquipScoreChangeEvent(const EquipScoreChangeEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipScoreChangeEvent::SharedCtor() {
  _cached_size_ = 0;
  all_score_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipScoreChangeEvent::~EquipScoreChangeEvent() {
  SharedDtor();
}

void EquipScoreChangeEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipScoreChangeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipScoreChangeEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipScoreChangeEvent_descriptor_;
}

const EquipScoreChangeEvent& EquipScoreChangeEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

EquipScoreChangeEvent* EquipScoreChangeEvent::default_instance_ = NULL;

EquipScoreChangeEvent* EquipScoreChangeEvent::New() const {
  return new EquipScoreChangeEvent;
}

void EquipScoreChangeEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    all_score_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipScoreChangeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 all_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_score_)));
          set_has_all_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipScoreChangeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 all_score = 1;
  if (has_all_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->all_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipScoreChangeEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 all_score = 1;
  if (has_all_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->all_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipScoreChangeEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 all_score = 1;
    if (has_all_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipScoreChangeEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipScoreChangeEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipScoreChangeEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipScoreChangeEvent::MergeFrom(const EquipScoreChangeEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_all_score()) {
      set_all_score(from.all_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipScoreChangeEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipScoreChangeEvent::CopyFrom(const EquipScoreChangeEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipScoreChangeEvent::IsInitialized() const {

  return true;
}

void EquipScoreChangeEvent::Swap(EquipScoreChangeEvent* other) {
  if (other != this) {
    std::swap(all_score_, other->all_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipScoreChangeEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipScoreChangeEvent_descriptor_;
  metadata.reflection = EquipScoreChangeEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoneInlayEvent::kPosFieldNumber;
const int StoneInlayEvent::kStoneItemIdFieldNumber;
const int StoneInlayEvent::kStoneLevelFieldNumber;
const int StoneInlayEvent::kTotalLevelFieldNumber;
const int StoneInlayEvent::kAveStoneLevelFieldNumber;
const int StoneInlayEvent::kCountFieldNumber;
#endif  // !_MSC_VER

StoneInlayEvent::StoneInlayEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoneInlayEvent::InitAsDefaultInstance() {
}

StoneInlayEvent::StoneInlayEvent(const StoneInlayEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoneInlayEvent::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  stone_itemid_ = GOOGLE_ULONGLONG(0);
  stone_level_ = 0u;
  total_level_ = 0u;
  ave_stone_level_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoneInlayEvent::~StoneInlayEvent() {
  SharedDtor();
}

void StoneInlayEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoneInlayEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoneInlayEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoneInlayEvent_descriptor_;
}

const StoneInlayEvent& StoneInlayEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

StoneInlayEvent* StoneInlayEvent::default_instance_ = NULL;

StoneInlayEvent* StoneInlayEvent::New() const {
  return new StoneInlayEvent;
}

void StoneInlayEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    stone_itemid_ = GOOGLE_ULONGLONG(0);
    stone_level_ = 0u;
    total_level_ = 0u;
    ave_stone_level_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoneInlayEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stone_itemId;
        break;
      }

      // optional uint64 stone_itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stone_itemid_)));
          set_has_stone_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stone_level;
        break;
      }

      // optional uint32 stone_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stone_level_)));
          set_has_stone_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_level;
        break;
      }

      // optional uint32 total_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_level_)));
          set_has_total_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ave_stone_level;
        break;
      }

      // optional uint32 ave_stone_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ave_stone_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ave_stone_level_)));
          set_has_ave_stone_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional uint32 count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoneInlayEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional uint64 stone_itemId = 2;
  if (has_stone_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stone_itemid(), output);
  }

  // optional uint32 stone_level = 3;
  if (has_stone_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stone_level(), output);
  }

  // optional uint32 total_level = 4;
  if (has_total_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_level(), output);
  }

  // optional uint32 ave_stone_level = 5;
  if (has_ave_stone_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ave_stone_level(), output);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoneInlayEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional uint64 stone_itemId = 2;
  if (has_stone_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stone_itemid(), target);
  }

  // optional uint32 stone_level = 3;
  if (has_stone_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stone_level(), target);
  }

  // optional uint32 total_level = 4;
  if (has_total_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_level(), target);
  }

  // optional uint32 ave_stone_level = 5;
  if (has_ave_stone_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ave_stone_level(), target);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoneInlayEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional uint64 stone_itemId = 2;
    if (has_stone_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stone_itemid());
    }

    // optional uint32 stone_level = 3;
    if (has_stone_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stone_level());
    }

    // optional uint32 total_level = 4;
    if (has_total_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_level());
    }

    // optional uint32 ave_stone_level = 5;
    if (has_ave_stone_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ave_stone_level());
    }

    // optional uint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoneInlayEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoneInlayEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoneInlayEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoneInlayEvent::MergeFrom(const StoneInlayEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_stone_itemid()) {
      set_stone_itemid(from.stone_itemid());
    }
    if (from.has_stone_level()) {
      set_stone_level(from.stone_level());
    }
    if (from.has_total_level()) {
      set_total_level(from.total_level());
    }
    if (from.has_ave_stone_level()) {
      set_ave_stone_level(from.ave_stone_level());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoneInlayEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoneInlayEvent::CopyFrom(const StoneInlayEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoneInlayEvent::IsInitialized() const {

  return true;
}

void StoneInlayEvent::Swap(StoneInlayEvent* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(stone_itemid_, other->stone_itemid_);
    std::swap(stone_level_, other->stone_level_);
    std::swap(total_level_, other->total_level_);
    std::swap(ave_stone_level_, other->ave_stone_level_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoneInlayEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoneInlayEvent_descriptor_;
  metadata.reflection = StoneInlayEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountFightChgEvent::kCidFieldNumber;
const int MountFightChgEvent::kFightFieldNumber;
#endif  // !_MSC_VER

MountFightChgEvent::MountFightChgEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountFightChgEvent::InitAsDefaultInstance() {
}

MountFightChgEvent::MountFightChgEvent(const MountFightChgEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountFightChgEvent::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountFightChgEvent::~MountFightChgEvent() {
  SharedDtor();
}

void MountFightChgEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountFightChgEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountFightChgEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountFightChgEvent_descriptor_;
}

const MountFightChgEvent& MountFightChgEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

MountFightChgEvent* MountFightChgEvent::default_instance_ = NULL;

MountFightChgEvent* MountFightChgEvent::New() const {
  return new MountFightChgEvent;
}

void MountFightChgEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountFightChgEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountFightChgEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 fight = 2;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountFightChgEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 fight = 2;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountFightChgEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 fight = 2;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountFightChgEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountFightChgEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountFightChgEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountFightChgEvent::MergeFrom(const MountFightChgEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountFightChgEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountFightChgEvent::CopyFrom(const MountFightChgEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountFightChgEvent::IsInitialized() const {

  return true;
}

void MountFightChgEvent::Swap(MountFightChgEvent* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountFightChgEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountFightChgEvent_descriptor_;
  metadata.reflection = MountFightChgEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MagicSumChangeEvent::kSumFieldNumber;
#endif  // !_MSC_VER

MagicSumChangeEvent::MagicSumChangeEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MagicSumChangeEvent::InitAsDefaultInstance() {
}

MagicSumChangeEvent::MagicSumChangeEvent(const MagicSumChangeEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MagicSumChangeEvent::SharedCtor() {
  _cached_size_ = 0;
  sum_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MagicSumChangeEvent::~MagicSumChangeEvent() {
  SharedDtor();
}

void MagicSumChangeEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MagicSumChangeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MagicSumChangeEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MagicSumChangeEvent_descriptor_;
}

const MagicSumChangeEvent& MagicSumChangeEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

MagicSumChangeEvent* MagicSumChangeEvent::default_instance_ = NULL;

MagicSumChangeEvent* MagicSumChangeEvent::New() const {
  return new MagicSumChangeEvent;
}

void MagicSumChangeEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sum_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MagicSumChangeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MagicSumChangeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sum = 1;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MagicSumChangeEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 sum = 1;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MagicSumChangeEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sum = 1;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MagicSumChangeEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MagicSumChangeEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MagicSumChangeEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MagicSumChangeEvent::MergeFrom(const MagicSumChangeEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sum()) {
      set_sum(from.sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MagicSumChangeEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagicSumChangeEvent::CopyFrom(const MagicSumChangeEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagicSumChangeEvent::IsInitialized() const {

  return true;
}

void MagicSumChangeEvent::Swap(MagicSumChangeEvent* other) {
  if (other != this) {
    std::swap(sum_, other->sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MagicSumChangeEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MagicSumChangeEvent_descriptor_;
  metadata.reflection = MagicSumChangeEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattlePassXianCe::kBuyStatusFieldNumber;
const int BattlePassXianCe::kLvFieldNumber;
#endif  // !_MSC_VER

BattlePassXianCe::BattlePassXianCe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattlePassXianCe::InitAsDefaultInstance() {
}

BattlePassXianCe::BattlePassXianCe(const BattlePassXianCe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattlePassXianCe::SharedCtor() {
  _cached_size_ = 0;
  buy_status_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattlePassXianCe::~BattlePassXianCe() {
  SharedDtor();
}

void BattlePassXianCe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattlePassXianCe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassXianCe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattlePassXianCe_descriptor_;
}

const BattlePassXianCe& BattlePassXianCe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

BattlePassXianCe* BattlePassXianCe::default_instance_ = NULL;

BattlePassXianCe* BattlePassXianCe::New() const {
  return new BattlePassXianCe;
}

void BattlePassXianCe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buy_status_ = 0;
    lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattlePassXianCe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buy_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_status_)));
          set_has_buy_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattlePassXianCe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 buy_status = 1;
  if (has_buy_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buy_status(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattlePassXianCe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 buy_status = 1;
  if (has_buy_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buy_status(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattlePassXianCe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buy_status = 1;
    if (has_buy_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_status());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassXianCe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattlePassXianCe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattlePassXianCe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattlePassXianCe::MergeFrom(const BattlePassXianCe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buy_status()) {
      set_buy_status(from.buy_status());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattlePassXianCe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassXianCe::CopyFrom(const BattlePassXianCe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassXianCe::IsInitialized() const {

  return true;
}

void BattlePassXianCe::Swap(BattlePassXianCe* other) {
  if (other != this) {
    std::swap(buy_status_, other->buy_status_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattlePassXianCe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattlePassXianCe_descriptor_;
  metadata.reflection = BattlePassXianCe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattlePassBaoDing::kBuyStatusFieldNumber;
const int BattlePassBaoDing::kLvFieldNumber;
#endif  // !_MSC_VER

BattlePassBaoDing::BattlePassBaoDing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattlePassBaoDing::InitAsDefaultInstance() {
}

BattlePassBaoDing::BattlePassBaoDing(const BattlePassBaoDing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattlePassBaoDing::SharedCtor() {
  _cached_size_ = 0;
  buy_status_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattlePassBaoDing::~BattlePassBaoDing() {
  SharedDtor();
}

void BattlePassBaoDing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattlePassBaoDing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassBaoDing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattlePassBaoDing_descriptor_;
}

const BattlePassBaoDing& BattlePassBaoDing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

BattlePassBaoDing* BattlePassBaoDing::default_instance_ = NULL;

BattlePassBaoDing* BattlePassBaoDing::New() const {
  return new BattlePassBaoDing;
}

void BattlePassBaoDing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buy_status_ = 0;
    lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattlePassBaoDing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buy_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_status_)));
          set_has_buy_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattlePassBaoDing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 buy_status = 1;
  if (has_buy_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buy_status(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattlePassBaoDing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 buy_status = 1;
  if (has_buy_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buy_status(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattlePassBaoDing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buy_status = 1;
    if (has_buy_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_status());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassBaoDing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattlePassBaoDing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattlePassBaoDing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattlePassBaoDing::MergeFrom(const BattlePassBaoDing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buy_status()) {
      set_buy_status(from.buy_status());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattlePassBaoDing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassBaoDing::CopyFrom(const BattlePassBaoDing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassBaoDing::IsInitialized() const {

  return true;
}

void BattlePassBaoDing::Swap(BattlePassBaoDing* other) {
  if (other != this) {
    std::swap(buy_status_, other->buy_status_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattlePassBaoDing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattlePassBaoDing_descriptor_;
  metadata.reflection = BattlePassBaoDing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeityFightChgEvent::kFightFieldNumber;
#endif  // !_MSC_VER

DeityFightChgEvent::DeityFightChgEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeityFightChgEvent::InitAsDefaultInstance() {
}

DeityFightChgEvent::DeityFightChgEvent(const DeityFightChgEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeityFightChgEvent::SharedCtor() {
  _cached_size_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeityFightChgEvent::~DeityFightChgEvent() {
  SharedDtor();
}

void DeityFightChgEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeityFightChgEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeityFightChgEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeityFightChgEvent_descriptor_;
}

const DeityFightChgEvent& DeityFightChgEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

DeityFightChgEvent* DeityFightChgEvent::default_instance_ = NULL;

DeityFightChgEvent* DeityFightChgEvent::New() const {
  return new DeityFightChgEvent;
}

void DeityFightChgEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeityFightChgEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeityFightChgEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fight = 1;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeityFightChgEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fight = 1;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeityFightChgEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fight = 1;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeityFightChgEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeityFightChgEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeityFightChgEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeityFightChgEvent::MergeFrom(const DeityFightChgEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeityFightChgEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeityFightChgEvent::CopyFrom(const DeityFightChgEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeityFightChgEvent::IsInitialized() const {

  return true;
}

void DeityFightChgEvent::Swap(DeityFightChgEvent* other) {
  if (other != this) {
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeityFightChgEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeityFightChgEvent_descriptor_;
  metadata.reflection = DeityFightChgEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeastFightChgEvent::kFightFieldNumber;
#endif  // !_MSC_VER

BeastFightChgEvent::BeastFightChgEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeastFightChgEvent::InitAsDefaultInstance() {
}

BeastFightChgEvent::BeastFightChgEvent(const BeastFightChgEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeastFightChgEvent::SharedCtor() {
  _cached_size_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeastFightChgEvent::~BeastFightChgEvent() {
  SharedDtor();
}

void BeastFightChgEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeastFightChgEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeastFightChgEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeastFightChgEvent_descriptor_;
}

const BeastFightChgEvent& BeastFightChgEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

BeastFightChgEvent* BeastFightChgEvent::default_instance_ = NULL;

BeastFightChgEvent* BeastFightChgEvent::New() const {
  return new BeastFightChgEvent;
}

void BeastFightChgEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeastFightChgEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeastFightChgEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fight = 1;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeastFightChgEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fight = 1;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeastFightChgEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fight = 1;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeastFightChgEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeastFightChgEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeastFightChgEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeastFightChgEvent::MergeFrom(const BeastFightChgEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeastFightChgEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeastFightChgEvent::CopyFrom(const BeastFightChgEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeastFightChgEvent::IsInitialized() const {

  return true;
}

void BeastFightChgEvent::Swap(BeastFightChgEvent* other) {
  if (other != this) {
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeastFightChgEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeastFightChgEvent_descriptor_;
  metadata.reflection = BeastFightChgEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryExpressExpEvent::kExpFieldNumber;
#endif  // !_MSC_VER

MarryExpressExpEvent::MarryExpressExpEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryExpressExpEvent::InitAsDefaultInstance() {
}

MarryExpressExpEvent::MarryExpressExpEvent(const MarryExpressExpEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryExpressExpEvent::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryExpressExpEvent::~MarryExpressExpEvent() {
  SharedDtor();
}

void MarryExpressExpEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryExpressExpEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryExpressExpEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryExpressExpEvent_descriptor_;
}

const MarryExpressExpEvent& MarryExpressExpEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

MarryExpressExpEvent* MarryExpressExpEvent::default_instance_ = NULL;

MarryExpressExpEvent* MarryExpressExpEvent::New() const {
  return new MarryExpressExpEvent;
}

void MarryExpressExpEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryExpressExpEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryExpressExpEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryExpressExpEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryExpressExpEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryExpressExpEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryExpressExpEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryExpressExpEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryExpressExpEvent::MergeFrom(const MarryExpressExpEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryExpressExpEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryExpressExpEvent::CopyFrom(const MarryExpressExpEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryExpressExpEvent::IsInitialized() const {

  return true;
}

void MarryExpressExpEvent::Swap(MarryExpressExpEvent* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryExpressExpEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryExpressExpEvent_descriptor_;
  metadata.reflection = MarryExpressExpEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShenjiFightChgEvent::kSlotFieldNumber;
const int ShenjiFightChgEvent::kFightFieldNumber;
const int ShenjiFightChgEvent::kStarFieldNumber;
#endif  // !_MSC_VER

ShenjiFightChgEvent::ShenjiFightChgEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShenjiFightChgEvent::InitAsDefaultInstance() {
}

ShenjiFightChgEvent::ShenjiFightChgEvent(const ShenjiFightChgEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShenjiFightChgEvent::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  fight_ = GOOGLE_ULONGLONG(0);
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShenjiFightChgEvent::~ShenjiFightChgEvent() {
  SharedDtor();
}

void ShenjiFightChgEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShenjiFightChgEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShenjiFightChgEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShenjiFightChgEvent_descriptor_;
}

const ShenjiFightChgEvent& ShenjiFightChgEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fevent_2eproto();
  return *default_instance_;
}

ShenjiFightChgEvent* ShenjiFightChgEvent::default_instance_ = NULL;

ShenjiFightChgEvent* ShenjiFightChgEvent::New() const {
  return new ShenjiFightChgEvent;
}

void ShenjiFightChgEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0u;
    fight_ = GOOGLE_ULONGLONG(0);
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShenjiFightChgEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional uint32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShenjiFightChgEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // optional uint64 fight = 2;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fight(), output);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShenjiFightChgEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // optional uint64 fight = 2;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fight(), target);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShenjiFightChgEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional uint64 fight = 2;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShenjiFightChgEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShenjiFightChgEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShenjiFightChgEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShenjiFightChgEvent::MergeFrom(const ShenjiFightChgEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShenjiFightChgEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShenjiFightChgEvent::CopyFrom(const ShenjiFightChgEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShenjiFightChgEvent::IsInitialized() const {

  return true;
}

void ShenjiFightChgEvent::Swap(ShenjiFightChgEvent* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(fight_, other->fight_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShenjiFightChgEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShenjiFightChgEvent_descriptor_;
  metadata.reflection = ShenjiFightChgEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
