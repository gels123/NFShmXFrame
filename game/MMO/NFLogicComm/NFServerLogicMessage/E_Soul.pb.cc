// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Soul.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Soul.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_SoulOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulSoul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulSoul_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulSoul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulSoul_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_Soul3dmodel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_Soul3dmodel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_Soul3dmodel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_Soul3dmodel_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulSoulbasicAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulSoulbasicAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulSoulbasic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulSoulbasic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulSoulbasic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulSoulbasic_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulSouladvanceAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulSouladvanceAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulSouladvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulSouladvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulSouladvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulSouladvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulBless_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulBless_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulBless_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulBless_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulPrivilegeAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulPrivilegeAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulPrivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulPrivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulPrivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulPrivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulCrystal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulCrystal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulCrystal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulCrystal_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulCrystallv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulCrystallv_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulCrystallv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulCrystallv_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulCrystaltopAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulCrystaltopAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulCrystaltop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulCrystaltop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulCrystaltop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulCrystaltop_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulCrystalhole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulCrystalhole_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulCrystalhole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulCrystalhole_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulFusionFusionDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulFusionFusionDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulFusion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulFusion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulFusion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulFusion_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulAttrAttDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulAttrAttDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulAttrStarattDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulAttrStarattDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulBone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulBone_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulBone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulBone_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulBonekill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulBonekill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulBonekill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulBonekill_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulBonestrongTypeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulBonestrongTypeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulBonestrong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulBonestrong_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulBonestrong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulBonestrong_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulGuwen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulGuwen_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulGuwen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulGuwen_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulGuwentype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulGuwentype_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulGuwentype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulGuwentype_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulGuwentypesuitAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulGuwentypesuitAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulGuwentypesuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulGuwentypesuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulGuwentypesuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulGuwentypesuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulGuwenskillSkillDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulGuwenskillSkillDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulGuwenskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulGuwenskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulGuwenskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulGuwenskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulGuwensuitAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulGuwensuitAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulGuwensuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulGuwensuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulGuwensuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulGuwensuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulAffixesAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulAffixesAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulAffixes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulAffixes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulAffixes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulAffixes_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulAffixesfumo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulAffixesfumo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulAffixesfumo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulAffixesfumo_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulAffixessuitSkillDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulAffixessuitSkillDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulAffixessuitAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulAffixessuitAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulAffixessuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulAffixessuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulAffixessuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulAffixessuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_SoulGuwenattr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_SoulGuwenattr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_SoulGuwenattr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_SoulGuwenattr_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fSoul_2eproto() {
  protobuf_AddDesc_E_5fSoul_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Soul.proto");
  GOOGLE_CHECK(file != NULL);
  E_SoulOpen_descriptor_ = file->message_type(0);
  static const int E_SoulOpen_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulOpen, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulOpen, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulOpen, m_box_),
  };
  E_SoulOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulOpen_descriptor_,
      E_SoulOpen::default_instance_,
      E_SoulOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulOpen));
  Sheet_SoulOpen_descriptor_ = file->message_type(1);
  static const int Sheet_SoulOpen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulOpen, e_soulopen_list_),
  };
  Sheet_SoulOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulOpen_descriptor_,
      Sheet_SoulOpen::default_instance_,
      Sheet_SoulOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulOpen));
  E_SoulSoul_descriptor_ = file->message_type(2);
  static const int E_SoulSoul_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoul, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoul, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoul, m_lvitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoul, m_advanceitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoul, m_sacrificeskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoul, m_skilllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoul, m_monsterid_),
  };
  E_SoulSoul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulSoul_descriptor_,
      E_SoulSoul::default_instance_,
      E_SoulSoul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulSoul));
  Sheet_SoulSoul_descriptor_ = file->message_type(3);
  static const int Sheet_SoulSoul_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulSoul, e_soulsoul_list_),
  };
  Sheet_SoulSoul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulSoul_descriptor_,
      Sheet_SoulSoul::default_instance_,
      Sheet_SoulSoul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulSoul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulSoul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulSoul));
  E_Soul3dmodel_descriptor_ = file->message_type(4);
  static const int E_Soul3dmodel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Soul3dmodel, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Soul3dmodel, m_position_),
  };
  E_Soul3dmodel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_Soul3dmodel_descriptor_,
      E_Soul3dmodel::default_instance_,
      E_Soul3dmodel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Soul3dmodel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Soul3dmodel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_Soul3dmodel));
  Sheet_Soul3dmodel_descriptor_ = file->message_type(5);
  static const int Sheet_Soul3dmodel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Soul3dmodel, e_soul3dmodel_list_),
  };
  Sheet_Soul3dmodel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_Soul3dmodel_descriptor_,
      Sheet_Soul3dmodel::default_instance_,
      Sheet_Soul3dmodel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Soul3dmodel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Soul3dmodel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_Soul3dmodel));
  E_SoulSoulbasicAttributeDesc_descriptor_ = file->message_type(6);
  static const int E_SoulSoulbasicAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoulbasicAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoulbasicAttributeDesc, m_type_),
  };
  E_SoulSoulbasicAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulSoulbasicAttributeDesc_descriptor_,
      E_SoulSoulbasicAttributeDesc::default_instance_,
      E_SoulSoulbasicAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoulbasicAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoulbasicAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulSoulbasicAttributeDesc));
  E_SoulSoulbasic_descriptor_ = file->message_type(7);
  static const int E_SoulSoulbasic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoulbasic, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoulbasic, m_soulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoulbasic, m_soullv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoulbasic, m_soulexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoulbasic, m_attribute_),
  };
  E_SoulSoulbasic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulSoulbasic_descriptor_,
      E_SoulSoulbasic::default_instance_,
      E_SoulSoulbasic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoulbasic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSoulbasic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulSoulbasic));
  Sheet_SoulSoulbasic_descriptor_ = file->message_type(8);
  static const int Sheet_SoulSoulbasic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulSoulbasic, e_soulsoulbasic_list_),
  };
  Sheet_SoulSoulbasic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulSoulbasic_descriptor_,
      Sheet_SoulSoulbasic::default_instance_,
      Sheet_SoulSoulbasic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulSoulbasic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulSoulbasic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulSoulbasic));
  E_SoulSouladvanceAttributeDesc_descriptor_ = file->message_type(9);
  static const int E_SoulSouladvanceAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSouladvanceAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSouladvanceAttributeDesc, m_type_),
  };
  E_SoulSouladvanceAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulSouladvanceAttributeDesc_descriptor_,
      E_SoulSouladvanceAttributeDesc::default_instance_,
      E_SoulSouladvanceAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSouladvanceAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSouladvanceAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulSouladvanceAttributeDesc));
  E_SoulSouladvance_descriptor_ = file->message_type(10);
  static const int E_SoulSouladvance_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSouladvance, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSouladvance, m_soulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSouladvance, m_advancelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSouladvance, m_advancenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSouladvance, m_attribute_),
  };
  E_SoulSouladvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulSouladvance_descriptor_,
      E_SoulSouladvance::default_instance_,
      E_SoulSouladvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSouladvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSouladvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulSouladvance));
  Sheet_SoulSouladvance_descriptor_ = file->message_type(11);
  static const int Sheet_SoulSouladvance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulSouladvance, e_soulsouladvance_list_),
  };
  Sheet_SoulSouladvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulSouladvance_descriptor_,
      Sheet_SoulSouladvance::default_instance_,
      Sheet_SoulSouladvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulSouladvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulSouladvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulSouladvance));
  E_SoulBless_descriptor_ = file->message_type(12);
  static const int E_SoulBless_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBless, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBless, m_basic_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBless, m_need_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBless, m_open_lv_),
  };
  E_SoulBless_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulBless_descriptor_,
      E_SoulBless::default_instance_,
      E_SoulBless_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBless, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBless, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulBless));
  Sheet_SoulBless_descriptor_ = file->message_type(13);
  static const int Sheet_SoulBless_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulBless, e_soulbless_list_),
  };
  Sheet_SoulBless_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulBless_descriptor_,
      Sheet_SoulBless::default_instance_,
      Sheet_SoulBless_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulBless, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulBless, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulBless));
  E_SoulPrivilegeAttributeDesc_descriptor_ = file->message_type(14);
  static const int E_SoulPrivilegeAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulPrivilegeAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulPrivilegeAttributeDesc, m_type_),
  };
  E_SoulPrivilegeAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulPrivilegeAttributeDesc_descriptor_,
      E_SoulPrivilegeAttributeDesc::default_instance_,
      E_SoulPrivilegeAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulPrivilegeAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulPrivilegeAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulPrivilegeAttributeDesc));
  E_SoulPrivilege_descriptor_ = file->message_type(15);
  static const int E_SoulPrivilege_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulPrivilege, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulPrivilege, m_activate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulPrivilege, m_poolup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulPrivilege, m_huoyuedu_to_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulPrivilege, m_meditation_to_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulPrivilege, m_attribute_),
  };
  E_SoulPrivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulPrivilege_descriptor_,
      E_SoulPrivilege::default_instance_,
      E_SoulPrivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulPrivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulPrivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulPrivilege));
  Sheet_SoulPrivilege_descriptor_ = file->message_type(16);
  static const int Sheet_SoulPrivilege_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulPrivilege, e_soulprivilege_list_),
  };
  Sheet_SoulPrivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulPrivilege_descriptor_,
      Sheet_SoulPrivilege::default_instance_,
      Sheet_SoulPrivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulPrivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulPrivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulPrivilege));
  E_SoulCrystal_descriptor_ = file->message_type(17);
  static const int E_SoulCrystal_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, m_equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, m_skilltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, m_makeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, m_first_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, m_attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, m_intensify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, m_dismantletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, m_dismantlenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, m_other_skillid_),
  };
  E_SoulCrystal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulCrystal_descriptor_,
      E_SoulCrystal::default_instance_,
      E_SoulCrystal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulCrystal));
  Sheet_SoulCrystal_descriptor_ = file->message_type(18);
  static const int Sheet_SoulCrystal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulCrystal, e_soulcrystal_list_),
  };
  Sheet_SoulCrystal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulCrystal_descriptor_,
      Sheet_SoulCrystal::default_instance_,
      Sheet_SoulCrystal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulCrystal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulCrystal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulCrystal));
  E_SoulCrystallv_descriptor_ = file->message_type(19);
  static const int E_SoulCrystallv_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystallv, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystallv, m_wraithsitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystallv, m_wraithsmun_),
  };
  E_SoulCrystallv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulCrystallv_descriptor_,
      E_SoulCrystallv::default_instance_,
      E_SoulCrystallv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystallv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystallv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulCrystallv));
  Sheet_SoulCrystallv_descriptor_ = file->message_type(20);
  static const int Sheet_SoulCrystallv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulCrystallv, e_soulcrystallv_list_),
  };
  Sheet_SoulCrystallv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulCrystallv_descriptor_,
      Sheet_SoulCrystallv::default_instance_,
      Sheet_SoulCrystallv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulCrystallv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulCrystallv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulCrystallv));
  E_SoulCrystaltopAttributeDesc_descriptor_ = file->message_type(21);
  static const int E_SoulCrystaltopAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystaltopAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystaltopAttributeDesc, m_type_),
  };
  E_SoulCrystaltopAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulCrystaltopAttributeDesc_descriptor_,
      E_SoulCrystaltopAttributeDesc::default_instance_,
      E_SoulCrystaltopAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystaltopAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystaltopAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulCrystaltopAttributeDesc));
  E_SoulCrystaltop_descriptor_ = file->message_type(22);
  static const int E_SoulCrystaltop_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystaltop, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystaltop, m_intensify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystaltop, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystaltop, m_toplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystaltop, m_wraithsitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystaltop, m_wraithsmun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystaltop, m_attribute_),
  };
  E_SoulCrystaltop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulCrystaltop_descriptor_,
      E_SoulCrystaltop::default_instance_,
      E_SoulCrystaltop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystaltop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystaltop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulCrystaltop));
  Sheet_SoulCrystaltop_descriptor_ = file->message_type(23);
  static const int Sheet_SoulCrystaltop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulCrystaltop, e_soulcrystaltop_list_),
  };
  Sheet_SoulCrystaltop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulCrystaltop_descriptor_,
      Sheet_SoulCrystaltop::default_instance_,
      Sheet_SoulCrystaltop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulCrystaltop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulCrystaltop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulCrystaltop));
  E_SoulCrystalhole_descriptor_ = file->message_type(24);
  static const int E_SoulCrystalhole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystalhole, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystalhole, m_unlock_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystalhole, m_unlock_param_),
  };
  E_SoulCrystalhole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulCrystalhole_descriptor_,
      E_SoulCrystalhole::default_instance_,
      E_SoulCrystalhole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystalhole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulCrystalhole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulCrystalhole));
  Sheet_SoulCrystalhole_descriptor_ = file->message_type(25);
  static const int Sheet_SoulCrystalhole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulCrystalhole, e_soulcrystalhole_list_),
  };
  Sheet_SoulCrystalhole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulCrystalhole_descriptor_,
      Sheet_SoulCrystalhole::default_instance_,
      Sheet_SoulCrystalhole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulCrystalhole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulCrystalhole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulCrystalhole));
  E_SoulFusionFusionDesc_descriptor_ = file->message_type(26);
  static const int E_SoulFusionFusionDesc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusionFusionDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusionFusionDesc, m_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusionFusionDesc, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusionFusionDesc, m_quality_),
  };
  E_SoulFusionFusionDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulFusionFusionDesc_descriptor_,
      E_SoulFusionFusionDesc::default_instance_,
      E_SoulFusionFusionDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusionFusionDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusionFusionDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulFusionFusionDesc));
  E_SoulFusion_descriptor_ = file->message_type(27);
  static const int E_SoulFusion_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusion, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusion, m_fusiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusion, m_makeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusion, m_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusion, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusion, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusion, m_qualityget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusion, m_starget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusion, m_fusion_),
  };
  E_SoulFusion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulFusion_descriptor_,
      E_SoulFusion::default_instance_,
      E_SoulFusion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulFusion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulFusion));
  Sheet_SoulFusion_descriptor_ = file->message_type(28);
  static const int Sheet_SoulFusion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulFusion, e_soulfusion_list_),
  };
  Sheet_SoulFusion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulFusion_descriptor_,
      Sheet_SoulFusion::default_instance_,
      Sheet_SoulFusion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulFusion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulFusion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulFusion));
  E_SoulAttrAttDesc_descriptor_ = file->message_type(29);
  static const int E_SoulAttrAttDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttrAttDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttrAttDesc, m_type_),
  };
  E_SoulAttrAttDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulAttrAttDesc_descriptor_,
      E_SoulAttrAttDesc::default_instance_,
      E_SoulAttrAttDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttrAttDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttrAttDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulAttrAttDesc));
  E_SoulAttrStarattDesc_descriptor_ = file->message_type(30);
  static const int E_SoulAttrStarattDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttrStarattDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttrStarattDesc, m_type_),
  };
  E_SoulAttrStarattDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulAttrStarattDesc_descriptor_,
      E_SoulAttrStarattDesc::default_instance_,
      E_SoulAttrStarattDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttrStarattDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttrStarattDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulAttrStarattDesc));
  E_SoulAttr_descriptor_ = file->message_type(31);
  static const int E_SoulAttr_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttr, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttr, m_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttr, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttr, m_att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttr, m_staratt_),
  };
  E_SoulAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulAttr_descriptor_,
      E_SoulAttr::default_instance_,
      E_SoulAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulAttr));
  Sheet_SoulAttr_descriptor_ = file->message_type(32);
  static const int Sheet_SoulAttr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulAttr, e_soulattr_list_),
  };
  Sheet_SoulAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulAttr_descriptor_,
      Sheet_SoulAttr::default_instance_,
      Sheet_SoulAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulAttr));
  E_SoulSkill_descriptor_ = file->message_type(33);
  static const int E_SoulSkill_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSkill, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSkill, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSkill, m_fackskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSkill, m_skill_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSkill, m_need_quailty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSkill, m_need_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSkill, m_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSkill, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSkill, m_skill_type_),
  };
  E_SoulSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulSkill_descriptor_,
      E_SoulSkill::default_instance_,
      E_SoulSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulSkill));
  Sheet_SoulSkill_descriptor_ = file->message_type(34);
  static const int Sheet_SoulSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulSkill, e_soulskill_list_),
  };
  Sheet_SoulSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulSkill_descriptor_,
      Sheet_SoulSkill::default_instance_,
      Sheet_SoulSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulSkill));
  E_SoulBone_descriptor_ = file->message_type(35);
  static const int E_SoulBone_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBone, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBone, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBone, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBone, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBone, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBone, m_awakeningtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBone, m_awakeningnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBone, m_modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBone, m_makeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBone, m_first_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBone, m_attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBone, m_other_skillid_),
  };
  E_SoulBone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulBone_descriptor_,
      E_SoulBone::default_instance_,
      E_SoulBone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulBone));
  Sheet_SoulBone_descriptor_ = file->message_type(36);
  static const int Sheet_SoulBone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulBone, e_soulbone_list_),
  };
  Sheet_SoulBone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulBone_descriptor_,
      Sheet_SoulBone::default_instance_,
      Sheet_SoulBone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulBone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulBone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulBone));
  E_SoulBonekill_descriptor_ = file->message_type(37);
  static const int E_SoulBonekill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBonekill, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBonekill, m_killboss_),
  };
  E_SoulBonekill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulBonekill_descriptor_,
      E_SoulBonekill::default_instance_,
      E_SoulBonekill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBonekill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBonekill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulBonekill));
  Sheet_SoulBonekill_descriptor_ = file->message_type(38);
  static const int Sheet_SoulBonekill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulBonekill, e_soulbonekill_list_),
  };
  Sheet_SoulBonekill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulBonekill_descriptor_,
      Sheet_SoulBonekill::default_instance_,
      Sheet_SoulBonekill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulBonekill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulBonekill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulBonekill));
  E_SoulBonestrongTypeDesc_descriptor_ = file->message_type(39);
  static const int E_SoulBonestrongTypeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBonestrongTypeDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBonestrongTypeDesc, m_id_),
  };
  E_SoulBonestrongTypeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulBonestrongTypeDesc_descriptor_,
      E_SoulBonestrongTypeDesc::default_instance_,
      E_SoulBonestrongTypeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBonestrongTypeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBonestrongTypeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulBonestrongTypeDesc));
  E_SoulBonestrong_descriptor_ = file->message_type(40);
  static const int E_SoulBonestrong_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBonestrong, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBonestrong, m_type_),
  };
  E_SoulBonestrong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulBonestrong_descriptor_,
      E_SoulBonestrong::default_instance_,
      E_SoulBonestrong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBonestrong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulBonestrong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulBonestrong));
  Sheet_SoulBonestrong_descriptor_ = file->message_type(41);
  static const int Sheet_SoulBonestrong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulBonestrong, e_soulbonestrong_list_),
  };
  Sheet_SoulBonestrong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulBonestrong_descriptor_,
      Sheet_SoulBonestrong::default_instance_,
      Sheet_SoulBonestrong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulBonestrong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulBonestrong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulBonestrong));
  E_SoulGuwen_descriptor_ = file->message_type(42);
  static const int E_SoulGuwen_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwen, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwen, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwen, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwen, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwen, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwen, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwen, m_makeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwen, m_attrid_),
  };
  E_SoulGuwen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulGuwen_descriptor_,
      E_SoulGuwen::default_instance_,
      E_SoulGuwen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulGuwen));
  Sheet_SoulGuwen_descriptor_ = file->message_type(43);
  static const int Sheet_SoulGuwen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwen, e_soulguwen_list_),
  };
  Sheet_SoulGuwen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulGuwen_descriptor_,
      Sheet_SoulGuwen::default_instance_,
      Sheet_SoulGuwen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulGuwen));
  E_SoulGuwentype_descriptor_ = file->message_type(44);
  static const int E_SoulGuwentype_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentype, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentype, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentype, m_quality_),
  };
  E_SoulGuwentype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulGuwentype_descriptor_,
      E_SoulGuwentype::default_instance_,
      E_SoulGuwentype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulGuwentype));
  Sheet_SoulGuwentype_descriptor_ = file->message_type(45);
  static const int Sheet_SoulGuwentype_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwentype, e_soulguwentype_list_),
  };
  Sheet_SoulGuwentype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulGuwentype_descriptor_,
      Sheet_SoulGuwentype::default_instance_,
      Sheet_SoulGuwentype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwentype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwentype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulGuwentype));
  E_SoulGuwentypesuitAttributeDesc_descriptor_ = file->message_type(46);
  static const int E_SoulGuwentypesuitAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentypesuitAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentypesuitAttributeDesc, m_type_),
  };
  E_SoulGuwentypesuitAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulGuwentypesuitAttributeDesc_descriptor_,
      E_SoulGuwentypesuitAttributeDesc::default_instance_,
      E_SoulGuwentypesuitAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentypesuitAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentypesuitAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulGuwentypesuitAttributeDesc));
  E_SoulGuwentypesuit_descriptor_ = file->message_type(47);
  static const int E_SoulGuwentypesuit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentypesuit, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentypesuit, m_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentypesuit, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentypesuit, m_attribute_),
  };
  E_SoulGuwentypesuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulGuwentypesuit_descriptor_,
      E_SoulGuwentypesuit::default_instance_,
      E_SoulGuwentypesuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentypesuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwentypesuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulGuwentypesuit));
  Sheet_SoulGuwentypesuit_descriptor_ = file->message_type(48);
  static const int Sheet_SoulGuwentypesuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwentypesuit, e_soulguwentypesuit_list_),
  };
  Sheet_SoulGuwentypesuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulGuwentypesuit_descriptor_,
      Sheet_SoulGuwentypesuit::default_instance_,
      Sheet_SoulGuwentypesuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwentypesuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwentypesuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulGuwentypesuit));
  E_SoulGuwenskillSkillDesc_descriptor_ = file->message_type(49);
  static const int E_SoulGuwenskillSkillDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenskillSkillDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenskillSkillDesc, m_level_),
  };
  E_SoulGuwenskillSkillDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulGuwenskillSkillDesc_descriptor_,
      E_SoulGuwenskillSkillDesc::default_instance_,
      E_SoulGuwenskillSkillDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenskillSkillDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenskillSkillDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulGuwenskillSkillDesc));
  E_SoulGuwenskill_descriptor_ = file->message_type(50);
  static const int E_SoulGuwenskill_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenskill, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenskill, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenskill, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenskill, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenskill, m_skill_),
  };
  E_SoulGuwenskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulGuwenskill_descriptor_,
      E_SoulGuwenskill::default_instance_,
      E_SoulGuwenskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulGuwenskill));
  Sheet_SoulGuwenskill_descriptor_ = file->message_type(51);
  static const int Sheet_SoulGuwenskill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwenskill, e_soulguwenskill_list_),
  };
  Sheet_SoulGuwenskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulGuwenskill_descriptor_,
      Sheet_SoulGuwenskill::default_instance_,
      Sheet_SoulGuwenskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwenskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwenskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulGuwenskill));
  E_SoulGuwensuitAttributeDesc_descriptor_ = file->message_type(52);
  static const int E_SoulGuwensuitAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwensuitAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwensuitAttributeDesc, m_type_),
  };
  E_SoulGuwensuitAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulGuwensuitAttributeDesc_descriptor_,
      E_SoulGuwensuitAttributeDesc::default_instance_,
      E_SoulGuwensuitAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwensuitAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwensuitAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulGuwensuitAttributeDesc));
  E_SoulGuwensuit_descriptor_ = file->message_type(53);
  static const int E_SoulGuwensuit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwensuit, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwensuit, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwensuit, m_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwensuit, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwensuit, m_attribute_),
  };
  E_SoulGuwensuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulGuwensuit_descriptor_,
      E_SoulGuwensuit::default_instance_,
      E_SoulGuwensuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwensuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwensuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulGuwensuit));
  Sheet_SoulGuwensuit_descriptor_ = file->message_type(54);
  static const int Sheet_SoulGuwensuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwensuit, e_soulguwensuit_list_),
  };
  Sheet_SoulGuwensuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulGuwensuit_descriptor_,
      Sheet_SoulGuwensuit::default_instance_,
      Sheet_SoulGuwensuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwensuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwensuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulGuwensuit));
  E_SoulAffixesAttributeDesc_descriptor_ = file->message_type(55);
  static const int E_SoulAffixesAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixesAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixesAttributeDesc, m_type_),
  };
  E_SoulAffixesAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulAffixesAttributeDesc_descriptor_,
      E_SoulAffixesAttributeDesc::default_instance_,
      E_SoulAffixesAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixesAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixesAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulAffixesAttributeDesc));
  E_SoulAffixes_descriptor_ = file->message_type(56);
  static const int E_SoulAffixes_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixes, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixes, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixes, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixes, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixes, m_probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixes, m_attribute_),
  };
  E_SoulAffixes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulAffixes_descriptor_,
      E_SoulAffixes::default_instance_,
      E_SoulAffixes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulAffixes));
  Sheet_SoulAffixes_descriptor_ = file->message_type(57);
  static const int Sheet_SoulAffixes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulAffixes, e_soulaffixes_list_),
  };
  Sheet_SoulAffixes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulAffixes_descriptor_,
      Sheet_SoulAffixes::default_instance_,
      Sheet_SoulAffixes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulAffixes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulAffixes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulAffixes));
  E_SoulAffixesfumo_descriptor_ = file->message_type(58);
  static const int E_SoulAffixesfumo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixesfumo, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixesfumo, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixesfumo, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixesfumo, m_lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixesfumo, m_locknum_),
  };
  E_SoulAffixesfumo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulAffixesfumo_descriptor_,
      E_SoulAffixesfumo::default_instance_,
      E_SoulAffixesfumo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixesfumo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixesfumo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulAffixesfumo));
  Sheet_SoulAffixesfumo_descriptor_ = file->message_type(59);
  static const int Sheet_SoulAffixesfumo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulAffixesfumo, e_soulaffixesfumo_list_),
  };
  Sheet_SoulAffixesfumo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulAffixesfumo_descriptor_,
      Sheet_SoulAffixesfumo::default_instance_,
      Sheet_SoulAffixesfumo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulAffixesfumo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulAffixesfumo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulAffixesfumo));
  E_SoulAffixessuitSkillDesc_descriptor_ = file->message_type(60);
  static const int E_SoulAffixessuitSkillDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuitSkillDesc, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuitSkillDesc, m_id_),
  };
  E_SoulAffixessuitSkillDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulAffixessuitSkillDesc_descriptor_,
      E_SoulAffixessuitSkillDesc::default_instance_,
      E_SoulAffixessuitSkillDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuitSkillDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuitSkillDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulAffixessuitSkillDesc));
  E_SoulAffixessuitAttributeDesc_descriptor_ = file->message_type(61);
  static const int E_SoulAffixessuitAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuitAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuitAttributeDesc, m_type_),
  };
  E_SoulAffixessuitAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulAffixessuitAttributeDesc_descriptor_,
      E_SoulAffixessuitAttributeDesc::default_instance_,
      E_SoulAffixessuitAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuitAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuitAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulAffixessuitAttributeDesc));
  E_SoulAffixessuit_descriptor_ = file->message_type(62);
  static const int E_SoulAffixessuit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuit, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuit, m_affixesid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuit, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuit, m_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuit, m_attribute_),
  };
  E_SoulAffixessuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulAffixessuit_descriptor_,
      E_SoulAffixessuit::default_instance_,
      E_SoulAffixessuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulAffixessuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulAffixessuit));
  Sheet_SoulAffixessuit_descriptor_ = file->message_type(63);
  static const int Sheet_SoulAffixessuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulAffixessuit, e_soulaffixessuit_list_),
  };
  Sheet_SoulAffixessuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulAffixessuit_descriptor_,
      Sheet_SoulAffixessuit::default_instance_,
      Sheet_SoulAffixessuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulAffixessuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulAffixessuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulAffixessuit));
  E_SoulGuwenattr_descriptor_ = file->message_type(64);
  static const int E_SoulGuwenattr_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenattr, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenattr, m_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenattr, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenattr, m_att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenattr, m_num_),
  };
  E_SoulGuwenattr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_SoulGuwenattr_descriptor_,
      E_SoulGuwenattr::default_instance_,
      E_SoulGuwenattr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenattr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_SoulGuwenattr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_SoulGuwenattr));
  Sheet_SoulGuwenattr_descriptor_ = file->message_type(65);
  static const int Sheet_SoulGuwenattr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwenattr, e_soulguwenattr_list_),
  };
  Sheet_SoulGuwenattr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_SoulGuwenattr_descriptor_,
      Sheet_SoulGuwenattr::default_instance_,
      Sheet_SoulGuwenattr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwenattr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_SoulGuwenattr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_SoulGuwenattr));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fSoul_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulOpen_descriptor_, &E_SoulOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulOpen_descriptor_, &Sheet_SoulOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulSoul_descriptor_, &E_SoulSoul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulSoul_descriptor_, &Sheet_SoulSoul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_Soul3dmodel_descriptor_, &E_Soul3dmodel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_Soul3dmodel_descriptor_, &Sheet_Soul3dmodel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulSoulbasicAttributeDesc_descriptor_, &E_SoulSoulbasicAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulSoulbasic_descriptor_, &E_SoulSoulbasic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulSoulbasic_descriptor_, &Sheet_SoulSoulbasic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulSouladvanceAttributeDesc_descriptor_, &E_SoulSouladvanceAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulSouladvance_descriptor_, &E_SoulSouladvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulSouladvance_descriptor_, &Sheet_SoulSouladvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulBless_descriptor_, &E_SoulBless::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulBless_descriptor_, &Sheet_SoulBless::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulPrivilegeAttributeDesc_descriptor_, &E_SoulPrivilegeAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulPrivilege_descriptor_, &E_SoulPrivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulPrivilege_descriptor_, &Sheet_SoulPrivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulCrystal_descriptor_, &E_SoulCrystal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulCrystal_descriptor_, &Sheet_SoulCrystal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulCrystallv_descriptor_, &E_SoulCrystallv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulCrystallv_descriptor_, &Sheet_SoulCrystallv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulCrystaltopAttributeDesc_descriptor_, &E_SoulCrystaltopAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulCrystaltop_descriptor_, &E_SoulCrystaltop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulCrystaltop_descriptor_, &Sheet_SoulCrystaltop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulCrystalhole_descriptor_, &E_SoulCrystalhole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulCrystalhole_descriptor_, &Sheet_SoulCrystalhole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulFusionFusionDesc_descriptor_, &E_SoulFusionFusionDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulFusion_descriptor_, &E_SoulFusion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulFusion_descriptor_, &Sheet_SoulFusion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulAttrAttDesc_descriptor_, &E_SoulAttrAttDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulAttrStarattDesc_descriptor_, &E_SoulAttrStarattDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulAttr_descriptor_, &E_SoulAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulAttr_descriptor_, &Sheet_SoulAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulSkill_descriptor_, &E_SoulSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulSkill_descriptor_, &Sheet_SoulSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulBone_descriptor_, &E_SoulBone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulBone_descriptor_, &Sheet_SoulBone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulBonekill_descriptor_, &E_SoulBonekill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulBonekill_descriptor_, &Sheet_SoulBonekill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulBonestrongTypeDesc_descriptor_, &E_SoulBonestrongTypeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulBonestrong_descriptor_, &E_SoulBonestrong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulBonestrong_descriptor_, &Sheet_SoulBonestrong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulGuwen_descriptor_, &E_SoulGuwen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulGuwen_descriptor_, &Sheet_SoulGuwen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulGuwentype_descriptor_, &E_SoulGuwentype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulGuwentype_descriptor_, &Sheet_SoulGuwentype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulGuwentypesuitAttributeDesc_descriptor_, &E_SoulGuwentypesuitAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulGuwentypesuit_descriptor_, &E_SoulGuwentypesuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulGuwentypesuit_descriptor_, &Sheet_SoulGuwentypesuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulGuwenskillSkillDesc_descriptor_, &E_SoulGuwenskillSkillDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulGuwenskill_descriptor_, &E_SoulGuwenskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulGuwenskill_descriptor_, &Sheet_SoulGuwenskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulGuwensuitAttributeDesc_descriptor_, &E_SoulGuwensuitAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulGuwensuit_descriptor_, &E_SoulGuwensuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulGuwensuit_descriptor_, &Sheet_SoulGuwensuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulAffixesAttributeDesc_descriptor_, &E_SoulAffixesAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulAffixes_descriptor_, &E_SoulAffixes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulAffixes_descriptor_, &Sheet_SoulAffixes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulAffixesfumo_descriptor_, &E_SoulAffixesfumo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulAffixesfumo_descriptor_, &Sheet_SoulAffixesfumo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulAffixessuitSkillDesc_descriptor_, &E_SoulAffixessuitSkillDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulAffixessuitAttributeDesc_descriptor_, &E_SoulAffixessuitAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulAffixessuit_descriptor_, &E_SoulAffixessuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulAffixessuit_descriptor_, &Sheet_SoulAffixessuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_SoulGuwenattr_descriptor_, &E_SoulGuwenattr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_SoulGuwenattr_descriptor_, &Sheet_SoulGuwenattr::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fSoul_2eproto() {
  delete E_SoulOpen::default_instance_;
  delete E_SoulOpen_reflection_;
  delete Sheet_SoulOpen::default_instance_;
  delete Sheet_SoulOpen_reflection_;
  delete E_SoulSoul::default_instance_;
  delete E_SoulSoul_reflection_;
  delete Sheet_SoulSoul::default_instance_;
  delete Sheet_SoulSoul_reflection_;
  delete E_Soul3dmodel::default_instance_;
  delete E_Soul3dmodel_reflection_;
  delete Sheet_Soul3dmodel::default_instance_;
  delete Sheet_Soul3dmodel_reflection_;
  delete E_SoulSoulbasicAttributeDesc::default_instance_;
  delete E_SoulSoulbasicAttributeDesc_reflection_;
  delete E_SoulSoulbasic::default_instance_;
  delete E_SoulSoulbasic_reflection_;
  delete Sheet_SoulSoulbasic::default_instance_;
  delete Sheet_SoulSoulbasic_reflection_;
  delete E_SoulSouladvanceAttributeDesc::default_instance_;
  delete E_SoulSouladvanceAttributeDesc_reflection_;
  delete E_SoulSouladvance::default_instance_;
  delete E_SoulSouladvance_reflection_;
  delete Sheet_SoulSouladvance::default_instance_;
  delete Sheet_SoulSouladvance_reflection_;
  delete E_SoulBless::default_instance_;
  delete E_SoulBless_reflection_;
  delete Sheet_SoulBless::default_instance_;
  delete Sheet_SoulBless_reflection_;
  delete E_SoulPrivilegeAttributeDesc::default_instance_;
  delete E_SoulPrivilegeAttributeDesc_reflection_;
  delete E_SoulPrivilege::default_instance_;
  delete E_SoulPrivilege_reflection_;
  delete Sheet_SoulPrivilege::default_instance_;
  delete Sheet_SoulPrivilege_reflection_;
  delete E_SoulCrystal::default_instance_;
  delete E_SoulCrystal_reflection_;
  delete Sheet_SoulCrystal::default_instance_;
  delete Sheet_SoulCrystal_reflection_;
  delete E_SoulCrystallv::default_instance_;
  delete E_SoulCrystallv_reflection_;
  delete Sheet_SoulCrystallv::default_instance_;
  delete Sheet_SoulCrystallv_reflection_;
  delete E_SoulCrystaltopAttributeDesc::default_instance_;
  delete E_SoulCrystaltopAttributeDesc_reflection_;
  delete E_SoulCrystaltop::default_instance_;
  delete E_SoulCrystaltop_reflection_;
  delete Sheet_SoulCrystaltop::default_instance_;
  delete Sheet_SoulCrystaltop_reflection_;
  delete E_SoulCrystalhole::default_instance_;
  delete E_SoulCrystalhole_reflection_;
  delete Sheet_SoulCrystalhole::default_instance_;
  delete Sheet_SoulCrystalhole_reflection_;
  delete E_SoulFusionFusionDesc::default_instance_;
  delete E_SoulFusionFusionDesc_reflection_;
  delete E_SoulFusion::default_instance_;
  delete E_SoulFusion_reflection_;
  delete Sheet_SoulFusion::default_instance_;
  delete Sheet_SoulFusion_reflection_;
  delete E_SoulAttrAttDesc::default_instance_;
  delete E_SoulAttrAttDesc_reflection_;
  delete E_SoulAttrStarattDesc::default_instance_;
  delete E_SoulAttrStarattDesc_reflection_;
  delete E_SoulAttr::default_instance_;
  delete E_SoulAttr_reflection_;
  delete Sheet_SoulAttr::default_instance_;
  delete Sheet_SoulAttr_reflection_;
  delete E_SoulSkill::default_instance_;
  delete E_SoulSkill_reflection_;
  delete Sheet_SoulSkill::default_instance_;
  delete Sheet_SoulSkill_reflection_;
  delete E_SoulBone::default_instance_;
  delete E_SoulBone_reflection_;
  delete Sheet_SoulBone::default_instance_;
  delete Sheet_SoulBone_reflection_;
  delete E_SoulBonekill::default_instance_;
  delete E_SoulBonekill_reflection_;
  delete Sheet_SoulBonekill::default_instance_;
  delete Sheet_SoulBonekill_reflection_;
  delete E_SoulBonestrongTypeDesc::default_instance_;
  delete E_SoulBonestrongTypeDesc_reflection_;
  delete E_SoulBonestrong::default_instance_;
  delete E_SoulBonestrong_reflection_;
  delete Sheet_SoulBonestrong::default_instance_;
  delete Sheet_SoulBonestrong_reflection_;
  delete E_SoulGuwen::default_instance_;
  delete E_SoulGuwen_reflection_;
  delete Sheet_SoulGuwen::default_instance_;
  delete Sheet_SoulGuwen_reflection_;
  delete E_SoulGuwentype::default_instance_;
  delete E_SoulGuwentype_reflection_;
  delete Sheet_SoulGuwentype::default_instance_;
  delete Sheet_SoulGuwentype_reflection_;
  delete E_SoulGuwentypesuitAttributeDesc::default_instance_;
  delete E_SoulGuwentypesuitAttributeDesc_reflection_;
  delete E_SoulGuwentypesuit::default_instance_;
  delete E_SoulGuwentypesuit_reflection_;
  delete Sheet_SoulGuwentypesuit::default_instance_;
  delete Sheet_SoulGuwentypesuit_reflection_;
  delete E_SoulGuwenskillSkillDesc::default_instance_;
  delete E_SoulGuwenskillSkillDesc_reflection_;
  delete E_SoulGuwenskill::default_instance_;
  delete E_SoulGuwenskill_reflection_;
  delete Sheet_SoulGuwenskill::default_instance_;
  delete Sheet_SoulGuwenskill_reflection_;
  delete E_SoulGuwensuitAttributeDesc::default_instance_;
  delete E_SoulGuwensuitAttributeDesc_reflection_;
  delete E_SoulGuwensuit::default_instance_;
  delete E_SoulGuwensuit_reflection_;
  delete Sheet_SoulGuwensuit::default_instance_;
  delete Sheet_SoulGuwensuit_reflection_;
  delete E_SoulAffixesAttributeDesc::default_instance_;
  delete E_SoulAffixesAttributeDesc_reflection_;
  delete E_SoulAffixes::default_instance_;
  delete E_SoulAffixes_reflection_;
  delete Sheet_SoulAffixes::default_instance_;
  delete Sheet_SoulAffixes_reflection_;
  delete E_SoulAffixesfumo::default_instance_;
  delete E_SoulAffixesfumo_reflection_;
  delete Sheet_SoulAffixesfumo::default_instance_;
  delete Sheet_SoulAffixesfumo_reflection_;
  delete E_SoulAffixessuitSkillDesc::default_instance_;
  delete E_SoulAffixessuitSkillDesc_reflection_;
  delete E_SoulAffixessuitAttributeDesc::default_instance_;
  delete E_SoulAffixessuitAttributeDesc_reflection_;
  delete E_SoulAffixessuit::default_instance_;
  delete E_SoulAffixessuit_reflection_;
  delete Sheet_SoulAffixessuit::default_instance_;
  delete Sheet_SoulAffixessuit_reflection_;
  delete E_SoulGuwenattr::default_instance_;
  delete E_SoulGuwenattr_reflection_;
  delete Sheet_SoulGuwenattr::default_instance_;
  delete Sheet_SoulGuwenattr_reflection_;
}

void protobuf_AddDesc_E_5fSoul_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014E_Soul.proto\022\010proto_ff\032\025yd_fieldoption"
    "s.proto\"]\n\nE_SoulOpen\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024"
    "\002id\022\036\n\004m_lv\030\002 \001(\005B\020\302\377\024\014\350\247\243\351\224\201\347\255\211\347\272\247\022\031\n\005m"
    "_box\030\003 \001(\005B\n\302\377\024\006\345\245\226\345\212\261\"E\n\016Sheet_SoulOpen"
    "\0223\n\017E_SoulOpen_List\030\001 \003(\0132\024.proto_ff.E_S"
    "oulOpenB\004\210\301\024\010\"\260\002\n\nE_SoulSoul\022\024\n\004m_id\030\001 \001"
    "(\005B\006\302\377\024\002id\022\036\n\006m_name\030\002 \001(\tB\016\302\377\024\006\345\220\215\345\255\227\220\301"
    "\024@\022(\n\010m_lvItem\030\003 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\346\211\200\351\234\200\351\201"
    "\223\345\205\267\022-\n\rm_advanceItem\030\004 \001(\005B\026\302\377\024\022\350\277\233\351\230\266\346"
    "\211\200\351\234\200\351\201\223\345\205\267\022\'\n\020m_sacrificeSkill\030\005 \001(\005B\r\302"
    "\377\024\t\347\211\272\347\211\262\346\212\200\022I\n\tm_SkillLv\030\006 \001(\tB6\302\377\024-\347\211\272"
    "\347\211\262\346\212\200\347\255\211\347\272\247[\347\255\211\347\272\247;\345\215\207\347\272\247\351\234\200\350\246\201\347\232\204\351\230\266\347\272"
    "\247]\220\301\024\200\001\022\037\n\013m_monsterId\030\007 \001(\005B\n\302\377\024\006\346\250\241\345\236\213"
    "\"E\n\016Sheet_SoulSoul\0223\n\017E_SoulSoul_List\030\001 "
    "\003(\0132\024.proto_ff.E_SoulSoulB\004\210\301\024\002\"K\n\rE_Sou"
    "l3dmodel\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022$\n\nm_posi"
    "tion\030\002 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\344\275\215\347\275\256\"N\n\021Sheet_So"
    "ul3dmodel\0229\n\022E_Soul3dmodel_List\030\001 \003(\0132\027."
    "proto_ff.E_Soul3dmodelB\004\210\301\024 \"P\n\034E_SoulSo"
    "ulbasicAttributeDesc\022\030\n\007m_value\030\001 \001(\005B\007\302"
    "\377\024\003\345\200\274\022\026\n\006m_type\030\002 \001(\005B\006\302\377\024\002ID\"\343\001\n\017E_Sou"
    "lSoulbasic\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\036\n\010m_so"
    "ulId\030\002 \001(\005B\014\302\377\024\010\346\210\230\351\255\202ID\022\034\n\010m_soulLv\030\003 \001"
    "(\005B\n\302\377\024\006\347\255\211\347\272\247\022)\n\tm_soulExp\030\004 \001(\005B\026\302\377\024\022\345"
    "\215\207\347\272\247\346\211\200\351\234\200\351\255\202\347\201\265\022Q\n\013m_attribute\030\005 \003(\0132&"
    ".proto_ff.E_SoulSoulbasicAttributeDescB\024"
    "\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\006\"U\n\023Sheet_SoulSoulba"
    "sic\022>\n\024E_SoulSoulbasic_List\030\001 \003(\0132\031.prot"
    "o_ff.E_SoulSoulbasicB\005\210\301\024\200\010\"R\n\036E_SoulSou"
    "ladvanceAttributeDesc\022\030\n\007m_value\030\001 \001(\005B\007"
    "\302\377\024\003\345\200\274\022\026\n\006m_type\030\002 \001(\005B\006\302\377\024\002ID\"\363\001\n\021E_So"
    "ulSouladvance\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\036\n\010m"
    "_soulId\030\002 \001(\005B\014\302\377\024\010\346\210\230\351\255\202ID\022\037\n\013m_advance"
    "Lv\030\003 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\0222\n\014m_advanceNum\030\004 \001"
    "(\005B\034\302\377\024\030\345\215\207\351\230\266\346\211\200\351\234\200\351\201\223\345\205\267\346\225\260\351\207\217\022S\n\013m_at"
    "tribute\030\005 \003(\0132(.proto_ff.E_SoulSouladvan"
    "ceAttributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\006\"[\n"
    "\025Sheet_SoulSouladvance\022B\n\026E_SoulSouladva"
    "nce_List\030\001 \003(\0132\033.proto_ff.E_SoulSouladva"
    "nceB\005\210\301\024\200\004\"\242\001\n\013E_SoulBless\022\024\n\004m_id\030\001 \001(\005"
    "B\006\302\377\024\002id\022+\n\013m_basic_exp\030\002 \001(\005B\026\302\377\024\022\350\201\232\347\201"
    "\265\346\261\240\345\237\272\347\241\200\345\200\274\022\037\n\013m_need_gold\030\003 \001(\005B\n\302\377\024\006"
    "\345\205\203\345\256\235\022/\n\tm_open_lv\030\004 \001(\005B\034\302\377\024\030\346\210\230\351\255\202\347\255\211"
    "\347\272\247\345\274\200\346\224\276\345\215\207\347\272\247\"H\n\017Sheet_SoulBless\0225\n\020E_"
    "SoulBless_List\030\001 \003(\0132\025.proto_ff.E_SoulBl"
    "essB\004\210\301\024\004\"P\n\034E_SoulPrivilegeAttributeDes"
    "c\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002 "
    "\001(\005B\006\302\377\024\002ID\"\255\002\n\017E_SoulPrivilege\022\024\n\004m_id\030"
    "\001 \001(\005B\006\302\377\024\002id\022(\n\nm_activate\030\002 \001(\tB\024\302\377\024\014\346"
    "\277\200\346\264\273\346\235\241\344\273\266\220\301\024@\022(\n\010m_poolUp\030\003 \001(\005B\026\302\377\024\022\346"
    "\277\200\346\264\273\346\217\220\351\253\230\344\270\212\351\231\220\022.\n\021m_huoyuedu_to_exp\030\004"
    " \001(\005B\023\302\377\024\017\346\264\273\350\267\203\345\272\246\345\205\221\346\215\242\022-\n\023m_meditatio"
    "n_to_exp\030\005 \001(\005B\020\302\377\024\014\346\211\223\345\235\220\345\205\221\346\215\242\022Q\n\013m_at"
    "tribute\030\006 \003(\0132&.proto_ff.E_SoulPrivilege"
    "AttributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\004\"T\n\023S"
    "heet_SoulPrivilege\022=\n\024E_SoulPrivilege_Li"
    "st\030\001 \003(\0132\031.proto_ff.E_SoulPrivilegeB\004\210\301\024"
    "\004\"\361\003\n\rE_SoulCrystal\022\037\n\tm_equipId\030\001 \001(\005B\014"
    "\302\377\024\010\350\243\205\345\244\207id\022$\n\006m_name\030\002 \001(\tB\024\302\377\024\014\351\255\202\346\231\266"
    "\345\221\275\345\220\215\220\301\024@\022%\n\013m_skillType\030\003 \001(\005B\020\302\377\024\014\346\212\200"
    "\350\203\275\347\261\273\345\236\213\022 \n\006m_type\030\004 \001(\005B\020\302\377\024\014\351\255\202\346\231\266\347\261\273"
    "\345\236\213\022\035\n\tm_quality\030\005 \001(\005B\n\302\377\024\006\345\223\201\350\264\250\022\032\n\006m_"
    "star\030\006 \001(\005B\n\302\377\024\006\346\230\237\347\272\247\022\036\n\010m_makeid\030\007 \001(\005"
    "B\014\302\377\024\010\346\211\223\351\200\240id\022!\n\rm_first_skill\030\010 \001(\005B\n\302"
    "\377\024\006\344\270\273\345\212\250\022\'\n\010m_attrid\030\t \001(\005B\025\302\377\024\021\351\255\202\346\231\266\345"
    "\261\236\346\200\247\347\273\204id\022%\n\013m_intensify\030\n \001(\005B\020\302\377\024\014\345\274\272"
    "\345\214\226\347\261\273\345\236\213\022)\n\017m_dismantleTime\030\013 \001(\005B\020\302\377\024\014"
    "\345\210\206\350\247\243\350\216\267\345\276\227\022(\n\016m_dismantleNum\030\014 \001(\005B\020\302\377"
    "\024\014\345\210\206\350\247\243\346\225\260\351\207\217\022-\n\017m_other_skillId\030\r \003(\005B"
    "\024\302\377\024\014\346\212\200\350\203\275\344\277\241\346\201\257\210\301\024\003\"O\n\021Sheet_SoulCryst"
    "al\022:\n\022E_SoulCrystal_List\030\001 \003(\0132\027.proto_f"
    "f.E_SoulCrystalB\005\210\301\024\200\001\"|\n\017E_SoulCrystall"
    "v\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\'\n\rm_wraiths"
    "Item\030\002 \001(\005B\020\302\377\024\014\351\201\223\345\205\267\346\266\210\350\200\227\022&\n\014m_wraith"
    "sMun\030\003 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\346\225\260\351\207\217\"U\n\023Sheet_So"
    "ulCrystallv\022>\n\024E_SoulCrystallv_List\030\001 \003("
    "\0132\031.proto_ff.E_SoulCrystallvB\005\210\301\024\200\010\"Q\n\035E"
    "_SoulCrystaltopAttributeDesc\022\030\n\007m_value\030"
    "\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002 \001(\005B\006\302\377\024\002ID\"\261"
    "\002\n\020E_SoulCrystaltop\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002i"
    "d\022%\n\013m_intensify\030\002 \001(\005B\020\302\377\024\014\345\274\272\345\214\226\347\261\273\345\236\213"
    "\022\036\n\004m_lv\030\003 \001(\005B\020\302\377\024\014\345\274\272\345\214\226\347\255\211\347\272\247\022!\n\007m_to"
    "pLv\030\004 \001(\005B\020\302\377\024\014\347\252\201\347\240\264\347\255\211\347\272\247\022\'\n\rm_wraiths"
    "Item\030\005 \001(\005B\020\302\377\024\014\351\201\223\345\205\267\346\266\210\350\200\227\022&\n\014m_wraith"
    "sMun\030\006 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\346\225\260\351\207\217\022L\n\013m_attrib"
    "ute\030\007 \003(\0132\'.proto_ff.E_SoulCrystaltopAtt"
    "ributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\003\"X\n\024Sheet_Soul"
    "Crystaltop\022@\n\025E_SoulCrystaltop_List\030\001 \003("
    "\0132\032.proto_ff.E_SoulCrystaltopB\005\210\301\024\200\010\"\206\001\n"
    "\021E_SoulCrystalhole\022\036\n\004m_id\030\001 \001(\005B\020\302\377\024\014\351\255"
    "\202\346\231\266\345\255\224\344\275\215\022\'\n\rm_unlock_type\030\002 \001(\005B\020\302\377\024\014\350"
    "\247\243\351\224\201\346\235\241\344\273\266\022(\n\016m_unlock_param\030\003 \001(\005B\020\302\377\024"
    "\014\350\247\243\351\224\201\345\217\202\346\225\260\"Z\n\025Sheet_SoulCrystalhole\022A"
    "\n\026E_SoulCrystalhole_List\030\001 \003(\0132\033.proto_f"
    "f.E_SoulCrystalholeB\004\210\301\024\020\"\217\001\n\026E_SoulFusi"
    "onFusionDesc\022\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022"
    "\037\n\013m_condition\030\002 \001(\005B\n\302\377\024\006\346\235\241\344\273\266\022\032\n\006m_st"
    "ar\030\003 \001(\005B\n\302\377\024\006\346\230\237\347\272\247\022\035\n\tm_quality\030\004 \001(\005B"
    "\n\302\377\024\006\345\223\201\350\264\250\"\346\002\n\014E_SoulFusion\022\024\n\004m_id\030\001 \001"
    "(\005B\006\302\377\024\002id\022&\n\014m_fusionType\030\002 \001(\005B\020\302\377\024\014\350\236"
    "\215\345\220\210\347\261\273\345\236\213\022\036\n\010m_makeid\030\003 \001(\005B\014\302\377\024\010\346\211\223\351\200\240"
    "id\022 \n\006m_step\030\004 \001(\005B\020\302\377\024\014\346\211\223\351\200\240\351\230\266\346\256\265\022\035\n\t"
    "m_quality\030\005 \001(\005B\n\302\377\024\006\345\223\201\350\264\250\022\032\n\006m_star\030\006 "
    "\001(\005B\n\302\377\024\006\346\230\237\346\225\260\022)\n\014m_qualityGet\030\007 \001(\005B\023\302"
    "\377\024\017\350\236\215\345\220\210\345\220\216\345\223\201\350\264\250\022&\n\tm_starGet\030\010 \001(\005B\023\302"
    "\377\024\017\350\236\215\345\220\210\345\220\216\346\230\237\347\272\247\022H\n\010m_fusion\030\t \003(\0132 .p"
    "roto_ff.E_SoulFusionFusionDescB\024\302\377\024\014\350\236\215\345"
    "\220\210\346\235\220\346\226\231\210\301\024\003\"L\n\020Sheet_SoulFusion\0228\n\021E_So"
    "ulFusion_List\030\001 \003(\0132\026.proto_ff.E_SoulFus"
    "ionB\005\210\301\024\200\001\"A\n\021E_SoulAttrAttDesc\022\026\n\005m_num"
    "\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\024\n\006m_type\030\002 \001(\005B\004\302\377\024\000\"E\n"
    "\025E_SoulAttrStarattDesc\022\026\n\005m_num\030\001 \001(\005B\007\302"
    "\377\024\003\345\200\274\022\024\n\006m_type\030\002 \001(\005B\004\302\377\024\000\"\352\001\n\nE_SoulA"
    "ttr\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\035\n\006m_attr\030\002 \001("
    "\005B\r\302\377\024\t\345\261\236\346\200\247\347\273\204\022!\n\004m_lv\030\003 \001(\005B\023\302\377\024\017\345\261\236\346"
    "\200\247\347\273\204\347\255\211\347\272\247\022:\n\005m_att\030\004 \003(\0132\033.proto_ff.E_"
    "SoulAttrAttDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\006\022H\n\tm_sta"
    "rAtt\030\005 \003(\0132\037.proto_ff.E_SoulAttrStarattD"
    "escB\024\302\377\024\014\346\230\237\347\272\247\345\261\236\346\200\247\210\301\024\003\"F\n\016Sheet_SoulA"
    "ttr\0224\n\017E_SoulAttr_List\030\001 \003(\0132\024.proto_ff."
    "E_SoulAttrB\005\210\301\024\200\004\"\321\002\n\013E_SoulSkill\022\036\n\004m_i"
    "d\030\001 \001(\005B\020\302\377\024\014\346\212\200\350\203\275\344\277\241\346\201\257\022\035\n\tm_skillId\030\002"
    " \001(\005B\n\302\377\024\006\346\212\200\350\203\275\022(\n\013m_fackSkill\030\003 \001(\005B\023\302"
    "\377\024\017\346\230\257\345\220\246\345\201\207\346\212\200\350\203\275\022-\n\nm_skill_lv\030\004 \001(\005B\031"
    "\302\377\024\025\350\247\243\351\224\201\347\232\204\346\212\200\350\203\275\347\255\211\347\272\247\022\"\n\016m_need_quai"
    "lty\030\005 \001(\005B\n\302\377\024\006\345\223\201\350\264\250\022(\n\013m_need_star\030\006 \001"
    "(\005B\023\302\377\024\017\351\234\200\350\246\201\347\232\204\346\230\237\347\272\247\022\034\n\006m_attr\030\007 \001(\005B"
    "\014\302\377\024\010\345\261\236\346\200\247id\022\026\n\005m_num\030\010 \001(\005B\007\302\377\024\003\345\200\274\022&\n"
    "\014m_skill_type\030\t \001(\005B\020\302\377\024\014\346\212\200\350\203\275\347\261\273\345\236\213\"I\n"
    "\017Sheet_SoulSkill\0226\n\020E_SoulSkill_List\030\001 \003"
    "(\0132\025.proto_ff.E_SoulSkillB\005\210\301\024\200\002\"\264\003\n\nE_S"
    "oulBone\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022$\n\nm_posit"
    "ion\030\002 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\344\275\215\347\275\256\022 \n\006m_type\030\003 "
    "\001(\005B\020\302\377\024\014\351\255\202\351\252\250\347\261\273\345\236\213\022\035\n\tm_quality\030\004 \001(\005"
    "B\n\302\377\024\006\345\223\201\350\264\250\022\032\n\006m_star\030\005 \001(\005B\n\302\377\024\006\346\230\237\347\272\247"
    "\022)\n\017m_awakeningTime\030\006 \001(\005B\020\302\377\024\014\350\247\211\351\206\222\346\266\210"
    "\350\200\227\022(\n\016m_awakeningNum\030\007 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\346"
    "\225\260\351\207\217\022#\n\tm_modelId\030\010 \001(\tB\020\302\377\024\010\346\250\241\345\236\213id\220\301"
    "\024@\022\036\n\010m_makeid\030\t \001(\005B\014\302\377\024\010\346\211\223\351\200\240id\022!\n\rm_"
    "first_skill\030\n \001(\005B\n\302\377\024\006\344\270\273\345\212\250\022!\n\010m_attri"
    "d\030\013 \001(\005B\017\302\377\024\013\345\261\236\346\200\247\347\273\204id\022-\n\017m_other_skil"
    "lId\030\014 \003(\005B\024\302\377\024\014\346\212\200\350\203\275\344\277\241\346\201\257\210\301\024\004\"E\n\016Sheet"
    "_SoulBone\0223\n\017E_SoulBone_List\030\001 \003(\0132\024.pro"
    "to_ff.E_SoulBoneB\004\210\301\024 \"S\n\016E_SoulBonekill"
    "\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\'\n\nm_killBoss"
    "\030\002 \001(\005B\023\302\377\024\017\345\207\273\346\235\200\351\255\224\347\216\213\346\225\260\"R\n\022Sheet_Sou"
    "lBonekill\022<\n\023E_SoulBonekill_List\030\001 \003(\0132\030"
    ".proto_ff.E_SoulBonekillB\005\210\301\024\200\010\"L\n\030E_Sou"
    "lBonestrongTypeDesc\022\032\n\005m_num\030\001 \001(\tB\013\302\377\024\003"
    "\345\200\274\220\301\024@\022\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002ID\"x\n\020E_SoulB"
    "onestrong\022 \n\004m_id\030\001 \001(\005B\022\302\377\024\016\351\255\202\351\252\250\344\275\215\347\275"
    "\256id\022B\n\006m_type\030\002 \003(\0132\".proto_ff.E_SoulBon"
    "estrongTypeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\006\"X\n\024Sheet"
    "_SoulBonestrong\022@\n\025E_SoulBonestrong_List"
    "\030\001 \003(\0132\032.proto_ff.E_SoulBonestrongB\005\210\301\024\200"
    "\010\"\225\002\n\013E_SoulGuwen\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\350\243\205"
    "\345\244\207id\022$\n\006m_name\030\002 \001(\tB\024\302\377\024\014\351\252\250\347\272\271\345\221\275\345\220\215\220"
    "\301\024@\022$\n\nm_position\030\003 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\344\275\215\347\275"
    "\256\022 \n\006m_type\030\004 \001(\005B\020\302\377\024\014\351\252\250\347\272\271\347\261\273\345\236\213\022\035\n\tm"
    "_quality\030\005 \001(\005B\n\302\377\024\006\345\223\201\350\264\250\022\032\n\006m_star\030\006 \001"
    "(\005B\n\302\377\024\006\346\230\237\347\272\247\022\036\n\010m_makeid\030\007 \001(\005B\014\302\377\024\010\346\211"
    "\223\351\200\240id\022!\n\010m_attrid\030\010 \001(\005B\017\302\377\024\013\345\261\236\346\200\247\347\273\204i"
    "d\"H\n\017Sheet_SoulGuwen\0225\n\020E_SoulGuwen_List"
    "\030\001 \003(\0132\025.proto_ff.E_SoulGuwenB\004\210\301\024 \"x\n\017E"
    "_SoulGuwentype\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\347\261\273\345\236\213"
    "id\022\036\n\006m_name\030\002 \001(\tB\016\302\377\024\006\345\220\215\345\255\227\220\301\024@\022)\n\tm_"
    "quality\030\003 \001(\005B\026\302\377\024\022\351\225\266\345\265\214\351\252\250\347\272\271\345\223\201\350\264\250\"T\n"
    "\023Sheet_SoulGuwentype\022=\n\024E_SoulGuwentype_"
    "List\030\001 \003(\0132\031.proto_ff.E_SoulGuwentypeB\004\210"
    "\301\024\004\"T\n E_SoulGuwentypesuitAttributeDesc\022"
    "\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002 \001("
    "\005B\006\302\377\024\002ID\"\275\001\n\023E_SoulGuwentypesuit\022\024\n\004m_i"
    "d\030\001 \001(\005B\006\302\377\024\002id\022\036\n\010m_typeId\030\002 \001(\005B\014\302\377\024\010\347"
    "\261\273\345\236\213id\022\031\n\005m_num\030\003 \001(\005B\n\302\377\024\006\344\273\266\346\225\260\022U\n\013m_"
    "attribute\030\004 \003(\0132*.proto_ff.E_SoulGuwenty"
    "pesuitAttributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024"
    "\t\"`\n\027Sheet_SoulGuwentypesuit\022E\n\030E_SoulGu"
    "wentypesuit_List\030\001 \003(\0132\035.proto_ff.E_Soul"
    "GuwentypesuitB\004\210\301\024\020\"S\n\031E_SoulGuwenskillS"
    "killDesc\022\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\235\241\344\273\266\022\033\n\007m"
    "_level\030\002 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\"\345\001\n\020E_SoulGuwen"
    "skill\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022 \n\006m_type\030\002 "
    "\001(\005B\020\302\377\024\014\346\212\200\350\203\275\347\261\273\345\236\213\022\037\n\tm_skillId\030\003 \001(\005"
    "B\014\302\377\024\010\346\212\200\350\203\275Id\0222\n\tm_quality\030\004 \001(\005B\037\302\377\024\033\350"
    "\247\243\351\224\201\351\234\200\350\246\201\351\252\250\347\272\271\347\232\204\345\223\201\350\264\250\022D\n\007m_skill\030\005 "
    "\003(\0132#.proto_ff.E_SoulGuwenskillSkillDesc"
    "B\016\302\377\024\006\346\212\200\350\203\275\210\301\024\007\"W\n\024Sheet_SoulGuwenskill"
    "\022\?\n\025E_SoulGuwenskill_List\030\001 \003(\0132\032.proto_"
    "ff.E_SoulGuwenskillB\004\210\301\024\010\"P\n\034E_SoulGuwen"
    "suitAttributeDesc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003"
    "\345\200\274\022\026\n\006m_type\030\002 \001(\005B\006\302\377\024\002ID\"\333\001\n\017E_SoulGu"
    "wensuit\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022$\n\nm_posit"
    "ion\030\002 \001(\005B\020\302\377\024\014\351\255\202\351\252\250\351\203\250\344\275\215\022\036\n\010m_typeId\030"
    "\003 \001(\005B\014\302\377\024\010\347\261\273\345\236\213id\022\031\n\005m_num\030\004 \001(\005B\n\302\377\024\006"
    "\344\273\266\346\225\260\022Q\n\013m_attribute\030\005 \003(\0132&.proto_ff.E"
    "_SoulGuwensuitAttributeDescB\024\302\377\024\014\345\237\272\347\241\200\345"
    "\261\236\346\200\247\210\301\024\010\"T\n\023Sheet_SoulGuwensuit\022=\n\024E_So"
    "ulGuwensuit_List\030\001 \003(\0132\031.proto_ff.E_Soul"
    "GuwensuitB\004\210\301\024@\"N\n\032E_SoulAffixesAttribut"
    "eDesc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_typ"
    "e\030\002 \001(\005B\006\302\377\024\002ID\"\210\002\n\rE_SoulAffixes\022\024\n\004m_i"
    "d\030\001 \001(\005B\006\302\377\024\002id\022\036\n\006m_name\030\002 \001(\tB\016\302\377\024\006\345\220\215"
    "\345\255\227\220\301\024@\022(\n\006m_type\030\003 \001(\005B\030\302\377\024\024\347\261\273\345\236\213(1\346\224\273"
    "2\351\230\2623\345\205\250)\022\035\n\tm_quality\030\004 \001(\005B\n\302\377\024\006\345\223\201\350\264\250"
    "\022\'\n\rm_probability\030\005 \001(\005B\020\302\377\024\014\351\231\204\351\255\224\346\246\202\347\216"
    "\207\022O\n\013m_attribute\030\006 \003(\0132$.proto_ff.E_Soul"
    "AffixesAttributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301"
    "\024\006\"N\n\021Sheet_SoulAffixes\0229\n\022E_SoulAffixes"
    "_List\030\001 \003(\0132\027.proto_ff.E_SoulAffixesB\004\210\301"
    "\024 \"\313\001\n\021E_SoulAffixesfumo\022 \n\004m_id\030\001 \001(\005B\022"
    "\302\377\024\016\350\257\215\347\274\200\345\223\201\350\264\250id\022 \n\006m_item\030\002 \001(\005B\020\302\377\024\014"
    "\351\201\223\345\205\267\346\266\210\350\200\227\022%\n\005m_num\030\003 \001(\005B\026\302\377\024\022\346\266\210\350\200\227\351"
    "\201\223\345\205\267\346\225\260\351\207\217\022 \n\006m_lock\030\004 \001(\005B\020\302\377\024\014\345\223\201\350\264\250\344"
    "\277\235\346\212\244\022)\n\tm_lockNum\030\005 \001(\005B\026\302\377\024\022\344\277\235\346\212\244\346\266\210\350"
    "\200\227\346\225\260\351\207\217\"Z\n\025Sheet_SoulAffixesfumo\022A\n\026E_S"
    "oulAffixesfumo_List\030\001 \003(\0132\033.proto_ff.E_S"
    "oulAffixesfumoB\004\210\301\024\010\"O\n\032E_SoulAffixessui"
    "tSkillDesc\022\033\n\007m_level\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022"
    "\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002ID\"R\n\036E_SoulAffixessu"
    "itAttributeDesc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200"
    "\274\022\026\n\006m_type\030\002 \001(\005B\006\302\377\024\002ID\"\200\002\n\021E_SoulAffi"
    "xessuit\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\033\n\013m_affix"
    "esId\030\002 \001(\005B\006\302\377\024\002id\022\031\n\005m_num\030\003 \001(\005B\n\302\377\024\006\344"
    "\273\266\346\225\260\022H\n\007m_skill\030\004 \003(\0132$.proto_ff.E_Soul"
    "AffixessuitSkillDescB\021\302\377\024\t\345\261\236\346\200\247\347\273\204\210\301\024\002\022"
    "S\n\013m_attribute\030\005 \003(\0132(.proto_ff.E_SoulAf"
    "fixessuitAttributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247"
    "\210\301\024\006\"[\n\025Sheet_SoulAffixessuit\022B\n\026E_SoulA"
    "ffixessuit_List\030\001 \003(\0132\033.proto_ff.E_SoulA"
    "ffixessuitB\005\210\301\024\200\001\"\231\001\n\017E_SoulGuwenattr\022\024\n"
    "\004m_id\030\001 \001(\005B\006\302\377\024\002id\022!\n\007m_skill\030\002 \001(\005B\020\302\377"
    "\024\014\346\212\200\350\203\275\347\261\273\345\236\213\022\030\n\004m_lv\030\003 \001(\005B\n\302\377\024\006\347\255\211\347\272\247"
    "\022\033\n\005m_att\030\004 \001(\005B\014\302\377\024\010\345\261\236\346\200\247id\022\026\n\005m_num\030\005"
    " \001(\005B\007\302\377\024\003\345\200\274\"U\n\023Sheet_SoulGuwenattr\022>\n\024"
    "E_SoulGuwenattr_List\030\001 \003(\0132\031.proto_ff.E_"
    "SoulGuwenattrB\005\210\301\024\200\001", 9420);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Soul.proto", &protobuf_RegisterTypes);
  E_SoulOpen::default_instance_ = new E_SoulOpen();
  Sheet_SoulOpen::default_instance_ = new Sheet_SoulOpen();
  E_SoulSoul::default_instance_ = new E_SoulSoul();
  Sheet_SoulSoul::default_instance_ = new Sheet_SoulSoul();
  E_Soul3dmodel::default_instance_ = new E_Soul3dmodel();
  Sheet_Soul3dmodel::default_instance_ = new Sheet_Soul3dmodel();
  E_SoulSoulbasicAttributeDesc::default_instance_ = new E_SoulSoulbasicAttributeDesc();
  E_SoulSoulbasic::default_instance_ = new E_SoulSoulbasic();
  Sheet_SoulSoulbasic::default_instance_ = new Sheet_SoulSoulbasic();
  E_SoulSouladvanceAttributeDesc::default_instance_ = new E_SoulSouladvanceAttributeDesc();
  E_SoulSouladvance::default_instance_ = new E_SoulSouladvance();
  Sheet_SoulSouladvance::default_instance_ = new Sheet_SoulSouladvance();
  E_SoulBless::default_instance_ = new E_SoulBless();
  Sheet_SoulBless::default_instance_ = new Sheet_SoulBless();
  E_SoulPrivilegeAttributeDesc::default_instance_ = new E_SoulPrivilegeAttributeDesc();
  E_SoulPrivilege::default_instance_ = new E_SoulPrivilege();
  Sheet_SoulPrivilege::default_instance_ = new Sheet_SoulPrivilege();
  E_SoulCrystal::default_instance_ = new E_SoulCrystal();
  Sheet_SoulCrystal::default_instance_ = new Sheet_SoulCrystal();
  E_SoulCrystallv::default_instance_ = new E_SoulCrystallv();
  Sheet_SoulCrystallv::default_instance_ = new Sheet_SoulCrystallv();
  E_SoulCrystaltopAttributeDesc::default_instance_ = new E_SoulCrystaltopAttributeDesc();
  E_SoulCrystaltop::default_instance_ = new E_SoulCrystaltop();
  Sheet_SoulCrystaltop::default_instance_ = new Sheet_SoulCrystaltop();
  E_SoulCrystalhole::default_instance_ = new E_SoulCrystalhole();
  Sheet_SoulCrystalhole::default_instance_ = new Sheet_SoulCrystalhole();
  E_SoulFusionFusionDesc::default_instance_ = new E_SoulFusionFusionDesc();
  E_SoulFusion::default_instance_ = new E_SoulFusion();
  Sheet_SoulFusion::default_instance_ = new Sheet_SoulFusion();
  E_SoulAttrAttDesc::default_instance_ = new E_SoulAttrAttDesc();
  E_SoulAttrStarattDesc::default_instance_ = new E_SoulAttrStarattDesc();
  E_SoulAttr::default_instance_ = new E_SoulAttr();
  Sheet_SoulAttr::default_instance_ = new Sheet_SoulAttr();
  E_SoulSkill::default_instance_ = new E_SoulSkill();
  Sheet_SoulSkill::default_instance_ = new Sheet_SoulSkill();
  E_SoulBone::default_instance_ = new E_SoulBone();
  Sheet_SoulBone::default_instance_ = new Sheet_SoulBone();
  E_SoulBonekill::default_instance_ = new E_SoulBonekill();
  Sheet_SoulBonekill::default_instance_ = new Sheet_SoulBonekill();
  E_SoulBonestrongTypeDesc::default_instance_ = new E_SoulBonestrongTypeDesc();
  E_SoulBonestrong::default_instance_ = new E_SoulBonestrong();
  Sheet_SoulBonestrong::default_instance_ = new Sheet_SoulBonestrong();
  E_SoulGuwen::default_instance_ = new E_SoulGuwen();
  Sheet_SoulGuwen::default_instance_ = new Sheet_SoulGuwen();
  E_SoulGuwentype::default_instance_ = new E_SoulGuwentype();
  Sheet_SoulGuwentype::default_instance_ = new Sheet_SoulGuwentype();
  E_SoulGuwentypesuitAttributeDesc::default_instance_ = new E_SoulGuwentypesuitAttributeDesc();
  E_SoulGuwentypesuit::default_instance_ = new E_SoulGuwentypesuit();
  Sheet_SoulGuwentypesuit::default_instance_ = new Sheet_SoulGuwentypesuit();
  E_SoulGuwenskillSkillDesc::default_instance_ = new E_SoulGuwenskillSkillDesc();
  E_SoulGuwenskill::default_instance_ = new E_SoulGuwenskill();
  Sheet_SoulGuwenskill::default_instance_ = new Sheet_SoulGuwenskill();
  E_SoulGuwensuitAttributeDesc::default_instance_ = new E_SoulGuwensuitAttributeDesc();
  E_SoulGuwensuit::default_instance_ = new E_SoulGuwensuit();
  Sheet_SoulGuwensuit::default_instance_ = new Sheet_SoulGuwensuit();
  E_SoulAffixesAttributeDesc::default_instance_ = new E_SoulAffixesAttributeDesc();
  E_SoulAffixes::default_instance_ = new E_SoulAffixes();
  Sheet_SoulAffixes::default_instance_ = new Sheet_SoulAffixes();
  E_SoulAffixesfumo::default_instance_ = new E_SoulAffixesfumo();
  Sheet_SoulAffixesfumo::default_instance_ = new Sheet_SoulAffixesfumo();
  E_SoulAffixessuitSkillDesc::default_instance_ = new E_SoulAffixessuitSkillDesc();
  E_SoulAffixessuitAttributeDesc::default_instance_ = new E_SoulAffixessuitAttributeDesc();
  E_SoulAffixessuit::default_instance_ = new E_SoulAffixessuit();
  Sheet_SoulAffixessuit::default_instance_ = new Sheet_SoulAffixessuit();
  E_SoulGuwenattr::default_instance_ = new E_SoulGuwenattr();
  Sheet_SoulGuwenattr::default_instance_ = new Sheet_SoulGuwenattr();
  E_SoulOpen::default_instance_->InitAsDefaultInstance();
  Sheet_SoulOpen::default_instance_->InitAsDefaultInstance();
  E_SoulSoul::default_instance_->InitAsDefaultInstance();
  Sheet_SoulSoul::default_instance_->InitAsDefaultInstance();
  E_Soul3dmodel::default_instance_->InitAsDefaultInstance();
  Sheet_Soul3dmodel::default_instance_->InitAsDefaultInstance();
  E_SoulSoulbasicAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_SoulSoulbasic::default_instance_->InitAsDefaultInstance();
  Sheet_SoulSoulbasic::default_instance_->InitAsDefaultInstance();
  E_SoulSouladvanceAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_SoulSouladvance::default_instance_->InitAsDefaultInstance();
  Sheet_SoulSouladvance::default_instance_->InitAsDefaultInstance();
  E_SoulBless::default_instance_->InitAsDefaultInstance();
  Sheet_SoulBless::default_instance_->InitAsDefaultInstance();
  E_SoulPrivilegeAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_SoulPrivilege::default_instance_->InitAsDefaultInstance();
  Sheet_SoulPrivilege::default_instance_->InitAsDefaultInstance();
  E_SoulCrystal::default_instance_->InitAsDefaultInstance();
  Sheet_SoulCrystal::default_instance_->InitAsDefaultInstance();
  E_SoulCrystallv::default_instance_->InitAsDefaultInstance();
  Sheet_SoulCrystallv::default_instance_->InitAsDefaultInstance();
  E_SoulCrystaltopAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_SoulCrystaltop::default_instance_->InitAsDefaultInstance();
  Sheet_SoulCrystaltop::default_instance_->InitAsDefaultInstance();
  E_SoulCrystalhole::default_instance_->InitAsDefaultInstance();
  Sheet_SoulCrystalhole::default_instance_->InitAsDefaultInstance();
  E_SoulFusionFusionDesc::default_instance_->InitAsDefaultInstance();
  E_SoulFusion::default_instance_->InitAsDefaultInstance();
  Sheet_SoulFusion::default_instance_->InitAsDefaultInstance();
  E_SoulAttrAttDesc::default_instance_->InitAsDefaultInstance();
  E_SoulAttrStarattDesc::default_instance_->InitAsDefaultInstance();
  E_SoulAttr::default_instance_->InitAsDefaultInstance();
  Sheet_SoulAttr::default_instance_->InitAsDefaultInstance();
  E_SoulSkill::default_instance_->InitAsDefaultInstance();
  Sheet_SoulSkill::default_instance_->InitAsDefaultInstance();
  E_SoulBone::default_instance_->InitAsDefaultInstance();
  Sheet_SoulBone::default_instance_->InitAsDefaultInstance();
  E_SoulBonekill::default_instance_->InitAsDefaultInstance();
  Sheet_SoulBonekill::default_instance_->InitAsDefaultInstance();
  E_SoulBonestrongTypeDesc::default_instance_->InitAsDefaultInstance();
  E_SoulBonestrong::default_instance_->InitAsDefaultInstance();
  Sheet_SoulBonestrong::default_instance_->InitAsDefaultInstance();
  E_SoulGuwen::default_instance_->InitAsDefaultInstance();
  Sheet_SoulGuwen::default_instance_->InitAsDefaultInstance();
  E_SoulGuwentype::default_instance_->InitAsDefaultInstance();
  Sheet_SoulGuwentype::default_instance_->InitAsDefaultInstance();
  E_SoulGuwentypesuitAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_SoulGuwentypesuit::default_instance_->InitAsDefaultInstance();
  Sheet_SoulGuwentypesuit::default_instance_->InitAsDefaultInstance();
  E_SoulGuwenskillSkillDesc::default_instance_->InitAsDefaultInstance();
  E_SoulGuwenskill::default_instance_->InitAsDefaultInstance();
  Sheet_SoulGuwenskill::default_instance_->InitAsDefaultInstance();
  E_SoulGuwensuitAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_SoulGuwensuit::default_instance_->InitAsDefaultInstance();
  Sheet_SoulGuwensuit::default_instance_->InitAsDefaultInstance();
  E_SoulAffixesAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_SoulAffixes::default_instance_->InitAsDefaultInstance();
  Sheet_SoulAffixes::default_instance_->InitAsDefaultInstance();
  E_SoulAffixesfumo::default_instance_->InitAsDefaultInstance();
  Sheet_SoulAffixesfumo::default_instance_->InitAsDefaultInstance();
  E_SoulAffixessuitSkillDesc::default_instance_->InitAsDefaultInstance();
  E_SoulAffixessuitAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_SoulAffixessuit::default_instance_->InitAsDefaultInstance();
  Sheet_SoulAffixessuit::default_instance_->InitAsDefaultInstance();
  E_SoulGuwenattr::default_instance_->InitAsDefaultInstance();
  Sheet_SoulGuwenattr::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fSoul_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fSoul_2eproto {
  StaticDescriptorInitializer_E_5fSoul_2eproto() {
    protobuf_AddDesc_E_5fSoul_2eproto();
  }
} static_descriptor_initializer_E_5fSoul_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_SoulOpen::kMIdFieldNumber;
const int E_SoulOpen::kMLvFieldNumber;
const int E_SoulOpen::kMBoxFieldNumber;
#endif  // !_MSC_VER

E_SoulOpen::E_SoulOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulOpen::InitAsDefaultInstance() {
}

E_SoulOpen::E_SoulOpen(const E_SoulOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulOpen::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_lv_ = 0;
  m_box_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulOpen::~E_SoulOpen() {
  SharedDtor();
}

void E_SoulOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulOpen_descriptor_;
}

const E_SoulOpen& E_SoulOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulOpen* E_SoulOpen::default_instance_ = NULL;

E_SoulOpen* E_SoulOpen::New() const {
  return new E_SoulOpen;
}

void E_SoulOpen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_lv_ = 0;
    m_box_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_box;
        break;
      }

      // optional int32 m_box = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_box_)));
          set_has_m_box();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lv(), output);
  }

  // optional int32 m_box = 3;
  if (has_m_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_box(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lv(), target);
  }

  // optional int32 m_box = 3;
  if (has_m_box()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_box(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_lv = 2;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_box = 3;
    if (has_m_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_box());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulOpen::MergeFrom(const E_SoulOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_box()) {
      set_m_box(from.m_box());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulOpen::CopyFrom(const E_SoulOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulOpen::IsInitialized() const {

  return true;
}

void E_SoulOpen::Swap(E_SoulOpen* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_box_, other->m_box_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulOpen_descriptor_;
  metadata.reflection = E_SoulOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulOpen::kESoulOpenListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulOpen::Sheet_SoulOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulOpen::InitAsDefaultInstance() {
}

Sheet_SoulOpen::Sheet_SoulOpen(const Sheet_SoulOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulOpen::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulOpen::~Sheet_SoulOpen() {
  SharedDtor();
}

void Sheet_SoulOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulOpen_descriptor_;
}

const Sheet_SoulOpen& Sheet_SoulOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulOpen* Sheet_SoulOpen::default_instance_ = NULL;

Sheet_SoulOpen* Sheet_SoulOpen::New() const {
  return new Sheet_SoulOpen;
}

void Sheet_SoulOpen::Clear() {
  e_soulopen_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulOpen E_SoulOpen_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulOpen_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulopen_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulOpen_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulOpen E_SoulOpen_List = 1;
  for (int i = 0; i < this->e_soulopen_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulopen_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulOpen E_SoulOpen_List = 1;
  for (int i = 0; i < this->e_soulopen_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulopen_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulOpen::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulOpen E_SoulOpen_List = 1;
  total_size += 1 * this->e_soulopen_list_size();
  for (int i = 0; i < this->e_soulopen_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulopen_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulOpen::MergeFrom(const Sheet_SoulOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulopen_list_.MergeFrom(from.e_soulopen_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulOpen::CopyFrom(const Sheet_SoulOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulOpen::IsInitialized() const {

  return true;
}

void Sheet_SoulOpen::Swap(Sheet_SoulOpen* other) {
  if (other != this) {
    e_soulopen_list_.Swap(&other->e_soulopen_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulOpen_descriptor_;
  metadata.reflection = Sheet_SoulOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulSoul::kMIdFieldNumber;
const int E_SoulSoul::kMNameFieldNumber;
const int E_SoulSoul::kMLvItemFieldNumber;
const int E_SoulSoul::kMAdvanceItemFieldNumber;
const int E_SoulSoul::kMSacrificeSkillFieldNumber;
const int E_SoulSoul::kMSkillLvFieldNumber;
const int E_SoulSoul::kMMonsterIdFieldNumber;
#endif  // !_MSC_VER

E_SoulSoul::E_SoulSoul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulSoul::InitAsDefaultInstance() {
}

E_SoulSoul::E_SoulSoul(const E_SoulSoul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulSoul::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lvitem_ = 0;
  m_advanceitem_ = 0;
  m_sacrificeskill_ = 0;
  m_skilllv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_monsterid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulSoul::~E_SoulSoul() {
  SharedDtor();
}

void E_SoulSoul::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_skilllv_ != &::google::protobuf::internal::kEmptyString) {
    delete m_skilllv_;
  }
  if (this != default_instance_) {
  }
}

void E_SoulSoul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulSoul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulSoul_descriptor_;
}

const E_SoulSoul& E_SoulSoul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulSoul* E_SoulSoul::default_instance_ = NULL;

E_SoulSoul* E_SoulSoul::New() const {
  return new E_SoulSoul;
}

void E_SoulSoul::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_lvitem_ = 0;
    m_advanceitem_ = 0;
    m_sacrificeskill_ = 0;
    if (has_m_skilllv()) {
      if (m_skilllv_ != &::google::protobuf::internal::kEmptyString) {
        m_skilllv_->clear();
      }
    }
    m_monsterid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulSoul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lvItem;
        break;
      }

      // optional int32 m_lvItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvitem_)));
          set_has_m_lvitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_advanceItem;
        break;
      }

      // optional int32 m_advanceItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advanceItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advanceitem_)));
          set_has_m_advanceitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_sacrificeSkill;
        break;
      }

      // optional int32 m_sacrificeSkill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sacrificeSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sacrificeskill_)));
          set_has_m_sacrificeskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_SkillLv;
        break;
      }

      // optional string m_SkillLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_SkillLv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_skilllv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_skilllv().data(), this->m_skilllv().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_monsterId;
        break;
      }

      // optional int32 m_monsterId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monsterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monsterid_)));
          set_has_m_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulSoul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_lvItem = 3;
  if (has_m_lvitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lvitem(), output);
  }

  // optional int32 m_advanceItem = 4;
  if (has_m_advanceitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_advanceitem(), output);
  }

  // optional int32 m_sacrificeSkill = 5;
  if (has_m_sacrificeskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_sacrificeskill(), output);
  }

  // optional string m_SkillLv = 6;
  if (has_m_skilllv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skilllv().data(), this->m_skilllv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_skilllv(), output);
  }

  // optional int32 m_monsterId = 7;
  if (has_m_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_monsterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulSoul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_lvItem = 3;
  if (has_m_lvitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lvitem(), target);
  }

  // optional int32 m_advanceItem = 4;
  if (has_m_advanceitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_advanceitem(), target);
  }

  // optional int32 m_sacrificeSkill = 5;
  if (has_m_sacrificeskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_sacrificeskill(), target);
  }

  // optional string m_SkillLv = 6;
  if (has_m_skilllv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skilllv().data(), this->m_skilllv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_skilllv(), target);
  }

  // optional int32 m_monsterId = 7;
  if (has_m_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_monsterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulSoul::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_lvItem = 3;
    if (has_m_lvitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvitem());
    }

    // optional int32 m_advanceItem = 4;
    if (has_m_advanceitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advanceitem());
    }

    // optional int32 m_sacrificeSkill = 5;
    if (has_m_sacrificeskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sacrificeskill());
    }

    // optional string m_SkillLv = 6;
    if (has_m_skilllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_skilllv());
    }

    // optional int32 m_monsterId = 7;
    if (has_m_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monsterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulSoul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulSoul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulSoul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulSoul::MergeFrom(const E_SoulSoul& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_lvitem()) {
      set_m_lvitem(from.m_lvitem());
    }
    if (from.has_m_advanceitem()) {
      set_m_advanceitem(from.m_advanceitem());
    }
    if (from.has_m_sacrificeskill()) {
      set_m_sacrificeskill(from.m_sacrificeskill());
    }
    if (from.has_m_skilllv()) {
      set_m_skilllv(from.m_skilllv());
    }
    if (from.has_m_monsterid()) {
      set_m_monsterid(from.m_monsterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulSoul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulSoul::CopyFrom(const E_SoulSoul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulSoul::IsInitialized() const {

  return true;
}

void E_SoulSoul::Swap(E_SoulSoul* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_lvitem_, other->m_lvitem_);
    std::swap(m_advanceitem_, other->m_advanceitem_);
    std::swap(m_sacrificeskill_, other->m_sacrificeskill_);
    std::swap(m_skilllv_, other->m_skilllv_);
    std::swap(m_monsterid_, other->m_monsterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulSoul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulSoul_descriptor_;
  metadata.reflection = E_SoulSoul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulSoul::kESoulSoulListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulSoul::Sheet_SoulSoul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulSoul::InitAsDefaultInstance() {
}

Sheet_SoulSoul::Sheet_SoulSoul(const Sheet_SoulSoul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulSoul::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulSoul::~Sheet_SoulSoul() {
  SharedDtor();
}

void Sheet_SoulSoul::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulSoul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulSoul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulSoul_descriptor_;
}

const Sheet_SoulSoul& Sheet_SoulSoul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulSoul* Sheet_SoulSoul::default_instance_ = NULL;

Sheet_SoulSoul* Sheet_SoulSoul::New() const {
  return new Sheet_SoulSoul;
}

void Sheet_SoulSoul::Clear() {
  e_soulsoul_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulSoul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulSoul E_SoulSoul_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulSoul_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulsoul_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulSoul_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulSoul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulSoul E_SoulSoul_List = 1;
  for (int i = 0; i < this->e_soulsoul_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulsoul_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulSoul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulSoul E_SoulSoul_List = 1;
  for (int i = 0; i < this->e_soulsoul_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulsoul_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulSoul::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulSoul E_SoulSoul_List = 1;
  total_size += 1 * this->e_soulsoul_list_size();
  for (int i = 0; i < this->e_soulsoul_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulsoul_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulSoul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulSoul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulSoul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulSoul::MergeFrom(const Sheet_SoulSoul& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulsoul_list_.MergeFrom(from.e_soulsoul_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulSoul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulSoul::CopyFrom(const Sheet_SoulSoul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulSoul::IsInitialized() const {

  return true;
}

void Sheet_SoulSoul::Swap(Sheet_SoulSoul* other) {
  if (other != this) {
    e_soulsoul_list_.Swap(&other->e_soulsoul_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulSoul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulSoul_descriptor_;
  metadata.reflection = Sheet_SoulSoul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_Soul3dmodel::kMIdFieldNumber;
const int E_Soul3dmodel::kMPositionFieldNumber;
#endif  // !_MSC_VER

E_Soul3dmodel::E_Soul3dmodel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_Soul3dmodel::InitAsDefaultInstance() {
}

E_Soul3dmodel::E_Soul3dmodel(const E_Soul3dmodel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_Soul3dmodel::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_Soul3dmodel::~E_Soul3dmodel() {
  SharedDtor();
}

void E_Soul3dmodel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_Soul3dmodel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_Soul3dmodel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_Soul3dmodel_descriptor_;
}

const E_Soul3dmodel& E_Soul3dmodel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_Soul3dmodel* E_Soul3dmodel::default_instance_ = NULL;

E_Soul3dmodel* E_Soul3dmodel::New() const {
  return new E_Soul3dmodel;
}

void E_Soul3dmodel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_Soul3dmodel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_Soul3dmodel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_position = 2;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_Soul3dmodel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_position = 2;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_Soul3dmodel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_position = 2;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_Soul3dmodel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_Soul3dmodel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_Soul3dmodel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_Soul3dmodel::MergeFrom(const E_Soul3dmodel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_Soul3dmodel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_Soul3dmodel::CopyFrom(const E_Soul3dmodel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_Soul3dmodel::IsInitialized() const {

  return true;
}

void E_Soul3dmodel::Swap(E_Soul3dmodel* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_position_, other->m_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_Soul3dmodel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_Soul3dmodel_descriptor_;
  metadata.reflection = E_Soul3dmodel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_Soul3dmodel::kESoul3DmodelListFieldNumber;
#endif  // !_MSC_VER

Sheet_Soul3dmodel::Sheet_Soul3dmodel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_Soul3dmodel::InitAsDefaultInstance() {
}

Sheet_Soul3dmodel::Sheet_Soul3dmodel(const Sheet_Soul3dmodel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_Soul3dmodel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_Soul3dmodel::~Sheet_Soul3dmodel() {
  SharedDtor();
}

void Sheet_Soul3dmodel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_Soul3dmodel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_Soul3dmodel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_Soul3dmodel_descriptor_;
}

const Sheet_Soul3dmodel& Sheet_Soul3dmodel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_Soul3dmodel* Sheet_Soul3dmodel::default_instance_ = NULL;

Sheet_Soul3dmodel* Sheet_Soul3dmodel::New() const {
  return new Sheet_Soul3dmodel;
}

void Sheet_Soul3dmodel::Clear() {
  e_soul3dmodel_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_Soul3dmodel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_Soul3dmodel E_Soul3dmodel_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_Soul3dmodel_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soul3dmodel_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_Soul3dmodel_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_Soul3dmodel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_Soul3dmodel E_Soul3dmodel_List = 1;
  for (int i = 0; i < this->e_soul3dmodel_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soul3dmodel_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_Soul3dmodel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_Soul3dmodel E_Soul3dmodel_List = 1;
  for (int i = 0; i < this->e_soul3dmodel_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soul3dmodel_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_Soul3dmodel::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_Soul3dmodel E_Soul3dmodel_List = 1;
  total_size += 1 * this->e_soul3dmodel_list_size();
  for (int i = 0; i < this->e_soul3dmodel_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soul3dmodel_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_Soul3dmodel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_Soul3dmodel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_Soul3dmodel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_Soul3dmodel::MergeFrom(const Sheet_Soul3dmodel& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soul3dmodel_list_.MergeFrom(from.e_soul3dmodel_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_Soul3dmodel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_Soul3dmodel::CopyFrom(const Sheet_Soul3dmodel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_Soul3dmodel::IsInitialized() const {

  return true;
}

void Sheet_Soul3dmodel::Swap(Sheet_Soul3dmodel* other) {
  if (other != this) {
    e_soul3dmodel_list_.Swap(&other->e_soul3dmodel_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_Soul3dmodel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_Soul3dmodel_descriptor_;
  metadata.reflection = Sheet_Soul3dmodel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulSoulbasicAttributeDesc::kMValueFieldNumber;
const int E_SoulSoulbasicAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_SoulSoulbasicAttributeDesc::E_SoulSoulbasicAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulSoulbasicAttributeDesc::InitAsDefaultInstance() {
}

E_SoulSoulbasicAttributeDesc::E_SoulSoulbasicAttributeDesc(const E_SoulSoulbasicAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulSoulbasicAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulSoulbasicAttributeDesc::~E_SoulSoulbasicAttributeDesc() {
  SharedDtor();
}

void E_SoulSoulbasicAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulSoulbasicAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulSoulbasicAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulSoulbasicAttributeDesc_descriptor_;
}

const E_SoulSoulbasicAttributeDesc& E_SoulSoulbasicAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulSoulbasicAttributeDesc* E_SoulSoulbasicAttributeDesc::default_instance_ = NULL;

E_SoulSoulbasicAttributeDesc* E_SoulSoulbasicAttributeDesc::New() const {
  return new E_SoulSoulbasicAttributeDesc;
}

void E_SoulSoulbasicAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulSoulbasicAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulSoulbasicAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulSoulbasicAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulSoulbasicAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulSoulbasicAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulSoulbasicAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulSoulbasicAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulSoulbasicAttributeDesc::MergeFrom(const E_SoulSoulbasicAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulSoulbasicAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulSoulbasicAttributeDesc::CopyFrom(const E_SoulSoulbasicAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulSoulbasicAttributeDesc::IsInitialized() const {

  return true;
}

void E_SoulSoulbasicAttributeDesc::Swap(E_SoulSoulbasicAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulSoulbasicAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulSoulbasicAttributeDesc_descriptor_;
  metadata.reflection = E_SoulSoulbasicAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulSoulbasic::kMIdFieldNumber;
const int E_SoulSoulbasic::kMSoulIdFieldNumber;
const int E_SoulSoulbasic::kMSoulLvFieldNumber;
const int E_SoulSoulbasic::kMSoulExpFieldNumber;
const int E_SoulSoulbasic::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_SoulSoulbasic::E_SoulSoulbasic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulSoulbasic::InitAsDefaultInstance() {
}

E_SoulSoulbasic::E_SoulSoulbasic(const E_SoulSoulbasic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulSoulbasic::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_soulid_ = 0;
  m_soullv_ = 0;
  m_soulexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulSoulbasic::~E_SoulSoulbasic() {
  SharedDtor();
}

void E_SoulSoulbasic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulSoulbasic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulSoulbasic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulSoulbasic_descriptor_;
}

const E_SoulSoulbasic& E_SoulSoulbasic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulSoulbasic* E_SoulSoulbasic::default_instance_ = NULL;

E_SoulSoulbasic* E_SoulSoulbasic::New() const {
  return new E_SoulSoulbasic;
}

void E_SoulSoulbasic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_soulid_ = 0;
    m_soullv_ = 0;
    m_soulexp_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulSoulbasic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_soulId;
        break;
      }

      // optional int32 m_soulId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_soulId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_soulid_)));
          set_has_m_soulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_soulLv;
        break;
      }

      // optional int32 m_soulLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_soulLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_soullv_)));
          set_has_m_soullv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_soulExp;
        break;
      }

      // optional int32 m_soulExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_soulExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_soulexp_)));
          set_has_m_soulexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_SoulSoulbasicAttributeDesc m_attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulSoulbasic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_soulId = 2;
  if (has_m_soulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_soulid(), output);
  }

  // optional int32 m_soulLv = 3;
  if (has_m_soullv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_soullv(), output);
  }

  // optional int32 m_soulExp = 4;
  if (has_m_soulexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_soulexp(), output);
  }

  // repeated .proto_ff.E_SoulSoulbasicAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulSoulbasic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_soulId = 2;
  if (has_m_soulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_soulid(), target);
  }

  // optional int32 m_soulLv = 3;
  if (has_m_soullv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_soullv(), target);
  }

  // optional int32 m_soulExp = 4;
  if (has_m_soulexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_soulexp(), target);
  }

  // repeated .proto_ff.E_SoulSoulbasicAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulSoulbasic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_soulId = 2;
    if (has_m_soulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_soulid());
    }

    // optional int32 m_soulLv = 3;
    if (has_m_soullv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_soullv());
    }

    // optional int32 m_soulExp = 4;
    if (has_m_soulexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_soulexp());
    }

  }
  // repeated .proto_ff.E_SoulSoulbasicAttributeDesc m_attribute = 5;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulSoulbasic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulSoulbasic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulSoulbasic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulSoulbasic::MergeFrom(const E_SoulSoulbasic& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_soulid()) {
      set_m_soulid(from.m_soulid());
    }
    if (from.has_m_soullv()) {
      set_m_soullv(from.m_soullv());
    }
    if (from.has_m_soulexp()) {
      set_m_soulexp(from.m_soulexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulSoulbasic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulSoulbasic::CopyFrom(const E_SoulSoulbasic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulSoulbasic::IsInitialized() const {

  return true;
}

void E_SoulSoulbasic::Swap(E_SoulSoulbasic* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_soulid_, other->m_soulid_);
    std::swap(m_soullv_, other->m_soullv_);
    std::swap(m_soulexp_, other->m_soulexp_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulSoulbasic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulSoulbasic_descriptor_;
  metadata.reflection = E_SoulSoulbasic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulSoulbasic::kESoulSoulbasicListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulSoulbasic::Sheet_SoulSoulbasic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulSoulbasic::InitAsDefaultInstance() {
}

Sheet_SoulSoulbasic::Sheet_SoulSoulbasic(const Sheet_SoulSoulbasic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulSoulbasic::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulSoulbasic::~Sheet_SoulSoulbasic() {
  SharedDtor();
}

void Sheet_SoulSoulbasic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulSoulbasic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulSoulbasic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulSoulbasic_descriptor_;
}

const Sheet_SoulSoulbasic& Sheet_SoulSoulbasic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulSoulbasic* Sheet_SoulSoulbasic::default_instance_ = NULL;

Sheet_SoulSoulbasic* Sheet_SoulSoulbasic::New() const {
  return new Sheet_SoulSoulbasic;
}

void Sheet_SoulSoulbasic::Clear() {
  e_soulsoulbasic_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulSoulbasic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulSoulbasic E_SoulSoulbasic_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulSoulbasic_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulsoulbasic_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulSoulbasic_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulSoulbasic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulSoulbasic E_SoulSoulbasic_List = 1;
  for (int i = 0; i < this->e_soulsoulbasic_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulsoulbasic_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulSoulbasic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulSoulbasic E_SoulSoulbasic_List = 1;
  for (int i = 0; i < this->e_soulsoulbasic_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulsoulbasic_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulSoulbasic::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulSoulbasic E_SoulSoulbasic_List = 1;
  total_size += 1 * this->e_soulsoulbasic_list_size();
  for (int i = 0; i < this->e_soulsoulbasic_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulsoulbasic_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulSoulbasic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulSoulbasic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulSoulbasic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulSoulbasic::MergeFrom(const Sheet_SoulSoulbasic& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulsoulbasic_list_.MergeFrom(from.e_soulsoulbasic_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulSoulbasic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulSoulbasic::CopyFrom(const Sheet_SoulSoulbasic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulSoulbasic::IsInitialized() const {

  return true;
}

void Sheet_SoulSoulbasic::Swap(Sheet_SoulSoulbasic* other) {
  if (other != this) {
    e_soulsoulbasic_list_.Swap(&other->e_soulsoulbasic_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulSoulbasic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulSoulbasic_descriptor_;
  metadata.reflection = Sheet_SoulSoulbasic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulSouladvanceAttributeDesc::kMValueFieldNumber;
const int E_SoulSouladvanceAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_SoulSouladvanceAttributeDesc::E_SoulSouladvanceAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulSouladvanceAttributeDesc::InitAsDefaultInstance() {
}

E_SoulSouladvanceAttributeDesc::E_SoulSouladvanceAttributeDesc(const E_SoulSouladvanceAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulSouladvanceAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulSouladvanceAttributeDesc::~E_SoulSouladvanceAttributeDesc() {
  SharedDtor();
}

void E_SoulSouladvanceAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulSouladvanceAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulSouladvanceAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulSouladvanceAttributeDesc_descriptor_;
}

const E_SoulSouladvanceAttributeDesc& E_SoulSouladvanceAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulSouladvanceAttributeDesc* E_SoulSouladvanceAttributeDesc::default_instance_ = NULL;

E_SoulSouladvanceAttributeDesc* E_SoulSouladvanceAttributeDesc::New() const {
  return new E_SoulSouladvanceAttributeDesc;
}

void E_SoulSouladvanceAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulSouladvanceAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulSouladvanceAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulSouladvanceAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulSouladvanceAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulSouladvanceAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulSouladvanceAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulSouladvanceAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulSouladvanceAttributeDesc::MergeFrom(const E_SoulSouladvanceAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulSouladvanceAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulSouladvanceAttributeDesc::CopyFrom(const E_SoulSouladvanceAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulSouladvanceAttributeDesc::IsInitialized() const {

  return true;
}

void E_SoulSouladvanceAttributeDesc::Swap(E_SoulSouladvanceAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulSouladvanceAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulSouladvanceAttributeDesc_descriptor_;
  metadata.reflection = E_SoulSouladvanceAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulSouladvance::kMIdFieldNumber;
const int E_SoulSouladvance::kMSoulIdFieldNumber;
const int E_SoulSouladvance::kMAdvanceLvFieldNumber;
const int E_SoulSouladvance::kMAdvanceNumFieldNumber;
const int E_SoulSouladvance::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_SoulSouladvance::E_SoulSouladvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulSouladvance::InitAsDefaultInstance() {
}

E_SoulSouladvance::E_SoulSouladvance(const E_SoulSouladvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulSouladvance::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_soulid_ = 0;
  m_advancelv_ = 0;
  m_advancenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulSouladvance::~E_SoulSouladvance() {
  SharedDtor();
}

void E_SoulSouladvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulSouladvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulSouladvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulSouladvance_descriptor_;
}

const E_SoulSouladvance& E_SoulSouladvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulSouladvance* E_SoulSouladvance::default_instance_ = NULL;

E_SoulSouladvance* E_SoulSouladvance::New() const {
  return new E_SoulSouladvance;
}

void E_SoulSouladvance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_soulid_ = 0;
    m_advancelv_ = 0;
    m_advancenum_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulSouladvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_soulId;
        break;
      }

      // optional int32 m_soulId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_soulId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_soulid_)));
          set_has_m_soulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_advanceLv;
        break;
      }

      // optional int32 m_advanceLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advanceLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advancelv_)));
          set_has_m_advancelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_advanceNum;
        break;
      }

      // optional int32 m_advanceNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advanceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advancenum_)));
          set_has_m_advancenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_SoulSouladvanceAttributeDesc m_attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulSouladvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_soulId = 2;
  if (has_m_soulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_soulid(), output);
  }

  // optional int32 m_advanceLv = 3;
  if (has_m_advancelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_advancelv(), output);
  }

  // optional int32 m_advanceNum = 4;
  if (has_m_advancenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_advancenum(), output);
  }

  // repeated .proto_ff.E_SoulSouladvanceAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulSouladvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_soulId = 2;
  if (has_m_soulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_soulid(), target);
  }

  // optional int32 m_advanceLv = 3;
  if (has_m_advancelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_advancelv(), target);
  }

  // optional int32 m_advanceNum = 4;
  if (has_m_advancenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_advancenum(), target);
  }

  // repeated .proto_ff.E_SoulSouladvanceAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulSouladvance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_soulId = 2;
    if (has_m_soulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_soulid());
    }

    // optional int32 m_advanceLv = 3;
    if (has_m_advancelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advancelv());
    }

    // optional int32 m_advanceNum = 4;
    if (has_m_advancenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advancenum());
    }

  }
  // repeated .proto_ff.E_SoulSouladvanceAttributeDesc m_attribute = 5;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulSouladvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulSouladvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulSouladvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulSouladvance::MergeFrom(const E_SoulSouladvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_soulid()) {
      set_m_soulid(from.m_soulid());
    }
    if (from.has_m_advancelv()) {
      set_m_advancelv(from.m_advancelv());
    }
    if (from.has_m_advancenum()) {
      set_m_advancenum(from.m_advancenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulSouladvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulSouladvance::CopyFrom(const E_SoulSouladvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulSouladvance::IsInitialized() const {

  return true;
}

void E_SoulSouladvance::Swap(E_SoulSouladvance* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_soulid_, other->m_soulid_);
    std::swap(m_advancelv_, other->m_advancelv_);
    std::swap(m_advancenum_, other->m_advancenum_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulSouladvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulSouladvance_descriptor_;
  metadata.reflection = E_SoulSouladvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulSouladvance::kESoulSouladvanceListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulSouladvance::Sheet_SoulSouladvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulSouladvance::InitAsDefaultInstance() {
}

Sheet_SoulSouladvance::Sheet_SoulSouladvance(const Sheet_SoulSouladvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulSouladvance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulSouladvance::~Sheet_SoulSouladvance() {
  SharedDtor();
}

void Sheet_SoulSouladvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulSouladvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulSouladvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulSouladvance_descriptor_;
}

const Sheet_SoulSouladvance& Sheet_SoulSouladvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulSouladvance* Sheet_SoulSouladvance::default_instance_ = NULL;

Sheet_SoulSouladvance* Sheet_SoulSouladvance::New() const {
  return new Sheet_SoulSouladvance;
}

void Sheet_SoulSouladvance::Clear() {
  e_soulsouladvance_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulSouladvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulSouladvance E_SoulSouladvance_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulSouladvance_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulsouladvance_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulSouladvance_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulSouladvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulSouladvance E_SoulSouladvance_List = 1;
  for (int i = 0; i < this->e_soulsouladvance_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulsouladvance_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulSouladvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulSouladvance E_SoulSouladvance_List = 1;
  for (int i = 0; i < this->e_soulsouladvance_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulsouladvance_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulSouladvance::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulSouladvance E_SoulSouladvance_List = 1;
  total_size += 1 * this->e_soulsouladvance_list_size();
  for (int i = 0; i < this->e_soulsouladvance_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulsouladvance_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulSouladvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulSouladvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulSouladvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulSouladvance::MergeFrom(const Sheet_SoulSouladvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulsouladvance_list_.MergeFrom(from.e_soulsouladvance_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulSouladvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulSouladvance::CopyFrom(const Sheet_SoulSouladvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulSouladvance::IsInitialized() const {

  return true;
}

void Sheet_SoulSouladvance::Swap(Sheet_SoulSouladvance* other) {
  if (other != this) {
    e_soulsouladvance_list_.Swap(&other->e_soulsouladvance_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulSouladvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulSouladvance_descriptor_;
  metadata.reflection = Sheet_SoulSouladvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulBless::kMIdFieldNumber;
const int E_SoulBless::kMBasicExpFieldNumber;
const int E_SoulBless::kMNeedGoldFieldNumber;
const int E_SoulBless::kMOpenLvFieldNumber;
#endif  // !_MSC_VER

E_SoulBless::E_SoulBless()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulBless::InitAsDefaultInstance() {
}

E_SoulBless::E_SoulBless(const E_SoulBless& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulBless::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_basic_exp_ = 0;
  m_need_gold_ = 0;
  m_open_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulBless::~E_SoulBless() {
  SharedDtor();
}

void E_SoulBless::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulBless::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulBless::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulBless_descriptor_;
}

const E_SoulBless& E_SoulBless::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulBless* E_SoulBless::default_instance_ = NULL;

E_SoulBless* E_SoulBless::New() const {
  return new E_SoulBless;
}

void E_SoulBless::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_basic_exp_ = 0;
    m_need_gold_ = 0;
    m_open_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulBless::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_basic_exp;
        break;
      }

      // optional int32 m_basic_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_basic_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_basic_exp_)));
          set_has_m_basic_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_need_gold;
        break;
      }

      // optional int32 m_need_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_need_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_need_gold_)));
          set_has_m_need_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_open_lv;
        break;
      }

      // optional int32 m_open_lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_open_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_open_lv_)));
          set_has_m_open_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulBless::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_basic_exp = 2;
  if (has_m_basic_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_basic_exp(), output);
  }

  // optional int32 m_need_gold = 3;
  if (has_m_need_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_need_gold(), output);
  }

  // optional int32 m_open_lv = 4;
  if (has_m_open_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_open_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulBless::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_basic_exp = 2;
  if (has_m_basic_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_basic_exp(), target);
  }

  // optional int32 m_need_gold = 3;
  if (has_m_need_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_need_gold(), target);
  }

  // optional int32 m_open_lv = 4;
  if (has_m_open_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_open_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulBless::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_basic_exp = 2;
    if (has_m_basic_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_basic_exp());
    }

    // optional int32 m_need_gold = 3;
    if (has_m_need_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_need_gold());
    }

    // optional int32 m_open_lv = 4;
    if (has_m_open_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_open_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulBless::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulBless* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulBless*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulBless::MergeFrom(const E_SoulBless& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_basic_exp()) {
      set_m_basic_exp(from.m_basic_exp());
    }
    if (from.has_m_need_gold()) {
      set_m_need_gold(from.m_need_gold());
    }
    if (from.has_m_open_lv()) {
      set_m_open_lv(from.m_open_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulBless::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulBless::CopyFrom(const E_SoulBless& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulBless::IsInitialized() const {

  return true;
}

void E_SoulBless::Swap(E_SoulBless* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_basic_exp_, other->m_basic_exp_);
    std::swap(m_need_gold_, other->m_need_gold_);
    std::swap(m_open_lv_, other->m_open_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulBless::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulBless_descriptor_;
  metadata.reflection = E_SoulBless_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulBless::kESoulBlessListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulBless::Sheet_SoulBless()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulBless::InitAsDefaultInstance() {
}

Sheet_SoulBless::Sheet_SoulBless(const Sheet_SoulBless& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulBless::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulBless::~Sheet_SoulBless() {
  SharedDtor();
}

void Sheet_SoulBless::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulBless::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulBless::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulBless_descriptor_;
}

const Sheet_SoulBless& Sheet_SoulBless::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulBless* Sheet_SoulBless::default_instance_ = NULL;

Sheet_SoulBless* Sheet_SoulBless::New() const {
  return new Sheet_SoulBless;
}

void Sheet_SoulBless::Clear() {
  e_soulbless_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulBless::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulBless E_SoulBless_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulBless_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulbless_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulBless_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulBless::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulBless E_SoulBless_List = 1;
  for (int i = 0; i < this->e_soulbless_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulbless_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulBless::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulBless E_SoulBless_List = 1;
  for (int i = 0; i < this->e_soulbless_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulbless_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulBless::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulBless E_SoulBless_List = 1;
  total_size += 1 * this->e_soulbless_list_size();
  for (int i = 0; i < this->e_soulbless_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulbless_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulBless::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulBless* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulBless*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulBless::MergeFrom(const Sheet_SoulBless& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulbless_list_.MergeFrom(from.e_soulbless_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulBless::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulBless::CopyFrom(const Sheet_SoulBless& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulBless::IsInitialized() const {

  return true;
}

void Sheet_SoulBless::Swap(Sheet_SoulBless* other) {
  if (other != this) {
    e_soulbless_list_.Swap(&other->e_soulbless_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulBless::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulBless_descriptor_;
  metadata.reflection = Sheet_SoulBless_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulPrivilegeAttributeDesc::kMValueFieldNumber;
const int E_SoulPrivilegeAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_SoulPrivilegeAttributeDesc::E_SoulPrivilegeAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulPrivilegeAttributeDesc::InitAsDefaultInstance() {
}

E_SoulPrivilegeAttributeDesc::E_SoulPrivilegeAttributeDesc(const E_SoulPrivilegeAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulPrivilegeAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulPrivilegeAttributeDesc::~E_SoulPrivilegeAttributeDesc() {
  SharedDtor();
}

void E_SoulPrivilegeAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulPrivilegeAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulPrivilegeAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulPrivilegeAttributeDesc_descriptor_;
}

const E_SoulPrivilegeAttributeDesc& E_SoulPrivilegeAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulPrivilegeAttributeDesc* E_SoulPrivilegeAttributeDesc::default_instance_ = NULL;

E_SoulPrivilegeAttributeDesc* E_SoulPrivilegeAttributeDesc::New() const {
  return new E_SoulPrivilegeAttributeDesc;
}

void E_SoulPrivilegeAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulPrivilegeAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulPrivilegeAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulPrivilegeAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulPrivilegeAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulPrivilegeAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulPrivilegeAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulPrivilegeAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulPrivilegeAttributeDesc::MergeFrom(const E_SoulPrivilegeAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulPrivilegeAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulPrivilegeAttributeDesc::CopyFrom(const E_SoulPrivilegeAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulPrivilegeAttributeDesc::IsInitialized() const {

  return true;
}

void E_SoulPrivilegeAttributeDesc::Swap(E_SoulPrivilegeAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulPrivilegeAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulPrivilegeAttributeDesc_descriptor_;
  metadata.reflection = E_SoulPrivilegeAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulPrivilege::kMIdFieldNumber;
const int E_SoulPrivilege::kMActivateFieldNumber;
const int E_SoulPrivilege::kMPoolUpFieldNumber;
const int E_SoulPrivilege::kMHuoyueduToExpFieldNumber;
const int E_SoulPrivilege::kMMeditationToExpFieldNumber;
const int E_SoulPrivilege::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_SoulPrivilege::E_SoulPrivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulPrivilege::InitAsDefaultInstance() {
}

E_SoulPrivilege::E_SoulPrivilege(const E_SoulPrivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulPrivilege::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_activate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_poolup_ = 0;
  m_huoyuedu_to_exp_ = 0;
  m_meditation_to_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulPrivilege::~E_SoulPrivilege() {
  SharedDtor();
}

void E_SoulPrivilege::SharedDtor() {
  if (m_activate_ != &::google::protobuf::internal::kEmptyString) {
    delete m_activate_;
  }
  if (this != default_instance_) {
  }
}

void E_SoulPrivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulPrivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulPrivilege_descriptor_;
}

const E_SoulPrivilege& E_SoulPrivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulPrivilege* E_SoulPrivilege::default_instance_ = NULL;

E_SoulPrivilege* E_SoulPrivilege::New() const {
  return new E_SoulPrivilege;
}

void E_SoulPrivilege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_activate()) {
      if (m_activate_ != &::google::protobuf::internal::kEmptyString) {
        m_activate_->clear();
      }
    }
    m_poolup_ = 0;
    m_huoyuedu_to_exp_ = 0;
    m_meditation_to_exp_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulPrivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_activate;
        break;
      }

      // optional string m_activate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_activate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_activate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_activate().data(), this->m_activate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_poolUp;
        break;
      }

      // optional int32 m_poolUp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_poolUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_poolup_)));
          set_has_m_poolup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_huoyuedu_to_exp;
        break;
      }

      // optional int32 m_huoyuedu_to_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_huoyuedu_to_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_huoyuedu_to_exp_)));
          set_has_m_huoyuedu_to_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_meditation_to_exp;
        break;
      }

      // optional int32 m_meditation_to_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_meditation_to_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_meditation_to_exp_)));
          set_has_m_meditation_to_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_SoulPrivilegeAttributeDesc m_attribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulPrivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_activate = 2;
  if (has_m_activate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_activate().data(), this->m_activate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_activate(), output);
  }

  // optional int32 m_poolUp = 3;
  if (has_m_poolup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_poolup(), output);
  }

  // optional int32 m_huoyuedu_to_exp = 4;
  if (has_m_huoyuedu_to_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_huoyuedu_to_exp(), output);
  }

  // optional int32 m_meditation_to_exp = 5;
  if (has_m_meditation_to_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_meditation_to_exp(), output);
  }

  // repeated .proto_ff.E_SoulPrivilegeAttributeDesc m_attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulPrivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_activate = 2;
  if (has_m_activate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_activate().data(), this->m_activate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_activate(), target);
  }

  // optional int32 m_poolUp = 3;
  if (has_m_poolup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_poolup(), target);
  }

  // optional int32 m_huoyuedu_to_exp = 4;
  if (has_m_huoyuedu_to_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_huoyuedu_to_exp(), target);
  }

  // optional int32 m_meditation_to_exp = 5;
  if (has_m_meditation_to_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_meditation_to_exp(), target);
  }

  // repeated .proto_ff.E_SoulPrivilegeAttributeDesc m_attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulPrivilege::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_activate = 2;
    if (has_m_activate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_activate());
    }

    // optional int32 m_poolUp = 3;
    if (has_m_poolup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_poolup());
    }

    // optional int32 m_huoyuedu_to_exp = 4;
    if (has_m_huoyuedu_to_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_huoyuedu_to_exp());
    }

    // optional int32 m_meditation_to_exp = 5;
    if (has_m_meditation_to_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_meditation_to_exp());
    }

  }
  // repeated .proto_ff.E_SoulPrivilegeAttributeDesc m_attribute = 6;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulPrivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulPrivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulPrivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulPrivilege::MergeFrom(const E_SoulPrivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_activate()) {
      set_m_activate(from.m_activate());
    }
    if (from.has_m_poolup()) {
      set_m_poolup(from.m_poolup());
    }
    if (from.has_m_huoyuedu_to_exp()) {
      set_m_huoyuedu_to_exp(from.m_huoyuedu_to_exp());
    }
    if (from.has_m_meditation_to_exp()) {
      set_m_meditation_to_exp(from.m_meditation_to_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulPrivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulPrivilege::CopyFrom(const E_SoulPrivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulPrivilege::IsInitialized() const {

  return true;
}

void E_SoulPrivilege::Swap(E_SoulPrivilege* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_activate_, other->m_activate_);
    std::swap(m_poolup_, other->m_poolup_);
    std::swap(m_huoyuedu_to_exp_, other->m_huoyuedu_to_exp_);
    std::swap(m_meditation_to_exp_, other->m_meditation_to_exp_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulPrivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulPrivilege_descriptor_;
  metadata.reflection = E_SoulPrivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulPrivilege::kESoulPrivilegeListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulPrivilege::Sheet_SoulPrivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulPrivilege::InitAsDefaultInstance() {
}

Sheet_SoulPrivilege::Sheet_SoulPrivilege(const Sheet_SoulPrivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulPrivilege::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulPrivilege::~Sheet_SoulPrivilege() {
  SharedDtor();
}

void Sheet_SoulPrivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulPrivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulPrivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulPrivilege_descriptor_;
}

const Sheet_SoulPrivilege& Sheet_SoulPrivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulPrivilege* Sheet_SoulPrivilege::default_instance_ = NULL;

Sheet_SoulPrivilege* Sheet_SoulPrivilege::New() const {
  return new Sheet_SoulPrivilege;
}

void Sheet_SoulPrivilege::Clear() {
  e_soulprivilege_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulPrivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulPrivilege E_SoulPrivilege_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulPrivilege_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulprivilege_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulPrivilege_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulPrivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulPrivilege E_SoulPrivilege_List = 1;
  for (int i = 0; i < this->e_soulprivilege_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulprivilege_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulPrivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulPrivilege E_SoulPrivilege_List = 1;
  for (int i = 0; i < this->e_soulprivilege_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulprivilege_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulPrivilege::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulPrivilege E_SoulPrivilege_List = 1;
  total_size += 1 * this->e_soulprivilege_list_size();
  for (int i = 0; i < this->e_soulprivilege_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulprivilege_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulPrivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulPrivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulPrivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulPrivilege::MergeFrom(const Sheet_SoulPrivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulprivilege_list_.MergeFrom(from.e_soulprivilege_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulPrivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulPrivilege::CopyFrom(const Sheet_SoulPrivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulPrivilege::IsInitialized() const {

  return true;
}

void Sheet_SoulPrivilege::Swap(Sheet_SoulPrivilege* other) {
  if (other != this) {
    e_soulprivilege_list_.Swap(&other->e_soulprivilege_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulPrivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulPrivilege_descriptor_;
  metadata.reflection = Sheet_SoulPrivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulCrystal::kMEquipIdFieldNumber;
const int E_SoulCrystal::kMNameFieldNumber;
const int E_SoulCrystal::kMSkillTypeFieldNumber;
const int E_SoulCrystal::kMTypeFieldNumber;
const int E_SoulCrystal::kMQualityFieldNumber;
const int E_SoulCrystal::kMStarFieldNumber;
const int E_SoulCrystal::kMMakeidFieldNumber;
const int E_SoulCrystal::kMFirstSkillFieldNumber;
const int E_SoulCrystal::kMAttridFieldNumber;
const int E_SoulCrystal::kMIntensifyFieldNumber;
const int E_SoulCrystal::kMDismantleTimeFieldNumber;
const int E_SoulCrystal::kMDismantleNumFieldNumber;
const int E_SoulCrystal::kMOtherSkillIdFieldNumber;
#endif  // !_MSC_VER

E_SoulCrystal::E_SoulCrystal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulCrystal::InitAsDefaultInstance() {
}

E_SoulCrystal::E_SoulCrystal(const E_SoulCrystal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulCrystal::SharedCtor() {
  _cached_size_ = 0;
  m_equipid_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_skilltype_ = 0;
  m_type_ = 0;
  m_quality_ = 0;
  m_star_ = 0;
  m_makeid_ = 0;
  m_first_skill_ = 0;
  m_attrid_ = 0;
  m_intensify_ = 0;
  m_dismantletime_ = 0;
  m_dismantlenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulCrystal::~E_SoulCrystal() {
  SharedDtor();
}

void E_SoulCrystal::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_SoulCrystal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulCrystal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulCrystal_descriptor_;
}

const E_SoulCrystal& E_SoulCrystal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulCrystal* E_SoulCrystal::default_instance_ = NULL;

E_SoulCrystal* E_SoulCrystal::New() const {
  return new E_SoulCrystal;
}

void E_SoulCrystal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_equipid_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_skilltype_ = 0;
    m_type_ = 0;
    m_quality_ = 0;
    m_star_ = 0;
    m_makeid_ = 0;
    m_first_skill_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_attrid_ = 0;
    m_intensify_ = 0;
    m_dismantletime_ = 0;
    m_dismantlenum_ = 0;
  }
  m_other_skillid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulCrystal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_equipId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equipid_)));
          set_has_m_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_skillType;
        break;
      }

      // optional int32 m_skillType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skilltype_)));
          set_has_m_skilltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_star;
        break;
      }

      // optional int32 m_star = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_makeid;
        break;
      }

      // optional int32 m_makeid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_makeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_makeid_)));
          set_has_m_makeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_first_skill;
        break;
      }

      // optional int32 m_first_skill = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_first_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_first_skill_)));
          set_has_m_first_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_attrid;
        break;
      }

      // optional int32 m_attrid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_attrid_)));
          set_has_m_attrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_intensify;
        break;
      }

      // optional int32 m_intensify = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_intensify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_intensify_)));
          set_has_m_intensify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_dismantleTime;
        break;
      }

      // optional int32 m_dismantleTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dismantleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dismantletime_)));
          set_has_m_dismantletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_dismantleNum;
        break;
      }

      // optional int32 m_dismantleNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dismantleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dismantlenum_)));
          set_has_m_dismantlenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_other_skillId;
        break;
      }

      // repeated int32 m_other_skillId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_other_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_m_other_skillid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_other_skillid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_other_skillId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulCrystal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_equipId = 1;
  if (has_m_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_equipid(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_skillType = 3;
  if (has_m_skilltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_skilltype(), output);
  }

  // optional int32 m_type = 4;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_type(), output);
  }

  // optional int32 m_quality = 5;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_quality(), output);
  }

  // optional int32 m_star = 6;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_star(), output);
  }

  // optional int32 m_makeid = 7;
  if (has_m_makeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_makeid(), output);
  }

  // optional int32 m_first_skill = 8;
  if (has_m_first_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_first_skill(), output);
  }

  // optional int32 m_attrid = 9;
  if (has_m_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_attrid(), output);
  }

  // optional int32 m_intensify = 10;
  if (has_m_intensify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_intensify(), output);
  }

  // optional int32 m_dismantleTime = 11;
  if (has_m_dismantletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_dismantletime(), output);
  }

  // optional int32 m_dismantleNum = 12;
  if (has_m_dismantlenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_dismantlenum(), output);
  }

  // repeated int32 m_other_skillId = 13;
  for (int i = 0; i < this->m_other_skillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->m_other_skillid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulCrystal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_equipId = 1;
  if (has_m_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_equipid(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_skillType = 3;
  if (has_m_skilltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_skilltype(), target);
  }

  // optional int32 m_type = 4;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_type(), target);
  }

  // optional int32 m_quality = 5;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_quality(), target);
  }

  // optional int32 m_star = 6;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_star(), target);
  }

  // optional int32 m_makeid = 7;
  if (has_m_makeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_makeid(), target);
  }

  // optional int32 m_first_skill = 8;
  if (has_m_first_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_first_skill(), target);
  }

  // optional int32 m_attrid = 9;
  if (has_m_attrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_attrid(), target);
  }

  // optional int32 m_intensify = 10;
  if (has_m_intensify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_intensify(), target);
  }

  // optional int32 m_dismantleTime = 11;
  if (has_m_dismantletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_dismantletime(), target);
  }

  // optional int32 m_dismantleNum = 12;
  if (has_m_dismantlenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_dismantlenum(), target);
  }

  // repeated int32 m_other_skillId = 13;
  for (int i = 0; i < this->m_other_skillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->m_other_skillid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulCrystal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_equipId = 1;
    if (has_m_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equipid());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_skillType = 3;
    if (has_m_skilltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skilltype());
    }

    // optional int32 m_type = 4;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_quality = 5;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_star = 6;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

    // optional int32 m_makeid = 7;
    if (has_m_makeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_makeid());
    }

    // optional int32 m_first_skill = 8;
    if (has_m_first_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_first_skill());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_attrid = 9;
    if (has_m_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_attrid());
    }

    // optional int32 m_intensify = 10;
    if (has_m_intensify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_intensify());
    }

    // optional int32 m_dismantleTime = 11;
    if (has_m_dismantletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dismantletime());
    }

    // optional int32 m_dismantleNum = 12;
    if (has_m_dismantlenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dismantlenum());
    }

  }
  // repeated int32 m_other_skillId = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_other_skillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_other_skillid(i));
    }
    total_size += 1 * this->m_other_skillid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulCrystal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulCrystal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulCrystal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulCrystal::MergeFrom(const E_SoulCrystal& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_other_skillid_.MergeFrom(from.m_other_skillid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_equipid()) {
      set_m_equipid(from.m_equipid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_skilltype()) {
      set_m_skilltype(from.m_skilltype());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
    if (from.has_m_makeid()) {
      set_m_makeid(from.m_makeid());
    }
    if (from.has_m_first_skill()) {
      set_m_first_skill(from.m_first_skill());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_attrid()) {
      set_m_attrid(from.m_attrid());
    }
    if (from.has_m_intensify()) {
      set_m_intensify(from.m_intensify());
    }
    if (from.has_m_dismantletime()) {
      set_m_dismantletime(from.m_dismantletime());
    }
    if (from.has_m_dismantlenum()) {
      set_m_dismantlenum(from.m_dismantlenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulCrystal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulCrystal::CopyFrom(const E_SoulCrystal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulCrystal::IsInitialized() const {

  return true;
}

void E_SoulCrystal::Swap(E_SoulCrystal* other) {
  if (other != this) {
    std::swap(m_equipid_, other->m_equipid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_skilltype_, other->m_skilltype_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_star_, other->m_star_);
    std::swap(m_makeid_, other->m_makeid_);
    std::swap(m_first_skill_, other->m_first_skill_);
    std::swap(m_attrid_, other->m_attrid_);
    std::swap(m_intensify_, other->m_intensify_);
    std::swap(m_dismantletime_, other->m_dismantletime_);
    std::swap(m_dismantlenum_, other->m_dismantlenum_);
    m_other_skillid_.Swap(&other->m_other_skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulCrystal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulCrystal_descriptor_;
  metadata.reflection = E_SoulCrystal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulCrystal::kESoulCrystalListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulCrystal::Sheet_SoulCrystal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulCrystal::InitAsDefaultInstance() {
}

Sheet_SoulCrystal::Sheet_SoulCrystal(const Sheet_SoulCrystal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulCrystal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulCrystal::~Sheet_SoulCrystal() {
  SharedDtor();
}

void Sheet_SoulCrystal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulCrystal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulCrystal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulCrystal_descriptor_;
}

const Sheet_SoulCrystal& Sheet_SoulCrystal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulCrystal* Sheet_SoulCrystal::default_instance_ = NULL;

Sheet_SoulCrystal* Sheet_SoulCrystal::New() const {
  return new Sheet_SoulCrystal;
}

void Sheet_SoulCrystal::Clear() {
  e_soulcrystal_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulCrystal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulCrystal E_SoulCrystal_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulCrystal_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulcrystal_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulCrystal_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulCrystal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulCrystal E_SoulCrystal_List = 1;
  for (int i = 0; i < this->e_soulcrystal_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulcrystal_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulCrystal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulCrystal E_SoulCrystal_List = 1;
  for (int i = 0; i < this->e_soulcrystal_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulcrystal_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulCrystal::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulCrystal E_SoulCrystal_List = 1;
  total_size += 1 * this->e_soulcrystal_list_size();
  for (int i = 0; i < this->e_soulcrystal_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulcrystal_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulCrystal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulCrystal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulCrystal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulCrystal::MergeFrom(const Sheet_SoulCrystal& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulcrystal_list_.MergeFrom(from.e_soulcrystal_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulCrystal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulCrystal::CopyFrom(const Sheet_SoulCrystal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulCrystal::IsInitialized() const {

  return true;
}

void Sheet_SoulCrystal::Swap(Sheet_SoulCrystal* other) {
  if (other != this) {
    e_soulcrystal_list_.Swap(&other->e_soulcrystal_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulCrystal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulCrystal_descriptor_;
  metadata.reflection = Sheet_SoulCrystal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulCrystallv::kMLvFieldNumber;
const int E_SoulCrystallv::kMWraithsItemFieldNumber;
const int E_SoulCrystallv::kMWraithsMunFieldNumber;
#endif  // !_MSC_VER

E_SoulCrystallv::E_SoulCrystallv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulCrystallv::InitAsDefaultInstance() {
}

E_SoulCrystallv::E_SoulCrystallv(const E_SoulCrystallv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulCrystallv::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_wraithsitem_ = 0;
  m_wraithsmun_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulCrystallv::~E_SoulCrystallv() {
  SharedDtor();
}

void E_SoulCrystallv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulCrystallv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulCrystallv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulCrystallv_descriptor_;
}

const E_SoulCrystallv& E_SoulCrystallv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulCrystallv* E_SoulCrystallv::default_instance_ = NULL;

E_SoulCrystallv* E_SoulCrystallv::New() const {
  return new E_SoulCrystallv;
}

void E_SoulCrystallv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_wraithsitem_ = 0;
    m_wraithsmun_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulCrystallv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_wraithsItem;
        break;
      }

      // optional int32 m_wraithsItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wraithsItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wraithsitem_)));
          set_has_m_wraithsitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_wraithsMun;
        break;
      }

      // optional int32 m_wraithsMun = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wraithsMun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wraithsmun_)));
          set_has_m_wraithsmun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulCrystallv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_wraithsItem = 2;
  if (has_m_wraithsitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_wraithsitem(), output);
  }

  // optional int32 m_wraithsMun = 3;
  if (has_m_wraithsmun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_wraithsmun(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulCrystallv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_wraithsItem = 2;
  if (has_m_wraithsitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_wraithsitem(), target);
  }

  // optional int32 m_wraithsMun = 3;
  if (has_m_wraithsmun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_wraithsmun(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulCrystallv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_wraithsItem = 2;
    if (has_m_wraithsitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wraithsitem());
    }

    // optional int32 m_wraithsMun = 3;
    if (has_m_wraithsmun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wraithsmun());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulCrystallv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulCrystallv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulCrystallv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulCrystallv::MergeFrom(const E_SoulCrystallv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_wraithsitem()) {
      set_m_wraithsitem(from.m_wraithsitem());
    }
    if (from.has_m_wraithsmun()) {
      set_m_wraithsmun(from.m_wraithsmun());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulCrystallv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulCrystallv::CopyFrom(const E_SoulCrystallv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulCrystallv::IsInitialized() const {

  return true;
}

void E_SoulCrystallv::Swap(E_SoulCrystallv* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_wraithsitem_, other->m_wraithsitem_);
    std::swap(m_wraithsmun_, other->m_wraithsmun_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulCrystallv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulCrystallv_descriptor_;
  metadata.reflection = E_SoulCrystallv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulCrystallv::kESoulCrystallvListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulCrystallv::Sheet_SoulCrystallv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulCrystallv::InitAsDefaultInstance() {
}

Sheet_SoulCrystallv::Sheet_SoulCrystallv(const Sheet_SoulCrystallv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulCrystallv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulCrystallv::~Sheet_SoulCrystallv() {
  SharedDtor();
}

void Sheet_SoulCrystallv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulCrystallv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulCrystallv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulCrystallv_descriptor_;
}

const Sheet_SoulCrystallv& Sheet_SoulCrystallv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulCrystallv* Sheet_SoulCrystallv::default_instance_ = NULL;

Sheet_SoulCrystallv* Sheet_SoulCrystallv::New() const {
  return new Sheet_SoulCrystallv;
}

void Sheet_SoulCrystallv::Clear() {
  e_soulcrystallv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulCrystallv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulCrystallv E_SoulCrystallv_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulCrystallv_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulcrystallv_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulCrystallv_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulCrystallv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulCrystallv E_SoulCrystallv_List = 1;
  for (int i = 0; i < this->e_soulcrystallv_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulcrystallv_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulCrystallv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulCrystallv E_SoulCrystallv_List = 1;
  for (int i = 0; i < this->e_soulcrystallv_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulcrystallv_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulCrystallv::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulCrystallv E_SoulCrystallv_List = 1;
  total_size += 1 * this->e_soulcrystallv_list_size();
  for (int i = 0; i < this->e_soulcrystallv_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulcrystallv_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulCrystallv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulCrystallv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulCrystallv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulCrystallv::MergeFrom(const Sheet_SoulCrystallv& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulcrystallv_list_.MergeFrom(from.e_soulcrystallv_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulCrystallv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulCrystallv::CopyFrom(const Sheet_SoulCrystallv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulCrystallv::IsInitialized() const {

  return true;
}

void Sheet_SoulCrystallv::Swap(Sheet_SoulCrystallv* other) {
  if (other != this) {
    e_soulcrystallv_list_.Swap(&other->e_soulcrystallv_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulCrystallv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulCrystallv_descriptor_;
  metadata.reflection = Sheet_SoulCrystallv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulCrystaltopAttributeDesc::kMValueFieldNumber;
const int E_SoulCrystaltopAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_SoulCrystaltopAttributeDesc::E_SoulCrystaltopAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulCrystaltopAttributeDesc::InitAsDefaultInstance() {
}

E_SoulCrystaltopAttributeDesc::E_SoulCrystaltopAttributeDesc(const E_SoulCrystaltopAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulCrystaltopAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulCrystaltopAttributeDesc::~E_SoulCrystaltopAttributeDesc() {
  SharedDtor();
}

void E_SoulCrystaltopAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulCrystaltopAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulCrystaltopAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulCrystaltopAttributeDesc_descriptor_;
}

const E_SoulCrystaltopAttributeDesc& E_SoulCrystaltopAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulCrystaltopAttributeDesc* E_SoulCrystaltopAttributeDesc::default_instance_ = NULL;

E_SoulCrystaltopAttributeDesc* E_SoulCrystaltopAttributeDesc::New() const {
  return new E_SoulCrystaltopAttributeDesc;
}

void E_SoulCrystaltopAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulCrystaltopAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulCrystaltopAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulCrystaltopAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulCrystaltopAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulCrystaltopAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulCrystaltopAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulCrystaltopAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulCrystaltopAttributeDesc::MergeFrom(const E_SoulCrystaltopAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulCrystaltopAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulCrystaltopAttributeDesc::CopyFrom(const E_SoulCrystaltopAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulCrystaltopAttributeDesc::IsInitialized() const {

  return true;
}

void E_SoulCrystaltopAttributeDesc::Swap(E_SoulCrystaltopAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulCrystaltopAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulCrystaltopAttributeDesc_descriptor_;
  metadata.reflection = E_SoulCrystaltopAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulCrystaltop::kMIdFieldNumber;
const int E_SoulCrystaltop::kMIntensifyFieldNumber;
const int E_SoulCrystaltop::kMLvFieldNumber;
const int E_SoulCrystaltop::kMTopLvFieldNumber;
const int E_SoulCrystaltop::kMWraithsItemFieldNumber;
const int E_SoulCrystaltop::kMWraithsMunFieldNumber;
const int E_SoulCrystaltop::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_SoulCrystaltop::E_SoulCrystaltop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulCrystaltop::InitAsDefaultInstance() {
}

E_SoulCrystaltop::E_SoulCrystaltop(const E_SoulCrystaltop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulCrystaltop::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_intensify_ = 0;
  m_lv_ = 0;
  m_toplv_ = 0;
  m_wraithsitem_ = 0;
  m_wraithsmun_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulCrystaltop::~E_SoulCrystaltop() {
  SharedDtor();
}

void E_SoulCrystaltop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulCrystaltop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulCrystaltop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulCrystaltop_descriptor_;
}

const E_SoulCrystaltop& E_SoulCrystaltop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulCrystaltop* E_SoulCrystaltop::default_instance_ = NULL;

E_SoulCrystaltop* E_SoulCrystaltop::New() const {
  return new E_SoulCrystaltop;
}

void E_SoulCrystaltop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_intensify_ = 0;
    m_lv_ = 0;
    m_toplv_ = 0;
    m_wraithsitem_ = 0;
    m_wraithsmun_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulCrystaltop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_intensify;
        break;
      }

      // optional int32 m_intensify = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_intensify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_intensify_)));
          set_has_m_intensify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_topLv;
        break;
      }

      // optional int32 m_topLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_topLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_toplv_)));
          set_has_m_toplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_wraithsItem;
        break;
      }

      // optional int32 m_wraithsItem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wraithsItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wraithsitem_)));
          set_has_m_wraithsitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_wraithsMun;
        break;
      }

      // optional int32 m_wraithsMun = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wraithsMun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wraithsmun_)));
          set_has_m_wraithsmun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_SoulCrystaltopAttributeDesc m_attribute = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulCrystaltop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_intensify = 2;
  if (has_m_intensify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_intensify(), output);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lv(), output);
  }

  // optional int32 m_topLv = 4;
  if (has_m_toplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_toplv(), output);
  }

  // optional int32 m_wraithsItem = 5;
  if (has_m_wraithsitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_wraithsitem(), output);
  }

  // optional int32 m_wraithsMun = 6;
  if (has_m_wraithsmun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_wraithsmun(), output);
  }

  // repeated .proto_ff.E_SoulCrystaltopAttributeDesc m_attribute = 7;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulCrystaltop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_intensify = 2;
  if (has_m_intensify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_intensify(), target);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lv(), target);
  }

  // optional int32 m_topLv = 4;
  if (has_m_toplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_toplv(), target);
  }

  // optional int32 m_wraithsItem = 5;
  if (has_m_wraithsitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_wraithsitem(), target);
  }

  // optional int32 m_wraithsMun = 6;
  if (has_m_wraithsmun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_wraithsmun(), target);
  }

  // repeated .proto_ff.E_SoulCrystaltopAttributeDesc m_attribute = 7;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulCrystaltop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_intensify = 2;
    if (has_m_intensify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_intensify());
    }

    // optional int32 m_lv = 3;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_topLv = 4;
    if (has_m_toplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_toplv());
    }

    // optional int32 m_wraithsItem = 5;
    if (has_m_wraithsitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wraithsitem());
    }

    // optional int32 m_wraithsMun = 6;
    if (has_m_wraithsmun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wraithsmun());
    }

  }
  // repeated .proto_ff.E_SoulCrystaltopAttributeDesc m_attribute = 7;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulCrystaltop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulCrystaltop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulCrystaltop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulCrystaltop::MergeFrom(const E_SoulCrystaltop& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_intensify()) {
      set_m_intensify(from.m_intensify());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_toplv()) {
      set_m_toplv(from.m_toplv());
    }
    if (from.has_m_wraithsitem()) {
      set_m_wraithsitem(from.m_wraithsitem());
    }
    if (from.has_m_wraithsmun()) {
      set_m_wraithsmun(from.m_wraithsmun());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulCrystaltop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulCrystaltop::CopyFrom(const E_SoulCrystaltop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulCrystaltop::IsInitialized() const {

  return true;
}

void E_SoulCrystaltop::Swap(E_SoulCrystaltop* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_intensify_, other->m_intensify_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_toplv_, other->m_toplv_);
    std::swap(m_wraithsitem_, other->m_wraithsitem_);
    std::swap(m_wraithsmun_, other->m_wraithsmun_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulCrystaltop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulCrystaltop_descriptor_;
  metadata.reflection = E_SoulCrystaltop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulCrystaltop::kESoulCrystaltopListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulCrystaltop::Sheet_SoulCrystaltop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulCrystaltop::InitAsDefaultInstance() {
}

Sheet_SoulCrystaltop::Sheet_SoulCrystaltop(const Sheet_SoulCrystaltop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulCrystaltop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulCrystaltop::~Sheet_SoulCrystaltop() {
  SharedDtor();
}

void Sheet_SoulCrystaltop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulCrystaltop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulCrystaltop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulCrystaltop_descriptor_;
}

const Sheet_SoulCrystaltop& Sheet_SoulCrystaltop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulCrystaltop* Sheet_SoulCrystaltop::default_instance_ = NULL;

Sheet_SoulCrystaltop* Sheet_SoulCrystaltop::New() const {
  return new Sheet_SoulCrystaltop;
}

void Sheet_SoulCrystaltop::Clear() {
  e_soulcrystaltop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulCrystaltop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulCrystaltop E_SoulCrystaltop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulCrystaltop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulcrystaltop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulCrystaltop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulCrystaltop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulCrystaltop E_SoulCrystaltop_List = 1;
  for (int i = 0; i < this->e_soulcrystaltop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulcrystaltop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulCrystaltop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulCrystaltop E_SoulCrystaltop_List = 1;
  for (int i = 0; i < this->e_soulcrystaltop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulcrystaltop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulCrystaltop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulCrystaltop E_SoulCrystaltop_List = 1;
  total_size += 1 * this->e_soulcrystaltop_list_size();
  for (int i = 0; i < this->e_soulcrystaltop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulcrystaltop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulCrystaltop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulCrystaltop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulCrystaltop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulCrystaltop::MergeFrom(const Sheet_SoulCrystaltop& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulcrystaltop_list_.MergeFrom(from.e_soulcrystaltop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulCrystaltop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulCrystaltop::CopyFrom(const Sheet_SoulCrystaltop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulCrystaltop::IsInitialized() const {

  return true;
}

void Sheet_SoulCrystaltop::Swap(Sheet_SoulCrystaltop* other) {
  if (other != this) {
    e_soulcrystaltop_list_.Swap(&other->e_soulcrystaltop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulCrystaltop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulCrystaltop_descriptor_;
  metadata.reflection = Sheet_SoulCrystaltop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulCrystalhole::kMIdFieldNumber;
const int E_SoulCrystalhole::kMUnlockTypeFieldNumber;
const int E_SoulCrystalhole::kMUnlockParamFieldNumber;
#endif  // !_MSC_VER

E_SoulCrystalhole::E_SoulCrystalhole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulCrystalhole::InitAsDefaultInstance() {
}

E_SoulCrystalhole::E_SoulCrystalhole(const E_SoulCrystalhole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulCrystalhole::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_unlock_type_ = 0;
  m_unlock_param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulCrystalhole::~E_SoulCrystalhole() {
  SharedDtor();
}

void E_SoulCrystalhole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulCrystalhole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulCrystalhole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulCrystalhole_descriptor_;
}

const E_SoulCrystalhole& E_SoulCrystalhole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulCrystalhole* E_SoulCrystalhole::default_instance_ = NULL;

E_SoulCrystalhole* E_SoulCrystalhole::New() const {
  return new E_SoulCrystalhole;
}

void E_SoulCrystalhole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_unlock_type_ = 0;
    m_unlock_param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulCrystalhole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_unlock_type;
        break;
      }

      // optional int32 m_unlock_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_unlock_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_unlock_type_)));
          set_has_m_unlock_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_unlock_param;
        break;
      }

      // optional int32 m_unlock_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_unlock_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_unlock_param_)));
          set_has_m_unlock_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulCrystalhole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_unlock_type = 2;
  if (has_m_unlock_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_unlock_type(), output);
  }

  // optional int32 m_unlock_param = 3;
  if (has_m_unlock_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_unlock_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulCrystalhole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_unlock_type = 2;
  if (has_m_unlock_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_unlock_type(), target);
  }

  // optional int32 m_unlock_param = 3;
  if (has_m_unlock_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_unlock_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulCrystalhole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_unlock_type = 2;
    if (has_m_unlock_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_unlock_type());
    }

    // optional int32 m_unlock_param = 3;
    if (has_m_unlock_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_unlock_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulCrystalhole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulCrystalhole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulCrystalhole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulCrystalhole::MergeFrom(const E_SoulCrystalhole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_unlock_type()) {
      set_m_unlock_type(from.m_unlock_type());
    }
    if (from.has_m_unlock_param()) {
      set_m_unlock_param(from.m_unlock_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulCrystalhole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulCrystalhole::CopyFrom(const E_SoulCrystalhole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulCrystalhole::IsInitialized() const {

  return true;
}

void E_SoulCrystalhole::Swap(E_SoulCrystalhole* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_unlock_type_, other->m_unlock_type_);
    std::swap(m_unlock_param_, other->m_unlock_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulCrystalhole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulCrystalhole_descriptor_;
  metadata.reflection = E_SoulCrystalhole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulCrystalhole::kESoulCrystalholeListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulCrystalhole::Sheet_SoulCrystalhole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulCrystalhole::InitAsDefaultInstance() {
}

Sheet_SoulCrystalhole::Sheet_SoulCrystalhole(const Sheet_SoulCrystalhole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulCrystalhole::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulCrystalhole::~Sheet_SoulCrystalhole() {
  SharedDtor();
}

void Sheet_SoulCrystalhole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulCrystalhole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulCrystalhole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulCrystalhole_descriptor_;
}

const Sheet_SoulCrystalhole& Sheet_SoulCrystalhole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulCrystalhole* Sheet_SoulCrystalhole::default_instance_ = NULL;

Sheet_SoulCrystalhole* Sheet_SoulCrystalhole::New() const {
  return new Sheet_SoulCrystalhole;
}

void Sheet_SoulCrystalhole::Clear() {
  e_soulcrystalhole_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulCrystalhole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulCrystalhole E_SoulCrystalhole_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulCrystalhole_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulcrystalhole_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulCrystalhole_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulCrystalhole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulCrystalhole E_SoulCrystalhole_List = 1;
  for (int i = 0; i < this->e_soulcrystalhole_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulcrystalhole_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulCrystalhole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulCrystalhole E_SoulCrystalhole_List = 1;
  for (int i = 0; i < this->e_soulcrystalhole_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulcrystalhole_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulCrystalhole::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulCrystalhole E_SoulCrystalhole_List = 1;
  total_size += 1 * this->e_soulcrystalhole_list_size();
  for (int i = 0; i < this->e_soulcrystalhole_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulcrystalhole_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulCrystalhole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulCrystalhole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulCrystalhole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulCrystalhole::MergeFrom(const Sheet_SoulCrystalhole& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulcrystalhole_list_.MergeFrom(from.e_soulcrystalhole_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulCrystalhole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulCrystalhole::CopyFrom(const Sheet_SoulCrystalhole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulCrystalhole::IsInitialized() const {

  return true;
}

void Sheet_SoulCrystalhole::Swap(Sheet_SoulCrystalhole* other) {
  if (other != this) {
    e_soulcrystalhole_list_.Swap(&other->e_soulcrystalhole_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulCrystalhole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulCrystalhole_descriptor_;
  metadata.reflection = Sheet_SoulCrystalhole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulFusionFusionDesc::kMNumFieldNumber;
const int E_SoulFusionFusionDesc::kMConditionFieldNumber;
const int E_SoulFusionFusionDesc::kMStarFieldNumber;
const int E_SoulFusionFusionDesc::kMQualityFieldNumber;
#endif  // !_MSC_VER

E_SoulFusionFusionDesc::E_SoulFusionFusionDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulFusionFusionDesc::InitAsDefaultInstance() {
}

E_SoulFusionFusionDesc::E_SoulFusionFusionDesc(const E_SoulFusionFusionDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulFusionFusionDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_condition_ = 0;
  m_star_ = 0;
  m_quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulFusionFusionDesc::~E_SoulFusionFusionDesc() {
  SharedDtor();
}

void E_SoulFusionFusionDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulFusionFusionDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulFusionFusionDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulFusionFusionDesc_descriptor_;
}

const E_SoulFusionFusionDesc& E_SoulFusionFusionDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulFusionFusionDesc* E_SoulFusionFusionDesc::default_instance_ = NULL;

E_SoulFusionFusionDesc* E_SoulFusionFusionDesc::New() const {
  return new E_SoulFusionFusionDesc;
}

void E_SoulFusionFusionDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_condition_ = 0;
    m_star_ = 0;
    m_quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulFusionFusionDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_condition;
        break;
      }

      // optional int32 m_condition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_condition_)));
          set_has_m_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_star;
        break;
      }

      // optional int32 m_star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulFusionFusionDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_condition = 2;
  if (has_m_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_condition(), output);
  }

  // optional int32 m_star = 3;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_star(), output);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulFusionFusionDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_condition = 2;
  if (has_m_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_condition(), target);
  }

  // optional int32 m_star = 3;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_star(), target);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulFusionFusionDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_condition = 2;
    if (has_m_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_condition());
    }

    // optional int32 m_star = 3;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

    // optional int32 m_quality = 4;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulFusionFusionDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulFusionFusionDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulFusionFusionDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulFusionFusionDesc::MergeFrom(const E_SoulFusionFusionDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_condition()) {
      set_m_condition(from.m_condition());
    }
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulFusionFusionDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulFusionFusionDesc::CopyFrom(const E_SoulFusionFusionDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulFusionFusionDesc::IsInitialized() const {

  return true;
}

void E_SoulFusionFusionDesc::Swap(E_SoulFusionFusionDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_condition_, other->m_condition_);
    std::swap(m_star_, other->m_star_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulFusionFusionDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulFusionFusionDesc_descriptor_;
  metadata.reflection = E_SoulFusionFusionDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulFusion::kMIdFieldNumber;
const int E_SoulFusion::kMFusionTypeFieldNumber;
const int E_SoulFusion::kMMakeidFieldNumber;
const int E_SoulFusion::kMStepFieldNumber;
const int E_SoulFusion::kMQualityFieldNumber;
const int E_SoulFusion::kMStarFieldNumber;
const int E_SoulFusion::kMQualityGetFieldNumber;
const int E_SoulFusion::kMStarGetFieldNumber;
const int E_SoulFusion::kMFusionFieldNumber;
#endif  // !_MSC_VER

E_SoulFusion::E_SoulFusion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulFusion::InitAsDefaultInstance() {
}

E_SoulFusion::E_SoulFusion(const E_SoulFusion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulFusion::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_fusiontype_ = 0;
  m_makeid_ = 0;
  m_step_ = 0;
  m_quality_ = 0;
  m_star_ = 0;
  m_qualityget_ = 0;
  m_starget_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulFusion::~E_SoulFusion() {
  SharedDtor();
}

void E_SoulFusion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulFusion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulFusion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulFusion_descriptor_;
}

const E_SoulFusion& E_SoulFusion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulFusion* E_SoulFusion::default_instance_ = NULL;

E_SoulFusion* E_SoulFusion::New() const {
  return new E_SoulFusion;
}

void E_SoulFusion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_fusiontype_ = 0;
    m_makeid_ = 0;
    m_step_ = 0;
    m_quality_ = 0;
    m_star_ = 0;
    m_qualityget_ = 0;
    m_starget_ = 0;
  }
  m_fusion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulFusion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fusionType;
        break;
      }

      // optional int32 m_fusionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fusionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fusiontype_)));
          set_has_m_fusiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_makeid;
        break;
      }

      // optional int32 m_makeid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_makeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_makeid_)));
          set_has_m_makeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_step;
        break;
      }

      // optional int32 m_step = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_step_)));
          set_has_m_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_star;
        break;
      }

      // optional int32 m_star = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_qualityGet;
        break;
      }

      // optional int32 m_qualityGet = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_qualityGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_qualityget_)));
          set_has_m_qualityget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_starGet;
        break;
      }

      // optional int32 m_starGet = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starget_)));
          set_has_m_starget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_fusion;
        break;
      }

      // repeated .proto_ff.E_SoulFusionFusionDesc m_fusion = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_fusion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_fusion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_fusion;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulFusion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_fusionType = 2;
  if (has_m_fusiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fusiontype(), output);
  }

  // optional int32 m_makeid = 3;
  if (has_m_makeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_makeid(), output);
  }

  // optional int32 m_step = 4;
  if (has_m_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_step(), output);
  }

  // optional int32 m_quality = 5;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_quality(), output);
  }

  // optional int32 m_star = 6;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_star(), output);
  }

  // optional int32 m_qualityGet = 7;
  if (has_m_qualityget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_qualityget(), output);
  }

  // optional int32 m_starGet = 8;
  if (has_m_starget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_starget(), output);
  }

  // repeated .proto_ff.E_SoulFusionFusionDesc m_fusion = 9;
  for (int i = 0; i < this->m_fusion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_fusion(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulFusion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_fusionType = 2;
  if (has_m_fusiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fusiontype(), target);
  }

  // optional int32 m_makeid = 3;
  if (has_m_makeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_makeid(), target);
  }

  // optional int32 m_step = 4;
  if (has_m_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_step(), target);
  }

  // optional int32 m_quality = 5;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_quality(), target);
  }

  // optional int32 m_star = 6;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_star(), target);
  }

  // optional int32 m_qualityGet = 7;
  if (has_m_qualityget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_qualityget(), target);
  }

  // optional int32 m_starGet = 8;
  if (has_m_starget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_starget(), target);
  }

  // repeated .proto_ff.E_SoulFusionFusionDesc m_fusion = 9;
  for (int i = 0; i < this->m_fusion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_fusion(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulFusion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_fusionType = 2;
    if (has_m_fusiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fusiontype());
    }

    // optional int32 m_makeid = 3;
    if (has_m_makeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_makeid());
    }

    // optional int32 m_step = 4;
    if (has_m_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_step());
    }

    // optional int32 m_quality = 5;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_star = 6;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

    // optional int32 m_qualityGet = 7;
    if (has_m_qualityget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_qualityget());
    }

    // optional int32 m_starGet = 8;
    if (has_m_starget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starget());
    }

  }
  // repeated .proto_ff.E_SoulFusionFusionDesc m_fusion = 9;
  total_size += 1 * this->m_fusion_size();
  for (int i = 0; i < this->m_fusion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_fusion(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulFusion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulFusion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulFusion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulFusion::MergeFrom(const E_SoulFusion& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_fusion_.MergeFrom(from.m_fusion_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_fusiontype()) {
      set_m_fusiontype(from.m_fusiontype());
    }
    if (from.has_m_makeid()) {
      set_m_makeid(from.m_makeid());
    }
    if (from.has_m_step()) {
      set_m_step(from.m_step());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
    if (from.has_m_qualityget()) {
      set_m_qualityget(from.m_qualityget());
    }
    if (from.has_m_starget()) {
      set_m_starget(from.m_starget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulFusion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulFusion::CopyFrom(const E_SoulFusion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulFusion::IsInitialized() const {

  return true;
}

void E_SoulFusion::Swap(E_SoulFusion* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_fusiontype_, other->m_fusiontype_);
    std::swap(m_makeid_, other->m_makeid_);
    std::swap(m_step_, other->m_step_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_star_, other->m_star_);
    std::swap(m_qualityget_, other->m_qualityget_);
    std::swap(m_starget_, other->m_starget_);
    m_fusion_.Swap(&other->m_fusion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulFusion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulFusion_descriptor_;
  metadata.reflection = E_SoulFusion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulFusion::kESoulFusionListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulFusion::Sheet_SoulFusion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulFusion::InitAsDefaultInstance() {
}

Sheet_SoulFusion::Sheet_SoulFusion(const Sheet_SoulFusion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulFusion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulFusion::~Sheet_SoulFusion() {
  SharedDtor();
}

void Sheet_SoulFusion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulFusion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulFusion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulFusion_descriptor_;
}

const Sheet_SoulFusion& Sheet_SoulFusion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulFusion* Sheet_SoulFusion::default_instance_ = NULL;

Sheet_SoulFusion* Sheet_SoulFusion::New() const {
  return new Sheet_SoulFusion;
}

void Sheet_SoulFusion::Clear() {
  e_soulfusion_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulFusion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulFusion E_SoulFusion_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulFusion_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulfusion_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulFusion_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulFusion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulFusion E_SoulFusion_List = 1;
  for (int i = 0; i < this->e_soulfusion_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulfusion_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulFusion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulFusion E_SoulFusion_List = 1;
  for (int i = 0; i < this->e_soulfusion_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulfusion_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulFusion::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulFusion E_SoulFusion_List = 1;
  total_size += 1 * this->e_soulfusion_list_size();
  for (int i = 0; i < this->e_soulfusion_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulfusion_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulFusion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulFusion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulFusion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulFusion::MergeFrom(const Sheet_SoulFusion& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulfusion_list_.MergeFrom(from.e_soulfusion_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulFusion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulFusion::CopyFrom(const Sheet_SoulFusion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulFusion::IsInitialized() const {

  return true;
}

void Sheet_SoulFusion::Swap(Sheet_SoulFusion* other) {
  if (other != this) {
    e_soulfusion_list_.Swap(&other->e_soulfusion_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulFusion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulFusion_descriptor_;
  metadata.reflection = Sheet_SoulFusion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulAttrAttDesc::kMNumFieldNumber;
const int E_SoulAttrAttDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_SoulAttrAttDesc::E_SoulAttrAttDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulAttrAttDesc::InitAsDefaultInstance() {
}

E_SoulAttrAttDesc::E_SoulAttrAttDesc(const E_SoulAttrAttDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulAttrAttDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulAttrAttDesc::~E_SoulAttrAttDesc() {
  SharedDtor();
}

void E_SoulAttrAttDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulAttrAttDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulAttrAttDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulAttrAttDesc_descriptor_;
}

const E_SoulAttrAttDesc& E_SoulAttrAttDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulAttrAttDesc* E_SoulAttrAttDesc::default_instance_ = NULL;

E_SoulAttrAttDesc* E_SoulAttrAttDesc::New() const {
  return new E_SoulAttrAttDesc;
}

void E_SoulAttrAttDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulAttrAttDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulAttrAttDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulAttrAttDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulAttrAttDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulAttrAttDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulAttrAttDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulAttrAttDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulAttrAttDesc::MergeFrom(const E_SoulAttrAttDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulAttrAttDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulAttrAttDesc::CopyFrom(const E_SoulAttrAttDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulAttrAttDesc::IsInitialized() const {

  return true;
}

void E_SoulAttrAttDesc::Swap(E_SoulAttrAttDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulAttrAttDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulAttrAttDesc_descriptor_;
  metadata.reflection = E_SoulAttrAttDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulAttrStarattDesc::kMNumFieldNumber;
const int E_SoulAttrStarattDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_SoulAttrStarattDesc::E_SoulAttrStarattDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulAttrStarattDesc::InitAsDefaultInstance() {
}

E_SoulAttrStarattDesc::E_SoulAttrStarattDesc(const E_SoulAttrStarattDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulAttrStarattDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulAttrStarattDesc::~E_SoulAttrStarattDesc() {
  SharedDtor();
}

void E_SoulAttrStarattDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulAttrStarattDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulAttrStarattDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulAttrStarattDesc_descriptor_;
}

const E_SoulAttrStarattDesc& E_SoulAttrStarattDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulAttrStarattDesc* E_SoulAttrStarattDesc::default_instance_ = NULL;

E_SoulAttrStarattDesc* E_SoulAttrStarattDesc::New() const {
  return new E_SoulAttrStarattDesc;
}

void E_SoulAttrStarattDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulAttrStarattDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulAttrStarattDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulAttrStarattDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulAttrStarattDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulAttrStarattDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulAttrStarattDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulAttrStarattDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulAttrStarattDesc::MergeFrom(const E_SoulAttrStarattDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulAttrStarattDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulAttrStarattDesc::CopyFrom(const E_SoulAttrStarattDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulAttrStarattDesc::IsInitialized() const {

  return true;
}

void E_SoulAttrStarattDesc::Swap(E_SoulAttrStarattDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulAttrStarattDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulAttrStarattDesc_descriptor_;
  metadata.reflection = E_SoulAttrStarattDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulAttr::kMIdFieldNumber;
const int E_SoulAttr::kMAttrFieldNumber;
const int E_SoulAttr::kMLvFieldNumber;
const int E_SoulAttr::kMAttFieldNumber;
const int E_SoulAttr::kMStarAttFieldNumber;
#endif  // !_MSC_VER

E_SoulAttr::E_SoulAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulAttr::InitAsDefaultInstance() {
}

E_SoulAttr::E_SoulAttr(const E_SoulAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulAttr::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_attr_ = 0;
  m_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulAttr::~E_SoulAttr() {
  SharedDtor();
}

void E_SoulAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulAttr_descriptor_;
}

const E_SoulAttr& E_SoulAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulAttr* E_SoulAttr::default_instance_ = NULL;

E_SoulAttr* E_SoulAttr::New() const {
  return new E_SoulAttr;
}

void E_SoulAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_attr_ = 0;
    m_lv_ = 0;
  }
  m_att_.Clear();
  m_staratt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_attr;
        break;
      }

      // optional int32 m_attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_attr_)));
          set_has_m_attr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_att;
        break;
      }

      // repeated .proto_ff.E_SoulAttrAttDesc m_att = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_att;
        if (input->ExpectTag(42)) goto parse_m_starAtt;
        break;
      }

      // repeated .proto_ff.E_SoulAttrStarattDesc m_starAtt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starAtt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_staratt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_starAtt;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_attr = 2;
  if (has_m_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_attr(), output);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lv(), output);
  }

  // repeated .proto_ff.E_SoulAttrAttDesc m_att = 4;
  for (int i = 0; i < this->m_att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_att(i), output);
  }

  // repeated .proto_ff.E_SoulAttrStarattDesc m_starAtt = 5;
  for (int i = 0; i < this->m_staratt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_staratt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_attr = 2;
  if (has_m_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_attr(), target);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lv(), target);
  }

  // repeated .proto_ff.E_SoulAttrAttDesc m_att = 4;
  for (int i = 0; i < this->m_att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_att(i), target);
  }

  // repeated .proto_ff.E_SoulAttrStarattDesc m_starAtt = 5;
  for (int i = 0; i < this->m_staratt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_staratt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_attr = 2;
    if (has_m_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_attr());
    }

    // optional int32 m_lv = 3;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

  }
  // repeated .proto_ff.E_SoulAttrAttDesc m_att = 4;
  total_size += 1 * this->m_att_size();
  for (int i = 0; i < this->m_att_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_att(i));
  }

  // repeated .proto_ff.E_SoulAttrStarattDesc m_starAtt = 5;
  total_size += 1 * this->m_staratt_size();
  for (int i = 0; i < this->m_staratt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_staratt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulAttr::MergeFrom(const E_SoulAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_att_.MergeFrom(from.m_att_);
  m_staratt_.MergeFrom(from.m_staratt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_attr()) {
      set_m_attr(from.m_attr());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulAttr::CopyFrom(const E_SoulAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulAttr::IsInitialized() const {

  return true;
}

void E_SoulAttr::Swap(E_SoulAttr* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_attr_, other->m_attr_);
    std::swap(m_lv_, other->m_lv_);
    m_att_.Swap(&other->m_att_);
    m_staratt_.Swap(&other->m_staratt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulAttr_descriptor_;
  metadata.reflection = E_SoulAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulAttr::kESoulAttrListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulAttr::Sheet_SoulAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulAttr::InitAsDefaultInstance() {
}

Sheet_SoulAttr::Sheet_SoulAttr(const Sheet_SoulAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulAttr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulAttr::~Sheet_SoulAttr() {
  SharedDtor();
}

void Sheet_SoulAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulAttr_descriptor_;
}

const Sheet_SoulAttr& Sheet_SoulAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulAttr* Sheet_SoulAttr::default_instance_ = NULL;

Sheet_SoulAttr* Sheet_SoulAttr::New() const {
  return new Sheet_SoulAttr;
}

void Sheet_SoulAttr::Clear() {
  e_soulattr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulAttr E_SoulAttr_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulAttr_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulattr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulAttr_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulAttr E_SoulAttr_List = 1;
  for (int i = 0; i < this->e_soulattr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulattr_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulAttr E_SoulAttr_List = 1;
  for (int i = 0; i < this->e_soulattr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulattr_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulAttr::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulAttr E_SoulAttr_List = 1;
  total_size += 1 * this->e_soulattr_list_size();
  for (int i = 0; i < this->e_soulattr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulattr_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulAttr::MergeFrom(const Sheet_SoulAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulattr_list_.MergeFrom(from.e_soulattr_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulAttr::CopyFrom(const Sheet_SoulAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulAttr::IsInitialized() const {

  return true;
}

void Sheet_SoulAttr::Swap(Sheet_SoulAttr* other) {
  if (other != this) {
    e_soulattr_list_.Swap(&other->e_soulattr_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulAttr_descriptor_;
  metadata.reflection = Sheet_SoulAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulSkill::kMIdFieldNumber;
const int E_SoulSkill::kMSkillIdFieldNumber;
const int E_SoulSkill::kMFackSkillFieldNumber;
const int E_SoulSkill::kMSkillLvFieldNumber;
const int E_SoulSkill::kMNeedQuailtyFieldNumber;
const int E_SoulSkill::kMNeedStarFieldNumber;
const int E_SoulSkill::kMAttrFieldNumber;
const int E_SoulSkill::kMNumFieldNumber;
const int E_SoulSkill::kMSkillTypeFieldNumber;
#endif  // !_MSC_VER

E_SoulSkill::E_SoulSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulSkill::InitAsDefaultInstance() {
}

E_SoulSkill::E_SoulSkill(const E_SoulSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulSkill::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_skillid_ = 0;
  m_fackskill_ = 0;
  m_skill_lv_ = 0;
  m_need_quailty_ = 0;
  m_need_star_ = 0;
  m_attr_ = 0;
  m_num_ = 0;
  m_skill_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulSkill::~E_SoulSkill() {
  SharedDtor();
}

void E_SoulSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulSkill_descriptor_;
}

const E_SoulSkill& E_SoulSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulSkill* E_SoulSkill::default_instance_ = NULL;

E_SoulSkill* E_SoulSkill::New() const {
  return new E_SoulSkill;
}

void E_SoulSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_skillid_ = 0;
    m_fackskill_ = 0;
    m_skill_lv_ = 0;
    m_need_quailty_ = 0;
    m_need_star_ = 0;
    m_attr_ = 0;
    m_num_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_skill_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_skillId;
        break;
      }

      // optional int32 m_skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_fackSkill;
        break;
      }

      // optional int32 m_fackSkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fackSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fackskill_)));
          set_has_m_fackskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_skill_lv;
        break;
      }

      // optional int32 m_skill_lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skill_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skill_lv_)));
          set_has_m_skill_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_need_quailty;
        break;
      }

      // optional int32 m_need_quailty = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_need_quailty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_need_quailty_)));
          set_has_m_need_quailty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_need_star;
        break;
      }

      // optional int32 m_need_star = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_need_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_need_star_)));
          set_has_m_need_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_attr;
        break;
      }

      // optional int32 m_attr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_attr_)));
          set_has_m_attr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_skill_type;
        break;
      }

      // optional int32 m_skill_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skill_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skill_type_)));
          set_has_m_skill_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_skillId = 2;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_skillid(), output);
  }

  // optional int32 m_fackSkill = 3;
  if (has_m_fackskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_fackskill(), output);
  }

  // optional int32 m_skill_lv = 4;
  if (has_m_skill_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_skill_lv(), output);
  }

  // optional int32 m_need_quailty = 5;
  if (has_m_need_quailty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_need_quailty(), output);
  }

  // optional int32 m_need_star = 6;
  if (has_m_need_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_need_star(), output);
  }

  // optional int32 m_attr = 7;
  if (has_m_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_attr(), output);
  }

  // optional int32 m_num = 8;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_num(), output);
  }

  // optional int32 m_skill_type = 9;
  if (has_m_skill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_skill_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_skillId = 2;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_skillid(), target);
  }

  // optional int32 m_fackSkill = 3;
  if (has_m_fackskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_fackskill(), target);
  }

  // optional int32 m_skill_lv = 4;
  if (has_m_skill_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_skill_lv(), target);
  }

  // optional int32 m_need_quailty = 5;
  if (has_m_need_quailty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_need_quailty(), target);
  }

  // optional int32 m_need_star = 6;
  if (has_m_need_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_need_star(), target);
  }

  // optional int32 m_attr = 7;
  if (has_m_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_attr(), target);
  }

  // optional int32 m_num = 8;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_num(), target);
  }

  // optional int32 m_skill_type = 9;
  if (has_m_skill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_skill_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_skillId = 2;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_fackSkill = 3;
    if (has_m_fackskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fackskill());
    }

    // optional int32 m_skill_lv = 4;
    if (has_m_skill_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skill_lv());
    }

    // optional int32 m_need_quailty = 5;
    if (has_m_need_quailty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_need_quailty());
    }

    // optional int32 m_need_star = 6;
    if (has_m_need_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_need_star());
    }

    // optional int32 m_attr = 7;
    if (has_m_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_attr());
    }

    // optional int32 m_num = 8;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_skill_type = 9;
    if (has_m_skill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skill_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulSkill::MergeFrom(const E_SoulSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_fackskill()) {
      set_m_fackskill(from.m_fackskill());
    }
    if (from.has_m_skill_lv()) {
      set_m_skill_lv(from.m_skill_lv());
    }
    if (from.has_m_need_quailty()) {
      set_m_need_quailty(from.m_need_quailty());
    }
    if (from.has_m_need_star()) {
      set_m_need_star(from.m_need_star());
    }
    if (from.has_m_attr()) {
      set_m_attr(from.m_attr());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_skill_type()) {
      set_m_skill_type(from.m_skill_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulSkill::CopyFrom(const E_SoulSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulSkill::IsInitialized() const {

  return true;
}

void E_SoulSkill::Swap(E_SoulSkill* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_fackskill_, other->m_fackskill_);
    std::swap(m_skill_lv_, other->m_skill_lv_);
    std::swap(m_need_quailty_, other->m_need_quailty_);
    std::swap(m_need_star_, other->m_need_star_);
    std::swap(m_attr_, other->m_attr_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_skill_type_, other->m_skill_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulSkill_descriptor_;
  metadata.reflection = E_SoulSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulSkill::kESoulSkillListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulSkill::Sheet_SoulSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulSkill::InitAsDefaultInstance() {
}

Sheet_SoulSkill::Sheet_SoulSkill(const Sheet_SoulSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulSkill::~Sheet_SoulSkill() {
  SharedDtor();
}

void Sheet_SoulSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulSkill_descriptor_;
}

const Sheet_SoulSkill& Sheet_SoulSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulSkill* Sheet_SoulSkill::default_instance_ = NULL;

Sheet_SoulSkill* Sheet_SoulSkill::New() const {
  return new Sheet_SoulSkill;
}

void Sheet_SoulSkill::Clear() {
  e_soulskill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulSkill E_SoulSkill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulSkill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulskill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulSkill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulSkill E_SoulSkill_List = 1;
  for (int i = 0; i < this->e_soulskill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulskill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulSkill E_SoulSkill_List = 1;
  for (int i = 0; i < this->e_soulskill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulskill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulSkill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulSkill E_SoulSkill_List = 1;
  total_size += 1 * this->e_soulskill_list_size();
  for (int i = 0; i < this->e_soulskill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulskill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulSkill::MergeFrom(const Sheet_SoulSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulskill_list_.MergeFrom(from.e_soulskill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulSkill::CopyFrom(const Sheet_SoulSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulSkill::IsInitialized() const {

  return true;
}

void Sheet_SoulSkill::Swap(Sheet_SoulSkill* other) {
  if (other != this) {
    e_soulskill_list_.Swap(&other->e_soulskill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulSkill_descriptor_;
  metadata.reflection = Sheet_SoulSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulBone::kMIdFieldNumber;
const int E_SoulBone::kMPositionFieldNumber;
const int E_SoulBone::kMTypeFieldNumber;
const int E_SoulBone::kMQualityFieldNumber;
const int E_SoulBone::kMStarFieldNumber;
const int E_SoulBone::kMAwakeningTimeFieldNumber;
const int E_SoulBone::kMAwakeningNumFieldNumber;
const int E_SoulBone::kMModelIdFieldNumber;
const int E_SoulBone::kMMakeidFieldNumber;
const int E_SoulBone::kMFirstSkillFieldNumber;
const int E_SoulBone::kMAttridFieldNumber;
const int E_SoulBone::kMOtherSkillIdFieldNumber;
#endif  // !_MSC_VER

E_SoulBone::E_SoulBone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulBone::InitAsDefaultInstance() {
}

E_SoulBone::E_SoulBone(const E_SoulBone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulBone::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_position_ = 0;
  m_type_ = 0;
  m_quality_ = 0;
  m_star_ = 0;
  m_awakeningtime_ = 0;
  m_awakeningnum_ = 0;
  m_modelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_makeid_ = 0;
  m_first_skill_ = 0;
  m_attrid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulBone::~E_SoulBone() {
  SharedDtor();
}

void E_SoulBone::SharedDtor() {
  if (m_modelid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_modelid_;
  }
  if (this != default_instance_) {
  }
}

void E_SoulBone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulBone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulBone_descriptor_;
}

const E_SoulBone& E_SoulBone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulBone* E_SoulBone::default_instance_ = NULL;

E_SoulBone* E_SoulBone::New() const {
  return new E_SoulBone;
}

void E_SoulBone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_position_ = 0;
    m_type_ = 0;
    m_quality_ = 0;
    m_star_ = 0;
    m_awakeningtime_ = 0;
    m_awakeningnum_ = 0;
    if (has_m_modelid()) {
      if (m_modelid_ != &::google::protobuf::internal::kEmptyString) {
        m_modelid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_makeid_ = 0;
    m_first_skill_ = 0;
    m_attrid_ = 0;
  }
  m_other_skillid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulBone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_star;
        break;
      }

      // optional int32 m_star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_awakeningTime;
        break;
      }

      // optional int32 m_awakeningTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_awakeningTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_awakeningtime_)));
          set_has_m_awakeningtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_awakeningNum;
        break;
      }

      // optional int32 m_awakeningNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_awakeningNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_awakeningnum_)));
          set_has_m_awakeningnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_modelId;
        break;
      }

      // optional string m_modelId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_modelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_modelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_modelid().data(), this->m_modelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_makeid;
        break;
      }

      // optional int32 m_makeid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_makeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_makeid_)));
          set_has_m_makeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_first_skill;
        break;
      }

      // optional int32 m_first_skill = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_first_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_first_skill_)));
          set_has_m_first_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_attrid;
        break;
      }

      // optional int32 m_attrid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_attrid_)));
          set_has_m_attrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_other_skillId;
        break;
      }

      // repeated int32 m_other_skillId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_other_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_m_other_skillid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_other_skillid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_other_skillId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulBone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_position = 2;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_position(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_quality(), output);
  }

  // optional int32 m_star = 5;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_star(), output);
  }

  // optional int32 m_awakeningTime = 6;
  if (has_m_awakeningtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_awakeningtime(), output);
  }

  // optional int32 m_awakeningNum = 7;
  if (has_m_awakeningnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_awakeningnum(), output);
  }

  // optional string m_modelId = 8;
  if (has_m_modelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_modelid().data(), this->m_modelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_modelid(), output);
  }

  // optional int32 m_makeid = 9;
  if (has_m_makeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_makeid(), output);
  }

  // optional int32 m_first_skill = 10;
  if (has_m_first_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_first_skill(), output);
  }

  // optional int32 m_attrid = 11;
  if (has_m_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_attrid(), output);
  }

  // repeated int32 m_other_skillId = 12;
  for (int i = 0; i < this->m_other_skillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->m_other_skillid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulBone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_position = 2;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_position(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_quality(), target);
  }

  // optional int32 m_star = 5;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_star(), target);
  }

  // optional int32 m_awakeningTime = 6;
  if (has_m_awakeningtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_awakeningtime(), target);
  }

  // optional int32 m_awakeningNum = 7;
  if (has_m_awakeningnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_awakeningnum(), target);
  }

  // optional string m_modelId = 8;
  if (has_m_modelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_modelid().data(), this->m_modelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_modelid(), target);
  }

  // optional int32 m_makeid = 9;
  if (has_m_makeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_makeid(), target);
  }

  // optional int32 m_first_skill = 10;
  if (has_m_first_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_first_skill(), target);
  }

  // optional int32 m_attrid = 11;
  if (has_m_attrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_attrid(), target);
  }

  // repeated int32 m_other_skillId = 12;
  for (int i = 0; i < this->m_other_skillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->m_other_skillid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulBone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_position = 2;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_quality = 4;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_star = 5;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

    // optional int32 m_awakeningTime = 6;
    if (has_m_awakeningtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_awakeningtime());
    }

    // optional int32 m_awakeningNum = 7;
    if (has_m_awakeningnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_awakeningnum());
    }

    // optional string m_modelId = 8;
    if (has_m_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_modelid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_makeid = 9;
    if (has_m_makeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_makeid());
    }

    // optional int32 m_first_skill = 10;
    if (has_m_first_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_first_skill());
    }

    // optional int32 m_attrid = 11;
    if (has_m_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_attrid());
    }

  }
  // repeated int32 m_other_skillId = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_other_skillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_other_skillid(i));
    }
    total_size += 1 * this->m_other_skillid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulBone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulBone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulBone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulBone::MergeFrom(const E_SoulBone& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_other_skillid_.MergeFrom(from.m_other_skillid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
    if (from.has_m_awakeningtime()) {
      set_m_awakeningtime(from.m_awakeningtime());
    }
    if (from.has_m_awakeningnum()) {
      set_m_awakeningnum(from.m_awakeningnum());
    }
    if (from.has_m_modelid()) {
      set_m_modelid(from.m_modelid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_makeid()) {
      set_m_makeid(from.m_makeid());
    }
    if (from.has_m_first_skill()) {
      set_m_first_skill(from.m_first_skill());
    }
    if (from.has_m_attrid()) {
      set_m_attrid(from.m_attrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulBone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulBone::CopyFrom(const E_SoulBone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulBone::IsInitialized() const {

  return true;
}

void E_SoulBone::Swap(E_SoulBone* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_position_, other->m_position_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_star_, other->m_star_);
    std::swap(m_awakeningtime_, other->m_awakeningtime_);
    std::swap(m_awakeningnum_, other->m_awakeningnum_);
    std::swap(m_modelid_, other->m_modelid_);
    std::swap(m_makeid_, other->m_makeid_);
    std::swap(m_first_skill_, other->m_first_skill_);
    std::swap(m_attrid_, other->m_attrid_);
    m_other_skillid_.Swap(&other->m_other_skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulBone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulBone_descriptor_;
  metadata.reflection = E_SoulBone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulBone::kESoulBoneListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulBone::Sheet_SoulBone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulBone::InitAsDefaultInstance() {
}

Sheet_SoulBone::Sheet_SoulBone(const Sheet_SoulBone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulBone::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulBone::~Sheet_SoulBone() {
  SharedDtor();
}

void Sheet_SoulBone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulBone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulBone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulBone_descriptor_;
}

const Sheet_SoulBone& Sheet_SoulBone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulBone* Sheet_SoulBone::default_instance_ = NULL;

Sheet_SoulBone* Sheet_SoulBone::New() const {
  return new Sheet_SoulBone;
}

void Sheet_SoulBone::Clear() {
  e_soulbone_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulBone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulBone E_SoulBone_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulBone_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulbone_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulBone_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulBone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulBone E_SoulBone_List = 1;
  for (int i = 0; i < this->e_soulbone_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulbone_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulBone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulBone E_SoulBone_List = 1;
  for (int i = 0; i < this->e_soulbone_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulbone_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulBone::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulBone E_SoulBone_List = 1;
  total_size += 1 * this->e_soulbone_list_size();
  for (int i = 0; i < this->e_soulbone_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulbone_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulBone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulBone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulBone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulBone::MergeFrom(const Sheet_SoulBone& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulbone_list_.MergeFrom(from.e_soulbone_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulBone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulBone::CopyFrom(const Sheet_SoulBone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulBone::IsInitialized() const {

  return true;
}

void Sheet_SoulBone::Swap(Sheet_SoulBone* other) {
  if (other != this) {
    e_soulbone_list_.Swap(&other->e_soulbone_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulBone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulBone_descriptor_;
  metadata.reflection = Sheet_SoulBone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulBonekill::kMLvFieldNumber;
const int E_SoulBonekill::kMKillBossFieldNumber;
#endif  // !_MSC_VER

E_SoulBonekill::E_SoulBonekill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulBonekill::InitAsDefaultInstance() {
}

E_SoulBonekill::E_SoulBonekill(const E_SoulBonekill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulBonekill::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_killboss_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulBonekill::~E_SoulBonekill() {
  SharedDtor();
}

void E_SoulBonekill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulBonekill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulBonekill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulBonekill_descriptor_;
}

const E_SoulBonekill& E_SoulBonekill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulBonekill* E_SoulBonekill::default_instance_ = NULL;

E_SoulBonekill* E_SoulBonekill::New() const {
  return new E_SoulBonekill;
}

void E_SoulBonekill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_killboss_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulBonekill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_killBoss;
        break;
      }

      // optional int32 m_killBoss = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_killBoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_killboss_)));
          set_has_m_killboss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulBonekill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_killBoss = 2;
  if (has_m_killboss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_killboss(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulBonekill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_killBoss = 2;
  if (has_m_killboss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_killboss(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulBonekill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_killBoss = 2;
    if (has_m_killboss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_killboss());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulBonekill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulBonekill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulBonekill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulBonekill::MergeFrom(const E_SoulBonekill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_killboss()) {
      set_m_killboss(from.m_killboss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulBonekill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulBonekill::CopyFrom(const E_SoulBonekill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulBonekill::IsInitialized() const {

  return true;
}

void E_SoulBonekill::Swap(E_SoulBonekill* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_killboss_, other->m_killboss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulBonekill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulBonekill_descriptor_;
  metadata.reflection = E_SoulBonekill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulBonekill::kESoulBonekillListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulBonekill::Sheet_SoulBonekill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulBonekill::InitAsDefaultInstance() {
}

Sheet_SoulBonekill::Sheet_SoulBonekill(const Sheet_SoulBonekill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulBonekill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulBonekill::~Sheet_SoulBonekill() {
  SharedDtor();
}

void Sheet_SoulBonekill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulBonekill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulBonekill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulBonekill_descriptor_;
}

const Sheet_SoulBonekill& Sheet_SoulBonekill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulBonekill* Sheet_SoulBonekill::default_instance_ = NULL;

Sheet_SoulBonekill* Sheet_SoulBonekill::New() const {
  return new Sheet_SoulBonekill;
}

void Sheet_SoulBonekill::Clear() {
  e_soulbonekill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulBonekill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulBonekill E_SoulBonekill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulBonekill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulbonekill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulBonekill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulBonekill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulBonekill E_SoulBonekill_List = 1;
  for (int i = 0; i < this->e_soulbonekill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulbonekill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulBonekill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulBonekill E_SoulBonekill_List = 1;
  for (int i = 0; i < this->e_soulbonekill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulbonekill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulBonekill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulBonekill E_SoulBonekill_List = 1;
  total_size += 1 * this->e_soulbonekill_list_size();
  for (int i = 0; i < this->e_soulbonekill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulbonekill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulBonekill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulBonekill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulBonekill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulBonekill::MergeFrom(const Sheet_SoulBonekill& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulbonekill_list_.MergeFrom(from.e_soulbonekill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulBonekill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulBonekill::CopyFrom(const Sheet_SoulBonekill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulBonekill::IsInitialized() const {

  return true;
}

void Sheet_SoulBonekill::Swap(Sheet_SoulBonekill* other) {
  if (other != this) {
    e_soulbonekill_list_.Swap(&other->e_soulbonekill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulBonekill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulBonekill_descriptor_;
  metadata.reflection = Sheet_SoulBonekill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulBonestrongTypeDesc::kMNumFieldNumber;
const int E_SoulBonestrongTypeDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_SoulBonestrongTypeDesc::E_SoulBonestrongTypeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulBonestrongTypeDesc::InitAsDefaultInstance() {
}

E_SoulBonestrongTypeDesc::E_SoulBonestrongTypeDesc(const E_SoulBonestrongTypeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulBonestrongTypeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulBonestrongTypeDesc::~E_SoulBonestrongTypeDesc() {
  SharedDtor();
}

void E_SoulBonestrongTypeDesc::SharedDtor() {
  if (m_num_ != &::google::protobuf::internal::kEmptyString) {
    delete m_num_;
  }
  if (this != default_instance_) {
  }
}

void E_SoulBonestrongTypeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulBonestrongTypeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulBonestrongTypeDesc_descriptor_;
}

const E_SoulBonestrongTypeDesc& E_SoulBonestrongTypeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulBonestrongTypeDesc* E_SoulBonestrongTypeDesc::default_instance_ = NULL;

E_SoulBonestrongTypeDesc* E_SoulBonestrongTypeDesc::New() const {
  return new E_SoulBonestrongTypeDesc;
}

void E_SoulBonestrongTypeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_num()) {
      if (m_num_ != &::google::protobuf::internal::kEmptyString) {
        m_num_->clear();
      }
    }
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulBonestrongTypeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_num().data(), this->m_num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulBonestrongTypeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_num().data(), this->m_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulBonestrongTypeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_num().data(), this->m_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulBonestrongTypeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulBonestrongTypeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulBonestrongTypeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulBonestrongTypeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulBonestrongTypeDesc::MergeFrom(const E_SoulBonestrongTypeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulBonestrongTypeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulBonestrongTypeDesc::CopyFrom(const E_SoulBonestrongTypeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulBonestrongTypeDesc::IsInitialized() const {

  return true;
}

void E_SoulBonestrongTypeDesc::Swap(E_SoulBonestrongTypeDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulBonestrongTypeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulBonestrongTypeDesc_descriptor_;
  metadata.reflection = E_SoulBonestrongTypeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulBonestrong::kMIdFieldNumber;
const int E_SoulBonestrong::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_SoulBonestrong::E_SoulBonestrong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulBonestrong::InitAsDefaultInstance() {
}

E_SoulBonestrong::E_SoulBonestrong(const E_SoulBonestrong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulBonestrong::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulBonestrong::~E_SoulBonestrong() {
  SharedDtor();
}

void E_SoulBonestrong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulBonestrong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulBonestrong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulBonestrong_descriptor_;
}

const E_SoulBonestrong& E_SoulBonestrong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulBonestrong* E_SoulBonestrong::default_instance_ = NULL;

E_SoulBonestrong* E_SoulBonestrong::New() const {
  return new E_SoulBonestrong;
}

void E_SoulBonestrong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
  }
  m_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulBonestrong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_type;
        break;
      }

      // repeated .proto_ff.E_SoulBonestrongTypeDesc m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulBonestrong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // repeated .proto_ff.E_SoulBonestrongTypeDesc m_type = 2;
  for (int i = 0; i < this->m_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulBonestrong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // repeated .proto_ff.E_SoulBonestrongTypeDesc m_type = 2;
  for (int i = 0; i < this->m_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulBonestrong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  // repeated .proto_ff.E_SoulBonestrongTypeDesc m_type = 2;
  total_size += 1 * this->m_type_size();
  for (int i = 0; i < this->m_type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_type(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulBonestrong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulBonestrong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulBonestrong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulBonestrong::MergeFrom(const E_SoulBonestrong& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_type_.MergeFrom(from.m_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulBonestrong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulBonestrong::CopyFrom(const E_SoulBonestrong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulBonestrong::IsInitialized() const {

  return true;
}

void E_SoulBonestrong::Swap(E_SoulBonestrong* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    m_type_.Swap(&other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulBonestrong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulBonestrong_descriptor_;
  metadata.reflection = E_SoulBonestrong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulBonestrong::kESoulBonestrongListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulBonestrong::Sheet_SoulBonestrong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulBonestrong::InitAsDefaultInstance() {
}

Sheet_SoulBonestrong::Sheet_SoulBonestrong(const Sheet_SoulBonestrong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulBonestrong::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulBonestrong::~Sheet_SoulBonestrong() {
  SharedDtor();
}

void Sheet_SoulBonestrong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulBonestrong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulBonestrong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulBonestrong_descriptor_;
}

const Sheet_SoulBonestrong& Sheet_SoulBonestrong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulBonestrong* Sheet_SoulBonestrong::default_instance_ = NULL;

Sheet_SoulBonestrong* Sheet_SoulBonestrong::New() const {
  return new Sheet_SoulBonestrong;
}

void Sheet_SoulBonestrong::Clear() {
  e_soulbonestrong_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulBonestrong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulBonestrong E_SoulBonestrong_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulBonestrong_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulbonestrong_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulBonestrong_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulBonestrong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulBonestrong E_SoulBonestrong_List = 1;
  for (int i = 0; i < this->e_soulbonestrong_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulbonestrong_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulBonestrong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulBonestrong E_SoulBonestrong_List = 1;
  for (int i = 0; i < this->e_soulbonestrong_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulbonestrong_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulBonestrong::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulBonestrong E_SoulBonestrong_List = 1;
  total_size += 1 * this->e_soulbonestrong_list_size();
  for (int i = 0; i < this->e_soulbonestrong_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulbonestrong_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulBonestrong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulBonestrong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulBonestrong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulBonestrong::MergeFrom(const Sheet_SoulBonestrong& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulbonestrong_list_.MergeFrom(from.e_soulbonestrong_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulBonestrong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulBonestrong::CopyFrom(const Sheet_SoulBonestrong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulBonestrong::IsInitialized() const {

  return true;
}

void Sheet_SoulBonestrong::Swap(Sheet_SoulBonestrong* other) {
  if (other != this) {
    e_soulbonestrong_list_.Swap(&other->e_soulbonestrong_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulBonestrong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulBonestrong_descriptor_;
  metadata.reflection = Sheet_SoulBonestrong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulGuwen::kMIdFieldNumber;
const int E_SoulGuwen::kMNameFieldNumber;
const int E_SoulGuwen::kMPositionFieldNumber;
const int E_SoulGuwen::kMTypeFieldNumber;
const int E_SoulGuwen::kMQualityFieldNumber;
const int E_SoulGuwen::kMStarFieldNumber;
const int E_SoulGuwen::kMMakeidFieldNumber;
const int E_SoulGuwen::kMAttridFieldNumber;
#endif  // !_MSC_VER

E_SoulGuwen::E_SoulGuwen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulGuwen::InitAsDefaultInstance() {
}

E_SoulGuwen::E_SoulGuwen(const E_SoulGuwen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulGuwen::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_position_ = 0;
  m_type_ = 0;
  m_quality_ = 0;
  m_star_ = 0;
  m_makeid_ = 0;
  m_attrid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulGuwen::~E_SoulGuwen() {
  SharedDtor();
}

void E_SoulGuwen::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_SoulGuwen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulGuwen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulGuwen_descriptor_;
}

const E_SoulGuwen& E_SoulGuwen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulGuwen* E_SoulGuwen::default_instance_ = NULL;

E_SoulGuwen* E_SoulGuwen::New() const {
  return new E_SoulGuwen;
}

void E_SoulGuwen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_position_ = 0;
    m_type_ = 0;
    m_quality_ = 0;
    m_star_ = 0;
    m_makeid_ = 0;
    m_attrid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulGuwen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_star;
        break;
      }

      // optional int32 m_star = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_makeid;
        break;
      }

      // optional int32 m_makeid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_makeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_makeid_)));
          set_has_m_makeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_attrid;
        break;
      }

      // optional int32 m_attrid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_attrid_)));
          set_has_m_attrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulGuwen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_position = 3;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_position(), output);
  }

  // optional int32 m_type = 4;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_type(), output);
  }

  // optional int32 m_quality = 5;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_quality(), output);
  }

  // optional int32 m_star = 6;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_star(), output);
  }

  // optional int32 m_makeid = 7;
  if (has_m_makeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_makeid(), output);
  }

  // optional int32 m_attrid = 8;
  if (has_m_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_attrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulGuwen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_position = 3;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_position(), target);
  }

  // optional int32 m_type = 4;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_type(), target);
  }

  // optional int32 m_quality = 5;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_quality(), target);
  }

  // optional int32 m_star = 6;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_star(), target);
  }

  // optional int32 m_makeid = 7;
  if (has_m_makeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_makeid(), target);
  }

  // optional int32 m_attrid = 8;
  if (has_m_attrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_attrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulGuwen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_position = 3;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

    // optional int32 m_type = 4;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_quality = 5;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_star = 6;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

    // optional int32 m_makeid = 7;
    if (has_m_makeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_makeid());
    }

    // optional int32 m_attrid = 8;
    if (has_m_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_attrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulGuwen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulGuwen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulGuwen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulGuwen::MergeFrom(const E_SoulGuwen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
    if (from.has_m_makeid()) {
      set_m_makeid(from.m_makeid());
    }
    if (from.has_m_attrid()) {
      set_m_attrid(from.m_attrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulGuwen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulGuwen::CopyFrom(const E_SoulGuwen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulGuwen::IsInitialized() const {

  return true;
}

void E_SoulGuwen::Swap(E_SoulGuwen* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_position_, other->m_position_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_star_, other->m_star_);
    std::swap(m_makeid_, other->m_makeid_);
    std::swap(m_attrid_, other->m_attrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulGuwen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulGuwen_descriptor_;
  metadata.reflection = E_SoulGuwen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulGuwen::kESoulGuwenListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulGuwen::Sheet_SoulGuwen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulGuwen::InitAsDefaultInstance() {
}

Sheet_SoulGuwen::Sheet_SoulGuwen(const Sheet_SoulGuwen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulGuwen::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulGuwen::~Sheet_SoulGuwen() {
  SharedDtor();
}

void Sheet_SoulGuwen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulGuwen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulGuwen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulGuwen_descriptor_;
}

const Sheet_SoulGuwen& Sheet_SoulGuwen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulGuwen* Sheet_SoulGuwen::default_instance_ = NULL;

Sheet_SoulGuwen* Sheet_SoulGuwen::New() const {
  return new Sheet_SoulGuwen;
}

void Sheet_SoulGuwen::Clear() {
  e_soulguwen_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulGuwen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulGuwen E_SoulGuwen_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulGuwen_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulguwen_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulGuwen_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulGuwen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulGuwen E_SoulGuwen_List = 1;
  for (int i = 0; i < this->e_soulguwen_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulguwen_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulGuwen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulGuwen E_SoulGuwen_List = 1;
  for (int i = 0; i < this->e_soulguwen_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulguwen_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulGuwen::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulGuwen E_SoulGuwen_List = 1;
  total_size += 1 * this->e_soulguwen_list_size();
  for (int i = 0; i < this->e_soulguwen_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulguwen_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulGuwen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulGuwen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulGuwen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulGuwen::MergeFrom(const Sheet_SoulGuwen& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulguwen_list_.MergeFrom(from.e_soulguwen_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulGuwen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulGuwen::CopyFrom(const Sheet_SoulGuwen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulGuwen::IsInitialized() const {

  return true;
}

void Sheet_SoulGuwen::Swap(Sheet_SoulGuwen* other) {
  if (other != this) {
    e_soulguwen_list_.Swap(&other->e_soulguwen_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulGuwen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulGuwen_descriptor_;
  metadata.reflection = Sheet_SoulGuwen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulGuwentype::kMIdFieldNumber;
const int E_SoulGuwentype::kMNameFieldNumber;
const int E_SoulGuwentype::kMQualityFieldNumber;
#endif  // !_MSC_VER

E_SoulGuwentype::E_SoulGuwentype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulGuwentype::InitAsDefaultInstance() {
}

E_SoulGuwentype::E_SoulGuwentype(const E_SoulGuwentype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulGuwentype::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulGuwentype::~E_SoulGuwentype() {
  SharedDtor();
}

void E_SoulGuwentype::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_SoulGuwentype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulGuwentype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulGuwentype_descriptor_;
}

const E_SoulGuwentype& E_SoulGuwentype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulGuwentype* E_SoulGuwentype::default_instance_ = NULL;

E_SoulGuwentype* E_SoulGuwentype::New() const {
  return new E_SoulGuwentype;
}

void E_SoulGuwentype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulGuwentype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulGuwentype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulGuwentype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulGuwentype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_quality = 3;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulGuwentype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulGuwentype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulGuwentype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulGuwentype::MergeFrom(const E_SoulGuwentype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulGuwentype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulGuwentype::CopyFrom(const E_SoulGuwentype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulGuwentype::IsInitialized() const {

  return true;
}

void E_SoulGuwentype::Swap(E_SoulGuwentype* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulGuwentype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulGuwentype_descriptor_;
  metadata.reflection = E_SoulGuwentype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulGuwentype::kESoulGuwentypeListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulGuwentype::Sheet_SoulGuwentype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulGuwentype::InitAsDefaultInstance() {
}

Sheet_SoulGuwentype::Sheet_SoulGuwentype(const Sheet_SoulGuwentype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulGuwentype::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulGuwentype::~Sheet_SoulGuwentype() {
  SharedDtor();
}

void Sheet_SoulGuwentype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulGuwentype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulGuwentype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulGuwentype_descriptor_;
}

const Sheet_SoulGuwentype& Sheet_SoulGuwentype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulGuwentype* Sheet_SoulGuwentype::default_instance_ = NULL;

Sheet_SoulGuwentype* Sheet_SoulGuwentype::New() const {
  return new Sheet_SoulGuwentype;
}

void Sheet_SoulGuwentype::Clear() {
  e_soulguwentype_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulGuwentype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulGuwentype E_SoulGuwentype_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulGuwentype_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulguwentype_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulGuwentype_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulGuwentype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulGuwentype E_SoulGuwentype_List = 1;
  for (int i = 0; i < this->e_soulguwentype_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulguwentype_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulGuwentype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulGuwentype E_SoulGuwentype_List = 1;
  for (int i = 0; i < this->e_soulguwentype_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulguwentype_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulGuwentype::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulGuwentype E_SoulGuwentype_List = 1;
  total_size += 1 * this->e_soulguwentype_list_size();
  for (int i = 0; i < this->e_soulguwentype_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulguwentype_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulGuwentype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulGuwentype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulGuwentype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulGuwentype::MergeFrom(const Sheet_SoulGuwentype& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulguwentype_list_.MergeFrom(from.e_soulguwentype_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulGuwentype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulGuwentype::CopyFrom(const Sheet_SoulGuwentype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulGuwentype::IsInitialized() const {

  return true;
}

void Sheet_SoulGuwentype::Swap(Sheet_SoulGuwentype* other) {
  if (other != this) {
    e_soulguwentype_list_.Swap(&other->e_soulguwentype_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulGuwentype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulGuwentype_descriptor_;
  metadata.reflection = Sheet_SoulGuwentype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulGuwentypesuitAttributeDesc::kMValueFieldNumber;
const int E_SoulGuwentypesuitAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_SoulGuwentypesuitAttributeDesc::E_SoulGuwentypesuitAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulGuwentypesuitAttributeDesc::InitAsDefaultInstance() {
}

E_SoulGuwentypesuitAttributeDesc::E_SoulGuwentypesuitAttributeDesc(const E_SoulGuwentypesuitAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulGuwentypesuitAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulGuwentypesuitAttributeDesc::~E_SoulGuwentypesuitAttributeDesc() {
  SharedDtor();
}

void E_SoulGuwentypesuitAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulGuwentypesuitAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulGuwentypesuitAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulGuwentypesuitAttributeDesc_descriptor_;
}

const E_SoulGuwentypesuitAttributeDesc& E_SoulGuwentypesuitAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulGuwentypesuitAttributeDesc* E_SoulGuwentypesuitAttributeDesc::default_instance_ = NULL;

E_SoulGuwentypesuitAttributeDesc* E_SoulGuwentypesuitAttributeDesc::New() const {
  return new E_SoulGuwentypesuitAttributeDesc;
}

void E_SoulGuwentypesuitAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulGuwentypesuitAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulGuwentypesuitAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulGuwentypesuitAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulGuwentypesuitAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulGuwentypesuitAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulGuwentypesuitAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulGuwentypesuitAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulGuwentypesuitAttributeDesc::MergeFrom(const E_SoulGuwentypesuitAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulGuwentypesuitAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulGuwentypesuitAttributeDesc::CopyFrom(const E_SoulGuwentypesuitAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulGuwentypesuitAttributeDesc::IsInitialized() const {

  return true;
}

void E_SoulGuwentypesuitAttributeDesc::Swap(E_SoulGuwentypesuitAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulGuwentypesuitAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulGuwentypesuitAttributeDesc_descriptor_;
  metadata.reflection = E_SoulGuwentypesuitAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulGuwentypesuit::kMIdFieldNumber;
const int E_SoulGuwentypesuit::kMTypeIdFieldNumber;
const int E_SoulGuwentypesuit::kMNumFieldNumber;
const int E_SoulGuwentypesuit::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_SoulGuwentypesuit::E_SoulGuwentypesuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulGuwentypesuit::InitAsDefaultInstance() {
}

E_SoulGuwentypesuit::E_SoulGuwentypesuit(const E_SoulGuwentypesuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulGuwentypesuit::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_typeid_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulGuwentypesuit::~E_SoulGuwentypesuit() {
  SharedDtor();
}

void E_SoulGuwentypesuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulGuwentypesuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulGuwentypesuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulGuwentypesuit_descriptor_;
}

const E_SoulGuwentypesuit& E_SoulGuwentypesuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulGuwentypesuit* E_SoulGuwentypesuit::default_instance_ = NULL;

E_SoulGuwentypesuit* E_SoulGuwentypesuit::New() const {
  return new E_SoulGuwentypesuit;
}

void E_SoulGuwentypesuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_typeid_ = 0;
    m_num_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulGuwentypesuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_typeId;
        break;
      }

      // optional int32 m_typeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_typeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typeid_)));
          set_has_m_typeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_SoulGuwentypesuitAttributeDesc m_attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulGuwentypesuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_typeId = 2;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_typeid(), output);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_num(), output);
  }

  // repeated .proto_ff.E_SoulGuwentypesuitAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulGuwentypesuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_typeId = 2;
  if (has_m_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_typeid(), target);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_num(), target);
  }

  // repeated .proto_ff.E_SoulGuwentypesuitAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulGuwentypesuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_typeId = 2;
    if (has_m_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typeid());
    }

    // optional int32 m_num = 3;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  // repeated .proto_ff.E_SoulGuwentypesuitAttributeDesc m_attribute = 4;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulGuwentypesuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulGuwentypesuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulGuwentypesuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulGuwentypesuit::MergeFrom(const E_SoulGuwentypesuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_typeid()) {
      set_m_typeid(from.m_typeid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulGuwentypesuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulGuwentypesuit::CopyFrom(const E_SoulGuwentypesuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulGuwentypesuit::IsInitialized() const {

  return true;
}

void E_SoulGuwentypesuit::Swap(E_SoulGuwentypesuit* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_typeid_, other->m_typeid_);
    std::swap(m_num_, other->m_num_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulGuwentypesuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulGuwentypesuit_descriptor_;
  metadata.reflection = E_SoulGuwentypesuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulGuwentypesuit::kESoulGuwentypesuitListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulGuwentypesuit::Sheet_SoulGuwentypesuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulGuwentypesuit::InitAsDefaultInstance() {
}

Sheet_SoulGuwentypesuit::Sheet_SoulGuwentypesuit(const Sheet_SoulGuwentypesuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulGuwentypesuit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulGuwentypesuit::~Sheet_SoulGuwentypesuit() {
  SharedDtor();
}

void Sheet_SoulGuwentypesuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulGuwentypesuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulGuwentypesuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulGuwentypesuit_descriptor_;
}

const Sheet_SoulGuwentypesuit& Sheet_SoulGuwentypesuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulGuwentypesuit* Sheet_SoulGuwentypesuit::default_instance_ = NULL;

Sheet_SoulGuwentypesuit* Sheet_SoulGuwentypesuit::New() const {
  return new Sheet_SoulGuwentypesuit;
}

void Sheet_SoulGuwentypesuit::Clear() {
  e_soulguwentypesuit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulGuwentypesuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulGuwentypesuit E_SoulGuwentypesuit_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulGuwentypesuit_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulguwentypesuit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulGuwentypesuit_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulGuwentypesuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulGuwentypesuit E_SoulGuwentypesuit_List = 1;
  for (int i = 0; i < this->e_soulguwentypesuit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulguwentypesuit_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulGuwentypesuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulGuwentypesuit E_SoulGuwentypesuit_List = 1;
  for (int i = 0; i < this->e_soulguwentypesuit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulguwentypesuit_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulGuwentypesuit::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulGuwentypesuit E_SoulGuwentypesuit_List = 1;
  total_size += 1 * this->e_soulguwentypesuit_list_size();
  for (int i = 0; i < this->e_soulguwentypesuit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulguwentypesuit_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulGuwentypesuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulGuwentypesuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulGuwentypesuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulGuwentypesuit::MergeFrom(const Sheet_SoulGuwentypesuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulguwentypesuit_list_.MergeFrom(from.e_soulguwentypesuit_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulGuwentypesuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulGuwentypesuit::CopyFrom(const Sheet_SoulGuwentypesuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulGuwentypesuit::IsInitialized() const {

  return true;
}

void Sheet_SoulGuwentypesuit::Swap(Sheet_SoulGuwentypesuit* other) {
  if (other != this) {
    e_soulguwentypesuit_list_.Swap(&other->e_soulguwentypesuit_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulGuwentypesuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulGuwentypesuit_descriptor_;
  metadata.reflection = Sheet_SoulGuwentypesuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulGuwenskillSkillDesc::kMNumFieldNumber;
const int E_SoulGuwenskillSkillDesc::kMLevelFieldNumber;
#endif  // !_MSC_VER

E_SoulGuwenskillSkillDesc::E_SoulGuwenskillSkillDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulGuwenskillSkillDesc::InitAsDefaultInstance() {
}

E_SoulGuwenskillSkillDesc::E_SoulGuwenskillSkillDesc(const E_SoulGuwenskillSkillDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulGuwenskillSkillDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulGuwenskillSkillDesc::~E_SoulGuwenskillSkillDesc() {
  SharedDtor();
}

void E_SoulGuwenskillSkillDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulGuwenskillSkillDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulGuwenskillSkillDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulGuwenskillSkillDesc_descriptor_;
}

const E_SoulGuwenskillSkillDesc& E_SoulGuwenskillSkillDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulGuwenskillSkillDesc* E_SoulGuwenskillSkillDesc::default_instance_ = NULL;

E_SoulGuwenskillSkillDesc* E_SoulGuwenskillSkillDesc::New() const {
  return new E_SoulGuwenskillSkillDesc;
}

void E_SoulGuwenskillSkillDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulGuwenskillSkillDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulGuwenskillSkillDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_level = 2;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulGuwenskillSkillDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_level = 2;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulGuwenskillSkillDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_level = 2;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulGuwenskillSkillDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulGuwenskillSkillDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulGuwenskillSkillDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulGuwenskillSkillDesc::MergeFrom(const E_SoulGuwenskillSkillDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulGuwenskillSkillDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulGuwenskillSkillDesc::CopyFrom(const E_SoulGuwenskillSkillDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulGuwenskillSkillDesc::IsInitialized() const {

  return true;
}

void E_SoulGuwenskillSkillDesc::Swap(E_SoulGuwenskillSkillDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_level_, other->m_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulGuwenskillSkillDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulGuwenskillSkillDesc_descriptor_;
  metadata.reflection = E_SoulGuwenskillSkillDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulGuwenskill::kMIdFieldNumber;
const int E_SoulGuwenskill::kMTypeFieldNumber;
const int E_SoulGuwenskill::kMSkillIdFieldNumber;
const int E_SoulGuwenskill::kMQualityFieldNumber;
const int E_SoulGuwenskill::kMSkillFieldNumber;
#endif  // !_MSC_VER

E_SoulGuwenskill::E_SoulGuwenskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulGuwenskill::InitAsDefaultInstance() {
}

E_SoulGuwenskill::E_SoulGuwenskill(const E_SoulGuwenskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulGuwenskill::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_skillid_ = 0;
  m_quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulGuwenskill::~E_SoulGuwenskill() {
  SharedDtor();
}

void E_SoulGuwenskill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulGuwenskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulGuwenskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulGuwenskill_descriptor_;
}

const E_SoulGuwenskill& E_SoulGuwenskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulGuwenskill* E_SoulGuwenskill::default_instance_ = NULL;

E_SoulGuwenskill* E_SoulGuwenskill::New() const {
  return new E_SoulGuwenskill;
}

void E_SoulGuwenskill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_skillid_ = 0;
    m_quality_ = 0;
  }
  m_skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulGuwenskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_skillId;
        break;
      }

      // optional int32 m_skillId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_skill;
        break;
      }

      // repeated .proto_ff.E_SoulGuwenskillSkillDesc m_skill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulGuwenskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_skillId = 3;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_skillid(), output);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_quality(), output);
  }

  // repeated .proto_ff.E_SoulGuwenskillSkillDesc m_skill = 5;
  for (int i = 0; i < this->m_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulGuwenskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_skillId = 3;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_skillid(), target);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_quality(), target);
  }

  // repeated .proto_ff.E_SoulGuwenskillSkillDesc m_skill = 5;
  for (int i = 0; i < this->m_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulGuwenskill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_skillId = 3;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_quality = 4;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

  }
  // repeated .proto_ff.E_SoulGuwenskillSkillDesc m_skill = 5;
  total_size += 1 * this->m_skill_size();
  for (int i = 0; i < this->m_skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_skill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulGuwenskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulGuwenskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulGuwenskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulGuwenskill::MergeFrom(const E_SoulGuwenskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_skill_.MergeFrom(from.m_skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulGuwenskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulGuwenskill::CopyFrom(const E_SoulGuwenskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulGuwenskill::IsInitialized() const {

  return true;
}

void E_SoulGuwenskill::Swap(E_SoulGuwenskill* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_quality_, other->m_quality_);
    m_skill_.Swap(&other->m_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulGuwenskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulGuwenskill_descriptor_;
  metadata.reflection = E_SoulGuwenskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulGuwenskill::kESoulGuwenskillListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulGuwenskill::Sheet_SoulGuwenskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulGuwenskill::InitAsDefaultInstance() {
}

Sheet_SoulGuwenskill::Sheet_SoulGuwenskill(const Sheet_SoulGuwenskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulGuwenskill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulGuwenskill::~Sheet_SoulGuwenskill() {
  SharedDtor();
}

void Sheet_SoulGuwenskill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulGuwenskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulGuwenskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulGuwenskill_descriptor_;
}

const Sheet_SoulGuwenskill& Sheet_SoulGuwenskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulGuwenskill* Sheet_SoulGuwenskill::default_instance_ = NULL;

Sheet_SoulGuwenskill* Sheet_SoulGuwenskill::New() const {
  return new Sheet_SoulGuwenskill;
}

void Sheet_SoulGuwenskill::Clear() {
  e_soulguwenskill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulGuwenskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulGuwenskill E_SoulGuwenskill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulGuwenskill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulguwenskill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulGuwenskill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulGuwenskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulGuwenskill E_SoulGuwenskill_List = 1;
  for (int i = 0; i < this->e_soulguwenskill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulguwenskill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulGuwenskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulGuwenskill E_SoulGuwenskill_List = 1;
  for (int i = 0; i < this->e_soulguwenskill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulguwenskill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulGuwenskill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulGuwenskill E_SoulGuwenskill_List = 1;
  total_size += 1 * this->e_soulguwenskill_list_size();
  for (int i = 0; i < this->e_soulguwenskill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulguwenskill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulGuwenskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulGuwenskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulGuwenskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulGuwenskill::MergeFrom(const Sheet_SoulGuwenskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulguwenskill_list_.MergeFrom(from.e_soulguwenskill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulGuwenskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulGuwenskill::CopyFrom(const Sheet_SoulGuwenskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulGuwenskill::IsInitialized() const {

  return true;
}

void Sheet_SoulGuwenskill::Swap(Sheet_SoulGuwenskill* other) {
  if (other != this) {
    e_soulguwenskill_list_.Swap(&other->e_soulguwenskill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulGuwenskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulGuwenskill_descriptor_;
  metadata.reflection = Sheet_SoulGuwenskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulGuwensuitAttributeDesc::kMValueFieldNumber;
const int E_SoulGuwensuitAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_SoulGuwensuitAttributeDesc::E_SoulGuwensuitAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulGuwensuitAttributeDesc::InitAsDefaultInstance() {
}

E_SoulGuwensuitAttributeDesc::E_SoulGuwensuitAttributeDesc(const E_SoulGuwensuitAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulGuwensuitAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulGuwensuitAttributeDesc::~E_SoulGuwensuitAttributeDesc() {
  SharedDtor();
}

void E_SoulGuwensuitAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulGuwensuitAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulGuwensuitAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulGuwensuitAttributeDesc_descriptor_;
}

const E_SoulGuwensuitAttributeDesc& E_SoulGuwensuitAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulGuwensuitAttributeDesc* E_SoulGuwensuitAttributeDesc::default_instance_ = NULL;

E_SoulGuwensuitAttributeDesc* E_SoulGuwensuitAttributeDesc::New() const {
  return new E_SoulGuwensuitAttributeDesc;
}

void E_SoulGuwensuitAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulGuwensuitAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulGuwensuitAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulGuwensuitAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulGuwensuitAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulGuwensuitAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulGuwensuitAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulGuwensuitAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulGuwensuitAttributeDesc::MergeFrom(const E_SoulGuwensuitAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulGuwensuitAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulGuwensuitAttributeDesc::CopyFrom(const E_SoulGuwensuitAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulGuwensuitAttributeDesc::IsInitialized() const {

  return true;
}

void E_SoulGuwensuitAttributeDesc::Swap(E_SoulGuwensuitAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulGuwensuitAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulGuwensuitAttributeDesc_descriptor_;
  metadata.reflection = E_SoulGuwensuitAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulGuwensuit::kMIdFieldNumber;
const int E_SoulGuwensuit::kMPositionFieldNumber;
const int E_SoulGuwensuit::kMTypeIdFieldNumber;
const int E_SoulGuwensuit::kMNumFieldNumber;
const int E_SoulGuwensuit::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_SoulGuwensuit::E_SoulGuwensuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulGuwensuit::InitAsDefaultInstance() {
}

E_SoulGuwensuit::E_SoulGuwensuit(const E_SoulGuwensuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulGuwensuit::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_position_ = 0;
  m_typeid_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulGuwensuit::~E_SoulGuwensuit() {
  SharedDtor();
}

void E_SoulGuwensuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulGuwensuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulGuwensuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulGuwensuit_descriptor_;
}

const E_SoulGuwensuit& E_SoulGuwensuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulGuwensuit* E_SoulGuwensuit::default_instance_ = NULL;

E_SoulGuwensuit* E_SoulGuwensuit::New() const {
  return new E_SoulGuwensuit;
}

void E_SoulGuwensuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_position_ = 0;
    m_typeid_ = 0;
    m_num_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulGuwensuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_typeId;
        break;
      }

      // optional int32 m_typeId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_typeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typeid_)));
          set_has_m_typeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_SoulGuwensuitAttributeDesc m_attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulGuwensuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_position = 2;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_position(), output);
  }

  // optional int32 m_typeId = 3;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_typeid(), output);
  }

  // optional int32 m_num = 4;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_num(), output);
  }

  // repeated .proto_ff.E_SoulGuwensuitAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulGuwensuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_position = 2;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_position(), target);
  }

  // optional int32 m_typeId = 3;
  if (has_m_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_typeid(), target);
  }

  // optional int32 m_num = 4;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_num(), target);
  }

  // repeated .proto_ff.E_SoulGuwensuitAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulGuwensuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_position = 2;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

    // optional int32 m_typeId = 3;
    if (has_m_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typeid());
    }

    // optional int32 m_num = 4;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  // repeated .proto_ff.E_SoulGuwensuitAttributeDesc m_attribute = 5;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulGuwensuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulGuwensuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulGuwensuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulGuwensuit::MergeFrom(const E_SoulGuwensuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_typeid()) {
      set_m_typeid(from.m_typeid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulGuwensuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulGuwensuit::CopyFrom(const E_SoulGuwensuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulGuwensuit::IsInitialized() const {

  return true;
}

void E_SoulGuwensuit::Swap(E_SoulGuwensuit* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_position_, other->m_position_);
    std::swap(m_typeid_, other->m_typeid_);
    std::swap(m_num_, other->m_num_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulGuwensuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulGuwensuit_descriptor_;
  metadata.reflection = E_SoulGuwensuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulGuwensuit::kESoulGuwensuitListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulGuwensuit::Sheet_SoulGuwensuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulGuwensuit::InitAsDefaultInstance() {
}

Sheet_SoulGuwensuit::Sheet_SoulGuwensuit(const Sheet_SoulGuwensuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulGuwensuit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulGuwensuit::~Sheet_SoulGuwensuit() {
  SharedDtor();
}

void Sheet_SoulGuwensuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulGuwensuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulGuwensuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulGuwensuit_descriptor_;
}

const Sheet_SoulGuwensuit& Sheet_SoulGuwensuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulGuwensuit* Sheet_SoulGuwensuit::default_instance_ = NULL;

Sheet_SoulGuwensuit* Sheet_SoulGuwensuit::New() const {
  return new Sheet_SoulGuwensuit;
}

void Sheet_SoulGuwensuit::Clear() {
  e_soulguwensuit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulGuwensuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulGuwensuit E_SoulGuwensuit_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulGuwensuit_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulguwensuit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulGuwensuit_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulGuwensuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulGuwensuit E_SoulGuwensuit_List = 1;
  for (int i = 0; i < this->e_soulguwensuit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulguwensuit_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulGuwensuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulGuwensuit E_SoulGuwensuit_List = 1;
  for (int i = 0; i < this->e_soulguwensuit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulguwensuit_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulGuwensuit::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulGuwensuit E_SoulGuwensuit_List = 1;
  total_size += 1 * this->e_soulguwensuit_list_size();
  for (int i = 0; i < this->e_soulguwensuit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulguwensuit_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulGuwensuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulGuwensuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulGuwensuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulGuwensuit::MergeFrom(const Sheet_SoulGuwensuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulguwensuit_list_.MergeFrom(from.e_soulguwensuit_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulGuwensuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulGuwensuit::CopyFrom(const Sheet_SoulGuwensuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulGuwensuit::IsInitialized() const {

  return true;
}

void Sheet_SoulGuwensuit::Swap(Sheet_SoulGuwensuit* other) {
  if (other != this) {
    e_soulguwensuit_list_.Swap(&other->e_soulguwensuit_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulGuwensuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulGuwensuit_descriptor_;
  metadata.reflection = Sheet_SoulGuwensuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulAffixesAttributeDesc::kMValueFieldNumber;
const int E_SoulAffixesAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_SoulAffixesAttributeDesc::E_SoulAffixesAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulAffixesAttributeDesc::InitAsDefaultInstance() {
}

E_SoulAffixesAttributeDesc::E_SoulAffixesAttributeDesc(const E_SoulAffixesAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulAffixesAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulAffixesAttributeDesc::~E_SoulAffixesAttributeDesc() {
  SharedDtor();
}

void E_SoulAffixesAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulAffixesAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulAffixesAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulAffixesAttributeDesc_descriptor_;
}

const E_SoulAffixesAttributeDesc& E_SoulAffixesAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulAffixesAttributeDesc* E_SoulAffixesAttributeDesc::default_instance_ = NULL;

E_SoulAffixesAttributeDesc* E_SoulAffixesAttributeDesc::New() const {
  return new E_SoulAffixesAttributeDesc;
}

void E_SoulAffixesAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulAffixesAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulAffixesAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulAffixesAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulAffixesAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulAffixesAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulAffixesAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulAffixesAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulAffixesAttributeDesc::MergeFrom(const E_SoulAffixesAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulAffixesAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulAffixesAttributeDesc::CopyFrom(const E_SoulAffixesAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulAffixesAttributeDesc::IsInitialized() const {

  return true;
}

void E_SoulAffixesAttributeDesc::Swap(E_SoulAffixesAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulAffixesAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulAffixesAttributeDesc_descriptor_;
  metadata.reflection = E_SoulAffixesAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulAffixes::kMIdFieldNumber;
const int E_SoulAffixes::kMNameFieldNumber;
const int E_SoulAffixes::kMTypeFieldNumber;
const int E_SoulAffixes::kMQualityFieldNumber;
const int E_SoulAffixes::kMProbabilityFieldNumber;
const int E_SoulAffixes::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_SoulAffixes::E_SoulAffixes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulAffixes::InitAsDefaultInstance() {
}

E_SoulAffixes::E_SoulAffixes(const E_SoulAffixes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulAffixes::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_type_ = 0;
  m_quality_ = 0;
  m_probability_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulAffixes::~E_SoulAffixes() {
  SharedDtor();
}

void E_SoulAffixes::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_SoulAffixes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulAffixes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulAffixes_descriptor_;
}

const E_SoulAffixes& E_SoulAffixes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulAffixes* E_SoulAffixes::default_instance_ = NULL;

E_SoulAffixes* E_SoulAffixes::New() const {
  return new E_SoulAffixes;
}

void E_SoulAffixes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_type_ = 0;
    m_quality_ = 0;
    m_probability_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulAffixes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_probability;
        break;
      }

      // optional int32 m_probability = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_probability_)));
          set_has_m_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_SoulAffixesAttributeDesc m_attribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulAffixes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_quality(), output);
  }

  // optional int32 m_probability = 5;
  if (has_m_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_probability(), output);
  }

  // repeated .proto_ff.E_SoulAffixesAttributeDesc m_attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulAffixes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_quality(), target);
  }

  // optional int32 m_probability = 5;
  if (has_m_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_probability(), target);
  }

  // repeated .proto_ff.E_SoulAffixesAttributeDesc m_attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulAffixes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_quality = 4;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_probability = 5;
    if (has_m_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_probability());
    }

  }
  // repeated .proto_ff.E_SoulAffixesAttributeDesc m_attribute = 6;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulAffixes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulAffixes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulAffixes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulAffixes::MergeFrom(const E_SoulAffixes& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_probability()) {
      set_m_probability(from.m_probability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulAffixes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulAffixes::CopyFrom(const E_SoulAffixes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulAffixes::IsInitialized() const {

  return true;
}

void E_SoulAffixes::Swap(E_SoulAffixes* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_probability_, other->m_probability_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulAffixes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulAffixes_descriptor_;
  metadata.reflection = E_SoulAffixes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulAffixes::kESoulAffixesListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulAffixes::Sheet_SoulAffixes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulAffixes::InitAsDefaultInstance() {
}

Sheet_SoulAffixes::Sheet_SoulAffixes(const Sheet_SoulAffixes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulAffixes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulAffixes::~Sheet_SoulAffixes() {
  SharedDtor();
}

void Sheet_SoulAffixes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulAffixes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulAffixes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulAffixes_descriptor_;
}

const Sheet_SoulAffixes& Sheet_SoulAffixes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulAffixes* Sheet_SoulAffixes::default_instance_ = NULL;

Sheet_SoulAffixes* Sheet_SoulAffixes::New() const {
  return new Sheet_SoulAffixes;
}

void Sheet_SoulAffixes::Clear() {
  e_soulaffixes_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulAffixes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulAffixes E_SoulAffixes_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulAffixes_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulaffixes_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulAffixes_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulAffixes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulAffixes E_SoulAffixes_List = 1;
  for (int i = 0; i < this->e_soulaffixes_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulaffixes_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulAffixes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulAffixes E_SoulAffixes_List = 1;
  for (int i = 0; i < this->e_soulaffixes_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulaffixes_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulAffixes::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulAffixes E_SoulAffixes_List = 1;
  total_size += 1 * this->e_soulaffixes_list_size();
  for (int i = 0; i < this->e_soulaffixes_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulaffixes_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulAffixes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulAffixes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulAffixes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulAffixes::MergeFrom(const Sheet_SoulAffixes& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulaffixes_list_.MergeFrom(from.e_soulaffixes_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulAffixes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulAffixes::CopyFrom(const Sheet_SoulAffixes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulAffixes::IsInitialized() const {

  return true;
}

void Sheet_SoulAffixes::Swap(Sheet_SoulAffixes* other) {
  if (other != this) {
    e_soulaffixes_list_.Swap(&other->e_soulaffixes_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulAffixes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulAffixes_descriptor_;
  metadata.reflection = Sheet_SoulAffixes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulAffixesfumo::kMIdFieldNumber;
const int E_SoulAffixesfumo::kMItemFieldNumber;
const int E_SoulAffixesfumo::kMNumFieldNumber;
const int E_SoulAffixesfumo::kMLockFieldNumber;
const int E_SoulAffixesfumo::kMLockNumFieldNumber;
#endif  // !_MSC_VER

E_SoulAffixesfumo::E_SoulAffixesfumo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulAffixesfumo::InitAsDefaultInstance() {
}

E_SoulAffixesfumo::E_SoulAffixesfumo(const E_SoulAffixesfumo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulAffixesfumo::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_item_ = 0;
  m_num_ = 0;
  m_lock_ = 0;
  m_locknum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulAffixesfumo::~E_SoulAffixesfumo() {
  SharedDtor();
}

void E_SoulAffixesfumo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulAffixesfumo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulAffixesfumo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulAffixesfumo_descriptor_;
}

const E_SoulAffixesfumo& E_SoulAffixesfumo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulAffixesfumo* E_SoulAffixesfumo::default_instance_ = NULL;

E_SoulAffixesfumo* E_SoulAffixesfumo::New() const {
  return new E_SoulAffixesfumo;
}

void E_SoulAffixesfumo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_item_ = 0;
    m_num_ = 0;
    m_lock_ = 0;
    m_locknum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulAffixesfumo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_item;
        break;
      }

      // optional int32 m_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lock;
        break;
      }

      // optional int32 m_lock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lock_)));
          set_has_m_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lockNum;
        break;
      }

      // optional int32 m_lockNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lockNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_locknum_)));
          set_has_m_locknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulAffixesfumo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_item = 2;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_item(), output);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_num(), output);
  }

  // optional int32 m_lock = 4;
  if (has_m_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lock(), output);
  }

  // optional int32 m_lockNum = 5;
  if (has_m_locknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_locknum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulAffixesfumo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_item = 2;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_item(), target);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_num(), target);
  }

  // optional int32 m_lock = 4;
  if (has_m_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_lock(), target);
  }

  // optional int32 m_lockNum = 5;
  if (has_m_locknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_locknum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulAffixesfumo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_item = 2;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_item());
    }

    // optional int32 m_num = 3;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_lock = 4;
    if (has_m_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lock());
    }

    // optional int32 m_lockNum = 5;
    if (has_m_locknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_locknum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulAffixesfumo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulAffixesfumo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulAffixesfumo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulAffixesfumo::MergeFrom(const E_SoulAffixesfumo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_lock()) {
      set_m_lock(from.m_lock());
    }
    if (from.has_m_locknum()) {
      set_m_locknum(from.m_locknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulAffixesfumo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulAffixesfumo::CopyFrom(const E_SoulAffixesfumo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulAffixesfumo::IsInitialized() const {

  return true;
}

void E_SoulAffixesfumo::Swap(E_SoulAffixesfumo* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_item_, other->m_item_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_lock_, other->m_lock_);
    std::swap(m_locknum_, other->m_locknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulAffixesfumo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulAffixesfumo_descriptor_;
  metadata.reflection = E_SoulAffixesfumo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulAffixesfumo::kESoulAffixesfumoListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulAffixesfumo::Sheet_SoulAffixesfumo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulAffixesfumo::InitAsDefaultInstance() {
}

Sheet_SoulAffixesfumo::Sheet_SoulAffixesfumo(const Sheet_SoulAffixesfumo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulAffixesfumo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulAffixesfumo::~Sheet_SoulAffixesfumo() {
  SharedDtor();
}

void Sheet_SoulAffixesfumo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulAffixesfumo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulAffixesfumo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulAffixesfumo_descriptor_;
}

const Sheet_SoulAffixesfumo& Sheet_SoulAffixesfumo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulAffixesfumo* Sheet_SoulAffixesfumo::default_instance_ = NULL;

Sheet_SoulAffixesfumo* Sheet_SoulAffixesfumo::New() const {
  return new Sheet_SoulAffixesfumo;
}

void Sheet_SoulAffixesfumo::Clear() {
  e_soulaffixesfumo_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulAffixesfumo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulAffixesfumo E_SoulAffixesfumo_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulAffixesfumo_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulaffixesfumo_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulAffixesfumo_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulAffixesfumo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulAffixesfumo E_SoulAffixesfumo_List = 1;
  for (int i = 0; i < this->e_soulaffixesfumo_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulaffixesfumo_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulAffixesfumo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulAffixesfumo E_SoulAffixesfumo_List = 1;
  for (int i = 0; i < this->e_soulaffixesfumo_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulaffixesfumo_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulAffixesfumo::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulAffixesfumo E_SoulAffixesfumo_List = 1;
  total_size += 1 * this->e_soulaffixesfumo_list_size();
  for (int i = 0; i < this->e_soulaffixesfumo_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulaffixesfumo_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulAffixesfumo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulAffixesfumo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulAffixesfumo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulAffixesfumo::MergeFrom(const Sheet_SoulAffixesfumo& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulaffixesfumo_list_.MergeFrom(from.e_soulaffixesfumo_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulAffixesfumo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulAffixesfumo::CopyFrom(const Sheet_SoulAffixesfumo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulAffixesfumo::IsInitialized() const {

  return true;
}

void Sheet_SoulAffixesfumo::Swap(Sheet_SoulAffixesfumo* other) {
  if (other != this) {
    e_soulaffixesfumo_list_.Swap(&other->e_soulaffixesfumo_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulAffixesfumo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulAffixesfumo_descriptor_;
  metadata.reflection = Sheet_SoulAffixesfumo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulAffixessuitSkillDesc::kMLevelFieldNumber;
const int E_SoulAffixessuitSkillDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_SoulAffixessuitSkillDesc::E_SoulAffixessuitSkillDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulAffixessuitSkillDesc::InitAsDefaultInstance() {
}

E_SoulAffixessuitSkillDesc::E_SoulAffixessuitSkillDesc(const E_SoulAffixessuitSkillDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulAffixessuitSkillDesc::SharedCtor() {
  _cached_size_ = 0;
  m_level_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulAffixessuitSkillDesc::~E_SoulAffixessuitSkillDesc() {
  SharedDtor();
}

void E_SoulAffixessuitSkillDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulAffixessuitSkillDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulAffixessuitSkillDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulAffixessuitSkillDesc_descriptor_;
}

const E_SoulAffixessuitSkillDesc& E_SoulAffixessuitSkillDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulAffixessuitSkillDesc* E_SoulAffixessuitSkillDesc::default_instance_ = NULL;

E_SoulAffixessuitSkillDesc* E_SoulAffixessuitSkillDesc::New() const {
  return new E_SoulAffixessuitSkillDesc;
}

void E_SoulAffixessuitSkillDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_level_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulAffixessuitSkillDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulAffixessuitSkillDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_level = 1;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_level(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulAffixessuitSkillDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_level = 1;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_level(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulAffixessuitSkillDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_level = 1;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulAffixessuitSkillDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulAffixessuitSkillDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulAffixessuitSkillDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulAffixessuitSkillDesc::MergeFrom(const E_SoulAffixessuitSkillDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulAffixessuitSkillDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulAffixessuitSkillDesc::CopyFrom(const E_SoulAffixessuitSkillDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulAffixessuitSkillDesc::IsInitialized() const {

  return true;
}

void E_SoulAffixessuitSkillDesc::Swap(E_SoulAffixessuitSkillDesc* other) {
  if (other != this) {
    std::swap(m_level_, other->m_level_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulAffixessuitSkillDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulAffixessuitSkillDesc_descriptor_;
  metadata.reflection = E_SoulAffixessuitSkillDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulAffixessuitAttributeDesc::kMValueFieldNumber;
const int E_SoulAffixessuitAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_SoulAffixessuitAttributeDesc::E_SoulAffixessuitAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulAffixessuitAttributeDesc::InitAsDefaultInstance() {
}

E_SoulAffixessuitAttributeDesc::E_SoulAffixessuitAttributeDesc(const E_SoulAffixessuitAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulAffixessuitAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulAffixessuitAttributeDesc::~E_SoulAffixessuitAttributeDesc() {
  SharedDtor();
}

void E_SoulAffixessuitAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulAffixessuitAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulAffixessuitAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulAffixessuitAttributeDesc_descriptor_;
}

const E_SoulAffixessuitAttributeDesc& E_SoulAffixessuitAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulAffixessuitAttributeDesc* E_SoulAffixessuitAttributeDesc::default_instance_ = NULL;

E_SoulAffixessuitAttributeDesc* E_SoulAffixessuitAttributeDesc::New() const {
  return new E_SoulAffixessuitAttributeDesc;
}

void E_SoulAffixessuitAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulAffixessuitAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulAffixessuitAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulAffixessuitAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulAffixessuitAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulAffixessuitAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulAffixessuitAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulAffixessuitAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulAffixessuitAttributeDesc::MergeFrom(const E_SoulAffixessuitAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulAffixessuitAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulAffixessuitAttributeDesc::CopyFrom(const E_SoulAffixessuitAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulAffixessuitAttributeDesc::IsInitialized() const {

  return true;
}

void E_SoulAffixessuitAttributeDesc::Swap(E_SoulAffixessuitAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulAffixessuitAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulAffixessuitAttributeDesc_descriptor_;
  metadata.reflection = E_SoulAffixessuitAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulAffixessuit::kMIdFieldNumber;
const int E_SoulAffixessuit::kMAffixesIdFieldNumber;
const int E_SoulAffixessuit::kMNumFieldNumber;
const int E_SoulAffixessuit::kMSkillFieldNumber;
const int E_SoulAffixessuit::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_SoulAffixessuit::E_SoulAffixessuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulAffixessuit::InitAsDefaultInstance() {
}

E_SoulAffixessuit::E_SoulAffixessuit(const E_SoulAffixessuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulAffixessuit::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_affixesid_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulAffixessuit::~E_SoulAffixessuit() {
  SharedDtor();
}

void E_SoulAffixessuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulAffixessuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulAffixessuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulAffixessuit_descriptor_;
}

const E_SoulAffixessuit& E_SoulAffixessuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulAffixessuit* E_SoulAffixessuit::default_instance_ = NULL;

E_SoulAffixessuit* E_SoulAffixessuit::New() const {
  return new E_SoulAffixessuit;
}

void E_SoulAffixessuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_affixesid_ = 0;
    m_num_ = 0;
  }
  m_skill_.Clear();
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulAffixessuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_affixesId;
        break;
      }

      // optional int32 m_affixesId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_affixesId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_affixesid_)));
          set_has_m_affixesid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_skill;
        break;
      }

      // repeated .proto_ff.E_SoulAffixessuitSkillDesc m_skill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_skill;
        if (input->ExpectTag(42)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_SoulAffixessuitAttributeDesc m_attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulAffixessuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_affixesId = 2;
  if (has_m_affixesid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_affixesid(), output);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_num(), output);
  }

  // repeated .proto_ff.E_SoulAffixessuitSkillDesc m_skill = 4;
  for (int i = 0; i < this->m_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_skill(i), output);
  }

  // repeated .proto_ff.E_SoulAffixessuitAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulAffixessuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_affixesId = 2;
  if (has_m_affixesid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_affixesid(), target);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_num(), target);
  }

  // repeated .proto_ff.E_SoulAffixessuitSkillDesc m_skill = 4;
  for (int i = 0; i < this->m_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_skill(i), target);
  }

  // repeated .proto_ff.E_SoulAffixessuitAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulAffixessuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_affixesId = 2;
    if (has_m_affixesid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_affixesid());
    }

    // optional int32 m_num = 3;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  // repeated .proto_ff.E_SoulAffixessuitSkillDesc m_skill = 4;
  total_size += 1 * this->m_skill_size();
  for (int i = 0; i < this->m_skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_skill(i));
  }

  // repeated .proto_ff.E_SoulAffixessuitAttributeDesc m_attribute = 5;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulAffixessuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulAffixessuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulAffixessuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulAffixessuit::MergeFrom(const E_SoulAffixessuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_skill_.MergeFrom(from.m_skill_);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_affixesid()) {
      set_m_affixesid(from.m_affixesid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulAffixessuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulAffixessuit::CopyFrom(const E_SoulAffixessuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulAffixessuit::IsInitialized() const {

  return true;
}

void E_SoulAffixessuit::Swap(E_SoulAffixessuit* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_affixesid_, other->m_affixesid_);
    std::swap(m_num_, other->m_num_);
    m_skill_.Swap(&other->m_skill_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulAffixessuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulAffixessuit_descriptor_;
  metadata.reflection = E_SoulAffixessuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulAffixessuit::kESoulAffixessuitListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulAffixessuit::Sheet_SoulAffixessuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulAffixessuit::InitAsDefaultInstance() {
}

Sheet_SoulAffixessuit::Sheet_SoulAffixessuit(const Sheet_SoulAffixessuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulAffixessuit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulAffixessuit::~Sheet_SoulAffixessuit() {
  SharedDtor();
}

void Sheet_SoulAffixessuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulAffixessuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulAffixessuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulAffixessuit_descriptor_;
}

const Sheet_SoulAffixessuit& Sheet_SoulAffixessuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulAffixessuit* Sheet_SoulAffixessuit::default_instance_ = NULL;

Sheet_SoulAffixessuit* Sheet_SoulAffixessuit::New() const {
  return new Sheet_SoulAffixessuit;
}

void Sheet_SoulAffixessuit::Clear() {
  e_soulaffixessuit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulAffixessuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulAffixessuit E_SoulAffixessuit_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulAffixessuit_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulaffixessuit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulAffixessuit_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulAffixessuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulAffixessuit E_SoulAffixessuit_List = 1;
  for (int i = 0; i < this->e_soulaffixessuit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulaffixessuit_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulAffixessuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulAffixessuit E_SoulAffixessuit_List = 1;
  for (int i = 0; i < this->e_soulaffixessuit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulaffixessuit_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulAffixessuit::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulAffixessuit E_SoulAffixessuit_List = 1;
  total_size += 1 * this->e_soulaffixessuit_list_size();
  for (int i = 0; i < this->e_soulaffixessuit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulaffixessuit_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulAffixessuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulAffixessuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulAffixessuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulAffixessuit::MergeFrom(const Sheet_SoulAffixessuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulaffixessuit_list_.MergeFrom(from.e_soulaffixessuit_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulAffixessuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulAffixessuit::CopyFrom(const Sheet_SoulAffixessuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulAffixessuit::IsInitialized() const {

  return true;
}

void Sheet_SoulAffixessuit::Swap(Sheet_SoulAffixessuit* other) {
  if (other != this) {
    e_soulaffixessuit_list_.Swap(&other->e_soulaffixessuit_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulAffixessuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulAffixessuit_descriptor_;
  metadata.reflection = Sheet_SoulAffixessuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_SoulGuwenattr::kMIdFieldNumber;
const int E_SoulGuwenattr::kMSkillFieldNumber;
const int E_SoulGuwenattr::kMLvFieldNumber;
const int E_SoulGuwenattr::kMAttFieldNumber;
const int E_SoulGuwenattr::kMNumFieldNumber;
#endif  // !_MSC_VER

E_SoulGuwenattr::E_SoulGuwenattr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_SoulGuwenattr::InitAsDefaultInstance() {
}

E_SoulGuwenattr::E_SoulGuwenattr(const E_SoulGuwenattr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_SoulGuwenattr::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_skill_ = 0;
  m_lv_ = 0;
  m_att_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_SoulGuwenattr::~E_SoulGuwenattr() {
  SharedDtor();
}

void E_SoulGuwenattr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_SoulGuwenattr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_SoulGuwenattr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SoulGuwenattr_descriptor_;
}

const E_SoulGuwenattr& E_SoulGuwenattr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

E_SoulGuwenattr* E_SoulGuwenattr::default_instance_ = NULL;

E_SoulGuwenattr* E_SoulGuwenattr::New() const {
  return new E_SoulGuwenattr;
}

void E_SoulGuwenattr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_skill_ = 0;
    m_lv_ = 0;
    m_att_ = 0;
    m_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_SoulGuwenattr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_skill;
        break;
      }

      // optional int32 m_skill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skill_)));
          set_has_m_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_att;
        break;
      }

      // optional int32 m_att = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_att_)));
          set_has_m_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_SoulGuwenattr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_skill = 2;
  if (has_m_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_skill(), output);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lv(), output);
  }

  // optional int32 m_att = 4;
  if (has_m_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_att(), output);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_SoulGuwenattr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_skill = 2;
  if (has_m_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_skill(), target);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lv(), target);
  }

  // optional int32 m_att = 4;
  if (has_m_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_att(), target);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_SoulGuwenattr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_skill = 2;
    if (has_m_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skill());
    }

    // optional int32 m_lv = 3;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_att = 4;
    if (has_m_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_att());
    }

    // optional int32 m_num = 5;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_SoulGuwenattr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_SoulGuwenattr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_SoulGuwenattr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_SoulGuwenattr::MergeFrom(const E_SoulGuwenattr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_skill()) {
      set_m_skill(from.m_skill());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_att()) {
      set_m_att(from.m_att());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_SoulGuwenattr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_SoulGuwenattr::CopyFrom(const E_SoulGuwenattr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_SoulGuwenattr::IsInitialized() const {

  return true;
}

void E_SoulGuwenattr::Swap(E_SoulGuwenattr* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_skill_, other->m_skill_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_att_, other->m_att_);
    std::swap(m_num_, other->m_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_SoulGuwenattr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_SoulGuwenattr_descriptor_;
  metadata.reflection = E_SoulGuwenattr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_SoulGuwenattr::kESoulGuwenattrListFieldNumber;
#endif  // !_MSC_VER

Sheet_SoulGuwenattr::Sheet_SoulGuwenattr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_SoulGuwenattr::InitAsDefaultInstance() {
}

Sheet_SoulGuwenattr::Sheet_SoulGuwenattr(const Sheet_SoulGuwenattr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_SoulGuwenattr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_SoulGuwenattr::~Sheet_SoulGuwenattr() {
  SharedDtor();
}

void Sheet_SoulGuwenattr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_SoulGuwenattr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_SoulGuwenattr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_SoulGuwenattr_descriptor_;
}

const Sheet_SoulGuwenattr& Sheet_SoulGuwenattr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fSoul_2eproto();
  return *default_instance_;
}

Sheet_SoulGuwenattr* Sheet_SoulGuwenattr::default_instance_ = NULL;

Sheet_SoulGuwenattr* Sheet_SoulGuwenattr::New() const {
  return new Sheet_SoulGuwenattr;
}

void Sheet_SoulGuwenattr::Clear() {
  e_soulguwenattr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_SoulGuwenattr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_SoulGuwenattr E_SoulGuwenattr_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_SoulGuwenattr_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_soulguwenattr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_SoulGuwenattr_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_SoulGuwenattr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_SoulGuwenattr E_SoulGuwenattr_List = 1;
  for (int i = 0; i < this->e_soulguwenattr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_soulguwenattr_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_SoulGuwenattr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_SoulGuwenattr E_SoulGuwenattr_List = 1;
  for (int i = 0; i < this->e_soulguwenattr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_soulguwenattr_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_SoulGuwenattr::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_SoulGuwenattr E_SoulGuwenattr_List = 1;
  total_size += 1 * this->e_soulguwenattr_list_size();
  for (int i = 0; i < this->e_soulguwenattr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_soulguwenattr_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_SoulGuwenattr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_SoulGuwenattr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_SoulGuwenattr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_SoulGuwenattr::MergeFrom(const Sheet_SoulGuwenattr& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_soulguwenattr_list_.MergeFrom(from.e_soulguwenattr_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_SoulGuwenattr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_SoulGuwenattr::CopyFrom(const Sheet_SoulGuwenattr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_SoulGuwenattr::IsInitialized() const {

  return true;
}

void Sheet_SoulGuwenattr::Swap(Sheet_SoulGuwenattr* other) {
  if (other != this) {
    e_soulguwenattr_list_.Swap(&other->e_soulguwenattr_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_SoulGuwenattr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_SoulGuwenattr_descriptor_;
  metadata.reflection = Sheet_SoulGuwenattr_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
