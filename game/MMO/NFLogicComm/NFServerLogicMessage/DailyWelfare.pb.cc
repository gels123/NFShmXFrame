// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DailyWelfare.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DailyWelfare.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* DailyWelfareGetXingYunDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetXingYunDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetXingYunDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetXingYunDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareXinYunBuyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareXinYunBuyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetXingYunRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetXingYunRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetXingYunRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetXingYunRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetXingYunSuperGiftRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetXingYunSuperGiftRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetXingYunSuperGiftRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetXingYunSuperGiftRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetFreeXingYunRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetFreeXingYunRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetFreeXingYunSRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetFreeXingYunSRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetDailyGiftDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetDailyGiftDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetDailyGiftDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetDailyGiftDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareDailyGiftBuyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareDailyGiftBuyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetDailyGiftRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetDailyGiftRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetDailyGiftRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetDailyGiftRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetFreeDailyGiftRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetFreeDailyGiftRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetFreeDailyGiftRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetFreeDailyGiftRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTodayRechargeDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTodayRechargeDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTodayRechargeDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTodayRechargeDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTodayRechargeRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTodayRechargeRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTodayRechargeRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTodayRechargeRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTodayRechargeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTodayRechargeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetAccRechargeDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetAccRechargeDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetAccRechargeDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetAccRechargeDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetAccRechargeRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetAccRechargeRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetAccRechargeRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetAccRechargeRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetAccRechargeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetAccRechargeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTodayRechargeRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTodayRechargeRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTodayRechargeRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTodayRechargeRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetAccRechargeRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetAccRechargeRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetAccRechargeRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetAccRechargeRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetMonthCardDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetMonthCardDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareMonthCardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareMonthCardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetMonthCardDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetMonthCardDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetMonthCardRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetMonthCardRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetMonthCardRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetMonthCardRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetMonthCardRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetMonthCardRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetMonthCardRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetMonthCardRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareMonthCardNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareMonthCardNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareTurnableAccNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareTurnableAccNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTurnableDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTurnableDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTurnableDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTurnableDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTurnableAccRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTurnableAccRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTTurnableAccRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTTurnableAccRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareTurnableReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareTurnableReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareTurnableRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareTurnableRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTurnableRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTurnableRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTurnableRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTurnableRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTurnableRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTurnableRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetTurnableRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetTurnableRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetPersonTurnableRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetPersonTurnableRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetPersonTurnableRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetPersonTurnableRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLGetGiftSuperBuyInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLGetGiftSuperBuyInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCGetGiftSuperBuyInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCGetGiftSuperBuyInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLBuyGiftSuperBuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLBuyGiftSuperBuyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCBuyGiftSuperBuyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCBuyGiftSuperBuyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGiftSuperBuyChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGiftSuperBuyChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLGetInvestInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLGetInvestInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCGetInvestInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCGetInvestInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLGetInvestRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLGetInvestRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCGetInvestRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCGetInvestRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyInvestRewardDataChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyInvestRewardDataChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLGetBuyInvestReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLGetBuyInvestReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCGetBuyInvestRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCGetBuyInvestRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetYTTLGiftDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetYTTLGiftDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyWelfareGetYTTLGiftDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyWelfareGetYTTLGiftDataRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DailyWelfare_2eproto() {
  protobuf_AddDesc_DailyWelfare_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DailyWelfare.proto");
  GOOGLE_CHECK(file != NULL);
  DailyWelfareGetXingYunDataReq_descriptor_ = file->message_type(0);
  static const int DailyWelfareGetXingYunDataReq_offsets_[1] = {
  };
  DailyWelfareGetXingYunDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetXingYunDataReq_descriptor_,
      DailyWelfareGetXingYunDataReq::default_instance_,
      DailyWelfareGetXingYunDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetXingYunDataReq));
  DailyWelfareGetXingYunDataRsp_descriptor_ = file->message_type(1);
  static const int DailyWelfareGetXingYunDataRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunDataRsp, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunDataRsp, super_gift_status_),
  };
  DailyWelfareGetXingYunDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetXingYunDataRsp_descriptor_,
      DailyWelfareGetXingYunDataRsp::default_instance_,
      DailyWelfareGetXingYunDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetXingYunDataRsp));
  DailyWelfareXinYunBuyNotify_descriptor_ = file->message_type(2);
  static const int DailyWelfareXinYunBuyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareXinYunBuyNotify, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareXinYunBuyNotify, super_gift_status_),
  };
  DailyWelfareXinYunBuyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareXinYunBuyNotify_descriptor_,
      DailyWelfareXinYunBuyNotify::default_instance_,
      DailyWelfareXinYunBuyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareXinYunBuyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareXinYunBuyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareXinYunBuyNotify));
  DailyWelfareGetXingYunRecordReq_descriptor_ = file->message_type(3);
  static const int DailyWelfareGetXingYunRecordReq_offsets_[1] = {
  };
  DailyWelfareGetXingYunRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetXingYunRecordReq_descriptor_,
      DailyWelfareGetXingYunRecordReq::default_instance_,
      DailyWelfareGetXingYunRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetXingYunRecordReq));
  DailyWelfareGetXingYunRecordRsp_descriptor_ = file->message_type(4);
  static const int DailyWelfareGetXingYunRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunRecordRsp, record_),
  };
  DailyWelfareGetXingYunRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetXingYunRecordRsp_descriptor_,
      DailyWelfareGetXingYunRecordRsp::default_instance_,
      DailyWelfareGetXingYunRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetXingYunRecordRsp));
  DailyWelfareGetXingYunSuperGiftRewardReq_descriptor_ = file->message_type(5);
  static const int DailyWelfareGetXingYunSuperGiftRewardReq_offsets_[1] = {
  };
  DailyWelfareGetXingYunSuperGiftRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetXingYunSuperGiftRewardReq_descriptor_,
      DailyWelfareGetXingYunSuperGiftRewardReq::default_instance_,
      DailyWelfareGetXingYunSuperGiftRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunSuperGiftRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunSuperGiftRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetXingYunSuperGiftRewardReq));
  DailyWelfareGetXingYunSuperGiftRewardRsp_descriptor_ = file->message_type(6);
  static const int DailyWelfareGetXingYunSuperGiftRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunSuperGiftRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunSuperGiftRewardRsp, super_gift_status_),
  };
  DailyWelfareGetXingYunSuperGiftRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetXingYunSuperGiftRewardRsp_descriptor_,
      DailyWelfareGetXingYunSuperGiftRewardRsp::default_instance_,
      DailyWelfareGetXingYunSuperGiftRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunSuperGiftRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetXingYunSuperGiftRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetXingYunSuperGiftRewardRsp));
  DailyWelfareGetFreeXingYunRewardReq_descriptor_ = file->message_type(7);
  static const int DailyWelfareGetFreeXingYunRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetFreeXingYunRewardReq, id_),
  };
  DailyWelfareGetFreeXingYunRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetFreeXingYunRewardReq_descriptor_,
      DailyWelfareGetFreeXingYunRewardReq::default_instance_,
      DailyWelfareGetFreeXingYunRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetFreeXingYunRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetFreeXingYunRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetFreeXingYunRewardReq));
  DailyWelfareGetFreeXingYunSRewardRsp_descriptor_ = file->message_type(8);
  static const int DailyWelfareGetFreeXingYunSRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetFreeXingYunSRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetFreeXingYunSRewardRsp, data_),
  };
  DailyWelfareGetFreeXingYunSRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetFreeXingYunSRewardRsp_descriptor_,
      DailyWelfareGetFreeXingYunSRewardRsp::default_instance_,
      DailyWelfareGetFreeXingYunSRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetFreeXingYunSRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetFreeXingYunSRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetFreeXingYunSRewardRsp));
  DailyWelfareGetDailyGiftDataReq_descriptor_ = file->message_type(9);
  static const int DailyWelfareGetDailyGiftDataReq_offsets_[1] = {
  };
  DailyWelfareGetDailyGiftDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetDailyGiftDataReq_descriptor_,
      DailyWelfareGetDailyGiftDataReq::default_instance_,
      DailyWelfareGetDailyGiftDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetDailyGiftDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetDailyGiftDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetDailyGiftDataReq));
  DailyWelfareGetDailyGiftDataRsp_descriptor_ = file->message_type(10);
  static const int DailyWelfareGetDailyGiftDataRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetDailyGiftDataRsp, data_),
  };
  DailyWelfareGetDailyGiftDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetDailyGiftDataRsp_descriptor_,
      DailyWelfareGetDailyGiftDataRsp::default_instance_,
      DailyWelfareGetDailyGiftDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetDailyGiftDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetDailyGiftDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetDailyGiftDataRsp));
  DailyWelfareDailyGiftBuyNotify_descriptor_ = file->message_type(11);
  static const int DailyWelfareDailyGiftBuyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareDailyGiftBuyNotify, data_),
  };
  DailyWelfareDailyGiftBuyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareDailyGiftBuyNotify_descriptor_,
      DailyWelfareDailyGiftBuyNotify::default_instance_,
      DailyWelfareDailyGiftBuyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareDailyGiftBuyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareDailyGiftBuyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareDailyGiftBuyNotify));
  DailyWelfareGetDailyGiftRecordReq_descriptor_ = file->message_type(12);
  static const int DailyWelfareGetDailyGiftRecordReq_offsets_[1] = {
  };
  DailyWelfareGetDailyGiftRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetDailyGiftRecordReq_descriptor_,
      DailyWelfareGetDailyGiftRecordReq::default_instance_,
      DailyWelfareGetDailyGiftRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetDailyGiftRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetDailyGiftRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetDailyGiftRecordReq));
  DailyWelfareGetDailyGiftRecordRsp_descriptor_ = file->message_type(13);
  static const int DailyWelfareGetDailyGiftRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetDailyGiftRecordRsp, record_),
  };
  DailyWelfareGetDailyGiftRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetDailyGiftRecordRsp_descriptor_,
      DailyWelfareGetDailyGiftRecordRsp::default_instance_,
      DailyWelfareGetDailyGiftRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetDailyGiftRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetDailyGiftRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetDailyGiftRecordRsp));
  DailyWelfareGetFreeDailyGiftRewardReq_descriptor_ = file->message_type(14);
  static const int DailyWelfareGetFreeDailyGiftRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetFreeDailyGiftRewardReq, id_),
  };
  DailyWelfareGetFreeDailyGiftRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetFreeDailyGiftRewardReq_descriptor_,
      DailyWelfareGetFreeDailyGiftRewardReq::default_instance_,
      DailyWelfareGetFreeDailyGiftRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetFreeDailyGiftRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetFreeDailyGiftRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetFreeDailyGiftRewardReq));
  DailyWelfareGetFreeDailyGiftRewardRsp_descriptor_ = file->message_type(15);
  static const int DailyWelfareGetFreeDailyGiftRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetFreeDailyGiftRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetFreeDailyGiftRewardRsp, data_),
  };
  DailyWelfareGetFreeDailyGiftRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetFreeDailyGiftRewardRsp_descriptor_,
      DailyWelfareGetFreeDailyGiftRewardRsp::default_instance_,
      DailyWelfareGetFreeDailyGiftRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetFreeDailyGiftRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetFreeDailyGiftRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetFreeDailyGiftRewardRsp));
  DailyWelfareGetTodayRechargeDataReq_descriptor_ = file->message_type(16);
  static const int DailyWelfareGetTodayRechargeDataReq_offsets_[1] = {
  };
  DailyWelfareGetTodayRechargeDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTodayRechargeDataReq_descriptor_,
      DailyWelfareGetTodayRechargeDataReq::default_instance_,
      DailyWelfareGetTodayRechargeDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTodayRechargeDataReq));
  DailyWelfareGetTodayRechargeDataRsp_descriptor_ = file->message_type(17);
  static const int DailyWelfareGetTodayRechargeDataRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeDataRsp, data_),
  };
  DailyWelfareGetTodayRechargeDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTodayRechargeDataRsp_descriptor_,
      DailyWelfareGetTodayRechargeDataRsp::default_instance_,
      DailyWelfareGetTodayRechargeDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTodayRechargeDataRsp));
  DailyWelfareGetTodayRechargeRecordReq_descriptor_ = file->message_type(18);
  static const int DailyWelfareGetTodayRechargeRecordReq_offsets_[1] = {
  };
  DailyWelfareGetTodayRechargeRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTodayRechargeRecordReq_descriptor_,
      DailyWelfareGetTodayRechargeRecordReq::default_instance_,
      DailyWelfareGetTodayRechargeRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTodayRechargeRecordReq));
  DailyWelfareGetTodayRechargeRecordRsp_descriptor_ = file->message_type(19);
  static const int DailyWelfareGetTodayRechargeRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeRecordRsp, record_),
  };
  DailyWelfareGetTodayRechargeRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTodayRechargeRecordRsp_descriptor_,
      DailyWelfareGetTodayRechargeRecordRsp::default_instance_,
      DailyWelfareGetTodayRechargeRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTodayRechargeRecordRsp));
  DailyWelfareGetTodayRechargeNotify_descriptor_ = file->message_type(20);
  static const int DailyWelfareGetTodayRechargeNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeNotify, data_),
  };
  DailyWelfareGetTodayRechargeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTodayRechargeNotify_descriptor_,
      DailyWelfareGetTodayRechargeNotify::default_instance_,
      DailyWelfareGetTodayRechargeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTodayRechargeNotify));
  DailyWelfareGetAccRechargeDataReq_descriptor_ = file->message_type(21);
  static const int DailyWelfareGetAccRechargeDataReq_offsets_[1] = {
  };
  DailyWelfareGetAccRechargeDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetAccRechargeDataReq_descriptor_,
      DailyWelfareGetAccRechargeDataReq::default_instance_,
      DailyWelfareGetAccRechargeDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetAccRechargeDataReq));
  DailyWelfareGetAccRechargeDataRsp_descriptor_ = file->message_type(22);
  static const int DailyWelfareGetAccRechargeDataRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeDataRsp, data_),
  };
  DailyWelfareGetAccRechargeDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetAccRechargeDataRsp_descriptor_,
      DailyWelfareGetAccRechargeDataRsp::default_instance_,
      DailyWelfareGetAccRechargeDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetAccRechargeDataRsp));
  DailyWelfareGetAccRechargeRecordReq_descriptor_ = file->message_type(23);
  static const int DailyWelfareGetAccRechargeRecordReq_offsets_[1] = {
  };
  DailyWelfareGetAccRechargeRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetAccRechargeRecordReq_descriptor_,
      DailyWelfareGetAccRechargeRecordReq::default_instance_,
      DailyWelfareGetAccRechargeRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetAccRechargeRecordReq));
  DailyWelfareGetAccRechargeRecordRsp_descriptor_ = file->message_type(24);
  static const int DailyWelfareGetAccRechargeRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeRecordRsp, record_),
  };
  DailyWelfareGetAccRechargeRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetAccRechargeRecordRsp_descriptor_,
      DailyWelfareGetAccRechargeRecordRsp::default_instance_,
      DailyWelfareGetAccRechargeRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetAccRechargeRecordRsp));
  DailyWelfareGetAccRechargeNotify_descriptor_ = file->message_type(25);
  static const int DailyWelfareGetAccRechargeNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeNotify, data_),
  };
  DailyWelfareGetAccRechargeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetAccRechargeNotify_descriptor_,
      DailyWelfareGetAccRechargeNotify::default_instance_,
      DailyWelfareGetAccRechargeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetAccRechargeNotify));
  DailyWelfareGetTodayRechargeRewardReq_descriptor_ = file->message_type(26);
  static const int DailyWelfareGetTodayRechargeRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeRewardReq, id_),
  };
  DailyWelfareGetTodayRechargeRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTodayRechargeRewardReq_descriptor_,
      DailyWelfareGetTodayRechargeRewardReq::default_instance_,
      DailyWelfareGetTodayRechargeRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTodayRechargeRewardReq));
  DailyWelfareGetTodayRechargeRewardRsp_descriptor_ = file->message_type(27);
  static const int DailyWelfareGetTodayRechargeRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeRewardRsp, data_),
  };
  DailyWelfareGetTodayRechargeRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTodayRechargeRewardRsp_descriptor_,
      DailyWelfareGetTodayRechargeRewardRsp::default_instance_,
      DailyWelfareGetTodayRechargeRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTodayRechargeRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTodayRechargeRewardRsp));
  DailyWelfareGetAccRechargeRewardReq_descriptor_ = file->message_type(28);
  static const int DailyWelfareGetAccRechargeRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeRewardReq, id_),
  };
  DailyWelfareGetAccRechargeRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetAccRechargeRewardReq_descriptor_,
      DailyWelfareGetAccRechargeRewardReq::default_instance_,
      DailyWelfareGetAccRechargeRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetAccRechargeRewardReq));
  DailyWelfareGetAccRechargeRewardRsp_descriptor_ = file->message_type(29);
  static const int DailyWelfareGetAccRechargeRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeRewardRsp, data_),
  };
  DailyWelfareGetAccRechargeRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetAccRechargeRewardRsp_descriptor_,
      DailyWelfareGetAccRechargeRewardRsp::default_instance_,
      DailyWelfareGetAccRechargeRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetAccRechargeRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetAccRechargeRewardRsp));
  DailyWelfareGetMonthCardDataReq_descriptor_ = file->message_type(30);
  static const int DailyWelfareGetMonthCardDataReq_offsets_[1] = {
  };
  DailyWelfareGetMonthCardDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetMonthCardDataReq_descriptor_,
      DailyWelfareGetMonthCardDataReq::default_instance_,
      DailyWelfareGetMonthCardDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetMonthCardDataReq));
  DailyWelfareMonthCardData_descriptor_ = file->message_type(31);
  static const int DailyWelfareMonthCardData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareMonthCardData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareMonthCardData, left_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareMonthCardData, can_get_day_),
  };
  DailyWelfareMonthCardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareMonthCardData_descriptor_,
      DailyWelfareMonthCardData::default_instance_,
      DailyWelfareMonthCardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareMonthCardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareMonthCardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareMonthCardData));
  DailyWelfareGetMonthCardDataRsp_descriptor_ = file->message_type(32);
  static const int DailyWelfareGetMonthCardDataRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardDataRsp, data_),
  };
  DailyWelfareGetMonthCardDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetMonthCardDataRsp_descriptor_,
      DailyWelfareGetMonthCardDataRsp::default_instance_,
      DailyWelfareGetMonthCardDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetMonthCardDataRsp));
  DailyWelfareGetMonthCardRewardReq_descriptor_ = file->message_type(33);
  static const int DailyWelfareGetMonthCardRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardRewardReq, id_),
  };
  DailyWelfareGetMonthCardRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetMonthCardRewardReq_descriptor_,
      DailyWelfareGetMonthCardRewardReq::default_instance_,
      DailyWelfareGetMonthCardRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetMonthCardRewardReq));
  DailyWelfareGetMonthCardRewardRsp_descriptor_ = file->message_type(34);
  static const int DailyWelfareGetMonthCardRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardRewardRsp, data_),
  };
  DailyWelfareGetMonthCardRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetMonthCardRewardRsp_descriptor_,
      DailyWelfareGetMonthCardRewardRsp::default_instance_,
      DailyWelfareGetMonthCardRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetMonthCardRewardRsp));
  DailyWelfareGetMonthCardRecordReq_descriptor_ = file->message_type(35);
  static const int DailyWelfareGetMonthCardRecordReq_offsets_[1] = {
  };
  DailyWelfareGetMonthCardRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetMonthCardRecordReq_descriptor_,
      DailyWelfareGetMonthCardRecordReq::default_instance_,
      DailyWelfareGetMonthCardRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetMonthCardRecordReq));
  DailyWelfareGetMonthCardRecordRsp_descriptor_ = file->message_type(36);
  static const int DailyWelfareGetMonthCardRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardRecordRsp, record_),
  };
  DailyWelfareGetMonthCardRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetMonthCardRecordRsp_descriptor_,
      DailyWelfareGetMonthCardRecordRsp::default_instance_,
      DailyWelfareGetMonthCardRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetMonthCardRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetMonthCardRecordRsp));
  DailyWelfareMonthCardNotify_descriptor_ = file->message_type(37);
  static const int DailyWelfareMonthCardNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareMonthCardNotify, data_),
  };
  DailyWelfareMonthCardNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareMonthCardNotify_descriptor_,
      DailyWelfareMonthCardNotify::default_instance_,
      DailyWelfareMonthCardNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareMonthCardNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareMonthCardNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareMonthCardNotify));
  DailyWelfareTurnableAccNotify_descriptor_ = file->message_type(38);
  static const int DailyWelfareTurnableAccNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareTurnableAccNotify, data_),
  };
  DailyWelfareTurnableAccNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareTurnableAccNotify_descriptor_,
      DailyWelfareTurnableAccNotify::default_instance_,
      DailyWelfareTurnableAccNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareTurnableAccNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareTurnableAccNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareTurnableAccNotify));
  DailyWelfareGetTurnableDataReq_descriptor_ = file->message_type(39);
  static const int DailyWelfareGetTurnableDataReq_offsets_[1] = {
  };
  DailyWelfareGetTurnableDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTurnableDataReq_descriptor_,
      DailyWelfareGetTurnableDataReq::default_instance_,
      DailyWelfareGetTurnableDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTurnableDataReq));
  DailyWelfareGetTurnableDataRsp_descriptor_ = file->message_type(40);
  static const int DailyWelfareGetTurnableDataRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableDataRsp, turntable_acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableDataRsp, turntable_),
  };
  DailyWelfareGetTurnableDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTurnableDataRsp_descriptor_,
      DailyWelfareGetTurnableDataRsp::default_instance_,
      DailyWelfareGetTurnableDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTurnableDataRsp));
  DailyWelfareGetTurnableAccRewardReq_descriptor_ = file->message_type(41);
  static const int DailyWelfareGetTurnableAccRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableAccRewardReq, id_),
  };
  DailyWelfareGetTurnableAccRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTurnableAccRewardReq_descriptor_,
      DailyWelfareGetTurnableAccRewardReq::default_instance_,
      DailyWelfareGetTurnableAccRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableAccRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableAccRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTurnableAccRewardReq));
  DailyWelfareGetTTurnableAccRewardRsp_descriptor_ = file->message_type(42);
  static const int DailyWelfareGetTTurnableAccRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTTurnableAccRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTTurnableAccRewardRsp, data_),
  };
  DailyWelfareGetTTurnableAccRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTTurnableAccRewardRsp_descriptor_,
      DailyWelfareGetTTurnableAccRewardRsp::default_instance_,
      DailyWelfareGetTTurnableAccRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTTurnableAccRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTTurnableAccRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTTurnableAccRewardRsp));
  DailyWelfareTurnableReq_descriptor_ = file->message_type(43);
  static const int DailyWelfareTurnableReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareTurnableReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareTurnableReq, num_),
  };
  DailyWelfareTurnableReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareTurnableReq_descriptor_,
      DailyWelfareTurnableReq::default_instance_,
      DailyWelfareTurnableReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareTurnableReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareTurnableReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareTurnableReq));
  DailyWelfareTurnableRsp_descriptor_ = file->message_type(44);
  static const int DailyWelfareTurnableRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareTurnableRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareTurnableRsp, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareTurnableRsp, jackpot_id_),
  };
  DailyWelfareTurnableRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareTurnableRsp_descriptor_,
      DailyWelfareTurnableRsp::default_instance_,
      DailyWelfareTurnableRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareTurnableRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareTurnableRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareTurnableRsp));
  DailyWelfareGetTurnableRewardReq_descriptor_ = file->message_type(45);
  static const int DailyWelfareGetTurnableRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableRewardReq, id_),
  };
  DailyWelfareGetTurnableRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTurnableRewardReq_descriptor_,
      DailyWelfareGetTurnableRewardReq::default_instance_,
      DailyWelfareGetTurnableRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTurnableRewardReq));
  DailyWelfareGetTurnableRewardRsp_descriptor_ = file->message_type(46);
  static const int DailyWelfareGetTurnableRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableRewardRsp, data_),
  };
  DailyWelfareGetTurnableRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTurnableRewardRsp_descriptor_,
      DailyWelfareGetTurnableRewardRsp::default_instance_,
      DailyWelfareGetTurnableRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTurnableRewardRsp));
  DailyWelfareGetTurnableRecordReq_descriptor_ = file->message_type(47);
  static const int DailyWelfareGetTurnableRecordReq_offsets_[1] = {
  };
  DailyWelfareGetTurnableRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTurnableRecordReq_descriptor_,
      DailyWelfareGetTurnableRecordReq::default_instance_,
      DailyWelfareGetTurnableRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTurnableRecordReq));
  DailyWelfareGetTurnableRecordRsp_descriptor_ = file->message_type(48);
  static const int DailyWelfareGetTurnableRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableRecordRsp, record_),
  };
  DailyWelfareGetTurnableRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetTurnableRecordRsp_descriptor_,
      DailyWelfareGetTurnableRecordRsp::default_instance_,
      DailyWelfareGetTurnableRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetTurnableRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetTurnableRecordRsp));
  DailyWelfareGetPersonTurnableRecordReq_descriptor_ = file->message_type(49);
  static const int DailyWelfareGetPersonTurnableRecordReq_offsets_[1] = {
  };
  DailyWelfareGetPersonTurnableRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetPersonTurnableRecordReq_descriptor_,
      DailyWelfareGetPersonTurnableRecordReq::default_instance_,
      DailyWelfareGetPersonTurnableRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetPersonTurnableRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetPersonTurnableRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetPersonTurnableRecordReq));
  DailyWelfareGetPersonTurnableRecordRsp_descriptor_ = file->message_type(50);
  static const int DailyWelfareGetPersonTurnableRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetPersonTurnableRecordRsp, record_),
  };
  DailyWelfareGetPersonTurnableRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetPersonTurnableRecordRsp_descriptor_,
      DailyWelfareGetPersonTurnableRecordRsp::default_instance_,
      DailyWelfareGetPersonTurnableRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetPersonTurnableRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetPersonTurnableRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetPersonTurnableRecordRsp));
  CLGetGiftSuperBuyInfoReq_descriptor_ = file->message_type(51);
  static const int CLGetGiftSuperBuyInfoReq_offsets_[1] = {
  };
  CLGetGiftSuperBuyInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLGetGiftSuperBuyInfoReq_descriptor_,
      CLGetGiftSuperBuyInfoReq::default_instance_,
      CLGetGiftSuperBuyInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLGetGiftSuperBuyInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLGetGiftSuperBuyInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLGetGiftSuperBuyInfoReq));
  LCGetGiftSuperBuyInfoRsp_descriptor_ = file->message_type(52);
  static const int LCGetGiftSuperBuyInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetGiftSuperBuyInfoRsp, super_buy_),
  };
  LCGetGiftSuperBuyInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCGetGiftSuperBuyInfoRsp_descriptor_,
      LCGetGiftSuperBuyInfoRsp::default_instance_,
      LCGetGiftSuperBuyInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetGiftSuperBuyInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetGiftSuperBuyInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCGetGiftSuperBuyInfoRsp));
  CLBuyGiftSuperBuyReq_descriptor_ = file->message_type(53);
  static const int CLBuyGiftSuperBuyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLBuyGiftSuperBuyReq, id_),
  };
  CLBuyGiftSuperBuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLBuyGiftSuperBuyReq_descriptor_,
      CLBuyGiftSuperBuyReq::default_instance_,
      CLBuyGiftSuperBuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLBuyGiftSuperBuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLBuyGiftSuperBuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLBuyGiftSuperBuyReq));
  LCBuyGiftSuperBuyRsp_descriptor_ = file->message_type(54);
  static const int LCBuyGiftSuperBuyRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCBuyGiftSuperBuyRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCBuyGiftSuperBuyRsp, super_buy_),
  };
  LCBuyGiftSuperBuyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCBuyGiftSuperBuyRsp_descriptor_,
      LCBuyGiftSuperBuyRsp::default_instance_,
      LCBuyGiftSuperBuyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCBuyGiftSuperBuyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCBuyGiftSuperBuyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCBuyGiftSuperBuyRsp));
  NotifyGiftSuperBuyChange_descriptor_ = file->message_type(55);
  static const int NotifyGiftSuperBuyChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGiftSuperBuyChange, super_buy_),
  };
  NotifyGiftSuperBuyChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGiftSuperBuyChange_descriptor_,
      NotifyGiftSuperBuyChange::default_instance_,
      NotifyGiftSuperBuyChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGiftSuperBuyChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGiftSuperBuyChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGiftSuperBuyChange));
  CLGetInvestInfoReq_descriptor_ = file->message_type(56);
  static const int CLGetInvestInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLGetInvestInfoReq, invest_id_),
  };
  CLGetInvestInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLGetInvestInfoReq_descriptor_,
      CLGetInvestInfoReq::default_instance_,
      CLGetInvestInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLGetInvestInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLGetInvestInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLGetInvestInfoReq));
  LCGetInvestInfoRsp_descriptor_ = file->message_type(57);
  static const int LCGetInvestInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetInvestInfoRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetInvestInfoRsp, data_),
  };
  LCGetInvestInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCGetInvestInfoRsp_descriptor_,
      LCGetInvestInfoRsp::default_instance_,
      LCGetInvestInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetInvestInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetInvestInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCGetInvestInfoRsp));
  CLGetInvestRewardReq_descriptor_ = file->message_type(58);
  static const int CLGetInvestRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLGetInvestRewardReq, invest_reward_id_),
  };
  CLGetInvestRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLGetInvestRewardReq_descriptor_,
      CLGetInvestRewardReq::default_instance_,
      CLGetInvestRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLGetInvestRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLGetInvestRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLGetInvestRewardReq));
  LCGetInvestRewardRsp_descriptor_ = file->message_type(59);
  static const int LCGetInvestRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetInvestRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetInvestRewardRsp, data_),
  };
  LCGetInvestRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCGetInvestRewardRsp_descriptor_,
      LCGetInvestRewardRsp::default_instance_,
      LCGetInvestRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetInvestRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetInvestRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCGetInvestRewardRsp));
  NotifyInvestRewardDataChange_descriptor_ = file->message_type(60);
  static const int NotifyInvestRewardDataChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyInvestRewardDataChange, data_),
  };
  NotifyInvestRewardDataChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyInvestRewardDataChange_descriptor_,
      NotifyInvestRewardDataChange::default_instance_,
      NotifyInvestRewardDataChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyInvestRewardDataChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyInvestRewardDataChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyInvestRewardDataChange));
  CLGetBuyInvestReq_descriptor_ = file->message_type(61);
  static const int CLGetBuyInvestReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLGetBuyInvestReq, invest_id_),
  };
  CLGetBuyInvestReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLGetBuyInvestReq_descriptor_,
      CLGetBuyInvestReq::default_instance_,
      CLGetBuyInvestReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLGetBuyInvestReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLGetBuyInvestReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLGetBuyInvestReq));
  LCGetBuyInvestRsp_descriptor_ = file->message_type(62);
  static const int LCGetBuyInvestRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetBuyInvestRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetBuyInvestRsp, data_),
  };
  LCGetBuyInvestRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCGetBuyInvestRsp_descriptor_,
      LCGetBuyInvestRsp::default_instance_,
      LCGetBuyInvestRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetBuyInvestRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCGetBuyInvestRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCGetBuyInvestRsp));
  DailyWelfareGetYTTLGiftDataReq_descriptor_ = file->message_type(63);
  static const int DailyWelfareGetYTTLGiftDataReq_offsets_[1] = {
  };
  DailyWelfareGetYTTLGiftDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetYTTLGiftDataReq_descriptor_,
      DailyWelfareGetYTTLGiftDataReq::default_instance_,
      DailyWelfareGetYTTLGiftDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetYTTLGiftDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetYTTLGiftDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetYTTLGiftDataReq));
  DailyWelfareGetYTTLGiftDataRsp_descriptor_ = file->message_type(64);
  static const int DailyWelfareGetYTTLGiftDataRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetYTTLGiftDataRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetYTTLGiftDataRsp, yttl_gift_),
  };
  DailyWelfareGetYTTLGiftDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyWelfareGetYTTLGiftDataRsp_descriptor_,
      DailyWelfareGetYTTLGiftDataRsp::default_instance_,
      DailyWelfareGetYTTLGiftDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetYTTLGiftDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyWelfareGetYTTLGiftDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyWelfareGetYTTLGiftDataRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DailyWelfare_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetXingYunDataReq_descriptor_, &DailyWelfareGetXingYunDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetXingYunDataRsp_descriptor_, &DailyWelfareGetXingYunDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareXinYunBuyNotify_descriptor_, &DailyWelfareXinYunBuyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetXingYunRecordReq_descriptor_, &DailyWelfareGetXingYunRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetXingYunRecordRsp_descriptor_, &DailyWelfareGetXingYunRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetXingYunSuperGiftRewardReq_descriptor_, &DailyWelfareGetXingYunSuperGiftRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetXingYunSuperGiftRewardRsp_descriptor_, &DailyWelfareGetXingYunSuperGiftRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetFreeXingYunRewardReq_descriptor_, &DailyWelfareGetFreeXingYunRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetFreeXingYunSRewardRsp_descriptor_, &DailyWelfareGetFreeXingYunSRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetDailyGiftDataReq_descriptor_, &DailyWelfareGetDailyGiftDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetDailyGiftDataRsp_descriptor_, &DailyWelfareGetDailyGiftDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareDailyGiftBuyNotify_descriptor_, &DailyWelfareDailyGiftBuyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetDailyGiftRecordReq_descriptor_, &DailyWelfareGetDailyGiftRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetDailyGiftRecordRsp_descriptor_, &DailyWelfareGetDailyGiftRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetFreeDailyGiftRewardReq_descriptor_, &DailyWelfareGetFreeDailyGiftRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetFreeDailyGiftRewardRsp_descriptor_, &DailyWelfareGetFreeDailyGiftRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTodayRechargeDataReq_descriptor_, &DailyWelfareGetTodayRechargeDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTodayRechargeDataRsp_descriptor_, &DailyWelfareGetTodayRechargeDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTodayRechargeRecordReq_descriptor_, &DailyWelfareGetTodayRechargeRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTodayRechargeRecordRsp_descriptor_, &DailyWelfareGetTodayRechargeRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTodayRechargeNotify_descriptor_, &DailyWelfareGetTodayRechargeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetAccRechargeDataReq_descriptor_, &DailyWelfareGetAccRechargeDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetAccRechargeDataRsp_descriptor_, &DailyWelfareGetAccRechargeDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetAccRechargeRecordReq_descriptor_, &DailyWelfareGetAccRechargeRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetAccRechargeRecordRsp_descriptor_, &DailyWelfareGetAccRechargeRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetAccRechargeNotify_descriptor_, &DailyWelfareGetAccRechargeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTodayRechargeRewardReq_descriptor_, &DailyWelfareGetTodayRechargeRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTodayRechargeRewardRsp_descriptor_, &DailyWelfareGetTodayRechargeRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetAccRechargeRewardReq_descriptor_, &DailyWelfareGetAccRechargeRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetAccRechargeRewardRsp_descriptor_, &DailyWelfareGetAccRechargeRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetMonthCardDataReq_descriptor_, &DailyWelfareGetMonthCardDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareMonthCardData_descriptor_, &DailyWelfareMonthCardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetMonthCardDataRsp_descriptor_, &DailyWelfareGetMonthCardDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetMonthCardRewardReq_descriptor_, &DailyWelfareGetMonthCardRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetMonthCardRewardRsp_descriptor_, &DailyWelfareGetMonthCardRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetMonthCardRecordReq_descriptor_, &DailyWelfareGetMonthCardRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetMonthCardRecordRsp_descriptor_, &DailyWelfareGetMonthCardRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareMonthCardNotify_descriptor_, &DailyWelfareMonthCardNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareTurnableAccNotify_descriptor_, &DailyWelfareTurnableAccNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTurnableDataReq_descriptor_, &DailyWelfareGetTurnableDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTurnableDataRsp_descriptor_, &DailyWelfareGetTurnableDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTurnableAccRewardReq_descriptor_, &DailyWelfareGetTurnableAccRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTTurnableAccRewardRsp_descriptor_, &DailyWelfareGetTTurnableAccRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareTurnableReq_descriptor_, &DailyWelfareTurnableReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareTurnableRsp_descriptor_, &DailyWelfareTurnableRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTurnableRewardReq_descriptor_, &DailyWelfareGetTurnableRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTurnableRewardRsp_descriptor_, &DailyWelfareGetTurnableRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTurnableRecordReq_descriptor_, &DailyWelfareGetTurnableRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetTurnableRecordRsp_descriptor_, &DailyWelfareGetTurnableRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetPersonTurnableRecordReq_descriptor_, &DailyWelfareGetPersonTurnableRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetPersonTurnableRecordRsp_descriptor_, &DailyWelfareGetPersonTurnableRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLGetGiftSuperBuyInfoReq_descriptor_, &CLGetGiftSuperBuyInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCGetGiftSuperBuyInfoRsp_descriptor_, &LCGetGiftSuperBuyInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLBuyGiftSuperBuyReq_descriptor_, &CLBuyGiftSuperBuyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCBuyGiftSuperBuyRsp_descriptor_, &LCBuyGiftSuperBuyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGiftSuperBuyChange_descriptor_, &NotifyGiftSuperBuyChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLGetInvestInfoReq_descriptor_, &CLGetInvestInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCGetInvestInfoRsp_descriptor_, &LCGetInvestInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLGetInvestRewardReq_descriptor_, &CLGetInvestRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCGetInvestRewardRsp_descriptor_, &LCGetInvestRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyInvestRewardDataChange_descriptor_, &NotifyInvestRewardDataChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLGetBuyInvestReq_descriptor_, &CLGetBuyInvestReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCGetBuyInvestRsp_descriptor_, &LCGetBuyInvestRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetYTTLGiftDataReq_descriptor_, &DailyWelfareGetYTTLGiftDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyWelfareGetYTTLGiftDataRsp_descriptor_, &DailyWelfareGetYTTLGiftDataRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DailyWelfare_2eproto() {
  delete DailyWelfareGetXingYunDataReq::default_instance_;
  delete DailyWelfareGetXingYunDataReq_reflection_;
  delete DailyWelfareGetXingYunDataRsp::default_instance_;
  delete DailyWelfareGetXingYunDataRsp_reflection_;
  delete DailyWelfareXinYunBuyNotify::default_instance_;
  delete DailyWelfareXinYunBuyNotify_reflection_;
  delete DailyWelfareGetXingYunRecordReq::default_instance_;
  delete DailyWelfareGetXingYunRecordReq_reflection_;
  delete DailyWelfareGetXingYunRecordRsp::default_instance_;
  delete DailyWelfareGetXingYunRecordRsp_reflection_;
  delete DailyWelfareGetXingYunSuperGiftRewardReq::default_instance_;
  delete DailyWelfareGetXingYunSuperGiftRewardReq_reflection_;
  delete DailyWelfareGetXingYunSuperGiftRewardRsp::default_instance_;
  delete DailyWelfareGetXingYunSuperGiftRewardRsp_reflection_;
  delete DailyWelfareGetFreeXingYunRewardReq::default_instance_;
  delete DailyWelfareGetFreeXingYunRewardReq_reflection_;
  delete DailyWelfareGetFreeXingYunSRewardRsp::default_instance_;
  delete DailyWelfareGetFreeXingYunSRewardRsp_reflection_;
  delete DailyWelfareGetDailyGiftDataReq::default_instance_;
  delete DailyWelfareGetDailyGiftDataReq_reflection_;
  delete DailyWelfareGetDailyGiftDataRsp::default_instance_;
  delete DailyWelfareGetDailyGiftDataRsp_reflection_;
  delete DailyWelfareDailyGiftBuyNotify::default_instance_;
  delete DailyWelfareDailyGiftBuyNotify_reflection_;
  delete DailyWelfareGetDailyGiftRecordReq::default_instance_;
  delete DailyWelfareGetDailyGiftRecordReq_reflection_;
  delete DailyWelfareGetDailyGiftRecordRsp::default_instance_;
  delete DailyWelfareGetDailyGiftRecordRsp_reflection_;
  delete DailyWelfareGetFreeDailyGiftRewardReq::default_instance_;
  delete DailyWelfareGetFreeDailyGiftRewardReq_reflection_;
  delete DailyWelfareGetFreeDailyGiftRewardRsp::default_instance_;
  delete DailyWelfareGetFreeDailyGiftRewardRsp_reflection_;
  delete DailyWelfareGetTodayRechargeDataReq::default_instance_;
  delete DailyWelfareGetTodayRechargeDataReq_reflection_;
  delete DailyWelfareGetTodayRechargeDataRsp::default_instance_;
  delete DailyWelfareGetTodayRechargeDataRsp_reflection_;
  delete DailyWelfareGetTodayRechargeRecordReq::default_instance_;
  delete DailyWelfareGetTodayRechargeRecordReq_reflection_;
  delete DailyWelfareGetTodayRechargeRecordRsp::default_instance_;
  delete DailyWelfareGetTodayRechargeRecordRsp_reflection_;
  delete DailyWelfareGetTodayRechargeNotify::default_instance_;
  delete DailyWelfareGetTodayRechargeNotify_reflection_;
  delete DailyWelfareGetAccRechargeDataReq::default_instance_;
  delete DailyWelfareGetAccRechargeDataReq_reflection_;
  delete DailyWelfareGetAccRechargeDataRsp::default_instance_;
  delete DailyWelfareGetAccRechargeDataRsp_reflection_;
  delete DailyWelfareGetAccRechargeRecordReq::default_instance_;
  delete DailyWelfareGetAccRechargeRecordReq_reflection_;
  delete DailyWelfareGetAccRechargeRecordRsp::default_instance_;
  delete DailyWelfareGetAccRechargeRecordRsp_reflection_;
  delete DailyWelfareGetAccRechargeNotify::default_instance_;
  delete DailyWelfareGetAccRechargeNotify_reflection_;
  delete DailyWelfareGetTodayRechargeRewardReq::default_instance_;
  delete DailyWelfareGetTodayRechargeRewardReq_reflection_;
  delete DailyWelfareGetTodayRechargeRewardRsp::default_instance_;
  delete DailyWelfareGetTodayRechargeRewardRsp_reflection_;
  delete DailyWelfareGetAccRechargeRewardReq::default_instance_;
  delete DailyWelfareGetAccRechargeRewardReq_reflection_;
  delete DailyWelfareGetAccRechargeRewardRsp::default_instance_;
  delete DailyWelfareGetAccRechargeRewardRsp_reflection_;
  delete DailyWelfareGetMonthCardDataReq::default_instance_;
  delete DailyWelfareGetMonthCardDataReq_reflection_;
  delete DailyWelfareMonthCardData::default_instance_;
  delete DailyWelfareMonthCardData_reflection_;
  delete DailyWelfareGetMonthCardDataRsp::default_instance_;
  delete DailyWelfareGetMonthCardDataRsp_reflection_;
  delete DailyWelfareGetMonthCardRewardReq::default_instance_;
  delete DailyWelfareGetMonthCardRewardReq_reflection_;
  delete DailyWelfareGetMonthCardRewardRsp::default_instance_;
  delete DailyWelfareGetMonthCardRewardRsp_reflection_;
  delete DailyWelfareGetMonthCardRecordReq::default_instance_;
  delete DailyWelfareGetMonthCardRecordReq_reflection_;
  delete DailyWelfareGetMonthCardRecordRsp::default_instance_;
  delete DailyWelfareGetMonthCardRecordRsp_reflection_;
  delete DailyWelfareMonthCardNotify::default_instance_;
  delete DailyWelfareMonthCardNotify_reflection_;
  delete DailyWelfareTurnableAccNotify::default_instance_;
  delete DailyWelfareTurnableAccNotify_reflection_;
  delete DailyWelfareGetTurnableDataReq::default_instance_;
  delete DailyWelfareGetTurnableDataReq_reflection_;
  delete DailyWelfareGetTurnableDataRsp::default_instance_;
  delete DailyWelfareGetTurnableDataRsp_reflection_;
  delete DailyWelfareGetTurnableAccRewardReq::default_instance_;
  delete DailyWelfareGetTurnableAccRewardReq_reflection_;
  delete DailyWelfareGetTTurnableAccRewardRsp::default_instance_;
  delete DailyWelfareGetTTurnableAccRewardRsp_reflection_;
  delete DailyWelfareTurnableReq::default_instance_;
  delete DailyWelfareTurnableReq_reflection_;
  delete DailyWelfareTurnableRsp::default_instance_;
  delete DailyWelfareTurnableRsp_reflection_;
  delete DailyWelfareGetTurnableRewardReq::default_instance_;
  delete DailyWelfareGetTurnableRewardReq_reflection_;
  delete DailyWelfareGetTurnableRewardRsp::default_instance_;
  delete DailyWelfareGetTurnableRewardRsp_reflection_;
  delete DailyWelfareGetTurnableRecordReq::default_instance_;
  delete DailyWelfareGetTurnableRecordReq_reflection_;
  delete DailyWelfareGetTurnableRecordRsp::default_instance_;
  delete DailyWelfareGetTurnableRecordRsp_reflection_;
  delete DailyWelfareGetPersonTurnableRecordReq::default_instance_;
  delete DailyWelfareGetPersonTurnableRecordReq_reflection_;
  delete DailyWelfareGetPersonTurnableRecordRsp::default_instance_;
  delete DailyWelfareGetPersonTurnableRecordRsp_reflection_;
  delete CLGetGiftSuperBuyInfoReq::default_instance_;
  delete CLGetGiftSuperBuyInfoReq_reflection_;
  delete LCGetGiftSuperBuyInfoRsp::default_instance_;
  delete LCGetGiftSuperBuyInfoRsp_reflection_;
  delete CLBuyGiftSuperBuyReq::default_instance_;
  delete CLBuyGiftSuperBuyReq_reflection_;
  delete LCBuyGiftSuperBuyRsp::default_instance_;
  delete LCBuyGiftSuperBuyRsp_reflection_;
  delete NotifyGiftSuperBuyChange::default_instance_;
  delete NotifyGiftSuperBuyChange_reflection_;
  delete CLGetInvestInfoReq::default_instance_;
  delete CLGetInvestInfoReq_reflection_;
  delete LCGetInvestInfoRsp::default_instance_;
  delete LCGetInvestInfoRsp_reflection_;
  delete CLGetInvestRewardReq::default_instance_;
  delete CLGetInvestRewardReq_reflection_;
  delete LCGetInvestRewardRsp::default_instance_;
  delete LCGetInvestRewardRsp_reflection_;
  delete NotifyInvestRewardDataChange::default_instance_;
  delete NotifyInvestRewardDataChange_reflection_;
  delete CLGetBuyInvestReq::default_instance_;
  delete CLGetBuyInvestReq_reflection_;
  delete LCGetBuyInvestRsp::default_instance_;
  delete LCGetBuyInvestRsp_reflection_;
  delete DailyWelfareGetYTTLGiftDataReq::default_instance_;
  delete DailyWelfareGetYTTLGiftDataReq_reflection_;
  delete DailyWelfareGetYTTLGiftDataRsp::default_instance_;
  delete DailyWelfareGetYTTLGiftDataRsp_reflection_;
}

void protobuf_AddDesc_DailyWelfare_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022DailyWelfare.proto\022\010proto_ff\032\tCom.prot"
    "o\032\017ComDefine.proto\"\037\n\035DailyWelfareGetXin"
    "gYunDataReq\"f\n\035DailyWelfareGetXingYunDat"
    "aRsp\022*\n\004data\030\001 \003(\0132\034.proto_ff.XingYunMiS"
    "hiPBData\022\031\n\021super_gift_status\030\002 \001(\005\"d\n\033D"
    "ailyWelfareXinYunBuyNotify\022*\n\004data\030\001 \001(\013"
    "2\034.proto_ff.XingYunMiShiPBData\022\031\n\021super_"
    "gift_status\030\002 \001(\005\"!\n\037DailyWelfareGetXing"
    "YunRecordReq\"Q\n\037DailyWelfareGetXingYunRe"
    "cordRsp\022.\n\006record\030\001 \003(\0132\036.proto_ff.XingY"
    "unMiShiPBRecord\"*\n(DailyWelfareGetXingYu"
    "nSuperGiftRewardReq\"W\n(DailyWelfareGetXi"
    "ngYunSuperGiftRewardRsp\022\020\n\010ret_code\030\001 \001("
    "\005\022\031\n\021super_gift_status\030\002 \001(\005\"1\n#DailyWel"
    "fareGetFreeXingYunRewardReq\022\n\n\002id\030\001 \001(\005\""
    "d\n$DailyWelfareGetFreeXingYunSRewardRsp\022"
    "\020\n\010ret_code\030\001 \001(\005\022*\n\004data\030\002 \001(\0132\034.proto_"
    "ff.XingYunMiShiPBData\"!\n\037DailyWelfareGet"
    "DailyGiftDataReq\"J\n\037DailyWelfareGetDaily"
    "GiftDataRsp\022\'\n\004data\030\001 \003(\0132\031.proto_ff.Dai"
    "lyGiftPBData\"I\n\036DailyWelfareDailyGiftBuy"
    "Notify\022\'\n\004data\030\001 \001(\0132\031.proto_ff.DailyGif"
    "tPBData\"#\n!DailyWelfareGetDailyGiftRecor"
    "dReq\"T\n!DailyWelfareGetDailyGiftRecordRs"
    "p\022/\n\006record\030\001 \003(\0132\037.proto_ff.DailyGiftPB"
    "DataRecord\"3\n%DailyWelfareGetFreeDailyGi"
    "ftRewardReq\022\n\n\002id\030\001 \001(\005\"b\n%DailyWelfareG"
    "etFreeDailyGiftRewardRsp\022\020\n\010ret_code\030\001 \001"
    "(\005\022\'\n\004data\030\002 \001(\0132\031.proto_ff.DailyGiftPBD"
    "ata\"%\n#DailyWelfareGetTodayRechargeDataR"
    "eq\"S\n#DailyWelfareGetTodayRechargeDataRs"
    "p\022,\n\004data\030\001 \003(\0132\036.proto_ff.LianChongToda"
    "yPBData\"\'\n%DailyWelfareGetTodayRechargeR"
    "ecordReq\"]\n%DailyWelfareGetTodayRecharge"
    "RecordRsp\0224\n\006record\030\001 \003(\0132$.proto_ff.Lia"
    "nChongTodayPBDataRecord\"R\n\"DailyWelfareG"
    "etTodayRechargeNotify\022,\n\004data\030\001 \001(\0132\036.pr"
    "oto_ff.LianChongTodayPBData\"#\n!DailyWelf"
    "areGetAccRechargeDataReq\"O\n!DailyWelfare"
    "GetAccRechargeDataRsp\022*\n\004data\030\001 \003(\0132\034.pr"
    "oto_ff.LianChongAccPBData\"%\n#DailyWelfar"
    "eGetAccRechargeRecordReq\"Y\n#DailyWelfare"
    "GetAccRechargeRecordRsp\0222\n\006record\030\001 \003(\0132"
    "\".proto_ff.LianChongAccPBDataRecord\"N\n D"
    "ailyWelfareGetAccRechargeNotify\022*\n\004data\030"
    "\001 \001(\0132\034.proto_ff.LianChongAccPBData\"3\n%D"
    "ailyWelfareGetTodayRechargeRewardReq\022\n\n\002"
    "id\030\001 \001(\005\"g\n%DailyWelfareGetTodayRecharge"
    "RewardRsp\022\020\n\010ret_code\030\001 \001(\005\022,\n\004data\030\002 \001("
    "\0132\036.proto_ff.LianChongTodayPBData\"1\n#Dai"
    "lyWelfareGetAccRechargeRewardReq\022\n\n\002id\030\001"
    " \001(\005\"c\n#DailyWelfareGetAccRechargeReward"
    "Rsp\022\020\n\010ret_code\030\001 \001(\005\022*\n\004data\030\002 \001(\0132\034.pr"
    "oto_ff.LianChongAccPBData\"!\n\037DailyWelfar"
    "eGetMonthCardDataReq\"k\n\031DailyWelfareMont"
    "hCardData\022\'\n\004data\030\001 \001(\0132\031.proto_ff.Month"
    "CardPBData\022\020\n\010left_day\030\003 \001(\005\022\023\n\013can_get_"
    "day\030\004 \001(\005\"T\n\037DailyWelfareGetMonthCardDat"
    "aRsp\0221\n\004data\030\001 \003(\0132#.proto_ff.DailyWelfa"
    "reMonthCardData\"/\n!DailyWelfareGetMonthC"
    "ardRewardReq\022\n\n\002id\030\001 \001(\005\"h\n!DailyWelfare"
    "GetMonthCardRewardRsp\022\020\n\010ret_code\030\001 \001(\005\022"
    "1\n\004data\030\002 \001(\0132#.proto_ff.DailyWelfareMon"
    "thCardData\"#\n!DailyWelfareGetMonthCardRe"
    "cordReq\"T\n!DailyWelfareGetMonthCardRecor"
    "dRsp\022/\n\006record\030\001 \003(\0132\037.proto_ff.MonthCar"
    "dPBDataRecord\"P\n\033DailyWelfareMonthCardNo"
    "tify\0221\n\004data\030\001 \001(\0132#.proto_ff.DailyWelfa"
    "reMonthCardData\"K\n\035DailyWelfareTurnableA"
    "ccNotify\022*\n\004data\030\001 \001(\0132\034.proto_ff.Turnta"
    "bleAccPBData\" \n\036DailyWelfareGetTurnableD"
    "ataReq\"\203\001\n\036DailyWelfareGetTurnableDataRs"
    "p\0223\n\rturntable_acc\030\001 \003(\0132\034.proto_ff.Turn"
    "tableAccPBData\022,\n\tturntable\030\002 \003(\0132\031.prot"
    "o_ff.TurntablePBData\"1\n#DailyWelfareGetT"
    "urnableAccRewardReq\022\n\n\002id\030\001 \001(\005\"d\n$Daily"
    "WelfareGetTTurnableAccRewardRsp\022\020\n\010ret_c"
    "ode\030\001 \001(\005\022*\n\004data\030\002 \001(\0132\034.proto_ff.Turnt"
    "ableAccPBData\"2\n\027DailyWelfareTurnableReq"
    "\022\n\n\002id\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"h\n\027DailyWelfar"
    "eTurnableRsp\022\020\n\010ret_code\030\001 \001(\005\022\'\n\004data\030\002"
    " \001(\0132\031.proto_ff.TurntablePBData\022\022\n\njackp"
    "ot_id\030\003 \003(\005\".\n DailyWelfareGetTurnableRe"
    "wardReq\022\n\n\002id\030\001 \001(\005\"]\n DailyWelfareGetTu"
    "rnableRewardRsp\022\020\n\010ret_code\030\001 \001(\005\022\'\n\004dat"
    "a\030\002 \001(\0132\031.proto_ff.TurntablePBData\"\"\n Da"
    "ilyWelfareGetTurnableRecordReq\"S\n DailyW"
    "elfareGetTurnableRecordRsp\022/\n\006record\030\001 \003"
    "(\0132\037.proto_ff.TurntablePBDataRecord\"(\n&D"
    "ailyWelfareGetPersonTurnableRecordReq\"Y\n"
    "&DailyWelfareGetPersonTurnableRecordRsp\022"
    "/\n\006record\030\001 \003(\0132\037.proto_ff.TurntablePBDa"
    "taRecord\"\032\n\030CLGetGiftSuperBuyInfoReq\"H\n\030"
    "LCGetGiftSuperBuyInfoRsp\022,\n\tsuper_buy\030\001 "
    "\003(\0132\031.proto_ff.OneSuperGiftBuy\"\"\n\024CLBuyG"
    "iftSuperBuyReq\022\n\n\002id\030\001 \001(\005\"V\n\024LCBuyGiftS"
    "uperBuyRsp\022\020\n\010ret_code\030\001 \001(\005\022,\n\tsuper_bu"
    "y\030\002 \001(\0132\031.proto_ff.OneSuperGiftBuy\"H\n\030No"
    "tifyGiftSuperBuyChange\022,\n\tsuper_buy\030\001 \001("
    "\0132\031.proto_ff.OneSuperGiftBuy\"\'\n\022CLGetInv"
    "estInfoReq\022\021\n\tinvest_id\030\001 \001(\005\"T\n\022LCGetIn"
    "vestInfoRsp\022\020\n\010ret_code\030\001 \001(\005\022,\n\004data\030\002 "
    "\001(\0132\036.proto_ff.OneWelfareInvestData\"0\n\024C"
    "LGetInvestRewardReq\022\030\n\020invest_reward_id\030"
    "\001 \001(\005\"[\n\024LCGetInvestRewardRsp\022\020\n\010ret_cod"
    "e\030\001 \001(\005\0221\n\004data\030\002 \001(\0132#.proto_ff.OnWelfa"
    "reInvestRewardData\"Q\n\034NotifyInvestReward"
    "DataChange\0221\n\004data\030\001 \001(\0132#.proto_ff.OnWe"
    "lfareInvestRewardData\"&\n\021CLGetBuyInvestR"
    "eq\022\021\n\tinvest_id\030\001 \001(\005\"S\n\021LCGetBuyInvestR"
    "sp\022\020\n\010ret_code\030\001 \001(\005\022,\n\004data\030\002 \001(\0132\036.pro"
    "to_ff.OneWelfareInvestData\" \n\036DailyWelfa"
    "reGetYTTLGiftDataReq\"\\\n\036DailyWelfareGetY"
    "TTLGiftDataRsp\022\020\n\010ret_code\030\001 \001(\005\022(\n\tyttl"
    "_gift\030\002 \003(\0132\025.proto_ff.OneYTTLGift", 4594);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DailyWelfare.proto", &protobuf_RegisterTypes);
  DailyWelfareGetXingYunDataReq::default_instance_ = new DailyWelfareGetXingYunDataReq();
  DailyWelfareGetXingYunDataRsp::default_instance_ = new DailyWelfareGetXingYunDataRsp();
  DailyWelfareXinYunBuyNotify::default_instance_ = new DailyWelfareXinYunBuyNotify();
  DailyWelfareGetXingYunRecordReq::default_instance_ = new DailyWelfareGetXingYunRecordReq();
  DailyWelfareGetXingYunRecordRsp::default_instance_ = new DailyWelfareGetXingYunRecordRsp();
  DailyWelfareGetXingYunSuperGiftRewardReq::default_instance_ = new DailyWelfareGetXingYunSuperGiftRewardReq();
  DailyWelfareGetXingYunSuperGiftRewardRsp::default_instance_ = new DailyWelfareGetXingYunSuperGiftRewardRsp();
  DailyWelfareGetFreeXingYunRewardReq::default_instance_ = new DailyWelfareGetFreeXingYunRewardReq();
  DailyWelfareGetFreeXingYunSRewardRsp::default_instance_ = new DailyWelfareGetFreeXingYunSRewardRsp();
  DailyWelfareGetDailyGiftDataReq::default_instance_ = new DailyWelfareGetDailyGiftDataReq();
  DailyWelfareGetDailyGiftDataRsp::default_instance_ = new DailyWelfareGetDailyGiftDataRsp();
  DailyWelfareDailyGiftBuyNotify::default_instance_ = new DailyWelfareDailyGiftBuyNotify();
  DailyWelfareGetDailyGiftRecordReq::default_instance_ = new DailyWelfareGetDailyGiftRecordReq();
  DailyWelfareGetDailyGiftRecordRsp::default_instance_ = new DailyWelfareGetDailyGiftRecordRsp();
  DailyWelfareGetFreeDailyGiftRewardReq::default_instance_ = new DailyWelfareGetFreeDailyGiftRewardReq();
  DailyWelfareGetFreeDailyGiftRewardRsp::default_instance_ = new DailyWelfareGetFreeDailyGiftRewardRsp();
  DailyWelfareGetTodayRechargeDataReq::default_instance_ = new DailyWelfareGetTodayRechargeDataReq();
  DailyWelfareGetTodayRechargeDataRsp::default_instance_ = new DailyWelfareGetTodayRechargeDataRsp();
  DailyWelfareGetTodayRechargeRecordReq::default_instance_ = new DailyWelfareGetTodayRechargeRecordReq();
  DailyWelfareGetTodayRechargeRecordRsp::default_instance_ = new DailyWelfareGetTodayRechargeRecordRsp();
  DailyWelfareGetTodayRechargeNotify::default_instance_ = new DailyWelfareGetTodayRechargeNotify();
  DailyWelfareGetAccRechargeDataReq::default_instance_ = new DailyWelfareGetAccRechargeDataReq();
  DailyWelfareGetAccRechargeDataRsp::default_instance_ = new DailyWelfareGetAccRechargeDataRsp();
  DailyWelfareGetAccRechargeRecordReq::default_instance_ = new DailyWelfareGetAccRechargeRecordReq();
  DailyWelfareGetAccRechargeRecordRsp::default_instance_ = new DailyWelfareGetAccRechargeRecordRsp();
  DailyWelfareGetAccRechargeNotify::default_instance_ = new DailyWelfareGetAccRechargeNotify();
  DailyWelfareGetTodayRechargeRewardReq::default_instance_ = new DailyWelfareGetTodayRechargeRewardReq();
  DailyWelfareGetTodayRechargeRewardRsp::default_instance_ = new DailyWelfareGetTodayRechargeRewardRsp();
  DailyWelfareGetAccRechargeRewardReq::default_instance_ = new DailyWelfareGetAccRechargeRewardReq();
  DailyWelfareGetAccRechargeRewardRsp::default_instance_ = new DailyWelfareGetAccRechargeRewardRsp();
  DailyWelfareGetMonthCardDataReq::default_instance_ = new DailyWelfareGetMonthCardDataReq();
  DailyWelfareMonthCardData::default_instance_ = new DailyWelfareMonthCardData();
  DailyWelfareGetMonthCardDataRsp::default_instance_ = new DailyWelfareGetMonthCardDataRsp();
  DailyWelfareGetMonthCardRewardReq::default_instance_ = new DailyWelfareGetMonthCardRewardReq();
  DailyWelfareGetMonthCardRewardRsp::default_instance_ = new DailyWelfareGetMonthCardRewardRsp();
  DailyWelfareGetMonthCardRecordReq::default_instance_ = new DailyWelfareGetMonthCardRecordReq();
  DailyWelfareGetMonthCardRecordRsp::default_instance_ = new DailyWelfareGetMonthCardRecordRsp();
  DailyWelfareMonthCardNotify::default_instance_ = new DailyWelfareMonthCardNotify();
  DailyWelfareTurnableAccNotify::default_instance_ = new DailyWelfareTurnableAccNotify();
  DailyWelfareGetTurnableDataReq::default_instance_ = new DailyWelfareGetTurnableDataReq();
  DailyWelfareGetTurnableDataRsp::default_instance_ = new DailyWelfareGetTurnableDataRsp();
  DailyWelfareGetTurnableAccRewardReq::default_instance_ = new DailyWelfareGetTurnableAccRewardReq();
  DailyWelfareGetTTurnableAccRewardRsp::default_instance_ = new DailyWelfareGetTTurnableAccRewardRsp();
  DailyWelfareTurnableReq::default_instance_ = new DailyWelfareTurnableReq();
  DailyWelfareTurnableRsp::default_instance_ = new DailyWelfareTurnableRsp();
  DailyWelfareGetTurnableRewardReq::default_instance_ = new DailyWelfareGetTurnableRewardReq();
  DailyWelfareGetTurnableRewardRsp::default_instance_ = new DailyWelfareGetTurnableRewardRsp();
  DailyWelfareGetTurnableRecordReq::default_instance_ = new DailyWelfareGetTurnableRecordReq();
  DailyWelfareGetTurnableRecordRsp::default_instance_ = new DailyWelfareGetTurnableRecordRsp();
  DailyWelfareGetPersonTurnableRecordReq::default_instance_ = new DailyWelfareGetPersonTurnableRecordReq();
  DailyWelfareGetPersonTurnableRecordRsp::default_instance_ = new DailyWelfareGetPersonTurnableRecordRsp();
  CLGetGiftSuperBuyInfoReq::default_instance_ = new CLGetGiftSuperBuyInfoReq();
  LCGetGiftSuperBuyInfoRsp::default_instance_ = new LCGetGiftSuperBuyInfoRsp();
  CLBuyGiftSuperBuyReq::default_instance_ = new CLBuyGiftSuperBuyReq();
  LCBuyGiftSuperBuyRsp::default_instance_ = new LCBuyGiftSuperBuyRsp();
  NotifyGiftSuperBuyChange::default_instance_ = new NotifyGiftSuperBuyChange();
  CLGetInvestInfoReq::default_instance_ = new CLGetInvestInfoReq();
  LCGetInvestInfoRsp::default_instance_ = new LCGetInvestInfoRsp();
  CLGetInvestRewardReq::default_instance_ = new CLGetInvestRewardReq();
  LCGetInvestRewardRsp::default_instance_ = new LCGetInvestRewardRsp();
  NotifyInvestRewardDataChange::default_instance_ = new NotifyInvestRewardDataChange();
  CLGetBuyInvestReq::default_instance_ = new CLGetBuyInvestReq();
  LCGetBuyInvestRsp::default_instance_ = new LCGetBuyInvestRsp();
  DailyWelfareGetYTTLGiftDataReq::default_instance_ = new DailyWelfareGetYTTLGiftDataReq();
  DailyWelfareGetYTTLGiftDataRsp::default_instance_ = new DailyWelfareGetYTTLGiftDataRsp();
  DailyWelfareGetXingYunDataReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetXingYunDataRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareXinYunBuyNotify::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetXingYunRecordReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetXingYunRecordRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetXingYunSuperGiftRewardReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetXingYunSuperGiftRewardRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetFreeXingYunRewardReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetFreeXingYunSRewardRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetDailyGiftDataReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetDailyGiftDataRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareDailyGiftBuyNotify::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetDailyGiftRecordReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetDailyGiftRecordRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetFreeDailyGiftRewardReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetFreeDailyGiftRewardRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTodayRechargeDataReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTodayRechargeDataRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTodayRechargeRecordReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTodayRechargeRecordRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTodayRechargeNotify::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetAccRechargeDataReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetAccRechargeDataRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetAccRechargeRecordReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetAccRechargeRecordRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetAccRechargeNotify::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTodayRechargeRewardReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTodayRechargeRewardRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetAccRechargeRewardReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetAccRechargeRewardRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetMonthCardDataReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareMonthCardData::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetMonthCardDataRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetMonthCardRewardReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetMonthCardRewardRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetMonthCardRecordReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetMonthCardRecordRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareMonthCardNotify::default_instance_->InitAsDefaultInstance();
  DailyWelfareTurnableAccNotify::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTurnableDataReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTurnableDataRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTurnableAccRewardReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTTurnableAccRewardRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareTurnableReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareTurnableRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTurnableRewardReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTurnableRewardRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTurnableRecordReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetTurnableRecordRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetPersonTurnableRecordReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetPersonTurnableRecordRsp::default_instance_->InitAsDefaultInstance();
  CLGetGiftSuperBuyInfoReq::default_instance_->InitAsDefaultInstance();
  LCGetGiftSuperBuyInfoRsp::default_instance_->InitAsDefaultInstance();
  CLBuyGiftSuperBuyReq::default_instance_->InitAsDefaultInstance();
  LCBuyGiftSuperBuyRsp::default_instance_->InitAsDefaultInstance();
  NotifyGiftSuperBuyChange::default_instance_->InitAsDefaultInstance();
  CLGetInvestInfoReq::default_instance_->InitAsDefaultInstance();
  LCGetInvestInfoRsp::default_instance_->InitAsDefaultInstance();
  CLGetInvestRewardReq::default_instance_->InitAsDefaultInstance();
  LCGetInvestRewardRsp::default_instance_->InitAsDefaultInstance();
  NotifyInvestRewardDataChange::default_instance_->InitAsDefaultInstance();
  CLGetBuyInvestReq::default_instance_->InitAsDefaultInstance();
  LCGetBuyInvestRsp::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetYTTLGiftDataReq::default_instance_->InitAsDefaultInstance();
  DailyWelfareGetYTTLGiftDataRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DailyWelfare_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DailyWelfare_2eproto {
  StaticDescriptorInitializer_DailyWelfare_2eproto() {
    protobuf_AddDesc_DailyWelfare_2eproto();
  }
} static_descriptor_initializer_DailyWelfare_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetXingYunDataReq::DailyWelfareGetXingYunDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetXingYunDataReq::InitAsDefaultInstance() {
}

DailyWelfareGetXingYunDataReq::DailyWelfareGetXingYunDataReq(const DailyWelfareGetXingYunDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetXingYunDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetXingYunDataReq::~DailyWelfareGetXingYunDataReq() {
  SharedDtor();
}

void DailyWelfareGetXingYunDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetXingYunDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetXingYunDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetXingYunDataReq_descriptor_;
}

const DailyWelfareGetXingYunDataReq& DailyWelfareGetXingYunDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetXingYunDataReq* DailyWelfareGetXingYunDataReq::default_instance_ = NULL;

DailyWelfareGetXingYunDataReq* DailyWelfareGetXingYunDataReq::New() const {
  return new DailyWelfareGetXingYunDataReq;
}

void DailyWelfareGetXingYunDataReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetXingYunDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetXingYunDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetXingYunDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetXingYunDataReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetXingYunDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetXingYunDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetXingYunDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetXingYunDataReq::MergeFrom(const DailyWelfareGetXingYunDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetXingYunDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetXingYunDataReq::CopyFrom(const DailyWelfareGetXingYunDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetXingYunDataReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetXingYunDataReq::Swap(DailyWelfareGetXingYunDataReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetXingYunDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetXingYunDataReq_descriptor_;
  metadata.reflection = DailyWelfareGetXingYunDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetXingYunDataRsp::kDataFieldNumber;
const int DailyWelfareGetXingYunDataRsp::kSuperGiftStatusFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetXingYunDataRsp::DailyWelfareGetXingYunDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetXingYunDataRsp::InitAsDefaultInstance() {
}

DailyWelfareGetXingYunDataRsp::DailyWelfareGetXingYunDataRsp(const DailyWelfareGetXingYunDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetXingYunDataRsp::SharedCtor() {
  _cached_size_ = 0;
  super_gift_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetXingYunDataRsp::~DailyWelfareGetXingYunDataRsp() {
  SharedDtor();
}

void DailyWelfareGetXingYunDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetXingYunDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetXingYunDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetXingYunDataRsp_descriptor_;
}

const DailyWelfareGetXingYunDataRsp& DailyWelfareGetXingYunDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetXingYunDataRsp* DailyWelfareGetXingYunDataRsp::default_instance_ = NULL;

DailyWelfareGetXingYunDataRsp* DailyWelfareGetXingYunDataRsp::New() const {
  return new DailyWelfareGetXingYunDataRsp;
}

void DailyWelfareGetXingYunDataRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    super_gift_status_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetXingYunDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.XingYunMiShiPBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_super_gift_status;
        break;
      }

      // optional int32 super_gift_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_super_gift_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &super_gift_status_)));
          set_has_super_gift_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetXingYunDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.XingYunMiShiPBData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional int32 super_gift_status = 2;
  if (has_super_gift_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->super_gift_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetXingYunDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.XingYunMiShiPBData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional int32 super_gift_status = 2;
  if (has_super_gift_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->super_gift_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetXingYunDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 super_gift_status = 2;
    if (has_super_gift_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->super_gift_status());
    }

  }
  // repeated .proto_ff.XingYunMiShiPBData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetXingYunDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetXingYunDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetXingYunDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetXingYunDataRsp::MergeFrom(const DailyWelfareGetXingYunDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_super_gift_status()) {
      set_super_gift_status(from.super_gift_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetXingYunDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetXingYunDataRsp::CopyFrom(const DailyWelfareGetXingYunDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetXingYunDataRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetXingYunDataRsp::Swap(DailyWelfareGetXingYunDataRsp* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(super_gift_status_, other->super_gift_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetXingYunDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetXingYunDataRsp_descriptor_;
  metadata.reflection = DailyWelfareGetXingYunDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareXinYunBuyNotify::kDataFieldNumber;
const int DailyWelfareXinYunBuyNotify::kSuperGiftStatusFieldNumber;
#endif  // !_MSC_VER

DailyWelfareXinYunBuyNotify::DailyWelfareXinYunBuyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareXinYunBuyNotify::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::XingYunMiShiPBData*>(&::proto_ff::XingYunMiShiPBData::default_instance());
}

DailyWelfareXinYunBuyNotify::DailyWelfareXinYunBuyNotify(const DailyWelfareXinYunBuyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareXinYunBuyNotify::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  super_gift_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareXinYunBuyNotify::~DailyWelfareXinYunBuyNotify() {
  SharedDtor();
}

void DailyWelfareXinYunBuyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareXinYunBuyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareXinYunBuyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareXinYunBuyNotify_descriptor_;
}

const DailyWelfareXinYunBuyNotify& DailyWelfareXinYunBuyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareXinYunBuyNotify* DailyWelfareXinYunBuyNotify::default_instance_ = NULL;

DailyWelfareXinYunBuyNotify* DailyWelfareXinYunBuyNotify::New() const {
  return new DailyWelfareXinYunBuyNotify;
}

void DailyWelfareXinYunBuyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::XingYunMiShiPBData::Clear();
    }
    super_gift_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareXinYunBuyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.XingYunMiShiPBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_super_gift_status;
        break;
      }

      // optional int32 super_gift_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_super_gift_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &super_gift_status_)));
          set_has_super_gift_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareXinYunBuyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.XingYunMiShiPBData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional int32 super_gift_status = 2;
  if (has_super_gift_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->super_gift_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareXinYunBuyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.XingYunMiShiPBData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional int32 super_gift_status = 2;
  if (has_super_gift_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->super_gift_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareXinYunBuyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.XingYunMiShiPBData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional int32 super_gift_status = 2;
    if (has_super_gift_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->super_gift_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareXinYunBuyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareXinYunBuyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareXinYunBuyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareXinYunBuyNotify::MergeFrom(const DailyWelfareXinYunBuyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto_ff::XingYunMiShiPBData::MergeFrom(from.data());
    }
    if (from.has_super_gift_status()) {
      set_super_gift_status(from.super_gift_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareXinYunBuyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareXinYunBuyNotify::CopyFrom(const DailyWelfareXinYunBuyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareXinYunBuyNotify::IsInitialized() const {

  return true;
}

void DailyWelfareXinYunBuyNotify::Swap(DailyWelfareXinYunBuyNotify* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(super_gift_status_, other->super_gift_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareXinYunBuyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareXinYunBuyNotify_descriptor_;
  metadata.reflection = DailyWelfareXinYunBuyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetXingYunRecordReq::DailyWelfareGetXingYunRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetXingYunRecordReq::InitAsDefaultInstance() {
}

DailyWelfareGetXingYunRecordReq::DailyWelfareGetXingYunRecordReq(const DailyWelfareGetXingYunRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetXingYunRecordReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetXingYunRecordReq::~DailyWelfareGetXingYunRecordReq() {
  SharedDtor();
}

void DailyWelfareGetXingYunRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetXingYunRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetXingYunRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetXingYunRecordReq_descriptor_;
}

const DailyWelfareGetXingYunRecordReq& DailyWelfareGetXingYunRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetXingYunRecordReq* DailyWelfareGetXingYunRecordReq::default_instance_ = NULL;

DailyWelfareGetXingYunRecordReq* DailyWelfareGetXingYunRecordReq::New() const {
  return new DailyWelfareGetXingYunRecordReq;
}

void DailyWelfareGetXingYunRecordReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetXingYunRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetXingYunRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetXingYunRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetXingYunRecordReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetXingYunRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetXingYunRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetXingYunRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetXingYunRecordReq::MergeFrom(const DailyWelfareGetXingYunRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetXingYunRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetXingYunRecordReq::CopyFrom(const DailyWelfareGetXingYunRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetXingYunRecordReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetXingYunRecordReq::Swap(DailyWelfareGetXingYunRecordReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetXingYunRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetXingYunRecordReq_descriptor_;
  metadata.reflection = DailyWelfareGetXingYunRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetXingYunRecordRsp::kRecordFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetXingYunRecordRsp::DailyWelfareGetXingYunRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetXingYunRecordRsp::InitAsDefaultInstance() {
}

DailyWelfareGetXingYunRecordRsp::DailyWelfareGetXingYunRecordRsp(const DailyWelfareGetXingYunRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetXingYunRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetXingYunRecordRsp::~DailyWelfareGetXingYunRecordRsp() {
  SharedDtor();
}

void DailyWelfareGetXingYunRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetXingYunRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetXingYunRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetXingYunRecordRsp_descriptor_;
}

const DailyWelfareGetXingYunRecordRsp& DailyWelfareGetXingYunRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetXingYunRecordRsp* DailyWelfareGetXingYunRecordRsp::default_instance_ = NULL;

DailyWelfareGetXingYunRecordRsp* DailyWelfareGetXingYunRecordRsp::New() const {
  return new DailyWelfareGetXingYunRecordRsp;
}

void DailyWelfareGetXingYunRecordRsp::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetXingYunRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.XingYunMiShiPBRecord record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetXingYunRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.XingYunMiShiPBRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetXingYunRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.XingYunMiShiPBRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetXingYunRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.XingYunMiShiPBRecord record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetXingYunRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetXingYunRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetXingYunRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetXingYunRecordRsp::MergeFrom(const DailyWelfareGetXingYunRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetXingYunRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetXingYunRecordRsp::CopyFrom(const DailyWelfareGetXingYunRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetXingYunRecordRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetXingYunRecordRsp::Swap(DailyWelfareGetXingYunRecordRsp* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetXingYunRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetXingYunRecordRsp_descriptor_;
  metadata.reflection = DailyWelfareGetXingYunRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetXingYunSuperGiftRewardReq::DailyWelfareGetXingYunSuperGiftRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetXingYunSuperGiftRewardReq::InitAsDefaultInstance() {
}

DailyWelfareGetXingYunSuperGiftRewardReq::DailyWelfareGetXingYunSuperGiftRewardReq(const DailyWelfareGetXingYunSuperGiftRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetXingYunSuperGiftRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetXingYunSuperGiftRewardReq::~DailyWelfareGetXingYunSuperGiftRewardReq() {
  SharedDtor();
}

void DailyWelfareGetXingYunSuperGiftRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetXingYunSuperGiftRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetXingYunSuperGiftRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetXingYunSuperGiftRewardReq_descriptor_;
}

const DailyWelfareGetXingYunSuperGiftRewardReq& DailyWelfareGetXingYunSuperGiftRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetXingYunSuperGiftRewardReq* DailyWelfareGetXingYunSuperGiftRewardReq::default_instance_ = NULL;

DailyWelfareGetXingYunSuperGiftRewardReq* DailyWelfareGetXingYunSuperGiftRewardReq::New() const {
  return new DailyWelfareGetXingYunSuperGiftRewardReq;
}

void DailyWelfareGetXingYunSuperGiftRewardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetXingYunSuperGiftRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetXingYunSuperGiftRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetXingYunSuperGiftRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetXingYunSuperGiftRewardReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetXingYunSuperGiftRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetXingYunSuperGiftRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetXingYunSuperGiftRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetXingYunSuperGiftRewardReq::MergeFrom(const DailyWelfareGetXingYunSuperGiftRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetXingYunSuperGiftRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetXingYunSuperGiftRewardReq::CopyFrom(const DailyWelfareGetXingYunSuperGiftRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetXingYunSuperGiftRewardReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetXingYunSuperGiftRewardReq::Swap(DailyWelfareGetXingYunSuperGiftRewardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetXingYunSuperGiftRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetXingYunSuperGiftRewardReq_descriptor_;
  metadata.reflection = DailyWelfareGetXingYunSuperGiftRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetXingYunSuperGiftRewardRsp::kRetCodeFieldNumber;
const int DailyWelfareGetXingYunSuperGiftRewardRsp::kSuperGiftStatusFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetXingYunSuperGiftRewardRsp::DailyWelfareGetXingYunSuperGiftRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetXingYunSuperGiftRewardRsp::InitAsDefaultInstance() {
}

DailyWelfareGetXingYunSuperGiftRewardRsp::DailyWelfareGetXingYunSuperGiftRewardRsp(const DailyWelfareGetXingYunSuperGiftRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetXingYunSuperGiftRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  super_gift_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetXingYunSuperGiftRewardRsp::~DailyWelfareGetXingYunSuperGiftRewardRsp() {
  SharedDtor();
}

void DailyWelfareGetXingYunSuperGiftRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetXingYunSuperGiftRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetXingYunSuperGiftRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetXingYunSuperGiftRewardRsp_descriptor_;
}

const DailyWelfareGetXingYunSuperGiftRewardRsp& DailyWelfareGetXingYunSuperGiftRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetXingYunSuperGiftRewardRsp* DailyWelfareGetXingYunSuperGiftRewardRsp::default_instance_ = NULL;

DailyWelfareGetXingYunSuperGiftRewardRsp* DailyWelfareGetXingYunSuperGiftRewardRsp::New() const {
  return new DailyWelfareGetXingYunSuperGiftRewardRsp;
}

void DailyWelfareGetXingYunSuperGiftRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    super_gift_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetXingYunSuperGiftRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_super_gift_status;
        break;
      }

      // optional int32 super_gift_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_super_gift_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &super_gift_status_)));
          set_has_super_gift_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetXingYunSuperGiftRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 super_gift_status = 2;
  if (has_super_gift_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->super_gift_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetXingYunSuperGiftRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 super_gift_status = 2;
  if (has_super_gift_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->super_gift_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetXingYunSuperGiftRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 super_gift_status = 2;
    if (has_super_gift_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->super_gift_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetXingYunSuperGiftRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetXingYunSuperGiftRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetXingYunSuperGiftRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetXingYunSuperGiftRewardRsp::MergeFrom(const DailyWelfareGetXingYunSuperGiftRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_super_gift_status()) {
      set_super_gift_status(from.super_gift_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetXingYunSuperGiftRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetXingYunSuperGiftRewardRsp::CopyFrom(const DailyWelfareGetXingYunSuperGiftRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetXingYunSuperGiftRewardRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetXingYunSuperGiftRewardRsp::Swap(DailyWelfareGetXingYunSuperGiftRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(super_gift_status_, other->super_gift_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetXingYunSuperGiftRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetXingYunSuperGiftRewardRsp_descriptor_;
  metadata.reflection = DailyWelfareGetXingYunSuperGiftRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetFreeXingYunRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetFreeXingYunRewardReq::DailyWelfareGetFreeXingYunRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetFreeXingYunRewardReq::InitAsDefaultInstance() {
}

DailyWelfareGetFreeXingYunRewardReq::DailyWelfareGetFreeXingYunRewardReq(const DailyWelfareGetFreeXingYunRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetFreeXingYunRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetFreeXingYunRewardReq::~DailyWelfareGetFreeXingYunRewardReq() {
  SharedDtor();
}

void DailyWelfareGetFreeXingYunRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetFreeXingYunRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetFreeXingYunRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetFreeXingYunRewardReq_descriptor_;
}

const DailyWelfareGetFreeXingYunRewardReq& DailyWelfareGetFreeXingYunRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetFreeXingYunRewardReq* DailyWelfareGetFreeXingYunRewardReq::default_instance_ = NULL;

DailyWelfareGetFreeXingYunRewardReq* DailyWelfareGetFreeXingYunRewardReq::New() const {
  return new DailyWelfareGetFreeXingYunRewardReq;
}

void DailyWelfareGetFreeXingYunRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetFreeXingYunRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetFreeXingYunRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetFreeXingYunRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetFreeXingYunRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetFreeXingYunRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetFreeXingYunRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetFreeXingYunRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetFreeXingYunRewardReq::MergeFrom(const DailyWelfareGetFreeXingYunRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetFreeXingYunRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetFreeXingYunRewardReq::CopyFrom(const DailyWelfareGetFreeXingYunRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetFreeXingYunRewardReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetFreeXingYunRewardReq::Swap(DailyWelfareGetFreeXingYunRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetFreeXingYunRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetFreeXingYunRewardReq_descriptor_;
  metadata.reflection = DailyWelfareGetFreeXingYunRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetFreeXingYunSRewardRsp::kRetCodeFieldNumber;
const int DailyWelfareGetFreeXingYunSRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetFreeXingYunSRewardRsp::DailyWelfareGetFreeXingYunSRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetFreeXingYunSRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::XingYunMiShiPBData*>(&::proto_ff::XingYunMiShiPBData::default_instance());
}

DailyWelfareGetFreeXingYunSRewardRsp::DailyWelfareGetFreeXingYunSRewardRsp(const DailyWelfareGetFreeXingYunSRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetFreeXingYunSRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetFreeXingYunSRewardRsp::~DailyWelfareGetFreeXingYunSRewardRsp() {
  SharedDtor();
}

void DailyWelfareGetFreeXingYunSRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareGetFreeXingYunSRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetFreeXingYunSRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetFreeXingYunSRewardRsp_descriptor_;
}

const DailyWelfareGetFreeXingYunSRewardRsp& DailyWelfareGetFreeXingYunSRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetFreeXingYunSRewardRsp* DailyWelfareGetFreeXingYunSRewardRsp::default_instance_ = NULL;

DailyWelfareGetFreeXingYunSRewardRsp* DailyWelfareGetFreeXingYunSRewardRsp::New() const {
  return new DailyWelfareGetFreeXingYunSRewardRsp;
}

void DailyWelfareGetFreeXingYunSRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::XingYunMiShiPBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetFreeXingYunSRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.XingYunMiShiPBData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetFreeXingYunSRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.XingYunMiShiPBData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetFreeXingYunSRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.XingYunMiShiPBData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetFreeXingYunSRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.XingYunMiShiPBData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetFreeXingYunSRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetFreeXingYunSRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetFreeXingYunSRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetFreeXingYunSRewardRsp::MergeFrom(const DailyWelfareGetFreeXingYunSRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::XingYunMiShiPBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetFreeXingYunSRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetFreeXingYunSRewardRsp::CopyFrom(const DailyWelfareGetFreeXingYunSRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetFreeXingYunSRewardRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetFreeXingYunSRewardRsp::Swap(DailyWelfareGetFreeXingYunSRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetFreeXingYunSRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetFreeXingYunSRewardRsp_descriptor_;
  metadata.reflection = DailyWelfareGetFreeXingYunSRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetDailyGiftDataReq::DailyWelfareGetDailyGiftDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetDailyGiftDataReq::InitAsDefaultInstance() {
}

DailyWelfareGetDailyGiftDataReq::DailyWelfareGetDailyGiftDataReq(const DailyWelfareGetDailyGiftDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetDailyGiftDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetDailyGiftDataReq::~DailyWelfareGetDailyGiftDataReq() {
  SharedDtor();
}

void DailyWelfareGetDailyGiftDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetDailyGiftDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetDailyGiftDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetDailyGiftDataReq_descriptor_;
}

const DailyWelfareGetDailyGiftDataReq& DailyWelfareGetDailyGiftDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetDailyGiftDataReq* DailyWelfareGetDailyGiftDataReq::default_instance_ = NULL;

DailyWelfareGetDailyGiftDataReq* DailyWelfareGetDailyGiftDataReq::New() const {
  return new DailyWelfareGetDailyGiftDataReq;
}

void DailyWelfareGetDailyGiftDataReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetDailyGiftDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetDailyGiftDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetDailyGiftDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetDailyGiftDataReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetDailyGiftDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetDailyGiftDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetDailyGiftDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetDailyGiftDataReq::MergeFrom(const DailyWelfareGetDailyGiftDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetDailyGiftDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetDailyGiftDataReq::CopyFrom(const DailyWelfareGetDailyGiftDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetDailyGiftDataReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetDailyGiftDataReq::Swap(DailyWelfareGetDailyGiftDataReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetDailyGiftDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetDailyGiftDataReq_descriptor_;
  metadata.reflection = DailyWelfareGetDailyGiftDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetDailyGiftDataRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetDailyGiftDataRsp::DailyWelfareGetDailyGiftDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetDailyGiftDataRsp::InitAsDefaultInstance() {
}

DailyWelfareGetDailyGiftDataRsp::DailyWelfareGetDailyGiftDataRsp(const DailyWelfareGetDailyGiftDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetDailyGiftDataRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetDailyGiftDataRsp::~DailyWelfareGetDailyGiftDataRsp() {
  SharedDtor();
}

void DailyWelfareGetDailyGiftDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetDailyGiftDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetDailyGiftDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetDailyGiftDataRsp_descriptor_;
}

const DailyWelfareGetDailyGiftDataRsp& DailyWelfareGetDailyGiftDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetDailyGiftDataRsp* DailyWelfareGetDailyGiftDataRsp::default_instance_ = NULL;

DailyWelfareGetDailyGiftDataRsp* DailyWelfareGetDailyGiftDataRsp::New() const {
  return new DailyWelfareGetDailyGiftDataRsp;
}

void DailyWelfareGetDailyGiftDataRsp::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetDailyGiftDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DailyGiftPBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetDailyGiftDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DailyGiftPBData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetDailyGiftDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DailyGiftPBData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetDailyGiftDataRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.DailyGiftPBData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetDailyGiftDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetDailyGiftDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetDailyGiftDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetDailyGiftDataRsp::MergeFrom(const DailyWelfareGetDailyGiftDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetDailyGiftDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetDailyGiftDataRsp::CopyFrom(const DailyWelfareGetDailyGiftDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetDailyGiftDataRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetDailyGiftDataRsp::Swap(DailyWelfareGetDailyGiftDataRsp* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetDailyGiftDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetDailyGiftDataRsp_descriptor_;
  metadata.reflection = DailyWelfareGetDailyGiftDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareDailyGiftBuyNotify::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareDailyGiftBuyNotify::DailyWelfareDailyGiftBuyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareDailyGiftBuyNotify::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::DailyGiftPBData*>(&::proto_ff::DailyGiftPBData::default_instance());
}

DailyWelfareDailyGiftBuyNotify::DailyWelfareDailyGiftBuyNotify(const DailyWelfareDailyGiftBuyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareDailyGiftBuyNotify::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareDailyGiftBuyNotify::~DailyWelfareDailyGiftBuyNotify() {
  SharedDtor();
}

void DailyWelfareDailyGiftBuyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareDailyGiftBuyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareDailyGiftBuyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareDailyGiftBuyNotify_descriptor_;
}

const DailyWelfareDailyGiftBuyNotify& DailyWelfareDailyGiftBuyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareDailyGiftBuyNotify* DailyWelfareDailyGiftBuyNotify::default_instance_ = NULL;

DailyWelfareDailyGiftBuyNotify* DailyWelfareDailyGiftBuyNotify::New() const {
  return new DailyWelfareDailyGiftBuyNotify;
}

void DailyWelfareDailyGiftBuyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::DailyGiftPBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareDailyGiftBuyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.DailyGiftPBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareDailyGiftBuyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.DailyGiftPBData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareDailyGiftBuyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.DailyGiftPBData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareDailyGiftBuyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.DailyGiftPBData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareDailyGiftBuyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareDailyGiftBuyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareDailyGiftBuyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareDailyGiftBuyNotify::MergeFrom(const DailyWelfareDailyGiftBuyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto_ff::DailyGiftPBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareDailyGiftBuyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareDailyGiftBuyNotify::CopyFrom(const DailyWelfareDailyGiftBuyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareDailyGiftBuyNotify::IsInitialized() const {

  return true;
}

void DailyWelfareDailyGiftBuyNotify::Swap(DailyWelfareDailyGiftBuyNotify* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareDailyGiftBuyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareDailyGiftBuyNotify_descriptor_;
  metadata.reflection = DailyWelfareDailyGiftBuyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetDailyGiftRecordReq::DailyWelfareGetDailyGiftRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetDailyGiftRecordReq::InitAsDefaultInstance() {
}

DailyWelfareGetDailyGiftRecordReq::DailyWelfareGetDailyGiftRecordReq(const DailyWelfareGetDailyGiftRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetDailyGiftRecordReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetDailyGiftRecordReq::~DailyWelfareGetDailyGiftRecordReq() {
  SharedDtor();
}

void DailyWelfareGetDailyGiftRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetDailyGiftRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetDailyGiftRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetDailyGiftRecordReq_descriptor_;
}

const DailyWelfareGetDailyGiftRecordReq& DailyWelfareGetDailyGiftRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetDailyGiftRecordReq* DailyWelfareGetDailyGiftRecordReq::default_instance_ = NULL;

DailyWelfareGetDailyGiftRecordReq* DailyWelfareGetDailyGiftRecordReq::New() const {
  return new DailyWelfareGetDailyGiftRecordReq;
}

void DailyWelfareGetDailyGiftRecordReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetDailyGiftRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetDailyGiftRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetDailyGiftRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetDailyGiftRecordReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetDailyGiftRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetDailyGiftRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetDailyGiftRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetDailyGiftRecordReq::MergeFrom(const DailyWelfareGetDailyGiftRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetDailyGiftRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetDailyGiftRecordReq::CopyFrom(const DailyWelfareGetDailyGiftRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetDailyGiftRecordReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetDailyGiftRecordReq::Swap(DailyWelfareGetDailyGiftRecordReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetDailyGiftRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetDailyGiftRecordReq_descriptor_;
  metadata.reflection = DailyWelfareGetDailyGiftRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetDailyGiftRecordRsp::kRecordFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetDailyGiftRecordRsp::DailyWelfareGetDailyGiftRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetDailyGiftRecordRsp::InitAsDefaultInstance() {
}

DailyWelfareGetDailyGiftRecordRsp::DailyWelfareGetDailyGiftRecordRsp(const DailyWelfareGetDailyGiftRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetDailyGiftRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetDailyGiftRecordRsp::~DailyWelfareGetDailyGiftRecordRsp() {
  SharedDtor();
}

void DailyWelfareGetDailyGiftRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetDailyGiftRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetDailyGiftRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetDailyGiftRecordRsp_descriptor_;
}

const DailyWelfareGetDailyGiftRecordRsp& DailyWelfareGetDailyGiftRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetDailyGiftRecordRsp* DailyWelfareGetDailyGiftRecordRsp::default_instance_ = NULL;

DailyWelfareGetDailyGiftRecordRsp* DailyWelfareGetDailyGiftRecordRsp::New() const {
  return new DailyWelfareGetDailyGiftRecordRsp;
}

void DailyWelfareGetDailyGiftRecordRsp::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetDailyGiftRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DailyGiftPBDataRecord record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetDailyGiftRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DailyGiftPBDataRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetDailyGiftRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DailyGiftPBDataRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetDailyGiftRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.DailyGiftPBDataRecord record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetDailyGiftRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetDailyGiftRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetDailyGiftRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetDailyGiftRecordRsp::MergeFrom(const DailyWelfareGetDailyGiftRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetDailyGiftRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetDailyGiftRecordRsp::CopyFrom(const DailyWelfareGetDailyGiftRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetDailyGiftRecordRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetDailyGiftRecordRsp::Swap(DailyWelfareGetDailyGiftRecordRsp* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetDailyGiftRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetDailyGiftRecordRsp_descriptor_;
  metadata.reflection = DailyWelfareGetDailyGiftRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetFreeDailyGiftRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetFreeDailyGiftRewardReq::DailyWelfareGetFreeDailyGiftRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetFreeDailyGiftRewardReq::InitAsDefaultInstance() {
}

DailyWelfareGetFreeDailyGiftRewardReq::DailyWelfareGetFreeDailyGiftRewardReq(const DailyWelfareGetFreeDailyGiftRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetFreeDailyGiftRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetFreeDailyGiftRewardReq::~DailyWelfareGetFreeDailyGiftRewardReq() {
  SharedDtor();
}

void DailyWelfareGetFreeDailyGiftRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetFreeDailyGiftRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetFreeDailyGiftRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetFreeDailyGiftRewardReq_descriptor_;
}

const DailyWelfareGetFreeDailyGiftRewardReq& DailyWelfareGetFreeDailyGiftRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetFreeDailyGiftRewardReq* DailyWelfareGetFreeDailyGiftRewardReq::default_instance_ = NULL;

DailyWelfareGetFreeDailyGiftRewardReq* DailyWelfareGetFreeDailyGiftRewardReq::New() const {
  return new DailyWelfareGetFreeDailyGiftRewardReq;
}

void DailyWelfareGetFreeDailyGiftRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetFreeDailyGiftRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetFreeDailyGiftRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetFreeDailyGiftRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetFreeDailyGiftRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetFreeDailyGiftRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetFreeDailyGiftRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetFreeDailyGiftRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetFreeDailyGiftRewardReq::MergeFrom(const DailyWelfareGetFreeDailyGiftRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetFreeDailyGiftRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetFreeDailyGiftRewardReq::CopyFrom(const DailyWelfareGetFreeDailyGiftRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetFreeDailyGiftRewardReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetFreeDailyGiftRewardReq::Swap(DailyWelfareGetFreeDailyGiftRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetFreeDailyGiftRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetFreeDailyGiftRewardReq_descriptor_;
  metadata.reflection = DailyWelfareGetFreeDailyGiftRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetFreeDailyGiftRewardRsp::kRetCodeFieldNumber;
const int DailyWelfareGetFreeDailyGiftRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetFreeDailyGiftRewardRsp::DailyWelfareGetFreeDailyGiftRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetFreeDailyGiftRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::DailyGiftPBData*>(&::proto_ff::DailyGiftPBData::default_instance());
}

DailyWelfareGetFreeDailyGiftRewardRsp::DailyWelfareGetFreeDailyGiftRewardRsp(const DailyWelfareGetFreeDailyGiftRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetFreeDailyGiftRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetFreeDailyGiftRewardRsp::~DailyWelfareGetFreeDailyGiftRewardRsp() {
  SharedDtor();
}

void DailyWelfareGetFreeDailyGiftRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareGetFreeDailyGiftRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetFreeDailyGiftRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetFreeDailyGiftRewardRsp_descriptor_;
}

const DailyWelfareGetFreeDailyGiftRewardRsp& DailyWelfareGetFreeDailyGiftRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetFreeDailyGiftRewardRsp* DailyWelfareGetFreeDailyGiftRewardRsp::default_instance_ = NULL;

DailyWelfareGetFreeDailyGiftRewardRsp* DailyWelfareGetFreeDailyGiftRewardRsp::New() const {
  return new DailyWelfareGetFreeDailyGiftRewardRsp;
}

void DailyWelfareGetFreeDailyGiftRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::DailyGiftPBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetFreeDailyGiftRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.DailyGiftPBData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetFreeDailyGiftRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.DailyGiftPBData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetFreeDailyGiftRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.DailyGiftPBData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetFreeDailyGiftRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.DailyGiftPBData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetFreeDailyGiftRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetFreeDailyGiftRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetFreeDailyGiftRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetFreeDailyGiftRewardRsp::MergeFrom(const DailyWelfareGetFreeDailyGiftRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::DailyGiftPBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetFreeDailyGiftRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetFreeDailyGiftRewardRsp::CopyFrom(const DailyWelfareGetFreeDailyGiftRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetFreeDailyGiftRewardRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetFreeDailyGiftRewardRsp::Swap(DailyWelfareGetFreeDailyGiftRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetFreeDailyGiftRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetFreeDailyGiftRewardRsp_descriptor_;
  metadata.reflection = DailyWelfareGetFreeDailyGiftRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetTodayRechargeDataReq::DailyWelfareGetTodayRechargeDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTodayRechargeDataReq::InitAsDefaultInstance() {
}

DailyWelfareGetTodayRechargeDataReq::DailyWelfareGetTodayRechargeDataReq(const DailyWelfareGetTodayRechargeDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTodayRechargeDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTodayRechargeDataReq::~DailyWelfareGetTodayRechargeDataReq() {
  SharedDtor();
}

void DailyWelfareGetTodayRechargeDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetTodayRechargeDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTodayRechargeDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTodayRechargeDataReq_descriptor_;
}

const DailyWelfareGetTodayRechargeDataReq& DailyWelfareGetTodayRechargeDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTodayRechargeDataReq* DailyWelfareGetTodayRechargeDataReq::default_instance_ = NULL;

DailyWelfareGetTodayRechargeDataReq* DailyWelfareGetTodayRechargeDataReq::New() const {
  return new DailyWelfareGetTodayRechargeDataReq;
}

void DailyWelfareGetTodayRechargeDataReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTodayRechargeDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetTodayRechargeDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTodayRechargeDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTodayRechargeDataReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTodayRechargeDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTodayRechargeDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTodayRechargeDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTodayRechargeDataReq::MergeFrom(const DailyWelfareGetTodayRechargeDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTodayRechargeDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTodayRechargeDataReq::CopyFrom(const DailyWelfareGetTodayRechargeDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTodayRechargeDataReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetTodayRechargeDataReq::Swap(DailyWelfareGetTodayRechargeDataReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTodayRechargeDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTodayRechargeDataReq_descriptor_;
  metadata.reflection = DailyWelfareGetTodayRechargeDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetTodayRechargeDataRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetTodayRechargeDataRsp::DailyWelfareGetTodayRechargeDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTodayRechargeDataRsp::InitAsDefaultInstance() {
}

DailyWelfareGetTodayRechargeDataRsp::DailyWelfareGetTodayRechargeDataRsp(const DailyWelfareGetTodayRechargeDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTodayRechargeDataRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTodayRechargeDataRsp::~DailyWelfareGetTodayRechargeDataRsp() {
  SharedDtor();
}

void DailyWelfareGetTodayRechargeDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetTodayRechargeDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTodayRechargeDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTodayRechargeDataRsp_descriptor_;
}

const DailyWelfareGetTodayRechargeDataRsp& DailyWelfareGetTodayRechargeDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTodayRechargeDataRsp* DailyWelfareGetTodayRechargeDataRsp::default_instance_ = NULL;

DailyWelfareGetTodayRechargeDataRsp* DailyWelfareGetTodayRechargeDataRsp::New() const {
  return new DailyWelfareGetTodayRechargeDataRsp;
}

void DailyWelfareGetTodayRechargeDataRsp::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTodayRechargeDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.LianChongTodayPBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetTodayRechargeDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.LianChongTodayPBData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTodayRechargeDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.LianChongTodayPBData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTodayRechargeDataRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.LianChongTodayPBData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTodayRechargeDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTodayRechargeDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTodayRechargeDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTodayRechargeDataRsp::MergeFrom(const DailyWelfareGetTodayRechargeDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTodayRechargeDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTodayRechargeDataRsp::CopyFrom(const DailyWelfareGetTodayRechargeDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTodayRechargeDataRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetTodayRechargeDataRsp::Swap(DailyWelfareGetTodayRechargeDataRsp* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTodayRechargeDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTodayRechargeDataRsp_descriptor_;
  metadata.reflection = DailyWelfareGetTodayRechargeDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetTodayRechargeRecordReq::DailyWelfareGetTodayRechargeRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTodayRechargeRecordReq::InitAsDefaultInstance() {
}

DailyWelfareGetTodayRechargeRecordReq::DailyWelfareGetTodayRechargeRecordReq(const DailyWelfareGetTodayRechargeRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTodayRechargeRecordReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTodayRechargeRecordReq::~DailyWelfareGetTodayRechargeRecordReq() {
  SharedDtor();
}

void DailyWelfareGetTodayRechargeRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetTodayRechargeRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTodayRechargeRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTodayRechargeRecordReq_descriptor_;
}

const DailyWelfareGetTodayRechargeRecordReq& DailyWelfareGetTodayRechargeRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTodayRechargeRecordReq* DailyWelfareGetTodayRechargeRecordReq::default_instance_ = NULL;

DailyWelfareGetTodayRechargeRecordReq* DailyWelfareGetTodayRechargeRecordReq::New() const {
  return new DailyWelfareGetTodayRechargeRecordReq;
}

void DailyWelfareGetTodayRechargeRecordReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTodayRechargeRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetTodayRechargeRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTodayRechargeRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTodayRechargeRecordReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTodayRechargeRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTodayRechargeRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTodayRechargeRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTodayRechargeRecordReq::MergeFrom(const DailyWelfareGetTodayRechargeRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTodayRechargeRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTodayRechargeRecordReq::CopyFrom(const DailyWelfareGetTodayRechargeRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTodayRechargeRecordReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetTodayRechargeRecordReq::Swap(DailyWelfareGetTodayRechargeRecordReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTodayRechargeRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTodayRechargeRecordReq_descriptor_;
  metadata.reflection = DailyWelfareGetTodayRechargeRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetTodayRechargeRecordRsp::kRecordFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetTodayRechargeRecordRsp::DailyWelfareGetTodayRechargeRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTodayRechargeRecordRsp::InitAsDefaultInstance() {
}

DailyWelfareGetTodayRechargeRecordRsp::DailyWelfareGetTodayRechargeRecordRsp(const DailyWelfareGetTodayRechargeRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTodayRechargeRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTodayRechargeRecordRsp::~DailyWelfareGetTodayRechargeRecordRsp() {
  SharedDtor();
}

void DailyWelfareGetTodayRechargeRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetTodayRechargeRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTodayRechargeRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTodayRechargeRecordRsp_descriptor_;
}

const DailyWelfareGetTodayRechargeRecordRsp& DailyWelfareGetTodayRechargeRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTodayRechargeRecordRsp* DailyWelfareGetTodayRechargeRecordRsp::default_instance_ = NULL;

DailyWelfareGetTodayRechargeRecordRsp* DailyWelfareGetTodayRechargeRecordRsp::New() const {
  return new DailyWelfareGetTodayRechargeRecordRsp;
}

void DailyWelfareGetTodayRechargeRecordRsp::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTodayRechargeRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.LianChongTodayPBDataRecord record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetTodayRechargeRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.LianChongTodayPBDataRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTodayRechargeRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.LianChongTodayPBDataRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTodayRechargeRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.LianChongTodayPBDataRecord record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTodayRechargeRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTodayRechargeRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTodayRechargeRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTodayRechargeRecordRsp::MergeFrom(const DailyWelfareGetTodayRechargeRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTodayRechargeRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTodayRechargeRecordRsp::CopyFrom(const DailyWelfareGetTodayRechargeRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTodayRechargeRecordRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetTodayRechargeRecordRsp::Swap(DailyWelfareGetTodayRechargeRecordRsp* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTodayRechargeRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTodayRechargeRecordRsp_descriptor_;
  metadata.reflection = DailyWelfareGetTodayRechargeRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetTodayRechargeNotify::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetTodayRechargeNotify::DailyWelfareGetTodayRechargeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTodayRechargeNotify::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::LianChongTodayPBData*>(&::proto_ff::LianChongTodayPBData::default_instance());
}

DailyWelfareGetTodayRechargeNotify::DailyWelfareGetTodayRechargeNotify(const DailyWelfareGetTodayRechargeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTodayRechargeNotify::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTodayRechargeNotify::~DailyWelfareGetTodayRechargeNotify() {
  SharedDtor();
}

void DailyWelfareGetTodayRechargeNotify::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareGetTodayRechargeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTodayRechargeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTodayRechargeNotify_descriptor_;
}

const DailyWelfareGetTodayRechargeNotify& DailyWelfareGetTodayRechargeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTodayRechargeNotify* DailyWelfareGetTodayRechargeNotify::default_instance_ = NULL;

DailyWelfareGetTodayRechargeNotify* DailyWelfareGetTodayRechargeNotify::New() const {
  return new DailyWelfareGetTodayRechargeNotify;
}

void DailyWelfareGetTodayRechargeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::LianChongTodayPBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTodayRechargeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.LianChongTodayPBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetTodayRechargeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.LianChongTodayPBData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTodayRechargeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.LianChongTodayPBData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTodayRechargeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.LianChongTodayPBData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTodayRechargeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTodayRechargeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTodayRechargeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTodayRechargeNotify::MergeFrom(const DailyWelfareGetTodayRechargeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto_ff::LianChongTodayPBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTodayRechargeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTodayRechargeNotify::CopyFrom(const DailyWelfareGetTodayRechargeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTodayRechargeNotify::IsInitialized() const {

  return true;
}

void DailyWelfareGetTodayRechargeNotify::Swap(DailyWelfareGetTodayRechargeNotify* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTodayRechargeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTodayRechargeNotify_descriptor_;
  metadata.reflection = DailyWelfareGetTodayRechargeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetAccRechargeDataReq::DailyWelfareGetAccRechargeDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetAccRechargeDataReq::InitAsDefaultInstance() {
}

DailyWelfareGetAccRechargeDataReq::DailyWelfareGetAccRechargeDataReq(const DailyWelfareGetAccRechargeDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetAccRechargeDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetAccRechargeDataReq::~DailyWelfareGetAccRechargeDataReq() {
  SharedDtor();
}

void DailyWelfareGetAccRechargeDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetAccRechargeDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetAccRechargeDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetAccRechargeDataReq_descriptor_;
}

const DailyWelfareGetAccRechargeDataReq& DailyWelfareGetAccRechargeDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetAccRechargeDataReq* DailyWelfareGetAccRechargeDataReq::default_instance_ = NULL;

DailyWelfareGetAccRechargeDataReq* DailyWelfareGetAccRechargeDataReq::New() const {
  return new DailyWelfareGetAccRechargeDataReq;
}

void DailyWelfareGetAccRechargeDataReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetAccRechargeDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetAccRechargeDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetAccRechargeDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetAccRechargeDataReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetAccRechargeDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetAccRechargeDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetAccRechargeDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetAccRechargeDataReq::MergeFrom(const DailyWelfareGetAccRechargeDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetAccRechargeDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetAccRechargeDataReq::CopyFrom(const DailyWelfareGetAccRechargeDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetAccRechargeDataReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetAccRechargeDataReq::Swap(DailyWelfareGetAccRechargeDataReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetAccRechargeDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetAccRechargeDataReq_descriptor_;
  metadata.reflection = DailyWelfareGetAccRechargeDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetAccRechargeDataRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetAccRechargeDataRsp::DailyWelfareGetAccRechargeDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetAccRechargeDataRsp::InitAsDefaultInstance() {
}

DailyWelfareGetAccRechargeDataRsp::DailyWelfareGetAccRechargeDataRsp(const DailyWelfareGetAccRechargeDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetAccRechargeDataRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetAccRechargeDataRsp::~DailyWelfareGetAccRechargeDataRsp() {
  SharedDtor();
}

void DailyWelfareGetAccRechargeDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetAccRechargeDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetAccRechargeDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetAccRechargeDataRsp_descriptor_;
}

const DailyWelfareGetAccRechargeDataRsp& DailyWelfareGetAccRechargeDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetAccRechargeDataRsp* DailyWelfareGetAccRechargeDataRsp::default_instance_ = NULL;

DailyWelfareGetAccRechargeDataRsp* DailyWelfareGetAccRechargeDataRsp::New() const {
  return new DailyWelfareGetAccRechargeDataRsp;
}

void DailyWelfareGetAccRechargeDataRsp::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetAccRechargeDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.LianChongAccPBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetAccRechargeDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.LianChongAccPBData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetAccRechargeDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.LianChongAccPBData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetAccRechargeDataRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.LianChongAccPBData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetAccRechargeDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetAccRechargeDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetAccRechargeDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetAccRechargeDataRsp::MergeFrom(const DailyWelfareGetAccRechargeDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetAccRechargeDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetAccRechargeDataRsp::CopyFrom(const DailyWelfareGetAccRechargeDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetAccRechargeDataRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetAccRechargeDataRsp::Swap(DailyWelfareGetAccRechargeDataRsp* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetAccRechargeDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetAccRechargeDataRsp_descriptor_;
  metadata.reflection = DailyWelfareGetAccRechargeDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetAccRechargeRecordReq::DailyWelfareGetAccRechargeRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetAccRechargeRecordReq::InitAsDefaultInstance() {
}

DailyWelfareGetAccRechargeRecordReq::DailyWelfareGetAccRechargeRecordReq(const DailyWelfareGetAccRechargeRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetAccRechargeRecordReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetAccRechargeRecordReq::~DailyWelfareGetAccRechargeRecordReq() {
  SharedDtor();
}

void DailyWelfareGetAccRechargeRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetAccRechargeRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetAccRechargeRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetAccRechargeRecordReq_descriptor_;
}

const DailyWelfareGetAccRechargeRecordReq& DailyWelfareGetAccRechargeRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetAccRechargeRecordReq* DailyWelfareGetAccRechargeRecordReq::default_instance_ = NULL;

DailyWelfareGetAccRechargeRecordReq* DailyWelfareGetAccRechargeRecordReq::New() const {
  return new DailyWelfareGetAccRechargeRecordReq;
}

void DailyWelfareGetAccRechargeRecordReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetAccRechargeRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetAccRechargeRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetAccRechargeRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetAccRechargeRecordReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetAccRechargeRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetAccRechargeRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetAccRechargeRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetAccRechargeRecordReq::MergeFrom(const DailyWelfareGetAccRechargeRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetAccRechargeRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetAccRechargeRecordReq::CopyFrom(const DailyWelfareGetAccRechargeRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetAccRechargeRecordReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetAccRechargeRecordReq::Swap(DailyWelfareGetAccRechargeRecordReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetAccRechargeRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetAccRechargeRecordReq_descriptor_;
  metadata.reflection = DailyWelfareGetAccRechargeRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetAccRechargeRecordRsp::kRecordFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetAccRechargeRecordRsp::DailyWelfareGetAccRechargeRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetAccRechargeRecordRsp::InitAsDefaultInstance() {
}

DailyWelfareGetAccRechargeRecordRsp::DailyWelfareGetAccRechargeRecordRsp(const DailyWelfareGetAccRechargeRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetAccRechargeRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetAccRechargeRecordRsp::~DailyWelfareGetAccRechargeRecordRsp() {
  SharedDtor();
}

void DailyWelfareGetAccRechargeRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetAccRechargeRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetAccRechargeRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetAccRechargeRecordRsp_descriptor_;
}

const DailyWelfareGetAccRechargeRecordRsp& DailyWelfareGetAccRechargeRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetAccRechargeRecordRsp* DailyWelfareGetAccRechargeRecordRsp::default_instance_ = NULL;

DailyWelfareGetAccRechargeRecordRsp* DailyWelfareGetAccRechargeRecordRsp::New() const {
  return new DailyWelfareGetAccRechargeRecordRsp;
}

void DailyWelfareGetAccRechargeRecordRsp::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetAccRechargeRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.LianChongAccPBDataRecord record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetAccRechargeRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.LianChongAccPBDataRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetAccRechargeRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.LianChongAccPBDataRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetAccRechargeRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.LianChongAccPBDataRecord record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetAccRechargeRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetAccRechargeRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetAccRechargeRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetAccRechargeRecordRsp::MergeFrom(const DailyWelfareGetAccRechargeRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetAccRechargeRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetAccRechargeRecordRsp::CopyFrom(const DailyWelfareGetAccRechargeRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetAccRechargeRecordRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetAccRechargeRecordRsp::Swap(DailyWelfareGetAccRechargeRecordRsp* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetAccRechargeRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetAccRechargeRecordRsp_descriptor_;
  metadata.reflection = DailyWelfareGetAccRechargeRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetAccRechargeNotify::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetAccRechargeNotify::DailyWelfareGetAccRechargeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetAccRechargeNotify::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::LianChongAccPBData*>(&::proto_ff::LianChongAccPBData::default_instance());
}

DailyWelfareGetAccRechargeNotify::DailyWelfareGetAccRechargeNotify(const DailyWelfareGetAccRechargeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetAccRechargeNotify::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetAccRechargeNotify::~DailyWelfareGetAccRechargeNotify() {
  SharedDtor();
}

void DailyWelfareGetAccRechargeNotify::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareGetAccRechargeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetAccRechargeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetAccRechargeNotify_descriptor_;
}

const DailyWelfareGetAccRechargeNotify& DailyWelfareGetAccRechargeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetAccRechargeNotify* DailyWelfareGetAccRechargeNotify::default_instance_ = NULL;

DailyWelfareGetAccRechargeNotify* DailyWelfareGetAccRechargeNotify::New() const {
  return new DailyWelfareGetAccRechargeNotify;
}

void DailyWelfareGetAccRechargeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::LianChongAccPBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetAccRechargeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.LianChongAccPBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetAccRechargeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.LianChongAccPBData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetAccRechargeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.LianChongAccPBData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetAccRechargeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.LianChongAccPBData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetAccRechargeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetAccRechargeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetAccRechargeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetAccRechargeNotify::MergeFrom(const DailyWelfareGetAccRechargeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto_ff::LianChongAccPBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetAccRechargeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetAccRechargeNotify::CopyFrom(const DailyWelfareGetAccRechargeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetAccRechargeNotify::IsInitialized() const {

  return true;
}

void DailyWelfareGetAccRechargeNotify::Swap(DailyWelfareGetAccRechargeNotify* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetAccRechargeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetAccRechargeNotify_descriptor_;
  metadata.reflection = DailyWelfareGetAccRechargeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetTodayRechargeRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetTodayRechargeRewardReq::DailyWelfareGetTodayRechargeRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTodayRechargeRewardReq::InitAsDefaultInstance() {
}

DailyWelfareGetTodayRechargeRewardReq::DailyWelfareGetTodayRechargeRewardReq(const DailyWelfareGetTodayRechargeRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTodayRechargeRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTodayRechargeRewardReq::~DailyWelfareGetTodayRechargeRewardReq() {
  SharedDtor();
}

void DailyWelfareGetTodayRechargeRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetTodayRechargeRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTodayRechargeRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTodayRechargeRewardReq_descriptor_;
}

const DailyWelfareGetTodayRechargeRewardReq& DailyWelfareGetTodayRechargeRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTodayRechargeRewardReq* DailyWelfareGetTodayRechargeRewardReq::default_instance_ = NULL;

DailyWelfareGetTodayRechargeRewardReq* DailyWelfareGetTodayRechargeRewardReq::New() const {
  return new DailyWelfareGetTodayRechargeRewardReq;
}

void DailyWelfareGetTodayRechargeRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTodayRechargeRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetTodayRechargeRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTodayRechargeRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTodayRechargeRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTodayRechargeRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTodayRechargeRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTodayRechargeRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTodayRechargeRewardReq::MergeFrom(const DailyWelfareGetTodayRechargeRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTodayRechargeRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTodayRechargeRewardReq::CopyFrom(const DailyWelfareGetTodayRechargeRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTodayRechargeRewardReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetTodayRechargeRewardReq::Swap(DailyWelfareGetTodayRechargeRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTodayRechargeRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTodayRechargeRewardReq_descriptor_;
  metadata.reflection = DailyWelfareGetTodayRechargeRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetTodayRechargeRewardRsp::kRetCodeFieldNumber;
const int DailyWelfareGetTodayRechargeRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetTodayRechargeRewardRsp::DailyWelfareGetTodayRechargeRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTodayRechargeRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::LianChongTodayPBData*>(&::proto_ff::LianChongTodayPBData::default_instance());
}

DailyWelfareGetTodayRechargeRewardRsp::DailyWelfareGetTodayRechargeRewardRsp(const DailyWelfareGetTodayRechargeRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTodayRechargeRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTodayRechargeRewardRsp::~DailyWelfareGetTodayRechargeRewardRsp() {
  SharedDtor();
}

void DailyWelfareGetTodayRechargeRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareGetTodayRechargeRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTodayRechargeRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTodayRechargeRewardRsp_descriptor_;
}

const DailyWelfareGetTodayRechargeRewardRsp& DailyWelfareGetTodayRechargeRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTodayRechargeRewardRsp* DailyWelfareGetTodayRechargeRewardRsp::default_instance_ = NULL;

DailyWelfareGetTodayRechargeRewardRsp* DailyWelfareGetTodayRechargeRewardRsp::New() const {
  return new DailyWelfareGetTodayRechargeRewardRsp;
}

void DailyWelfareGetTodayRechargeRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::LianChongTodayPBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTodayRechargeRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.LianChongTodayPBData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetTodayRechargeRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.LianChongTodayPBData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTodayRechargeRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.LianChongTodayPBData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTodayRechargeRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.LianChongTodayPBData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTodayRechargeRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTodayRechargeRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTodayRechargeRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTodayRechargeRewardRsp::MergeFrom(const DailyWelfareGetTodayRechargeRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::LianChongTodayPBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTodayRechargeRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTodayRechargeRewardRsp::CopyFrom(const DailyWelfareGetTodayRechargeRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTodayRechargeRewardRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetTodayRechargeRewardRsp::Swap(DailyWelfareGetTodayRechargeRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTodayRechargeRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTodayRechargeRewardRsp_descriptor_;
  metadata.reflection = DailyWelfareGetTodayRechargeRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetAccRechargeRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetAccRechargeRewardReq::DailyWelfareGetAccRechargeRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetAccRechargeRewardReq::InitAsDefaultInstance() {
}

DailyWelfareGetAccRechargeRewardReq::DailyWelfareGetAccRechargeRewardReq(const DailyWelfareGetAccRechargeRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetAccRechargeRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetAccRechargeRewardReq::~DailyWelfareGetAccRechargeRewardReq() {
  SharedDtor();
}

void DailyWelfareGetAccRechargeRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetAccRechargeRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetAccRechargeRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetAccRechargeRewardReq_descriptor_;
}

const DailyWelfareGetAccRechargeRewardReq& DailyWelfareGetAccRechargeRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetAccRechargeRewardReq* DailyWelfareGetAccRechargeRewardReq::default_instance_ = NULL;

DailyWelfareGetAccRechargeRewardReq* DailyWelfareGetAccRechargeRewardReq::New() const {
  return new DailyWelfareGetAccRechargeRewardReq;
}

void DailyWelfareGetAccRechargeRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetAccRechargeRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetAccRechargeRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetAccRechargeRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetAccRechargeRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetAccRechargeRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetAccRechargeRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetAccRechargeRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetAccRechargeRewardReq::MergeFrom(const DailyWelfareGetAccRechargeRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetAccRechargeRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetAccRechargeRewardReq::CopyFrom(const DailyWelfareGetAccRechargeRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetAccRechargeRewardReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetAccRechargeRewardReq::Swap(DailyWelfareGetAccRechargeRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetAccRechargeRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetAccRechargeRewardReq_descriptor_;
  metadata.reflection = DailyWelfareGetAccRechargeRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetAccRechargeRewardRsp::kRetCodeFieldNumber;
const int DailyWelfareGetAccRechargeRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetAccRechargeRewardRsp::DailyWelfareGetAccRechargeRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetAccRechargeRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::LianChongAccPBData*>(&::proto_ff::LianChongAccPBData::default_instance());
}

DailyWelfareGetAccRechargeRewardRsp::DailyWelfareGetAccRechargeRewardRsp(const DailyWelfareGetAccRechargeRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetAccRechargeRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetAccRechargeRewardRsp::~DailyWelfareGetAccRechargeRewardRsp() {
  SharedDtor();
}

void DailyWelfareGetAccRechargeRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareGetAccRechargeRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetAccRechargeRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetAccRechargeRewardRsp_descriptor_;
}

const DailyWelfareGetAccRechargeRewardRsp& DailyWelfareGetAccRechargeRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetAccRechargeRewardRsp* DailyWelfareGetAccRechargeRewardRsp::default_instance_ = NULL;

DailyWelfareGetAccRechargeRewardRsp* DailyWelfareGetAccRechargeRewardRsp::New() const {
  return new DailyWelfareGetAccRechargeRewardRsp;
}

void DailyWelfareGetAccRechargeRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::LianChongAccPBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetAccRechargeRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.LianChongAccPBData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetAccRechargeRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.LianChongAccPBData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetAccRechargeRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.LianChongAccPBData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetAccRechargeRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.LianChongAccPBData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetAccRechargeRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetAccRechargeRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetAccRechargeRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetAccRechargeRewardRsp::MergeFrom(const DailyWelfareGetAccRechargeRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::LianChongAccPBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetAccRechargeRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetAccRechargeRewardRsp::CopyFrom(const DailyWelfareGetAccRechargeRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetAccRechargeRewardRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetAccRechargeRewardRsp::Swap(DailyWelfareGetAccRechargeRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetAccRechargeRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetAccRechargeRewardRsp_descriptor_;
  metadata.reflection = DailyWelfareGetAccRechargeRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetMonthCardDataReq::DailyWelfareGetMonthCardDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetMonthCardDataReq::InitAsDefaultInstance() {
}

DailyWelfareGetMonthCardDataReq::DailyWelfareGetMonthCardDataReq(const DailyWelfareGetMonthCardDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetMonthCardDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetMonthCardDataReq::~DailyWelfareGetMonthCardDataReq() {
  SharedDtor();
}

void DailyWelfareGetMonthCardDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetMonthCardDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetMonthCardDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetMonthCardDataReq_descriptor_;
}

const DailyWelfareGetMonthCardDataReq& DailyWelfareGetMonthCardDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetMonthCardDataReq* DailyWelfareGetMonthCardDataReq::default_instance_ = NULL;

DailyWelfareGetMonthCardDataReq* DailyWelfareGetMonthCardDataReq::New() const {
  return new DailyWelfareGetMonthCardDataReq;
}

void DailyWelfareGetMonthCardDataReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetMonthCardDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetMonthCardDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetMonthCardDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetMonthCardDataReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetMonthCardDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetMonthCardDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetMonthCardDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetMonthCardDataReq::MergeFrom(const DailyWelfareGetMonthCardDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetMonthCardDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetMonthCardDataReq::CopyFrom(const DailyWelfareGetMonthCardDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetMonthCardDataReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetMonthCardDataReq::Swap(DailyWelfareGetMonthCardDataReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetMonthCardDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetMonthCardDataReq_descriptor_;
  metadata.reflection = DailyWelfareGetMonthCardDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareMonthCardData::kDataFieldNumber;
const int DailyWelfareMonthCardData::kLeftDayFieldNumber;
const int DailyWelfareMonthCardData::kCanGetDayFieldNumber;
#endif  // !_MSC_VER

DailyWelfareMonthCardData::DailyWelfareMonthCardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareMonthCardData::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::MonthCardPBData*>(&::proto_ff::MonthCardPBData::default_instance());
}

DailyWelfareMonthCardData::DailyWelfareMonthCardData(const DailyWelfareMonthCardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareMonthCardData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  left_day_ = 0;
  can_get_day_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareMonthCardData::~DailyWelfareMonthCardData() {
  SharedDtor();
}

void DailyWelfareMonthCardData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareMonthCardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareMonthCardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareMonthCardData_descriptor_;
}

const DailyWelfareMonthCardData& DailyWelfareMonthCardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareMonthCardData* DailyWelfareMonthCardData::default_instance_ = NULL;

DailyWelfareMonthCardData* DailyWelfareMonthCardData::New() const {
  return new DailyWelfareMonthCardData;
}

void DailyWelfareMonthCardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::MonthCardPBData::Clear();
    }
    left_day_ = 0;
    can_get_day_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareMonthCardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.MonthCardPBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_day;
        break;
      }

      // optional int32 left_day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_day_)));
          set_has_left_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_can_get_day;
        break;
      }

      // optional int32 can_get_day = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_get_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_get_day_)));
          set_has_can_get_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareMonthCardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.MonthCardPBData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional int32 left_day = 3;
  if (has_left_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_day(), output);
  }

  // optional int32 can_get_day = 4;
  if (has_can_get_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->can_get_day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareMonthCardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.MonthCardPBData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional int32 left_day = 3;
  if (has_left_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_day(), target);
  }

  // optional int32 can_get_day = 4;
  if (has_can_get_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->can_get_day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareMonthCardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.MonthCardPBData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional int32 left_day = 3;
    if (has_left_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_day());
    }

    // optional int32 can_get_day = 4;
    if (has_can_get_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_get_day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareMonthCardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareMonthCardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareMonthCardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareMonthCardData::MergeFrom(const DailyWelfareMonthCardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto_ff::MonthCardPBData::MergeFrom(from.data());
    }
    if (from.has_left_day()) {
      set_left_day(from.left_day());
    }
    if (from.has_can_get_day()) {
      set_can_get_day(from.can_get_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareMonthCardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareMonthCardData::CopyFrom(const DailyWelfareMonthCardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareMonthCardData::IsInitialized() const {

  return true;
}

void DailyWelfareMonthCardData::Swap(DailyWelfareMonthCardData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(left_day_, other->left_day_);
    std::swap(can_get_day_, other->can_get_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareMonthCardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareMonthCardData_descriptor_;
  metadata.reflection = DailyWelfareMonthCardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetMonthCardDataRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetMonthCardDataRsp::DailyWelfareGetMonthCardDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetMonthCardDataRsp::InitAsDefaultInstance() {
}

DailyWelfareGetMonthCardDataRsp::DailyWelfareGetMonthCardDataRsp(const DailyWelfareGetMonthCardDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetMonthCardDataRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetMonthCardDataRsp::~DailyWelfareGetMonthCardDataRsp() {
  SharedDtor();
}

void DailyWelfareGetMonthCardDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetMonthCardDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetMonthCardDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetMonthCardDataRsp_descriptor_;
}

const DailyWelfareGetMonthCardDataRsp& DailyWelfareGetMonthCardDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetMonthCardDataRsp* DailyWelfareGetMonthCardDataRsp::default_instance_ = NULL;

DailyWelfareGetMonthCardDataRsp* DailyWelfareGetMonthCardDataRsp::New() const {
  return new DailyWelfareGetMonthCardDataRsp;
}

void DailyWelfareGetMonthCardDataRsp::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetMonthCardDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DailyWelfareMonthCardData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetMonthCardDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DailyWelfareMonthCardData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetMonthCardDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DailyWelfareMonthCardData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetMonthCardDataRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.DailyWelfareMonthCardData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetMonthCardDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetMonthCardDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetMonthCardDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetMonthCardDataRsp::MergeFrom(const DailyWelfareGetMonthCardDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetMonthCardDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetMonthCardDataRsp::CopyFrom(const DailyWelfareGetMonthCardDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetMonthCardDataRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetMonthCardDataRsp::Swap(DailyWelfareGetMonthCardDataRsp* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetMonthCardDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetMonthCardDataRsp_descriptor_;
  metadata.reflection = DailyWelfareGetMonthCardDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetMonthCardRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetMonthCardRewardReq::DailyWelfareGetMonthCardRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetMonthCardRewardReq::InitAsDefaultInstance() {
}

DailyWelfareGetMonthCardRewardReq::DailyWelfareGetMonthCardRewardReq(const DailyWelfareGetMonthCardRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetMonthCardRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetMonthCardRewardReq::~DailyWelfareGetMonthCardRewardReq() {
  SharedDtor();
}

void DailyWelfareGetMonthCardRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetMonthCardRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetMonthCardRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetMonthCardRewardReq_descriptor_;
}

const DailyWelfareGetMonthCardRewardReq& DailyWelfareGetMonthCardRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetMonthCardRewardReq* DailyWelfareGetMonthCardRewardReq::default_instance_ = NULL;

DailyWelfareGetMonthCardRewardReq* DailyWelfareGetMonthCardRewardReq::New() const {
  return new DailyWelfareGetMonthCardRewardReq;
}

void DailyWelfareGetMonthCardRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetMonthCardRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetMonthCardRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetMonthCardRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetMonthCardRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetMonthCardRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetMonthCardRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetMonthCardRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetMonthCardRewardReq::MergeFrom(const DailyWelfareGetMonthCardRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetMonthCardRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetMonthCardRewardReq::CopyFrom(const DailyWelfareGetMonthCardRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetMonthCardRewardReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetMonthCardRewardReq::Swap(DailyWelfareGetMonthCardRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetMonthCardRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetMonthCardRewardReq_descriptor_;
  metadata.reflection = DailyWelfareGetMonthCardRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetMonthCardRewardRsp::kRetCodeFieldNumber;
const int DailyWelfareGetMonthCardRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetMonthCardRewardRsp::DailyWelfareGetMonthCardRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetMonthCardRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::DailyWelfareMonthCardData*>(&::proto_ff::DailyWelfareMonthCardData::default_instance());
}

DailyWelfareGetMonthCardRewardRsp::DailyWelfareGetMonthCardRewardRsp(const DailyWelfareGetMonthCardRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetMonthCardRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetMonthCardRewardRsp::~DailyWelfareGetMonthCardRewardRsp() {
  SharedDtor();
}

void DailyWelfareGetMonthCardRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareGetMonthCardRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetMonthCardRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetMonthCardRewardRsp_descriptor_;
}

const DailyWelfareGetMonthCardRewardRsp& DailyWelfareGetMonthCardRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetMonthCardRewardRsp* DailyWelfareGetMonthCardRewardRsp::default_instance_ = NULL;

DailyWelfareGetMonthCardRewardRsp* DailyWelfareGetMonthCardRewardRsp::New() const {
  return new DailyWelfareGetMonthCardRewardRsp;
}

void DailyWelfareGetMonthCardRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::DailyWelfareMonthCardData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetMonthCardRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.DailyWelfareMonthCardData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetMonthCardRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.DailyWelfareMonthCardData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetMonthCardRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.DailyWelfareMonthCardData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetMonthCardRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.DailyWelfareMonthCardData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetMonthCardRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetMonthCardRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetMonthCardRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetMonthCardRewardRsp::MergeFrom(const DailyWelfareGetMonthCardRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::DailyWelfareMonthCardData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetMonthCardRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetMonthCardRewardRsp::CopyFrom(const DailyWelfareGetMonthCardRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetMonthCardRewardRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetMonthCardRewardRsp::Swap(DailyWelfareGetMonthCardRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetMonthCardRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetMonthCardRewardRsp_descriptor_;
  metadata.reflection = DailyWelfareGetMonthCardRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetMonthCardRecordReq::DailyWelfareGetMonthCardRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetMonthCardRecordReq::InitAsDefaultInstance() {
}

DailyWelfareGetMonthCardRecordReq::DailyWelfareGetMonthCardRecordReq(const DailyWelfareGetMonthCardRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetMonthCardRecordReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetMonthCardRecordReq::~DailyWelfareGetMonthCardRecordReq() {
  SharedDtor();
}

void DailyWelfareGetMonthCardRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetMonthCardRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetMonthCardRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetMonthCardRecordReq_descriptor_;
}

const DailyWelfareGetMonthCardRecordReq& DailyWelfareGetMonthCardRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetMonthCardRecordReq* DailyWelfareGetMonthCardRecordReq::default_instance_ = NULL;

DailyWelfareGetMonthCardRecordReq* DailyWelfareGetMonthCardRecordReq::New() const {
  return new DailyWelfareGetMonthCardRecordReq;
}

void DailyWelfareGetMonthCardRecordReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetMonthCardRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetMonthCardRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetMonthCardRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetMonthCardRecordReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetMonthCardRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetMonthCardRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetMonthCardRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetMonthCardRecordReq::MergeFrom(const DailyWelfareGetMonthCardRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetMonthCardRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetMonthCardRecordReq::CopyFrom(const DailyWelfareGetMonthCardRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetMonthCardRecordReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetMonthCardRecordReq::Swap(DailyWelfareGetMonthCardRecordReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetMonthCardRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetMonthCardRecordReq_descriptor_;
  metadata.reflection = DailyWelfareGetMonthCardRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetMonthCardRecordRsp::kRecordFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetMonthCardRecordRsp::DailyWelfareGetMonthCardRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetMonthCardRecordRsp::InitAsDefaultInstance() {
}

DailyWelfareGetMonthCardRecordRsp::DailyWelfareGetMonthCardRecordRsp(const DailyWelfareGetMonthCardRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetMonthCardRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetMonthCardRecordRsp::~DailyWelfareGetMonthCardRecordRsp() {
  SharedDtor();
}

void DailyWelfareGetMonthCardRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetMonthCardRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetMonthCardRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetMonthCardRecordRsp_descriptor_;
}

const DailyWelfareGetMonthCardRecordRsp& DailyWelfareGetMonthCardRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetMonthCardRecordRsp* DailyWelfareGetMonthCardRecordRsp::default_instance_ = NULL;

DailyWelfareGetMonthCardRecordRsp* DailyWelfareGetMonthCardRecordRsp::New() const {
  return new DailyWelfareGetMonthCardRecordRsp;
}

void DailyWelfareGetMonthCardRecordRsp::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetMonthCardRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.MonthCardPBDataRecord record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetMonthCardRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.MonthCardPBDataRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetMonthCardRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.MonthCardPBDataRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetMonthCardRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.MonthCardPBDataRecord record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetMonthCardRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetMonthCardRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetMonthCardRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetMonthCardRecordRsp::MergeFrom(const DailyWelfareGetMonthCardRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetMonthCardRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetMonthCardRecordRsp::CopyFrom(const DailyWelfareGetMonthCardRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetMonthCardRecordRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetMonthCardRecordRsp::Swap(DailyWelfareGetMonthCardRecordRsp* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetMonthCardRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetMonthCardRecordRsp_descriptor_;
  metadata.reflection = DailyWelfareGetMonthCardRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareMonthCardNotify::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareMonthCardNotify::DailyWelfareMonthCardNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareMonthCardNotify::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::DailyWelfareMonthCardData*>(&::proto_ff::DailyWelfareMonthCardData::default_instance());
}

DailyWelfareMonthCardNotify::DailyWelfareMonthCardNotify(const DailyWelfareMonthCardNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareMonthCardNotify::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareMonthCardNotify::~DailyWelfareMonthCardNotify() {
  SharedDtor();
}

void DailyWelfareMonthCardNotify::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareMonthCardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareMonthCardNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareMonthCardNotify_descriptor_;
}

const DailyWelfareMonthCardNotify& DailyWelfareMonthCardNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareMonthCardNotify* DailyWelfareMonthCardNotify::default_instance_ = NULL;

DailyWelfareMonthCardNotify* DailyWelfareMonthCardNotify::New() const {
  return new DailyWelfareMonthCardNotify;
}

void DailyWelfareMonthCardNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::DailyWelfareMonthCardData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareMonthCardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.DailyWelfareMonthCardData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareMonthCardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.DailyWelfareMonthCardData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareMonthCardNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.DailyWelfareMonthCardData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareMonthCardNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.DailyWelfareMonthCardData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareMonthCardNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareMonthCardNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareMonthCardNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareMonthCardNotify::MergeFrom(const DailyWelfareMonthCardNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto_ff::DailyWelfareMonthCardData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareMonthCardNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareMonthCardNotify::CopyFrom(const DailyWelfareMonthCardNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareMonthCardNotify::IsInitialized() const {

  return true;
}

void DailyWelfareMonthCardNotify::Swap(DailyWelfareMonthCardNotify* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareMonthCardNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareMonthCardNotify_descriptor_;
  metadata.reflection = DailyWelfareMonthCardNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareTurnableAccNotify::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareTurnableAccNotify::DailyWelfareTurnableAccNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareTurnableAccNotify::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::TurntableAccPBData*>(&::proto_ff::TurntableAccPBData::default_instance());
}

DailyWelfareTurnableAccNotify::DailyWelfareTurnableAccNotify(const DailyWelfareTurnableAccNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareTurnableAccNotify::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareTurnableAccNotify::~DailyWelfareTurnableAccNotify() {
  SharedDtor();
}

void DailyWelfareTurnableAccNotify::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareTurnableAccNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareTurnableAccNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareTurnableAccNotify_descriptor_;
}

const DailyWelfareTurnableAccNotify& DailyWelfareTurnableAccNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareTurnableAccNotify* DailyWelfareTurnableAccNotify::default_instance_ = NULL;

DailyWelfareTurnableAccNotify* DailyWelfareTurnableAccNotify::New() const {
  return new DailyWelfareTurnableAccNotify;
}

void DailyWelfareTurnableAccNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::TurntableAccPBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareTurnableAccNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.TurntableAccPBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareTurnableAccNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.TurntableAccPBData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareTurnableAccNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.TurntableAccPBData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareTurnableAccNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.TurntableAccPBData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareTurnableAccNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareTurnableAccNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareTurnableAccNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareTurnableAccNotify::MergeFrom(const DailyWelfareTurnableAccNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto_ff::TurntableAccPBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareTurnableAccNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareTurnableAccNotify::CopyFrom(const DailyWelfareTurnableAccNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareTurnableAccNotify::IsInitialized() const {

  return true;
}

void DailyWelfareTurnableAccNotify::Swap(DailyWelfareTurnableAccNotify* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareTurnableAccNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareTurnableAccNotify_descriptor_;
  metadata.reflection = DailyWelfareTurnableAccNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetTurnableDataReq::DailyWelfareGetTurnableDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTurnableDataReq::InitAsDefaultInstance() {
}

DailyWelfareGetTurnableDataReq::DailyWelfareGetTurnableDataReq(const DailyWelfareGetTurnableDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTurnableDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTurnableDataReq::~DailyWelfareGetTurnableDataReq() {
  SharedDtor();
}

void DailyWelfareGetTurnableDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetTurnableDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTurnableDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTurnableDataReq_descriptor_;
}

const DailyWelfareGetTurnableDataReq& DailyWelfareGetTurnableDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTurnableDataReq* DailyWelfareGetTurnableDataReq::default_instance_ = NULL;

DailyWelfareGetTurnableDataReq* DailyWelfareGetTurnableDataReq::New() const {
  return new DailyWelfareGetTurnableDataReq;
}

void DailyWelfareGetTurnableDataReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTurnableDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetTurnableDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTurnableDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTurnableDataReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTurnableDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTurnableDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTurnableDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTurnableDataReq::MergeFrom(const DailyWelfareGetTurnableDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTurnableDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTurnableDataReq::CopyFrom(const DailyWelfareGetTurnableDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTurnableDataReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetTurnableDataReq::Swap(DailyWelfareGetTurnableDataReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTurnableDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTurnableDataReq_descriptor_;
  metadata.reflection = DailyWelfareGetTurnableDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetTurnableDataRsp::kTurntableAccFieldNumber;
const int DailyWelfareGetTurnableDataRsp::kTurntableFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetTurnableDataRsp::DailyWelfareGetTurnableDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTurnableDataRsp::InitAsDefaultInstance() {
}

DailyWelfareGetTurnableDataRsp::DailyWelfareGetTurnableDataRsp(const DailyWelfareGetTurnableDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTurnableDataRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTurnableDataRsp::~DailyWelfareGetTurnableDataRsp() {
  SharedDtor();
}

void DailyWelfareGetTurnableDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetTurnableDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTurnableDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTurnableDataRsp_descriptor_;
}

const DailyWelfareGetTurnableDataRsp& DailyWelfareGetTurnableDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTurnableDataRsp* DailyWelfareGetTurnableDataRsp::default_instance_ = NULL;

DailyWelfareGetTurnableDataRsp* DailyWelfareGetTurnableDataRsp::New() const {
  return new DailyWelfareGetTurnableDataRsp;
}

void DailyWelfareGetTurnableDataRsp::Clear() {
  turntable_acc_.Clear();
  turntable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTurnableDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.TurntableAccPBData turntable_acc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_turntable_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_turntable_acc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_turntable_acc;
        if (input->ExpectTag(18)) goto parse_turntable;
        break;
      }

      // repeated .proto_ff.TurntablePBData turntable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_turntable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_turntable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_turntable;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetTurnableDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.TurntableAccPBData turntable_acc = 1;
  for (int i = 0; i < this->turntable_acc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->turntable_acc(i), output);
  }

  // repeated .proto_ff.TurntablePBData turntable = 2;
  for (int i = 0; i < this->turntable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->turntable(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTurnableDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.TurntableAccPBData turntable_acc = 1;
  for (int i = 0; i < this->turntable_acc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->turntable_acc(i), target);
  }

  // repeated .proto_ff.TurntablePBData turntable = 2;
  for (int i = 0; i < this->turntable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->turntable(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTurnableDataRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.TurntableAccPBData turntable_acc = 1;
  total_size += 1 * this->turntable_acc_size();
  for (int i = 0; i < this->turntable_acc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->turntable_acc(i));
  }

  // repeated .proto_ff.TurntablePBData turntable = 2;
  total_size += 1 * this->turntable_size();
  for (int i = 0; i < this->turntable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->turntable(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTurnableDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTurnableDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTurnableDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTurnableDataRsp::MergeFrom(const DailyWelfareGetTurnableDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  turntable_acc_.MergeFrom(from.turntable_acc_);
  turntable_.MergeFrom(from.turntable_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTurnableDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTurnableDataRsp::CopyFrom(const DailyWelfareGetTurnableDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTurnableDataRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetTurnableDataRsp::Swap(DailyWelfareGetTurnableDataRsp* other) {
  if (other != this) {
    turntable_acc_.Swap(&other->turntable_acc_);
    turntable_.Swap(&other->turntable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTurnableDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTurnableDataRsp_descriptor_;
  metadata.reflection = DailyWelfareGetTurnableDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetTurnableAccRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetTurnableAccRewardReq::DailyWelfareGetTurnableAccRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTurnableAccRewardReq::InitAsDefaultInstance() {
}

DailyWelfareGetTurnableAccRewardReq::DailyWelfareGetTurnableAccRewardReq(const DailyWelfareGetTurnableAccRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTurnableAccRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTurnableAccRewardReq::~DailyWelfareGetTurnableAccRewardReq() {
  SharedDtor();
}

void DailyWelfareGetTurnableAccRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetTurnableAccRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTurnableAccRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTurnableAccRewardReq_descriptor_;
}

const DailyWelfareGetTurnableAccRewardReq& DailyWelfareGetTurnableAccRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTurnableAccRewardReq* DailyWelfareGetTurnableAccRewardReq::default_instance_ = NULL;

DailyWelfareGetTurnableAccRewardReq* DailyWelfareGetTurnableAccRewardReq::New() const {
  return new DailyWelfareGetTurnableAccRewardReq;
}

void DailyWelfareGetTurnableAccRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTurnableAccRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetTurnableAccRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTurnableAccRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTurnableAccRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTurnableAccRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTurnableAccRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTurnableAccRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTurnableAccRewardReq::MergeFrom(const DailyWelfareGetTurnableAccRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTurnableAccRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTurnableAccRewardReq::CopyFrom(const DailyWelfareGetTurnableAccRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTurnableAccRewardReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetTurnableAccRewardReq::Swap(DailyWelfareGetTurnableAccRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTurnableAccRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTurnableAccRewardReq_descriptor_;
  metadata.reflection = DailyWelfareGetTurnableAccRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetTTurnableAccRewardRsp::kRetCodeFieldNumber;
const int DailyWelfareGetTTurnableAccRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetTTurnableAccRewardRsp::DailyWelfareGetTTurnableAccRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTTurnableAccRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::TurntableAccPBData*>(&::proto_ff::TurntableAccPBData::default_instance());
}

DailyWelfareGetTTurnableAccRewardRsp::DailyWelfareGetTTurnableAccRewardRsp(const DailyWelfareGetTTurnableAccRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTTurnableAccRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTTurnableAccRewardRsp::~DailyWelfareGetTTurnableAccRewardRsp() {
  SharedDtor();
}

void DailyWelfareGetTTurnableAccRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareGetTTurnableAccRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTTurnableAccRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTTurnableAccRewardRsp_descriptor_;
}

const DailyWelfareGetTTurnableAccRewardRsp& DailyWelfareGetTTurnableAccRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTTurnableAccRewardRsp* DailyWelfareGetTTurnableAccRewardRsp::default_instance_ = NULL;

DailyWelfareGetTTurnableAccRewardRsp* DailyWelfareGetTTurnableAccRewardRsp::New() const {
  return new DailyWelfareGetTTurnableAccRewardRsp;
}

void DailyWelfareGetTTurnableAccRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::TurntableAccPBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTTurnableAccRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.TurntableAccPBData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetTTurnableAccRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.TurntableAccPBData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTTurnableAccRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.TurntableAccPBData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTTurnableAccRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.TurntableAccPBData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTTurnableAccRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTTurnableAccRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTTurnableAccRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTTurnableAccRewardRsp::MergeFrom(const DailyWelfareGetTTurnableAccRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::TurntableAccPBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTTurnableAccRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTTurnableAccRewardRsp::CopyFrom(const DailyWelfareGetTTurnableAccRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTTurnableAccRewardRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetTTurnableAccRewardRsp::Swap(DailyWelfareGetTTurnableAccRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTTurnableAccRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTTurnableAccRewardRsp_descriptor_;
  metadata.reflection = DailyWelfareGetTTurnableAccRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareTurnableReq::kIdFieldNumber;
const int DailyWelfareTurnableReq::kNumFieldNumber;
#endif  // !_MSC_VER

DailyWelfareTurnableReq::DailyWelfareTurnableReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareTurnableReq::InitAsDefaultInstance() {
}

DailyWelfareTurnableReq::DailyWelfareTurnableReq(const DailyWelfareTurnableReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareTurnableReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareTurnableReq::~DailyWelfareTurnableReq() {
  SharedDtor();
}

void DailyWelfareTurnableReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareTurnableReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareTurnableReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareTurnableReq_descriptor_;
}

const DailyWelfareTurnableReq& DailyWelfareTurnableReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareTurnableReq* DailyWelfareTurnableReq::default_instance_ = NULL;

DailyWelfareTurnableReq* DailyWelfareTurnableReq::New() const {
  return new DailyWelfareTurnableReq;
}

void DailyWelfareTurnableReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareTurnableReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareTurnableReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareTurnableReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareTurnableReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareTurnableReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareTurnableReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareTurnableReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareTurnableReq::MergeFrom(const DailyWelfareTurnableReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareTurnableReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareTurnableReq::CopyFrom(const DailyWelfareTurnableReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareTurnableReq::IsInitialized() const {

  return true;
}

void DailyWelfareTurnableReq::Swap(DailyWelfareTurnableReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareTurnableReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareTurnableReq_descriptor_;
  metadata.reflection = DailyWelfareTurnableReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareTurnableRsp::kRetCodeFieldNumber;
const int DailyWelfareTurnableRsp::kDataFieldNumber;
const int DailyWelfareTurnableRsp::kJackpotIdFieldNumber;
#endif  // !_MSC_VER

DailyWelfareTurnableRsp::DailyWelfareTurnableRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareTurnableRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::TurntablePBData*>(&::proto_ff::TurntablePBData::default_instance());
}

DailyWelfareTurnableRsp::DailyWelfareTurnableRsp(const DailyWelfareTurnableRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareTurnableRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareTurnableRsp::~DailyWelfareTurnableRsp() {
  SharedDtor();
}

void DailyWelfareTurnableRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareTurnableRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareTurnableRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareTurnableRsp_descriptor_;
}

const DailyWelfareTurnableRsp& DailyWelfareTurnableRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareTurnableRsp* DailyWelfareTurnableRsp::default_instance_ = NULL;

DailyWelfareTurnableRsp* DailyWelfareTurnableRsp::New() const {
  return new DailyWelfareTurnableRsp;
}

void DailyWelfareTurnableRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::TurntablePBData::Clear();
    }
  }
  jackpot_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareTurnableRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.TurntablePBData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jackpot_id;
        break;
      }

      // repeated int32 jackpot_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jackpot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_jackpot_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jackpot_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jackpot_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareTurnableRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.TurntablePBData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // repeated int32 jackpot_id = 3;
  for (int i = 0; i < this->jackpot_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->jackpot_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareTurnableRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.TurntablePBData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // repeated int32 jackpot_id = 3;
  for (int i = 0; i < this->jackpot_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->jackpot_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareTurnableRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.TurntablePBData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  // repeated int32 jackpot_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->jackpot_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jackpot_id(i));
    }
    total_size += 1 * this->jackpot_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareTurnableRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareTurnableRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareTurnableRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareTurnableRsp::MergeFrom(const DailyWelfareTurnableRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  jackpot_id_.MergeFrom(from.jackpot_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::TurntablePBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareTurnableRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareTurnableRsp::CopyFrom(const DailyWelfareTurnableRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareTurnableRsp::IsInitialized() const {

  return true;
}

void DailyWelfareTurnableRsp::Swap(DailyWelfareTurnableRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    jackpot_id_.Swap(&other->jackpot_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareTurnableRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareTurnableRsp_descriptor_;
  metadata.reflection = DailyWelfareTurnableRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetTurnableRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetTurnableRewardReq::DailyWelfareGetTurnableRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTurnableRewardReq::InitAsDefaultInstance() {
}

DailyWelfareGetTurnableRewardReq::DailyWelfareGetTurnableRewardReq(const DailyWelfareGetTurnableRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTurnableRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTurnableRewardReq::~DailyWelfareGetTurnableRewardReq() {
  SharedDtor();
}

void DailyWelfareGetTurnableRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetTurnableRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTurnableRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTurnableRewardReq_descriptor_;
}

const DailyWelfareGetTurnableRewardReq& DailyWelfareGetTurnableRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTurnableRewardReq* DailyWelfareGetTurnableRewardReq::default_instance_ = NULL;

DailyWelfareGetTurnableRewardReq* DailyWelfareGetTurnableRewardReq::New() const {
  return new DailyWelfareGetTurnableRewardReq;
}

void DailyWelfareGetTurnableRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTurnableRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetTurnableRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTurnableRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTurnableRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTurnableRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTurnableRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTurnableRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTurnableRewardReq::MergeFrom(const DailyWelfareGetTurnableRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTurnableRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTurnableRewardReq::CopyFrom(const DailyWelfareGetTurnableRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTurnableRewardReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetTurnableRewardReq::Swap(DailyWelfareGetTurnableRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTurnableRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTurnableRewardReq_descriptor_;
  metadata.reflection = DailyWelfareGetTurnableRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetTurnableRewardRsp::kRetCodeFieldNumber;
const int DailyWelfareGetTurnableRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetTurnableRewardRsp::DailyWelfareGetTurnableRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTurnableRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::TurntablePBData*>(&::proto_ff::TurntablePBData::default_instance());
}

DailyWelfareGetTurnableRewardRsp::DailyWelfareGetTurnableRewardRsp(const DailyWelfareGetTurnableRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTurnableRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTurnableRewardRsp::~DailyWelfareGetTurnableRewardRsp() {
  SharedDtor();
}

void DailyWelfareGetTurnableRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyWelfareGetTurnableRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTurnableRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTurnableRewardRsp_descriptor_;
}

const DailyWelfareGetTurnableRewardRsp& DailyWelfareGetTurnableRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTurnableRewardRsp* DailyWelfareGetTurnableRewardRsp::default_instance_ = NULL;

DailyWelfareGetTurnableRewardRsp* DailyWelfareGetTurnableRewardRsp::New() const {
  return new DailyWelfareGetTurnableRewardRsp;
}

void DailyWelfareGetTurnableRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::TurntablePBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTurnableRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.TurntablePBData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetTurnableRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.TurntablePBData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTurnableRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.TurntablePBData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTurnableRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.TurntablePBData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTurnableRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTurnableRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTurnableRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTurnableRewardRsp::MergeFrom(const DailyWelfareGetTurnableRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::TurntablePBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTurnableRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTurnableRewardRsp::CopyFrom(const DailyWelfareGetTurnableRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTurnableRewardRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetTurnableRewardRsp::Swap(DailyWelfareGetTurnableRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTurnableRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTurnableRewardRsp_descriptor_;
  metadata.reflection = DailyWelfareGetTurnableRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetTurnableRecordReq::DailyWelfareGetTurnableRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTurnableRecordReq::InitAsDefaultInstance() {
}

DailyWelfareGetTurnableRecordReq::DailyWelfareGetTurnableRecordReq(const DailyWelfareGetTurnableRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTurnableRecordReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTurnableRecordReq::~DailyWelfareGetTurnableRecordReq() {
  SharedDtor();
}

void DailyWelfareGetTurnableRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetTurnableRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTurnableRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTurnableRecordReq_descriptor_;
}

const DailyWelfareGetTurnableRecordReq& DailyWelfareGetTurnableRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTurnableRecordReq* DailyWelfareGetTurnableRecordReq::default_instance_ = NULL;

DailyWelfareGetTurnableRecordReq* DailyWelfareGetTurnableRecordReq::New() const {
  return new DailyWelfareGetTurnableRecordReq;
}

void DailyWelfareGetTurnableRecordReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTurnableRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetTurnableRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTurnableRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTurnableRecordReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTurnableRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTurnableRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTurnableRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTurnableRecordReq::MergeFrom(const DailyWelfareGetTurnableRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTurnableRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTurnableRecordReq::CopyFrom(const DailyWelfareGetTurnableRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTurnableRecordReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetTurnableRecordReq::Swap(DailyWelfareGetTurnableRecordReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTurnableRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTurnableRecordReq_descriptor_;
  metadata.reflection = DailyWelfareGetTurnableRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetTurnableRecordRsp::kRecordFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetTurnableRecordRsp::DailyWelfareGetTurnableRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetTurnableRecordRsp::InitAsDefaultInstance() {
}

DailyWelfareGetTurnableRecordRsp::DailyWelfareGetTurnableRecordRsp(const DailyWelfareGetTurnableRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetTurnableRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetTurnableRecordRsp::~DailyWelfareGetTurnableRecordRsp() {
  SharedDtor();
}

void DailyWelfareGetTurnableRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetTurnableRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetTurnableRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetTurnableRecordRsp_descriptor_;
}

const DailyWelfareGetTurnableRecordRsp& DailyWelfareGetTurnableRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetTurnableRecordRsp* DailyWelfareGetTurnableRecordRsp::default_instance_ = NULL;

DailyWelfareGetTurnableRecordRsp* DailyWelfareGetTurnableRecordRsp::New() const {
  return new DailyWelfareGetTurnableRecordRsp;
}

void DailyWelfareGetTurnableRecordRsp::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetTurnableRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.TurntablePBDataRecord record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetTurnableRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.TurntablePBDataRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetTurnableRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.TurntablePBDataRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetTurnableRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.TurntablePBDataRecord record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetTurnableRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetTurnableRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetTurnableRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetTurnableRecordRsp::MergeFrom(const DailyWelfareGetTurnableRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetTurnableRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetTurnableRecordRsp::CopyFrom(const DailyWelfareGetTurnableRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetTurnableRecordRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetTurnableRecordRsp::Swap(DailyWelfareGetTurnableRecordRsp* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetTurnableRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetTurnableRecordRsp_descriptor_;
  metadata.reflection = DailyWelfareGetTurnableRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetPersonTurnableRecordReq::DailyWelfareGetPersonTurnableRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetPersonTurnableRecordReq::InitAsDefaultInstance() {
}

DailyWelfareGetPersonTurnableRecordReq::DailyWelfareGetPersonTurnableRecordReq(const DailyWelfareGetPersonTurnableRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetPersonTurnableRecordReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetPersonTurnableRecordReq::~DailyWelfareGetPersonTurnableRecordReq() {
  SharedDtor();
}

void DailyWelfareGetPersonTurnableRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetPersonTurnableRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetPersonTurnableRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetPersonTurnableRecordReq_descriptor_;
}

const DailyWelfareGetPersonTurnableRecordReq& DailyWelfareGetPersonTurnableRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetPersonTurnableRecordReq* DailyWelfareGetPersonTurnableRecordReq::default_instance_ = NULL;

DailyWelfareGetPersonTurnableRecordReq* DailyWelfareGetPersonTurnableRecordReq::New() const {
  return new DailyWelfareGetPersonTurnableRecordReq;
}

void DailyWelfareGetPersonTurnableRecordReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetPersonTurnableRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetPersonTurnableRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetPersonTurnableRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetPersonTurnableRecordReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetPersonTurnableRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetPersonTurnableRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetPersonTurnableRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetPersonTurnableRecordReq::MergeFrom(const DailyWelfareGetPersonTurnableRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetPersonTurnableRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetPersonTurnableRecordReq::CopyFrom(const DailyWelfareGetPersonTurnableRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetPersonTurnableRecordReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetPersonTurnableRecordReq::Swap(DailyWelfareGetPersonTurnableRecordReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetPersonTurnableRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetPersonTurnableRecordReq_descriptor_;
  metadata.reflection = DailyWelfareGetPersonTurnableRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetPersonTurnableRecordRsp::kRecordFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetPersonTurnableRecordRsp::DailyWelfareGetPersonTurnableRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetPersonTurnableRecordRsp::InitAsDefaultInstance() {
}

DailyWelfareGetPersonTurnableRecordRsp::DailyWelfareGetPersonTurnableRecordRsp(const DailyWelfareGetPersonTurnableRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetPersonTurnableRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetPersonTurnableRecordRsp::~DailyWelfareGetPersonTurnableRecordRsp() {
  SharedDtor();
}

void DailyWelfareGetPersonTurnableRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetPersonTurnableRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetPersonTurnableRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetPersonTurnableRecordRsp_descriptor_;
}

const DailyWelfareGetPersonTurnableRecordRsp& DailyWelfareGetPersonTurnableRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetPersonTurnableRecordRsp* DailyWelfareGetPersonTurnableRecordRsp::default_instance_ = NULL;

DailyWelfareGetPersonTurnableRecordRsp* DailyWelfareGetPersonTurnableRecordRsp::New() const {
  return new DailyWelfareGetPersonTurnableRecordRsp;
}

void DailyWelfareGetPersonTurnableRecordRsp::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetPersonTurnableRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.TurntablePBDataRecord record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetPersonTurnableRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.TurntablePBDataRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetPersonTurnableRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.TurntablePBDataRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetPersonTurnableRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.TurntablePBDataRecord record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetPersonTurnableRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetPersonTurnableRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetPersonTurnableRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetPersonTurnableRecordRsp::MergeFrom(const DailyWelfareGetPersonTurnableRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetPersonTurnableRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetPersonTurnableRecordRsp::CopyFrom(const DailyWelfareGetPersonTurnableRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetPersonTurnableRecordRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetPersonTurnableRecordRsp::Swap(DailyWelfareGetPersonTurnableRecordRsp* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetPersonTurnableRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetPersonTurnableRecordRsp_descriptor_;
  metadata.reflection = DailyWelfareGetPersonTurnableRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CLGetGiftSuperBuyInfoReq::CLGetGiftSuperBuyInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLGetGiftSuperBuyInfoReq::InitAsDefaultInstance() {
}

CLGetGiftSuperBuyInfoReq::CLGetGiftSuperBuyInfoReq(const CLGetGiftSuperBuyInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLGetGiftSuperBuyInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLGetGiftSuperBuyInfoReq::~CLGetGiftSuperBuyInfoReq() {
  SharedDtor();
}

void CLGetGiftSuperBuyInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLGetGiftSuperBuyInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLGetGiftSuperBuyInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLGetGiftSuperBuyInfoReq_descriptor_;
}

const CLGetGiftSuperBuyInfoReq& CLGetGiftSuperBuyInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

CLGetGiftSuperBuyInfoReq* CLGetGiftSuperBuyInfoReq::default_instance_ = NULL;

CLGetGiftSuperBuyInfoReq* CLGetGiftSuperBuyInfoReq::New() const {
  return new CLGetGiftSuperBuyInfoReq;
}

void CLGetGiftSuperBuyInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLGetGiftSuperBuyInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CLGetGiftSuperBuyInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLGetGiftSuperBuyInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLGetGiftSuperBuyInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLGetGiftSuperBuyInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLGetGiftSuperBuyInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLGetGiftSuperBuyInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLGetGiftSuperBuyInfoReq::MergeFrom(const CLGetGiftSuperBuyInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLGetGiftSuperBuyInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLGetGiftSuperBuyInfoReq::CopyFrom(const CLGetGiftSuperBuyInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLGetGiftSuperBuyInfoReq::IsInitialized() const {

  return true;
}

void CLGetGiftSuperBuyInfoReq::Swap(CLGetGiftSuperBuyInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLGetGiftSuperBuyInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLGetGiftSuperBuyInfoReq_descriptor_;
  metadata.reflection = CLGetGiftSuperBuyInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCGetGiftSuperBuyInfoRsp::kSuperBuyFieldNumber;
#endif  // !_MSC_VER

LCGetGiftSuperBuyInfoRsp::LCGetGiftSuperBuyInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCGetGiftSuperBuyInfoRsp::InitAsDefaultInstance() {
}

LCGetGiftSuperBuyInfoRsp::LCGetGiftSuperBuyInfoRsp(const LCGetGiftSuperBuyInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCGetGiftSuperBuyInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCGetGiftSuperBuyInfoRsp::~LCGetGiftSuperBuyInfoRsp() {
  SharedDtor();
}

void LCGetGiftSuperBuyInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCGetGiftSuperBuyInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCGetGiftSuperBuyInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCGetGiftSuperBuyInfoRsp_descriptor_;
}

const LCGetGiftSuperBuyInfoRsp& LCGetGiftSuperBuyInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

LCGetGiftSuperBuyInfoRsp* LCGetGiftSuperBuyInfoRsp::default_instance_ = NULL;

LCGetGiftSuperBuyInfoRsp* LCGetGiftSuperBuyInfoRsp::New() const {
  return new LCGetGiftSuperBuyInfoRsp;
}

void LCGetGiftSuperBuyInfoRsp::Clear() {
  super_buy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCGetGiftSuperBuyInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.OneSuperGiftBuy super_buy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super_buy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_super_buy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_super_buy;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCGetGiftSuperBuyInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.OneSuperGiftBuy super_buy = 1;
  for (int i = 0; i < this->super_buy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super_buy(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCGetGiftSuperBuyInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.OneSuperGiftBuy super_buy = 1;
  for (int i = 0; i < this->super_buy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super_buy(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCGetGiftSuperBuyInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.OneSuperGiftBuy super_buy = 1;
  total_size += 1 * this->super_buy_size();
  for (int i = 0; i < this->super_buy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->super_buy(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCGetGiftSuperBuyInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCGetGiftSuperBuyInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCGetGiftSuperBuyInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCGetGiftSuperBuyInfoRsp::MergeFrom(const LCGetGiftSuperBuyInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  super_buy_.MergeFrom(from.super_buy_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCGetGiftSuperBuyInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCGetGiftSuperBuyInfoRsp::CopyFrom(const LCGetGiftSuperBuyInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCGetGiftSuperBuyInfoRsp::IsInitialized() const {

  return true;
}

void LCGetGiftSuperBuyInfoRsp::Swap(LCGetGiftSuperBuyInfoRsp* other) {
  if (other != this) {
    super_buy_.Swap(&other->super_buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCGetGiftSuperBuyInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCGetGiftSuperBuyInfoRsp_descriptor_;
  metadata.reflection = LCGetGiftSuperBuyInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLBuyGiftSuperBuyReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLBuyGiftSuperBuyReq::CLBuyGiftSuperBuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLBuyGiftSuperBuyReq::InitAsDefaultInstance() {
}

CLBuyGiftSuperBuyReq::CLBuyGiftSuperBuyReq(const CLBuyGiftSuperBuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLBuyGiftSuperBuyReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLBuyGiftSuperBuyReq::~CLBuyGiftSuperBuyReq() {
  SharedDtor();
}

void CLBuyGiftSuperBuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLBuyGiftSuperBuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLBuyGiftSuperBuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLBuyGiftSuperBuyReq_descriptor_;
}

const CLBuyGiftSuperBuyReq& CLBuyGiftSuperBuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

CLBuyGiftSuperBuyReq* CLBuyGiftSuperBuyReq::default_instance_ = NULL;

CLBuyGiftSuperBuyReq* CLBuyGiftSuperBuyReq::New() const {
  return new CLBuyGiftSuperBuyReq;
}

void CLBuyGiftSuperBuyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLBuyGiftSuperBuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLBuyGiftSuperBuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLBuyGiftSuperBuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLBuyGiftSuperBuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLBuyGiftSuperBuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLBuyGiftSuperBuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLBuyGiftSuperBuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLBuyGiftSuperBuyReq::MergeFrom(const CLBuyGiftSuperBuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLBuyGiftSuperBuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLBuyGiftSuperBuyReq::CopyFrom(const CLBuyGiftSuperBuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLBuyGiftSuperBuyReq::IsInitialized() const {

  return true;
}

void CLBuyGiftSuperBuyReq::Swap(CLBuyGiftSuperBuyReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLBuyGiftSuperBuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLBuyGiftSuperBuyReq_descriptor_;
  metadata.reflection = CLBuyGiftSuperBuyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCBuyGiftSuperBuyRsp::kRetCodeFieldNumber;
const int LCBuyGiftSuperBuyRsp::kSuperBuyFieldNumber;
#endif  // !_MSC_VER

LCBuyGiftSuperBuyRsp::LCBuyGiftSuperBuyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCBuyGiftSuperBuyRsp::InitAsDefaultInstance() {
  super_buy_ = const_cast< ::proto_ff::OneSuperGiftBuy*>(&::proto_ff::OneSuperGiftBuy::default_instance());
}

LCBuyGiftSuperBuyRsp::LCBuyGiftSuperBuyRsp(const LCBuyGiftSuperBuyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCBuyGiftSuperBuyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  super_buy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCBuyGiftSuperBuyRsp::~LCBuyGiftSuperBuyRsp() {
  SharedDtor();
}

void LCBuyGiftSuperBuyRsp::SharedDtor() {
  if (this != default_instance_) {
    delete super_buy_;
  }
}

void LCBuyGiftSuperBuyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCBuyGiftSuperBuyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCBuyGiftSuperBuyRsp_descriptor_;
}

const LCBuyGiftSuperBuyRsp& LCBuyGiftSuperBuyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

LCBuyGiftSuperBuyRsp* LCBuyGiftSuperBuyRsp::default_instance_ = NULL;

LCBuyGiftSuperBuyRsp* LCBuyGiftSuperBuyRsp::New() const {
  return new LCBuyGiftSuperBuyRsp;
}

void LCBuyGiftSuperBuyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_super_buy()) {
      if (super_buy_ != NULL) super_buy_->::proto_ff::OneSuperGiftBuy::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCBuyGiftSuperBuyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_super_buy;
        break;
      }

      // optional .proto_ff.OneSuperGiftBuy super_buy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super_buy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super_buy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCBuyGiftSuperBuyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.OneSuperGiftBuy super_buy = 2;
  if (has_super_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->super_buy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCBuyGiftSuperBuyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.OneSuperGiftBuy super_buy = 2;
  if (has_super_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->super_buy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCBuyGiftSuperBuyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.OneSuperGiftBuy super_buy = 2;
    if (has_super_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super_buy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCBuyGiftSuperBuyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCBuyGiftSuperBuyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCBuyGiftSuperBuyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCBuyGiftSuperBuyRsp::MergeFrom(const LCBuyGiftSuperBuyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_super_buy()) {
      mutable_super_buy()->::proto_ff::OneSuperGiftBuy::MergeFrom(from.super_buy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCBuyGiftSuperBuyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCBuyGiftSuperBuyRsp::CopyFrom(const LCBuyGiftSuperBuyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCBuyGiftSuperBuyRsp::IsInitialized() const {

  return true;
}

void LCBuyGiftSuperBuyRsp::Swap(LCBuyGiftSuperBuyRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(super_buy_, other->super_buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCBuyGiftSuperBuyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCBuyGiftSuperBuyRsp_descriptor_;
  metadata.reflection = LCBuyGiftSuperBuyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGiftSuperBuyChange::kSuperBuyFieldNumber;
#endif  // !_MSC_VER

NotifyGiftSuperBuyChange::NotifyGiftSuperBuyChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyGiftSuperBuyChange::InitAsDefaultInstance() {
  super_buy_ = const_cast< ::proto_ff::OneSuperGiftBuy*>(&::proto_ff::OneSuperGiftBuy::default_instance());
}

NotifyGiftSuperBuyChange::NotifyGiftSuperBuyChange(const NotifyGiftSuperBuyChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGiftSuperBuyChange::SharedCtor() {
  _cached_size_ = 0;
  super_buy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGiftSuperBuyChange::~NotifyGiftSuperBuyChange() {
  SharedDtor();
}

void NotifyGiftSuperBuyChange::SharedDtor() {
  if (this != default_instance_) {
    delete super_buy_;
  }
}

void NotifyGiftSuperBuyChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGiftSuperBuyChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGiftSuperBuyChange_descriptor_;
}

const NotifyGiftSuperBuyChange& NotifyGiftSuperBuyChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

NotifyGiftSuperBuyChange* NotifyGiftSuperBuyChange::default_instance_ = NULL;

NotifyGiftSuperBuyChange* NotifyGiftSuperBuyChange::New() const {
  return new NotifyGiftSuperBuyChange;
}

void NotifyGiftSuperBuyChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super_buy()) {
      if (super_buy_ != NULL) super_buy_->::proto_ff::OneSuperGiftBuy::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGiftSuperBuyChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.OneSuperGiftBuy super_buy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super_buy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGiftSuperBuyChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.OneSuperGiftBuy super_buy = 1;
  if (has_super_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super_buy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyGiftSuperBuyChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.OneSuperGiftBuy super_buy = 1;
  if (has_super_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super_buy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyGiftSuperBuyChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.OneSuperGiftBuy super_buy = 1;
    if (has_super_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super_buy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGiftSuperBuyChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGiftSuperBuyChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGiftSuperBuyChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGiftSuperBuyChange::MergeFrom(const NotifyGiftSuperBuyChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super_buy()) {
      mutable_super_buy()->::proto_ff::OneSuperGiftBuy::MergeFrom(from.super_buy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGiftSuperBuyChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGiftSuperBuyChange::CopyFrom(const NotifyGiftSuperBuyChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGiftSuperBuyChange::IsInitialized() const {

  return true;
}

void NotifyGiftSuperBuyChange::Swap(NotifyGiftSuperBuyChange* other) {
  if (other != this) {
    std::swap(super_buy_, other->super_buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGiftSuperBuyChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGiftSuperBuyChange_descriptor_;
  metadata.reflection = NotifyGiftSuperBuyChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLGetInvestInfoReq::kInvestIdFieldNumber;
#endif  // !_MSC_VER

CLGetInvestInfoReq::CLGetInvestInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLGetInvestInfoReq::InitAsDefaultInstance() {
}

CLGetInvestInfoReq::CLGetInvestInfoReq(const CLGetInvestInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLGetInvestInfoReq::SharedCtor() {
  _cached_size_ = 0;
  invest_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLGetInvestInfoReq::~CLGetInvestInfoReq() {
  SharedDtor();
}

void CLGetInvestInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLGetInvestInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLGetInvestInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLGetInvestInfoReq_descriptor_;
}

const CLGetInvestInfoReq& CLGetInvestInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

CLGetInvestInfoReq* CLGetInvestInfoReq::default_instance_ = NULL;

CLGetInvestInfoReq* CLGetInvestInfoReq::New() const {
  return new CLGetInvestInfoReq;
}

void CLGetInvestInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    invest_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLGetInvestInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 invest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invest_id_)));
          set_has_invest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLGetInvestInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 invest_id = 1;
  if (has_invest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->invest_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLGetInvestInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 invest_id = 1;
  if (has_invest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->invest_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLGetInvestInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 invest_id = 1;
    if (has_invest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invest_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLGetInvestInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLGetInvestInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLGetInvestInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLGetInvestInfoReq::MergeFrom(const CLGetInvestInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invest_id()) {
      set_invest_id(from.invest_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLGetInvestInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLGetInvestInfoReq::CopyFrom(const CLGetInvestInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLGetInvestInfoReq::IsInitialized() const {

  return true;
}

void CLGetInvestInfoReq::Swap(CLGetInvestInfoReq* other) {
  if (other != this) {
    std::swap(invest_id_, other->invest_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLGetInvestInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLGetInvestInfoReq_descriptor_;
  metadata.reflection = CLGetInvestInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCGetInvestInfoRsp::kRetCodeFieldNumber;
const int LCGetInvestInfoRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCGetInvestInfoRsp::LCGetInvestInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCGetInvestInfoRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::OneWelfareInvestData*>(&::proto_ff::OneWelfareInvestData::default_instance());
}

LCGetInvestInfoRsp::LCGetInvestInfoRsp(const LCGetInvestInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCGetInvestInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCGetInvestInfoRsp::~LCGetInvestInfoRsp() {
  SharedDtor();
}

void LCGetInvestInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCGetInvestInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCGetInvestInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCGetInvestInfoRsp_descriptor_;
}

const LCGetInvestInfoRsp& LCGetInvestInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

LCGetInvestInfoRsp* LCGetInvestInfoRsp::default_instance_ = NULL;

LCGetInvestInfoRsp* LCGetInvestInfoRsp::New() const {
  return new LCGetInvestInfoRsp;
}

void LCGetInvestInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::OneWelfareInvestData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCGetInvestInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.OneWelfareInvestData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCGetInvestInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.OneWelfareInvestData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCGetInvestInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.OneWelfareInvestData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCGetInvestInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.OneWelfareInvestData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCGetInvestInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCGetInvestInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCGetInvestInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCGetInvestInfoRsp::MergeFrom(const LCGetInvestInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::OneWelfareInvestData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCGetInvestInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCGetInvestInfoRsp::CopyFrom(const LCGetInvestInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCGetInvestInfoRsp::IsInitialized() const {

  return true;
}

void LCGetInvestInfoRsp::Swap(LCGetInvestInfoRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCGetInvestInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCGetInvestInfoRsp_descriptor_;
  metadata.reflection = LCGetInvestInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLGetInvestRewardReq::kInvestRewardIdFieldNumber;
#endif  // !_MSC_VER

CLGetInvestRewardReq::CLGetInvestRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLGetInvestRewardReq::InitAsDefaultInstance() {
}

CLGetInvestRewardReq::CLGetInvestRewardReq(const CLGetInvestRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLGetInvestRewardReq::SharedCtor() {
  _cached_size_ = 0;
  invest_reward_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLGetInvestRewardReq::~CLGetInvestRewardReq() {
  SharedDtor();
}

void CLGetInvestRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLGetInvestRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLGetInvestRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLGetInvestRewardReq_descriptor_;
}

const CLGetInvestRewardReq& CLGetInvestRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

CLGetInvestRewardReq* CLGetInvestRewardReq::default_instance_ = NULL;

CLGetInvestRewardReq* CLGetInvestRewardReq::New() const {
  return new CLGetInvestRewardReq;
}

void CLGetInvestRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    invest_reward_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLGetInvestRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 invest_reward_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invest_reward_id_)));
          set_has_invest_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLGetInvestRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 invest_reward_id = 1;
  if (has_invest_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->invest_reward_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLGetInvestRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 invest_reward_id = 1;
  if (has_invest_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->invest_reward_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLGetInvestRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 invest_reward_id = 1;
    if (has_invest_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invest_reward_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLGetInvestRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLGetInvestRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLGetInvestRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLGetInvestRewardReq::MergeFrom(const CLGetInvestRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invest_reward_id()) {
      set_invest_reward_id(from.invest_reward_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLGetInvestRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLGetInvestRewardReq::CopyFrom(const CLGetInvestRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLGetInvestRewardReq::IsInitialized() const {

  return true;
}

void CLGetInvestRewardReq::Swap(CLGetInvestRewardReq* other) {
  if (other != this) {
    std::swap(invest_reward_id_, other->invest_reward_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLGetInvestRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLGetInvestRewardReq_descriptor_;
  metadata.reflection = CLGetInvestRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCGetInvestRewardRsp::kRetCodeFieldNumber;
const int LCGetInvestRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCGetInvestRewardRsp::LCGetInvestRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCGetInvestRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::OnWelfareInvestRewardData*>(&::proto_ff::OnWelfareInvestRewardData::default_instance());
}

LCGetInvestRewardRsp::LCGetInvestRewardRsp(const LCGetInvestRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCGetInvestRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCGetInvestRewardRsp::~LCGetInvestRewardRsp() {
  SharedDtor();
}

void LCGetInvestRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCGetInvestRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCGetInvestRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCGetInvestRewardRsp_descriptor_;
}

const LCGetInvestRewardRsp& LCGetInvestRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

LCGetInvestRewardRsp* LCGetInvestRewardRsp::default_instance_ = NULL;

LCGetInvestRewardRsp* LCGetInvestRewardRsp::New() const {
  return new LCGetInvestRewardRsp;
}

void LCGetInvestRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::OnWelfareInvestRewardData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCGetInvestRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.OnWelfareInvestRewardData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCGetInvestRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.OnWelfareInvestRewardData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCGetInvestRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.OnWelfareInvestRewardData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCGetInvestRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.OnWelfareInvestRewardData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCGetInvestRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCGetInvestRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCGetInvestRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCGetInvestRewardRsp::MergeFrom(const LCGetInvestRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::OnWelfareInvestRewardData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCGetInvestRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCGetInvestRewardRsp::CopyFrom(const LCGetInvestRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCGetInvestRewardRsp::IsInitialized() const {

  return true;
}

void LCGetInvestRewardRsp::Swap(LCGetInvestRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCGetInvestRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCGetInvestRewardRsp_descriptor_;
  metadata.reflection = LCGetInvestRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyInvestRewardDataChange::kDataFieldNumber;
#endif  // !_MSC_VER

NotifyInvestRewardDataChange::NotifyInvestRewardDataChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyInvestRewardDataChange::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::OnWelfareInvestRewardData*>(&::proto_ff::OnWelfareInvestRewardData::default_instance());
}

NotifyInvestRewardDataChange::NotifyInvestRewardDataChange(const NotifyInvestRewardDataChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyInvestRewardDataChange::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyInvestRewardDataChange::~NotifyInvestRewardDataChange() {
  SharedDtor();
}

void NotifyInvestRewardDataChange::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void NotifyInvestRewardDataChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyInvestRewardDataChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyInvestRewardDataChange_descriptor_;
}

const NotifyInvestRewardDataChange& NotifyInvestRewardDataChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

NotifyInvestRewardDataChange* NotifyInvestRewardDataChange::default_instance_ = NULL;

NotifyInvestRewardDataChange* NotifyInvestRewardDataChange::New() const {
  return new NotifyInvestRewardDataChange;
}

void NotifyInvestRewardDataChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::OnWelfareInvestRewardData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyInvestRewardDataChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.OnWelfareInvestRewardData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyInvestRewardDataChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.OnWelfareInvestRewardData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyInvestRewardDataChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.OnWelfareInvestRewardData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyInvestRewardDataChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.OnWelfareInvestRewardData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyInvestRewardDataChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyInvestRewardDataChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyInvestRewardDataChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyInvestRewardDataChange::MergeFrom(const NotifyInvestRewardDataChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto_ff::OnWelfareInvestRewardData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyInvestRewardDataChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyInvestRewardDataChange::CopyFrom(const NotifyInvestRewardDataChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyInvestRewardDataChange::IsInitialized() const {

  return true;
}

void NotifyInvestRewardDataChange::Swap(NotifyInvestRewardDataChange* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyInvestRewardDataChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyInvestRewardDataChange_descriptor_;
  metadata.reflection = NotifyInvestRewardDataChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLGetBuyInvestReq::kInvestIdFieldNumber;
#endif  // !_MSC_VER

CLGetBuyInvestReq::CLGetBuyInvestReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLGetBuyInvestReq::InitAsDefaultInstance() {
}

CLGetBuyInvestReq::CLGetBuyInvestReq(const CLGetBuyInvestReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLGetBuyInvestReq::SharedCtor() {
  _cached_size_ = 0;
  invest_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLGetBuyInvestReq::~CLGetBuyInvestReq() {
  SharedDtor();
}

void CLGetBuyInvestReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLGetBuyInvestReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLGetBuyInvestReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLGetBuyInvestReq_descriptor_;
}

const CLGetBuyInvestReq& CLGetBuyInvestReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

CLGetBuyInvestReq* CLGetBuyInvestReq::default_instance_ = NULL;

CLGetBuyInvestReq* CLGetBuyInvestReq::New() const {
  return new CLGetBuyInvestReq;
}

void CLGetBuyInvestReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    invest_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLGetBuyInvestReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 invest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invest_id_)));
          set_has_invest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLGetBuyInvestReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 invest_id = 1;
  if (has_invest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->invest_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLGetBuyInvestReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 invest_id = 1;
  if (has_invest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->invest_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLGetBuyInvestReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 invest_id = 1;
    if (has_invest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invest_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLGetBuyInvestReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLGetBuyInvestReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLGetBuyInvestReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLGetBuyInvestReq::MergeFrom(const CLGetBuyInvestReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invest_id()) {
      set_invest_id(from.invest_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLGetBuyInvestReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLGetBuyInvestReq::CopyFrom(const CLGetBuyInvestReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLGetBuyInvestReq::IsInitialized() const {

  return true;
}

void CLGetBuyInvestReq::Swap(CLGetBuyInvestReq* other) {
  if (other != this) {
    std::swap(invest_id_, other->invest_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLGetBuyInvestReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLGetBuyInvestReq_descriptor_;
  metadata.reflection = CLGetBuyInvestReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCGetBuyInvestRsp::kRetCodeFieldNumber;
const int LCGetBuyInvestRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCGetBuyInvestRsp::LCGetBuyInvestRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCGetBuyInvestRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::OneWelfareInvestData*>(&::proto_ff::OneWelfareInvestData::default_instance());
}

LCGetBuyInvestRsp::LCGetBuyInvestRsp(const LCGetBuyInvestRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCGetBuyInvestRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCGetBuyInvestRsp::~LCGetBuyInvestRsp() {
  SharedDtor();
}

void LCGetBuyInvestRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCGetBuyInvestRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCGetBuyInvestRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCGetBuyInvestRsp_descriptor_;
}

const LCGetBuyInvestRsp& LCGetBuyInvestRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

LCGetBuyInvestRsp* LCGetBuyInvestRsp::default_instance_ = NULL;

LCGetBuyInvestRsp* LCGetBuyInvestRsp::New() const {
  return new LCGetBuyInvestRsp;
}

void LCGetBuyInvestRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::OneWelfareInvestData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCGetBuyInvestRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.OneWelfareInvestData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCGetBuyInvestRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.OneWelfareInvestData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCGetBuyInvestRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.OneWelfareInvestData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCGetBuyInvestRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.OneWelfareInvestData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCGetBuyInvestRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCGetBuyInvestRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCGetBuyInvestRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCGetBuyInvestRsp::MergeFrom(const LCGetBuyInvestRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::OneWelfareInvestData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCGetBuyInvestRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCGetBuyInvestRsp::CopyFrom(const LCGetBuyInvestRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCGetBuyInvestRsp::IsInitialized() const {

  return true;
}

void LCGetBuyInvestRsp::Swap(LCGetBuyInvestRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCGetBuyInvestRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCGetBuyInvestRsp_descriptor_;
  metadata.reflection = LCGetBuyInvestRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyWelfareGetYTTLGiftDataReq::DailyWelfareGetYTTLGiftDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetYTTLGiftDataReq::InitAsDefaultInstance() {
}

DailyWelfareGetYTTLGiftDataReq::DailyWelfareGetYTTLGiftDataReq(const DailyWelfareGetYTTLGiftDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetYTTLGiftDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetYTTLGiftDataReq::~DailyWelfareGetYTTLGiftDataReq() {
  SharedDtor();
}

void DailyWelfareGetYTTLGiftDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetYTTLGiftDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetYTTLGiftDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetYTTLGiftDataReq_descriptor_;
}

const DailyWelfareGetYTTLGiftDataReq& DailyWelfareGetYTTLGiftDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetYTTLGiftDataReq* DailyWelfareGetYTTLGiftDataReq::default_instance_ = NULL;

DailyWelfareGetYTTLGiftDataReq* DailyWelfareGetYTTLGiftDataReq::New() const {
  return new DailyWelfareGetYTTLGiftDataReq;
}

void DailyWelfareGetYTTLGiftDataReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetYTTLGiftDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyWelfareGetYTTLGiftDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetYTTLGiftDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetYTTLGiftDataReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetYTTLGiftDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetYTTLGiftDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetYTTLGiftDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetYTTLGiftDataReq::MergeFrom(const DailyWelfareGetYTTLGiftDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetYTTLGiftDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetYTTLGiftDataReq::CopyFrom(const DailyWelfareGetYTTLGiftDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetYTTLGiftDataReq::IsInitialized() const {

  return true;
}

void DailyWelfareGetYTTLGiftDataReq::Swap(DailyWelfareGetYTTLGiftDataReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetYTTLGiftDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetYTTLGiftDataReq_descriptor_;
  metadata.reflection = DailyWelfareGetYTTLGiftDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyWelfareGetYTTLGiftDataRsp::kRetCodeFieldNumber;
const int DailyWelfareGetYTTLGiftDataRsp::kYttlGiftFieldNumber;
#endif  // !_MSC_VER

DailyWelfareGetYTTLGiftDataRsp::DailyWelfareGetYTTLGiftDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyWelfareGetYTTLGiftDataRsp::InitAsDefaultInstance() {
}

DailyWelfareGetYTTLGiftDataRsp::DailyWelfareGetYTTLGiftDataRsp(const DailyWelfareGetYTTLGiftDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyWelfareGetYTTLGiftDataRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyWelfareGetYTTLGiftDataRsp::~DailyWelfareGetYTTLGiftDataRsp() {
  SharedDtor();
}

void DailyWelfareGetYTTLGiftDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyWelfareGetYTTLGiftDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyWelfareGetYTTLGiftDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyWelfareGetYTTLGiftDataRsp_descriptor_;
}

const DailyWelfareGetYTTLGiftDataRsp& DailyWelfareGetYTTLGiftDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DailyWelfare_2eproto();
  return *default_instance_;
}

DailyWelfareGetYTTLGiftDataRsp* DailyWelfareGetYTTLGiftDataRsp::default_instance_ = NULL;

DailyWelfareGetYTTLGiftDataRsp* DailyWelfareGetYTTLGiftDataRsp::New() const {
  return new DailyWelfareGetYTTLGiftDataRsp;
}

void DailyWelfareGetYTTLGiftDataRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  yttl_gift_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyWelfareGetYTTLGiftDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_yttl_gift;
        break;
      }

      // repeated .proto_ff.OneYTTLGift yttl_gift = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yttl_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yttl_gift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_yttl_gift;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyWelfareGetYTTLGiftDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // repeated .proto_ff.OneYTTLGift yttl_gift = 2;
  for (int i = 0; i < this->yttl_gift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->yttl_gift(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyWelfareGetYTTLGiftDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // repeated .proto_ff.OneYTTLGift yttl_gift = 2;
  for (int i = 0; i < this->yttl_gift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->yttl_gift(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyWelfareGetYTTLGiftDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  // repeated .proto_ff.OneYTTLGift yttl_gift = 2;
  total_size += 1 * this->yttl_gift_size();
  for (int i = 0; i < this->yttl_gift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yttl_gift(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyWelfareGetYTTLGiftDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyWelfareGetYTTLGiftDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyWelfareGetYTTLGiftDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyWelfareGetYTTLGiftDataRsp::MergeFrom(const DailyWelfareGetYTTLGiftDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  yttl_gift_.MergeFrom(from.yttl_gift_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyWelfareGetYTTLGiftDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyWelfareGetYTTLGiftDataRsp::CopyFrom(const DailyWelfareGetYTTLGiftDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyWelfareGetYTTLGiftDataRsp::IsInitialized() const {

  return true;
}

void DailyWelfareGetYTTLGiftDataRsp::Swap(DailyWelfareGetYTTLGiftDataRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    yttl_gift_.Swap(&other->yttl_gift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyWelfareGetYTTLGiftDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyWelfareGetYTTLGiftDataRsp_descriptor_;
  metadata.reflection = DailyWelfareGetYTTLGiftDataRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
