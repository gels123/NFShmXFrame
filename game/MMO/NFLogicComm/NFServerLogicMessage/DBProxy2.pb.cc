// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProxy2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DBProxy2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* dbServerMgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbServerMgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRegisterNum_RoleDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRegisterNum_RoleDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBSnsSimple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBSnsSimple_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBSnsDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBSnsDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleEnterSceneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleEnterSceneData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBName_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DBProxy2_2eproto() {
  protobuf_AddDesc_DBProxy2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DBProxy2.proto");
  GOOGLE_CHECK(file != NULL);
  dbServerMgr_descriptor_ = file->message_type(0);
  static const int dbServerMgr_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, machine_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, bus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, server_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, cur_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, facade_),
  };
  dbServerMgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbServerMgr_descriptor_,
      dbServerMgr::default_instance_,
      dbServerMgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbServerMgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbServerMgr));
  GetRegisterNum_RoleDBData_descriptor_ = file->message_type(1);
  static const int GetRegisterNum_RoleDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegisterNum_RoleDBData, num_),
  };
  GetRegisterNum_RoleDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRegisterNum_RoleDBData_descriptor_,
      GetRegisterNum_RoleDBData::default_instance_,
      GetRegisterNum_RoleDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegisterNum_RoleDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegisterNum_RoleDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRegisterNum_RoleDBData));
  RoleDBSnsSimple_descriptor_ = file->message_type(2);
  static const int RoleDBSnsSimple_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSnsSimple, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSnsSimple, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSnsSimple, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSnsSimple, base_),
  };
  RoleDBSnsSimple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBSnsSimple_descriptor_,
      RoleDBSnsSimple::default_instance_,
      RoleDBSnsSimple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSnsSimple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSnsSimple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBSnsSimple));
  MyFriendInfo_descriptor_ = file->message_type(3);
  static const int MyFriendInfo_offsets_[1] = {
  };
  MyFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyFriendInfo_descriptor_,
      MyFriendInfo::default_instance_,
      MyFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyFriendInfo));
  RoleDBSnsDetail_descriptor_ = file->message_type(4);
  static const int RoleDBSnsDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSnsDetail, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSnsDetail, friend_info_),
  };
  RoleDBSnsDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBSnsDetail_descriptor_,
      RoleDBSnsDetail::default_instance_,
      RoleDBSnsDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSnsDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSnsDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBSnsDetail));
  RoleEnterSceneData_descriptor_ = file->message_type(5);
  static const int RoleEnterSceneData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEnterSceneData, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEnterSceneData, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEnterSceneData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEnterSceneData, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEnterSceneData, attr_),
  };
  RoleEnterSceneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleEnterSceneData_descriptor_,
      RoleEnterSceneData::default_instance_,
      RoleEnterSceneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEnterSceneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEnterSceneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleEnterSceneData));
  RoleDBName_descriptor_ = file->message_type(6);
  static const int RoleDBName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBName, name_),
  };
  RoleDBName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBName_descriptor_,
      RoleDBName::default_instance_,
      RoleDBName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBName));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DBProxy2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbServerMgr_descriptor_, &dbServerMgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRegisterNum_RoleDBData_descriptor_, &GetRegisterNum_RoleDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBSnsSimple_descriptor_, &RoleDBSnsSimple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyFriendInfo_descriptor_, &MyFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBSnsDetail_descriptor_, &RoleDBSnsDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleEnterSceneData_descriptor_, &RoleEnterSceneData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBName_descriptor_, &RoleDBName::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DBProxy2_2eproto() {
  delete dbServerMgr::default_instance_;
  delete dbServerMgr_reflection_;
  delete GetRegisterNum_RoleDBData::default_instance_;
  delete GetRegisterNum_RoleDBData_reflection_;
  delete RoleDBSnsSimple::default_instance_;
  delete RoleDBSnsSimple_reflection_;
  delete MyFriendInfo::default_instance_;
  delete MyFriendInfo_reflection_;
  delete RoleDBSnsDetail::default_instance_;
  delete RoleDBSnsDetail_reflection_;
  delete RoleEnterSceneData::default_instance_;
  delete RoleEnterSceneData_reflection_;
  delete RoleDBName::default_instance_;
  delete RoleDBName_reflection_;
}

void protobuf_AddDesc_DBProxy2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::proto_ff::protobuf_AddDesc_DBProxy_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016DBProxy2.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\032\tCom.proto\032\017ComDefine.proto\032\rD"
    "BProxy.proto\"\240\004\n\013dbServerMgr\022\037\n\002id\030\001 \001(\004"
    "B\023\300\202\024\002\272\304\023\002ID\230\304\023\001\250\304\023\220N\022(\n\010contract\030\002 \001(\tB"
    "\026\300\202\024\004\310\202\024\200\001\272\304\023\t\345\220\210\345\220\214\345\217\267\022,\n\014machine_addr\030"
    "\003 \001(\tB\026\300\202\024\003\310\202\024\200\001\272\304\023\t\346\234\272\345\231\250\347\240\201\022!\n\002ip\030\004 \001("
    "\tB\025\300\202\024\003\310\202\024\200\001\272\304\023\010IP\345\234\260\345\235\200\022*\n\010bus_name\030\005 \001"
    "(\tB\030\300\202\024\003\310\202\024\200\001\272\304\023\013\346\234\215\345\212\241\345\231\250ID\022*\n\013server_d"
    "esc\030\006 \001(\tB\025\310\202\024\200\001\272\304\023\014\346\217\217\350\277\260\344\277\241\346\201\257\022)\n\tcur_"
    "count\030\007 \001(\rB\026\272\304\023\022\345\275\223\345\211\215\346\234\215\345\212\241\345\231\250\346\225\260\0222\n\017l"
    "ast_login_time\030\010 \001(\004B\031\272\304\023\025\344\270\212\344\270\200\346\254\241\347\231\273\345\275"
    "\225\346\227\266\351\227\264\0223\n\020last_logout_time\030\t \001(\004B\031\272\304\023\025\344"
    "\270\212\344\270\200\346\254\241\344\270\213\347\272\277\346\227\266\351\227\264\022\031\n\013logout_time\030\n \003("
    "\004B\004\340\202\024\003\022\027\n\004desc\030\013 \003(\tB\t\310\202\024\200\001\340\202\024\002\022%\n\004pair"
    "\030\014 \003(\0132\021.proto_ff.ComPairB\004\340\202\024\002\022.\n\006facad"
    "e\030\r \003(\0132\030.proto_ff.BestEQSlotInfoB\004\340\202\024\002\""
    "(\n\031GetRegisterNum_RoleDBData\022\013\n\003num\030\001 \001("
    "\r\"`\n\017RoleDBSnsSimple\022\013\n\003cid\030\001 \001(\004\022\013\n\003zid"
    "\030\002 \001(\r\022\013\n\003uid\030\003 \001(\r\022&\n\004base\030\004 \001(\0132\030.prot"
    "o_ff.RoleDBBaseData\"\016\n\014MyFriendInfo\"Q\n\017R"
    "oleDBSnsDetail\022\021\n\003cid\030\001 \001(\004B\004\300\202\024\002\022+\n\013fri"
    "end_info\030\002 \001(\0132\026.proto_ff.MyFriendInfo\"\207"
    "\001\n\022RoleEnterSceneData\022\013\n\003cid\030\001 \001(\004\022\013\n\003zi"
    "d\030\002 \001(\r\022\013\n\003uid\030\003 \001(\r\022&\n\004base\030\n \001(\0132\030.pro"
    "to_ff.RoleDBBaseData\022\"\n\004attr\030\013 \001(\0132\024.pro"
    "to_ff.AttrDBData\"8\n\nRoleDBName\022*\n\004name\030\001"
    " \001(\014B\034\300\202\024\002\220\301\024 \310\202\024 \272\304\023\014\350\247\222\350\211\262\345\220\215\345\255\227", 1074);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DBProxy2.proto", &protobuf_RegisterTypes);
  dbServerMgr::default_instance_ = new dbServerMgr();
  GetRegisterNum_RoleDBData::default_instance_ = new GetRegisterNum_RoleDBData();
  RoleDBSnsSimple::default_instance_ = new RoleDBSnsSimple();
  MyFriendInfo::default_instance_ = new MyFriendInfo();
  RoleDBSnsDetail::default_instance_ = new RoleDBSnsDetail();
  RoleEnterSceneData::default_instance_ = new RoleEnterSceneData();
  RoleDBName::default_instance_ = new RoleDBName();
  dbServerMgr::default_instance_->InitAsDefaultInstance();
  GetRegisterNum_RoleDBData::default_instance_->InitAsDefaultInstance();
  RoleDBSnsSimple::default_instance_->InitAsDefaultInstance();
  MyFriendInfo::default_instance_->InitAsDefaultInstance();
  RoleDBSnsDetail::default_instance_->InitAsDefaultInstance();
  RoleEnterSceneData::default_instance_->InitAsDefaultInstance();
  RoleDBName::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DBProxy2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DBProxy2_2eproto {
  StaticDescriptorInitializer_DBProxy2_2eproto() {
    protobuf_AddDesc_DBProxy2_2eproto();
  }
} static_descriptor_initializer_DBProxy2_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int dbServerMgr::kIdFieldNumber;
const int dbServerMgr::kContractFieldNumber;
const int dbServerMgr::kMachineAddrFieldNumber;
const int dbServerMgr::kIpFieldNumber;
const int dbServerMgr::kBusNameFieldNumber;
const int dbServerMgr::kServerDescFieldNumber;
const int dbServerMgr::kCurCountFieldNumber;
const int dbServerMgr::kLastLoginTimeFieldNumber;
const int dbServerMgr::kLastLogoutTimeFieldNumber;
const int dbServerMgr::kLogoutTimeFieldNumber;
const int dbServerMgr::kDescFieldNumber;
const int dbServerMgr::kPairFieldNumber;
const int dbServerMgr::kFacadeFieldNumber;
#endif  // !_MSC_VER

dbServerMgr::dbServerMgr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbServerMgr::InitAsDefaultInstance() {
}

dbServerMgr::dbServerMgr(const dbServerMgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbServerMgr::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cur_count_ = 0u;
  last_login_time_ = GOOGLE_ULONGLONG(0);
  last_logout_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbServerMgr::~dbServerMgr() {
  SharedDtor();
}

void dbServerMgr::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_;
  }
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_addr_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (server_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete server_desc_;
  }
  if (this != default_instance_) {
  }
}

void dbServerMgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbServerMgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbServerMgr_descriptor_;
}

const dbServerMgr& dbServerMgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy2_2eproto();
  return *default_instance_;
}

dbServerMgr* dbServerMgr::default_instance_ = NULL;

dbServerMgr* dbServerMgr::New() const {
  return new dbServerMgr;
}

void dbServerMgr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_contract()) {
      if (contract_ != &::google::protobuf::internal::kEmptyString) {
        contract_->clear();
      }
    }
    if (has_machine_addr()) {
      if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
        machine_addr_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
    if (has_server_desc()) {
      if (server_desc_ != &::google::protobuf::internal::kEmptyString) {
        server_desc_->clear();
      }
    }
    cur_count_ = 0u;
    last_login_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_logout_time_ = GOOGLE_ULONGLONG(0);
  }
  logout_time_.Clear();
  desc_.Clear();
  pair_.Clear();
  facade_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbServerMgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contract;
        break;
      }

      // optional string contract = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_machine_addr;
        break;
      }

      // optional string machine_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_addr().data(), this->machine_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_server_desc;
        break;
      }

      // optional string server_desc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_desc().data(), this->server_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cur_count;
        break;
      }

      // optional uint32 cur_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_count_)));
          set_has_cur_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_login_time;
        break;
      }

      // optional uint64 last_login_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_logout_time;
        break;
      }

      // optional uint64 last_logout_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_logout_time_)));
          set_has_last_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_logout_time;
        break;
      }

      // repeated uint64 logout_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 80, input, this->mutable_logout_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_logout_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_logout_time;
        if (input->ExpectTag(90)) goto parse_desc;
        break;
      }

      // repeated string desc = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc(this->desc_size() - 1).data(),
            this->desc(this->desc_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_desc;
        if (input->ExpectTag(98)) goto parse_pair;
        break;
      }

      // repeated .proto_ff.ComPair pair = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pair;
        if (input->ExpectTag(106)) goto parse_facade;
        break;
      }

      // repeated .proto_ff.BestEQSlotInfo facade = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_facade;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbServerMgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contract(), output);
  }

  // optional string machine_addr = 3;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->machine_addr(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional string bus_name = 5;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bus_name(), output);
  }

  // optional string server_desc = 6;
  if (has_server_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_desc().data(), this->server_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->server_desc(), output);
  }

  // optional uint32 cur_count = 7;
  if (has_cur_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cur_count(), output);
  }

  // optional uint64 last_login_time = 8;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->last_login_time(), output);
  }

  // optional uint64 last_logout_time = 9;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->last_logout_time(), output);
  }

  // repeated uint64 logout_time = 10;
  for (int i = 0; i < this->logout_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      10, this->logout_time(i), output);
  }

  // repeated string desc = 11;
  for (int i = 0; i < this->desc_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->desc(i).data(), this->desc(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->desc(i), output);
  }

  // repeated .proto_ff.ComPair pair = 12;
  for (int i = 0; i < this->pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->pair(i), output);
  }

  // repeated .proto_ff.BestEQSlotInfo facade = 13;
  for (int i = 0; i < this->facade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->facade(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbServerMgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contract(), target);
  }

  // optional string machine_addr = 3;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_addr(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional string bus_name = 5;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bus_name(), target);
  }

  // optional string server_desc = 6;
  if (has_server_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_desc().data(), this->server_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->server_desc(), target);
  }

  // optional uint32 cur_count = 7;
  if (has_cur_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cur_count(), target);
  }

  // optional uint64 last_login_time = 8;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->last_login_time(), target);
  }

  // optional uint64 last_logout_time = 9;
  if (has_last_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->last_logout_time(), target);
  }

  // repeated uint64 logout_time = 10;
  for (int i = 0; i < this->logout_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(10, this->logout_time(i), target);
  }

  // repeated string desc = 11;
  for (int i = 0; i < this->desc_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc(i).data(), this->desc(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->desc(i), target);
  }

  // repeated .proto_ff.ComPair pair = 12;
  for (int i = 0; i < this->pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->pair(i), target);
  }

  // repeated .proto_ff.BestEQSlotInfo facade = 13;
  for (int i = 0; i < this->facade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->facade(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbServerMgr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string contract = 2;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }

    // optional string machine_addr = 3;
    if (has_machine_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_addr());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string bus_name = 5;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

    // optional string server_desc = 6;
    if (has_server_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_desc());
    }

    // optional uint32 cur_count = 7;
    if (has_cur_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_count());
    }

    // optional uint64 last_login_time = 8;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_login_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 last_logout_time = 9;
    if (has_last_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_logout_time());
    }

  }
  // repeated uint64 logout_time = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->logout_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->logout_time(i));
    }
    total_size += 1 * this->logout_time_size() + data_size;
  }

  // repeated string desc = 11;
  total_size += 1 * this->desc_size();
  for (int i = 0; i < this->desc_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->desc(i));
  }

  // repeated .proto_ff.ComPair pair = 12;
  total_size += 1 * this->pair_size();
  for (int i = 0; i < this->pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pair(i));
  }

  // repeated .proto_ff.BestEQSlotInfo facade = 13;
  total_size += 1 * this->facade_size();
  for (int i = 0; i < this->facade_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facade(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbServerMgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbServerMgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbServerMgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbServerMgr::MergeFrom(const dbServerMgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  logout_time_.MergeFrom(from.logout_time_);
  desc_.MergeFrom(from.desc_);
  pair_.MergeFrom(from.pair_);
  facade_.MergeFrom(from.facade_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_contract()) {
      set_contract(from.contract());
    }
    if (from.has_machine_addr()) {
      set_machine_addr(from.machine_addr());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
    if (from.has_server_desc()) {
      set_server_desc(from.server_desc());
    }
    if (from.has_cur_count()) {
      set_cur_count(from.cur_count());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbServerMgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbServerMgr::CopyFrom(const dbServerMgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbServerMgr::IsInitialized() const {

  for (int i = 0; i < facade_size(); i++) {
    if (!this->facade(i).IsInitialized()) return false;
  }
  return true;
}

void dbServerMgr::Swap(dbServerMgr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(contract_, other->contract_);
    std::swap(machine_addr_, other->machine_addr_);
    std::swap(ip_, other->ip_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(server_desc_, other->server_desc_);
    std::swap(cur_count_, other->cur_count_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(last_logout_time_, other->last_logout_time_);
    logout_time_.Swap(&other->logout_time_);
    desc_.Swap(&other->desc_);
    pair_.Swap(&other->pair_);
    facade_.Swap(&other->facade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbServerMgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbServerMgr_descriptor_;
  metadata.reflection = dbServerMgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRegisterNum_RoleDBData::kNumFieldNumber;
#endif  // !_MSC_VER

GetRegisterNum_RoleDBData::GetRegisterNum_RoleDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRegisterNum_RoleDBData::InitAsDefaultInstance() {
}

GetRegisterNum_RoleDBData::GetRegisterNum_RoleDBData(const GetRegisterNum_RoleDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRegisterNum_RoleDBData::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRegisterNum_RoleDBData::~GetRegisterNum_RoleDBData() {
  SharedDtor();
}

void GetRegisterNum_RoleDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRegisterNum_RoleDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRegisterNum_RoleDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRegisterNum_RoleDBData_descriptor_;
}

const GetRegisterNum_RoleDBData& GetRegisterNum_RoleDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy2_2eproto();
  return *default_instance_;
}

GetRegisterNum_RoleDBData* GetRegisterNum_RoleDBData::default_instance_ = NULL;

GetRegisterNum_RoleDBData* GetRegisterNum_RoleDBData::New() const {
  return new GetRegisterNum_RoleDBData;
}

void GetRegisterNum_RoleDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRegisterNum_RoleDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRegisterNum_RoleDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRegisterNum_RoleDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRegisterNum_RoleDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRegisterNum_RoleDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRegisterNum_RoleDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRegisterNum_RoleDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRegisterNum_RoleDBData::MergeFrom(const GetRegisterNum_RoleDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRegisterNum_RoleDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegisterNum_RoleDBData::CopyFrom(const GetRegisterNum_RoleDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegisterNum_RoleDBData::IsInitialized() const {

  return true;
}

void GetRegisterNum_RoleDBData::Swap(GetRegisterNum_RoleDBData* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRegisterNum_RoleDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRegisterNum_RoleDBData_descriptor_;
  metadata.reflection = GetRegisterNum_RoleDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBSnsSimple::kCidFieldNumber;
const int RoleDBSnsSimple::kZidFieldNumber;
const int RoleDBSnsSimple::kUidFieldNumber;
const int RoleDBSnsSimple::kBaseFieldNumber;
#endif  // !_MSC_VER

RoleDBSnsSimple::RoleDBSnsSimple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBSnsSimple::InitAsDefaultInstance() {
  base_ = const_cast< ::proto_ff::RoleDBBaseData*>(&::proto_ff::RoleDBBaseData::default_instance());
}

RoleDBSnsSimple::RoleDBSnsSimple(const RoleDBSnsSimple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBSnsSimple::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  uid_ = 0u;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBSnsSimple::~RoleDBSnsSimple() {
  SharedDtor();
}

void RoleDBSnsSimple::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void RoleDBSnsSimple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBSnsSimple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBSnsSimple_descriptor_;
}

const RoleDBSnsSimple& RoleDBSnsSimple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy2_2eproto();
  return *default_instance_;
}

RoleDBSnsSimple* RoleDBSnsSimple::default_instance_ = NULL;

RoleDBSnsSimple* RoleDBSnsSimple::New() const {
  return new RoleDBSnsSimple;
}

void RoleDBSnsSimple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    uid_ = 0u;
    if (has_base()) {
      if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBSnsSimple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_base;
        break;
      }

      // optional .proto_ff.RoleDBBaseData base = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBSnsSimple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // optional .proto_ff.RoleDBBaseData base = 4;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBSnsSimple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // optional .proto_ff.RoleDBBaseData base = 4;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBSnsSimple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .proto_ff.RoleDBBaseData base = 4;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBSnsSimple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBSnsSimple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBSnsSimple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBSnsSimple::MergeFrom(const RoleDBSnsSimple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_base()) {
      mutable_base()->::proto_ff::RoleDBBaseData::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBSnsSimple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBSnsSimple::CopyFrom(const RoleDBSnsSimple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBSnsSimple::IsInitialized() const {

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void RoleDBSnsSimple::Swap(RoleDBSnsSimple* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(uid_, other->uid_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBSnsSimple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBSnsSimple_descriptor_;
  metadata.reflection = RoleDBSnsSimple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MyFriendInfo::MyFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyFriendInfo::InitAsDefaultInstance() {
}

MyFriendInfo::MyFriendInfo(const MyFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyFriendInfo::~MyFriendInfo() {
  SharedDtor();
}

void MyFriendInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyFriendInfo_descriptor_;
}

const MyFriendInfo& MyFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy2_2eproto();
  return *default_instance_;
}

MyFriendInfo* MyFriendInfo::default_instance_ = NULL;

MyFriendInfo* MyFriendInfo::New() const {
  return new MyFriendInfo;
}

void MyFriendInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MyFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyFriendInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyFriendInfo::MergeFrom(const MyFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyFriendInfo::CopyFrom(const MyFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyFriendInfo::IsInitialized() const {

  return true;
}

void MyFriendInfo::Swap(MyFriendInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyFriendInfo_descriptor_;
  metadata.reflection = MyFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBSnsDetail::kCidFieldNumber;
const int RoleDBSnsDetail::kFriendInfoFieldNumber;
#endif  // !_MSC_VER

RoleDBSnsDetail::RoleDBSnsDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBSnsDetail::InitAsDefaultInstance() {
  friend_info_ = const_cast< ::proto_ff::MyFriendInfo*>(&::proto_ff::MyFriendInfo::default_instance());
}

RoleDBSnsDetail::RoleDBSnsDetail(const RoleDBSnsDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBSnsDetail::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  friend_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBSnsDetail::~RoleDBSnsDetail() {
  SharedDtor();
}

void RoleDBSnsDetail::SharedDtor() {
  if (this != default_instance_) {
    delete friend_info_;
  }
}

void RoleDBSnsDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBSnsDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBSnsDetail_descriptor_;
}

const RoleDBSnsDetail& RoleDBSnsDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy2_2eproto();
  return *default_instance_;
}

RoleDBSnsDetail* RoleDBSnsDetail::default_instance_ = NULL;

RoleDBSnsDetail* RoleDBSnsDetail::New() const {
  return new RoleDBSnsDetail;
}

void RoleDBSnsDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_friend_info()) {
      if (friend_info_ != NULL) friend_info_->::proto_ff::MyFriendInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBSnsDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friend_info;
        break;
      }

      // optional .proto_ff.MyFriendInfo friend_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBSnsDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional .proto_ff.MyFriendInfo friend_info = 2;
  if (has_friend_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friend_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBSnsDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional .proto_ff.MyFriendInfo friend_info = 2;
  if (has_friend_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friend_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBSnsDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional .proto_ff.MyFriendInfo friend_info = 2;
    if (has_friend_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBSnsDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBSnsDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBSnsDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBSnsDetail::MergeFrom(const RoleDBSnsDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_friend_info()) {
      mutable_friend_info()->::proto_ff::MyFriendInfo::MergeFrom(from.friend_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBSnsDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBSnsDetail::CopyFrom(const RoleDBSnsDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBSnsDetail::IsInitialized() const {

  return true;
}

void RoleDBSnsDetail::Swap(RoleDBSnsDetail* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(friend_info_, other->friend_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBSnsDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBSnsDetail_descriptor_;
  metadata.reflection = RoleDBSnsDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleEnterSceneData::kCidFieldNumber;
const int RoleEnterSceneData::kZidFieldNumber;
const int RoleEnterSceneData::kUidFieldNumber;
const int RoleEnterSceneData::kBaseFieldNumber;
const int RoleEnterSceneData::kAttrFieldNumber;
#endif  // !_MSC_VER

RoleEnterSceneData::RoleEnterSceneData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleEnterSceneData::InitAsDefaultInstance() {
  base_ = const_cast< ::proto_ff::RoleDBBaseData*>(&::proto_ff::RoleDBBaseData::default_instance());
  attr_ = const_cast< ::proto_ff::AttrDBData*>(&::proto_ff::AttrDBData::default_instance());
}

RoleEnterSceneData::RoleEnterSceneData(const RoleEnterSceneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleEnterSceneData::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  uid_ = 0u;
  base_ = NULL;
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleEnterSceneData::~RoleEnterSceneData() {
  SharedDtor();
}

void RoleEnterSceneData::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete attr_;
  }
}

void RoleEnterSceneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleEnterSceneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleEnterSceneData_descriptor_;
}

const RoleEnterSceneData& RoleEnterSceneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy2_2eproto();
  return *default_instance_;
}

RoleEnterSceneData* RoleEnterSceneData::default_instance_ = NULL;

RoleEnterSceneData* RoleEnterSceneData::New() const {
  return new RoleEnterSceneData;
}

void RoleEnterSceneData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    uid_ = 0u;
    if (has_base()) {
      if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
    }
    if (has_attr()) {
      if (attr_ != NULL) attr_->::proto_ff::AttrDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleEnterSceneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_base;
        break;
      }

      // optional .proto_ff.RoleDBBaseData base = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_attr;
        break;
      }

      // optional .proto_ff.AttrDBData attr = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleEnterSceneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // optional .proto_ff.RoleDBBaseData base = 10;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->base(), output);
  }

  // optional .proto_ff.AttrDBData attr = 11;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleEnterSceneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // optional .proto_ff.RoleDBBaseData base = 10;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->base(), target);
  }

  // optional .proto_ff.AttrDBData attr = 11;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleEnterSceneData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .proto_ff.RoleDBBaseData base = 10;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .proto_ff.AttrDBData attr = 11;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleEnterSceneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleEnterSceneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleEnterSceneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleEnterSceneData::MergeFrom(const RoleEnterSceneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_base()) {
      mutable_base()->::proto_ff::RoleDBBaseData::MergeFrom(from.base());
    }
    if (from.has_attr()) {
      mutable_attr()->::proto_ff::AttrDBData::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleEnterSceneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleEnterSceneData::CopyFrom(const RoleEnterSceneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleEnterSceneData::IsInitialized() const {

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  return true;
}

void RoleEnterSceneData::Swap(RoleEnterSceneData* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(uid_, other->uid_);
    std::swap(base_, other->base_);
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleEnterSceneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleEnterSceneData_descriptor_;
  metadata.reflection = RoleEnterSceneData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBName::kNameFieldNumber;
#endif  // !_MSC_VER

RoleDBName::RoleDBName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBName::InitAsDefaultInstance() {
}

RoleDBName::RoleDBName(const RoleDBName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBName::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBName::~RoleDBName() {
  SharedDtor();
}

void RoleDBName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RoleDBName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBName_descriptor_;
}

const RoleDBName& RoleDBName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy2_2eproto();
  return *default_instance_;
}

RoleDBName* RoleDBName::default_instance_ = NULL;

RoleDBName* RoleDBName::New() const {
  return new RoleDBName;
}

void RoleDBName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBName::MergeFrom(const RoleDBName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBName::CopyFrom(const RoleDBName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBName::IsInitialized() const {

  return true;
}

void RoleDBName::Swap(RoleDBName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBName_descriptor_;
  metadata.reflection = RoleDBName_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
