// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Charge.proto

#ifndef PROTOBUF_Charge_2eproto__INCLUDED
#define PROTOBUF_Charge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Com.pb.h"
#include "ComDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Charge_2eproto();
void protobuf_AssignDesc_Charge_2eproto();
void protobuf_ShutdownFile_Charge_2eproto();

class ChargeFirstTotalProto;
class Charge_FirstInfoReq;
class Charge_FirstInfoRsp;
class Charge_FirstFetchReq;
class Charge_FirstFetchRsp;
class Charge_FirstTotalRsp;
class Charge_OpenTotalInfoReq;
class Charge_OpenTotalInfoRsp;
class Charge_OpenTotalFetchReq;
class Charge_OpenTotalFetchRsp;
class Charge_UpdateOpenTotalRsp;

// ===================================================================

class ChargeFirstTotalProto : public ::google::protobuf::Message {
 public:
  ChargeFirstTotalProto();
  virtual ~ChargeFirstTotalProto();

  ChargeFirstTotalProto(const ChargeFirstTotalProto& from);

  inline ChargeFirstTotalProto& operator=(const ChargeFirstTotalProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChargeFirstTotalProto& default_instance();

  void Swap(ChargeFirstTotalProto* other);

  // implements Message ----------------------------------------------

  ChargeFirstTotalProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChargeFirstTotalProto& from);
  void MergeFrom(const ChargeFirstTotalProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 total = 2;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 2;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.ChargeFirstTotalProto)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 total_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Charge_2eproto();
  friend void protobuf_AssignDesc_Charge_2eproto();
  friend void protobuf_ShutdownFile_Charge_2eproto();

  void InitAsDefaultInstance();
  static ChargeFirstTotalProto* default_instance_;
};
// -------------------------------------------------------------------

class Charge_FirstInfoReq : public ::google::protobuf::Message {
 public:
  Charge_FirstInfoReq();
  virtual ~Charge_FirstInfoReq();

  Charge_FirstInfoReq(const Charge_FirstInfoReq& from);

  inline Charge_FirstInfoReq& operator=(const Charge_FirstInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Charge_FirstInfoReq& default_instance();

  void Swap(Charge_FirstInfoReq* other);

  // implements Message ----------------------------------------------

  Charge_FirstInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Charge_FirstInfoReq& from);
  void MergeFrom(const Charge_FirstInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Charge_FirstInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Charge_2eproto();
  friend void protobuf_AssignDesc_Charge_2eproto();
  friend void protobuf_ShutdownFile_Charge_2eproto();

  void InitAsDefaultInstance();
  static Charge_FirstInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class Charge_FirstInfoRsp : public ::google::protobuf::Message {
 public:
  Charge_FirstInfoRsp();
  virtual ~Charge_FirstInfoRsp();

  Charge_FirstInfoRsp(const Charge_FirstInfoRsp& from);

  inline Charge_FirstInfoRsp& operator=(const Charge_FirstInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Charge_FirstInfoRsp& default_instance();

  void Swap(Charge_FirstInfoRsp* other);

  // implements Message ----------------------------------------------

  Charge_FirstInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Charge_FirstInfoRsp& from);
  void MergeFrom(const Charge_FirstInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 first_rmb = 1;
  inline bool has_first_rmb() const;
  inline void clear_first_rmb();
  static const int kFirstRmbFieldNumber = 1;
  inline ::google::protobuf::int32 first_rmb() const;
  inline void set_first_rmb(::google::protobuf::int32 value);

  // repeated int32 first_fetch = 2;
  inline int first_fetch_size() const;
  inline void clear_first_fetch();
  static const int kFirstFetchFieldNumber = 2;
  inline ::google::protobuf::int32 first_fetch(int index) const;
  inline void set_first_fetch(int index, ::google::protobuf::int32 value);
  inline void add_first_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      first_fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_first_fetch();

  // optional int32 dia_rmb = 3;
  inline bool has_dia_rmb() const;
  inline void clear_dia_rmb();
  static const int kDiaRmbFieldNumber = 3;
  inline ::google::protobuf::int32 dia_rmb() const;
  inline void set_dia_rmb(::google::protobuf::int32 value);

  // repeated int32 dia_fetch = 4;
  inline int dia_fetch_size() const;
  inline void clear_dia_fetch();
  static const int kDiaFetchFieldNumber = 4;
  inline ::google::protobuf::int32 dia_fetch(int index) const;
  inline void set_dia_fetch(int index, ::google::protobuf::int32 value);
  inline void add_dia_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dia_fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dia_fetch();

  // optional int32 star_rmb = 5;
  inline bool has_star_rmb() const;
  inline void clear_star_rmb();
  static const int kStarRmbFieldNumber = 5;
  inline ::google::protobuf::int32 star_rmb() const;
  inline void set_star_rmb(::google::protobuf::int32 value);

  // repeated int32 star_fetch = 6;
  inline int star_fetch_size() const;
  inline void clear_star_fetch();
  static const int kStarFetchFieldNumber = 6;
  inline ::google::protobuf::int32 star_fetch(int index) const;
  inline void set_star_fetch(int index, ::google::protobuf::int32 value);
  inline void add_star_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      star_fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_star_fetch();

  // optional int32 king_rmb = 7;
  inline bool has_king_rmb() const;
  inline void clear_king_rmb();
  static const int kKingRmbFieldNumber = 7;
  inline ::google::protobuf::int32 king_rmb() const;
  inline void set_king_rmb(::google::protobuf::int32 value);

  // repeated int32 king_fetch = 8;
  inline int king_fetch_size() const;
  inline void clear_king_fetch();
  static const int kKingFetchFieldNumber = 8;
  inline ::google::protobuf::int32 king_fetch(int index) const;
  inline void set_king_fetch(int index, ::google::protobuf::int32 value);
  inline void add_king_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      king_fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_king_fetch();

  // optional int32 second_rmb = 9;
  inline bool has_second_rmb() const;
  inline void clear_second_rmb();
  static const int kSecondRmbFieldNumber = 9;
  inline ::google::protobuf::int32 second_rmb() const;
  inline void set_second_rmb(::google::protobuf::int32 value);

  // repeated int32 second_fetch = 10;
  inline int second_fetch_size() const;
  inline void clear_second_fetch();
  static const int kSecondFetchFieldNumber = 10;
  inline ::google::protobuf::int32 second_fetch(int index) const;
  inline void set_second_fetch(int index, ::google::protobuf::int32 value);
  inline void add_second_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      second_fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_second_fetch();

  // @@protoc_insertion_point(class_scope:proto_ff.Charge_FirstInfoRsp)
 private:
  inline void set_has_first_rmb();
  inline void clear_has_first_rmb();
  inline void set_has_dia_rmb();
  inline void clear_has_dia_rmb();
  inline void set_has_star_rmb();
  inline void clear_has_star_rmb();
  inline void set_has_king_rmb();
  inline void clear_has_king_rmb();
  inline void set_has_second_rmb();
  inline void clear_has_second_rmb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > first_fetch_;
  ::google::protobuf::int32 first_rmb_;
  ::google::protobuf::int32 dia_rmb_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dia_fetch_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > star_fetch_;
  ::google::protobuf::int32 star_rmb_;
  ::google::protobuf::int32 king_rmb_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > king_fetch_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > second_fetch_;
  ::google::protobuf::int32 second_rmb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Charge_2eproto();
  friend void protobuf_AssignDesc_Charge_2eproto();
  friend void protobuf_ShutdownFile_Charge_2eproto();

  void InitAsDefaultInstance();
  static Charge_FirstInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Charge_FirstFetchReq : public ::google::protobuf::Message {
 public:
  Charge_FirstFetchReq();
  virtual ~Charge_FirstFetchReq();

  Charge_FirstFetchReq(const Charge_FirstFetchReq& from);

  inline Charge_FirstFetchReq& operator=(const Charge_FirstFetchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Charge_FirstFetchReq& default_instance();

  void Swap(Charge_FirstFetchReq* other);

  // implements Message ----------------------------------------------

  Charge_FirstFetchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Charge_FirstFetchReq& from);
  void MergeFrom(const Charge_FirstFetchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 one_key = 3;
  inline bool has_one_key() const;
  inline void clear_one_key();
  static const int kOneKeyFieldNumber = 3;
  inline ::google::protobuf::int32 one_key() const;
  inline void set_one_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Charge_FirstFetchReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_one_key();
  inline void clear_has_one_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 one_key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Charge_2eproto();
  friend void protobuf_AssignDesc_Charge_2eproto();
  friend void protobuf_ShutdownFile_Charge_2eproto();

  void InitAsDefaultInstance();
  static Charge_FirstFetchReq* default_instance_;
};
// -------------------------------------------------------------------

class Charge_FirstFetchRsp : public ::google::protobuf::Message {
 public:
  Charge_FirstFetchRsp();
  virtual ~Charge_FirstFetchRsp();

  Charge_FirstFetchRsp(const Charge_FirstFetchRsp& from);

  inline Charge_FirstFetchRsp& operator=(const Charge_FirstFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Charge_FirstFetchRsp& default_instance();

  void Swap(Charge_FirstFetchRsp* other);

  // implements Message ----------------------------------------------

  Charge_FirstFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Charge_FirstFetchRsp& from);
  void MergeFrom(const Charge_FirstFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated int32 id_lst = 3;
  inline int id_lst_size() const;
  inline void clear_id_lst();
  static const int kIdLstFieldNumber = 3;
  inline ::google::protobuf::int32 id_lst(int index) const;
  inline void set_id_lst(int index, ::google::protobuf::int32 value);
  inline void add_id_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Charge_FirstFetchRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Charge_2eproto();
  friend void protobuf_AssignDesc_Charge_2eproto();
  friend void protobuf_ShutdownFile_Charge_2eproto();

  void InitAsDefaultInstance();
  static Charge_FirstFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Charge_FirstTotalRsp : public ::google::protobuf::Message {
 public:
  Charge_FirstTotalRsp();
  virtual ~Charge_FirstTotalRsp();

  Charge_FirstTotalRsp(const Charge_FirstTotalRsp& from);

  inline Charge_FirstTotalRsp& operator=(const Charge_FirstTotalRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Charge_FirstTotalRsp& default_instance();

  void Swap(Charge_FirstTotalRsp* other);

  // implements Message ----------------------------------------------

  Charge_FirstTotalRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Charge_FirstTotalRsp& from);
  void MergeFrom(const Charge_FirstTotalRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ChargeFirstTotalProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::ChargeFirstTotalProto& info(int index) const;
  inline ::proto_ff::ChargeFirstTotalProto* mutable_info(int index);
  inline ::proto_ff::ChargeFirstTotalProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ChargeFirstTotalProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ChargeFirstTotalProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.Charge_FirstTotalRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ChargeFirstTotalProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Charge_2eproto();
  friend void protobuf_AssignDesc_Charge_2eproto();
  friend void protobuf_ShutdownFile_Charge_2eproto();

  void InitAsDefaultInstance();
  static Charge_FirstTotalRsp* default_instance_;
};
// -------------------------------------------------------------------

class Charge_OpenTotalInfoReq : public ::google::protobuf::Message {
 public:
  Charge_OpenTotalInfoReq();
  virtual ~Charge_OpenTotalInfoReq();

  Charge_OpenTotalInfoReq(const Charge_OpenTotalInfoReq& from);

  inline Charge_OpenTotalInfoReq& operator=(const Charge_OpenTotalInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Charge_OpenTotalInfoReq& default_instance();

  void Swap(Charge_OpenTotalInfoReq* other);

  // implements Message ----------------------------------------------

  Charge_OpenTotalInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Charge_OpenTotalInfoReq& from);
  void MergeFrom(const Charge_OpenTotalInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Charge_OpenTotalInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Charge_2eproto();
  friend void protobuf_AssignDesc_Charge_2eproto();
  friend void protobuf_ShutdownFile_Charge_2eproto();

  void InitAsDefaultInstance();
  static Charge_OpenTotalInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class Charge_OpenTotalInfoRsp : public ::google::protobuf::Message {
 public:
  Charge_OpenTotalInfoRsp();
  virtual ~Charge_OpenTotalInfoRsp();

  Charge_OpenTotalInfoRsp(const Charge_OpenTotalInfoRsp& from);

  inline Charge_OpenTotalInfoRsp& operator=(const Charge_OpenTotalInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Charge_OpenTotalInfoRsp& default_instance();

  void Swap(Charge_OpenTotalInfoRsp* other);

  // implements Message ----------------------------------------------

  Charge_OpenTotalInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Charge_OpenTotalInfoRsp& from);
  void MergeFrom(const Charge_OpenTotalInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 total = 1;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 1;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // repeated int32 fetch = 2;
  inline int fetch_size() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 2;
  inline ::google::protobuf::int32 fetch(int index) const;
  inline void set_fetch(int index, ::google::protobuf::int32 value);
  inline void add_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fetch();

  // @@protoc_insertion_point(class_scope:proto_ff.Charge_OpenTotalInfoRsp)
 private:
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fetch_;
  ::google::protobuf::int32 total_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Charge_2eproto();
  friend void protobuf_AssignDesc_Charge_2eproto();
  friend void protobuf_ShutdownFile_Charge_2eproto();

  void InitAsDefaultInstance();
  static Charge_OpenTotalInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Charge_OpenTotalFetchReq : public ::google::protobuf::Message {
 public:
  Charge_OpenTotalFetchReq();
  virtual ~Charge_OpenTotalFetchReq();

  Charge_OpenTotalFetchReq(const Charge_OpenTotalFetchReq& from);

  inline Charge_OpenTotalFetchReq& operator=(const Charge_OpenTotalFetchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Charge_OpenTotalFetchReq& default_instance();

  void Swap(Charge_OpenTotalFetchReq* other);

  // implements Message ----------------------------------------------

  Charge_OpenTotalFetchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Charge_OpenTotalFetchReq& from);
  void MergeFrom(const Charge_OpenTotalFetchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Charge_OpenTotalFetchReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Charge_2eproto();
  friend void protobuf_AssignDesc_Charge_2eproto();
  friend void protobuf_ShutdownFile_Charge_2eproto();

  void InitAsDefaultInstance();
  static Charge_OpenTotalFetchReq* default_instance_;
};
// -------------------------------------------------------------------

class Charge_OpenTotalFetchRsp : public ::google::protobuf::Message {
 public:
  Charge_OpenTotalFetchRsp();
  virtual ~Charge_OpenTotalFetchRsp();

  Charge_OpenTotalFetchRsp(const Charge_OpenTotalFetchRsp& from);

  inline Charge_OpenTotalFetchRsp& operator=(const Charge_OpenTotalFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Charge_OpenTotalFetchRsp& default_instance();

  void Swap(Charge_OpenTotalFetchRsp* other);

  // implements Message ----------------------------------------------

  Charge_OpenTotalFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Charge_OpenTotalFetchRsp& from);
  void MergeFrom(const Charge_OpenTotalFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Charge_OpenTotalFetchRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Charge_2eproto();
  friend void protobuf_AssignDesc_Charge_2eproto();
  friend void protobuf_ShutdownFile_Charge_2eproto();

  void InitAsDefaultInstance();
  static Charge_OpenTotalFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Charge_UpdateOpenTotalRsp : public ::google::protobuf::Message {
 public:
  Charge_UpdateOpenTotalRsp();
  virtual ~Charge_UpdateOpenTotalRsp();

  Charge_UpdateOpenTotalRsp(const Charge_UpdateOpenTotalRsp& from);

  inline Charge_UpdateOpenTotalRsp& operator=(const Charge_UpdateOpenTotalRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Charge_UpdateOpenTotalRsp& default_instance();

  void Swap(Charge_UpdateOpenTotalRsp* other);

  // implements Message ----------------------------------------------

  Charge_UpdateOpenTotalRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Charge_UpdateOpenTotalRsp& from);
  void MergeFrom(const Charge_UpdateOpenTotalRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 total = 1;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 1;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Charge_UpdateOpenTotalRsp)
 private:
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 total_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Charge_2eproto();
  friend void protobuf_AssignDesc_Charge_2eproto();
  friend void protobuf_ShutdownFile_Charge_2eproto();

  void InitAsDefaultInstance();
  static Charge_UpdateOpenTotalRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// ChargeFirstTotalProto

// optional int32 type = 1;
inline bool ChargeFirstTotalProto::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChargeFirstTotalProto::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChargeFirstTotalProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChargeFirstTotalProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ChargeFirstTotalProto::type() const {
  return type_;
}
inline void ChargeFirstTotalProto::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 total = 2;
inline bool ChargeFirstTotalProto::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChargeFirstTotalProto::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChargeFirstTotalProto::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChargeFirstTotalProto::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 ChargeFirstTotalProto::total() const {
  return total_;
}
inline void ChargeFirstTotalProto::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// -------------------------------------------------------------------

// Charge_FirstInfoReq

// -------------------------------------------------------------------

// Charge_FirstInfoRsp

// optional int32 first_rmb = 1;
inline bool Charge_FirstInfoRsp::has_first_rmb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Charge_FirstInfoRsp::set_has_first_rmb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Charge_FirstInfoRsp::clear_has_first_rmb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Charge_FirstInfoRsp::clear_first_rmb() {
  first_rmb_ = 0;
  clear_has_first_rmb();
}
inline ::google::protobuf::int32 Charge_FirstInfoRsp::first_rmb() const {
  return first_rmb_;
}
inline void Charge_FirstInfoRsp::set_first_rmb(::google::protobuf::int32 value) {
  set_has_first_rmb();
  first_rmb_ = value;
}

// repeated int32 first_fetch = 2;
inline int Charge_FirstInfoRsp::first_fetch_size() const {
  return first_fetch_.size();
}
inline void Charge_FirstInfoRsp::clear_first_fetch() {
  first_fetch_.Clear();
}
inline ::google::protobuf::int32 Charge_FirstInfoRsp::first_fetch(int index) const {
  return first_fetch_.Get(index);
}
inline void Charge_FirstInfoRsp::set_first_fetch(int index, ::google::protobuf::int32 value) {
  first_fetch_.Set(index, value);
}
inline void Charge_FirstInfoRsp::add_first_fetch(::google::protobuf::int32 value) {
  first_fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Charge_FirstInfoRsp::first_fetch() const {
  return first_fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Charge_FirstInfoRsp::mutable_first_fetch() {
  return &first_fetch_;
}

// optional int32 dia_rmb = 3;
inline bool Charge_FirstInfoRsp::has_dia_rmb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Charge_FirstInfoRsp::set_has_dia_rmb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Charge_FirstInfoRsp::clear_has_dia_rmb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Charge_FirstInfoRsp::clear_dia_rmb() {
  dia_rmb_ = 0;
  clear_has_dia_rmb();
}
inline ::google::protobuf::int32 Charge_FirstInfoRsp::dia_rmb() const {
  return dia_rmb_;
}
inline void Charge_FirstInfoRsp::set_dia_rmb(::google::protobuf::int32 value) {
  set_has_dia_rmb();
  dia_rmb_ = value;
}

// repeated int32 dia_fetch = 4;
inline int Charge_FirstInfoRsp::dia_fetch_size() const {
  return dia_fetch_.size();
}
inline void Charge_FirstInfoRsp::clear_dia_fetch() {
  dia_fetch_.Clear();
}
inline ::google::protobuf::int32 Charge_FirstInfoRsp::dia_fetch(int index) const {
  return dia_fetch_.Get(index);
}
inline void Charge_FirstInfoRsp::set_dia_fetch(int index, ::google::protobuf::int32 value) {
  dia_fetch_.Set(index, value);
}
inline void Charge_FirstInfoRsp::add_dia_fetch(::google::protobuf::int32 value) {
  dia_fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Charge_FirstInfoRsp::dia_fetch() const {
  return dia_fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Charge_FirstInfoRsp::mutable_dia_fetch() {
  return &dia_fetch_;
}

// optional int32 star_rmb = 5;
inline bool Charge_FirstInfoRsp::has_star_rmb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Charge_FirstInfoRsp::set_has_star_rmb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Charge_FirstInfoRsp::clear_has_star_rmb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Charge_FirstInfoRsp::clear_star_rmb() {
  star_rmb_ = 0;
  clear_has_star_rmb();
}
inline ::google::protobuf::int32 Charge_FirstInfoRsp::star_rmb() const {
  return star_rmb_;
}
inline void Charge_FirstInfoRsp::set_star_rmb(::google::protobuf::int32 value) {
  set_has_star_rmb();
  star_rmb_ = value;
}

// repeated int32 star_fetch = 6;
inline int Charge_FirstInfoRsp::star_fetch_size() const {
  return star_fetch_.size();
}
inline void Charge_FirstInfoRsp::clear_star_fetch() {
  star_fetch_.Clear();
}
inline ::google::protobuf::int32 Charge_FirstInfoRsp::star_fetch(int index) const {
  return star_fetch_.Get(index);
}
inline void Charge_FirstInfoRsp::set_star_fetch(int index, ::google::protobuf::int32 value) {
  star_fetch_.Set(index, value);
}
inline void Charge_FirstInfoRsp::add_star_fetch(::google::protobuf::int32 value) {
  star_fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Charge_FirstInfoRsp::star_fetch() const {
  return star_fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Charge_FirstInfoRsp::mutable_star_fetch() {
  return &star_fetch_;
}

// optional int32 king_rmb = 7;
inline bool Charge_FirstInfoRsp::has_king_rmb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Charge_FirstInfoRsp::set_has_king_rmb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Charge_FirstInfoRsp::clear_has_king_rmb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Charge_FirstInfoRsp::clear_king_rmb() {
  king_rmb_ = 0;
  clear_has_king_rmb();
}
inline ::google::protobuf::int32 Charge_FirstInfoRsp::king_rmb() const {
  return king_rmb_;
}
inline void Charge_FirstInfoRsp::set_king_rmb(::google::protobuf::int32 value) {
  set_has_king_rmb();
  king_rmb_ = value;
}

// repeated int32 king_fetch = 8;
inline int Charge_FirstInfoRsp::king_fetch_size() const {
  return king_fetch_.size();
}
inline void Charge_FirstInfoRsp::clear_king_fetch() {
  king_fetch_.Clear();
}
inline ::google::protobuf::int32 Charge_FirstInfoRsp::king_fetch(int index) const {
  return king_fetch_.Get(index);
}
inline void Charge_FirstInfoRsp::set_king_fetch(int index, ::google::protobuf::int32 value) {
  king_fetch_.Set(index, value);
}
inline void Charge_FirstInfoRsp::add_king_fetch(::google::protobuf::int32 value) {
  king_fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Charge_FirstInfoRsp::king_fetch() const {
  return king_fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Charge_FirstInfoRsp::mutable_king_fetch() {
  return &king_fetch_;
}

// optional int32 second_rmb = 9;
inline bool Charge_FirstInfoRsp::has_second_rmb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Charge_FirstInfoRsp::set_has_second_rmb() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Charge_FirstInfoRsp::clear_has_second_rmb() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Charge_FirstInfoRsp::clear_second_rmb() {
  second_rmb_ = 0;
  clear_has_second_rmb();
}
inline ::google::protobuf::int32 Charge_FirstInfoRsp::second_rmb() const {
  return second_rmb_;
}
inline void Charge_FirstInfoRsp::set_second_rmb(::google::protobuf::int32 value) {
  set_has_second_rmb();
  second_rmb_ = value;
}

// repeated int32 second_fetch = 10;
inline int Charge_FirstInfoRsp::second_fetch_size() const {
  return second_fetch_.size();
}
inline void Charge_FirstInfoRsp::clear_second_fetch() {
  second_fetch_.Clear();
}
inline ::google::protobuf::int32 Charge_FirstInfoRsp::second_fetch(int index) const {
  return second_fetch_.Get(index);
}
inline void Charge_FirstInfoRsp::set_second_fetch(int index, ::google::protobuf::int32 value) {
  second_fetch_.Set(index, value);
}
inline void Charge_FirstInfoRsp::add_second_fetch(::google::protobuf::int32 value) {
  second_fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Charge_FirstInfoRsp::second_fetch() const {
  return second_fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Charge_FirstInfoRsp::mutable_second_fetch() {
  return &second_fetch_;
}

// -------------------------------------------------------------------

// Charge_FirstFetchReq

// optional int32 type = 1;
inline bool Charge_FirstFetchReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Charge_FirstFetchReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Charge_FirstFetchReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Charge_FirstFetchReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Charge_FirstFetchReq::type() const {
  return type_;
}
inline void Charge_FirstFetchReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool Charge_FirstFetchReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Charge_FirstFetchReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Charge_FirstFetchReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Charge_FirstFetchReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Charge_FirstFetchReq::id() const {
  return id_;
}
inline void Charge_FirstFetchReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 one_key = 3;
inline bool Charge_FirstFetchReq::has_one_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Charge_FirstFetchReq::set_has_one_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Charge_FirstFetchReq::clear_has_one_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Charge_FirstFetchReq::clear_one_key() {
  one_key_ = 0;
  clear_has_one_key();
}
inline ::google::protobuf::int32 Charge_FirstFetchReq::one_key() const {
  return one_key_;
}
inline void Charge_FirstFetchReq::set_one_key(::google::protobuf::int32 value) {
  set_has_one_key();
  one_key_ = value;
}

// -------------------------------------------------------------------

// Charge_FirstFetchRsp

// required int32 ret = 1;
inline bool Charge_FirstFetchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Charge_FirstFetchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Charge_FirstFetchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Charge_FirstFetchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Charge_FirstFetchRsp::ret() const {
  return ret_;
}
inline void Charge_FirstFetchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 type = 2;
inline bool Charge_FirstFetchRsp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Charge_FirstFetchRsp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Charge_FirstFetchRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Charge_FirstFetchRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Charge_FirstFetchRsp::type() const {
  return type_;
}
inline void Charge_FirstFetchRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated int32 id_lst = 3;
inline int Charge_FirstFetchRsp::id_lst_size() const {
  return id_lst_.size();
}
inline void Charge_FirstFetchRsp::clear_id_lst() {
  id_lst_.Clear();
}
inline ::google::protobuf::int32 Charge_FirstFetchRsp::id_lst(int index) const {
  return id_lst_.Get(index);
}
inline void Charge_FirstFetchRsp::set_id_lst(int index, ::google::protobuf::int32 value) {
  id_lst_.Set(index, value);
}
inline void Charge_FirstFetchRsp::add_id_lst(::google::protobuf::int32 value) {
  id_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Charge_FirstFetchRsp::id_lst() const {
  return id_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Charge_FirstFetchRsp::mutable_id_lst() {
  return &id_lst_;
}

// -------------------------------------------------------------------

// Charge_FirstTotalRsp

// repeated .proto_ff.ChargeFirstTotalProto info = 1;
inline int Charge_FirstTotalRsp::info_size() const {
  return info_.size();
}
inline void Charge_FirstTotalRsp::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::ChargeFirstTotalProto& Charge_FirstTotalRsp::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::ChargeFirstTotalProto* Charge_FirstTotalRsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::ChargeFirstTotalProto* Charge_FirstTotalRsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ChargeFirstTotalProto >&
Charge_FirstTotalRsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ChargeFirstTotalProto >*
Charge_FirstTotalRsp::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// Charge_OpenTotalInfoReq

// -------------------------------------------------------------------

// Charge_OpenTotalInfoRsp

// optional int32 total = 1;
inline bool Charge_OpenTotalInfoRsp::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Charge_OpenTotalInfoRsp::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Charge_OpenTotalInfoRsp::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Charge_OpenTotalInfoRsp::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 Charge_OpenTotalInfoRsp::total() const {
  return total_;
}
inline void Charge_OpenTotalInfoRsp::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// repeated int32 fetch = 2;
inline int Charge_OpenTotalInfoRsp::fetch_size() const {
  return fetch_.size();
}
inline void Charge_OpenTotalInfoRsp::clear_fetch() {
  fetch_.Clear();
}
inline ::google::protobuf::int32 Charge_OpenTotalInfoRsp::fetch(int index) const {
  return fetch_.Get(index);
}
inline void Charge_OpenTotalInfoRsp::set_fetch(int index, ::google::protobuf::int32 value) {
  fetch_.Set(index, value);
}
inline void Charge_OpenTotalInfoRsp::add_fetch(::google::protobuf::int32 value) {
  fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Charge_OpenTotalInfoRsp::fetch() const {
  return fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Charge_OpenTotalInfoRsp::mutable_fetch() {
  return &fetch_;
}

// -------------------------------------------------------------------

// Charge_OpenTotalFetchReq

// optional int32 id = 1;
inline bool Charge_OpenTotalFetchReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Charge_OpenTotalFetchReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Charge_OpenTotalFetchReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Charge_OpenTotalFetchReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Charge_OpenTotalFetchReq::id() const {
  return id_;
}
inline void Charge_OpenTotalFetchReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Charge_OpenTotalFetchRsp

// required int32 ret = 1;
inline bool Charge_OpenTotalFetchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Charge_OpenTotalFetchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Charge_OpenTotalFetchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Charge_OpenTotalFetchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Charge_OpenTotalFetchRsp::ret() const {
  return ret_;
}
inline void Charge_OpenTotalFetchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 id = 2;
inline bool Charge_OpenTotalFetchRsp::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Charge_OpenTotalFetchRsp::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Charge_OpenTotalFetchRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Charge_OpenTotalFetchRsp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Charge_OpenTotalFetchRsp::id() const {
  return id_;
}
inline void Charge_OpenTotalFetchRsp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Charge_UpdateOpenTotalRsp

// optional int32 total = 1;
inline bool Charge_UpdateOpenTotalRsp::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Charge_UpdateOpenTotalRsp::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Charge_UpdateOpenTotalRsp::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Charge_UpdateOpenTotalRsp::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 Charge_UpdateOpenTotalRsp::total() const {
  return total_;
}
inline void Charge_UpdateOpenTotalRsp::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Charge_2eproto__INCLUDED
