// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Marry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Marry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_MarryMarriage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryMarriage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarryMarriage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarryMarriage_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryBanquet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryBanquet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarryBanquet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarryBanquet_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryLocklvAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryLocklvAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryLocklvSkillDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryLocklvSkillDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryLocklv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryLocklv_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarryLocklv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarryLocklv_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryLockskillSkillDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryLockskillSkillDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryLockskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryLockskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarryLockskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarryLockskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryChildAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryChildAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryChildStariattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryChildStariattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryChild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryChild_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarryChild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarryChild_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryChildvalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryChildvalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarryChildvalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarryChildvalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryChildexpGradeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryChildexpGradeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryChildexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryChildexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarryChildexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarryChildexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryExpressAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryExpressAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryExpress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryExpress_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarryExpress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarryExpress_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryExpresslanguage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryExpresslanguage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarryExpresslanguage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarryExpresslanguage_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryExpressshop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryExpressshop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarryExpressshop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarryExpressshop_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryConstantTourmonsterDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryConstantTourmonsterDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarryConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarryConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryCommon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryCommon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarryCommon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarryCommon_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryWeddingStageDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryWeddingStageDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryWeddingFireDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryWeddingFireDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryWeddingMoodDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryWeddingMoodDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryWedding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryWedding_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarryWedding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarryWedding_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarryExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarryExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarryExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarryExp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fMarry_2eproto() {
  protobuf_AddDesc_E_5fMarry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Marry.proto");
  GOOGLE_CHECK(file != NULL);
  E_MarryMarriage_descriptor_ = file->message_type(0);
  static const int E_MarryMarriage_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, m_weddingname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, m_banquet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, m_cruise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, m_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, m_firstboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, m_firstaddpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, m_repeatboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, m_repeataddpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, m_titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, m_equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, m_freeprice_),
  };
  E_MarryMarriage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryMarriage_descriptor_,
      E_MarryMarriage::default_instance_,
      E_MarryMarriage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryMarriage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryMarriage));
  Sheet_MarryMarriage_descriptor_ = file->message_type(1);
  static const int Sheet_MarryMarriage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryMarriage, e_marrymarriage_list_),
  };
  Sheet_MarryMarriage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarryMarriage_descriptor_,
      Sheet_MarryMarriage::default_instance_,
      Sheet_MarryMarriage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryMarriage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryMarriage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarryMarriage));
  E_MarryBanquet_descriptor_ = file->message_type(2);
  static const int E_MarryBanquet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryBanquet, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryBanquet, m_begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryBanquet, m_finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryBanquet, m_pre_broad_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryBanquet, m_broad_inter_sec_),
  };
  E_MarryBanquet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryBanquet_descriptor_,
      E_MarryBanquet::default_instance_,
      E_MarryBanquet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryBanquet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryBanquet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryBanquet));
  Sheet_MarryBanquet_descriptor_ = file->message_type(3);
  static const int Sheet_MarryBanquet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryBanquet, e_marrybanquet_list_),
  };
  Sheet_MarryBanquet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarryBanquet_descriptor_,
      Sheet_MarryBanquet::default_instance_,
      Sheet_MarryBanquet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryBanquet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryBanquet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarryBanquet));
  E_MarryLocklvAttributeDesc_descriptor_ = file->message_type(4);
  static const int E_MarryLocklvAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklvAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklvAttributeDesc, m_type_),
  };
  E_MarryLocklvAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryLocklvAttributeDesc_descriptor_,
      E_MarryLocklvAttributeDesc::default_instance_,
      E_MarryLocklvAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklvAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklvAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryLocklvAttributeDesc));
  E_MarryLocklvSkillDesc_descriptor_ = file->message_type(5);
  static const int E_MarryLocklvSkillDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklvSkillDesc, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklvSkillDesc, m_skill_),
  };
  E_MarryLocklvSkillDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryLocklvSkillDesc_descriptor_,
      E_MarryLocklvSkillDesc::default_instance_,
      E_MarryLocklvSkillDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklvSkillDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklvSkillDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryLocklvSkillDesc));
  E_MarryLocklv_descriptor_ = file->message_type(6);
  static const int E_MarryLocklv_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklv, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklv, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklv, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklv, m_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklv, m_skill_),
  };
  E_MarryLocklv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryLocklv_descriptor_,
      E_MarryLocklv::default_instance_,
      E_MarryLocklv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLocklv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryLocklv));
  Sheet_MarryLocklv_descriptor_ = file->message_type(7);
  static const int Sheet_MarryLocklv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryLocklv, e_marrylocklv_list_),
  };
  Sheet_MarryLocklv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarryLocklv_descriptor_,
      Sheet_MarryLocklv::default_instance_,
      Sheet_MarryLocklv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryLocklv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryLocklv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarryLocklv));
  E_MarryLockskillSkillDesc_descriptor_ = file->message_type(8);
  static const int E_MarryLockskillSkillDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLockskillSkillDesc, m_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLockskillSkillDesc, m_lv_),
  };
  E_MarryLockskillSkillDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryLockskillSkillDesc_descriptor_,
      E_MarryLockskillSkillDesc::default_instance_,
      E_MarryLockskillSkillDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLockskillSkillDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLockskillSkillDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryLockskillSkillDesc));
  E_MarryLockskill_descriptor_ = file->message_type(9);
  static const int E_MarryLockskill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLockskill, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLockskill, m_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLockskill, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLockskill, m_skill_),
  };
  E_MarryLockskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryLockskill_descriptor_,
      E_MarryLockskill::default_instance_,
      E_MarryLockskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLockskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryLockskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryLockskill));
  Sheet_MarryLockskill_descriptor_ = file->message_type(10);
  static const int Sheet_MarryLockskill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryLockskill, e_marrylockskill_list_),
  };
  Sheet_MarryLockskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarryLockskill_descriptor_,
      Sheet_MarryLockskill::default_instance_,
      Sheet_MarryLockskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryLockskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryLockskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarryLockskill));
  E_MarryChildAttributeDesc_descriptor_ = file->message_type(11);
  static const int E_MarryChildAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildAttributeDesc, m_type_),
  };
  E_MarryChildAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryChildAttributeDesc_descriptor_,
      E_MarryChildAttributeDesc::default_instance_,
      E_MarryChildAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryChildAttributeDesc));
  E_MarryChildStariattributeDesc_descriptor_ = file->message_type(12);
  static const int E_MarryChildStariattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildStariattributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildStariattributeDesc, m_type_),
  };
  E_MarryChildStariattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryChildStariattributeDesc_descriptor_,
      E_MarryChildStariattributeDesc::default_instance_,
      E_MarryChildStariattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildStariattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildStariattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryChildStariattributeDesc));
  E_MarryChild_descriptor_ = file->message_type(13);
  static const int E_MarryChild_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChild, m_childid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChild, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChild, m_childname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChild, m_childquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChild, m_handz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChild, m_handzname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChild, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChild, m_starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChild, m_starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChild, m_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChild, m_stariattribute_),
  };
  E_MarryChild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryChild_descriptor_,
      E_MarryChild::default_instance_,
      E_MarryChild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryChild));
  Sheet_MarryChild_descriptor_ = file->message_type(14);
  static const int Sheet_MarryChild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryChild, e_marrychild_list_),
  };
  Sheet_MarryChild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarryChild_descriptor_,
      Sheet_MarryChild::default_instance_,
      Sheet_MarryChild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryChild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryChild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarryChild));
  E_MarryChildvalue_descriptor_ = file->message_type(15);
  static const int E_MarryChildvalue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildvalue, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildvalue, m_lvvalue_),
  };
  E_MarryChildvalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryChildvalue_descriptor_,
      E_MarryChildvalue::default_instance_,
      E_MarryChildvalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildvalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildvalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryChildvalue));
  Sheet_MarryChildvalue_descriptor_ = file->message_type(16);
  static const int Sheet_MarryChildvalue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryChildvalue, e_marrychildvalue_list_),
  };
  Sheet_MarryChildvalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarryChildvalue_descriptor_,
      Sheet_MarryChildvalue::default_instance_,
      Sheet_MarryChildvalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryChildvalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryChildvalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarryChildvalue));
  E_MarryChildexpGradeDesc_descriptor_ = file->message_type(17);
  static const int E_MarryChildexpGradeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildexpGradeDesc, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildexpGradeDesc, m_lv_),
  };
  E_MarryChildexpGradeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryChildexpGradeDesc_descriptor_,
      E_MarryChildexpGradeDesc::default_instance_,
      E_MarryChildexpGradeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildexpGradeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildexpGradeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryChildexpGradeDesc));
  E_MarryChildexp_descriptor_ = file->message_type(18);
  static const int E_MarryChildexp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildexp, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildexp, m_grade_),
  };
  E_MarryChildexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryChildexp_descriptor_,
      E_MarryChildexp::default_instance_,
      E_MarryChildexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryChildexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryChildexp));
  Sheet_MarryChildexp_descriptor_ = file->message_type(19);
  static const int Sheet_MarryChildexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryChildexp, e_marrychildexp_list_),
  };
  Sheet_MarryChildexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarryChildexp_descriptor_,
      Sheet_MarryChildexp::default_instance_,
      Sheet_MarryChildexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryChildexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryChildexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarryChildexp));
  E_MarryExpressAttributeDesc_descriptor_ = file->message_type(20);
  static const int E_MarryExpressAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpressAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpressAttributeDesc, m_type_),
  };
  E_MarryExpressAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryExpressAttributeDesc_descriptor_,
      E_MarryExpressAttributeDesc::default_instance_,
      E_MarryExpressAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpressAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpressAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryExpressAttributeDesc));
  E_MarryExpress_descriptor_ = file->message_type(21);
  static const int E_MarryExpress_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpress, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpress, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpress, m_attribute_),
  };
  E_MarryExpress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryExpress_descriptor_,
      E_MarryExpress::default_instance_,
      E_MarryExpress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryExpress));
  Sheet_MarryExpress_descriptor_ = file->message_type(22);
  static const int Sheet_MarryExpress_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryExpress, e_marryexpress_list_),
  };
  Sheet_MarryExpress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarryExpress_descriptor_,
      Sheet_MarryExpress::default_instance_,
      Sheet_MarryExpress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryExpress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryExpress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarryExpress));
  E_MarryExpresslanguage_descriptor_ = file->message_type(23);
  static const int E_MarryExpresslanguage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpresslanguage, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpresslanguage, m_language_),
  };
  E_MarryExpresslanguage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryExpresslanguage_descriptor_,
      E_MarryExpresslanguage::default_instance_,
      E_MarryExpresslanguage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpresslanguage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpresslanguage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryExpresslanguage));
  Sheet_MarryExpresslanguage_descriptor_ = file->message_type(24);
  static const int Sheet_MarryExpresslanguage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryExpresslanguage, e_marryexpresslanguage_list_),
  };
  Sheet_MarryExpresslanguage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarryExpresslanguage_descriptor_,
      Sheet_MarryExpresslanguage::default_instance_,
      Sheet_MarryExpresslanguage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryExpresslanguage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryExpresslanguage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarryExpresslanguage));
  E_MarryExpressshop_descriptor_ = file->message_type(25);
  static const int E_MarryExpressshop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpressshop, m_exitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpressshop, m_mallid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpressshop, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpressshop, m_expto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpressshop, m_broadcastid_),
  };
  E_MarryExpressshop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryExpressshop_descriptor_,
      E_MarryExpressshop::default_instance_,
      E_MarryExpressshop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpressshop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExpressshop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryExpressshop));
  Sheet_MarryExpressshop_descriptor_ = file->message_type(26);
  static const int Sheet_MarryExpressshop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryExpressshop, e_marryexpressshop_list_),
  };
  Sheet_MarryExpressshop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarryExpressshop_descriptor_,
      Sheet_MarryExpressshop::default_instance_,
      Sheet_MarryExpressshop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryExpressshop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryExpressshop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarryExpressshop));
  E_MarryConstantTourmonsterDesc_descriptor_ = file->message_type(27);
  static const int E_MarryConstantTourmonsterDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstantTourmonsterDesc, m_pathid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstantTourmonsterDesc, m_id_),
  };
  E_MarryConstantTourmonsterDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryConstantTourmonsterDesc_descriptor_,
      E_MarryConstantTourmonsterDesc::default_instance_,
      E_MarryConstantTourmonsterDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstantTourmonsterDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstantTourmonsterDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryConstantTourmonsterDesc));
  E_MarryConstant_descriptor_ = file->message_type(28);
  static const int E_MarryConstant_offsets_[40] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_buyitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_dailyitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_boxitme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_giveboy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_givegirl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_xytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_consumenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_marrylv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_childtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_lockitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_lockitemexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_childitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_childitemexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_guestprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_guestpricenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_asklimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_hyreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_toursceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_tourfollowindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_hyicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_hyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_xyicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_xyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_redbagnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_redmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_redprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_sendredreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_sendrednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_redcollect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_redcollectnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, m_tourmonster_),
  };
  E_MarryConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryConstant_descriptor_,
      E_MarryConstant::default_instance_,
      E_MarryConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryConstant));
  Sheet_MarryConstant_descriptor_ = file->message_type(29);
  static const int Sheet_MarryConstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryConstant, e_marryconstant_list_),
  };
  Sheet_MarryConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarryConstant_descriptor_,
      Sheet_MarryConstant::default_instance_,
      Sheet_MarryConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarryConstant));
  E_MarryCommon_descriptor_ = file->message_type(30);
  static const int E_MarryCommon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryCommon, m_lv_),
  };
  E_MarryCommon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryCommon_descriptor_,
      E_MarryCommon::default_instance_,
      E_MarryCommon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryCommon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryCommon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryCommon));
  Sheet_MarryCommon_descriptor_ = file->message_type(31);
  static const int Sheet_MarryCommon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryCommon, e_marrycommon_list_),
  };
  Sheet_MarryCommon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarryCommon_descriptor_,
      Sheet_MarryCommon::default_instance_,
      Sheet_MarryCommon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryCommon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryCommon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarryCommon));
  E_MarryWeddingStageDesc_descriptor_ = file->message_type(32);
  static const int E_MarryWeddingStageDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWeddingStageDesc, m_num_),
  };
  E_MarryWeddingStageDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryWeddingStageDesc_descriptor_,
      E_MarryWeddingStageDesc::default_instance_,
      E_MarryWeddingStageDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWeddingStageDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWeddingStageDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryWeddingStageDesc));
  E_MarryWeddingFireDesc_descriptor_ = file->message_type(33);
  static const int E_MarryWeddingFireDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWeddingFireDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWeddingFireDesc, m_type_),
  };
  E_MarryWeddingFireDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryWeddingFireDesc_descriptor_,
      E_MarryWeddingFireDesc::default_instance_,
      E_MarryWeddingFireDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWeddingFireDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWeddingFireDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryWeddingFireDesc));
  E_MarryWeddingMoodDesc_descriptor_ = file->message_type(34);
  static const int E_MarryWeddingMoodDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWeddingMoodDesc, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWeddingMoodDesc, m_value_),
  };
  E_MarryWeddingMoodDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryWeddingMoodDesc_descriptor_,
      E_MarryWeddingMoodDesc::default_instance_,
      E_MarryWeddingMoodDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWeddingMoodDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWeddingMoodDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryWeddingMoodDesc));
  E_MarryWedding_descriptor_ = file->message_type(35);
  static const int E_MarryWedding_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_signreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_signdaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_cakereftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_cakenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_cake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_modeltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_cakereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_signcakenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_monsternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_monstertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_npcnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_monsterreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_monsterdaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_feastid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_feastreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_feastnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_fire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, m_mood_),
  };
  E_MarryWedding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryWedding_descriptor_,
      E_MarryWedding::default_instance_,
      E_MarryWedding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryWedding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryWedding));
  Sheet_MarryWedding_descriptor_ = file->message_type(36);
  static const int Sheet_MarryWedding_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryWedding, e_marrywedding_list_),
  };
  Sheet_MarryWedding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarryWedding_descriptor_,
      Sheet_MarryWedding::default_instance_,
      Sheet_MarryWedding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryWedding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryWedding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarryWedding));
  E_MarryExp_descriptor_ = file->message_type(37);
  static const int E_MarryExp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExp, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExp, m_weddingexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExp, m_dayexpmax_),
  };
  E_MarryExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarryExp_descriptor_,
      E_MarryExp::default_instance_,
      E_MarryExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarryExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarryExp));
  Sheet_MarryExp_descriptor_ = file->message_type(38);
  static const int Sheet_MarryExp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryExp, e_marryexp_list_),
  };
  Sheet_MarryExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarryExp_descriptor_,
      Sheet_MarryExp::default_instance_,
      Sheet_MarryExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarryExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarryExp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fMarry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryMarriage_descriptor_, &E_MarryMarriage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarryMarriage_descriptor_, &Sheet_MarryMarriage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryBanquet_descriptor_, &E_MarryBanquet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarryBanquet_descriptor_, &Sheet_MarryBanquet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryLocklvAttributeDesc_descriptor_, &E_MarryLocklvAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryLocklvSkillDesc_descriptor_, &E_MarryLocklvSkillDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryLocklv_descriptor_, &E_MarryLocklv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarryLocklv_descriptor_, &Sheet_MarryLocklv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryLockskillSkillDesc_descriptor_, &E_MarryLockskillSkillDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryLockskill_descriptor_, &E_MarryLockskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarryLockskill_descriptor_, &Sheet_MarryLockskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryChildAttributeDesc_descriptor_, &E_MarryChildAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryChildStariattributeDesc_descriptor_, &E_MarryChildStariattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryChild_descriptor_, &E_MarryChild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarryChild_descriptor_, &Sheet_MarryChild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryChildvalue_descriptor_, &E_MarryChildvalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarryChildvalue_descriptor_, &Sheet_MarryChildvalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryChildexpGradeDesc_descriptor_, &E_MarryChildexpGradeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryChildexp_descriptor_, &E_MarryChildexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarryChildexp_descriptor_, &Sheet_MarryChildexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryExpressAttributeDesc_descriptor_, &E_MarryExpressAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryExpress_descriptor_, &E_MarryExpress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarryExpress_descriptor_, &Sheet_MarryExpress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryExpresslanguage_descriptor_, &E_MarryExpresslanguage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarryExpresslanguage_descriptor_, &Sheet_MarryExpresslanguage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryExpressshop_descriptor_, &E_MarryExpressshop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarryExpressshop_descriptor_, &Sheet_MarryExpressshop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryConstantTourmonsterDesc_descriptor_, &E_MarryConstantTourmonsterDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryConstant_descriptor_, &E_MarryConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarryConstant_descriptor_, &Sheet_MarryConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryCommon_descriptor_, &E_MarryCommon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarryCommon_descriptor_, &Sheet_MarryCommon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryWeddingStageDesc_descriptor_, &E_MarryWeddingStageDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryWeddingFireDesc_descriptor_, &E_MarryWeddingFireDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryWeddingMoodDesc_descriptor_, &E_MarryWeddingMoodDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryWedding_descriptor_, &E_MarryWedding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarryWedding_descriptor_, &Sheet_MarryWedding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarryExp_descriptor_, &E_MarryExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarryExp_descriptor_, &Sheet_MarryExp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fMarry_2eproto() {
  delete E_MarryMarriage::default_instance_;
  delete E_MarryMarriage_reflection_;
  delete Sheet_MarryMarriage::default_instance_;
  delete Sheet_MarryMarriage_reflection_;
  delete E_MarryBanquet::default_instance_;
  delete E_MarryBanquet_reflection_;
  delete Sheet_MarryBanquet::default_instance_;
  delete Sheet_MarryBanquet_reflection_;
  delete E_MarryLocklvAttributeDesc::default_instance_;
  delete E_MarryLocklvAttributeDesc_reflection_;
  delete E_MarryLocklvSkillDesc::default_instance_;
  delete E_MarryLocklvSkillDesc_reflection_;
  delete E_MarryLocklv::default_instance_;
  delete E_MarryLocklv_reflection_;
  delete Sheet_MarryLocklv::default_instance_;
  delete Sheet_MarryLocklv_reflection_;
  delete E_MarryLockskillSkillDesc::default_instance_;
  delete E_MarryLockskillSkillDesc_reflection_;
  delete E_MarryLockskill::default_instance_;
  delete E_MarryLockskill_reflection_;
  delete Sheet_MarryLockskill::default_instance_;
  delete Sheet_MarryLockskill_reflection_;
  delete E_MarryChildAttributeDesc::default_instance_;
  delete E_MarryChildAttributeDesc_reflection_;
  delete E_MarryChildStariattributeDesc::default_instance_;
  delete E_MarryChildStariattributeDesc_reflection_;
  delete E_MarryChild::default_instance_;
  delete E_MarryChild_reflection_;
  delete Sheet_MarryChild::default_instance_;
  delete Sheet_MarryChild_reflection_;
  delete E_MarryChildvalue::default_instance_;
  delete E_MarryChildvalue_reflection_;
  delete Sheet_MarryChildvalue::default_instance_;
  delete Sheet_MarryChildvalue_reflection_;
  delete E_MarryChildexpGradeDesc::default_instance_;
  delete E_MarryChildexpGradeDesc_reflection_;
  delete E_MarryChildexp::default_instance_;
  delete E_MarryChildexp_reflection_;
  delete Sheet_MarryChildexp::default_instance_;
  delete Sheet_MarryChildexp_reflection_;
  delete E_MarryExpressAttributeDesc::default_instance_;
  delete E_MarryExpressAttributeDesc_reflection_;
  delete E_MarryExpress::default_instance_;
  delete E_MarryExpress_reflection_;
  delete Sheet_MarryExpress::default_instance_;
  delete Sheet_MarryExpress_reflection_;
  delete E_MarryExpresslanguage::default_instance_;
  delete E_MarryExpresslanguage_reflection_;
  delete Sheet_MarryExpresslanguage::default_instance_;
  delete Sheet_MarryExpresslanguage_reflection_;
  delete E_MarryExpressshop::default_instance_;
  delete E_MarryExpressshop_reflection_;
  delete Sheet_MarryExpressshop::default_instance_;
  delete Sheet_MarryExpressshop_reflection_;
  delete E_MarryConstantTourmonsterDesc::default_instance_;
  delete E_MarryConstantTourmonsterDesc_reflection_;
  delete E_MarryConstant::default_instance_;
  delete E_MarryConstant_reflection_;
  delete Sheet_MarryConstant::default_instance_;
  delete Sheet_MarryConstant_reflection_;
  delete E_MarryCommon::default_instance_;
  delete E_MarryCommon_reflection_;
  delete Sheet_MarryCommon::default_instance_;
  delete Sheet_MarryCommon_reflection_;
  delete E_MarryWeddingStageDesc::default_instance_;
  delete E_MarryWeddingStageDesc_reflection_;
  delete E_MarryWeddingFireDesc::default_instance_;
  delete E_MarryWeddingFireDesc_reflection_;
  delete E_MarryWeddingMoodDesc::default_instance_;
  delete E_MarryWeddingMoodDesc_reflection_;
  delete E_MarryWedding::default_instance_;
  delete E_MarryWedding_reflection_;
  delete Sheet_MarryWedding::default_instance_;
  delete Sheet_MarryWedding_reflection_;
  delete E_MarryExp::default_instance_;
  delete E_MarryExp_reflection_;
  delete Sheet_MarryExp::default_instance_;
  delete Sheet_MarryExp_reflection_;
}

void protobuf_AddDesc_E_5fMarry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rE_Marry.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"\373\003\n\017E_MarryMarriage\022\024\n\004m_id\030\001 \001"
    "(\005B\006\302\377\024\002id\022+\n\rm_weddingname\030\002 \001(\tB\024\302\377\024\014\345"
    "\251\232\347\244\274\345\220\215\347\247\260\220\301\024@\022#\n\tm_banquet\030\003 \001(\005B\020\302\377\024\014"
    "\346\230\257\345\220\246\345\256\264\344\274\232\022\"\n\010m_cruise\030\004 \001(\005B\020\302\377\024\014\346\230\257\345"
    "\220\246\345\267\241\346\270\270\022\033\n\007m_money\030\005 \001(\005B\n\302\377\024\006\350\264\247\345\270\201\022\033\n"
    "\007m_price\030\006 \001(\005B\n\302\377\024\006\344\273\267\346\240\274\022+\n\014m_firstbox"
    "id\030\007 \001(\005B\025\302\377\024\021\351\246\226\346\254\241\345\245\226\345\212\261\347\273\204id\022/\n\017m_fir"
    "staddpower\030\010 \001(\005B\026\302\377\024\022\351\246\226\346\254\241\345\242\236\345\212\240\346\210\230\345\212\233"
    "\022,\n\rm_repeatboxid\030\t \001(\005B\025\302\377\024\021\345\244\232\346\254\241\345\245\226\345\212"
    "\261\347\273\204id\0220\n\020m_repeataddpower\030\n \001(\005B\026\302\377\024\022\345\244"
    "\232\346\254\241\345\242\236\345\212\240\346\210\230\345\212\233\022\035\n\tm_titleid\030\013 \001(\005B\n\302\377\024"
    "\006\347\247\260\345\217\267\022\036\n\007m_equip\030\014 \001(\005B\r\302\377\024\t\345\220\214\345\277\203\351\224\201\022"
    "%\n\013m_freeprice\030\r \001(\005B\020\302\377\024\014\345\205\215\350\264\271\345\270\255\344\275\215\"T"
    "\n\023Sheet_MarryMarriage\022=\n\024E_MarryMarriage"
    "_List\030\001 \003(\0132\031.proto_ff.E_MarryMarriageB\004"
    "\210\301\024\004\"\347\001\n\016E_MarryBanquet\022\024\n\004m_id\030\001 \001(\005B\006\302"
    "\377\024\002id\022/\n\013m_begintime\030\002 \001(\tB\032\302\377\024\022\345\256\264\344\274\232\345\274"
    "\200\345\247\213\346\227\266\351\227\264\220\301\024@\0220\n\014m_finishtime\030\003 \001(\tB\032\302\377"
    "\024\022\345\256\264\344\274\232\347\273\223\346\235\237\346\227\266\351\227\264\220\301\024@\022/\n\017m_pre_broad_"
    "sec\030\004 \001(\005B\026\302\377\024\022\346\217\220\345\211\215\345\271\277\346\222\255\346\227\266\351\227\264\022+\n\021m_b"
    "road_inter_sec\030\005 \001(\005B\020\302\377\024\014\345\271\277\346\222\255\351\227\264\351\232\224\"Q"
    "\n\022Sheet_MarryBanquet\022;\n\023E_MarryBanquet_L"
    "ist\030\001 \003(\0132\030.proto_ff.E_MarryBanquetB\004\210\301\024"
    " \"L\n\032E_MarryLocklvAttributeDesc\022\030\n\007m_val"
    "ue\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\024\n\006m_type\030\002 \001(\005B\004\302\377\024\000\""
    "I\n\026E_MarryLocklvSkillDesc\022\030\n\004m_lv\030\001 \001(\005B"
    "\n\302\377\024\006\347\255\211\347\272\247\022\025\n\007m_skill\030\002 \001(\005B\004\302\377\024\000\"\364\001\n\rE"
    "_MarryLocklv\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\030\n\004m_"
    "lv\030\002 \001(\005B\n\302\377\024\006\346\230\237\347\272\247\022%\n\005m_exp\030\003 \001(\005B\026\302\377\024"
    "\022\345\215\207\347\272\247\351\234\200\350\246\201\347\273\217\351\252\214\022I\n\013m_attribute\030\004 \003(\013"
    "2$.proto_ff.E_MarryLocklvAttributeDescB\016"
    "\302\377\024\006\345\261\236\346\200\247\210\301\024\004\022A\n\007m_skill\030\005 \003(\0132 .proto_"
    "ff.E_MarryLocklvSkillDescB\016\302\377\024\006\346\212\200\350\203\275\210\301\024"
    "\005\"O\n\021Sheet_MarryLocklv\022:\n\022E_MarryLocklv_"
    "List\030\001 \003(\0132\027.proto_ff.E_MarryLocklvB\005\210\301\024"
    "\200\010\"R\n\031E_MarryLockskillSkillDesc\022\033\n\007m_gra"
    "de\030\001 \001(\005B\n\302\377\024\006\345\223\201\351\230\266\022\030\n\004m_lv\030\002 \001(\005B\n\302\377\024\006"
    "\347\255\211\347\272\247\"\262\001\n\020E_MarryLockskill\022\024\n\004m_id\030\001 \001("
    "\005B\006\302\377\024\002id\022!\n\007m_order\030\002 \001(\005B\020\302\377\024\014\346\212\200\350\203\275\344\275"
    "\215\347\275\256\022\037\n\tm_skillid\030\003 \001(\005B\014\302\377\024\010\346\212\200\350\203\275id\022D\n"
    "\007m_skill\030\004 \003(\0132#.proto_ff.E_MarryLockski"
    "llSkillDescB\016\302\377\024\006\346\212\200\350\203\275\210\301\024\003\"W\n\024Sheet_Mar"
    "ryLockskill\022\?\n\025E_MarryLockskill_List\030\001 \003"
    "(\0132\032.proto_ff.E_MarryLockskillB\004\210\301\024\010\"Q\n\031"
    "E_MarryChildAttributeDesc\022\030\n\007m_value\030\001 \001"
    "(\003B\007\302\377\024\003\345\200\274\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\""
    "V\n\036E_MarryChildStariattributeDesc\022\030\n\007m_v"
    "alue\030\001 \001(\003B\007\302\377\024\003\345\200\274\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024"
    "\006\347\261\273\345\236\213\"\243\004\n\014E_MarryChild\022\037\n\tm_childid\030\001 "
    "\001(\003B\014\302\377\024\010\344\273\231\345\250\203id\022$\n\010m_itemid\030\002 \001(\003B\022\302\377\024"
    "\016\346\277\200\346\264\273\347\211\251\345\223\201id\022)\n\013m_childname\030\003 \001(\tB\024\302\377"
    "\024\014\344\273\231\345\250\203\345\220\215\347\247\260\220\301\024@\022(\n\016m_childquality\030\004 \001"
    "(\005B\020\302\377\024\014\344\273\231\345\250\203\345\223\201\350\264\250\022\036\n\007m_handz\030\005 \001(\005B\r\302"
    "\377\024\t\344\273\231\345\250\203\347\273\204\022,\n\013m_handzname\030\006 \001(\tB\027\302\377\024\017\344"
    "\273\231\345\250\203\347\273\204\345\220\215\347\247\260\220\301\024@\022*\n\tm_skillid\030\007 \001(\tB\027\302"
    "\377\024\017\350\247\243\351\224\201\346\212\200\350\203\275\347\273\204\220\301\024@\022$\n\010m_starid\030\010 \001(\003"
    "B\022\302\377\024\016\345\215\207\346\230\237\351\201\223\345\205\267id\022-\n\tm_starnum\030\t \001(\tB"
    "\032\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024@\022N\n\013m_attribu"
    "te\030\n \003(\0132#.proto_ff.E_MarryChildAttribut"
    "eDescB\024\302\377\024\014\346\277\200\346\264\273\345\261\236\346\200\247\210\301\024\006\022X\n\020m_stariat"
    "tribute\030\013 \003(\0132(.proto_ff.E_MarryChildSta"
    "riattributeDescB\024\302\377\024\014\345\215\207\346\230\237\345\261\236\346\200\247\210\301\024\004\"K\n"
    "\020Sheet_MarryChild\0227\n\021E_MarryChild_List\030\001"
    " \003(\0132\026.proto_ff.E_MarryChildB\004\210\301\024\020\"X\n\021E_"
    "MarryChildvalue\022\035\n\004m_id\030\001 \001(\003B\017\302\377\024\013\345\261\236\346\200"
    "\247\347\273\204ID\022$\n\tm_lvvalue\030\002 \003(\005B\021\302\377\024\t\347\255\211\347\272\247\345\200\274"
    "\210\301\024\037\"[\n\025Sheet_MarryChildvalue\022B\n\026E_Marry"
    "Childvalue_List\030\001 \003(\0132\033.proto_ff.E_Marry"
    "ChildvalueB\005\210\301\024\200\001\"O\n\030E_MarryChildexpGrad"
    "eDesc\022\031\n\005m_exp\030\001 \001(\005B\n\302\377\024\006\347\273\217\351\252\214\022\030\n\004m_lv"
    "\030\002 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\"p\n\017E_MarryChildexp\022\030\n"
    "\004m_lv\030\001 \001(\005B\n\302\377\024\006\351\230\266\347\272\247\022C\n\007m_grade\030\002 \003(\013"
    "2\".proto_ff.E_MarryChildexpGradeDescB\016\302\377"
    "\024\006\345\223\201\351\230\266\210\301\024\003\"T\n\023Sheet_MarryChildexp\022=\n\024E"
    "_MarryChildexp_List\030\001 \003(\0132\031.proto_ff.E_M"
    "arryChildexpB\004\210\301\024 \"M\n\033E_MarryExpressAttr"
    "ibuteDesc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\024\n\006m"
    "_type\030\002 \001(\005B\004\302\377\024\000\"\235\001\n\016E_MarryExpress\022\030\n\004"
    "m_lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022%\n\005m_exp\030\002 \001(\005B\026\302"
    "\377\024\022\345\215\207\347\272\247\351\234\200\350\246\201\347\273\217\351\252\214\022J\n\013m_attribute\030\003 \003"
    "(\0132%.proto_ff.E_MarryExpressAttributeDes"
    "cB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\004\"R\n\022Sheet_MarryExpress\022"
    "<\n\023E_MarryExpress_List\030\001 \003(\0132\030.proto_ff."
    "E_MarryExpressB\005\210\301\024\200\010\"Y\n\026E_MarryExpressl"
    "anguage\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022)\n\nm_langu"
    "age\030\002 \001(\tB\025\302\377\024\014\350\241\250\347\231\275\346\226\207\345\255\227\220\301\024\200\002\"i\n\032Shee"
    "t_MarryExpresslanguage\022K\n\033E_MarryExpress"
    "language_List\030\001 \003(\0132 .proto_ff.E_MarryEx"
    "presslanguageB\004\210\301\024 \"\312\001\n\022E_MarryExpresssh"
    "op\022\"\n\010m_exitem\030\001 \001(\005B\020\302\377\024\014\350\241\250\347\231\275\351\201\223\345\205\267\022\036"
    "\n\010m_mallid\030\002 \001(\005B\014\302\377\024\010\345\225\206\345\237\216id\022\"\n\005m_exp\030"
    "\003 \001(\005B\023\302\377\024\017\345\242\236\345\212\240\350\241\250\347\231\275\345\200\274\022\'\n\007m_expto\030\004 "
    "\001(\005B\026\302\377\024\022\350\242\253\350\241\250\347\231\275\347\273\217\351\252\214\345\200\274\022#\n\rm_broadca"
    "stid\030\005 \001(\005B\014\302\377\024\010\345\271\277\346\222\255id\"]\n\026Sheet_MarryE"
    "xpressshop\022C\n\027E_MarryExpressshop_List\030\001 "
    "\003(\0132\034.proto_ff.E_MarryExpressshopB\004\210\301\024\004\""
    "T\n\036E_MarryConstantTourmonsterDesc\022\034\n\010m_p"
    "athid\030\001 \001(\005B\n\302\377\024\006pathid\022\024\n\004m_id\030\002 \001(\005B\006\302"
    "\377\024\002id\"\204\016\n\017E_MarryConstant\022\024\n\004m_id\030\001 \001(\005B"
    "\006\302\377\024\002id\022\'\n\007m_money\030\002 \001(\005B\026\302\377\024\022\345\256\235\345\214\243\350\264\255\344"
    "\271\260\350\264\247\345\270\201\022\'\n\007m_price\030\003 \001(\005B\026\302\377\024\022\345\256\235\345\214\243\350\264\255"
    "\344\271\260\344\273\267\346\240\274\022/\n\tm_buyitem\030\004 \001(\005B\034\302\377\024\030\345\256\235\345\214\243"
    "\350\264\255\344\271\260\347\253\213\345\276\227\346\235\220\346\226\231\022+\n\013m_dailyitem\030\005 \001(\005B"
    "\026\302\377\024\022\345\256\235\345\214\243\346\257\217\346\227\245\346\235\220\346\226\231\022)\n\tm_boxitme\030\006 \001"
    "(\005B\026\302\377\024\022\345\256\235\345\214\243\346\214\201\347\273\255\346\227\266\351\227\264\0226\n\nm_interval"
    "\030\007 \001(\005B\"\302\377\024\036\345\217\221\351\200\201\347\273\223\347\274\230\350\257\267\346\261\202\351\227\264\351\232\224\346\227\266\351"
    "\227\264\0220\n\nm_lifetime\030\010 \001(\005B\034\302\377\024\030\347\273\223\347\274\230\350\257\267\346\261\202"
    "\345\255\230\345\234\250\345\257\277\345\221\275\022-\n\007m_scale\030\t \001(\005B\034\302\377\024\030\350\241\250\347\231"
    "\275\345\210\206\344\272\253\345\261\236\346\200\247\346\257\224\344\276\213\022&\n\tm_giveboy\030\n \001(\005B\023"
    "\302\377\024\017\350\265\240\351\200\201\347\224\267\344\273\231\345\250\203\022\'\n\nm_givegirl\030\013 \001(\005B"
    "\023\302\377\024\017\350\265\240\351\200\201\345\245\263\344\273\231\345\250\203\0224\n\010m_xytime\030\014 \001(\005B\""
    "\302\377\024\036\345\267\241\346\270\270\346\217\220\345\211\215\345\256\264\344\274\232\345\274\200\345\247\213\346\227\266\351\227\264\022&\n\006m_"
    "free\030\r \001(\005B\026\302\377\024\022\345\211\257\346\234\254\345\205\215\350\264\271\346\254\241\346\225\260\022%\n\010m_"
    "buynum\030\016 \001(\005B\023\302\377\024\017\345\217\257\350\264\255\344\271\260\346\254\241\346\225\260\022#\n\tm_c"
    "onsume\030\017 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\350\264\247\345\270\201\022 \n\014m_cons"
    "umenum\030\020 \001(\005B\n\302\377\024\006\344\273\267\346\240\274\022#\n\tm_marrylv\030\021 "
    "\001(\005B\020\302\377\024\014\347\273\223\347\274\230\347\255\211\347\272\247\022+\n\013m_childtime\030\022 \001"
    "(\005B\026\302\377\024\022\344\273\231\345\250\203\351\242\206\345\217\226\346\227\266\351\227\264\022*\n\nm_lockitem"
    "\030\023 \001(\005B\026\302\377\024\022\344\277\241\347\211\251\345\205\273\346\210\220\351\201\223\345\205\267\022*\n\rm_lock"
    "itemexp\030\024 \001(\005B\023\302\377\024\017\344\277\241\347\211\251\347\273\217\351\252\214\345\200\274\022+\n\013m_"
    "childitem\030\025 \001(\005B\026\302\377\024\022\344\273\231\345\250\203\345\205\273\346\210\220\351\201\223\345\205\267\022"
    "+\n\016m_childitemexp\030\026 \001(\005B\023\302\377\024\017\344\273\231\345\250\203\347\273\217\351\252"
    "\214\345\200\274\022&\n\014m_guestprice\030\027 \001(\005B\020\302\377\024\014\345\270\255\344\275\215\350\264"
    "\247\345\270\201\022)\n\017m_guestpricenum\030\030 \001(\005B\020\302\377\024\014\345\270\255\344\275"
    "\215\344\273\267\346\240\274\022*\n\nm_asklimit\030\031 \001(\005B\026\302\377\024\022\347\224\263\350\257\267\345"
    "\210\227\350\241\250\344\270\212\351\231\220\022*\n\nm_hyreward\030\032 \001(\005B\026\302\377\024\022\345\251\232"
    "\345\256\264\345\245\226\345\212\261\345\261\225\347\244\272\022)\n\rm_toursceneid\030\033 \001(\005B\022"
    "\302\377\024\016\345\267\241\346\270\270\345\234\272\346\231\257id\022.\n\021m_tourfollowindex\030"
    "\034 \001(\005B\023\302\377\024\017\345\267\241\346\270\270\346\214\202\347\202\271\346\200\252\022$\n\010m_hyicon\030\035"
    " \001(\tB\022\302\377\024\n\345\251\232\345\256\264icon\220\301\024@\022&\n\010m_hyname\030\036 \001"
    "(\tB\024\302\377\024\014\345\251\232\345\256\264\345\220\215\347\247\260\220\301\024@\022$\n\010m_xyicon\030\037 \001"
    "(\tB\022\302\377\024\n\345\267\241\346\270\270icon\220\301\024@\022&\n\010m_xyname\030  \001(\t"
    "B\024\302\377\024\014\345\267\241\346\270\270\345\220\215\347\247\260\220\301\024@\0221\n\013m_redbagnum\030! "
    "\001(\005B\034\302\377\024\030\345\267\241\346\270\270\345\205\215\350\264\271\347\272\242\345\214\205\346\225\260\351\207\217\022*\n\nm_r"
    "edmoney\030\" \001(\005B\026\302\377\024\022\347\272\242\345\214\205\350\264\255\344\271\260\350\264\247\345\270\201\022*\n"
    "\nm_redprice\030# \001(\005B\026\302\377\024\022\347\272\242\345\214\205\350\264\255\344\271\260\344\273\267\346\240"
    "\274\0222\n\017m_sendredreward\030$ \001(\005B\031\302\377\024\025\345\217\221\347\272\242\345\214"
    "\205\345\245\226\345\212\261\350\264\247\345\270\201\022/\n\014m_sendrednum\030% \001(\005B\031\302\377\024"
    "\025\345\217\221\347\272\242\345\214\205\345\245\226\345\212\261\344\273\267\346\240\274\022)\n\014m_redcollect\030&"
    " \001(\005B\023\302\377\024\017\347\272\242\345\214\205\351\207\207\351\233\206\347\211\251\0222\n\017m_redcollec"
    "tnum\030\' \001(\005B\031\302\377\024\025\347\272\242\345\214\205\351\207\207\351\233\206\347\211\251\346\225\260\351\207\217\022U\n"
    "\rm_tourmonster\030( \003(\0132(.proto_ff.E_MarryC"
    "onstantTourmonsterDescB\024\302\377\024\014\345\267\241\346\270\270\346\200\252\347\211\251"
    "\210\301\024\010\"T\n\023Sheet_MarryConstant\022=\n\024E_MarryCo"
    "nstant_List\030\001 \003(\0132\031.proto_ff.E_MarryCons"
    "tantB\004\210\301\024\002\")\n\rE_MarryCommon\022\030\n\004m_lv\030\001 \001("
    "\005B\n\302\377\024\006\351\230\266\351\230\266\"O\n\021Sheet_MarryCommon\022:\n\022E_"
    "MarryCommon_List\030\001 \003(\0132\027.proto_ff.E_Marr"
    "yCommonB\005\210\301\024\200\004\"4\n\027E_MarryWeddingStageDes"
    "c\022\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\351\230\266\346\256\265\"T\n\026E_MarryW"
    "eddingFireDesc\022!\n\007m_value\030\001 \001(\005B\020\302\377\024\014\345\217\267"
    "\346\260\233\345\233\264\345\200\274\022\027\n\006m_type\030\002 \001(\005B\007\302\377\024\003\345\217\267\"S\n\026E_"
    "MarryWeddingMoodDesc\022\034\n\010m_reward\030\001 \001(\005B\n"
    "\302\377\024\006\345\245\226\345\212\261\022\033\n\007m_value\030\002 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\""
    "\212\t\n\016E_MarryWedding\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id"
    "\022&\n\014m_signreward\030\002 \001(\005B\020\302\377\024\014\347\255\276\345\210\260\345\245\226\345\212\261"
    "\0222\n\014m_signdaynum\030\003 \001(\005B\034\302\377\024\030\346\257\217\346\227\245\347\255\276\345\210\260"
    "\345\245\226\345\212\261\346\254\241\346\225\260\022*\n\rm_cakereftime\030\004 \001(\005B\023\302\377\024"
    "\017\350\233\213\347\263\225\351\207\207\351\233\206\347\211\251\022#\n\tm_cakenum\030\005 \001(\005B\020\302\377\024"
    "\014\350\233\213\347\263\225\346\225\260\351\207\217\022&\n\006m_cake\030\006 \001(\005B\026\302\377\024\022\350\233\213\347\263"
    "\225\345\210\267\346\226\260\346\227\266\351\227\264\022%\n\007m_model\030\007 \001(\tB\024\302\377\024\014\345\217\230\350"
    "\272\253\346\250\241\345\236\213\220\301\024@\022+\n\013m_modeltime\030\010 \001(\005B\026\302\377\024\022\345"
    "\217\230\350\272\253\346\214\201\347\273\255\346\227\266\351\227\264\022&\n\014m_cakereward\030\t \001(\005B"
    "\020\302\377\024\014\351\207\207\351\233\206\345\245\226\345\212\261\0229\n\rm_signcakenum\030\n \001(\005"
    "B\"\302\377\024\036\346\257\217\346\227\245\351\207\207\351\233\206\350\233\213\347\263\225\345\245\226\345\212\261\346\254\241\346\225\260\022%\n\t"
    "m_monster\030\013 \001(\005B\022\302\377\024\016\344\272\262\345\217\213\346\200\252\347\211\251id\022,\n\014m"
    "_monsternum\030\014 \001(\005B\026\302\377\024\022\344\272\262\345\217\213\346\200\252\347\211\251\346\225\260\351\207"
    "\217\022-\n\rm_monstertime\030\r \001(\005B\026\302\377\024\022\346\200\252\347\211\251\345\207\273\346"
    "\235\200\346\227\266\351\227\264\022 \n\007m_npcid\030\016 \001(\005B\017\302\377\024\013\344\272\262\345\217\213npc"
    "id\022%\n\010m_npcnum\030\017 \001(\005B\023\302\377\024\017\344\272\262\345\217\213npc\346\225\260\351\207"
    "\217\022)\n\017m_monsterreward\030\020 \001(\005B\020\302\377\024\014\344\272\262\345\217\213\345\245"
    "\226\345\212\261\0225\n\017m_monsterdaynum\030\021 \001(\005B\034\302\377\024\030\346\257\217\346\227"
    "\245\344\272\262\345\217\213\345\245\226\345\212\261\346\254\241\346\225\260\022(\n\tm_feastid\030\022 \001(\005B\025"
    "\302\377\024\021\345\256\264\345\270\255\351\207\207\351\233\206\347\211\251id\022-\n\rm_feastreward\030\023"
    " \001(\005B\026\302\377\024\022\345\256\264\345\270\255\351\207\207\351\233\206\345\245\226\345\212\261\0220\n\nm_feastn"
    "um\030\024 \001(\005B\034\302\377\024\030\345\215\225\345\234\272\345\256\264\345\270\255\351\207\207\351\233\206\346\254\241\346\225\260\022*"
    "\n\nm_interval\030\025 \001(\005B\026\302\377\024\022\350\216\267\345\276\227\347\273\217\351\252\214\351\227\264\351"
    "\232\224\022(\n\tm_skillid\030\026 \001(\005B\025\302\377\024\021\344\270\242\350\233\213\347\263\225\346\212\200\350"
    "\203\275id\022\?\n\007m_stage\030\027 \003(\0132!.proto_ff.E_Marry"
    "WeddingStageDescB\013\302\377\024\003\347\254\254\210\301\024\006\022@\n\006m_fire\030"
    "\030 \003(\0132 .proto_ff.E_MarryWeddingFireDescB"
    "\016\302\377\024\006\347\203\237\350\212\261\210\301\024\002\022C\n\006m_mood\030\031 \003(\0132 .proto_"
    "ff.E_MarryWeddingMoodDescB\021\302\377\024\t\346\260\233\345\233\264\345\200\274"
    "\210\301\024\005\"Q\n\022Sheet_MarryWedding\022;\n\023E_MarryWed"
    "ding_List\030\001 \003(\0132\030.proto_ff.E_MarryWeddin"
    "gB\004\210\301\024\002\"~\n\nE_MarryExp\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024"
    "\006\347\255\211\347\272\247\022&\n\014m_weddingexp\030\002 \001(\005B\020\302\377\024\014\345\251\232\345\256"
    "\264\347\273\217\351\252\214\022.\n\013m_dayexpmax\030\003 \001(\005B\031\302\377\024\025\346\257\217\346\227\245"
    "\346\234\200\345\244\247\347\273\217\351\252\214\345\200\274\"F\n\016Sheet_MarryExp\0224\n\017E_M"
    "arryExp_List\030\001 \003(\0132\024.proto_ff.E_MarryExp"
    "B\005\210\301\024\200\004", 7647);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Marry.proto", &protobuf_RegisterTypes);
  E_MarryMarriage::default_instance_ = new E_MarryMarriage();
  Sheet_MarryMarriage::default_instance_ = new Sheet_MarryMarriage();
  E_MarryBanquet::default_instance_ = new E_MarryBanquet();
  Sheet_MarryBanquet::default_instance_ = new Sheet_MarryBanquet();
  E_MarryLocklvAttributeDesc::default_instance_ = new E_MarryLocklvAttributeDesc();
  E_MarryLocklvSkillDesc::default_instance_ = new E_MarryLocklvSkillDesc();
  E_MarryLocklv::default_instance_ = new E_MarryLocklv();
  Sheet_MarryLocklv::default_instance_ = new Sheet_MarryLocklv();
  E_MarryLockskillSkillDesc::default_instance_ = new E_MarryLockskillSkillDesc();
  E_MarryLockskill::default_instance_ = new E_MarryLockskill();
  Sheet_MarryLockskill::default_instance_ = new Sheet_MarryLockskill();
  E_MarryChildAttributeDesc::default_instance_ = new E_MarryChildAttributeDesc();
  E_MarryChildStariattributeDesc::default_instance_ = new E_MarryChildStariattributeDesc();
  E_MarryChild::default_instance_ = new E_MarryChild();
  Sheet_MarryChild::default_instance_ = new Sheet_MarryChild();
  E_MarryChildvalue::default_instance_ = new E_MarryChildvalue();
  Sheet_MarryChildvalue::default_instance_ = new Sheet_MarryChildvalue();
  E_MarryChildexpGradeDesc::default_instance_ = new E_MarryChildexpGradeDesc();
  E_MarryChildexp::default_instance_ = new E_MarryChildexp();
  Sheet_MarryChildexp::default_instance_ = new Sheet_MarryChildexp();
  E_MarryExpressAttributeDesc::default_instance_ = new E_MarryExpressAttributeDesc();
  E_MarryExpress::default_instance_ = new E_MarryExpress();
  Sheet_MarryExpress::default_instance_ = new Sheet_MarryExpress();
  E_MarryExpresslanguage::default_instance_ = new E_MarryExpresslanguage();
  Sheet_MarryExpresslanguage::default_instance_ = new Sheet_MarryExpresslanguage();
  E_MarryExpressshop::default_instance_ = new E_MarryExpressshop();
  Sheet_MarryExpressshop::default_instance_ = new Sheet_MarryExpressshop();
  E_MarryConstantTourmonsterDesc::default_instance_ = new E_MarryConstantTourmonsterDesc();
  E_MarryConstant::default_instance_ = new E_MarryConstant();
  Sheet_MarryConstant::default_instance_ = new Sheet_MarryConstant();
  E_MarryCommon::default_instance_ = new E_MarryCommon();
  Sheet_MarryCommon::default_instance_ = new Sheet_MarryCommon();
  E_MarryWeddingStageDesc::default_instance_ = new E_MarryWeddingStageDesc();
  E_MarryWeddingFireDesc::default_instance_ = new E_MarryWeddingFireDesc();
  E_MarryWeddingMoodDesc::default_instance_ = new E_MarryWeddingMoodDesc();
  E_MarryWedding::default_instance_ = new E_MarryWedding();
  Sheet_MarryWedding::default_instance_ = new Sheet_MarryWedding();
  E_MarryExp::default_instance_ = new E_MarryExp();
  Sheet_MarryExp::default_instance_ = new Sheet_MarryExp();
  E_MarryMarriage::default_instance_->InitAsDefaultInstance();
  Sheet_MarryMarriage::default_instance_->InitAsDefaultInstance();
  E_MarryBanquet::default_instance_->InitAsDefaultInstance();
  Sheet_MarryBanquet::default_instance_->InitAsDefaultInstance();
  E_MarryLocklvAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_MarryLocklvSkillDesc::default_instance_->InitAsDefaultInstance();
  E_MarryLocklv::default_instance_->InitAsDefaultInstance();
  Sheet_MarryLocklv::default_instance_->InitAsDefaultInstance();
  E_MarryLockskillSkillDesc::default_instance_->InitAsDefaultInstance();
  E_MarryLockskill::default_instance_->InitAsDefaultInstance();
  Sheet_MarryLockskill::default_instance_->InitAsDefaultInstance();
  E_MarryChildAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_MarryChildStariattributeDesc::default_instance_->InitAsDefaultInstance();
  E_MarryChild::default_instance_->InitAsDefaultInstance();
  Sheet_MarryChild::default_instance_->InitAsDefaultInstance();
  E_MarryChildvalue::default_instance_->InitAsDefaultInstance();
  Sheet_MarryChildvalue::default_instance_->InitAsDefaultInstance();
  E_MarryChildexpGradeDesc::default_instance_->InitAsDefaultInstance();
  E_MarryChildexp::default_instance_->InitAsDefaultInstance();
  Sheet_MarryChildexp::default_instance_->InitAsDefaultInstance();
  E_MarryExpressAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_MarryExpress::default_instance_->InitAsDefaultInstance();
  Sheet_MarryExpress::default_instance_->InitAsDefaultInstance();
  E_MarryExpresslanguage::default_instance_->InitAsDefaultInstance();
  Sheet_MarryExpresslanguage::default_instance_->InitAsDefaultInstance();
  E_MarryExpressshop::default_instance_->InitAsDefaultInstance();
  Sheet_MarryExpressshop::default_instance_->InitAsDefaultInstance();
  E_MarryConstantTourmonsterDesc::default_instance_->InitAsDefaultInstance();
  E_MarryConstant::default_instance_->InitAsDefaultInstance();
  Sheet_MarryConstant::default_instance_->InitAsDefaultInstance();
  E_MarryCommon::default_instance_->InitAsDefaultInstance();
  Sheet_MarryCommon::default_instance_->InitAsDefaultInstance();
  E_MarryWeddingStageDesc::default_instance_->InitAsDefaultInstance();
  E_MarryWeddingFireDesc::default_instance_->InitAsDefaultInstance();
  E_MarryWeddingMoodDesc::default_instance_->InitAsDefaultInstance();
  E_MarryWedding::default_instance_->InitAsDefaultInstance();
  Sheet_MarryWedding::default_instance_->InitAsDefaultInstance();
  E_MarryExp::default_instance_->InitAsDefaultInstance();
  Sheet_MarryExp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fMarry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fMarry_2eproto {
  StaticDescriptorInitializer_E_5fMarry_2eproto() {
    protobuf_AddDesc_E_5fMarry_2eproto();
  }
} static_descriptor_initializer_E_5fMarry_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_MarryMarriage::kMIdFieldNumber;
const int E_MarryMarriage::kMWeddingnameFieldNumber;
const int E_MarryMarriage::kMBanquetFieldNumber;
const int E_MarryMarriage::kMCruiseFieldNumber;
const int E_MarryMarriage::kMMoneyFieldNumber;
const int E_MarryMarriage::kMPriceFieldNumber;
const int E_MarryMarriage::kMFirstboxidFieldNumber;
const int E_MarryMarriage::kMFirstaddpowerFieldNumber;
const int E_MarryMarriage::kMRepeatboxidFieldNumber;
const int E_MarryMarriage::kMRepeataddpowerFieldNumber;
const int E_MarryMarriage::kMTitleidFieldNumber;
const int E_MarryMarriage::kMEquipFieldNumber;
const int E_MarryMarriage::kMFreepriceFieldNumber;
#endif  // !_MSC_VER

E_MarryMarriage::E_MarryMarriage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryMarriage::InitAsDefaultInstance() {
}

E_MarryMarriage::E_MarryMarriage(const E_MarryMarriage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryMarriage::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_weddingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_banquet_ = 0;
  m_cruise_ = 0;
  m_money_ = 0;
  m_price_ = 0;
  m_firstboxid_ = 0;
  m_firstaddpower_ = 0;
  m_repeatboxid_ = 0;
  m_repeataddpower_ = 0;
  m_titleid_ = 0;
  m_equip_ = 0;
  m_freeprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryMarriage::~E_MarryMarriage() {
  SharedDtor();
}

void E_MarryMarriage::SharedDtor() {
  if (m_weddingname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_weddingname_;
  }
  if (this != default_instance_) {
  }
}

void E_MarryMarriage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryMarriage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryMarriage_descriptor_;
}

const E_MarryMarriage& E_MarryMarriage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryMarriage* E_MarryMarriage::default_instance_ = NULL;

E_MarryMarriage* E_MarryMarriage::New() const {
  return new E_MarryMarriage;
}

void E_MarryMarriage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_weddingname()) {
      if (m_weddingname_ != &::google::protobuf::internal::kEmptyString) {
        m_weddingname_->clear();
      }
    }
    m_banquet_ = 0;
    m_cruise_ = 0;
    m_money_ = 0;
    m_price_ = 0;
    m_firstboxid_ = 0;
    m_firstaddpower_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_repeatboxid_ = 0;
    m_repeataddpower_ = 0;
    m_titleid_ = 0;
    m_equip_ = 0;
    m_freeprice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryMarriage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_weddingname;
        break;
      }

      // optional string m_weddingname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_weddingname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_weddingname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_weddingname().data(), this->m_weddingname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_banquet;
        break;
      }

      // optional int32 m_banquet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_banquet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_banquet_)));
          set_has_m_banquet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_cruise;
        break;
      }

      // optional int32 m_cruise = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cruise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cruise_)));
          set_has_m_cruise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_money;
        break;
      }

      // optional int32 m_money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_money_)));
          set_has_m_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_price;
        break;
      }

      // optional int32 m_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_firstboxid;
        break;
      }

      // optional int32 m_firstboxid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_firstboxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_firstboxid_)));
          set_has_m_firstboxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_firstaddpower;
        break;
      }

      // optional int32 m_firstaddpower = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_firstaddpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_firstaddpower_)));
          set_has_m_firstaddpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_repeatboxid;
        break;
      }

      // optional int32 m_repeatboxid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_repeatboxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_repeatboxid_)));
          set_has_m_repeatboxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_repeataddpower;
        break;
      }

      // optional int32 m_repeataddpower = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_repeataddpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_repeataddpower_)));
          set_has_m_repeataddpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_titleid;
        break;
      }

      // optional int32 m_titleid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_titleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_titleid_)));
          set_has_m_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_equip;
        break;
      }

      // optional int32 m_equip = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equip_)));
          set_has_m_equip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_freeprice;
        break;
      }

      // optional int32 m_freeprice = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_freeprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_freeprice_)));
          set_has_m_freeprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryMarriage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_weddingname = 2;
  if (has_m_weddingname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_weddingname().data(), this->m_weddingname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_weddingname(), output);
  }

  // optional int32 m_banquet = 3;
  if (has_m_banquet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_banquet(), output);
  }

  // optional int32 m_cruise = 4;
  if (has_m_cruise()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_cruise(), output);
  }

  // optional int32 m_money = 5;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_money(), output);
  }

  // optional int32 m_price = 6;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_price(), output);
  }

  // optional int32 m_firstboxid = 7;
  if (has_m_firstboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_firstboxid(), output);
  }

  // optional int32 m_firstaddpower = 8;
  if (has_m_firstaddpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_firstaddpower(), output);
  }

  // optional int32 m_repeatboxid = 9;
  if (has_m_repeatboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_repeatboxid(), output);
  }

  // optional int32 m_repeataddpower = 10;
  if (has_m_repeataddpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_repeataddpower(), output);
  }

  // optional int32 m_titleid = 11;
  if (has_m_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_titleid(), output);
  }

  // optional int32 m_equip = 12;
  if (has_m_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_equip(), output);
  }

  // optional int32 m_freeprice = 13;
  if (has_m_freeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_freeprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryMarriage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_weddingname = 2;
  if (has_m_weddingname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_weddingname().data(), this->m_weddingname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_weddingname(), target);
  }

  // optional int32 m_banquet = 3;
  if (has_m_banquet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_banquet(), target);
  }

  // optional int32 m_cruise = 4;
  if (has_m_cruise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_cruise(), target);
  }

  // optional int32 m_money = 5;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_money(), target);
  }

  // optional int32 m_price = 6;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_price(), target);
  }

  // optional int32 m_firstboxid = 7;
  if (has_m_firstboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_firstboxid(), target);
  }

  // optional int32 m_firstaddpower = 8;
  if (has_m_firstaddpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_firstaddpower(), target);
  }

  // optional int32 m_repeatboxid = 9;
  if (has_m_repeatboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_repeatboxid(), target);
  }

  // optional int32 m_repeataddpower = 10;
  if (has_m_repeataddpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_repeataddpower(), target);
  }

  // optional int32 m_titleid = 11;
  if (has_m_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_titleid(), target);
  }

  // optional int32 m_equip = 12;
  if (has_m_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_equip(), target);
  }

  // optional int32 m_freeprice = 13;
  if (has_m_freeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_freeprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryMarriage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_weddingname = 2;
    if (has_m_weddingname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_weddingname());
    }

    // optional int32 m_banquet = 3;
    if (has_m_banquet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_banquet());
    }

    // optional int32 m_cruise = 4;
    if (has_m_cruise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cruise());
    }

    // optional int32 m_money = 5;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_money());
    }

    // optional int32 m_price = 6;
    if (has_m_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_price());
    }

    // optional int32 m_firstboxid = 7;
    if (has_m_firstboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_firstboxid());
    }

    // optional int32 m_firstaddpower = 8;
    if (has_m_firstaddpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_firstaddpower());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_repeatboxid = 9;
    if (has_m_repeatboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_repeatboxid());
    }

    // optional int32 m_repeataddpower = 10;
    if (has_m_repeataddpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_repeataddpower());
    }

    // optional int32 m_titleid = 11;
    if (has_m_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_titleid());
    }

    // optional int32 m_equip = 12;
    if (has_m_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equip());
    }

    // optional int32 m_freeprice = 13;
    if (has_m_freeprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_freeprice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryMarriage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryMarriage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryMarriage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryMarriage::MergeFrom(const E_MarryMarriage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_weddingname()) {
      set_m_weddingname(from.m_weddingname());
    }
    if (from.has_m_banquet()) {
      set_m_banquet(from.m_banquet());
    }
    if (from.has_m_cruise()) {
      set_m_cruise(from.m_cruise());
    }
    if (from.has_m_money()) {
      set_m_money(from.m_money());
    }
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
    if (from.has_m_firstboxid()) {
      set_m_firstboxid(from.m_firstboxid());
    }
    if (from.has_m_firstaddpower()) {
      set_m_firstaddpower(from.m_firstaddpower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_repeatboxid()) {
      set_m_repeatboxid(from.m_repeatboxid());
    }
    if (from.has_m_repeataddpower()) {
      set_m_repeataddpower(from.m_repeataddpower());
    }
    if (from.has_m_titleid()) {
      set_m_titleid(from.m_titleid());
    }
    if (from.has_m_equip()) {
      set_m_equip(from.m_equip());
    }
    if (from.has_m_freeprice()) {
      set_m_freeprice(from.m_freeprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryMarriage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryMarriage::CopyFrom(const E_MarryMarriage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryMarriage::IsInitialized() const {

  return true;
}

void E_MarryMarriage::Swap(E_MarryMarriage* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_weddingname_, other->m_weddingname_);
    std::swap(m_banquet_, other->m_banquet_);
    std::swap(m_cruise_, other->m_cruise_);
    std::swap(m_money_, other->m_money_);
    std::swap(m_price_, other->m_price_);
    std::swap(m_firstboxid_, other->m_firstboxid_);
    std::swap(m_firstaddpower_, other->m_firstaddpower_);
    std::swap(m_repeatboxid_, other->m_repeatboxid_);
    std::swap(m_repeataddpower_, other->m_repeataddpower_);
    std::swap(m_titleid_, other->m_titleid_);
    std::swap(m_equip_, other->m_equip_);
    std::swap(m_freeprice_, other->m_freeprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryMarriage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryMarriage_descriptor_;
  metadata.reflection = E_MarryMarriage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarryMarriage::kEMarryMarriageListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarryMarriage::Sheet_MarryMarriage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarryMarriage::InitAsDefaultInstance() {
}

Sheet_MarryMarriage::Sheet_MarryMarriage(const Sheet_MarryMarriage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarryMarriage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarryMarriage::~Sheet_MarryMarriage() {
  SharedDtor();
}

void Sheet_MarryMarriage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarryMarriage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarryMarriage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarryMarriage_descriptor_;
}

const Sheet_MarryMarriage& Sheet_MarryMarriage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

Sheet_MarryMarriage* Sheet_MarryMarriage::default_instance_ = NULL;

Sheet_MarryMarriage* Sheet_MarryMarriage::New() const {
  return new Sheet_MarryMarriage;
}

void Sheet_MarryMarriage::Clear() {
  e_marrymarriage_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarryMarriage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarryMarriage E_MarryMarriage_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarryMarriage_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marrymarriage_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarryMarriage_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarryMarriage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarryMarriage E_MarryMarriage_List = 1;
  for (int i = 0; i < this->e_marrymarriage_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marrymarriage_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarryMarriage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarryMarriage E_MarryMarriage_List = 1;
  for (int i = 0; i < this->e_marrymarriage_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marrymarriage_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarryMarriage::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarryMarriage E_MarryMarriage_List = 1;
  total_size += 1 * this->e_marrymarriage_list_size();
  for (int i = 0; i < this->e_marrymarriage_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marrymarriage_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarryMarriage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarryMarriage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarryMarriage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarryMarriage::MergeFrom(const Sheet_MarryMarriage& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marrymarriage_list_.MergeFrom(from.e_marrymarriage_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarryMarriage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarryMarriage::CopyFrom(const Sheet_MarryMarriage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarryMarriage::IsInitialized() const {

  return true;
}

void Sheet_MarryMarriage::Swap(Sheet_MarryMarriage* other) {
  if (other != this) {
    e_marrymarriage_list_.Swap(&other->e_marrymarriage_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarryMarriage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarryMarriage_descriptor_;
  metadata.reflection = Sheet_MarryMarriage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryBanquet::kMIdFieldNumber;
const int E_MarryBanquet::kMBegintimeFieldNumber;
const int E_MarryBanquet::kMFinishtimeFieldNumber;
const int E_MarryBanquet::kMPreBroadSecFieldNumber;
const int E_MarryBanquet::kMBroadInterSecFieldNumber;
#endif  // !_MSC_VER

E_MarryBanquet::E_MarryBanquet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryBanquet::InitAsDefaultInstance() {
}

E_MarryBanquet::E_MarryBanquet(const E_MarryBanquet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryBanquet::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_finishtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_pre_broad_sec_ = 0;
  m_broad_inter_sec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryBanquet::~E_MarryBanquet() {
  SharedDtor();
}

void E_MarryBanquet::SharedDtor() {
  if (m_begintime_ != &::google::protobuf::internal::kEmptyString) {
    delete m_begintime_;
  }
  if (m_finishtime_ != &::google::protobuf::internal::kEmptyString) {
    delete m_finishtime_;
  }
  if (this != default_instance_) {
  }
}

void E_MarryBanquet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryBanquet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryBanquet_descriptor_;
}

const E_MarryBanquet& E_MarryBanquet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryBanquet* E_MarryBanquet::default_instance_ = NULL;

E_MarryBanquet* E_MarryBanquet::New() const {
  return new E_MarryBanquet;
}

void E_MarryBanquet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_begintime()) {
      if (m_begintime_ != &::google::protobuf::internal::kEmptyString) {
        m_begintime_->clear();
      }
    }
    if (has_m_finishtime()) {
      if (m_finishtime_ != &::google::protobuf::internal::kEmptyString) {
        m_finishtime_->clear();
      }
    }
    m_pre_broad_sec_ = 0;
    m_broad_inter_sec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryBanquet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_begintime;
        break;
      }

      // optional string m_begintime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_begintime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_begintime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_begintime().data(), this->m_begintime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_finishtime;
        break;
      }

      // optional string m_finishtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_finishtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_finishtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_finishtime().data(), this->m_finishtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_pre_broad_sec;
        break;
      }

      // optional int32 m_pre_broad_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pre_broad_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pre_broad_sec_)));
          set_has_m_pre_broad_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_broad_inter_sec;
        break;
      }

      // optional int32 m_broad_inter_sec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_broad_inter_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_broad_inter_sec_)));
          set_has_m_broad_inter_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryBanquet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_begintime = 2;
  if (has_m_begintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_begintime().data(), this->m_begintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_begintime(), output);
  }

  // optional string m_finishtime = 3;
  if (has_m_finishtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_finishtime().data(), this->m_finishtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_finishtime(), output);
  }

  // optional int32 m_pre_broad_sec = 4;
  if (has_m_pre_broad_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_pre_broad_sec(), output);
  }

  // optional int32 m_broad_inter_sec = 5;
  if (has_m_broad_inter_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_broad_inter_sec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryBanquet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_begintime = 2;
  if (has_m_begintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_begintime().data(), this->m_begintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_begintime(), target);
  }

  // optional string m_finishtime = 3;
  if (has_m_finishtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_finishtime().data(), this->m_finishtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_finishtime(), target);
  }

  // optional int32 m_pre_broad_sec = 4;
  if (has_m_pre_broad_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_pre_broad_sec(), target);
  }

  // optional int32 m_broad_inter_sec = 5;
  if (has_m_broad_inter_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_broad_inter_sec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryBanquet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_begintime = 2;
    if (has_m_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_begintime());
    }

    // optional string m_finishtime = 3;
    if (has_m_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_finishtime());
    }

    // optional int32 m_pre_broad_sec = 4;
    if (has_m_pre_broad_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pre_broad_sec());
    }

    // optional int32 m_broad_inter_sec = 5;
    if (has_m_broad_inter_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_broad_inter_sec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryBanquet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryBanquet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryBanquet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryBanquet::MergeFrom(const E_MarryBanquet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_begintime()) {
      set_m_begintime(from.m_begintime());
    }
    if (from.has_m_finishtime()) {
      set_m_finishtime(from.m_finishtime());
    }
    if (from.has_m_pre_broad_sec()) {
      set_m_pre_broad_sec(from.m_pre_broad_sec());
    }
    if (from.has_m_broad_inter_sec()) {
      set_m_broad_inter_sec(from.m_broad_inter_sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryBanquet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryBanquet::CopyFrom(const E_MarryBanquet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryBanquet::IsInitialized() const {

  return true;
}

void E_MarryBanquet::Swap(E_MarryBanquet* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_begintime_, other->m_begintime_);
    std::swap(m_finishtime_, other->m_finishtime_);
    std::swap(m_pre_broad_sec_, other->m_pre_broad_sec_);
    std::swap(m_broad_inter_sec_, other->m_broad_inter_sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryBanquet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryBanquet_descriptor_;
  metadata.reflection = E_MarryBanquet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarryBanquet::kEMarryBanquetListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarryBanquet::Sheet_MarryBanquet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarryBanquet::InitAsDefaultInstance() {
}

Sheet_MarryBanquet::Sheet_MarryBanquet(const Sheet_MarryBanquet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarryBanquet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarryBanquet::~Sheet_MarryBanquet() {
  SharedDtor();
}

void Sheet_MarryBanquet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarryBanquet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarryBanquet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarryBanquet_descriptor_;
}

const Sheet_MarryBanquet& Sheet_MarryBanquet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

Sheet_MarryBanquet* Sheet_MarryBanquet::default_instance_ = NULL;

Sheet_MarryBanquet* Sheet_MarryBanquet::New() const {
  return new Sheet_MarryBanquet;
}

void Sheet_MarryBanquet::Clear() {
  e_marrybanquet_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarryBanquet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarryBanquet E_MarryBanquet_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarryBanquet_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marrybanquet_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarryBanquet_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarryBanquet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarryBanquet E_MarryBanquet_List = 1;
  for (int i = 0; i < this->e_marrybanquet_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marrybanquet_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarryBanquet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarryBanquet E_MarryBanquet_List = 1;
  for (int i = 0; i < this->e_marrybanquet_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marrybanquet_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarryBanquet::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarryBanquet E_MarryBanquet_List = 1;
  total_size += 1 * this->e_marrybanquet_list_size();
  for (int i = 0; i < this->e_marrybanquet_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marrybanquet_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarryBanquet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarryBanquet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarryBanquet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarryBanquet::MergeFrom(const Sheet_MarryBanquet& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marrybanquet_list_.MergeFrom(from.e_marrybanquet_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarryBanquet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarryBanquet::CopyFrom(const Sheet_MarryBanquet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarryBanquet::IsInitialized() const {

  return true;
}

void Sheet_MarryBanquet::Swap(Sheet_MarryBanquet* other) {
  if (other != this) {
    e_marrybanquet_list_.Swap(&other->e_marrybanquet_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarryBanquet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarryBanquet_descriptor_;
  metadata.reflection = Sheet_MarryBanquet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryLocklvAttributeDesc::kMValueFieldNumber;
const int E_MarryLocklvAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_MarryLocklvAttributeDesc::E_MarryLocklvAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryLocklvAttributeDesc::InitAsDefaultInstance() {
}

E_MarryLocklvAttributeDesc::E_MarryLocklvAttributeDesc(const E_MarryLocklvAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryLocklvAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryLocklvAttributeDesc::~E_MarryLocklvAttributeDesc() {
  SharedDtor();
}

void E_MarryLocklvAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryLocklvAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryLocklvAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryLocklvAttributeDesc_descriptor_;
}

const E_MarryLocklvAttributeDesc& E_MarryLocklvAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryLocklvAttributeDesc* E_MarryLocklvAttributeDesc::default_instance_ = NULL;

E_MarryLocklvAttributeDesc* E_MarryLocklvAttributeDesc::New() const {
  return new E_MarryLocklvAttributeDesc;
}

void E_MarryLocklvAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryLocklvAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryLocklvAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryLocklvAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryLocklvAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryLocklvAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryLocklvAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryLocklvAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryLocklvAttributeDesc::MergeFrom(const E_MarryLocklvAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryLocklvAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryLocklvAttributeDesc::CopyFrom(const E_MarryLocklvAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryLocklvAttributeDesc::IsInitialized() const {

  return true;
}

void E_MarryLocklvAttributeDesc::Swap(E_MarryLocklvAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryLocklvAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryLocklvAttributeDesc_descriptor_;
  metadata.reflection = E_MarryLocklvAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryLocklvSkillDesc::kMLvFieldNumber;
const int E_MarryLocklvSkillDesc::kMSkillFieldNumber;
#endif  // !_MSC_VER

E_MarryLocklvSkillDesc::E_MarryLocklvSkillDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryLocklvSkillDesc::InitAsDefaultInstance() {
}

E_MarryLocklvSkillDesc::E_MarryLocklvSkillDesc(const E_MarryLocklvSkillDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryLocklvSkillDesc::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_skill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryLocklvSkillDesc::~E_MarryLocklvSkillDesc() {
  SharedDtor();
}

void E_MarryLocklvSkillDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryLocklvSkillDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryLocklvSkillDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryLocklvSkillDesc_descriptor_;
}

const E_MarryLocklvSkillDesc& E_MarryLocklvSkillDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryLocklvSkillDesc* E_MarryLocklvSkillDesc::default_instance_ = NULL;

E_MarryLocklvSkillDesc* E_MarryLocklvSkillDesc::New() const {
  return new E_MarryLocklvSkillDesc;
}

void E_MarryLocklvSkillDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_skill_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryLocklvSkillDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_skill;
        break;
      }

      // optional int32 m_skill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skill_)));
          set_has_m_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryLocklvSkillDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_skill = 2;
  if (has_m_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryLocklvSkillDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_skill = 2;
  if (has_m_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryLocklvSkillDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_skill = 2;
    if (has_m_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryLocklvSkillDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryLocklvSkillDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryLocklvSkillDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryLocklvSkillDesc::MergeFrom(const E_MarryLocklvSkillDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_skill()) {
      set_m_skill(from.m_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryLocklvSkillDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryLocklvSkillDesc::CopyFrom(const E_MarryLocklvSkillDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryLocklvSkillDesc::IsInitialized() const {

  return true;
}

void E_MarryLocklvSkillDesc::Swap(E_MarryLocklvSkillDesc* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_skill_, other->m_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryLocklvSkillDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryLocklvSkillDesc_descriptor_;
  metadata.reflection = E_MarryLocklvSkillDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryLocklv::kMIdFieldNumber;
const int E_MarryLocklv::kMLvFieldNumber;
const int E_MarryLocklv::kMExpFieldNumber;
const int E_MarryLocklv::kMAttributeFieldNumber;
const int E_MarryLocklv::kMSkillFieldNumber;
#endif  // !_MSC_VER

E_MarryLocklv::E_MarryLocklv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryLocklv::InitAsDefaultInstance() {
}

E_MarryLocklv::E_MarryLocklv(const E_MarryLocklv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryLocklv::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_lv_ = 0;
  m_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryLocklv::~E_MarryLocklv() {
  SharedDtor();
}

void E_MarryLocklv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryLocklv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryLocklv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryLocklv_descriptor_;
}

const E_MarryLocklv& E_MarryLocklv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryLocklv* E_MarryLocklv::default_instance_ = NULL;

E_MarryLocklv* E_MarryLocklv::New() const {
  return new E_MarryLocklv;
}

void E_MarryLocklv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_lv_ = 0;
    m_exp_ = 0;
  }
  m_attribute_.Clear();
  m_skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryLocklv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_MarryLocklvAttributeDesc m_attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        if (input->ExpectTag(42)) goto parse_m_skill;
        break;
      }

      // repeated .proto_ff.E_MarryLocklvSkillDesc m_skill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryLocklv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lv(), output);
  }

  // optional int32 m_exp = 3;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_exp(), output);
  }

  // repeated .proto_ff.E_MarryLocklvAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_attribute(i), output);
  }

  // repeated .proto_ff.E_MarryLocklvSkillDesc m_skill = 5;
  for (int i = 0; i < this->m_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryLocklv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lv(), target);
  }

  // optional int32 m_exp = 3;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_exp(), target);
  }

  // repeated .proto_ff.E_MarryLocklvAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_attribute(i), target);
  }

  // repeated .proto_ff.E_MarryLocklvSkillDesc m_skill = 5;
  for (int i = 0; i < this->m_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryLocklv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_lv = 2;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_exp = 3;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

  }
  // repeated .proto_ff.E_MarryLocklvAttributeDesc m_attribute = 4;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  // repeated .proto_ff.E_MarryLocklvSkillDesc m_skill = 5;
  total_size += 1 * this->m_skill_size();
  for (int i = 0; i < this->m_skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_skill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryLocklv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryLocklv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryLocklv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryLocklv::MergeFrom(const E_MarryLocklv& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  m_skill_.MergeFrom(from.m_skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryLocklv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryLocklv::CopyFrom(const E_MarryLocklv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryLocklv::IsInitialized() const {

  return true;
}

void E_MarryLocklv::Swap(E_MarryLocklv* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_exp_, other->m_exp_);
    m_attribute_.Swap(&other->m_attribute_);
    m_skill_.Swap(&other->m_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryLocklv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryLocklv_descriptor_;
  metadata.reflection = E_MarryLocklv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarryLocklv::kEMarryLocklvListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarryLocklv::Sheet_MarryLocklv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarryLocklv::InitAsDefaultInstance() {
}

Sheet_MarryLocklv::Sheet_MarryLocklv(const Sheet_MarryLocklv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarryLocklv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarryLocklv::~Sheet_MarryLocklv() {
  SharedDtor();
}

void Sheet_MarryLocklv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarryLocklv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarryLocklv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarryLocklv_descriptor_;
}

const Sheet_MarryLocklv& Sheet_MarryLocklv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

Sheet_MarryLocklv* Sheet_MarryLocklv::default_instance_ = NULL;

Sheet_MarryLocklv* Sheet_MarryLocklv::New() const {
  return new Sheet_MarryLocklv;
}

void Sheet_MarryLocklv::Clear() {
  e_marrylocklv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarryLocklv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarryLocklv E_MarryLocklv_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarryLocklv_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marrylocklv_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarryLocklv_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarryLocklv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarryLocklv E_MarryLocklv_List = 1;
  for (int i = 0; i < this->e_marrylocklv_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marrylocklv_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarryLocklv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarryLocklv E_MarryLocklv_List = 1;
  for (int i = 0; i < this->e_marrylocklv_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marrylocklv_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarryLocklv::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarryLocklv E_MarryLocklv_List = 1;
  total_size += 1 * this->e_marrylocklv_list_size();
  for (int i = 0; i < this->e_marrylocklv_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marrylocklv_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarryLocklv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarryLocklv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarryLocklv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarryLocklv::MergeFrom(const Sheet_MarryLocklv& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marrylocklv_list_.MergeFrom(from.e_marrylocklv_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarryLocklv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarryLocklv::CopyFrom(const Sheet_MarryLocklv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarryLocklv::IsInitialized() const {

  return true;
}

void Sheet_MarryLocklv::Swap(Sheet_MarryLocklv* other) {
  if (other != this) {
    e_marrylocklv_list_.Swap(&other->e_marrylocklv_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarryLocklv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarryLocklv_descriptor_;
  metadata.reflection = Sheet_MarryLocklv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryLockskillSkillDesc::kMGradeFieldNumber;
const int E_MarryLockskillSkillDesc::kMLvFieldNumber;
#endif  // !_MSC_VER

E_MarryLockskillSkillDesc::E_MarryLockskillSkillDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryLockskillSkillDesc::InitAsDefaultInstance() {
}

E_MarryLockskillSkillDesc::E_MarryLockskillSkillDesc(const E_MarryLockskillSkillDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryLockskillSkillDesc::SharedCtor() {
  _cached_size_ = 0;
  m_grade_ = 0;
  m_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryLockskillSkillDesc::~E_MarryLockskillSkillDesc() {
  SharedDtor();
}

void E_MarryLockskillSkillDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryLockskillSkillDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryLockskillSkillDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryLockskillSkillDesc_descriptor_;
}

const E_MarryLockskillSkillDesc& E_MarryLockskillSkillDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryLockskillSkillDesc* E_MarryLockskillSkillDesc::default_instance_ = NULL;

E_MarryLockskillSkillDesc* E_MarryLockskillSkillDesc::New() const {
  return new E_MarryLockskillSkillDesc;
}

void E_MarryLockskillSkillDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_grade_ = 0;
    m_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryLockskillSkillDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grade_)));
          set_has_m_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryLockskillSkillDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_grade = 1;
  if (has_m_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_grade(), output);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryLockskillSkillDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_grade = 1;
  if (has_m_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_grade(), target);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryLockskillSkillDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_grade = 1;
    if (has_m_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grade());
    }

    // optional int32 m_lv = 2;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryLockskillSkillDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryLockskillSkillDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryLockskillSkillDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryLockskillSkillDesc::MergeFrom(const E_MarryLockskillSkillDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_grade()) {
      set_m_grade(from.m_grade());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryLockskillSkillDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryLockskillSkillDesc::CopyFrom(const E_MarryLockskillSkillDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryLockskillSkillDesc::IsInitialized() const {

  return true;
}

void E_MarryLockskillSkillDesc::Swap(E_MarryLockskillSkillDesc* other) {
  if (other != this) {
    std::swap(m_grade_, other->m_grade_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryLockskillSkillDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryLockskillSkillDesc_descriptor_;
  metadata.reflection = E_MarryLockskillSkillDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryLockskill::kMIdFieldNumber;
const int E_MarryLockskill::kMOrderFieldNumber;
const int E_MarryLockskill::kMSkillidFieldNumber;
const int E_MarryLockskill::kMSkillFieldNumber;
#endif  // !_MSC_VER

E_MarryLockskill::E_MarryLockskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryLockskill::InitAsDefaultInstance() {
}

E_MarryLockskill::E_MarryLockskill(const E_MarryLockskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryLockskill::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_order_ = 0;
  m_skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryLockskill::~E_MarryLockskill() {
  SharedDtor();
}

void E_MarryLockskill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryLockskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryLockskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryLockskill_descriptor_;
}

const E_MarryLockskill& E_MarryLockskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryLockskill* E_MarryLockskill::default_instance_ = NULL;

E_MarryLockskill* E_MarryLockskill::New() const {
  return new E_MarryLockskill;
}

void E_MarryLockskill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_order_ = 0;
    m_skillid_ = 0;
  }
  m_skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryLockskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_order;
        break;
      }

      // optional int32 m_order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_order_)));
          set_has_m_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_skillid;
        break;
      }

      // optional int32 m_skillid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_skill;
        break;
      }

      // repeated .proto_ff.E_MarryLockskillSkillDesc m_skill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryLockskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_order = 2;
  if (has_m_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_order(), output);
  }

  // optional int32 m_skillid = 3;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_skillid(), output);
  }

  // repeated .proto_ff.E_MarryLockskillSkillDesc m_skill = 4;
  for (int i = 0; i < this->m_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryLockskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_order = 2;
  if (has_m_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_order(), target);
  }

  // optional int32 m_skillid = 3;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_skillid(), target);
  }

  // repeated .proto_ff.E_MarryLockskillSkillDesc m_skill = 4;
  for (int i = 0; i < this->m_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryLockskill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_order = 2;
    if (has_m_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_order());
    }

    // optional int32 m_skillid = 3;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

  }
  // repeated .proto_ff.E_MarryLockskillSkillDesc m_skill = 4;
  total_size += 1 * this->m_skill_size();
  for (int i = 0; i < this->m_skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_skill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryLockskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryLockskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryLockskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryLockskill::MergeFrom(const E_MarryLockskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_skill_.MergeFrom(from.m_skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_order()) {
      set_m_order(from.m_order());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryLockskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryLockskill::CopyFrom(const E_MarryLockskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryLockskill::IsInitialized() const {

  return true;
}

void E_MarryLockskill::Swap(E_MarryLockskill* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_order_, other->m_order_);
    std::swap(m_skillid_, other->m_skillid_);
    m_skill_.Swap(&other->m_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryLockskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryLockskill_descriptor_;
  metadata.reflection = E_MarryLockskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarryLockskill::kEMarryLockskillListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarryLockskill::Sheet_MarryLockskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarryLockskill::InitAsDefaultInstance() {
}

Sheet_MarryLockskill::Sheet_MarryLockskill(const Sheet_MarryLockskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarryLockskill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarryLockskill::~Sheet_MarryLockskill() {
  SharedDtor();
}

void Sheet_MarryLockskill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarryLockskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarryLockskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarryLockskill_descriptor_;
}

const Sheet_MarryLockskill& Sheet_MarryLockskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

Sheet_MarryLockskill* Sheet_MarryLockskill::default_instance_ = NULL;

Sheet_MarryLockskill* Sheet_MarryLockskill::New() const {
  return new Sheet_MarryLockskill;
}

void Sheet_MarryLockskill::Clear() {
  e_marrylockskill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarryLockskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarryLockskill E_MarryLockskill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarryLockskill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marrylockskill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarryLockskill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarryLockskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarryLockskill E_MarryLockskill_List = 1;
  for (int i = 0; i < this->e_marrylockskill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marrylockskill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarryLockskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarryLockskill E_MarryLockskill_List = 1;
  for (int i = 0; i < this->e_marrylockskill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marrylockskill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarryLockskill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarryLockskill E_MarryLockskill_List = 1;
  total_size += 1 * this->e_marrylockskill_list_size();
  for (int i = 0; i < this->e_marrylockskill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marrylockskill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarryLockskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarryLockskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarryLockskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarryLockskill::MergeFrom(const Sheet_MarryLockskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marrylockskill_list_.MergeFrom(from.e_marrylockskill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarryLockskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarryLockskill::CopyFrom(const Sheet_MarryLockskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarryLockskill::IsInitialized() const {

  return true;
}

void Sheet_MarryLockskill::Swap(Sheet_MarryLockskill* other) {
  if (other != this) {
    e_marrylockskill_list_.Swap(&other->e_marrylockskill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarryLockskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarryLockskill_descriptor_;
  metadata.reflection = Sheet_MarryLockskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryChildAttributeDesc::kMValueFieldNumber;
const int E_MarryChildAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_MarryChildAttributeDesc::E_MarryChildAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryChildAttributeDesc::InitAsDefaultInstance() {
}

E_MarryChildAttributeDesc::E_MarryChildAttributeDesc(const E_MarryChildAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryChildAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryChildAttributeDesc::~E_MarryChildAttributeDesc() {
  SharedDtor();
}

void E_MarryChildAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryChildAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryChildAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryChildAttributeDesc_descriptor_;
}

const E_MarryChildAttributeDesc& E_MarryChildAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryChildAttributeDesc* E_MarryChildAttributeDesc::default_instance_ = NULL;

E_MarryChildAttributeDesc* E_MarryChildAttributeDesc::New() const {
  return new E_MarryChildAttributeDesc;
}

void E_MarryChildAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryChildAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryChildAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryChildAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryChildAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryChildAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryChildAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryChildAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryChildAttributeDesc::MergeFrom(const E_MarryChildAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryChildAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryChildAttributeDesc::CopyFrom(const E_MarryChildAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryChildAttributeDesc::IsInitialized() const {

  return true;
}

void E_MarryChildAttributeDesc::Swap(E_MarryChildAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryChildAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryChildAttributeDesc_descriptor_;
  metadata.reflection = E_MarryChildAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryChildStariattributeDesc::kMValueFieldNumber;
const int E_MarryChildStariattributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_MarryChildStariattributeDesc::E_MarryChildStariattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryChildStariattributeDesc::InitAsDefaultInstance() {
}

E_MarryChildStariattributeDesc::E_MarryChildStariattributeDesc(const E_MarryChildStariattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryChildStariattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryChildStariattributeDesc::~E_MarryChildStariattributeDesc() {
  SharedDtor();
}

void E_MarryChildStariattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryChildStariattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryChildStariattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryChildStariattributeDesc_descriptor_;
}

const E_MarryChildStariattributeDesc& E_MarryChildStariattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryChildStariattributeDesc* E_MarryChildStariattributeDesc::default_instance_ = NULL;

E_MarryChildStariattributeDesc* E_MarryChildStariattributeDesc::New() const {
  return new E_MarryChildStariattributeDesc;
}

void E_MarryChildStariattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryChildStariattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryChildStariattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryChildStariattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryChildStariattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryChildStariattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryChildStariattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryChildStariattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryChildStariattributeDesc::MergeFrom(const E_MarryChildStariattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryChildStariattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryChildStariattributeDesc::CopyFrom(const E_MarryChildStariattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryChildStariattributeDesc::IsInitialized() const {

  return true;
}

void E_MarryChildStariattributeDesc::Swap(E_MarryChildStariattributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryChildStariattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryChildStariattributeDesc_descriptor_;
  metadata.reflection = E_MarryChildStariattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryChild::kMChildidFieldNumber;
const int E_MarryChild::kMItemidFieldNumber;
const int E_MarryChild::kMChildnameFieldNumber;
const int E_MarryChild::kMChildqualityFieldNumber;
const int E_MarryChild::kMHandzFieldNumber;
const int E_MarryChild::kMHandznameFieldNumber;
const int E_MarryChild::kMSkillidFieldNumber;
const int E_MarryChild::kMStaridFieldNumber;
const int E_MarryChild::kMStarnumFieldNumber;
const int E_MarryChild::kMAttributeFieldNumber;
const int E_MarryChild::kMStariattributeFieldNumber;
#endif  // !_MSC_VER

E_MarryChild::E_MarryChild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryChild::InitAsDefaultInstance() {
}

E_MarryChild::E_MarryChild(const E_MarryChild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryChild::SharedCtor() {
  _cached_size_ = 0;
  m_childid_ = GOOGLE_LONGLONG(0);
  m_itemid_ = GOOGLE_LONGLONG(0);
  m_childname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_childquality_ = 0;
  m_handz_ = 0;
  m_handzname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_skillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starid_ = GOOGLE_LONGLONG(0);
  m_starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryChild::~E_MarryChild() {
  SharedDtor();
}

void E_MarryChild::SharedDtor() {
  if (m_childname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_childname_;
  }
  if (m_handzname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_handzname_;
  }
  if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_skillid_;
  }
  if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starnum_;
  }
  if (this != default_instance_) {
  }
}

void E_MarryChild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryChild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryChild_descriptor_;
}

const E_MarryChild& E_MarryChild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryChild* E_MarryChild::default_instance_ = NULL;

E_MarryChild* E_MarryChild::New() const {
  return new E_MarryChild;
}

void E_MarryChild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_childid_ = GOOGLE_LONGLONG(0);
    m_itemid_ = GOOGLE_LONGLONG(0);
    if (has_m_childname()) {
      if (m_childname_ != &::google::protobuf::internal::kEmptyString) {
        m_childname_->clear();
      }
    }
    m_childquality_ = 0;
    m_handz_ = 0;
    if (has_m_handzname()) {
      if (m_handzname_ != &::google::protobuf::internal::kEmptyString) {
        m_handzname_->clear();
      }
    }
    if (has_m_skillid()) {
      if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
        m_skillid_->clear();
      }
    }
    m_starid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_starnum()) {
      if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
        m_starnum_->clear();
      }
    }
  }
  m_attribute_.Clear();
  m_stariattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryChild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_childid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_childid_)));
          set_has_m_childid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_itemid;
        break;
      }

      // optional int64 m_itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_childname;
        break;
      }

      // optional string m_childname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_childname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_childname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_childname().data(), this->m_childname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_childquality;
        break;
      }

      // optional int32 m_childquality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_childquality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_childquality_)));
          set_has_m_childquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_handz;
        break;
      }

      // optional int32 m_handz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_handz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_handz_)));
          set_has_m_handz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_handzname;
        break;
      }

      // optional string m_handzname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_handzname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_handzname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_handzname().data(), this->m_handzname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_skillid;
        break;
      }

      // optional string m_skillid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skillid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_skillid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_skillid().data(), this->m_skillid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_starid;
        break;
      }

      // optional int64 m_starid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_starid_)));
          set_has_m_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_starnum;
        break;
      }

      // optional string m_starnum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_starnum().data(), this->m_starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_MarryChildAttributeDesc m_attribute = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_attribute;
        if (input->ExpectTag(90)) goto parse_m_stariattribute;
        break;
      }

      // repeated .proto_ff.E_MarryChildStariattributeDesc m_stariattribute = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_stariattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_stariattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_stariattribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryChild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_childid = 1;
  if (has_m_childid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_childid(), output);
  }

  // optional int64 m_itemid = 2;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_itemid(), output);
  }

  // optional string m_childname = 3;
  if (has_m_childname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_childname().data(), this->m_childname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_childname(), output);
  }

  // optional int32 m_childquality = 4;
  if (has_m_childquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_childquality(), output);
  }

  // optional int32 m_handz = 5;
  if (has_m_handz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_handz(), output);
  }

  // optional string m_handzname = 6;
  if (has_m_handzname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_handzname().data(), this->m_handzname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_handzname(), output);
  }

  // optional string m_skillid = 7;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skillid().data(), this->m_skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_skillid(), output);
  }

  // optional int64 m_starid = 8;
  if (has_m_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->m_starid(), output);
  }

  // optional string m_starnum = 9;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_starnum(), output);
  }

  // repeated .proto_ff.E_MarryChildAttributeDesc m_attribute = 10;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_attribute(i), output);
  }

  // repeated .proto_ff.E_MarryChildStariattributeDesc m_stariattribute = 11;
  for (int i = 0; i < this->m_stariattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->m_stariattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryChild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_childid = 1;
  if (has_m_childid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_childid(), target);
  }

  // optional int64 m_itemid = 2;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_itemid(), target);
  }

  // optional string m_childname = 3;
  if (has_m_childname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_childname().data(), this->m_childname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_childname(), target);
  }

  // optional int32 m_childquality = 4;
  if (has_m_childquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_childquality(), target);
  }

  // optional int32 m_handz = 5;
  if (has_m_handz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_handz(), target);
  }

  // optional string m_handzname = 6;
  if (has_m_handzname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_handzname().data(), this->m_handzname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_handzname(), target);
  }

  // optional string m_skillid = 7;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skillid().data(), this->m_skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_skillid(), target);
  }

  // optional int64 m_starid = 8;
  if (has_m_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->m_starid(), target);
  }

  // optional string m_starnum = 9;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_starnum(), target);
  }

  // repeated .proto_ff.E_MarryChildAttributeDesc m_attribute = 10;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_attribute(i), target);
  }

  // repeated .proto_ff.E_MarryChildStariattributeDesc m_stariattribute = 11;
  for (int i = 0; i < this->m_stariattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->m_stariattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryChild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_childid = 1;
    if (has_m_childid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_childid());
    }

    // optional int64 m_itemid = 2;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_itemid());
    }

    // optional string m_childname = 3;
    if (has_m_childname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_childname());
    }

    // optional int32 m_childquality = 4;
    if (has_m_childquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_childquality());
    }

    // optional int32 m_handz = 5;
    if (has_m_handz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_handz());
    }

    // optional string m_handzname = 6;
    if (has_m_handzname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_handzname());
    }

    // optional string m_skillid = 7;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_skillid());
    }

    // optional int64 m_starid = 8;
    if (has_m_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_starid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_starnum = 9;
    if (has_m_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_starnum());
    }

  }
  // repeated .proto_ff.E_MarryChildAttributeDesc m_attribute = 10;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  // repeated .proto_ff.E_MarryChildStariattributeDesc m_stariattribute = 11;
  total_size += 1 * this->m_stariattribute_size();
  for (int i = 0; i < this->m_stariattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_stariattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryChild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryChild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryChild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryChild::MergeFrom(const E_MarryChild& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  m_stariattribute_.MergeFrom(from.m_stariattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_childid()) {
      set_m_childid(from.m_childid());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_childname()) {
      set_m_childname(from.m_childname());
    }
    if (from.has_m_childquality()) {
      set_m_childquality(from.m_childquality());
    }
    if (from.has_m_handz()) {
      set_m_handz(from.m_handz());
    }
    if (from.has_m_handzname()) {
      set_m_handzname(from.m_handzname());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_starid()) {
      set_m_starid(from.m_starid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_starnum()) {
      set_m_starnum(from.m_starnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryChild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryChild::CopyFrom(const E_MarryChild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryChild::IsInitialized() const {

  return true;
}

void E_MarryChild::Swap(E_MarryChild* other) {
  if (other != this) {
    std::swap(m_childid_, other->m_childid_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_childname_, other->m_childname_);
    std::swap(m_childquality_, other->m_childquality_);
    std::swap(m_handz_, other->m_handz_);
    std::swap(m_handzname_, other->m_handzname_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_starid_, other->m_starid_);
    std::swap(m_starnum_, other->m_starnum_);
    m_attribute_.Swap(&other->m_attribute_);
    m_stariattribute_.Swap(&other->m_stariattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryChild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryChild_descriptor_;
  metadata.reflection = E_MarryChild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarryChild::kEMarryChildListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarryChild::Sheet_MarryChild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarryChild::InitAsDefaultInstance() {
}

Sheet_MarryChild::Sheet_MarryChild(const Sheet_MarryChild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarryChild::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarryChild::~Sheet_MarryChild() {
  SharedDtor();
}

void Sheet_MarryChild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarryChild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarryChild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarryChild_descriptor_;
}

const Sheet_MarryChild& Sheet_MarryChild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

Sheet_MarryChild* Sheet_MarryChild::default_instance_ = NULL;

Sheet_MarryChild* Sheet_MarryChild::New() const {
  return new Sheet_MarryChild;
}

void Sheet_MarryChild::Clear() {
  e_marrychild_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarryChild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarryChild E_MarryChild_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarryChild_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marrychild_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarryChild_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarryChild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarryChild E_MarryChild_List = 1;
  for (int i = 0; i < this->e_marrychild_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marrychild_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarryChild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarryChild E_MarryChild_List = 1;
  for (int i = 0; i < this->e_marrychild_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marrychild_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarryChild::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarryChild E_MarryChild_List = 1;
  total_size += 1 * this->e_marrychild_list_size();
  for (int i = 0; i < this->e_marrychild_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marrychild_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarryChild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarryChild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarryChild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarryChild::MergeFrom(const Sheet_MarryChild& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marrychild_list_.MergeFrom(from.e_marrychild_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarryChild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarryChild::CopyFrom(const Sheet_MarryChild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarryChild::IsInitialized() const {

  return true;
}

void Sheet_MarryChild::Swap(Sheet_MarryChild* other) {
  if (other != this) {
    e_marrychild_list_.Swap(&other->e_marrychild_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarryChild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarryChild_descriptor_;
  metadata.reflection = Sheet_MarryChild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryChildvalue::kMIdFieldNumber;
const int E_MarryChildvalue::kMLvvalueFieldNumber;
#endif  // !_MSC_VER

E_MarryChildvalue::E_MarryChildvalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryChildvalue::InitAsDefaultInstance() {
}

E_MarryChildvalue::E_MarryChildvalue(const E_MarryChildvalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryChildvalue::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryChildvalue::~E_MarryChildvalue() {
  SharedDtor();
}

void E_MarryChildvalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryChildvalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryChildvalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryChildvalue_descriptor_;
}

const E_MarryChildvalue& E_MarryChildvalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryChildvalue* E_MarryChildvalue::default_instance_ = NULL;

E_MarryChildvalue* E_MarryChildvalue::New() const {
  return new E_MarryChildvalue;
}

void E_MarryChildvalue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
  }
  m_lvvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryChildvalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lvvalue;
        break;
      }

      // repeated int32 m_lvvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_lvvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_lvvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lvvalue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryChildvalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // repeated int32 m_lvvalue = 2;
  for (int i = 0; i < this->m_lvvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_lvvalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryChildvalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // repeated int32 m_lvvalue = 2;
  for (int i = 0; i < this->m_lvvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_lvvalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryChildvalue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

  }
  // repeated int32 m_lvvalue = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_lvvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_lvvalue(i));
    }
    total_size += 1 * this->m_lvvalue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryChildvalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryChildvalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryChildvalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryChildvalue::MergeFrom(const E_MarryChildvalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_lvvalue_.MergeFrom(from.m_lvvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryChildvalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryChildvalue::CopyFrom(const E_MarryChildvalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryChildvalue::IsInitialized() const {

  return true;
}

void E_MarryChildvalue::Swap(E_MarryChildvalue* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    m_lvvalue_.Swap(&other->m_lvvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryChildvalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryChildvalue_descriptor_;
  metadata.reflection = E_MarryChildvalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarryChildvalue::kEMarryChildvalueListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarryChildvalue::Sheet_MarryChildvalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarryChildvalue::InitAsDefaultInstance() {
}

Sheet_MarryChildvalue::Sheet_MarryChildvalue(const Sheet_MarryChildvalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarryChildvalue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarryChildvalue::~Sheet_MarryChildvalue() {
  SharedDtor();
}

void Sheet_MarryChildvalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarryChildvalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarryChildvalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarryChildvalue_descriptor_;
}

const Sheet_MarryChildvalue& Sheet_MarryChildvalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

Sheet_MarryChildvalue* Sheet_MarryChildvalue::default_instance_ = NULL;

Sheet_MarryChildvalue* Sheet_MarryChildvalue::New() const {
  return new Sheet_MarryChildvalue;
}

void Sheet_MarryChildvalue::Clear() {
  e_marrychildvalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarryChildvalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarryChildvalue E_MarryChildvalue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarryChildvalue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marrychildvalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarryChildvalue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarryChildvalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarryChildvalue E_MarryChildvalue_List = 1;
  for (int i = 0; i < this->e_marrychildvalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marrychildvalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarryChildvalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarryChildvalue E_MarryChildvalue_List = 1;
  for (int i = 0; i < this->e_marrychildvalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marrychildvalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarryChildvalue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarryChildvalue E_MarryChildvalue_List = 1;
  total_size += 1 * this->e_marrychildvalue_list_size();
  for (int i = 0; i < this->e_marrychildvalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marrychildvalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarryChildvalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarryChildvalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarryChildvalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarryChildvalue::MergeFrom(const Sheet_MarryChildvalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marrychildvalue_list_.MergeFrom(from.e_marrychildvalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarryChildvalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarryChildvalue::CopyFrom(const Sheet_MarryChildvalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarryChildvalue::IsInitialized() const {

  return true;
}

void Sheet_MarryChildvalue::Swap(Sheet_MarryChildvalue* other) {
  if (other != this) {
    e_marrychildvalue_list_.Swap(&other->e_marrychildvalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarryChildvalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarryChildvalue_descriptor_;
  metadata.reflection = Sheet_MarryChildvalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryChildexpGradeDesc::kMExpFieldNumber;
const int E_MarryChildexpGradeDesc::kMLvFieldNumber;
#endif  // !_MSC_VER

E_MarryChildexpGradeDesc::E_MarryChildexpGradeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryChildexpGradeDesc::InitAsDefaultInstance() {
}

E_MarryChildexpGradeDesc::E_MarryChildexpGradeDesc(const E_MarryChildexpGradeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryChildexpGradeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_exp_ = 0;
  m_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryChildexpGradeDesc::~E_MarryChildexpGradeDesc() {
  SharedDtor();
}

void E_MarryChildexpGradeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryChildexpGradeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryChildexpGradeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryChildexpGradeDesc_descriptor_;
}

const E_MarryChildexpGradeDesc& E_MarryChildexpGradeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryChildexpGradeDesc* E_MarryChildexpGradeDesc::default_instance_ = NULL;

E_MarryChildexpGradeDesc* E_MarryChildexpGradeDesc::New() const {
  return new E_MarryChildexpGradeDesc;
}

void E_MarryChildexpGradeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_exp_ = 0;
    m_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryChildexpGradeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryChildexpGradeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_exp = 1;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_exp(), output);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryChildexpGradeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_exp = 1;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_exp(), target);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryChildexpGradeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_exp = 1;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int32 m_lv = 2;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryChildexpGradeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryChildexpGradeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryChildexpGradeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryChildexpGradeDesc::MergeFrom(const E_MarryChildexpGradeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryChildexpGradeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryChildexpGradeDesc::CopyFrom(const E_MarryChildexpGradeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryChildexpGradeDesc::IsInitialized() const {

  return true;
}

void E_MarryChildexpGradeDesc::Swap(E_MarryChildexpGradeDesc* other) {
  if (other != this) {
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryChildexpGradeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryChildexpGradeDesc_descriptor_;
  metadata.reflection = E_MarryChildexpGradeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryChildexp::kMLvFieldNumber;
const int E_MarryChildexp::kMGradeFieldNumber;
#endif  // !_MSC_VER

E_MarryChildexp::E_MarryChildexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryChildexp::InitAsDefaultInstance() {
}

E_MarryChildexp::E_MarryChildexp(const E_MarryChildexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryChildexp::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryChildexp::~E_MarryChildexp() {
  SharedDtor();
}

void E_MarryChildexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryChildexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryChildexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryChildexp_descriptor_;
}

const E_MarryChildexp& E_MarryChildexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryChildexp* E_MarryChildexp::default_instance_ = NULL;

E_MarryChildexp* E_MarryChildexp::New() const {
  return new E_MarryChildexp;
}

void E_MarryChildexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
  }
  m_grade_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryChildexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_grade;
        break;
      }

      // repeated .proto_ff.E_MarryChildexpGradeDesc m_grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_grade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_grade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_grade;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryChildexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // repeated .proto_ff.E_MarryChildexpGradeDesc m_grade = 2;
  for (int i = 0; i < this->m_grade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_grade(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryChildexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // repeated .proto_ff.E_MarryChildexpGradeDesc m_grade = 2;
  for (int i = 0; i < this->m_grade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_grade(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryChildexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

  }
  // repeated .proto_ff.E_MarryChildexpGradeDesc m_grade = 2;
  total_size += 1 * this->m_grade_size();
  for (int i = 0; i < this->m_grade_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_grade(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryChildexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryChildexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryChildexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryChildexp::MergeFrom(const E_MarryChildexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_grade_.MergeFrom(from.m_grade_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryChildexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryChildexp::CopyFrom(const E_MarryChildexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryChildexp::IsInitialized() const {

  return true;
}

void E_MarryChildexp::Swap(E_MarryChildexp* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    m_grade_.Swap(&other->m_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryChildexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryChildexp_descriptor_;
  metadata.reflection = E_MarryChildexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarryChildexp::kEMarryChildexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarryChildexp::Sheet_MarryChildexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarryChildexp::InitAsDefaultInstance() {
}

Sheet_MarryChildexp::Sheet_MarryChildexp(const Sheet_MarryChildexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarryChildexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarryChildexp::~Sheet_MarryChildexp() {
  SharedDtor();
}

void Sheet_MarryChildexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarryChildexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarryChildexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarryChildexp_descriptor_;
}

const Sheet_MarryChildexp& Sheet_MarryChildexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

Sheet_MarryChildexp* Sheet_MarryChildexp::default_instance_ = NULL;

Sheet_MarryChildexp* Sheet_MarryChildexp::New() const {
  return new Sheet_MarryChildexp;
}

void Sheet_MarryChildexp::Clear() {
  e_marrychildexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarryChildexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarryChildexp E_MarryChildexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarryChildexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marrychildexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarryChildexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarryChildexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarryChildexp E_MarryChildexp_List = 1;
  for (int i = 0; i < this->e_marrychildexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marrychildexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarryChildexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarryChildexp E_MarryChildexp_List = 1;
  for (int i = 0; i < this->e_marrychildexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marrychildexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarryChildexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarryChildexp E_MarryChildexp_List = 1;
  total_size += 1 * this->e_marrychildexp_list_size();
  for (int i = 0; i < this->e_marrychildexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marrychildexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarryChildexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarryChildexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarryChildexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarryChildexp::MergeFrom(const Sheet_MarryChildexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marrychildexp_list_.MergeFrom(from.e_marrychildexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarryChildexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarryChildexp::CopyFrom(const Sheet_MarryChildexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarryChildexp::IsInitialized() const {

  return true;
}

void Sheet_MarryChildexp::Swap(Sheet_MarryChildexp* other) {
  if (other != this) {
    e_marrychildexp_list_.Swap(&other->e_marrychildexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarryChildexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarryChildexp_descriptor_;
  metadata.reflection = Sheet_MarryChildexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryExpressAttributeDesc::kMValueFieldNumber;
const int E_MarryExpressAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_MarryExpressAttributeDesc::E_MarryExpressAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryExpressAttributeDesc::InitAsDefaultInstance() {
}

E_MarryExpressAttributeDesc::E_MarryExpressAttributeDesc(const E_MarryExpressAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryExpressAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryExpressAttributeDesc::~E_MarryExpressAttributeDesc() {
  SharedDtor();
}

void E_MarryExpressAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryExpressAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryExpressAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryExpressAttributeDesc_descriptor_;
}

const E_MarryExpressAttributeDesc& E_MarryExpressAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryExpressAttributeDesc* E_MarryExpressAttributeDesc::default_instance_ = NULL;

E_MarryExpressAttributeDesc* E_MarryExpressAttributeDesc::New() const {
  return new E_MarryExpressAttributeDesc;
}

void E_MarryExpressAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryExpressAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryExpressAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryExpressAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryExpressAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryExpressAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryExpressAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryExpressAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryExpressAttributeDesc::MergeFrom(const E_MarryExpressAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryExpressAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryExpressAttributeDesc::CopyFrom(const E_MarryExpressAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryExpressAttributeDesc::IsInitialized() const {

  return true;
}

void E_MarryExpressAttributeDesc::Swap(E_MarryExpressAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryExpressAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryExpressAttributeDesc_descriptor_;
  metadata.reflection = E_MarryExpressAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryExpress::kMLvFieldNumber;
const int E_MarryExpress::kMExpFieldNumber;
const int E_MarryExpress::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_MarryExpress::E_MarryExpress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryExpress::InitAsDefaultInstance() {
}

E_MarryExpress::E_MarryExpress(const E_MarryExpress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryExpress::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryExpress::~E_MarryExpress() {
  SharedDtor();
}

void E_MarryExpress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryExpress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryExpress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryExpress_descriptor_;
}

const E_MarryExpress& E_MarryExpress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryExpress* E_MarryExpress::default_instance_ = NULL;

E_MarryExpress* E_MarryExpress::New() const {
  return new E_MarryExpress;
}

void E_MarryExpress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_exp_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryExpress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_MarryExpressAttributeDesc m_attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryExpress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_exp(), output);
  }

  // repeated .proto_ff.E_MarryExpressAttributeDesc m_attribute = 3;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryExpress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_exp(), target);
  }

  // repeated .proto_ff.E_MarryExpressAttributeDesc m_attribute = 3;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryExpress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

  }
  // repeated .proto_ff.E_MarryExpressAttributeDesc m_attribute = 3;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryExpress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryExpress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryExpress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryExpress::MergeFrom(const E_MarryExpress& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryExpress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryExpress::CopyFrom(const E_MarryExpress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryExpress::IsInitialized() const {

  return true;
}

void E_MarryExpress::Swap(E_MarryExpress* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_exp_, other->m_exp_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryExpress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryExpress_descriptor_;
  metadata.reflection = E_MarryExpress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarryExpress::kEMarryExpressListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarryExpress::Sheet_MarryExpress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarryExpress::InitAsDefaultInstance() {
}

Sheet_MarryExpress::Sheet_MarryExpress(const Sheet_MarryExpress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarryExpress::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarryExpress::~Sheet_MarryExpress() {
  SharedDtor();
}

void Sheet_MarryExpress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarryExpress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarryExpress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarryExpress_descriptor_;
}

const Sheet_MarryExpress& Sheet_MarryExpress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

Sheet_MarryExpress* Sheet_MarryExpress::default_instance_ = NULL;

Sheet_MarryExpress* Sheet_MarryExpress::New() const {
  return new Sheet_MarryExpress;
}

void Sheet_MarryExpress::Clear() {
  e_marryexpress_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarryExpress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarryExpress E_MarryExpress_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarryExpress_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marryexpress_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarryExpress_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarryExpress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarryExpress E_MarryExpress_List = 1;
  for (int i = 0; i < this->e_marryexpress_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marryexpress_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarryExpress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarryExpress E_MarryExpress_List = 1;
  for (int i = 0; i < this->e_marryexpress_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marryexpress_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarryExpress::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarryExpress E_MarryExpress_List = 1;
  total_size += 1 * this->e_marryexpress_list_size();
  for (int i = 0; i < this->e_marryexpress_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marryexpress_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarryExpress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarryExpress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarryExpress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarryExpress::MergeFrom(const Sheet_MarryExpress& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marryexpress_list_.MergeFrom(from.e_marryexpress_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarryExpress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarryExpress::CopyFrom(const Sheet_MarryExpress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarryExpress::IsInitialized() const {

  return true;
}

void Sheet_MarryExpress::Swap(Sheet_MarryExpress* other) {
  if (other != this) {
    e_marryexpress_list_.Swap(&other->e_marryexpress_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarryExpress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarryExpress_descriptor_;
  metadata.reflection = Sheet_MarryExpress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryExpresslanguage::kMIdFieldNumber;
const int E_MarryExpresslanguage::kMLanguageFieldNumber;
#endif  // !_MSC_VER

E_MarryExpresslanguage::E_MarryExpresslanguage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryExpresslanguage::InitAsDefaultInstance() {
}

E_MarryExpresslanguage::E_MarryExpresslanguage(const E_MarryExpresslanguage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryExpresslanguage::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryExpresslanguage::~E_MarryExpresslanguage() {
  SharedDtor();
}

void E_MarryExpresslanguage::SharedDtor() {
  if (m_language_ != &::google::protobuf::internal::kEmptyString) {
    delete m_language_;
  }
  if (this != default_instance_) {
  }
}

void E_MarryExpresslanguage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryExpresslanguage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryExpresslanguage_descriptor_;
}

const E_MarryExpresslanguage& E_MarryExpresslanguage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryExpresslanguage* E_MarryExpresslanguage::default_instance_ = NULL;

E_MarryExpresslanguage* E_MarryExpresslanguage::New() const {
  return new E_MarryExpresslanguage;
}

void E_MarryExpresslanguage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_language()) {
      if (m_language_ != &::google::protobuf::internal::kEmptyString) {
        m_language_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryExpresslanguage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_language;
        break;
      }

      // optional string m_language = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_language().data(), this->m_language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryExpresslanguage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_language = 2;
  if (has_m_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_language().data(), this->m_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_language(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryExpresslanguage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_language = 2;
  if (has_m_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_language().data(), this->m_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_language(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryExpresslanguage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_language = 2;
    if (has_m_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_language());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryExpresslanguage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryExpresslanguage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryExpresslanguage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryExpresslanguage::MergeFrom(const E_MarryExpresslanguage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_language()) {
      set_m_language(from.m_language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryExpresslanguage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryExpresslanguage::CopyFrom(const E_MarryExpresslanguage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryExpresslanguage::IsInitialized() const {

  return true;
}

void E_MarryExpresslanguage::Swap(E_MarryExpresslanguage* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_language_, other->m_language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryExpresslanguage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryExpresslanguage_descriptor_;
  metadata.reflection = E_MarryExpresslanguage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarryExpresslanguage::kEMarryExpresslanguageListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarryExpresslanguage::Sheet_MarryExpresslanguage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarryExpresslanguage::InitAsDefaultInstance() {
}

Sheet_MarryExpresslanguage::Sheet_MarryExpresslanguage(const Sheet_MarryExpresslanguage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarryExpresslanguage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarryExpresslanguage::~Sheet_MarryExpresslanguage() {
  SharedDtor();
}

void Sheet_MarryExpresslanguage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarryExpresslanguage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarryExpresslanguage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarryExpresslanguage_descriptor_;
}

const Sheet_MarryExpresslanguage& Sheet_MarryExpresslanguage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

Sheet_MarryExpresslanguage* Sheet_MarryExpresslanguage::default_instance_ = NULL;

Sheet_MarryExpresslanguage* Sheet_MarryExpresslanguage::New() const {
  return new Sheet_MarryExpresslanguage;
}

void Sheet_MarryExpresslanguage::Clear() {
  e_marryexpresslanguage_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarryExpresslanguage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarryExpresslanguage E_MarryExpresslanguage_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarryExpresslanguage_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marryexpresslanguage_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarryExpresslanguage_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarryExpresslanguage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarryExpresslanguage E_MarryExpresslanguage_List = 1;
  for (int i = 0; i < this->e_marryexpresslanguage_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marryexpresslanguage_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarryExpresslanguage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarryExpresslanguage E_MarryExpresslanguage_List = 1;
  for (int i = 0; i < this->e_marryexpresslanguage_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marryexpresslanguage_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarryExpresslanguage::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarryExpresslanguage E_MarryExpresslanguage_List = 1;
  total_size += 1 * this->e_marryexpresslanguage_list_size();
  for (int i = 0; i < this->e_marryexpresslanguage_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marryexpresslanguage_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarryExpresslanguage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarryExpresslanguage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarryExpresslanguage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarryExpresslanguage::MergeFrom(const Sheet_MarryExpresslanguage& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marryexpresslanguage_list_.MergeFrom(from.e_marryexpresslanguage_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarryExpresslanguage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarryExpresslanguage::CopyFrom(const Sheet_MarryExpresslanguage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarryExpresslanguage::IsInitialized() const {

  return true;
}

void Sheet_MarryExpresslanguage::Swap(Sheet_MarryExpresslanguage* other) {
  if (other != this) {
    e_marryexpresslanguage_list_.Swap(&other->e_marryexpresslanguage_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarryExpresslanguage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarryExpresslanguage_descriptor_;
  metadata.reflection = Sheet_MarryExpresslanguage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryExpressshop::kMExitemFieldNumber;
const int E_MarryExpressshop::kMMallidFieldNumber;
const int E_MarryExpressshop::kMExpFieldNumber;
const int E_MarryExpressshop::kMExptoFieldNumber;
const int E_MarryExpressshop::kMBroadcastidFieldNumber;
#endif  // !_MSC_VER

E_MarryExpressshop::E_MarryExpressshop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryExpressshop::InitAsDefaultInstance() {
}

E_MarryExpressshop::E_MarryExpressshop(const E_MarryExpressshop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryExpressshop::SharedCtor() {
  _cached_size_ = 0;
  m_exitem_ = 0;
  m_mallid_ = 0;
  m_exp_ = 0;
  m_expto_ = 0;
  m_broadcastid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryExpressshop::~E_MarryExpressshop() {
  SharedDtor();
}

void E_MarryExpressshop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryExpressshop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryExpressshop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryExpressshop_descriptor_;
}

const E_MarryExpressshop& E_MarryExpressshop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryExpressshop* E_MarryExpressshop::default_instance_ = NULL;

E_MarryExpressshop* E_MarryExpressshop::New() const {
  return new E_MarryExpressshop;
}

void E_MarryExpressshop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_exitem_ = 0;
    m_mallid_ = 0;
    m_exp_ = 0;
    m_expto_ = 0;
    m_broadcastid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryExpressshop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_exitem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exitem_)));
          set_has_m_exitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_mallid;
        break;
      }

      // optional int32 m_mallid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mallid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mallid_)));
          set_has_m_mallid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_expto;
        break;
      }

      // optional int32 m_expto = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_expto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_expto_)));
          set_has_m_expto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_broadcastid;
        break;
      }

      // optional int32 m_broadcastid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_broadcastid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_broadcastid_)));
          set_has_m_broadcastid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryExpressshop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_exitem = 1;
  if (has_m_exitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_exitem(), output);
  }

  // optional int32 m_mallid = 2;
  if (has_m_mallid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_mallid(), output);
  }

  // optional int32 m_exp = 3;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_exp(), output);
  }

  // optional int32 m_expto = 4;
  if (has_m_expto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_expto(), output);
  }

  // optional int32 m_broadcastid = 5;
  if (has_m_broadcastid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_broadcastid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryExpressshop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_exitem = 1;
  if (has_m_exitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_exitem(), target);
  }

  // optional int32 m_mallid = 2;
  if (has_m_mallid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_mallid(), target);
  }

  // optional int32 m_exp = 3;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_exp(), target);
  }

  // optional int32 m_expto = 4;
  if (has_m_expto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_expto(), target);
  }

  // optional int32 m_broadcastid = 5;
  if (has_m_broadcastid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_broadcastid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryExpressshop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_exitem = 1;
    if (has_m_exitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exitem());
    }

    // optional int32 m_mallid = 2;
    if (has_m_mallid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mallid());
    }

    // optional int32 m_exp = 3;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int32 m_expto = 4;
    if (has_m_expto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_expto());
    }

    // optional int32 m_broadcastid = 5;
    if (has_m_broadcastid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_broadcastid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryExpressshop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryExpressshop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryExpressshop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryExpressshop::MergeFrom(const E_MarryExpressshop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_exitem()) {
      set_m_exitem(from.m_exitem());
    }
    if (from.has_m_mallid()) {
      set_m_mallid(from.m_mallid());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_expto()) {
      set_m_expto(from.m_expto());
    }
    if (from.has_m_broadcastid()) {
      set_m_broadcastid(from.m_broadcastid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryExpressshop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryExpressshop::CopyFrom(const E_MarryExpressshop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryExpressshop::IsInitialized() const {

  return true;
}

void E_MarryExpressshop::Swap(E_MarryExpressshop* other) {
  if (other != this) {
    std::swap(m_exitem_, other->m_exitem_);
    std::swap(m_mallid_, other->m_mallid_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_expto_, other->m_expto_);
    std::swap(m_broadcastid_, other->m_broadcastid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryExpressshop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryExpressshop_descriptor_;
  metadata.reflection = E_MarryExpressshop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarryExpressshop::kEMarryExpressshopListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarryExpressshop::Sheet_MarryExpressshop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarryExpressshop::InitAsDefaultInstance() {
}

Sheet_MarryExpressshop::Sheet_MarryExpressshop(const Sheet_MarryExpressshop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarryExpressshop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarryExpressshop::~Sheet_MarryExpressshop() {
  SharedDtor();
}

void Sheet_MarryExpressshop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarryExpressshop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarryExpressshop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarryExpressshop_descriptor_;
}

const Sheet_MarryExpressshop& Sheet_MarryExpressshop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

Sheet_MarryExpressshop* Sheet_MarryExpressshop::default_instance_ = NULL;

Sheet_MarryExpressshop* Sheet_MarryExpressshop::New() const {
  return new Sheet_MarryExpressshop;
}

void Sheet_MarryExpressshop::Clear() {
  e_marryexpressshop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarryExpressshop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarryExpressshop E_MarryExpressshop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarryExpressshop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marryexpressshop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarryExpressshop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarryExpressshop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarryExpressshop E_MarryExpressshop_List = 1;
  for (int i = 0; i < this->e_marryexpressshop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marryexpressshop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarryExpressshop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarryExpressshop E_MarryExpressshop_List = 1;
  for (int i = 0; i < this->e_marryexpressshop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marryexpressshop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarryExpressshop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarryExpressshop E_MarryExpressshop_List = 1;
  total_size += 1 * this->e_marryexpressshop_list_size();
  for (int i = 0; i < this->e_marryexpressshop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marryexpressshop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarryExpressshop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarryExpressshop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarryExpressshop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarryExpressshop::MergeFrom(const Sheet_MarryExpressshop& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marryexpressshop_list_.MergeFrom(from.e_marryexpressshop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarryExpressshop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarryExpressshop::CopyFrom(const Sheet_MarryExpressshop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarryExpressshop::IsInitialized() const {

  return true;
}

void Sheet_MarryExpressshop::Swap(Sheet_MarryExpressshop* other) {
  if (other != this) {
    e_marryexpressshop_list_.Swap(&other->e_marryexpressshop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarryExpressshop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarryExpressshop_descriptor_;
  metadata.reflection = Sheet_MarryExpressshop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryConstantTourmonsterDesc::kMPathidFieldNumber;
const int E_MarryConstantTourmonsterDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_MarryConstantTourmonsterDesc::E_MarryConstantTourmonsterDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryConstantTourmonsterDesc::InitAsDefaultInstance() {
}

E_MarryConstantTourmonsterDesc::E_MarryConstantTourmonsterDesc(const E_MarryConstantTourmonsterDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryConstantTourmonsterDesc::SharedCtor() {
  _cached_size_ = 0;
  m_pathid_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryConstantTourmonsterDesc::~E_MarryConstantTourmonsterDesc() {
  SharedDtor();
}

void E_MarryConstantTourmonsterDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryConstantTourmonsterDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryConstantTourmonsterDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryConstantTourmonsterDesc_descriptor_;
}

const E_MarryConstantTourmonsterDesc& E_MarryConstantTourmonsterDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryConstantTourmonsterDesc* E_MarryConstantTourmonsterDesc::default_instance_ = NULL;

E_MarryConstantTourmonsterDesc* E_MarryConstantTourmonsterDesc::New() const {
  return new E_MarryConstantTourmonsterDesc;
}

void E_MarryConstantTourmonsterDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_pathid_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryConstantTourmonsterDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_pathid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pathid_)));
          set_has_m_pathid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryConstantTourmonsterDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_pathid = 1;
  if (has_m_pathid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_pathid(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryConstantTourmonsterDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_pathid = 1;
  if (has_m_pathid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_pathid(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryConstantTourmonsterDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_pathid = 1;
    if (has_m_pathid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pathid());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryConstantTourmonsterDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryConstantTourmonsterDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryConstantTourmonsterDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryConstantTourmonsterDesc::MergeFrom(const E_MarryConstantTourmonsterDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_pathid()) {
      set_m_pathid(from.m_pathid());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryConstantTourmonsterDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryConstantTourmonsterDesc::CopyFrom(const E_MarryConstantTourmonsterDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryConstantTourmonsterDesc::IsInitialized() const {

  return true;
}

void E_MarryConstantTourmonsterDesc::Swap(E_MarryConstantTourmonsterDesc* other) {
  if (other != this) {
    std::swap(m_pathid_, other->m_pathid_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryConstantTourmonsterDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryConstantTourmonsterDesc_descriptor_;
  metadata.reflection = E_MarryConstantTourmonsterDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryConstant::kMIdFieldNumber;
const int E_MarryConstant::kMMoneyFieldNumber;
const int E_MarryConstant::kMPriceFieldNumber;
const int E_MarryConstant::kMBuyitemFieldNumber;
const int E_MarryConstant::kMDailyitemFieldNumber;
const int E_MarryConstant::kMBoxitmeFieldNumber;
const int E_MarryConstant::kMIntervalFieldNumber;
const int E_MarryConstant::kMLifetimeFieldNumber;
const int E_MarryConstant::kMScaleFieldNumber;
const int E_MarryConstant::kMGiveboyFieldNumber;
const int E_MarryConstant::kMGivegirlFieldNumber;
const int E_MarryConstant::kMXytimeFieldNumber;
const int E_MarryConstant::kMFreeFieldNumber;
const int E_MarryConstant::kMBuynumFieldNumber;
const int E_MarryConstant::kMConsumeFieldNumber;
const int E_MarryConstant::kMConsumenumFieldNumber;
const int E_MarryConstant::kMMarrylvFieldNumber;
const int E_MarryConstant::kMChildtimeFieldNumber;
const int E_MarryConstant::kMLockitemFieldNumber;
const int E_MarryConstant::kMLockitemexpFieldNumber;
const int E_MarryConstant::kMChilditemFieldNumber;
const int E_MarryConstant::kMChilditemexpFieldNumber;
const int E_MarryConstant::kMGuestpriceFieldNumber;
const int E_MarryConstant::kMGuestpricenumFieldNumber;
const int E_MarryConstant::kMAsklimitFieldNumber;
const int E_MarryConstant::kMHyrewardFieldNumber;
const int E_MarryConstant::kMToursceneidFieldNumber;
const int E_MarryConstant::kMTourfollowindexFieldNumber;
const int E_MarryConstant::kMHyiconFieldNumber;
const int E_MarryConstant::kMHynameFieldNumber;
const int E_MarryConstant::kMXyiconFieldNumber;
const int E_MarryConstant::kMXynameFieldNumber;
const int E_MarryConstant::kMRedbagnumFieldNumber;
const int E_MarryConstant::kMRedmoneyFieldNumber;
const int E_MarryConstant::kMRedpriceFieldNumber;
const int E_MarryConstant::kMSendredrewardFieldNumber;
const int E_MarryConstant::kMSendrednumFieldNumber;
const int E_MarryConstant::kMRedcollectFieldNumber;
const int E_MarryConstant::kMRedcollectnumFieldNumber;
const int E_MarryConstant::kMTourmonsterFieldNumber;
#endif  // !_MSC_VER

E_MarryConstant::E_MarryConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryConstant::InitAsDefaultInstance() {
}

E_MarryConstant::E_MarryConstant(const E_MarryConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryConstant::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_money_ = 0;
  m_price_ = 0;
  m_buyitem_ = 0;
  m_dailyitem_ = 0;
  m_boxitme_ = 0;
  m_interval_ = 0;
  m_lifetime_ = 0;
  m_scale_ = 0;
  m_giveboy_ = 0;
  m_givegirl_ = 0;
  m_xytime_ = 0;
  m_free_ = 0;
  m_buynum_ = 0;
  m_consume_ = 0;
  m_consumenum_ = 0;
  m_marrylv_ = 0;
  m_childtime_ = 0;
  m_lockitem_ = 0;
  m_lockitemexp_ = 0;
  m_childitem_ = 0;
  m_childitemexp_ = 0;
  m_guestprice_ = 0;
  m_guestpricenum_ = 0;
  m_asklimit_ = 0;
  m_hyreward_ = 0;
  m_toursceneid_ = 0;
  m_tourfollowindex_ = 0;
  m_hyicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_hyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_xyicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_xyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_redbagnum_ = 0;
  m_redmoney_ = 0;
  m_redprice_ = 0;
  m_sendredreward_ = 0;
  m_sendrednum_ = 0;
  m_redcollect_ = 0;
  m_redcollectnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryConstant::~E_MarryConstant() {
  SharedDtor();
}

void E_MarryConstant::SharedDtor() {
  if (m_hyicon_ != &::google::protobuf::internal::kEmptyString) {
    delete m_hyicon_;
  }
  if (m_hyname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_hyname_;
  }
  if (m_xyicon_ != &::google::protobuf::internal::kEmptyString) {
    delete m_xyicon_;
  }
  if (m_xyname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_xyname_;
  }
  if (this != default_instance_) {
  }
}

void E_MarryConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryConstant_descriptor_;
}

const E_MarryConstant& E_MarryConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryConstant* E_MarryConstant::default_instance_ = NULL;

E_MarryConstant* E_MarryConstant::New() const {
  return new E_MarryConstant;
}

void E_MarryConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_money_ = 0;
    m_price_ = 0;
    m_buyitem_ = 0;
    m_dailyitem_ = 0;
    m_boxitme_ = 0;
    m_interval_ = 0;
    m_lifetime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_scale_ = 0;
    m_giveboy_ = 0;
    m_givegirl_ = 0;
    m_xytime_ = 0;
    m_free_ = 0;
    m_buynum_ = 0;
    m_consume_ = 0;
    m_consumenum_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_marrylv_ = 0;
    m_childtime_ = 0;
    m_lockitem_ = 0;
    m_lockitemexp_ = 0;
    m_childitem_ = 0;
    m_childitemexp_ = 0;
    m_guestprice_ = 0;
    m_guestpricenum_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    m_asklimit_ = 0;
    m_hyreward_ = 0;
    m_toursceneid_ = 0;
    m_tourfollowindex_ = 0;
    if (has_m_hyicon()) {
      if (m_hyicon_ != &::google::protobuf::internal::kEmptyString) {
        m_hyicon_->clear();
      }
    }
    if (has_m_hyname()) {
      if (m_hyname_ != &::google::protobuf::internal::kEmptyString) {
        m_hyname_->clear();
      }
    }
    if (has_m_xyicon()) {
      if (m_xyicon_ != &::google::protobuf::internal::kEmptyString) {
        m_xyicon_->clear();
      }
    }
    if (has_m_xyname()) {
      if (m_xyname_ != &::google::protobuf::internal::kEmptyString) {
        m_xyname_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    m_redbagnum_ = 0;
    m_redmoney_ = 0;
    m_redprice_ = 0;
    m_sendredreward_ = 0;
    m_sendrednum_ = 0;
    m_redcollect_ = 0;
    m_redcollectnum_ = 0;
  }
  m_tourmonster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_money;
        break;
      }

      // optional int32 m_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_money_)));
          set_has_m_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_price;
        break;
      }

      // optional int32 m_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_buyitem;
        break;
      }

      // optional int32 m_buyitem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buyitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buyitem_)));
          set_has_m_buyitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_dailyitem;
        break;
      }

      // optional int32 m_dailyitem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dailyitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dailyitem_)));
          set_has_m_dailyitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_boxitme;
        break;
      }

      // optional int32 m_boxitme = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxitme:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxitme_)));
          set_has_m_boxitme();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_interval;
        break;
      }

      // optional int32 m_interval = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_interval_)));
          set_has_m_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lifetime;
        break;
      }

      // optional int32 m_lifetime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lifetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lifetime_)));
          set_has_m_lifetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_scale;
        break;
      }

      // optional int32 m_scale = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scale_)));
          set_has_m_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_giveboy;
        break;
      }

      // optional int32 m_giveboy = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_giveboy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_giveboy_)));
          set_has_m_giveboy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_givegirl;
        break;
      }

      // optional int32 m_givegirl = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_givegirl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_givegirl_)));
          set_has_m_givegirl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_xytime;
        break;
      }

      // optional int32 m_xytime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xytime_)));
          set_has_m_xytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_free;
        break;
      }

      // optional int32 m_free = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_free_)));
          set_has_m_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_buynum;
        break;
      }

      // optional int32 m_buynum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buynum_)));
          set_has_m_buynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_consume;
        break;
      }

      // optional int32 m_consume = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_consume_)));
          set_has_m_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_consumenum;
        break;
      }

      // optional int32 m_consumenum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_consumenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_consumenum_)));
          set_has_m_consumenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_marrylv;
        break;
      }

      // optional int32 m_marrylv = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_marrylv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_marrylv_)));
          set_has_m_marrylv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_childtime;
        break;
      }

      // optional int32 m_childtime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_childtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_childtime_)));
          set_has_m_childtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_lockitem;
        break;
      }

      // optional int32 m_lockitem = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lockitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lockitem_)));
          set_has_m_lockitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_lockitemexp;
        break;
      }

      // optional int32 m_lockitemexp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lockitemexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lockitemexp_)));
          set_has_m_lockitemexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_childitem;
        break;
      }

      // optional int32 m_childitem = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_childitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_childitem_)));
          set_has_m_childitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_childitemexp;
        break;
      }

      // optional int32 m_childitemexp = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_childitemexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_childitemexp_)));
          set_has_m_childitemexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_m_guestprice;
        break;
      }

      // optional int32 m_guestprice = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guestprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guestprice_)));
          set_has_m_guestprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_m_guestpricenum;
        break;
      }

      // optional int32 m_guestpricenum = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guestpricenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guestpricenum_)));
          set_has_m_guestpricenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_m_asklimit;
        break;
      }

      // optional int32 m_asklimit = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_asklimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_asklimit_)));
          set_has_m_asklimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_m_hyreward;
        break;
      }

      // optional int32 m_hyreward = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hyreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hyreward_)));
          set_has_m_hyreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_m_toursceneid;
        break;
      }

      // optional int32 m_toursceneid = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_toursceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_toursceneid_)));
          set_has_m_toursceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_m_tourfollowindex;
        break;
      }

      // optional int32 m_tourfollowindex = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tourfollowindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tourfollowindex_)));
          set_has_m_tourfollowindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_m_hyicon;
        break;
      }

      // optional string m_hyicon = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_hyicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_hyicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_hyicon().data(), this->m_hyicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_m_hyname;
        break;
      }

      // optional string m_hyname = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_hyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_hyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_hyname().data(), this->m_hyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_m_xyicon;
        break;
      }

      // optional string m_xyicon = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_xyicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_xyicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_xyicon().data(), this->m_xyicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_m_xyname;
        break;
      }

      // optional string m_xyname = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_xyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_xyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_xyname().data(), this->m_xyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_m_redbagnum;
        break;
      }

      // optional int32 m_redbagnum = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_redbagnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_redbagnum_)));
          set_has_m_redbagnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_m_redmoney;
        break;
      }

      // optional int32 m_redmoney = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_redmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_redmoney_)));
          set_has_m_redmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_m_redprice;
        break;
      }

      // optional int32 m_redprice = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_redprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_redprice_)));
          set_has_m_redprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_m_sendredreward;
        break;
      }

      // optional int32 m_sendredreward = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sendredreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sendredreward_)));
          set_has_m_sendredreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_m_sendrednum;
        break;
      }

      // optional int32 m_sendrednum = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sendrednum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sendrednum_)));
          set_has_m_sendrednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_m_redcollect;
        break;
      }

      // optional int32 m_redcollect = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_redcollect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_redcollect_)));
          set_has_m_redcollect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_m_redcollectnum;
        break;
      }

      // optional int32 m_redcollectnum = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_redcollectnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_redcollectnum_)));
          set_has_m_redcollectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_m_tourmonster;
        break;
      }

      // repeated .proto_ff.E_MarryConstantTourmonsterDesc m_tourmonster = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tourmonster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tourmonster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_m_tourmonster;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_money = 2;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_money(), output);
  }

  // optional int32 m_price = 3;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_price(), output);
  }

  // optional int32 m_buyitem = 4;
  if (has_m_buyitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_buyitem(), output);
  }

  // optional int32 m_dailyitem = 5;
  if (has_m_dailyitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_dailyitem(), output);
  }

  // optional int32 m_boxitme = 6;
  if (has_m_boxitme()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_boxitme(), output);
  }

  // optional int32 m_interval = 7;
  if (has_m_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_interval(), output);
  }

  // optional int32 m_lifetime = 8;
  if (has_m_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_lifetime(), output);
  }

  // optional int32 m_scale = 9;
  if (has_m_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_scale(), output);
  }

  // optional int32 m_giveboy = 10;
  if (has_m_giveboy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_giveboy(), output);
  }

  // optional int32 m_givegirl = 11;
  if (has_m_givegirl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_givegirl(), output);
  }

  // optional int32 m_xytime = 12;
  if (has_m_xytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_xytime(), output);
  }

  // optional int32 m_free = 13;
  if (has_m_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_free(), output);
  }

  // optional int32 m_buynum = 14;
  if (has_m_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_buynum(), output);
  }

  // optional int32 m_consume = 15;
  if (has_m_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_consume(), output);
  }

  // optional int32 m_consumenum = 16;
  if (has_m_consumenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_consumenum(), output);
  }

  // optional int32 m_marrylv = 17;
  if (has_m_marrylv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_marrylv(), output);
  }

  // optional int32 m_childtime = 18;
  if (has_m_childtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_childtime(), output);
  }

  // optional int32 m_lockitem = 19;
  if (has_m_lockitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_lockitem(), output);
  }

  // optional int32 m_lockitemexp = 20;
  if (has_m_lockitemexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_lockitemexp(), output);
  }

  // optional int32 m_childitem = 21;
  if (has_m_childitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->m_childitem(), output);
  }

  // optional int32 m_childitemexp = 22;
  if (has_m_childitemexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->m_childitemexp(), output);
  }

  // optional int32 m_guestprice = 23;
  if (has_m_guestprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->m_guestprice(), output);
  }

  // optional int32 m_guestpricenum = 24;
  if (has_m_guestpricenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->m_guestpricenum(), output);
  }

  // optional int32 m_asklimit = 25;
  if (has_m_asklimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->m_asklimit(), output);
  }

  // optional int32 m_hyreward = 26;
  if (has_m_hyreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->m_hyreward(), output);
  }

  // optional int32 m_toursceneid = 27;
  if (has_m_toursceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->m_toursceneid(), output);
  }

  // optional int32 m_tourfollowindex = 28;
  if (has_m_tourfollowindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->m_tourfollowindex(), output);
  }

  // optional string m_hyicon = 29;
  if (has_m_hyicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_hyicon().data(), this->m_hyicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->m_hyicon(), output);
  }

  // optional string m_hyname = 30;
  if (has_m_hyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_hyname().data(), this->m_hyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->m_hyname(), output);
  }

  // optional string m_xyicon = 31;
  if (has_m_xyicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_xyicon().data(), this->m_xyicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->m_xyicon(), output);
  }

  // optional string m_xyname = 32;
  if (has_m_xyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_xyname().data(), this->m_xyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->m_xyname(), output);
  }

  // optional int32 m_redbagnum = 33;
  if (has_m_redbagnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->m_redbagnum(), output);
  }

  // optional int32 m_redmoney = 34;
  if (has_m_redmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->m_redmoney(), output);
  }

  // optional int32 m_redprice = 35;
  if (has_m_redprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->m_redprice(), output);
  }

  // optional int32 m_sendredreward = 36;
  if (has_m_sendredreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->m_sendredreward(), output);
  }

  // optional int32 m_sendrednum = 37;
  if (has_m_sendrednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->m_sendrednum(), output);
  }

  // optional int32 m_redcollect = 38;
  if (has_m_redcollect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->m_redcollect(), output);
  }

  // optional int32 m_redcollectnum = 39;
  if (has_m_redcollectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->m_redcollectnum(), output);
  }

  // repeated .proto_ff.E_MarryConstantTourmonsterDesc m_tourmonster = 40;
  for (int i = 0; i < this->m_tourmonster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->m_tourmonster(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_money = 2;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_money(), target);
  }

  // optional int32 m_price = 3;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_price(), target);
  }

  // optional int32 m_buyitem = 4;
  if (has_m_buyitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_buyitem(), target);
  }

  // optional int32 m_dailyitem = 5;
  if (has_m_dailyitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_dailyitem(), target);
  }

  // optional int32 m_boxitme = 6;
  if (has_m_boxitme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_boxitme(), target);
  }

  // optional int32 m_interval = 7;
  if (has_m_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_interval(), target);
  }

  // optional int32 m_lifetime = 8;
  if (has_m_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_lifetime(), target);
  }

  // optional int32 m_scale = 9;
  if (has_m_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_scale(), target);
  }

  // optional int32 m_giveboy = 10;
  if (has_m_giveboy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_giveboy(), target);
  }

  // optional int32 m_givegirl = 11;
  if (has_m_givegirl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_givegirl(), target);
  }

  // optional int32 m_xytime = 12;
  if (has_m_xytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_xytime(), target);
  }

  // optional int32 m_free = 13;
  if (has_m_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_free(), target);
  }

  // optional int32 m_buynum = 14;
  if (has_m_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_buynum(), target);
  }

  // optional int32 m_consume = 15;
  if (has_m_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_consume(), target);
  }

  // optional int32 m_consumenum = 16;
  if (has_m_consumenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_consumenum(), target);
  }

  // optional int32 m_marrylv = 17;
  if (has_m_marrylv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_marrylv(), target);
  }

  // optional int32 m_childtime = 18;
  if (has_m_childtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_childtime(), target);
  }

  // optional int32 m_lockitem = 19;
  if (has_m_lockitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_lockitem(), target);
  }

  // optional int32 m_lockitemexp = 20;
  if (has_m_lockitemexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_lockitemexp(), target);
  }

  // optional int32 m_childitem = 21;
  if (has_m_childitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->m_childitem(), target);
  }

  // optional int32 m_childitemexp = 22;
  if (has_m_childitemexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->m_childitemexp(), target);
  }

  // optional int32 m_guestprice = 23;
  if (has_m_guestprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->m_guestprice(), target);
  }

  // optional int32 m_guestpricenum = 24;
  if (has_m_guestpricenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->m_guestpricenum(), target);
  }

  // optional int32 m_asklimit = 25;
  if (has_m_asklimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->m_asklimit(), target);
  }

  // optional int32 m_hyreward = 26;
  if (has_m_hyreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->m_hyreward(), target);
  }

  // optional int32 m_toursceneid = 27;
  if (has_m_toursceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->m_toursceneid(), target);
  }

  // optional int32 m_tourfollowindex = 28;
  if (has_m_tourfollowindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->m_tourfollowindex(), target);
  }

  // optional string m_hyicon = 29;
  if (has_m_hyicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_hyicon().data(), this->m_hyicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->m_hyicon(), target);
  }

  // optional string m_hyname = 30;
  if (has_m_hyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_hyname().data(), this->m_hyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->m_hyname(), target);
  }

  // optional string m_xyicon = 31;
  if (has_m_xyicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_xyicon().data(), this->m_xyicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->m_xyicon(), target);
  }

  // optional string m_xyname = 32;
  if (has_m_xyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_xyname().data(), this->m_xyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->m_xyname(), target);
  }

  // optional int32 m_redbagnum = 33;
  if (has_m_redbagnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->m_redbagnum(), target);
  }

  // optional int32 m_redmoney = 34;
  if (has_m_redmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->m_redmoney(), target);
  }

  // optional int32 m_redprice = 35;
  if (has_m_redprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->m_redprice(), target);
  }

  // optional int32 m_sendredreward = 36;
  if (has_m_sendredreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->m_sendredreward(), target);
  }

  // optional int32 m_sendrednum = 37;
  if (has_m_sendrednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->m_sendrednum(), target);
  }

  // optional int32 m_redcollect = 38;
  if (has_m_redcollect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->m_redcollect(), target);
  }

  // optional int32 m_redcollectnum = 39;
  if (has_m_redcollectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->m_redcollectnum(), target);
  }

  // repeated .proto_ff.E_MarryConstantTourmonsterDesc m_tourmonster = 40;
  for (int i = 0; i < this->m_tourmonster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->m_tourmonster(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryConstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_money = 2;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_money());
    }

    // optional int32 m_price = 3;
    if (has_m_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_price());
    }

    // optional int32 m_buyitem = 4;
    if (has_m_buyitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buyitem());
    }

    // optional int32 m_dailyitem = 5;
    if (has_m_dailyitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dailyitem());
    }

    // optional int32 m_boxitme = 6;
    if (has_m_boxitme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxitme());
    }

    // optional int32 m_interval = 7;
    if (has_m_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_interval());
    }

    // optional int32 m_lifetime = 8;
    if (has_m_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lifetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_scale = 9;
    if (has_m_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scale());
    }

    // optional int32 m_giveboy = 10;
    if (has_m_giveboy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_giveboy());
    }

    // optional int32 m_givegirl = 11;
    if (has_m_givegirl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_givegirl());
    }

    // optional int32 m_xytime = 12;
    if (has_m_xytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xytime());
    }

    // optional int32 m_free = 13;
    if (has_m_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_free());
    }

    // optional int32 m_buynum = 14;
    if (has_m_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buynum());
    }

    // optional int32 m_consume = 15;
    if (has_m_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_consume());
    }

    // optional int32 m_consumenum = 16;
    if (has_m_consumenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_consumenum());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_marrylv = 17;
    if (has_m_marrylv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_marrylv());
    }

    // optional int32 m_childtime = 18;
    if (has_m_childtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_childtime());
    }

    // optional int32 m_lockitem = 19;
    if (has_m_lockitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lockitem());
    }

    // optional int32 m_lockitemexp = 20;
    if (has_m_lockitemexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lockitemexp());
    }

    // optional int32 m_childitem = 21;
    if (has_m_childitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_childitem());
    }

    // optional int32 m_childitemexp = 22;
    if (has_m_childitemexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_childitemexp());
    }

    // optional int32 m_guestprice = 23;
    if (has_m_guestprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guestprice());
    }

    // optional int32 m_guestpricenum = 24;
    if (has_m_guestpricenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guestpricenum());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 m_asklimit = 25;
    if (has_m_asklimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_asklimit());
    }

    // optional int32 m_hyreward = 26;
    if (has_m_hyreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hyreward());
    }

    // optional int32 m_toursceneid = 27;
    if (has_m_toursceneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_toursceneid());
    }

    // optional int32 m_tourfollowindex = 28;
    if (has_m_tourfollowindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tourfollowindex());
    }

    // optional string m_hyicon = 29;
    if (has_m_hyicon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_hyicon());
    }

    // optional string m_hyname = 30;
    if (has_m_hyname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_hyname());
    }

    // optional string m_xyicon = 31;
    if (has_m_xyicon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_xyicon());
    }

    // optional string m_xyname = 32;
    if (has_m_xyname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_xyname());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 m_redbagnum = 33;
    if (has_m_redbagnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_redbagnum());
    }

    // optional int32 m_redmoney = 34;
    if (has_m_redmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_redmoney());
    }

    // optional int32 m_redprice = 35;
    if (has_m_redprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_redprice());
    }

    // optional int32 m_sendredreward = 36;
    if (has_m_sendredreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sendredreward());
    }

    // optional int32 m_sendrednum = 37;
    if (has_m_sendrednum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sendrednum());
    }

    // optional int32 m_redcollect = 38;
    if (has_m_redcollect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_redcollect());
    }

    // optional int32 m_redcollectnum = 39;
    if (has_m_redcollectnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_redcollectnum());
    }

  }
  // repeated .proto_ff.E_MarryConstantTourmonsterDesc m_tourmonster = 40;
  total_size += 2 * this->m_tourmonster_size();
  for (int i = 0; i < this->m_tourmonster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tourmonster(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryConstant::MergeFrom(const E_MarryConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tourmonster_.MergeFrom(from.m_tourmonster_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_money()) {
      set_m_money(from.m_money());
    }
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
    if (from.has_m_buyitem()) {
      set_m_buyitem(from.m_buyitem());
    }
    if (from.has_m_dailyitem()) {
      set_m_dailyitem(from.m_dailyitem());
    }
    if (from.has_m_boxitme()) {
      set_m_boxitme(from.m_boxitme());
    }
    if (from.has_m_interval()) {
      set_m_interval(from.m_interval());
    }
    if (from.has_m_lifetime()) {
      set_m_lifetime(from.m_lifetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_scale()) {
      set_m_scale(from.m_scale());
    }
    if (from.has_m_giveboy()) {
      set_m_giveboy(from.m_giveboy());
    }
    if (from.has_m_givegirl()) {
      set_m_givegirl(from.m_givegirl());
    }
    if (from.has_m_xytime()) {
      set_m_xytime(from.m_xytime());
    }
    if (from.has_m_free()) {
      set_m_free(from.m_free());
    }
    if (from.has_m_buynum()) {
      set_m_buynum(from.m_buynum());
    }
    if (from.has_m_consume()) {
      set_m_consume(from.m_consume());
    }
    if (from.has_m_consumenum()) {
      set_m_consumenum(from.m_consumenum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_marrylv()) {
      set_m_marrylv(from.m_marrylv());
    }
    if (from.has_m_childtime()) {
      set_m_childtime(from.m_childtime());
    }
    if (from.has_m_lockitem()) {
      set_m_lockitem(from.m_lockitem());
    }
    if (from.has_m_lockitemexp()) {
      set_m_lockitemexp(from.m_lockitemexp());
    }
    if (from.has_m_childitem()) {
      set_m_childitem(from.m_childitem());
    }
    if (from.has_m_childitemexp()) {
      set_m_childitemexp(from.m_childitemexp());
    }
    if (from.has_m_guestprice()) {
      set_m_guestprice(from.m_guestprice());
    }
    if (from.has_m_guestpricenum()) {
      set_m_guestpricenum(from.m_guestpricenum());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_m_asklimit()) {
      set_m_asklimit(from.m_asklimit());
    }
    if (from.has_m_hyreward()) {
      set_m_hyreward(from.m_hyreward());
    }
    if (from.has_m_toursceneid()) {
      set_m_toursceneid(from.m_toursceneid());
    }
    if (from.has_m_tourfollowindex()) {
      set_m_tourfollowindex(from.m_tourfollowindex());
    }
    if (from.has_m_hyicon()) {
      set_m_hyicon(from.m_hyicon());
    }
    if (from.has_m_hyname()) {
      set_m_hyname(from.m_hyname());
    }
    if (from.has_m_xyicon()) {
      set_m_xyicon(from.m_xyicon());
    }
    if (from.has_m_xyname()) {
      set_m_xyname(from.m_xyname());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_m_redbagnum()) {
      set_m_redbagnum(from.m_redbagnum());
    }
    if (from.has_m_redmoney()) {
      set_m_redmoney(from.m_redmoney());
    }
    if (from.has_m_redprice()) {
      set_m_redprice(from.m_redprice());
    }
    if (from.has_m_sendredreward()) {
      set_m_sendredreward(from.m_sendredreward());
    }
    if (from.has_m_sendrednum()) {
      set_m_sendrednum(from.m_sendrednum());
    }
    if (from.has_m_redcollect()) {
      set_m_redcollect(from.m_redcollect());
    }
    if (from.has_m_redcollectnum()) {
      set_m_redcollectnum(from.m_redcollectnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryConstant::CopyFrom(const E_MarryConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryConstant::IsInitialized() const {

  return true;
}

void E_MarryConstant::Swap(E_MarryConstant* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_money_, other->m_money_);
    std::swap(m_price_, other->m_price_);
    std::swap(m_buyitem_, other->m_buyitem_);
    std::swap(m_dailyitem_, other->m_dailyitem_);
    std::swap(m_boxitme_, other->m_boxitme_);
    std::swap(m_interval_, other->m_interval_);
    std::swap(m_lifetime_, other->m_lifetime_);
    std::swap(m_scale_, other->m_scale_);
    std::swap(m_giveboy_, other->m_giveboy_);
    std::swap(m_givegirl_, other->m_givegirl_);
    std::swap(m_xytime_, other->m_xytime_);
    std::swap(m_free_, other->m_free_);
    std::swap(m_buynum_, other->m_buynum_);
    std::swap(m_consume_, other->m_consume_);
    std::swap(m_consumenum_, other->m_consumenum_);
    std::swap(m_marrylv_, other->m_marrylv_);
    std::swap(m_childtime_, other->m_childtime_);
    std::swap(m_lockitem_, other->m_lockitem_);
    std::swap(m_lockitemexp_, other->m_lockitemexp_);
    std::swap(m_childitem_, other->m_childitem_);
    std::swap(m_childitemexp_, other->m_childitemexp_);
    std::swap(m_guestprice_, other->m_guestprice_);
    std::swap(m_guestpricenum_, other->m_guestpricenum_);
    std::swap(m_asklimit_, other->m_asklimit_);
    std::swap(m_hyreward_, other->m_hyreward_);
    std::swap(m_toursceneid_, other->m_toursceneid_);
    std::swap(m_tourfollowindex_, other->m_tourfollowindex_);
    std::swap(m_hyicon_, other->m_hyicon_);
    std::swap(m_hyname_, other->m_hyname_);
    std::swap(m_xyicon_, other->m_xyicon_);
    std::swap(m_xyname_, other->m_xyname_);
    std::swap(m_redbagnum_, other->m_redbagnum_);
    std::swap(m_redmoney_, other->m_redmoney_);
    std::swap(m_redprice_, other->m_redprice_);
    std::swap(m_sendredreward_, other->m_sendredreward_);
    std::swap(m_sendrednum_, other->m_sendrednum_);
    std::swap(m_redcollect_, other->m_redcollect_);
    std::swap(m_redcollectnum_, other->m_redcollectnum_);
    m_tourmonster_.Swap(&other->m_tourmonster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryConstant_descriptor_;
  metadata.reflection = E_MarryConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarryConstant::kEMarryConstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarryConstant::Sheet_MarryConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarryConstant::InitAsDefaultInstance() {
}

Sheet_MarryConstant::Sheet_MarryConstant(const Sheet_MarryConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarryConstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarryConstant::~Sheet_MarryConstant() {
  SharedDtor();
}

void Sheet_MarryConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarryConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarryConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarryConstant_descriptor_;
}

const Sheet_MarryConstant& Sheet_MarryConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

Sheet_MarryConstant* Sheet_MarryConstant::default_instance_ = NULL;

Sheet_MarryConstant* Sheet_MarryConstant::New() const {
  return new Sheet_MarryConstant;
}

void Sheet_MarryConstant::Clear() {
  e_marryconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarryConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarryConstant E_MarryConstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarryConstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marryconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarryConstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarryConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarryConstant E_MarryConstant_List = 1;
  for (int i = 0; i < this->e_marryconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marryconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarryConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarryConstant E_MarryConstant_List = 1;
  for (int i = 0; i < this->e_marryconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marryconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarryConstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarryConstant E_MarryConstant_List = 1;
  total_size += 1 * this->e_marryconstant_list_size();
  for (int i = 0; i < this->e_marryconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marryconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarryConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarryConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarryConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarryConstant::MergeFrom(const Sheet_MarryConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marryconstant_list_.MergeFrom(from.e_marryconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarryConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarryConstant::CopyFrom(const Sheet_MarryConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarryConstant::IsInitialized() const {

  return true;
}

void Sheet_MarryConstant::Swap(Sheet_MarryConstant* other) {
  if (other != this) {
    e_marryconstant_list_.Swap(&other->e_marryconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarryConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarryConstant_descriptor_;
  metadata.reflection = Sheet_MarryConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryCommon::kMLvFieldNumber;
#endif  // !_MSC_VER

E_MarryCommon::E_MarryCommon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryCommon::InitAsDefaultInstance() {
}

E_MarryCommon::E_MarryCommon(const E_MarryCommon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryCommon::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryCommon::~E_MarryCommon() {
  SharedDtor();
}

void E_MarryCommon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryCommon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryCommon_descriptor_;
}

const E_MarryCommon& E_MarryCommon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryCommon* E_MarryCommon::default_instance_ = NULL;

E_MarryCommon* E_MarryCommon::New() const {
  return new E_MarryCommon;
}

void E_MarryCommon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryCommon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryCommon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryCommon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryCommon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryCommon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryCommon::MergeFrom(const E_MarryCommon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryCommon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryCommon::CopyFrom(const E_MarryCommon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryCommon::IsInitialized() const {

  return true;
}

void E_MarryCommon::Swap(E_MarryCommon* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryCommon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryCommon_descriptor_;
  metadata.reflection = E_MarryCommon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarryCommon::kEMarryCommonListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarryCommon::Sheet_MarryCommon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarryCommon::InitAsDefaultInstance() {
}

Sheet_MarryCommon::Sheet_MarryCommon(const Sheet_MarryCommon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarryCommon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarryCommon::~Sheet_MarryCommon() {
  SharedDtor();
}

void Sheet_MarryCommon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarryCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarryCommon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarryCommon_descriptor_;
}

const Sheet_MarryCommon& Sheet_MarryCommon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

Sheet_MarryCommon* Sheet_MarryCommon::default_instance_ = NULL;

Sheet_MarryCommon* Sheet_MarryCommon::New() const {
  return new Sheet_MarryCommon;
}

void Sheet_MarryCommon::Clear() {
  e_marrycommon_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarryCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarryCommon E_MarryCommon_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarryCommon_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marrycommon_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarryCommon_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarryCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarryCommon E_MarryCommon_List = 1;
  for (int i = 0; i < this->e_marrycommon_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marrycommon_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarryCommon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarryCommon E_MarryCommon_List = 1;
  for (int i = 0; i < this->e_marrycommon_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marrycommon_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarryCommon::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarryCommon E_MarryCommon_List = 1;
  total_size += 1 * this->e_marrycommon_list_size();
  for (int i = 0; i < this->e_marrycommon_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marrycommon_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarryCommon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarryCommon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarryCommon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarryCommon::MergeFrom(const Sheet_MarryCommon& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marrycommon_list_.MergeFrom(from.e_marrycommon_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarryCommon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarryCommon::CopyFrom(const Sheet_MarryCommon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarryCommon::IsInitialized() const {

  return true;
}

void Sheet_MarryCommon::Swap(Sheet_MarryCommon* other) {
  if (other != this) {
    e_marrycommon_list_.Swap(&other->e_marrycommon_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarryCommon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarryCommon_descriptor_;
  metadata.reflection = Sheet_MarryCommon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryWeddingStageDesc::kMNumFieldNumber;
#endif  // !_MSC_VER

E_MarryWeddingStageDesc::E_MarryWeddingStageDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryWeddingStageDesc::InitAsDefaultInstance() {
}

E_MarryWeddingStageDesc::E_MarryWeddingStageDesc(const E_MarryWeddingStageDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryWeddingStageDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryWeddingStageDesc::~E_MarryWeddingStageDesc() {
  SharedDtor();
}

void E_MarryWeddingStageDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryWeddingStageDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryWeddingStageDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryWeddingStageDesc_descriptor_;
}

const E_MarryWeddingStageDesc& E_MarryWeddingStageDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryWeddingStageDesc* E_MarryWeddingStageDesc::default_instance_ = NULL;

E_MarryWeddingStageDesc* E_MarryWeddingStageDesc::New() const {
  return new E_MarryWeddingStageDesc;
}

void E_MarryWeddingStageDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryWeddingStageDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryWeddingStageDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryWeddingStageDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryWeddingStageDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryWeddingStageDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryWeddingStageDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryWeddingStageDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryWeddingStageDesc::MergeFrom(const E_MarryWeddingStageDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryWeddingStageDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryWeddingStageDesc::CopyFrom(const E_MarryWeddingStageDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryWeddingStageDesc::IsInitialized() const {

  return true;
}

void E_MarryWeddingStageDesc::Swap(E_MarryWeddingStageDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryWeddingStageDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryWeddingStageDesc_descriptor_;
  metadata.reflection = E_MarryWeddingStageDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryWeddingFireDesc::kMValueFieldNumber;
const int E_MarryWeddingFireDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_MarryWeddingFireDesc::E_MarryWeddingFireDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryWeddingFireDesc::InitAsDefaultInstance() {
}

E_MarryWeddingFireDesc::E_MarryWeddingFireDesc(const E_MarryWeddingFireDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryWeddingFireDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryWeddingFireDesc::~E_MarryWeddingFireDesc() {
  SharedDtor();
}

void E_MarryWeddingFireDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryWeddingFireDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryWeddingFireDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryWeddingFireDesc_descriptor_;
}

const E_MarryWeddingFireDesc& E_MarryWeddingFireDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryWeddingFireDesc* E_MarryWeddingFireDesc::default_instance_ = NULL;

E_MarryWeddingFireDesc* E_MarryWeddingFireDesc::New() const {
  return new E_MarryWeddingFireDesc;
}

void E_MarryWeddingFireDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryWeddingFireDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryWeddingFireDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryWeddingFireDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryWeddingFireDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryWeddingFireDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryWeddingFireDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryWeddingFireDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryWeddingFireDesc::MergeFrom(const E_MarryWeddingFireDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryWeddingFireDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryWeddingFireDesc::CopyFrom(const E_MarryWeddingFireDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryWeddingFireDesc::IsInitialized() const {

  return true;
}

void E_MarryWeddingFireDesc::Swap(E_MarryWeddingFireDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryWeddingFireDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryWeddingFireDesc_descriptor_;
  metadata.reflection = E_MarryWeddingFireDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryWeddingMoodDesc::kMRewardFieldNumber;
const int E_MarryWeddingMoodDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_MarryWeddingMoodDesc::E_MarryWeddingMoodDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryWeddingMoodDesc::InitAsDefaultInstance() {
}

E_MarryWeddingMoodDesc::E_MarryWeddingMoodDesc(const E_MarryWeddingMoodDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryWeddingMoodDesc::SharedCtor() {
  _cached_size_ = 0;
  m_reward_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryWeddingMoodDesc::~E_MarryWeddingMoodDesc() {
  SharedDtor();
}

void E_MarryWeddingMoodDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryWeddingMoodDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryWeddingMoodDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryWeddingMoodDesc_descriptor_;
}

const E_MarryWeddingMoodDesc& E_MarryWeddingMoodDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryWeddingMoodDesc* E_MarryWeddingMoodDesc::default_instance_ = NULL;

E_MarryWeddingMoodDesc* E_MarryWeddingMoodDesc::New() const {
  return new E_MarryWeddingMoodDesc;
}

void E_MarryWeddingMoodDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_reward_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryWeddingMoodDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryWeddingMoodDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_reward = 1;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_reward(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryWeddingMoodDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_reward = 1;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_reward(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryWeddingMoodDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_reward = 1;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryWeddingMoodDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryWeddingMoodDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryWeddingMoodDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryWeddingMoodDesc::MergeFrom(const E_MarryWeddingMoodDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryWeddingMoodDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryWeddingMoodDesc::CopyFrom(const E_MarryWeddingMoodDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryWeddingMoodDesc::IsInitialized() const {

  return true;
}

void E_MarryWeddingMoodDesc::Swap(E_MarryWeddingMoodDesc* other) {
  if (other != this) {
    std::swap(m_reward_, other->m_reward_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryWeddingMoodDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryWeddingMoodDesc_descriptor_;
  metadata.reflection = E_MarryWeddingMoodDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryWedding::kMIdFieldNumber;
const int E_MarryWedding::kMSignrewardFieldNumber;
const int E_MarryWedding::kMSigndaynumFieldNumber;
const int E_MarryWedding::kMCakereftimeFieldNumber;
const int E_MarryWedding::kMCakenumFieldNumber;
const int E_MarryWedding::kMCakeFieldNumber;
const int E_MarryWedding::kMModelFieldNumber;
const int E_MarryWedding::kMModeltimeFieldNumber;
const int E_MarryWedding::kMCakerewardFieldNumber;
const int E_MarryWedding::kMSigncakenumFieldNumber;
const int E_MarryWedding::kMMonsterFieldNumber;
const int E_MarryWedding::kMMonsternumFieldNumber;
const int E_MarryWedding::kMMonstertimeFieldNumber;
const int E_MarryWedding::kMNpcidFieldNumber;
const int E_MarryWedding::kMNpcnumFieldNumber;
const int E_MarryWedding::kMMonsterrewardFieldNumber;
const int E_MarryWedding::kMMonsterdaynumFieldNumber;
const int E_MarryWedding::kMFeastidFieldNumber;
const int E_MarryWedding::kMFeastrewardFieldNumber;
const int E_MarryWedding::kMFeastnumFieldNumber;
const int E_MarryWedding::kMIntervalFieldNumber;
const int E_MarryWedding::kMSkillidFieldNumber;
const int E_MarryWedding::kMStageFieldNumber;
const int E_MarryWedding::kMFireFieldNumber;
const int E_MarryWedding::kMMoodFieldNumber;
#endif  // !_MSC_VER

E_MarryWedding::E_MarryWedding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryWedding::InitAsDefaultInstance() {
}

E_MarryWedding::E_MarryWedding(const E_MarryWedding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryWedding::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_signreward_ = 0;
  m_signdaynum_ = 0;
  m_cakereftime_ = 0;
  m_cakenum_ = 0;
  m_cake_ = 0;
  m_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_modeltime_ = 0;
  m_cakereward_ = 0;
  m_signcakenum_ = 0;
  m_monster_ = 0;
  m_monsternum_ = 0;
  m_monstertime_ = 0;
  m_npcid_ = 0;
  m_npcnum_ = 0;
  m_monsterreward_ = 0;
  m_monsterdaynum_ = 0;
  m_feastid_ = 0;
  m_feastreward_ = 0;
  m_feastnum_ = 0;
  m_interval_ = 0;
  m_skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryWedding::~E_MarryWedding() {
  SharedDtor();
}

void E_MarryWedding::SharedDtor() {
  if (m_model_ != &::google::protobuf::internal::kEmptyString) {
    delete m_model_;
  }
  if (this != default_instance_) {
  }
}

void E_MarryWedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryWedding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryWedding_descriptor_;
}

const E_MarryWedding& E_MarryWedding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryWedding* E_MarryWedding::default_instance_ = NULL;

E_MarryWedding* E_MarryWedding::New() const {
  return new E_MarryWedding;
}

void E_MarryWedding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_signreward_ = 0;
    m_signdaynum_ = 0;
    m_cakereftime_ = 0;
    m_cakenum_ = 0;
    m_cake_ = 0;
    if (has_m_model()) {
      if (m_model_ != &::google::protobuf::internal::kEmptyString) {
        m_model_->clear();
      }
    }
    m_modeltime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_cakereward_ = 0;
    m_signcakenum_ = 0;
    m_monster_ = 0;
    m_monsternum_ = 0;
    m_monstertime_ = 0;
    m_npcid_ = 0;
    m_npcnum_ = 0;
    m_monsterreward_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_monsterdaynum_ = 0;
    m_feastid_ = 0;
    m_feastreward_ = 0;
    m_feastnum_ = 0;
    m_interval_ = 0;
    m_skillid_ = 0;
  }
  m_stage_.Clear();
  m_fire_.Clear();
  m_mood_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryWedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_signreward;
        break;
      }

      // optional int32 m_signreward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_signreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_signreward_)));
          set_has_m_signreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_signdaynum;
        break;
      }

      // optional int32 m_signdaynum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_signdaynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_signdaynum_)));
          set_has_m_signdaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_cakereftime;
        break;
      }

      // optional int32 m_cakereftime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cakereftime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cakereftime_)));
          set_has_m_cakereftime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_cakenum;
        break;
      }

      // optional int32 m_cakenum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cakenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cakenum_)));
          set_has_m_cakenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_cake;
        break;
      }

      // optional int32 m_cake = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cake_)));
          set_has_m_cake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_model;
        break;
      }

      // optional string m_model = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_model().data(), this->m_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_modeltime;
        break;
      }

      // optional int32 m_modeltime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_modeltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_modeltime_)));
          set_has_m_modeltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_cakereward;
        break;
      }

      // optional int32 m_cakereward = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cakereward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cakereward_)));
          set_has_m_cakereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_signcakenum;
        break;
      }

      // optional int32 m_signcakenum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_signcakenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_signcakenum_)));
          set_has_m_signcakenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_monster;
        break;
      }

      // optional int32 m_monster = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monster_)));
          set_has_m_monster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_monsternum;
        break;
      }

      // optional int32 m_monsternum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monsternum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monsternum_)));
          set_has_m_monsternum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_monstertime;
        break;
      }

      // optional int32 m_monstertime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monstertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monstertime_)));
          set_has_m_monstertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_npcid;
        break;
      }

      // optional int32 m_npcid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_npcid_)));
          set_has_m_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_npcnum;
        break;
      }

      // optional int32 m_npcnum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_npcnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_npcnum_)));
          set_has_m_npcnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_monsterreward;
        break;
      }

      // optional int32 m_monsterreward = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monsterreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monsterreward_)));
          set_has_m_monsterreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_monsterdaynum;
        break;
      }

      // optional int32 m_monsterdaynum = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monsterdaynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monsterdaynum_)));
          set_has_m_monsterdaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_feastid;
        break;
      }

      // optional int32 m_feastid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_feastid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_feastid_)));
          set_has_m_feastid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_feastreward;
        break;
      }

      // optional int32 m_feastreward = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_feastreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_feastreward_)));
          set_has_m_feastreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_feastnum;
        break;
      }

      // optional int32 m_feastnum = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_feastnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_feastnum_)));
          set_has_m_feastnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_interval;
        break;
      }

      // optional int32 m_interval = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_interval_)));
          set_has_m_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_skillid;
        break;
      }

      // optional int32 m_skillid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_m_stage;
        break;
      }

      // repeated .proto_ff.E_MarryWeddingStageDesc m_stage = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_stage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_m_stage;
        if (input->ExpectTag(194)) goto parse_m_fire;
        break;
      }

      // repeated .proto_ff.E_MarryWeddingFireDesc m_fire = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_fire:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_fire()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_m_fire;
        if (input->ExpectTag(202)) goto parse_m_mood;
        break;
      }

      // repeated .proto_ff.E_MarryWeddingMoodDesc m_mood = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_mood:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_mood()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_m_mood;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryWedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_signreward = 2;
  if (has_m_signreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_signreward(), output);
  }

  // optional int32 m_signdaynum = 3;
  if (has_m_signdaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_signdaynum(), output);
  }

  // optional int32 m_cakereftime = 4;
  if (has_m_cakereftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_cakereftime(), output);
  }

  // optional int32 m_cakenum = 5;
  if (has_m_cakenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_cakenum(), output);
  }

  // optional int32 m_cake = 6;
  if (has_m_cake()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_cake(), output);
  }

  // optional string m_model = 7;
  if (has_m_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_model().data(), this->m_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_model(), output);
  }

  // optional int32 m_modeltime = 8;
  if (has_m_modeltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_modeltime(), output);
  }

  // optional int32 m_cakereward = 9;
  if (has_m_cakereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_cakereward(), output);
  }

  // optional int32 m_signcakenum = 10;
  if (has_m_signcakenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_signcakenum(), output);
  }

  // optional int32 m_monster = 11;
  if (has_m_monster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_monster(), output);
  }

  // optional int32 m_monsternum = 12;
  if (has_m_monsternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_monsternum(), output);
  }

  // optional int32 m_monstertime = 13;
  if (has_m_monstertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_monstertime(), output);
  }

  // optional int32 m_npcid = 14;
  if (has_m_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_npcid(), output);
  }

  // optional int32 m_npcnum = 15;
  if (has_m_npcnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_npcnum(), output);
  }

  // optional int32 m_monsterreward = 16;
  if (has_m_monsterreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_monsterreward(), output);
  }

  // optional int32 m_monsterdaynum = 17;
  if (has_m_monsterdaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_monsterdaynum(), output);
  }

  // optional int32 m_feastid = 18;
  if (has_m_feastid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_feastid(), output);
  }

  // optional int32 m_feastreward = 19;
  if (has_m_feastreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_feastreward(), output);
  }

  // optional int32 m_feastnum = 20;
  if (has_m_feastnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_feastnum(), output);
  }

  // optional int32 m_interval = 21;
  if (has_m_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->m_interval(), output);
  }

  // optional int32 m_skillid = 22;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->m_skillid(), output);
  }

  // repeated .proto_ff.E_MarryWeddingStageDesc m_stage = 23;
  for (int i = 0; i < this->m_stage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->m_stage(i), output);
  }

  // repeated .proto_ff.E_MarryWeddingFireDesc m_fire = 24;
  for (int i = 0; i < this->m_fire_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->m_fire(i), output);
  }

  // repeated .proto_ff.E_MarryWeddingMoodDesc m_mood = 25;
  for (int i = 0; i < this->m_mood_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->m_mood(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryWedding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_signreward = 2;
  if (has_m_signreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_signreward(), target);
  }

  // optional int32 m_signdaynum = 3;
  if (has_m_signdaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_signdaynum(), target);
  }

  // optional int32 m_cakereftime = 4;
  if (has_m_cakereftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_cakereftime(), target);
  }

  // optional int32 m_cakenum = 5;
  if (has_m_cakenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_cakenum(), target);
  }

  // optional int32 m_cake = 6;
  if (has_m_cake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_cake(), target);
  }

  // optional string m_model = 7;
  if (has_m_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_model().data(), this->m_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_model(), target);
  }

  // optional int32 m_modeltime = 8;
  if (has_m_modeltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_modeltime(), target);
  }

  // optional int32 m_cakereward = 9;
  if (has_m_cakereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_cakereward(), target);
  }

  // optional int32 m_signcakenum = 10;
  if (has_m_signcakenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_signcakenum(), target);
  }

  // optional int32 m_monster = 11;
  if (has_m_monster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_monster(), target);
  }

  // optional int32 m_monsternum = 12;
  if (has_m_monsternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_monsternum(), target);
  }

  // optional int32 m_monstertime = 13;
  if (has_m_monstertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_monstertime(), target);
  }

  // optional int32 m_npcid = 14;
  if (has_m_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_npcid(), target);
  }

  // optional int32 m_npcnum = 15;
  if (has_m_npcnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_npcnum(), target);
  }

  // optional int32 m_monsterreward = 16;
  if (has_m_monsterreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_monsterreward(), target);
  }

  // optional int32 m_monsterdaynum = 17;
  if (has_m_monsterdaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_monsterdaynum(), target);
  }

  // optional int32 m_feastid = 18;
  if (has_m_feastid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_feastid(), target);
  }

  // optional int32 m_feastreward = 19;
  if (has_m_feastreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_feastreward(), target);
  }

  // optional int32 m_feastnum = 20;
  if (has_m_feastnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_feastnum(), target);
  }

  // optional int32 m_interval = 21;
  if (has_m_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->m_interval(), target);
  }

  // optional int32 m_skillid = 22;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->m_skillid(), target);
  }

  // repeated .proto_ff.E_MarryWeddingStageDesc m_stage = 23;
  for (int i = 0; i < this->m_stage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->m_stage(i), target);
  }

  // repeated .proto_ff.E_MarryWeddingFireDesc m_fire = 24;
  for (int i = 0; i < this->m_fire_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->m_fire(i), target);
  }

  // repeated .proto_ff.E_MarryWeddingMoodDesc m_mood = 25;
  for (int i = 0; i < this->m_mood_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->m_mood(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryWedding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_signreward = 2;
    if (has_m_signreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_signreward());
    }

    // optional int32 m_signdaynum = 3;
    if (has_m_signdaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_signdaynum());
    }

    // optional int32 m_cakereftime = 4;
    if (has_m_cakereftime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cakereftime());
    }

    // optional int32 m_cakenum = 5;
    if (has_m_cakenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cakenum());
    }

    // optional int32 m_cake = 6;
    if (has_m_cake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cake());
    }

    // optional string m_model = 7;
    if (has_m_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_model());
    }

    // optional int32 m_modeltime = 8;
    if (has_m_modeltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_modeltime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_cakereward = 9;
    if (has_m_cakereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cakereward());
    }

    // optional int32 m_signcakenum = 10;
    if (has_m_signcakenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_signcakenum());
    }

    // optional int32 m_monster = 11;
    if (has_m_monster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monster());
    }

    // optional int32 m_monsternum = 12;
    if (has_m_monsternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monsternum());
    }

    // optional int32 m_monstertime = 13;
    if (has_m_monstertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monstertime());
    }

    // optional int32 m_npcid = 14;
    if (has_m_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_npcid());
    }

    // optional int32 m_npcnum = 15;
    if (has_m_npcnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_npcnum());
    }

    // optional int32 m_monsterreward = 16;
    if (has_m_monsterreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monsterreward());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_monsterdaynum = 17;
    if (has_m_monsterdaynum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monsterdaynum());
    }

    // optional int32 m_feastid = 18;
    if (has_m_feastid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_feastid());
    }

    // optional int32 m_feastreward = 19;
    if (has_m_feastreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_feastreward());
    }

    // optional int32 m_feastnum = 20;
    if (has_m_feastnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_feastnum());
    }

    // optional int32 m_interval = 21;
    if (has_m_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_interval());
    }

    // optional int32 m_skillid = 22;
    if (has_m_skillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

  }
  // repeated .proto_ff.E_MarryWeddingStageDesc m_stage = 23;
  total_size += 2 * this->m_stage_size();
  for (int i = 0; i < this->m_stage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_stage(i));
  }

  // repeated .proto_ff.E_MarryWeddingFireDesc m_fire = 24;
  total_size += 2 * this->m_fire_size();
  for (int i = 0; i < this->m_fire_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_fire(i));
  }

  // repeated .proto_ff.E_MarryWeddingMoodDesc m_mood = 25;
  total_size += 2 * this->m_mood_size();
  for (int i = 0; i < this->m_mood_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_mood(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryWedding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryWedding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryWedding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryWedding::MergeFrom(const E_MarryWedding& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_stage_.MergeFrom(from.m_stage_);
  m_fire_.MergeFrom(from.m_fire_);
  m_mood_.MergeFrom(from.m_mood_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_signreward()) {
      set_m_signreward(from.m_signreward());
    }
    if (from.has_m_signdaynum()) {
      set_m_signdaynum(from.m_signdaynum());
    }
    if (from.has_m_cakereftime()) {
      set_m_cakereftime(from.m_cakereftime());
    }
    if (from.has_m_cakenum()) {
      set_m_cakenum(from.m_cakenum());
    }
    if (from.has_m_cake()) {
      set_m_cake(from.m_cake());
    }
    if (from.has_m_model()) {
      set_m_model(from.m_model());
    }
    if (from.has_m_modeltime()) {
      set_m_modeltime(from.m_modeltime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_cakereward()) {
      set_m_cakereward(from.m_cakereward());
    }
    if (from.has_m_signcakenum()) {
      set_m_signcakenum(from.m_signcakenum());
    }
    if (from.has_m_monster()) {
      set_m_monster(from.m_monster());
    }
    if (from.has_m_monsternum()) {
      set_m_monsternum(from.m_monsternum());
    }
    if (from.has_m_monstertime()) {
      set_m_monstertime(from.m_monstertime());
    }
    if (from.has_m_npcid()) {
      set_m_npcid(from.m_npcid());
    }
    if (from.has_m_npcnum()) {
      set_m_npcnum(from.m_npcnum());
    }
    if (from.has_m_monsterreward()) {
      set_m_monsterreward(from.m_monsterreward());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_monsterdaynum()) {
      set_m_monsterdaynum(from.m_monsterdaynum());
    }
    if (from.has_m_feastid()) {
      set_m_feastid(from.m_feastid());
    }
    if (from.has_m_feastreward()) {
      set_m_feastreward(from.m_feastreward());
    }
    if (from.has_m_feastnum()) {
      set_m_feastnum(from.m_feastnum());
    }
    if (from.has_m_interval()) {
      set_m_interval(from.m_interval());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryWedding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryWedding::CopyFrom(const E_MarryWedding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryWedding::IsInitialized() const {

  return true;
}

void E_MarryWedding::Swap(E_MarryWedding* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_signreward_, other->m_signreward_);
    std::swap(m_signdaynum_, other->m_signdaynum_);
    std::swap(m_cakereftime_, other->m_cakereftime_);
    std::swap(m_cakenum_, other->m_cakenum_);
    std::swap(m_cake_, other->m_cake_);
    std::swap(m_model_, other->m_model_);
    std::swap(m_modeltime_, other->m_modeltime_);
    std::swap(m_cakereward_, other->m_cakereward_);
    std::swap(m_signcakenum_, other->m_signcakenum_);
    std::swap(m_monster_, other->m_monster_);
    std::swap(m_monsternum_, other->m_monsternum_);
    std::swap(m_monstertime_, other->m_monstertime_);
    std::swap(m_npcid_, other->m_npcid_);
    std::swap(m_npcnum_, other->m_npcnum_);
    std::swap(m_monsterreward_, other->m_monsterreward_);
    std::swap(m_monsterdaynum_, other->m_monsterdaynum_);
    std::swap(m_feastid_, other->m_feastid_);
    std::swap(m_feastreward_, other->m_feastreward_);
    std::swap(m_feastnum_, other->m_feastnum_);
    std::swap(m_interval_, other->m_interval_);
    std::swap(m_skillid_, other->m_skillid_);
    m_stage_.Swap(&other->m_stage_);
    m_fire_.Swap(&other->m_fire_);
    m_mood_.Swap(&other->m_mood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryWedding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryWedding_descriptor_;
  metadata.reflection = E_MarryWedding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarryWedding::kEMarryWeddingListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarryWedding::Sheet_MarryWedding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarryWedding::InitAsDefaultInstance() {
}

Sheet_MarryWedding::Sheet_MarryWedding(const Sheet_MarryWedding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarryWedding::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarryWedding::~Sheet_MarryWedding() {
  SharedDtor();
}

void Sheet_MarryWedding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarryWedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarryWedding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarryWedding_descriptor_;
}

const Sheet_MarryWedding& Sheet_MarryWedding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

Sheet_MarryWedding* Sheet_MarryWedding::default_instance_ = NULL;

Sheet_MarryWedding* Sheet_MarryWedding::New() const {
  return new Sheet_MarryWedding;
}

void Sheet_MarryWedding::Clear() {
  e_marrywedding_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarryWedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarryWedding E_MarryWedding_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarryWedding_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marrywedding_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarryWedding_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarryWedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarryWedding E_MarryWedding_List = 1;
  for (int i = 0; i < this->e_marrywedding_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marrywedding_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarryWedding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarryWedding E_MarryWedding_List = 1;
  for (int i = 0; i < this->e_marrywedding_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marrywedding_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarryWedding::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarryWedding E_MarryWedding_List = 1;
  total_size += 1 * this->e_marrywedding_list_size();
  for (int i = 0; i < this->e_marrywedding_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marrywedding_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarryWedding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarryWedding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarryWedding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarryWedding::MergeFrom(const Sheet_MarryWedding& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marrywedding_list_.MergeFrom(from.e_marrywedding_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarryWedding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarryWedding::CopyFrom(const Sheet_MarryWedding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarryWedding::IsInitialized() const {

  return true;
}

void Sheet_MarryWedding::Swap(Sheet_MarryWedding* other) {
  if (other != this) {
    e_marrywedding_list_.Swap(&other->e_marrywedding_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarryWedding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarryWedding_descriptor_;
  metadata.reflection = Sheet_MarryWedding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarryExp::kMLvFieldNumber;
const int E_MarryExp::kMWeddingexpFieldNumber;
const int E_MarryExp::kMDayexpmaxFieldNumber;
#endif  // !_MSC_VER

E_MarryExp::E_MarryExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarryExp::InitAsDefaultInstance() {
}

E_MarryExp::E_MarryExp(const E_MarryExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarryExp::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_weddingexp_ = 0;
  m_dayexpmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarryExp::~E_MarryExp() {
  SharedDtor();
}

void E_MarryExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MarryExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarryExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarryExp_descriptor_;
}

const E_MarryExp& E_MarryExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

E_MarryExp* E_MarryExp::default_instance_ = NULL;

E_MarryExp* E_MarryExp::New() const {
  return new E_MarryExp;
}

void E_MarryExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_weddingexp_ = 0;
    m_dayexpmax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarryExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_weddingexp;
        break;
      }

      // optional int32 m_weddingexp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_weddingexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_weddingexp_)));
          set_has_m_weddingexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_dayexpmax;
        break;
      }

      // optional int32 m_dayexpmax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dayexpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dayexpmax_)));
          set_has_m_dayexpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarryExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_weddingexp = 2;
  if (has_m_weddingexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_weddingexp(), output);
  }

  // optional int32 m_dayexpmax = 3;
  if (has_m_dayexpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_dayexpmax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarryExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_weddingexp = 2;
  if (has_m_weddingexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_weddingexp(), target);
  }

  // optional int32 m_dayexpmax = 3;
  if (has_m_dayexpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_dayexpmax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarryExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_weddingexp = 2;
    if (has_m_weddingexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_weddingexp());
    }

    // optional int32 m_dayexpmax = 3;
    if (has_m_dayexpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dayexpmax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarryExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarryExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarryExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarryExp::MergeFrom(const E_MarryExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_weddingexp()) {
      set_m_weddingexp(from.m_weddingexp());
    }
    if (from.has_m_dayexpmax()) {
      set_m_dayexpmax(from.m_dayexpmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarryExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarryExp::CopyFrom(const E_MarryExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarryExp::IsInitialized() const {

  return true;
}

void E_MarryExp::Swap(E_MarryExp* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_weddingexp_, other->m_weddingexp_);
    std::swap(m_dayexpmax_, other->m_dayexpmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarryExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarryExp_descriptor_;
  metadata.reflection = E_MarryExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarryExp::kEMarryExpListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarryExp::Sheet_MarryExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarryExp::InitAsDefaultInstance() {
}

Sheet_MarryExp::Sheet_MarryExp(const Sheet_MarryExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarryExp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarryExp::~Sheet_MarryExp() {
  SharedDtor();
}

void Sheet_MarryExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarryExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarryExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarryExp_descriptor_;
}

const Sheet_MarryExp& Sheet_MarryExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarry_2eproto();
  return *default_instance_;
}

Sheet_MarryExp* Sheet_MarryExp::default_instance_ = NULL;

Sheet_MarryExp* Sheet_MarryExp::New() const {
  return new Sheet_MarryExp;
}

void Sheet_MarryExp::Clear() {
  e_marryexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarryExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarryExp E_MarryExp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarryExp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marryexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarryExp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarryExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarryExp E_MarryExp_List = 1;
  for (int i = 0; i < this->e_marryexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marryexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarryExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarryExp E_MarryExp_List = 1;
  for (int i = 0; i < this->e_marryexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marryexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarryExp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarryExp E_MarryExp_List = 1;
  total_size += 1 * this->e_marryexp_list_size();
  for (int i = 0; i < this->e_marryexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marryexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarryExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarryExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarryExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarryExp::MergeFrom(const Sheet_MarryExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marryexp_list_.MergeFrom(from.e_marryexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarryExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarryExp::CopyFrom(const Sheet_MarryExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarryExp::IsInitialized() const {

  return true;
}

void Sheet_MarryExp::Swap(Sheet_MarryExp* other) {
  if (other != this) {
    e_marryexp_list_.Swap(&other->e_marryexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarryExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarryExp_descriptor_;
  metadata.reflection = Sheet_MarryExp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
