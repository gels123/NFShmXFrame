// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tasktracker.proto

#ifndef PROTOBUF_tasktracker_2eproto__INCLUDED
#define PROTOBUF_tasktracker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tasktracker_2eproto();
void protobuf_AssignDesc_tasktracker_2eproto();
void protobuf_ShutdownFile_tasktracker_2eproto();

class tasktrackertasktracker;
class Sheet_tasktrackertasktracker;

// ===================================================================

class tasktrackertasktracker : public ::google::protobuf::Message {
 public:
  tasktrackertasktracker();
  virtual ~tasktrackertasktracker();

  tasktrackertasktracker(const tasktrackertasktracker& from);

  inline tasktrackertasktracker& operator=(const tasktrackertasktracker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tasktrackertasktracker& default_instance();

  void Swap(tasktrackertasktracker* other);

  // implements Message ----------------------------------------------

  tasktrackertasktracker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tasktrackertasktracker& from);
  void MergeFrom(const tasktrackertasktracker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 comID = 1;
  inline bool has_comid() const;
  inline void clear_comid();
  static const int kComIDFieldNumber = 1;
  inline ::google::protobuf::int32 comid() const;
  inline void set_comid(::google::protobuf::int32 value);

  // optional int32 trueID = 2;
  inline bool has_trueid() const;
  inline void clear_trueid();
  static const int kTrueIDFieldNumber = 2;
  inline ::google::protobuf::int32 trueid() const;
  inline void set_trueid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tasktrackertasktracker)
 private:
  inline void set_has_comid();
  inline void clear_has_comid();
  inline void set_has_trueid();
  inline void clear_has_trueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 comid_;
  ::google::protobuf::int32 trueid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tasktracker_2eproto();
  friend void protobuf_AssignDesc_tasktracker_2eproto();
  friend void protobuf_ShutdownFile_tasktracker_2eproto();

  void InitAsDefaultInstance();
  static tasktrackertasktracker* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_tasktrackertasktracker : public ::google::protobuf::Message {
 public:
  Sheet_tasktrackertasktracker();
  virtual ~Sheet_tasktrackertasktracker();

  Sheet_tasktrackertasktracker(const Sheet_tasktrackertasktracker& from);

  inline Sheet_tasktrackertasktracker& operator=(const Sheet_tasktrackertasktracker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_tasktrackertasktracker& default_instance();

  void Swap(Sheet_tasktrackertasktracker* other);

  // implements Message ----------------------------------------------

  Sheet_tasktrackertasktracker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_tasktrackertasktracker& from);
  void MergeFrom(const Sheet_tasktrackertasktracker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.tasktrackertasktracker tasktrackertasktracker_List = 1;
  inline int tasktrackertasktracker_list_size() const;
  inline void clear_tasktrackertasktracker_list();
  static const int kTasktrackertasktrackerListFieldNumber = 1;
  inline const ::proto_ff::tasktrackertasktracker& tasktrackertasktracker_list(int index) const;
  inline ::proto_ff::tasktrackertasktracker* mutable_tasktrackertasktracker_list(int index);
  inline ::proto_ff::tasktrackertasktracker* add_tasktrackertasktracker_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::tasktrackertasktracker >&
      tasktrackertasktracker_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::tasktrackertasktracker >*
      mutable_tasktrackertasktracker_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_tasktrackertasktracker)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::tasktrackertasktracker > tasktrackertasktracker_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_tasktracker_2eproto();
  friend void protobuf_AssignDesc_tasktracker_2eproto();
  friend void protobuf_ShutdownFile_tasktracker_2eproto();

  void InitAsDefaultInstance();
  static Sheet_tasktrackertasktracker* default_instance_;
};
// ===================================================================


// ===================================================================

// tasktrackertasktracker

// optional int32 comID = 1;
inline bool tasktrackertasktracker::has_comid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tasktrackertasktracker::set_has_comid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tasktrackertasktracker::clear_has_comid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tasktrackertasktracker::clear_comid() {
  comid_ = 0;
  clear_has_comid();
}
inline ::google::protobuf::int32 tasktrackertasktracker::comid() const {
  return comid_;
}
inline void tasktrackertasktracker::set_comid(::google::protobuf::int32 value) {
  set_has_comid();
  comid_ = value;
}

// optional int32 trueID = 2;
inline bool tasktrackertasktracker::has_trueid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tasktrackertasktracker::set_has_trueid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tasktrackertasktracker::clear_has_trueid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tasktrackertasktracker::clear_trueid() {
  trueid_ = 0;
  clear_has_trueid();
}
inline ::google::protobuf::int32 tasktrackertasktracker::trueid() const {
  return trueid_;
}
inline void tasktrackertasktracker::set_trueid(::google::protobuf::int32 value) {
  set_has_trueid();
  trueid_ = value;
}

// -------------------------------------------------------------------

// Sheet_tasktrackertasktracker

// repeated .proto_ff.tasktrackertasktracker tasktrackertasktracker_List = 1;
inline int Sheet_tasktrackertasktracker::tasktrackertasktracker_list_size() const {
  return tasktrackertasktracker_list_.size();
}
inline void Sheet_tasktrackertasktracker::clear_tasktrackertasktracker_list() {
  tasktrackertasktracker_list_.Clear();
}
inline const ::proto_ff::tasktrackertasktracker& Sheet_tasktrackertasktracker::tasktrackertasktracker_list(int index) const {
  return tasktrackertasktracker_list_.Get(index);
}
inline ::proto_ff::tasktrackertasktracker* Sheet_tasktrackertasktracker::mutable_tasktrackertasktracker_list(int index) {
  return tasktrackertasktracker_list_.Mutable(index);
}
inline ::proto_ff::tasktrackertasktracker* Sheet_tasktrackertasktracker::add_tasktrackertasktracker_list() {
  return tasktrackertasktracker_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::tasktrackertasktracker >&
Sheet_tasktrackertasktracker::tasktrackertasktracker_list() const {
  return tasktrackertasktracker_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::tasktrackertasktracker >*
Sheet_tasktrackertasktracker::mutable_tasktrackertasktracker_list() {
  return &tasktrackertasktracker_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tasktracker_2eproto__INCLUDED
