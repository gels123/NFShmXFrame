// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Market.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Market.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* Goods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Goods_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketItemRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketItemRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketRoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketRoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketRoleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketRoleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyNewGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyNewGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketFollowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketFollowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketFollowRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketFollowRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMarketFollow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMarketFollow_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketLogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketLogReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketLogRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketLogRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketRoleOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketRoleOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketRoleOptRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketRoleOptRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMarketFactionStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMarketFactionStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LMarketRoleUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LMarketRoleUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CMarketRoleUpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CMarketRoleUpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LMarketVieReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LMarketVieReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CMarketVieRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CMarketVieRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LMarketBuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LMarketBuyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CMarketBuyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CMarketBuyRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Market_2eproto() {
  protobuf_AddDesc_Market_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Market.proto");
  GOOGLE_CHECK(file != NULL);
  Goods_descriptor_ = file->message_type(0);
  static const int Goods_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, market_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, market_owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, vie_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, isdelete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, cmpt_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, cur_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, cmpt_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, buyer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, item_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, item_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, take_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, has_take_),
  };
  Goods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Goods_descriptor_,
      Goods::default_instance_,
      Goods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Goods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Goods));
  MarketItemReq_descriptor_ = file->message_type(1);
  static const int MarketItemReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemReq, market_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemReq, bigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemReq, smallid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemReq, sort_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemReq, fiter_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemReq, is_same_prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemReq, cur_page_),
  };
  MarketItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketItemReq_descriptor_,
      MarketItemReq::default_instance_,
      MarketItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketItemReq));
  MarketItemRsp_descriptor_ = file->message_type(2);
  static const int MarketItemRsp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemRsp, market_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemRsp, bigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemRsp, smallid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemRsp, sort_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemRsp, fiter_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemRsp, is_same_prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemRsp, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemRsp, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemRsp, all_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemRsp, small_view_),
  };
  MarketItemRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketItemRsp_descriptor_,
      MarketItemRsp::default_instance_,
      MarketItemRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketItemRsp));
  MarketRoleReq_descriptor_ = file->message_type(3);
  static const int MarketRoleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleReq, type_),
  };
  MarketRoleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketRoleReq_descriptor_,
      MarketRoleReq::default_instance_,
      MarketRoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketRoleReq));
  MarketRoleRsp_descriptor_ = file->message_type(4);
  static const int MarketRoleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleRsp, infos_),
  };
  MarketRoleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketRoleRsp_descriptor_,
      MarketRoleRsp::default_instance_,
      MarketRoleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketRoleRsp));
  NotifyNewGoods_descriptor_ = file->message_type(5);
  static const int NotifyNewGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewGoods, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewGoods, market_type_),
  };
  NotifyNewGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyNewGoods_descriptor_,
      NotifyNewGoods::default_instance_,
      NotifyNewGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyNewGoods));
  MarketFollowReq_descriptor_ = file->message_type(6);
  static const int MarketFollowReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketFollowReq, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketFollowReq, opt_),
  };
  MarketFollowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketFollowReq_descriptor_,
      MarketFollowReq::default_instance_,
      MarketFollowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketFollowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketFollowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketFollowReq));
  MarketFollowRsp_descriptor_ = file->message_type(7);
  static const int MarketFollowRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketFollowRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketFollowRsp, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketFollowRsp, opt_),
  };
  MarketFollowRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketFollowRsp_descriptor_,
      MarketFollowRsp::default_instance_,
      MarketFollowRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketFollowRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketFollowRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketFollowRsp));
  NotifyMarketFollow_descriptor_ = file->message_type(8);
  static const int NotifyMarketFollow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarketFollow, follow_ids_),
  };
  NotifyMarketFollow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMarketFollow_descriptor_,
      NotifyMarketFollow::default_instance_,
      NotifyMarketFollow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarketFollow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarketFollow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMarketFollow));
  MarketLogReq_descriptor_ = file->message_type(9);
  static const int MarketLogReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketLogReq, type_),
  };
  MarketLogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketLogReq_descriptor_,
      MarketLogReq::default_instance_,
      MarketLogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketLogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketLogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketLogReq));
  MarketLogRsp_descriptor_ = file->message_type(10);
  static const int MarketLogRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketLogRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketLogRsp, list_),
  };
  MarketLogRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketLogRsp_descriptor_,
      MarketLogRsp::default_instance_,
      MarketLogRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketLogRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketLogRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketLogRsp));
  MarketRoleOptReq_descriptor_ = file->message_type(11);
  static const int MarketRoleOptReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptReq, package_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptReq, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptReq, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptReq, order_id_),
  };
  MarketRoleOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketRoleOptReq_descriptor_,
      MarketRoleOptReq::default_instance_,
      MarketRoleOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketRoleOptReq));
  MarketRoleOptRsp_descriptor_ = file->message_type(12);
  static const int MarketRoleOptRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptRsp, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptRsp, info_),
  };
  MarketRoleOptRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketRoleOptRsp_descriptor_,
      MarketRoleOptRsp::default_instance_,
      MarketRoleOptRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleOptRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketRoleOptRsp));
  NotifyMarketFactionStart_descriptor_ = file->message_type(13);
  static const int NotifyMarketFactionStart_offsets_[1] = {
  };
  NotifyMarketFactionStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMarketFactionStart_descriptor_,
      NotifyMarketFactionStart::default_instance_,
      NotifyMarketFactionStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarketFactionStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarketFactionStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMarketFactionStart));
  MarketRoleInfo_descriptor_ = file->message_type(14);
  static const int MarketRoleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleInfo, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleInfo, follow_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleInfo, recovery_num_),
  };
  MarketRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketRoleInfo_descriptor_,
      MarketRoleInfo::default_instance_,
      MarketRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketRoleInfo));
  C2LMarketRoleUpReq_descriptor_ = file->message_type(15);
  static const int C2LMarketRoleUpReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketRoleUpReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketRoleUpReq, package_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketRoleUpReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketRoleUpReq, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketRoleUpReq, role_id_),
  };
  C2LMarketRoleUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LMarketRoleUpReq_descriptor_,
      C2LMarketRoleUpReq::default_instance_,
      C2LMarketRoleUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketRoleUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketRoleUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LMarketRoleUpReq));
  L2CMarketRoleUpRsp_descriptor_ = file->message_type(16);
  static const int L2CMarketRoleUpRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketRoleUpRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketRoleUpRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketRoleUpRsp, package_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketRoleUpRsp, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketRoleUpRsp, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketRoleUpRsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketRoleUpRsp, item_data_),
  };
  L2CMarketRoleUpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CMarketRoleUpRsp_descriptor_,
      L2CMarketRoleUpRsp::default_instance_,
      L2CMarketRoleUpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketRoleUpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketRoleUpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CMarketRoleUpRsp));
  C2LMarketVieReq_descriptor_ = file->message_type(17);
  static const int C2LMarketVieReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketVieReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketVieReq, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketVieReq, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketVieReq, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketVieReq, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketVieReq, order_id_),
  };
  C2LMarketVieReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LMarketVieReq_descriptor_,
      C2LMarketVieReq::default_instance_,
      C2LMarketVieReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketVieReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketVieReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LMarketVieReq));
  L2CMarketVieRsp_descriptor_ = file->message_type(18);
  static const int L2CMarketVieRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketVieRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketVieRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketVieRsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketVieRsp, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketVieRsp, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketVieRsp, order_id_),
  };
  L2CMarketVieRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CMarketVieRsp_descriptor_,
      L2CMarketVieRsp::default_instance_,
      L2CMarketVieRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketVieRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketVieRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CMarketVieRsp));
  C2LMarketBuyReq_descriptor_ = file->message_type(19);
  static const int C2LMarketBuyReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketBuyReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketBuyReq, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketBuyReq, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketBuyReq, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketBuyReq, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketBuyReq, order_id_),
  };
  C2LMarketBuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LMarketBuyReq_descriptor_,
      C2LMarketBuyReq::default_instance_,
      C2LMarketBuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketBuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarketBuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LMarketBuyReq));
  L2CMarketBuyRsp_descriptor_ = file->message_type(20);
  static const int L2CMarketBuyRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketBuyRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketBuyRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketBuyRsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketBuyRsp, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketBuyRsp, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketBuyRsp, order_id_),
  };
  L2CMarketBuyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CMarketBuyRsp_descriptor_,
      L2CMarketBuyRsp::default_instance_,
      L2CMarketBuyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketBuyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarketBuyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CMarketBuyRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Market_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Goods_descriptor_, &Goods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketItemReq_descriptor_, &MarketItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketItemRsp_descriptor_, &MarketItemRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketRoleReq_descriptor_, &MarketRoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketRoleRsp_descriptor_, &MarketRoleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyNewGoods_descriptor_, &NotifyNewGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketFollowReq_descriptor_, &MarketFollowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketFollowRsp_descriptor_, &MarketFollowRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMarketFollow_descriptor_, &NotifyMarketFollow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketLogReq_descriptor_, &MarketLogReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketLogRsp_descriptor_, &MarketLogRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketRoleOptReq_descriptor_, &MarketRoleOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketRoleOptRsp_descriptor_, &MarketRoleOptRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMarketFactionStart_descriptor_, &NotifyMarketFactionStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketRoleInfo_descriptor_, &MarketRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LMarketRoleUpReq_descriptor_, &C2LMarketRoleUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CMarketRoleUpRsp_descriptor_, &L2CMarketRoleUpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LMarketVieReq_descriptor_, &C2LMarketVieReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CMarketVieRsp_descriptor_, &L2CMarketVieRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LMarketBuyReq_descriptor_, &C2LMarketBuyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CMarketBuyRsp_descriptor_, &L2CMarketBuyRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Market_2eproto() {
  delete Goods::default_instance_;
  delete Goods_reflection_;
  delete MarketItemReq::default_instance_;
  delete MarketItemReq_reflection_;
  delete MarketItemRsp::default_instance_;
  delete MarketItemRsp_reflection_;
  delete MarketRoleReq::default_instance_;
  delete MarketRoleReq_reflection_;
  delete MarketRoleRsp::default_instance_;
  delete MarketRoleRsp_reflection_;
  delete NotifyNewGoods::default_instance_;
  delete NotifyNewGoods_reflection_;
  delete MarketFollowReq::default_instance_;
  delete MarketFollowReq_reflection_;
  delete MarketFollowRsp::default_instance_;
  delete MarketFollowRsp_reflection_;
  delete NotifyMarketFollow::default_instance_;
  delete NotifyMarketFollow_reflection_;
  delete MarketLogReq::default_instance_;
  delete MarketLogReq_reflection_;
  delete MarketLogRsp::default_instance_;
  delete MarketLogRsp_reflection_;
  delete MarketRoleOptReq::default_instance_;
  delete MarketRoleOptReq_reflection_;
  delete MarketRoleOptRsp::default_instance_;
  delete MarketRoleOptRsp_reflection_;
  delete NotifyMarketFactionStart::default_instance_;
  delete NotifyMarketFactionStart_reflection_;
  delete MarketRoleInfo::default_instance_;
  delete MarketRoleInfo_reflection_;
  delete C2LMarketRoleUpReq::default_instance_;
  delete C2LMarketRoleUpReq_reflection_;
  delete L2CMarketRoleUpRsp::default_instance_;
  delete L2CMarketRoleUpRsp_reflection_;
  delete C2LMarketVieReq::default_instance_;
  delete C2LMarketVieReq_reflection_;
  delete L2CMarketVieRsp::default_instance_;
  delete L2CMarketVieRsp_reflection_;
  delete C2LMarketBuyReq::default_instance_;
  delete C2LMarketBuyReq_reflection_;
  delete L2CMarketBuyRsp::default_instance_;
  delete L2CMarketBuyRsp_reflection_;
}

void protobuf_AddDesc_Market_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Market.proto\022\010proto_ff\032\tCom.proto\032\017Com"
    "Define.proto\"\334\002\n\005Goods\022\020\n\010order_id\030\001 \001(\004"
    "\022\023\n\013market_type\030\002 \001(\005\022\024\n\014market_owner\030\003 "
    "\001(\004\022\017\n\007role_id\030\004 \001(\004\022\022\n\nstart_time\030\005 \001(\004"
    "\022\020\n\010end_time\030\006 \001(\004\022\016\n\006vie_id\030\007 \001(\004\022\r\n\005st"
    "ate\030\010 \001(\005\022\020\n\010isdelete\030\t \001(\005\022\021\n\tcmpt_time"
    "\030\n \001(\004\022\021\n\tcur_price\030\013 \001(\005\022\022\n\ncmpt_price\030"
    "\014 \001(\005\022\020\n\010buyer_id\030\r \001(\004\022*\n\titem_data\030\016 \001"
    "(\0132\027.proto_ff.ItemProtoInfo\022\022\n\nitem_pric"
    "e\030\017 \001(\005\022\020\n\010take_num\030\020 \001(\005\022\020\n\010has_take\030\021 "
    "\001(\005\"\223\001\n\rMarketItemReq\022\023\n\013market_type\030\001 \001"
    "(\005\022\r\n\005bigId\030\002 \001(\005\022\017\n\007smallId\030\003 \001(\005\022\021\n\tso"
    "rt_type\030\004 \001(\005\022\022\n\nfiter_star\030\005 \001(\005\022\024\n\014is_"
    "same_prof\030\006 \001(\005\022\020\n\010cur_page\030\007 \001(\005\"\354\001\n\rMa"
    "rketItemRsp\022\023\n\013market_type\030\001 \001(\005\022\r\n\005bigI"
    "d\030\002 \001(\005\022\017\n\007smallId\030\003 \001(\005\022\021\n\tsort_type\030\004 "
    "\001(\005\022\022\n\nfiter_star\030\005 \001(\005\022\024\n\014is_same_prof\030"
    "\006 \001(\005\022\036\n\005infos\030\007 \003(\0132\017.proto_ff.Goods\022\020\n"
    "\010cur_page\030\010 \001(\005\022\020\n\010all_page\030\t \001(\005\022%\n\nsma"
    "ll_view\030\n \003(\0132\021.proto_ff.ComPair\"\035\n\rMark"
    "etRoleReq\022\014\n\004type\030\001 \001(\005\"=\n\rMarketRoleRsp"
    "\022\014\n\004type\030\001 \001(\005\022\036\n\005infos\030\002 \003(\0132\017.proto_ff"
    ".Goods\"5\n\016NotifyNewGoods\022\016\n\006itemid\030\001 \001(\005"
    "\022\023\n\013market_type\030\002 \001(\005\"/\n\017MarketFollowReq"
    "\022\017\n\007item_id\030\001 \001(\005\022\013\n\003opt\030\002 \001(\005\"<\n\017Market"
    "FollowRsp\022\013\n\003ret\030\001 \001(\005\022\017\n\007item_id\030\002 \001(\005\022"
    "\013\n\003opt\030\003 \001(\005\"(\n\022NotifyMarketFollow\022\022\n\nfo"
    "llow_ids\030\001 \003(\005\"\034\n\014MarketLogReq\022\014\n\004type\030\001"
    " \001(\005\";\n\014MarketLogRsp\022\014\n\004type\030\001 \001(\005\022\035\n\004li"
    "st\030\002 \003(\0132\017.proto_ff.Goods\"s\n\020MarketRoleO"
    "ptReq\022\014\n\004type\030\001 \001(\005\022\024\n\014package_type\030\002 \001("
    "\005\022\r\n\005index\030\003 \001(\005\022\013\n\003num\030\004 \001(\005\022\r\n\005price\030\005"
    " \001(\005\022\020\n\010order_id\030\006 \001(\004\"f\n\020MarketRoleOptR"
    "sp\022\013\n\003ret\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\013\n\003pos\030\003 \001"
    "(\005\022\013\n\003num\030\004 \001(\005\022\035\n\004info\030\005 \001(\0132\017.proto_ff"
    ".Goods\"\032\n\030NotifyMarketFactionStart\"]\n\016Ma"
    "rketRoleInfo\022\013\n\003cid\030\001 \001(\004\022\024\n\014refresh_tim"
    "e\030\002 \001(\004\022\022\n\nfollow_ids\030\003 \003(\005\022\024\n\014recovery_"
    "num\030\004 \001(\005\"e\n\022C2LMarketRoleUpReq\022\014\n\004type\030"
    "\001 \001(\005\022\024\n\014package_type\030\002 \001(\005\022\r\n\005index\030\003 \001"
    "(\005\022\013\n\003num\030\004 \001(\005\022\017\n\007role_id\030\005 \001(\004\"\236\001\n\022L2C"
    "MarketRoleUpRsp\022\013\n\003ret\030\001 \001(\005\022\014\n\004type\030\002 \001"
    "(\005\022\024\n\014package_type\030\003 \001(\005\022\r\n\005index\030\004 \001(\005\022"
    "\013\n\003num\030\005 \001(\005\022\017\n\007role_id\030\006 \001(\004\022*\n\titem_da"
    "ta\030\007 \001(\0132\027.proto_ff.ItemProtoInfo\"r\n\017C2L"
    "MarketVieReq\022\014\n\004type\030\001 \001(\005\022\017\n\007role_id\030\002 "
    "\001(\004\022\r\n\005price\030\003 \001(\005\022\022\n\nprice_type\030\004 \001(\005\022\013"
    "\n\003opt\030\005 \001(\005\022\020\n\010order_id\030\006 \001(\004\"r\n\017L2CMark"
    "etVieRsp\022\013\n\003ret\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\017\n\007r"
    "ole_id\030\003 \001(\004\022\r\n\005price\030\004 \001(\005\022\022\n\nprice_typ"
    "e\030\005 \001(\005\022\020\n\010order_id\030\006 \001(\004\"r\n\017C2LMarketBu"
    "yReq\022\014\n\004type\030\001 \001(\005\022\017\n\007role_id\030\002 \001(\004\022\r\n\005p"
    "rice\030\003 \001(\005\022\022\n\nprice_type\030\004 \001(\005\022\013\n\003opt\030\005 "
    "\001(\005\022\020\n\010order_id\030\006 \001(\004\"r\n\017L2CMarketBuyRsp"
    "\022\013\n\003ret\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\017\n\007role_id\030\003"
    " \001(\004\022\r\n\005price\030\004 \001(\005\022\022\n\nprice_type\030\005 \001(\005\022"
    "\020\n\010order_id\030\006 \001(\004", 2257);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Market.proto", &protobuf_RegisterTypes);
  Goods::default_instance_ = new Goods();
  MarketItemReq::default_instance_ = new MarketItemReq();
  MarketItemRsp::default_instance_ = new MarketItemRsp();
  MarketRoleReq::default_instance_ = new MarketRoleReq();
  MarketRoleRsp::default_instance_ = new MarketRoleRsp();
  NotifyNewGoods::default_instance_ = new NotifyNewGoods();
  MarketFollowReq::default_instance_ = new MarketFollowReq();
  MarketFollowRsp::default_instance_ = new MarketFollowRsp();
  NotifyMarketFollow::default_instance_ = new NotifyMarketFollow();
  MarketLogReq::default_instance_ = new MarketLogReq();
  MarketLogRsp::default_instance_ = new MarketLogRsp();
  MarketRoleOptReq::default_instance_ = new MarketRoleOptReq();
  MarketRoleOptRsp::default_instance_ = new MarketRoleOptRsp();
  NotifyMarketFactionStart::default_instance_ = new NotifyMarketFactionStart();
  MarketRoleInfo::default_instance_ = new MarketRoleInfo();
  C2LMarketRoleUpReq::default_instance_ = new C2LMarketRoleUpReq();
  L2CMarketRoleUpRsp::default_instance_ = new L2CMarketRoleUpRsp();
  C2LMarketVieReq::default_instance_ = new C2LMarketVieReq();
  L2CMarketVieRsp::default_instance_ = new L2CMarketVieRsp();
  C2LMarketBuyReq::default_instance_ = new C2LMarketBuyReq();
  L2CMarketBuyRsp::default_instance_ = new L2CMarketBuyRsp();
  Goods::default_instance_->InitAsDefaultInstance();
  MarketItemReq::default_instance_->InitAsDefaultInstance();
  MarketItemRsp::default_instance_->InitAsDefaultInstance();
  MarketRoleReq::default_instance_->InitAsDefaultInstance();
  MarketRoleRsp::default_instance_->InitAsDefaultInstance();
  NotifyNewGoods::default_instance_->InitAsDefaultInstance();
  MarketFollowReq::default_instance_->InitAsDefaultInstance();
  MarketFollowRsp::default_instance_->InitAsDefaultInstance();
  NotifyMarketFollow::default_instance_->InitAsDefaultInstance();
  MarketLogReq::default_instance_->InitAsDefaultInstance();
  MarketLogRsp::default_instance_->InitAsDefaultInstance();
  MarketRoleOptReq::default_instance_->InitAsDefaultInstance();
  MarketRoleOptRsp::default_instance_->InitAsDefaultInstance();
  NotifyMarketFactionStart::default_instance_->InitAsDefaultInstance();
  MarketRoleInfo::default_instance_->InitAsDefaultInstance();
  C2LMarketRoleUpReq::default_instance_->InitAsDefaultInstance();
  L2CMarketRoleUpRsp::default_instance_->InitAsDefaultInstance();
  C2LMarketVieReq::default_instance_->InitAsDefaultInstance();
  L2CMarketVieRsp::default_instance_->InitAsDefaultInstance();
  C2LMarketBuyReq::default_instance_->InitAsDefaultInstance();
  L2CMarketBuyRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Market_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Market_2eproto {
  StaticDescriptorInitializer_Market_2eproto() {
    protobuf_AddDesc_Market_2eproto();
  }
} static_descriptor_initializer_Market_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Goods::kOrderIdFieldNumber;
const int Goods::kMarketTypeFieldNumber;
const int Goods::kMarketOwnerFieldNumber;
const int Goods::kRoleIdFieldNumber;
const int Goods::kStartTimeFieldNumber;
const int Goods::kEndTimeFieldNumber;
const int Goods::kVieIdFieldNumber;
const int Goods::kStateFieldNumber;
const int Goods::kIsdeleteFieldNumber;
const int Goods::kCmptTimeFieldNumber;
const int Goods::kCurPriceFieldNumber;
const int Goods::kCmptPriceFieldNumber;
const int Goods::kBuyerIdFieldNumber;
const int Goods::kItemDataFieldNumber;
const int Goods::kItemPriceFieldNumber;
const int Goods::kTakeNumFieldNumber;
const int Goods::kHasTakeFieldNumber;
#endif  // !_MSC_VER

Goods::Goods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Goods::InitAsDefaultInstance() {
  item_data_ = const_cast< ::proto_ff::ItemProtoInfo*>(&::proto_ff::ItemProtoInfo::default_instance());
}

Goods::Goods(const Goods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Goods::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = GOOGLE_ULONGLONG(0);
  market_type_ = 0;
  market_owner_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  start_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  vie_id_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  isdelete_ = 0;
  cmpt_time_ = GOOGLE_ULONGLONG(0);
  cur_price_ = 0;
  cmpt_price_ = 0;
  buyer_id_ = GOOGLE_ULONGLONG(0);
  item_data_ = NULL;
  item_price_ = 0;
  take_num_ = 0;
  has_take_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Goods::~Goods() {
  SharedDtor();
}

void Goods::SharedDtor() {
  if (this != default_instance_) {
    delete item_data_;
  }
}

void Goods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Goods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Goods_descriptor_;
}

const Goods& Goods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

Goods* Goods::default_instance_ = NULL;

Goods* Goods::New() const {
  return new Goods;
}

void Goods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_id_ = GOOGLE_ULONGLONG(0);
    market_type_ = 0;
    market_owner_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    start_time_ = GOOGLE_ULONGLONG(0);
    end_time_ = GOOGLE_ULONGLONG(0);
    vie_id_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isdelete_ = 0;
    cmpt_time_ = GOOGLE_ULONGLONG(0);
    cur_price_ = 0;
    cmpt_price_ = 0;
    buyer_id_ = GOOGLE_ULONGLONG(0);
    if (has_item_data()) {
      if (item_data_ != NULL) item_data_->::proto_ff::ItemProtoInfo::Clear();
    }
    item_price_ = 0;
    take_num_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    has_take_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Goods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_market_type;
        break;
      }

      // optional int32 market_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_type_)));
          set_has_market_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_market_owner;
        break;
      }

      // optional uint64 market_owner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &market_owner_)));
          set_has_market_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_start_time;
        break;
      }

      // optional uint64 start_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vie_id;
        break;
      }

      // optional uint64 vie_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vie_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vie_id_)));
          set_has_vie_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // optional int32 state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isdelete;
        break;
      }

      // optional int32 isdelete = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdelete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdelete_)));
          set_has_isdelete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cmpt_time;
        break;
      }

      // optional uint64 cmpt_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmpt_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cmpt_time_)));
          set_has_cmpt_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cur_price;
        break;
      }

      // optional int32 cur_price = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_price_)));
          set_has_cur_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cmpt_price;
        break;
      }

      // optional int32 cmpt_price = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmpt_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmpt_price_)));
          set_has_cmpt_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_buyer_id;
        break;
      }

      // optional uint64 buyer_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buyer_id_)));
          set_has_buyer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_item_data;
        break;
      }

      // optional .proto_ff.ItemProtoInfo item_data = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_item_price;
        break;
      }

      // optional int32 item_price = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_price_)));
          set_has_item_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_take_num;
        break;
      }

      // optional int32 take_num = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &take_num_)));
          set_has_take_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_has_take;
        break;
      }

      // optional int32 has_take = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_take:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_take_)));
          set_has_has_take();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Goods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->order_id(), output);
  }

  // optional int32 market_type = 2;
  if (has_market_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->market_type(), output);
  }

  // optional uint64 market_owner = 3;
  if (has_market_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->market_owner(), output);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->role_id(), output);
  }

  // optional uint64 start_time = 5;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->start_time(), output);
  }

  // optional uint64 end_time = 6;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->end_time(), output);
  }

  // optional uint64 vie_id = 7;
  if (has_vie_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->vie_id(), output);
  }

  // optional int32 state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->state(), output);
  }

  // optional int32 isdelete = 9;
  if (has_isdelete()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->isdelete(), output);
  }

  // optional uint64 cmpt_time = 10;
  if (has_cmpt_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->cmpt_time(), output);
  }

  // optional int32 cur_price = 11;
  if (has_cur_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cur_price(), output);
  }

  // optional int32 cmpt_price = 12;
  if (has_cmpt_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cmpt_price(), output);
  }

  // optional uint64 buyer_id = 13;
  if (has_buyer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->buyer_id(), output);
  }

  // optional .proto_ff.ItemProtoInfo item_data = 14;
  if (has_item_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->item_data(), output);
  }

  // optional int32 item_price = 15;
  if (has_item_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->item_price(), output);
  }

  // optional int32 take_num = 16;
  if (has_take_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->take_num(), output);
  }

  // optional int32 has_take = 17;
  if (has_has_take()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->has_take(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Goods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 order_id = 1;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->order_id(), target);
  }

  // optional int32 market_type = 2;
  if (has_market_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->market_type(), target);
  }

  // optional uint64 market_owner = 3;
  if (has_market_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->market_owner(), target);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->role_id(), target);
  }

  // optional uint64 start_time = 5;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->start_time(), target);
  }

  // optional uint64 end_time = 6;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->end_time(), target);
  }

  // optional uint64 vie_id = 7;
  if (has_vie_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->vie_id(), target);
  }

  // optional int32 state = 8;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->state(), target);
  }

  // optional int32 isdelete = 9;
  if (has_isdelete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->isdelete(), target);
  }

  // optional uint64 cmpt_time = 10;
  if (has_cmpt_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->cmpt_time(), target);
  }

  // optional int32 cur_price = 11;
  if (has_cur_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cur_price(), target);
  }

  // optional int32 cmpt_price = 12;
  if (has_cmpt_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cmpt_price(), target);
  }

  // optional uint64 buyer_id = 13;
  if (has_buyer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->buyer_id(), target);
  }

  // optional .proto_ff.ItemProtoInfo item_data = 14;
  if (has_item_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->item_data(), target);
  }

  // optional int32 item_price = 15;
  if (has_item_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->item_price(), target);
  }

  // optional int32 take_num = 16;
  if (has_take_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->take_num(), target);
  }

  // optional int32 has_take = 17;
  if (has_has_take()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->has_take(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Goods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }

    // optional int32 market_type = 2;
    if (has_market_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market_type());
    }

    // optional uint64 market_owner = 3;
    if (has_market_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->market_owner());
    }

    // optional uint64 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }

    // optional uint64 end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint64 vie_id = 7;
    if (has_vie_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vie_id());
    }

    // optional int32 state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 isdelete = 9;
    if (has_isdelete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdelete());
    }

    // optional uint64 cmpt_time = 10;
    if (has_cmpt_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cmpt_time());
    }

    // optional int32 cur_price = 11;
    if (has_cur_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_price());
    }

    // optional int32 cmpt_price = 12;
    if (has_cmpt_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmpt_price());
    }

    // optional uint64 buyer_id = 13;
    if (has_buyer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buyer_id());
    }

    // optional .proto_ff.ItemProtoInfo item_data = 14;
    if (has_item_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_data());
    }

    // optional int32 item_price = 15;
    if (has_item_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_price());
    }

    // optional int32 take_num = 16;
    if (has_take_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->take_num());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 has_take = 17;
    if (has_has_take()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->has_take());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Goods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Goods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Goods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Goods::MergeFrom(const Goods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_market_type()) {
      set_market_type(from.market_type());
    }
    if (from.has_market_owner()) {
      set_market_owner(from.market_owner());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_vie_id()) {
      set_vie_id(from.vie_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isdelete()) {
      set_isdelete(from.isdelete());
    }
    if (from.has_cmpt_time()) {
      set_cmpt_time(from.cmpt_time());
    }
    if (from.has_cur_price()) {
      set_cur_price(from.cur_price());
    }
    if (from.has_cmpt_price()) {
      set_cmpt_price(from.cmpt_price());
    }
    if (from.has_buyer_id()) {
      set_buyer_id(from.buyer_id());
    }
    if (from.has_item_data()) {
      mutable_item_data()->::proto_ff::ItemProtoInfo::MergeFrom(from.item_data());
    }
    if (from.has_item_price()) {
      set_item_price(from.item_price());
    }
    if (from.has_take_num()) {
      set_take_num(from.take_num());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_has_take()) {
      set_has_take(from.has_take());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Goods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Goods::CopyFrom(const Goods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Goods::IsInitialized() const {

  if (has_item_data()) {
    if (!this->item_data().IsInitialized()) return false;
  }
  return true;
}

void Goods::Swap(Goods* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(market_type_, other->market_type_);
    std::swap(market_owner_, other->market_owner_);
    std::swap(role_id_, other->role_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(vie_id_, other->vie_id_);
    std::swap(state_, other->state_);
    std::swap(isdelete_, other->isdelete_);
    std::swap(cmpt_time_, other->cmpt_time_);
    std::swap(cur_price_, other->cur_price_);
    std::swap(cmpt_price_, other->cmpt_price_);
    std::swap(buyer_id_, other->buyer_id_);
    std::swap(item_data_, other->item_data_);
    std::swap(item_price_, other->item_price_);
    std::swap(take_num_, other->take_num_);
    std::swap(has_take_, other->has_take_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Goods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Goods_descriptor_;
  metadata.reflection = Goods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketItemReq::kMarketTypeFieldNumber;
const int MarketItemReq::kBigIdFieldNumber;
const int MarketItemReq::kSmallIdFieldNumber;
const int MarketItemReq::kSortTypeFieldNumber;
const int MarketItemReq::kFiterStarFieldNumber;
const int MarketItemReq::kIsSameProfFieldNumber;
const int MarketItemReq::kCurPageFieldNumber;
#endif  // !_MSC_VER

MarketItemReq::MarketItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketItemReq::InitAsDefaultInstance() {
}

MarketItemReq::MarketItemReq(const MarketItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketItemReq::SharedCtor() {
  _cached_size_ = 0;
  market_type_ = 0;
  bigid_ = 0;
  smallid_ = 0;
  sort_type_ = 0;
  fiter_star_ = 0;
  is_same_prof_ = 0;
  cur_page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketItemReq::~MarketItemReq() {
  SharedDtor();
}

void MarketItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketItemReq_descriptor_;
}

const MarketItemReq& MarketItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

MarketItemReq* MarketItemReq::default_instance_ = NULL;

MarketItemReq* MarketItemReq::New() const {
  return new MarketItemReq;
}

void MarketItemReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    market_type_ = 0;
    bigid_ = 0;
    smallid_ = 0;
    sort_type_ = 0;
    fiter_star_ = 0;
    is_same_prof_ = 0;
    cur_page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 market_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_type_)));
          set_has_market_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bigId;
        break;
      }

      // optional int32 bigId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bigid_)));
          set_has_bigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_smallId;
        break;
      }

      // optional int32 smallId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smallid_)));
          set_has_smallid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sort_type;
        break;
      }

      // optional int32 sort_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_type_)));
          set_has_sort_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fiter_star;
        break;
      }

      // optional int32 fiter_star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fiter_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fiter_star_)));
          set_has_fiter_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_same_prof;
        break;
      }

      // optional int32 is_same_prof = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_same_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_same_prof_)));
          set_has_is_same_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 market_type = 1;
  if (has_market_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->market_type(), output);
  }

  // optional int32 bigId = 2;
  if (has_bigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bigid(), output);
  }

  // optional int32 smallId = 3;
  if (has_smallid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->smallid(), output);
  }

  // optional int32 sort_type = 4;
  if (has_sort_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sort_type(), output);
  }

  // optional int32 fiter_star = 5;
  if (has_fiter_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fiter_star(), output);
  }

  // optional int32 is_same_prof = 6;
  if (has_is_same_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_same_prof(), output);
  }

  // optional int32 cur_page = 7;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cur_page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 market_type = 1;
  if (has_market_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->market_type(), target);
  }

  // optional int32 bigId = 2;
  if (has_bigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bigid(), target);
  }

  // optional int32 smallId = 3;
  if (has_smallid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->smallid(), target);
  }

  // optional int32 sort_type = 4;
  if (has_sort_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sort_type(), target);
  }

  // optional int32 fiter_star = 5;
  if (has_fiter_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fiter_star(), target);
  }

  // optional int32 is_same_prof = 6;
  if (has_is_same_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_same_prof(), target);
  }

  // optional int32 cur_page = 7;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cur_page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 market_type = 1;
    if (has_market_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market_type());
    }

    // optional int32 bigId = 2;
    if (has_bigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bigid());
    }

    // optional int32 smallId = 3;
    if (has_smallid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smallid());
    }

    // optional int32 sort_type = 4;
    if (has_sort_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort_type());
    }

    // optional int32 fiter_star = 5;
    if (has_fiter_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fiter_star());
    }

    // optional int32 is_same_prof = 6;
    if (has_is_same_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_same_prof());
    }

    // optional int32 cur_page = 7;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketItemReq::MergeFrom(const MarketItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_market_type()) {
      set_market_type(from.market_type());
    }
    if (from.has_bigid()) {
      set_bigid(from.bigid());
    }
    if (from.has_smallid()) {
      set_smallid(from.smallid());
    }
    if (from.has_sort_type()) {
      set_sort_type(from.sort_type());
    }
    if (from.has_fiter_star()) {
      set_fiter_star(from.fiter_star());
    }
    if (from.has_is_same_prof()) {
      set_is_same_prof(from.is_same_prof());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketItemReq::CopyFrom(const MarketItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketItemReq::IsInitialized() const {

  return true;
}

void MarketItemReq::Swap(MarketItemReq* other) {
  if (other != this) {
    std::swap(market_type_, other->market_type_);
    std::swap(bigid_, other->bigid_);
    std::swap(smallid_, other->smallid_);
    std::swap(sort_type_, other->sort_type_);
    std::swap(fiter_star_, other->fiter_star_);
    std::swap(is_same_prof_, other->is_same_prof_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketItemReq_descriptor_;
  metadata.reflection = MarketItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketItemRsp::kMarketTypeFieldNumber;
const int MarketItemRsp::kBigIdFieldNumber;
const int MarketItemRsp::kSmallIdFieldNumber;
const int MarketItemRsp::kSortTypeFieldNumber;
const int MarketItemRsp::kFiterStarFieldNumber;
const int MarketItemRsp::kIsSameProfFieldNumber;
const int MarketItemRsp::kInfosFieldNumber;
const int MarketItemRsp::kCurPageFieldNumber;
const int MarketItemRsp::kAllPageFieldNumber;
const int MarketItemRsp::kSmallViewFieldNumber;
#endif  // !_MSC_VER

MarketItemRsp::MarketItemRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketItemRsp::InitAsDefaultInstance() {
}

MarketItemRsp::MarketItemRsp(const MarketItemRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketItemRsp::SharedCtor() {
  _cached_size_ = 0;
  market_type_ = 0;
  bigid_ = 0;
  smallid_ = 0;
  sort_type_ = 0;
  fiter_star_ = 0;
  is_same_prof_ = 0;
  cur_page_ = 0;
  all_page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketItemRsp::~MarketItemRsp() {
  SharedDtor();
}

void MarketItemRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketItemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketItemRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketItemRsp_descriptor_;
}

const MarketItemRsp& MarketItemRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

MarketItemRsp* MarketItemRsp::default_instance_ = NULL;

MarketItemRsp* MarketItemRsp::New() const {
  return new MarketItemRsp;
}

void MarketItemRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    market_type_ = 0;
    bigid_ = 0;
    smallid_ = 0;
    sort_type_ = 0;
    fiter_star_ = 0;
    is_same_prof_ = 0;
    cur_page_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    all_page_ = 0;
  }
  infos_.Clear();
  small_view_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketItemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 market_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_type_)));
          set_has_market_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bigId;
        break;
      }

      // optional int32 bigId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bigid_)));
          set_has_bigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_smallId;
        break;
      }

      // optional int32 smallId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smallid_)));
          set_has_smallid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sort_type;
        break;
      }

      // optional int32 sort_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_type_)));
          set_has_sort_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fiter_star;
        break;
      }

      // optional int32 fiter_star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fiter_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fiter_star_)));
          set_has_fiter_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_same_prof;
        break;
      }

      // optional int32 is_same_prof = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_same_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_same_prof_)));
          set_has_is_same_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.Goods infos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_infos;
        if (input->ExpectTag(64)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_all_page;
        break;
      }

      // optional int32 all_page = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_page_)));
          set_has_all_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_small_view;
        break;
      }

      // repeated .proto_ff.ComPair small_view = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_small_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_small_view()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_small_view;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketItemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 market_type = 1;
  if (has_market_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->market_type(), output);
  }

  // optional int32 bigId = 2;
  if (has_bigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bigid(), output);
  }

  // optional int32 smallId = 3;
  if (has_smallid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->smallid(), output);
  }

  // optional int32 sort_type = 4;
  if (has_sort_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sort_type(), output);
  }

  // optional int32 fiter_star = 5;
  if (has_fiter_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fiter_star(), output);
  }

  // optional int32 is_same_prof = 6;
  if (has_is_same_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_same_prof(), output);
  }

  // repeated .proto_ff.Goods infos = 7;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->infos(i), output);
  }

  // optional int32 cur_page = 8;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cur_page(), output);
  }

  // optional int32 all_page = 9;
  if (has_all_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->all_page(), output);
  }

  // repeated .proto_ff.ComPair small_view = 10;
  for (int i = 0; i < this->small_view_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->small_view(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketItemRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 market_type = 1;
  if (has_market_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->market_type(), target);
  }

  // optional int32 bigId = 2;
  if (has_bigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bigid(), target);
  }

  // optional int32 smallId = 3;
  if (has_smallid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->smallid(), target);
  }

  // optional int32 sort_type = 4;
  if (has_sort_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sort_type(), target);
  }

  // optional int32 fiter_star = 5;
  if (has_fiter_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fiter_star(), target);
  }

  // optional int32 is_same_prof = 6;
  if (has_is_same_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_same_prof(), target);
  }

  // repeated .proto_ff.Goods infos = 7;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->infos(i), target);
  }

  // optional int32 cur_page = 8;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cur_page(), target);
  }

  // optional int32 all_page = 9;
  if (has_all_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->all_page(), target);
  }

  // repeated .proto_ff.ComPair small_view = 10;
  for (int i = 0; i < this->small_view_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->small_view(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketItemRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 market_type = 1;
    if (has_market_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market_type());
    }

    // optional int32 bigId = 2;
    if (has_bigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bigid());
    }

    // optional int32 smallId = 3;
    if (has_smallid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smallid());
    }

    // optional int32 sort_type = 4;
    if (has_sort_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort_type());
    }

    // optional int32 fiter_star = 5;
    if (has_fiter_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fiter_star());
    }

    // optional int32 is_same_prof = 6;
    if (has_is_same_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_same_prof());
    }

    // optional int32 cur_page = 8;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 all_page = 9;
    if (has_all_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_page());
    }

  }
  // repeated .proto_ff.Goods infos = 7;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated .proto_ff.ComPair small_view = 10;
  total_size += 1 * this->small_view_size();
  for (int i = 0; i < this->small_view_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->small_view(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketItemRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketItemRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketItemRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketItemRsp::MergeFrom(const MarketItemRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  small_view_.MergeFrom(from.small_view_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_market_type()) {
      set_market_type(from.market_type());
    }
    if (from.has_bigid()) {
      set_bigid(from.bigid());
    }
    if (from.has_smallid()) {
      set_smallid(from.smallid());
    }
    if (from.has_sort_type()) {
      set_sort_type(from.sort_type());
    }
    if (from.has_fiter_star()) {
      set_fiter_star(from.fiter_star());
    }
    if (from.has_is_same_prof()) {
      set_is_same_prof(from.is_same_prof());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_all_page()) {
      set_all_page(from.all_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketItemRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketItemRsp::CopyFrom(const MarketItemRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketItemRsp::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void MarketItemRsp::Swap(MarketItemRsp* other) {
  if (other != this) {
    std::swap(market_type_, other->market_type_);
    std::swap(bigid_, other->bigid_);
    std::swap(smallid_, other->smallid_);
    std::swap(sort_type_, other->sort_type_);
    std::swap(fiter_star_, other->fiter_star_);
    std::swap(is_same_prof_, other->is_same_prof_);
    infos_.Swap(&other->infos_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(all_page_, other->all_page_);
    small_view_.Swap(&other->small_view_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketItemRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketItemRsp_descriptor_;
  metadata.reflection = MarketItemRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketRoleReq::kTypeFieldNumber;
#endif  // !_MSC_VER

MarketRoleReq::MarketRoleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketRoleReq::InitAsDefaultInstance() {
}

MarketRoleReq::MarketRoleReq(const MarketRoleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketRoleReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketRoleReq::~MarketRoleReq() {
  SharedDtor();
}

void MarketRoleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketRoleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketRoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketRoleReq_descriptor_;
}

const MarketRoleReq& MarketRoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

MarketRoleReq* MarketRoleReq::default_instance_ = NULL;

MarketRoleReq* MarketRoleReq::New() const {
  return new MarketRoleReq;
}

void MarketRoleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketRoleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketRoleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketRoleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketRoleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketRoleReq::MergeFrom(const MarketRoleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketRoleReq::CopyFrom(const MarketRoleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketRoleReq::IsInitialized() const {

  return true;
}

void MarketRoleReq::Swap(MarketRoleReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketRoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketRoleReq_descriptor_;
  metadata.reflection = MarketRoleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketRoleRsp::kTypeFieldNumber;
const int MarketRoleRsp::kInfosFieldNumber;
#endif  // !_MSC_VER

MarketRoleRsp::MarketRoleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketRoleRsp::InitAsDefaultInstance() {
}

MarketRoleRsp::MarketRoleRsp(const MarketRoleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketRoleRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketRoleRsp::~MarketRoleRsp() {
  SharedDtor();
}

void MarketRoleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketRoleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketRoleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketRoleRsp_descriptor_;
}

const MarketRoleRsp& MarketRoleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

MarketRoleRsp* MarketRoleRsp::default_instance_ = NULL;

MarketRoleRsp* MarketRoleRsp::New() const {
  return new MarketRoleRsp;
}

void MarketRoleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketRoleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.Goods infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketRoleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.Goods infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketRoleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.Goods infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketRoleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.Goods infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketRoleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketRoleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketRoleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketRoleRsp::MergeFrom(const MarketRoleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketRoleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketRoleRsp::CopyFrom(const MarketRoleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketRoleRsp::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void MarketRoleRsp::Swap(MarketRoleRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketRoleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketRoleRsp_descriptor_;
  metadata.reflection = MarketRoleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyNewGoods::kItemidFieldNumber;
const int NotifyNewGoods::kMarketTypeFieldNumber;
#endif  // !_MSC_VER

NotifyNewGoods::NotifyNewGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyNewGoods::InitAsDefaultInstance() {
}

NotifyNewGoods::NotifyNewGoods(const NotifyNewGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyNewGoods::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  market_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyNewGoods::~NotifyNewGoods() {
  SharedDtor();
}

void NotifyNewGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyNewGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyNewGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyNewGoods_descriptor_;
}

const NotifyNewGoods& NotifyNewGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

NotifyNewGoods* NotifyNewGoods::default_instance_ = NULL;

NotifyNewGoods* NotifyNewGoods::New() const {
  return new NotifyNewGoods;
}

void NotifyNewGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    market_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyNewGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_market_type;
        break;
      }

      // optional int32 market_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_type_)));
          set_has_market_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyNewGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 market_type = 2;
  if (has_market_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->market_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyNewGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 market_type = 2;
  if (has_market_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->market_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyNewGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 market_type = 2;
    if (has_market_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyNewGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyNewGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyNewGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyNewGoods::MergeFrom(const NotifyNewGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_market_type()) {
      set_market_type(from.market_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyNewGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyNewGoods::CopyFrom(const NotifyNewGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyNewGoods::IsInitialized() const {

  return true;
}

void NotifyNewGoods::Swap(NotifyNewGoods* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(market_type_, other->market_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyNewGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyNewGoods_descriptor_;
  metadata.reflection = NotifyNewGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketFollowReq::kItemIdFieldNumber;
const int MarketFollowReq::kOptFieldNumber;
#endif  // !_MSC_VER

MarketFollowReq::MarketFollowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketFollowReq::InitAsDefaultInstance() {
}

MarketFollowReq::MarketFollowReq(const MarketFollowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketFollowReq::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketFollowReq::~MarketFollowReq() {
  SharedDtor();
}

void MarketFollowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketFollowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketFollowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketFollowReq_descriptor_;
}

const MarketFollowReq& MarketFollowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

MarketFollowReq* MarketFollowReq::default_instance_ = NULL;

MarketFollowReq* MarketFollowReq::New() const {
  return new MarketFollowReq;
}

void MarketFollowReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketFollowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }

      // optional int32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketFollowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketFollowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketFollowReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketFollowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketFollowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketFollowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketFollowReq::MergeFrom(const MarketFollowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketFollowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketFollowReq::CopyFrom(const MarketFollowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketFollowReq::IsInitialized() const {

  return true;
}

void MarketFollowReq::Swap(MarketFollowReq* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketFollowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketFollowReq_descriptor_;
  metadata.reflection = MarketFollowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketFollowRsp::kRetFieldNumber;
const int MarketFollowRsp::kItemIdFieldNumber;
const int MarketFollowRsp::kOptFieldNumber;
#endif  // !_MSC_VER

MarketFollowRsp::MarketFollowRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketFollowRsp::InitAsDefaultInstance() {
}

MarketFollowRsp::MarketFollowRsp(const MarketFollowRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketFollowRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  item_id_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketFollowRsp::~MarketFollowRsp() {
  SharedDtor();
}

void MarketFollowRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketFollowRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketFollowRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketFollowRsp_descriptor_;
}

const MarketFollowRsp& MarketFollowRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

MarketFollowRsp* MarketFollowRsp::default_instance_ = NULL;

MarketFollowRsp* MarketFollowRsp::New() const {
  return new MarketFollowRsp;
}

void MarketFollowRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    item_id_ = 0;
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketFollowRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opt;
        break;
      }

      // optional int32 opt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketFollowRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }

  // optional int32 opt = 3;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketFollowRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }

  // optional int32 opt = 3;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketFollowRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 opt = 3;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketFollowRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketFollowRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketFollowRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketFollowRsp::MergeFrom(const MarketFollowRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketFollowRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketFollowRsp::CopyFrom(const MarketFollowRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketFollowRsp::IsInitialized() const {

  return true;
}

void MarketFollowRsp::Swap(MarketFollowRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(item_id_, other->item_id_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketFollowRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketFollowRsp_descriptor_;
  metadata.reflection = MarketFollowRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMarketFollow::kFollowIdsFieldNumber;
#endif  // !_MSC_VER

NotifyMarketFollow::NotifyMarketFollow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyMarketFollow::InitAsDefaultInstance() {
}

NotifyMarketFollow::NotifyMarketFollow(const NotifyMarketFollow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyMarketFollow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMarketFollow::~NotifyMarketFollow() {
  SharedDtor();
}

void NotifyMarketFollow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyMarketFollow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMarketFollow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMarketFollow_descriptor_;
}

const NotifyMarketFollow& NotifyMarketFollow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

NotifyMarketFollow* NotifyMarketFollow::default_instance_ = NULL;

NotifyMarketFollow* NotifyMarketFollow::New() const {
  return new NotifyMarketFollow;
}

void NotifyMarketFollow::Clear() {
  follow_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMarketFollow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 follow_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_follow_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_follow_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_follow_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_follow_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyMarketFollow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 follow_ids = 1;
  for (int i = 0; i < this->follow_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->follow_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyMarketFollow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 follow_ids = 1;
  for (int i = 0; i < this->follow_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->follow_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyMarketFollow::ByteSize() const {
  int total_size = 0;

  // repeated int32 follow_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->follow_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->follow_ids(i));
    }
    total_size += 1 * this->follow_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMarketFollow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMarketFollow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMarketFollow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMarketFollow::MergeFrom(const NotifyMarketFollow& from) {
  GOOGLE_CHECK_NE(&from, this);
  follow_ids_.MergeFrom(from.follow_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMarketFollow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMarketFollow::CopyFrom(const NotifyMarketFollow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMarketFollow::IsInitialized() const {

  return true;
}

void NotifyMarketFollow::Swap(NotifyMarketFollow* other) {
  if (other != this) {
    follow_ids_.Swap(&other->follow_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMarketFollow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMarketFollow_descriptor_;
  metadata.reflection = NotifyMarketFollow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketLogReq::kTypeFieldNumber;
#endif  // !_MSC_VER

MarketLogReq::MarketLogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketLogReq::InitAsDefaultInstance() {
}

MarketLogReq::MarketLogReq(const MarketLogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketLogReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketLogReq::~MarketLogReq() {
  SharedDtor();
}

void MarketLogReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketLogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketLogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketLogReq_descriptor_;
}

const MarketLogReq& MarketLogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

MarketLogReq* MarketLogReq::default_instance_ = NULL;

MarketLogReq* MarketLogReq::New() const {
  return new MarketLogReq;
}

void MarketLogReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketLogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketLogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketLogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketLogReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketLogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketLogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketLogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketLogReq::MergeFrom(const MarketLogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketLogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketLogReq::CopyFrom(const MarketLogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketLogReq::IsInitialized() const {

  return true;
}

void MarketLogReq::Swap(MarketLogReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketLogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketLogReq_descriptor_;
  metadata.reflection = MarketLogReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketLogRsp::kTypeFieldNumber;
const int MarketLogRsp::kListFieldNumber;
#endif  // !_MSC_VER

MarketLogRsp::MarketLogRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketLogRsp::InitAsDefaultInstance() {
}

MarketLogRsp::MarketLogRsp(const MarketLogRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketLogRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketLogRsp::~MarketLogRsp() {
  SharedDtor();
}

void MarketLogRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketLogRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketLogRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketLogRsp_descriptor_;
}

const MarketLogRsp& MarketLogRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

MarketLogRsp* MarketLogRsp::default_instance_ = NULL;

MarketLogRsp* MarketLogRsp::New() const {
  return new MarketLogRsp;
}

void MarketLogRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketLogRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .proto_ff.Goods list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketLogRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.Goods list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketLogRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.Goods list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketLogRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.Goods list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketLogRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketLogRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketLogRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketLogRsp::MergeFrom(const MarketLogRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketLogRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketLogRsp::CopyFrom(const MarketLogRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketLogRsp::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void MarketLogRsp::Swap(MarketLogRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketLogRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketLogRsp_descriptor_;
  metadata.reflection = MarketLogRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketRoleOptReq::kTypeFieldNumber;
const int MarketRoleOptReq::kPackageTypeFieldNumber;
const int MarketRoleOptReq::kIndexFieldNumber;
const int MarketRoleOptReq::kNumFieldNumber;
const int MarketRoleOptReq::kPriceFieldNumber;
const int MarketRoleOptReq::kOrderIdFieldNumber;
#endif  // !_MSC_VER

MarketRoleOptReq::MarketRoleOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketRoleOptReq::InitAsDefaultInstance() {
}

MarketRoleOptReq::MarketRoleOptReq(const MarketRoleOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketRoleOptReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  package_type_ = 0;
  index_ = 0;
  num_ = 0;
  price_ = 0;
  order_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketRoleOptReq::~MarketRoleOptReq() {
  SharedDtor();
}

void MarketRoleOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketRoleOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketRoleOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketRoleOptReq_descriptor_;
}

const MarketRoleOptReq& MarketRoleOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

MarketRoleOptReq* MarketRoleOptReq::default_instance_ = NULL;

MarketRoleOptReq* MarketRoleOptReq::New() const {
  return new MarketRoleOptReq;
}

void MarketRoleOptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    package_type_ = 0;
    index_ = 0;
    num_ = 0;
    price_ = 0;
    order_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketRoleOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_package_type;
        break;
      }

      // optional int32 package_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_type_)));
          set_has_package_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_price;
        break;
      }

      // optional int32 price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_order_id;
        break;
      }

      // optional uint64 order_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketRoleOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 package_type = 2;
  if (has_package_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->package_type(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional int32 price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->price(), output);
  }

  // optional uint64 order_id = 6;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->order_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketRoleOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 package_type = 2;
  if (has_package_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->package_type(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional int32 price = 5;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->price(), target);
  }

  // optional uint64 order_id = 6;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->order_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketRoleOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 package_type = 2;
    if (has_package_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_type());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 price = 5;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional uint64 order_id = 6;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketRoleOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketRoleOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketRoleOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketRoleOptReq::MergeFrom(const MarketRoleOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_package_type()) {
      set_package_type(from.package_type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketRoleOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketRoleOptReq::CopyFrom(const MarketRoleOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketRoleOptReq::IsInitialized() const {

  return true;
}

void MarketRoleOptReq::Swap(MarketRoleOptReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(package_type_, other->package_type_);
    std::swap(index_, other->index_);
    std::swap(num_, other->num_);
    std::swap(price_, other->price_);
    std::swap(order_id_, other->order_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketRoleOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketRoleOptReq_descriptor_;
  metadata.reflection = MarketRoleOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketRoleOptRsp::kRetFieldNumber;
const int MarketRoleOptRsp::kTypeFieldNumber;
const int MarketRoleOptRsp::kPosFieldNumber;
const int MarketRoleOptRsp::kNumFieldNumber;
const int MarketRoleOptRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

MarketRoleOptRsp::MarketRoleOptRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketRoleOptRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::Goods*>(&::proto_ff::Goods::default_instance());
}

MarketRoleOptRsp::MarketRoleOptRsp(const MarketRoleOptRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketRoleOptRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  pos_ = 0;
  num_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketRoleOptRsp::~MarketRoleOptRsp() {
  SharedDtor();
}

void MarketRoleOptRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void MarketRoleOptRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketRoleOptRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketRoleOptRsp_descriptor_;
}

const MarketRoleOptRsp& MarketRoleOptRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

MarketRoleOptRsp* MarketRoleOptRsp::default_instance_ = NULL;

MarketRoleOptRsp* MarketRoleOptRsp::New() const {
  return new MarketRoleOptRsp;
}

void MarketRoleOptRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
    pos_ = 0;
    num_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::Goods::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketRoleOptRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .proto_ff.Goods info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketRoleOptRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional .proto_ff.Goods info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketRoleOptRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional .proto_ff.Goods info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketRoleOptRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional .proto_ff.Goods info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketRoleOptRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketRoleOptRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketRoleOptRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketRoleOptRsp::MergeFrom(const MarketRoleOptRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::Goods::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketRoleOptRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketRoleOptRsp::CopyFrom(const MarketRoleOptRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketRoleOptRsp::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void MarketRoleOptRsp::Swap(MarketRoleOptRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(num_, other->num_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketRoleOptRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketRoleOptRsp_descriptor_;
  metadata.reflection = MarketRoleOptRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NotifyMarketFactionStart::NotifyMarketFactionStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyMarketFactionStart::InitAsDefaultInstance() {
}

NotifyMarketFactionStart::NotifyMarketFactionStart(const NotifyMarketFactionStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyMarketFactionStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMarketFactionStart::~NotifyMarketFactionStart() {
  SharedDtor();
}

void NotifyMarketFactionStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyMarketFactionStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMarketFactionStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMarketFactionStart_descriptor_;
}

const NotifyMarketFactionStart& NotifyMarketFactionStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

NotifyMarketFactionStart* NotifyMarketFactionStart::default_instance_ = NULL;

NotifyMarketFactionStart* NotifyMarketFactionStart::New() const {
  return new NotifyMarketFactionStart;
}

void NotifyMarketFactionStart::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMarketFactionStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NotifyMarketFactionStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyMarketFactionStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyMarketFactionStart::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMarketFactionStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMarketFactionStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMarketFactionStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMarketFactionStart::MergeFrom(const NotifyMarketFactionStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMarketFactionStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMarketFactionStart::CopyFrom(const NotifyMarketFactionStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMarketFactionStart::IsInitialized() const {

  return true;
}

void NotifyMarketFactionStart::Swap(NotifyMarketFactionStart* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMarketFactionStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMarketFactionStart_descriptor_;
  metadata.reflection = NotifyMarketFactionStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketRoleInfo::kCidFieldNumber;
const int MarketRoleInfo::kRefreshTimeFieldNumber;
const int MarketRoleInfo::kFollowIdsFieldNumber;
const int MarketRoleInfo::kRecoveryNumFieldNumber;
#endif  // !_MSC_VER

MarketRoleInfo::MarketRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketRoleInfo::InitAsDefaultInstance() {
}

MarketRoleInfo::MarketRoleInfo(const MarketRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  refresh_time_ = GOOGLE_ULONGLONG(0);
  recovery_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketRoleInfo::~MarketRoleInfo() {
  SharedDtor();
}

void MarketRoleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketRoleInfo_descriptor_;
}

const MarketRoleInfo& MarketRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

MarketRoleInfo* MarketRoleInfo::default_instance_ = NULL;

MarketRoleInfo* MarketRoleInfo::New() const {
  return new MarketRoleInfo;
}

void MarketRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    refresh_time_ = GOOGLE_ULONGLONG(0);
    recovery_num_ = 0;
  }
  follow_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_refresh_time;
        break;
      }

      // optional uint64 refresh_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_follow_ids;
        break;
      }

      // repeated int32 follow_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_follow_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_follow_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_follow_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_follow_ids;
        if (input->ExpectTag(32)) goto parse_recovery_num;
        break;
      }

      // optional int32 recovery_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recovery_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recovery_num_)));
          set_has_recovery_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 refresh_time = 2;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->refresh_time(), output);
  }

  // repeated int32 follow_ids = 3;
  for (int i = 0; i < this->follow_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->follow_ids(i), output);
  }

  // optional int32 recovery_num = 4;
  if (has_recovery_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->recovery_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 refresh_time = 2;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->refresh_time(), target);
  }

  // repeated int32 follow_ids = 3;
  for (int i = 0; i < this->follow_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->follow_ids(i), target);
  }

  // optional int32 recovery_num = 4;
  if (has_recovery_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->recovery_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 refresh_time = 2;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refresh_time());
    }

    // optional int32 recovery_num = 4;
    if (has_recovery_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recovery_num());
    }

  }
  // repeated int32 follow_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->follow_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->follow_ids(i));
    }
    total_size += 1 * this->follow_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketRoleInfo::MergeFrom(const MarketRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  follow_ids_.MergeFrom(from.follow_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
    if (from.has_recovery_num()) {
      set_recovery_num(from.recovery_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketRoleInfo::CopyFrom(const MarketRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketRoleInfo::IsInitialized() const {

  return true;
}

void MarketRoleInfo::Swap(MarketRoleInfo* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(refresh_time_, other->refresh_time_);
    follow_ids_.Swap(&other->follow_ids_);
    std::swap(recovery_num_, other->recovery_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketRoleInfo_descriptor_;
  metadata.reflection = MarketRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LMarketRoleUpReq::kTypeFieldNumber;
const int C2LMarketRoleUpReq::kPackageTypeFieldNumber;
const int C2LMarketRoleUpReq::kIndexFieldNumber;
const int C2LMarketRoleUpReq::kNumFieldNumber;
const int C2LMarketRoleUpReq::kRoleIdFieldNumber;
#endif  // !_MSC_VER

C2LMarketRoleUpReq::C2LMarketRoleUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LMarketRoleUpReq::InitAsDefaultInstance() {
}

C2LMarketRoleUpReq::C2LMarketRoleUpReq(const C2LMarketRoleUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LMarketRoleUpReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  package_type_ = 0;
  index_ = 0;
  num_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LMarketRoleUpReq::~C2LMarketRoleUpReq() {
  SharedDtor();
}

void C2LMarketRoleUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LMarketRoleUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LMarketRoleUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LMarketRoleUpReq_descriptor_;
}

const C2LMarketRoleUpReq& C2LMarketRoleUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

C2LMarketRoleUpReq* C2LMarketRoleUpReq::default_instance_ = NULL;

C2LMarketRoleUpReq* C2LMarketRoleUpReq::New() const {
  return new C2LMarketRoleUpReq;
}

void C2LMarketRoleUpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    package_type_ = 0;
    index_ = 0;
    num_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LMarketRoleUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_package_type;
        break;
      }

      // optional int32 package_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_type_)));
          set_has_package_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LMarketRoleUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 package_type = 2;
  if (has_package_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->package_type(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional uint64 role_id = 5;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LMarketRoleUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 package_type = 2;
  if (has_package_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->package_type(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional uint64 role_id = 5;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LMarketRoleUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 package_type = 2;
    if (has_package_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_type());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional uint64 role_id = 5;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LMarketRoleUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LMarketRoleUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LMarketRoleUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LMarketRoleUpReq::MergeFrom(const C2LMarketRoleUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_package_type()) {
      set_package_type(from.package_type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LMarketRoleUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LMarketRoleUpReq::CopyFrom(const C2LMarketRoleUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LMarketRoleUpReq::IsInitialized() const {

  return true;
}

void C2LMarketRoleUpReq::Swap(C2LMarketRoleUpReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(package_type_, other->package_type_);
    std::swap(index_, other->index_);
    std::swap(num_, other->num_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LMarketRoleUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LMarketRoleUpReq_descriptor_;
  metadata.reflection = C2LMarketRoleUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CMarketRoleUpRsp::kRetFieldNumber;
const int L2CMarketRoleUpRsp::kTypeFieldNumber;
const int L2CMarketRoleUpRsp::kPackageTypeFieldNumber;
const int L2CMarketRoleUpRsp::kIndexFieldNumber;
const int L2CMarketRoleUpRsp::kNumFieldNumber;
const int L2CMarketRoleUpRsp::kRoleIdFieldNumber;
const int L2CMarketRoleUpRsp::kItemDataFieldNumber;
#endif  // !_MSC_VER

L2CMarketRoleUpRsp::L2CMarketRoleUpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CMarketRoleUpRsp::InitAsDefaultInstance() {
  item_data_ = const_cast< ::proto_ff::ItemProtoInfo*>(&::proto_ff::ItemProtoInfo::default_instance());
}

L2CMarketRoleUpRsp::L2CMarketRoleUpRsp(const L2CMarketRoleUpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CMarketRoleUpRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  package_type_ = 0;
  index_ = 0;
  num_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  item_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CMarketRoleUpRsp::~L2CMarketRoleUpRsp() {
  SharedDtor();
}

void L2CMarketRoleUpRsp::SharedDtor() {
  if (this != default_instance_) {
    delete item_data_;
  }
}

void L2CMarketRoleUpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CMarketRoleUpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CMarketRoleUpRsp_descriptor_;
}

const L2CMarketRoleUpRsp& L2CMarketRoleUpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

L2CMarketRoleUpRsp* L2CMarketRoleUpRsp::default_instance_ = NULL;

L2CMarketRoleUpRsp* L2CMarketRoleUpRsp::New() const {
  return new L2CMarketRoleUpRsp;
}

void L2CMarketRoleUpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
    package_type_ = 0;
    index_ = 0;
    num_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_item_data()) {
      if (item_data_ != NULL) item_data_->::proto_ff::ItemProtoInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CMarketRoleUpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_package_type;
        break;
      }

      // optional int32 package_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_type_)));
          set_has_package_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional int32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional int32 num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item_data;
        break;
      }

      // optional .proto_ff.ItemProtoInfo item_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CMarketRoleUpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 package_type = 3;
  if (has_package_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->package_type(), output);
  }

  // optional int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  // optional int32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num(), output);
  }

  // optional uint64 role_id = 6;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->role_id(), output);
  }

  // optional .proto_ff.ItemProtoInfo item_data = 7;
  if (has_item_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CMarketRoleUpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 package_type = 3;
  if (has_package_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->package_type(), target);
  }

  // optional int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  // optional int32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num(), target);
  }

  // optional uint64 role_id = 6;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->role_id(), target);
  }

  // optional .proto_ff.ItemProtoInfo item_data = 7;
  if (has_item_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->item_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CMarketRoleUpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 package_type = 3;
    if (has_package_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_type());
    }

    // optional int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional uint64 role_id = 6;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .proto_ff.ItemProtoInfo item_data = 7;
    if (has_item_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CMarketRoleUpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CMarketRoleUpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CMarketRoleUpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CMarketRoleUpRsp::MergeFrom(const L2CMarketRoleUpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_package_type()) {
      set_package_type(from.package_type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_item_data()) {
      mutable_item_data()->::proto_ff::ItemProtoInfo::MergeFrom(from.item_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CMarketRoleUpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CMarketRoleUpRsp::CopyFrom(const L2CMarketRoleUpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CMarketRoleUpRsp::IsInitialized() const {

  if (has_item_data()) {
    if (!this->item_data().IsInitialized()) return false;
  }
  return true;
}

void L2CMarketRoleUpRsp::Swap(L2CMarketRoleUpRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(package_type_, other->package_type_);
    std::swap(index_, other->index_);
    std::swap(num_, other->num_);
    std::swap(role_id_, other->role_id_);
    std::swap(item_data_, other->item_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CMarketRoleUpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CMarketRoleUpRsp_descriptor_;
  metadata.reflection = L2CMarketRoleUpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LMarketVieReq::kTypeFieldNumber;
const int C2LMarketVieReq::kRoleIdFieldNumber;
const int C2LMarketVieReq::kPriceFieldNumber;
const int C2LMarketVieReq::kPriceTypeFieldNumber;
const int C2LMarketVieReq::kOptFieldNumber;
const int C2LMarketVieReq::kOrderIdFieldNumber;
#endif  // !_MSC_VER

C2LMarketVieReq::C2LMarketVieReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LMarketVieReq::InitAsDefaultInstance() {
}

C2LMarketVieReq::C2LMarketVieReq(const C2LMarketVieReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LMarketVieReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  price_ = 0;
  price_type_ = 0;
  opt_ = 0;
  order_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LMarketVieReq::~C2LMarketVieReq() {
  SharedDtor();
}

void C2LMarketVieReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LMarketVieReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LMarketVieReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LMarketVieReq_descriptor_;
}

const C2LMarketVieReq& C2LMarketVieReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

C2LMarketVieReq* C2LMarketVieReq::default_instance_ = NULL;

C2LMarketVieReq* C2LMarketVieReq::New() const {
  return new C2LMarketVieReq;
}

void C2LMarketVieReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    price_ = 0;
    price_type_ = 0;
    opt_ = 0;
    order_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LMarketVieReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional int32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price_type;
        break;
      }

      // optional int32 price_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_type_)));
          set_has_price_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_opt;
        break;
      }

      // optional int32 opt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_order_id;
        break;
      }

      // optional uint64 order_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LMarketVieReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int32 price_type = 4;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price_type(), output);
  }

  // optional int32 opt = 5;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->opt(), output);
  }

  // optional uint64 order_id = 6;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->order_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LMarketVieReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int32 price_type = 4;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price_type(), target);
  }

  // optional int32 opt = 5;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->opt(), target);
  }

  // optional uint64 order_id = 6;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->order_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LMarketVieReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 price_type = 4;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_type());
    }

    // optional int32 opt = 5;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional uint64 order_id = 6;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LMarketVieReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LMarketVieReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LMarketVieReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LMarketVieReq::MergeFrom(const C2LMarketVieReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LMarketVieReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LMarketVieReq::CopyFrom(const C2LMarketVieReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LMarketVieReq::IsInitialized() const {

  return true;
}

void C2LMarketVieReq::Swap(C2LMarketVieReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(role_id_, other->role_id_);
    std::swap(price_, other->price_);
    std::swap(price_type_, other->price_type_);
    std::swap(opt_, other->opt_);
    std::swap(order_id_, other->order_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LMarketVieReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LMarketVieReq_descriptor_;
  metadata.reflection = C2LMarketVieReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CMarketVieRsp::kRetFieldNumber;
const int L2CMarketVieRsp::kTypeFieldNumber;
const int L2CMarketVieRsp::kRoleIdFieldNumber;
const int L2CMarketVieRsp::kPriceFieldNumber;
const int L2CMarketVieRsp::kPriceTypeFieldNumber;
const int L2CMarketVieRsp::kOrderIdFieldNumber;
#endif  // !_MSC_VER

L2CMarketVieRsp::L2CMarketVieRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CMarketVieRsp::InitAsDefaultInstance() {
}

L2CMarketVieRsp::L2CMarketVieRsp(const L2CMarketVieRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CMarketVieRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  price_ = 0;
  price_type_ = 0;
  order_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CMarketVieRsp::~L2CMarketVieRsp() {
  SharedDtor();
}

void L2CMarketVieRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CMarketVieRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CMarketVieRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CMarketVieRsp_descriptor_;
}

const L2CMarketVieRsp& L2CMarketVieRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

L2CMarketVieRsp* L2CMarketVieRsp::default_instance_ = NULL;

L2CMarketVieRsp* L2CMarketVieRsp::New() const {
  return new L2CMarketVieRsp;
}

void L2CMarketVieRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    price_ = 0;
    price_type_ = 0;
    order_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CMarketVieRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // optional int32 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_price_type;
        break;
      }

      // optional int32 price_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_type_)));
          set_has_price_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_order_id;
        break;
      }

      // optional uint64 order_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CMarketVieRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional int32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }

  // optional int32 price_type = 5;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->price_type(), output);
  }

  // optional uint64 order_id = 6;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->order_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CMarketVieRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional int32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }

  // optional int32 price_type = 5;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->price_type(), target);
  }

  // optional uint64 order_id = 6;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->order_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CMarketVieRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 price_type = 5;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_type());
    }

    // optional uint64 order_id = 6;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CMarketVieRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CMarketVieRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CMarketVieRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CMarketVieRsp::MergeFrom(const L2CMarketVieRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CMarketVieRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CMarketVieRsp::CopyFrom(const L2CMarketVieRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CMarketVieRsp::IsInitialized() const {

  return true;
}

void L2CMarketVieRsp::Swap(L2CMarketVieRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(role_id_, other->role_id_);
    std::swap(price_, other->price_);
    std::swap(price_type_, other->price_type_);
    std::swap(order_id_, other->order_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CMarketVieRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CMarketVieRsp_descriptor_;
  metadata.reflection = L2CMarketVieRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LMarketBuyReq::kTypeFieldNumber;
const int C2LMarketBuyReq::kRoleIdFieldNumber;
const int C2LMarketBuyReq::kPriceFieldNumber;
const int C2LMarketBuyReq::kPriceTypeFieldNumber;
const int C2LMarketBuyReq::kOptFieldNumber;
const int C2LMarketBuyReq::kOrderIdFieldNumber;
#endif  // !_MSC_VER

C2LMarketBuyReq::C2LMarketBuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LMarketBuyReq::InitAsDefaultInstance() {
}

C2LMarketBuyReq::C2LMarketBuyReq(const C2LMarketBuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LMarketBuyReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  price_ = 0;
  price_type_ = 0;
  opt_ = 0;
  order_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LMarketBuyReq::~C2LMarketBuyReq() {
  SharedDtor();
}

void C2LMarketBuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LMarketBuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LMarketBuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LMarketBuyReq_descriptor_;
}

const C2LMarketBuyReq& C2LMarketBuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

C2LMarketBuyReq* C2LMarketBuyReq::default_instance_ = NULL;

C2LMarketBuyReq* C2LMarketBuyReq::New() const {
  return new C2LMarketBuyReq;
}

void C2LMarketBuyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    price_ = 0;
    price_type_ = 0;
    opt_ = 0;
    order_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LMarketBuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional int32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price_type;
        break;
      }

      // optional int32 price_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_type_)));
          set_has_price_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_opt;
        break;
      }

      // optional int32 opt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_order_id;
        break;
      }

      // optional uint64 order_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LMarketBuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int32 price_type = 4;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price_type(), output);
  }

  // optional int32 opt = 5;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->opt(), output);
  }

  // optional uint64 order_id = 6;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->order_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LMarketBuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int32 price_type = 4;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price_type(), target);
  }

  // optional int32 opt = 5;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->opt(), target);
  }

  // optional uint64 order_id = 6;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->order_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LMarketBuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 price_type = 4;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_type());
    }

    // optional int32 opt = 5;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional uint64 order_id = 6;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LMarketBuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LMarketBuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LMarketBuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LMarketBuyReq::MergeFrom(const C2LMarketBuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LMarketBuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LMarketBuyReq::CopyFrom(const C2LMarketBuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LMarketBuyReq::IsInitialized() const {

  return true;
}

void C2LMarketBuyReq::Swap(C2LMarketBuyReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(role_id_, other->role_id_);
    std::swap(price_, other->price_);
    std::swap(price_type_, other->price_type_);
    std::swap(opt_, other->opt_);
    std::swap(order_id_, other->order_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LMarketBuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LMarketBuyReq_descriptor_;
  metadata.reflection = C2LMarketBuyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CMarketBuyRsp::kRetFieldNumber;
const int L2CMarketBuyRsp::kTypeFieldNumber;
const int L2CMarketBuyRsp::kRoleIdFieldNumber;
const int L2CMarketBuyRsp::kPriceFieldNumber;
const int L2CMarketBuyRsp::kPriceTypeFieldNumber;
const int L2CMarketBuyRsp::kOrderIdFieldNumber;
#endif  // !_MSC_VER

L2CMarketBuyRsp::L2CMarketBuyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CMarketBuyRsp::InitAsDefaultInstance() {
}

L2CMarketBuyRsp::L2CMarketBuyRsp(const L2CMarketBuyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CMarketBuyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  price_ = 0;
  price_type_ = 0;
  order_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CMarketBuyRsp::~L2CMarketBuyRsp() {
  SharedDtor();
}

void L2CMarketBuyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CMarketBuyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CMarketBuyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CMarketBuyRsp_descriptor_;
}

const L2CMarketBuyRsp& L2CMarketBuyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

L2CMarketBuyRsp* L2CMarketBuyRsp::default_instance_ = NULL;

L2CMarketBuyRsp* L2CMarketBuyRsp::New() const {
  return new L2CMarketBuyRsp;
}

void L2CMarketBuyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    price_ = 0;
    price_type_ = 0;
    order_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CMarketBuyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // optional int32 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_price_type;
        break;
      }

      // optional int32 price_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_type_)));
          set_has_price_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_order_id;
        break;
      }

      // optional uint64 order_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CMarketBuyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional int32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }

  // optional int32 price_type = 5;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->price_type(), output);
  }

  // optional uint64 order_id = 6;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->order_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CMarketBuyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional int32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }

  // optional int32 price_type = 5;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->price_type(), target);
  }

  // optional uint64 order_id = 6;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->order_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CMarketBuyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 price_type = 5;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_type());
    }

    // optional uint64 order_id = 6;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CMarketBuyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CMarketBuyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CMarketBuyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CMarketBuyRsp::MergeFrom(const L2CMarketBuyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CMarketBuyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CMarketBuyRsp::CopyFrom(const L2CMarketBuyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CMarketBuyRsp::IsInitialized() const {

  return true;
}

void L2CMarketBuyRsp::Swap(L2CMarketBuyRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(role_id_, other->role_id_);
    std::swap(price_, other->price_);
    std::swap(price_type_, other->price_type_);
    std::swap(order_id_, other->order_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CMarketBuyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CMarketBuyRsp_descriptor_;
  metadata.reflection = L2CMarketBuyRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
