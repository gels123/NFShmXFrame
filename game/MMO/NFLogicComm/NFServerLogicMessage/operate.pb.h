// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operate.proto

#ifndef PROTOBUF_operate_2eproto__INCLUDED
#define PROTOBUF_operate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_operate_2eproto();
void protobuf_AssignDesc_operate_2eproto();
void protobuf_ShutdownFile_operate_2eproto();

class operateoperate;
class Sheet_operateoperate;
class operatetutor;
class Sheet_operatetutor;
class operatejiangli;
class Sheet_operatejiangli;
class operatehoroscope;
class Sheet_operatehoroscope;
class operatehoroscopePool;
class Sheet_operatehoroscopePool;
class operatehoroscopeExchange;
class Sheet_operatehoroscopeExchange;
class operateconst;
class Sheet_operateconst;
class operateunlimited;
class Sheet_operateunlimited;
class operaterand;
class Sheet_operaterand;
class operatemooncard;
class Sheet_operatemooncard;
class operatefund;
class Sheet_operatefund;
class operatetask;
class Sheet_operatetask;
class operateshop;
class Sheet_operateshop;
class operatewish;
class Sheet_operatewish;
class operateturntable;
class Sheet_operateturntable;
class operateturntableTask;
class Sheet_operateturntableTask;

// ===================================================================

class operateoperate : public ::google::protobuf::Message {
 public:
  operateoperate();
  virtual ~operateoperate();

  operateoperate(const operateoperate& from);

  inline operateoperate& operator=(const operateoperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operateoperate& default_instance();

  void Swap(operateoperate* other);

  // implements Message ----------------------------------------------

  operateoperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operateoperate& from);
  void MergeFrom(const operateoperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 huoDong = 2;
  inline bool has_huodong() const;
  inline void clear_huodong();
  static const int kHuoDongFieldNumber = 2;
  inline ::google::protobuf::int32 huodong() const;
  inline void set_huodong(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 nameId = 4;
  inline bool has_nameid() const;
  inline void clear_nameid();
  static const int kNameIdFieldNumber = 4;
  inline ::google::protobuf::int32 nameid() const;
  inline void set_nameid(::google::protobuf::int32 value);

  // optional string tiaoJian = 5;
  inline bool has_tiaojian() const;
  inline void clear_tiaojian();
  static const int kTiaoJianFieldNumber = 5;
  inline const ::std::string& tiaojian() const;
  inline void set_tiaojian(const ::std::string& value);
  inline void set_tiaojian(const char* value);
  inline void set_tiaojian(const char* value, size_t size);
  inline ::std::string* mutable_tiaojian();
  inline ::std::string* release_tiaojian();
  inline void set_allocated_tiaojian(::std::string* tiaojian);

  // optional int32 servertype = 6;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServertypeFieldNumber = 6;
  inline ::google::protobuf::int32 servertype() const;
  inline void set_servertype(::google::protobuf::int32 value);

  // optional string timeA = 7;
  inline bool has_timea() const;
  inline void clear_timea();
  static const int kTimeAFieldNumber = 7;
  inline const ::std::string& timea() const;
  inline void set_timea(const ::std::string& value);
  inline void set_timea(const char* value);
  inline void set_timea(const char* value, size_t size);
  inline ::std::string* mutable_timea();
  inline ::std::string* release_timea();
  inline void set_allocated_timea(::std::string* timea);

  // optional string timeB = 8;
  inline bool has_timeb() const;
  inline void clear_timeb();
  static const int kTimeBFieldNumber = 8;
  inline const ::std::string& timeb() const;
  inline void set_timeb(const ::std::string& value);
  inline void set_timeb(const char* value);
  inline void set_timeb(const char* value, size_t size);
  inline ::std::string* mutable_timeb();
  inline ::std::string* release_timeb();
  inline void set_allocated_timeb(::std::string* timeb);

  // optional int32 timeType = 9;
  inline bool has_timetype() const;
  inline void clear_timetype();
  static const int kTimeTypeFieldNumber = 9;
  inline ::google::protobuf::int32 timetype() const;
  inline void set_timetype(::google::protobuf::int32 value);

  // optional string miaoSu = 10;
  inline bool has_miaosu() const;
  inline void clear_miaosu();
  static const int kMiaoSuFieldNumber = 10;
  inline const ::std::string& miaosu() const;
  inline void set_miaosu(const ::std::string& value);
  inline void set_miaosu(const char* value);
  inline void set_miaosu(const char* value, size_t size);
  inline ::std::string* mutable_miaosu();
  inline ::std::string* release_miaosu();
  inline void set_allocated_miaosu(::std::string* miaosu);

  // optional int32 ifOpen = 11;
  inline bool has_ifopen() const;
  inline void clear_ifopen();
  static const int kIfOpenFieldNumber = 11;
  inline ::google::protobuf::int32 ifopen() const;
  inline void set_ifopen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.operateoperate)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_huodong();
  inline void clear_has_huodong();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_nameid();
  inline void clear_has_nameid();
  inline void set_has_tiaojian();
  inline void clear_has_tiaojian();
  inline void set_has_servertype();
  inline void clear_has_servertype();
  inline void set_has_timea();
  inline void clear_has_timea();
  inline void set_has_timeb();
  inline void clear_has_timeb();
  inline void set_has_timetype();
  inline void clear_has_timetype();
  inline void set_has_miaosu();
  inline void clear_has_miaosu();
  inline void set_has_ifopen();
  inline void clear_has_ifopen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int32 huodong_;
  ::google::protobuf::int32 nameid_;
  ::std::string* tiaojian_;
  ::std::string* timea_;
  ::google::protobuf::int32 servertype_;
  ::google::protobuf::int32 timetype_;
  ::std::string* timeb_;
  ::std::string* miaosu_;
  ::google::protobuf::int32 ifopen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operateoperate* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operateoperate : public ::google::protobuf::Message {
 public:
  Sheet_operateoperate();
  virtual ~Sheet_operateoperate();

  Sheet_operateoperate(const Sheet_operateoperate& from);

  inline Sheet_operateoperate& operator=(const Sheet_operateoperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operateoperate& default_instance();

  void Swap(Sheet_operateoperate* other);

  // implements Message ----------------------------------------------

  Sheet_operateoperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operateoperate& from);
  void MergeFrom(const Sheet_operateoperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operateoperate operateoperate_List = 1;
  inline int operateoperate_list_size() const;
  inline void clear_operateoperate_list();
  static const int kOperateoperateListFieldNumber = 1;
  inline const ::proto_ff::operateoperate& operateoperate_list(int index) const;
  inline ::proto_ff::operateoperate* mutable_operateoperate_list(int index);
  inline ::proto_ff::operateoperate* add_operateoperate_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operateoperate >&
      operateoperate_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operateoperate >*
      mutable_operateoperate_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operateoperate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operateoperate > operateoperate_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operateoperate* default_instance_;
};
// -------------------------------------------------------------------

class operatetutor : public ::google::protobuf::Message {
 public:
  operatetutor();
  virtual ~operatetutor();

  operatetutor(const operatetutor& from);

  inline operatetutor& operator=(const operatetutor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operatetutor& default_instance();

  void Swap(operatetutor* other);

  // implements Message ----------------------------------------------

  operatetutor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operatetutor& from);
  void MergeFrom(const operatetutor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 condition = 3;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 3;
  inline ::google::protobuf::int32 condition() const;
  inline void set_condition(::google::protobuf::int32 value);

  // optional int64 conditionParam1 = 4;
  inline bool has_conditionparam1() const;
  inline void clear_conditionparam1();
  static const int kConditionParam1FieldNumber = 4;
  inline ::google::protobuf::int64 conditionparam1() const;
  inline void set_conditionparam1(::google::protobuf::int64 value);

  // optional int64 boxId = 6;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 6;
  inline ::google::protobuf::int64 boxid() const;
  inline void set_boxid(::google::protobuf::int64 value);

  // optional int32 teach = 7;
  inline bool has_teach() const;
  inline void clear_teach();
  static const int kTeachFieldNumber = 7;
  inline ::google::protobuf::int32 teach() const;
  inline void set_teach(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.operatetutor)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_conditionparam1();
  inline void clear_has_conditionparam1();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_teach();
  inline void clear_has_teach();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 conditionparam1_;
  ::google::protobuf::int32 condition_;
  ::google::protobuf::int32 teach_;
  ::google::protobuf::int64 boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operatetutor* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operatetutor : public ::google::protobuf::Message {
 public:
  Sheet_operatetutor();
  virtual ~Sheet_operatetutor();

  Sheet_operatetutor(const Sheet_operatetutor& from);

  inline Sheet_operatetutor& operator=(const Sheet_operatetutor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operatetutor& default_instance();

  void Swap(Sheet_operatetutor* other);

  // implements Message ----------------------------------------------

  Sheet_operatetutor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operatetutor& from);
  void MergeFrom(const Sheet_operatetutor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operatetutor operatetutor_List = 1;
  inline int operatetutor_list_size() const;
  inline void clear_operatetutor_list();
  static const int kOperatetutorListFieldNumber = 1;
  inline const ::proto_ff::operatetutor& operatetutor_list(int index) const;
  inline ::proto_ff::operatetutor* mutable_operatetutor_list(int index);
  inline ::proto_ff::operatetutor* add_operatetutor_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatetutor >&
      operatetutor_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatetutor >*
      mutable_operatetutor_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operatetutor)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operatetutor > operatetutor_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operatetutor* default_instance_;
};
// -------------------------------------------------------------------

class operatejiangli : public ::google::protobuf::Message {
 public:
  operatejiangli();
  virtual ~operatejiangli();

  operatejiangli(const operatejiangli& from);

  inline operatejiangli& operator=(const operatejiangli& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operatejiangli& default_instance();

  void Swap(operatejiangli* other);

  // implements Message ----------------------------------------------

  operatejiangli* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operatejiangli& from);
  void MergeFrom(const operatejiangli& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 tiaoJianId = 1;
  inline bool has_tiaojianid() const;
  inline void clear_tiaojianid();
  static const int kTiaoJianIdFieldNumber = 1;
  inline ::google::protobuf::int64 tiaojianid() const;
  inline void set_tiaojianid(::google::protobuf::int64 value);

  // optional string huoDong = 2;
  inline bool has_huodong() const;
  inline void clear_huodong();
  static const int kHuoDongFieldNumber = 2;
  inline const ::std::string& huodong() const;
  inline void set_huodong(const ::std::string& value);
  inline void set_huodong(const char* value);
  inline void set_huodong(const char* value, size_t size);
  inline ::std::string* mutable_huodong();
  inline ::std::string* release_huodong();
  inline void set_allocated_huodong(::std::string* huodong);

  // optional string downNu = 3;
  inline bool has_downnu() const;
  inline void clear_downnu();
  static const int kDownNuFieldNumber = 3;
  inline const ::std::string& downnu() const;
  inline void set_downnu(const ::std::string& value);
  inline void set_downnu(const char* value);
  inline void set_downnu(const char* value, size_t size);
  inline ::std::string* mutable_downnu();
  inline ::std::string* release_downnu();
  inline void set_allocated_downnu(::std::string* downnu);

  // optional string upNu = 4;
  inline bool has_upnu() const;
  inline void clear_upnu();
  static const int kUpNuFieldNumber = 4;
  inline const ::std::string& upnu() const;
  inline void set_upnu(const ::std::string& value);
  inline void set_upnu(const char* value);
  inline void set_upnu(const char* value, size_t size);
  inline ::std::string* mutable_upnu();
  inline ::std::string* release_upnu();
  inline void set_allocated_upnu(::std::string* upnu);

  // optional string miaoshu = 5;
  inline bool has_miaoshu() const;
  inline void clear_miaoshu();
  static const int kMiaoshuFieldNumber = 5;
  inline const ::std::string& miaoshu() const;
  inline void set_miaoshu(const ::std::string& value);
  inline void set_miaoshu(const char* value);
  inline void set_miaoshu(const char* value, size_t size);
  inline ::std::string* mutable_miaoshu();
  inline ::std::string* release_miaoshu();
  inline void set_allocated_miaoshu(::std::string* miaoshu);

  // optional string miaoshuAdd = 6;
  inline bool has_miaoshuadd() const;
  inline void clear_miaoshuadd();
  static const int kMiaoshuAddFieldNumber = 6;
  inline const ::std::string& miaoshuadd() const;
  inline void set_miaoshuadd(const ::std::string& value);
  inline void set_miaoshuadd(const char* value);
  inline void set_miaoshuadd(const char* value, size_t size);
  inline ::std::string* mutable_miaoshuadd();
  inline ::std::string* release_miaoshuadd();
  inline void set_allocated_miaoshuadd(::std::string* miaoshuadd);

  // optional string tiaoJian = 7;
  inline bool has_tiaojian() const;
  inline void clear_tiaojian();
  static const int kTiaoJianFieldNumber = 7;
  inline const ::std::string& tiaojian() const;
  inline void set_tiaojian(const ::std::string& value);
  inline void set_tiaojian(const char* value);
  inline void set_tiaojian(const char* value, size_t size);
  inline ::std::string* mutable_tiaojian();
  inline ::std::string* release_tiaojian();
  inline void set_allocated_tiaojian(::std::string* tiaojian);

  // optional int64 boxId = 8;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 8;
  inline ::google::protobuf::int64 boxid() const;
  inline void set_boxid(::google::protobuf::int64 value);

  // optional int64 sdboxid = 9;
  inline bool has_sdboxid() const;
  inline void clear_sdboxid();
  static const int kSdboxidFieldNumber = 9;
  inline ::google::protobuf::int64 sdboxid() const;
  inline void set_sdboxid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.operatejiangli)
 private:
  inline void set_has_tiaojianid();
  inline void clear_has_tiaojianid();
  inline void set_has_huodong();
  inline void clear_has_huodong();
  inline void set_has_downnu();
  inline void clear_has_downnu();
  inline void set_has_upnu();
  inline void clear_has_upnu();
  inline void set_has_miaoshu();
  inline void clear_has_miaoshu();
  inline void set_has_miaoshuadd();
  inline void clear_has_miaoshuadd();
  inline void set_has_tiaojian();
  inline void clear_has_tiaojian();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_sdboxid();
  inline void clear_has_sdboxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 tiaojianid_;
  ::std::string* huodong_;
  ::std::string* downnu_;
  ::std::string* upnu_;
  ::std::string* miaoshu_;
  ::std::string* miaoshuadd_;
  ::std::string* tiaojian_;
  ::google::protobuf::int64 boxid_;
  ::google::protobuf::int64 sdboxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operatejiangli* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operatejiangli : public ::google::protobuf::Message {
 public:
  Sheet_operatejiangli();
  virtual ~Sheet_operatejiangli();

  Sheet_operatejiangli(const Sheet_operatejiangli& from);

  inline Sheet_operatejiangli& operator=(const Sheet_operatejiangli& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operatejiangli& default_instance();

  void Swap(Sheet_operatejiangli* other);

  // implements Message ----------------------------------------------

  Sheet_operatejiangli* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operatejiangli& from);
  void MergeFrom(const Sheet_operatejiangli& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operatejiangli operatejiangli_List = 1;
  inline int operatejiangli_list_size() const;
  inline void clear_operatejiangli_list();
  static const int kOperatejiangliListFieldNumber = 1;
  inline const ::proto_ff::operatejiangli& operatejiangli_list(int index) const;
  inline ::proto_ff::operatejiangli* mutable_operatejiangli_list(int index);
  inline ::proto_ff::operatejiangli* add_operatejiangli_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatejiangli >&
      operatejiangli_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatejiangli >*
      mutable_operatejiangli_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operatejiangli)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operatejiangli > operatejiangli_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operatejiangli* default_instance_;
};
// -------------------------------------------------------------------

class operatehoroscope : public ::google::protobuf::Message {
 public:
  operatehoroscope();
  virtual ~operatehoroscope();

  operatehoroscope(const operatehoroscope& from);

  inline operatehoroscope& operator=(const operatehoroscope& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operatehoroscope& default_instance();

  void Swap(operatehoroscope* other);

  // implements Message ----------------------------------------------

  operatehoroscope* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operatehoroscope& from);
  void MergeFrom(const operatehoroscope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 daojuId = 2;
  inline bool has_daojuid() const;
  inline void clear_daojuid();
  static const int kDaojuIdFieldNumber = 2;
  inline ::google::protobuf::int64 daojuid() const;
  inline void set_daojuid(::google::protobuf::int64 value);

  // optional int32 daojuPrice = 3;
  inline bool has_daojuprice() const;
  inline void clear_daojuprice();
  static const int kDaojuPriceFieldNumber = 3;
  inline ::google::protobuf::int32 daojuprice() const;
  inline void set_daojuprice(::google::protobuf::int32 value);

  // optional int32 cycle = 4;
  inline bool has_cycle() const;
  inline void clear_cycle();
  static const int kCycleFieldNumber = 4;
  inline ::google::protobuf::int32 cycle() const;
  inline void set_cycle(::google::protobuf::int32 value);

  // optional string poolid = 5;
  inline bool has_poolid() const;
  inline void clear_poolid();
  static const int kPoolidFieldNumber = 5;
  inline const ::std::string& poolid() const;
  inline void set_poolid(const ::std::string& value);
  inline void set_poolid(const char* value);
  inline void set_poolid(const char* value, size_t size);
  inline ::std::string* mutable_poolid();
  inline ::std::string* release_poolid();
  inline void set_allocated_poolid(::std::string* poolid);

  // optional int32 wheelTime = 6;
  inline bool has_wheeltime() const;
  inline void clear_wheeltime();
  static const int kWheelTimeFieldNumber = 6;
  inline ::google::protobuf::int32 wheeltime() const;
  inline void set_wheeltime(::google::protobuf::int32 value);

  // optional string ExchangeGroupID = 7;
  inline bool has_exchangegroupid() const;
  inline void clear_exchangegroupid();
  static const int kExchangeGroupIDFieldNumber = 7;
  inline const ::std::string& exchangegroupid() const;
  inline void set_exchangegroupid(const ::std::string& value);
  inline void set_exchangegroupid(const char* value);
  inline void set_exchangegroupid(const char* value, size_t size);
  inline ::std::string* mutable_exchangegroupid();
  inline ::std::string* release_exchangegroupid();
  inline void set_allocated_exchangegroupid(::std::string* exchangegroupid);

  // optional string boxid = 8;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxidFieldNumber = 8;
  inline const ::std::string& boxid() const;
  inline void set_boxid(const ::std::string& value);
  inline void set_boxid(const char* value);
  inline void set_boxid(const char* value, size_t size);
  inline ::std::string* mutable_boxid();
  inline ::std::string* release_boxid();
  inline void set_allocated_boxid(::std::string* boxid);

  // optional int64 luckid = 9;
  inline bool has_luckid() const;
  inline void clear_luckid();
  static const int kLuckidFieldNumber = 9;
  inline ::google::protobuf::int64 luckid() const;
  inline void set_luckid(::google::protobuf::int64 value);

  // optional string fateid = 10;
  inline bool has_fateid() const;
  inline void clear_fateid();
  static const int kFateidFieldNumber = 10;
  inline const ::std::string& fateid() const;
  inline void set_fateid(const ::std::string& value);
  inline void set_fateid(const char* value);
  inline void set_fateid(const char* value, size_t size);
  inline ::std::string* mutable_fateid();
  inline ::std::string* release_fateid();
  inline void set_allocated_fateid(::std::string* fateid);

  // optional string felicityid = 11;
  inline bool has_felicityid() const;
  inline void clear_felicityid();
  static const int kFelicityidFieldNumber = 11;
  inline const ::std::string& felicityid() const;
  inline void set_felicityid(const ::std::string& value);
  inline void set_felicityid(const char* value);
  inline void set_felicityid(const char* value, size_t size);
  inline ::std::string* mutable_felicityid();
  inline ::std::string* release_felicityid();
  inline void set_allocated_felicityid(::std::string* felicityid);

  // @@protoc_insertion_point(class_scope:proto_ff.operatehoroscope)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_daojuid();
  inline void clear_has_daojuid();
  inline void set_has_daojuprice();
  inline void clear_has_daojuprice();
  inline void set_has_cycle();
  inline void clear_has_cycle();
  inline void set_has_poolid();
  inline void clear_has_poolid();
  inline void set_has_wheeltime();
  inline void clear_has_wheeltime();
  inline void set_has_exchangegroupid();
  inline void clear_has_exchangegroupid();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_luckid();
  inline void clear_has_luckid();
  inline void set_has_fateid();
  inline void clear_has_fateid();
  inline void set_has_felicityid();
  inline void clear_has_felicityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 daojuid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 daojuprice_;
  ::std::string* poolid_;
  ::google::protobuf::int32 cycle_;
  ::google::protobuf::int32 wheeltime_;
  ::std::string* exchangegroupid_;
  ::std::string* boxid_;
  ::google::protobuf::int64 luckid_;
  ::std::string* fateid_;
  ::std::string* felicityid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operatehoroscope* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operatehoroscope : public ::google::protobuf::Message {
 public:
  Sheet_operatehoroscope();
  virtual ~Sheet_operatehoroscope();

  Sheet_operatehoroscope(const Sheet_operatehoroscope& from);

  inline Sheet_operatehoroscope& operator=(const Sheet_operatehoroscope& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operatehoroscope& default_instance();

  void Swap(Sheet_operatehoroscope* other);

  // implements Message ----------------------------------------------

  Sheet_operatehoroscope* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operatehoroscope& from);
  void MergeFrom(const Sheet_operatehoroscope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operatehoroscope operatehoroscope_List = 1;
  inline int operatehoroscope_list_size() const;
  inline void clear_operatehoroscope_list();
  static const int kOperatehoroscopeListFieldNumber = 1;
  inline const ::proto_ff::operatehoroscope& operatehoroscope_list(int index) const;
  inline ::proto_ff::operatehoroscope* mutable_operatehoroscope_list(int index);
  inline ::proto_ff::operatehoroscope* add_operatehoroscope_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscope >&
      operatehoroscope_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscope >*
      mutable_operatehoroscope_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operatehoroscope)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscope > operatehoroscope_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operatehoroscope* default_instance_;
};
// -------------------------------------------------------------------

class operatehoroscopePool : public ::google::protobuf::Message {
 public:
  operatehoroscopePool();
  virtual ~operatehoroscopePool();

  operatehoroscopePool(const operatehoroscopePool& from);

  inline operatehoroscopePool& operator=(const operatehoroscopePool& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operatehoroscopePool& default_instance();

  void Swap(operatehoroscopePool* other);

  // implements Message ----------------------------------------------

  operatehoroscopePool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operatehoroscopePool& from);
  void MergeFrom(const operatehoroscopePool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 itemid = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 prof = 4;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 4;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 levelLimitA = 5;
  inline bool has_levellimita() const;
  inline void clear_levellimita();
  static const int kLevelLimitAFieldNumber = 5;
  inline ::google::protobuf::int32 levellimita() const;
  inline void set_levellimita(::google::protobuf::int32 value);

  // optional int32 levelLimitB = 6;
  inline bool has_levellimitb() const;
  inline void clear_levellimitb();
  static const int kLevelLimitBFieldNumber = 6;
  inline ::google::protobuf::int32 levellimitb() const;
  inline void set_levellimitb(::google::protobuf::int32 value);

  // optional int32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 typeParma = 8;
  inline bool has_typeparma() const;
  inline void clear_typeparma();
  static const int kTypeParmaFieldNumber = 8;
  inline ::google::protobuf::int32 typeparma() const;
  inline void set_typeparma(::google::protobuf::int32 value);

  // optional int32 probability = 9;
  inline bool has_probability() const;
  inline void clear_probability();
  static const int kProbabilityFieldNumber = 9;
  inline ::google::protobuf::int32 probability() const;
  inline void set_probability(::google::protobuf::int32 value);

  // optional int64 groupID = 10;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 10;
  inline ::google::protobuf::int64 groupid() const;
  inline void set_groupid(::google::protobuf::int64 value);

  // optional int32 order = 11;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 11;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.operatehoroscopePool)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_levellimita();
  inline void clear_has_levellimita();
  inline void set_has_levellimitb();
  inline void clear_has_levellimitb();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_typeparma();
  inline void clear_has_typeparma();
  inline void set_has_probability();
  inline void clear_has_probability();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_order();
  inline void clear_has_order();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 levellimita_;
  ::google::protobuf::int32 levellimitb_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 typeparma_;
  ::google::protobuf::int32 probability_;
  ::google::protobuf::int64 groupid_;
  ::google::protobuf::int32 order_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operatehoroscopePool* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operatehoroscopePool : public ::google::protobuf::Message {
 public:
  Sheet_operatehoroscopePool();
  virtual ~Sheet_operatehoroscopePool();

  Sheet_operatehoroscopePool(const Sheet_operatehoroscopePool& from);

  inline Sheet_operatehoroscopePool& operator=(const Sheet_operatehoroscopePool& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operatehoroscopePool& default_instance();

  void Swap(Sheet_operatehoroscopePool* other);

  // implements Message ----------------------------------------------

  Sheet_operatehoroscopePool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operatehoroscopePool& from);
  void MergeFrom(const Sheet_operatehoroscopePool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operatehoroscopePool operatehoroscopePool_List = 1;
  inline int operatehoroscopepool_list_size() const;
  inline void clear_operatehoroscopepool_list();
  static const int kOperatehoroscopePoolListFieldNumber = 1;
  inline const ::proto_ff::operatehoroscopePool& operatehoroscopepool_list(int index) const;
  inline ::proto_ff::operatehoroscopePool* mutable_operatehoroscopepool_list(int index);
  inline ::proto_ff::operatehoroscopePool* add_operatehoroscopepool_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscopePool >&
      operatehoroscopepool_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscopePool >*
      mutable_operatehoroscopepool_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operatehoroscopePool)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscopePool > operatehoroscopepool_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operatehoroscopePool* default_instance_;
};
// -------------------------------------------------------------------

class operatehoroscopeExchange : public ::google::protobuf::Message {
 public:
  operatehoroscopeExchange();
  virtual ~operatehoroscopeExchange();

  operatehoroscopeExchange(const operatehoroscopeExchange& from);

  inline operatehoroscopeExchange& operator=(const operatehoroscopeExchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operatehoroscopeExchange& default_instance();

  void Swap(operatehoroscopeExchange* other);

  // implements Message ----------------------------------------------

  operatehoroscopeExchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operatehoroscopeExchange& from);
  void MergeFrom(const operatehoroscopeExchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 horoscopeId = 2;
  inline bool has_horoscopeid() const;
  inline void clear_horoscopeid();
  static const int kHoroscopeIdFieldNumber = 2;
  inline ::google::protobuf::int32 horoscopeid() const;
  inline void set_horoscopeid(::google::protobuf::int32 value);

  // optional int64 prizeId = 3;
  inline bool has_prizeid() const;
  inline void clear_prizeid();
  static const int kPrizeIdFieldNumber = 3;
  inline ::google::protobuf::int64 prizeid() const;
  inline void set_prizeid(::google::protobuf::int64 value);

  // optional int32 prof = 4;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 4;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 prizeNum = 5;
  inline bool has_prizenum() const;
  inline void clear_prizenum();
  static const int kPrizeNumFieldNumber = 5;
  inline ::google::protobuf::int32 prizenum() const;
  inline void set_prizenum(::google::protobuf::int32 value);

  // optional int32 luckNeed = 6;
  inline bool has_luckneed() const;
  inline void clear_luckneed();
  static const int kLuckNeedFieldNumber = 6;
  inline ::google::protobuf::int32 luckneed() const;
  inline void set_luckneed(::google::protobuf::int32 value);

  // optional int32 times = 7;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 7;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.operatehoroscopeExchange)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_horoscopeid();
  inline void clear_has_horoscopeid();
  inline void set_has_prizeid();
  inline void clear_has_prizeid();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_prizenum();
  inline void clear_has_prizenum();
  inline void set_has_luckneed();
  inline void clear_has_luckneed();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 horoscopeid_;
  ::google::protobuf::int64 prizeid_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 prizenum_;
  ::google::protobuf::int32 luckneed_;
  ::google::protobuf::int32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operatehoroscopeExchange* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operatehoroscopeExchange : public ::google::protobuf::Message {
 public:
  Sheet_operatehoroscopeExchange();
  virtual ~Sheet_operatehoroscopeExchange();

  Sheet_operatehoroscopeExchange(const Sheet_operatehoroscopeExchange& from);

  inline Sheet_operatehoroscopeExchange& operator=(const Sheet_operatehoroscopeExchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operatehoroscopeExchange& default_instance();

  void Swap(Sheet_operatehoroscopeExchange* other);

  // implements Message ----------------------------------------------

  Sheet_operatehoroscopeExchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operatehoroscopeExchange& from);
  void MergeFrom(const Sheet_operatehoroscopeExchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operatehoroscopeExchange operatehoroscopeExchange_List = 1;
  inline int operatehoroscopeexchange_list_size() const;
  inline void clear_operatehoroscopeexchange_list();
  static const int kOperatehoroscopeExchangeListFieldNumber = 1;
  inline const ::proto_ff::operatehoroscopeExchange& operatehoroscopeexchange_list(int index) const;
  inline ::proto_ff::operatehoroscopeExchange* mutable_operatehoroscopeexchange_list(int index);
  inline ::proto_ff::operatehoroscopeExchange* add_operatehoroscopeexchange_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscopeExchange >&
      operatehoroscopeexchange_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscopeExchange >*
      mutable_operatehoroscopeexchange_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operatehoroscopeExchange)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscopeExchange > operatehoroscopeexchange_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operatehoroscopeExchange* default_instance_;
};
// -------------------------------------------------------------------

class operateconst : public ::google::protobuf::Message {
 public:
  operateconst();
  virtual ~operateconst();

  operateconst(const operateconst& from);

  inline operateconst& operator=(const operateconst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operateconst& default_instance();

  void Swap(operateconst* other);

  // implements Message ----------------------------------------------

  operateconst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operateconst& from);
  void MergeFrom(const operateconst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 constantid = 1;
  inline bool has_constantid() const;
  inline void clear_constantid();
  static const int kConstantidFieldNumber = 1;
  inline ::google::protobuf::int64 constantid() const;
  inline void set_constantid(::google::protobuf::int64 value);

  // optional int64 constantdata = 2;
  inline bool has_constantdata() const;
  inline void clear_constantdata();
  static const int kConstantdataFieldNumber = 2;
  inline ::google::protobuf::int64 constantdata() const;
  inline void set_constantdata(::google::protobuf::int64 value);

  // optional string stringdata = 3;
  inline bool has_stringdata() const;
  inline void clear_stringdata();
  static const int kStringdataFieldNumber = 3;
  inline const ::std::string& stringdata() const;
  inline void set_stringdata(const ::std::string& value);
  inline void set_stringdata(const char* value);
  inline void set_stringdata(const char* value, size_t size);
  inline ::std::string* mutable_stringdata();
  inline ::std::string* release_stringdata();
  inline void set_allocated_stringdata(::std::string* stringdata);

  // @@protoc_insertion_point(class_scope:proto_ff.operateconst)
 private:
  inline void set_has_constantid();
  inline void clear_has_constantid();
  inline void set_has_constantdata();
  inline void clear_has_constantdata();
  inline void set_has_stringdata();
  inline void clear_has_stringdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 constantid_;
  ::google::protobuf::int64 constantdata_;
  ::std::string* stringdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operateconst* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operateconst : public ::google::protobuf::Message {
 public:
  Sheet_operateconst();
  virtual ~Sheet_operateconst();

  Sheet_operateconst(const Sheet_operateconst& from);

  inline Sheet_operateconst& operator=(const Sheet_operateconst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operateconst& default_instance();

  void Swap(Sheet_operateconst* other);

  // implements Message ----------------------------------------------

  Sheet_operateconst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operateconst& from);
  void MergeFrom(const Sheet_operateconst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operateconst operateconst_List = 1;
  inline int operateconst_list_size() const;
  inline void clear_operateconst_list();
  static const int kOperateconstListFieldNumber = 1;
  inline const ::proto_ff::operateconst& operateconst_list(int index) const;
  inline ::proto_ff::operateconst* mutable_operateconst_list(int index);
  inline ::proto_ff::operateconst* add_operateconst_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operateconst >&
      operateconst_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operateconst >*
      mutable_operateconst_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operateconst)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operateconst > operateconst_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operateconst* default_instance_;
};
// -------------------------------------------------------------------

class operateunlimited : public ::google::protobuf::Message {
 public:
  operateunlimited();
  virtual ~operateunlimited();

  operateunlimited(const operateunlimited& from);

  inline operateunlimited& operator=(const operateunlimited& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operateunlimited& default_instance();

  void Swap(operateunlimited* other);

  // implements Message ----------------------------------------------

  operateunlimited* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operateunlimited& from);
  void MergeFrom(const operateunlimited& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // optional string severPrice = 3;
  inline bool has_severprice() const;
  inline void clear_severprice();
  static const int kSeverPriceFieldNumber = 3;
  inline const ::std::string& severprice() const;
  inline void set_severprice(const ::std::string& value);
  inline void set_severprice(const char* value);
  inline void set_severprice(const char* value, size_t size);
  inline ::std::string* mutable_severprice();
  inline ::std::string* release_severprice();
  inline void set_allocated_severprice(::std::string* severprice);

  // optional int64 itemId = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 4;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // optional int64 num = 5;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 5;
  inline ::google::protobuf::int64 num() const;
  inline void set_num(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.operateunlimited)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_severprice();
  inline void clear_has_severprice();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 price_;
  ::std::string* severprice_;
  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int64 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operateunlimited* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operateunlimited : public ::google::protobuf::Message {
 public:
  Sheet_operateunlimited();
  virtual ~Sheet_operateunlimited();

  Sheet_operateunlimited(const Sheet_operateunlimited& from);

  inline Sheet_operateunlimited& operator=(const Sheet_operateunlimited& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operateunlimited& default_instance();

  void Swap(Sheet_operateunlimited* other);

  // implements Message ----------------------------------------------

  Sheet_operateunlimited* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operateunlimited& from);
  void MergeFrom(const Sheet_operateunlimited& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operateunlimited operateunlimited_List = 1;
  inline int operateunlimited_list_size() const;
  inline void clear_operateunlimited_list();
  static const int kOperateunlimitedListFieldNumber = 1;
  inline const ::proto_ff::operateunlimited& operateunlimited_list(int index) const;
  inline ::proto_ff::operateunlimited* mutable_operateunlimited_list(int index);
  inline ::proto_ff::operateunlimited* add_operateunlimited_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operateunlimited >&
      operateunlimited_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operateunlimited >*
      mutable_operateunlimited_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operateunlimited)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operateunlimited > operateunlimited_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operateunlimited* default_instance_;
};
// -------------------------------------------------------------------

class operaterand : public ::google::protobuf::Message {
 public:
  operaterand();
  virtual ~operaterand();

  operaterand(const operaterand& from);

  inline operaterand& operator=(const operaterand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operaterand& default_instance();

  void Swap(operaterand* other);

  // implements Message ----------------------------------------------

  operaterand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operaterand& from);
  void MergeFrom(const operaterand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 randtype = 2;
  inline bool has_randtype() const;
  inline void clear_randtype();
  static const int kRandtypeFieldNumber = 2;
  inline ::google::protobuf::int32 randtype() const;
  inline void set_randtype(::google::protobuf::int32 value);

  // optional int64 boxid = 3;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxidFieldNumber = 3;
  inline ::google::protobuf::int64 boxid() const;
  inline void set_boxid(::google::protobuf::int64 value);

  // repeated string canshu = 4;
  inline int canshu_size() const;
  inline void clear_canshu();
  static const int kCanshuFieldNumber = 4;
  inline const ::std::string& canshu(int index) const;
  inline ::std::string* mutable_canshu(int index);
  inline void set_canshu(int index, const ::std::string& value);
  inline void set_canshu(int index, const char* value);
  inline void set_canshu(int index, const char* value, size_t size);
  inline ::std::string* add_canshu();
  inline void add_canshu(const ::std::string& value);
  inline void add_canshu(const char* value);
  inline void add_canshu(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& canshu() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_canshu();

  // @@protoc_insertion_point(class_scope:proto_ff.operaterand)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_randtype();
  inline void clear_has_randtype();
  inline void set_has_boxid();
  inline void clear_has_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 randtype_;
  ::google::protobuf::int64 boxid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> canshu_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operaterand* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operaterand : public ::google::protobuf::Message {
 public:
  Sheet_operaterand();
  virtual ~Sheet_operaterand();

  Sheet_operaterand(const Sheet_operaterand& from);

  inline Sheet_operaterand& operator=(const Sheet_operaterand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operaterand& default_instance();

  void Swap(Sheet_operaterand* other);

  // implements Message ----------------------------------------------

  Sheet_operaterand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operaterand& from);
  void MergeFrom(const Sheet_operaterand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operaterand operaterand_List = 1;
  inline int operaterand_list_size() const;
  inline void clear_operaterand_list();
  static const int kOperaterandListFieldNumber = 1;
  inline const ::proto_ff::operaterand& operaterand_list(int index) const;
  inline ::proto_ff::operaterand* mutable_operaterand_list(int index);
  inline ::proto_ff::operaterand* add_operaterand_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operaterand >&
      operaterand_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operaterand >*
      mutable_operaterand_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operaterand)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operaterand > operaterand_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operaterand* default_instance_;
};
// -------------------------------------------------------------------

class operatemooncard : public ::google::protobuf::Message {
 public:
  operatemooncard();
  virtual ~operatemooncard();

  operatemooncard(const operatemooncard& from);

  inline operatemooncard& operator=(const operatemooncard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operatemooncard& default_instance();

  void Swap(operatemooncard* other);

  // implements Message ----------------------------------------------

  operatemooncard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operatemooncard& from);
  void MergeFrom(const operatemooncard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dayNum = 1;
  inline bool has_daynum() const;
  inline void clear_daynum();
  static const int kDayNumFieldNumber = 1;
  inline ::google::protobuf::int32 daynum() const;
  inline void set_daynum(::google::protobuf::int32 value);

  // optional int32 payBack = 2;
  inline bool has_payback() const;
  inline void clear_payback();
  static const int kPayBackFieldNumber = 2;
  inline ::google::protobuf::int32 payback() const;
  inline void set_payback(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.operatemooncard)
 private:
  inline void set_has_daynum();
  inline void clear_has_daynum();
  inline void set_has_payback();
  inline void clear_has_payback();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 daynum_;
  ::google::protobuf::int32 payback_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operatemooncard* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operatemooncard : public ::google::protobuf::Message {
 public:
  Sheet_operatemooncard();
  virtual ~Sheet_operatemooncard();

  Sheet_operatemooncard(const Sheet_operatemooncard& from);

  inline Sheet_operatemooncard& operator=(const Sheet_operatemooncard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operatemooncard& default_instance();

  void Swap(Sheet_operatemooncard* other);

  // implements Message ----------------------------------------------

  Sheet_operatemooncard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operatemooncard& from);
  void MergeFrom(const Sheet_operatemooncard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operatemooncard operatemooncard_List = 1;
  inline int operatemooncard_list_size() const;
  inline void clear_operatemooncard_list();
  static const int kOperatemooncardListFieldNumber = 1;
  inline const ::proto_ff::operatemooncard& operatemooncard_list(int index) const;
  inline ::proto_ff::operatemooncard* mutable_operatemooncard_list(int index);
  inline ::proto_ff::operatemooncard* add_operatemooncard_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatemooncard >&
      operatemooncard_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatemooncard >*
      mutable_operatemooncard_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operatemooncard)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operatemooncard > operatemooncard_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operatemooncard* default_instance_;
};
// -------------------------------------------------------------------

class operatefund : public ::google::protobuf::Message {
 public:
  operatefund();
  virtual ~operatefund();

  operatefund(const operatefund& from);

  inline operatefund& operator=(const operatefund& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operatefund& default_instance();

  void Swap(operatefund* other);

  // implements Message ----------------------------------------------

  operatefund* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operatefund& from);
  void MergeFrom(const operatefund& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 rebateS = 3;
  inline bool has_rebates() const;
  inline void clear_rebates();
  static const int kRebateSFieldNumber = 3;
  inline ::google::protobuf::int32 rebates() const;
  inline void set_rebates(::google::protobuf::int32 value);

  // optional int32 rebateL = 4;
  inline bool has_rebatel() const;
  inline void clear_rebatel();
  static const int kRebateLFieldNumber = 4;
  inline ::google::protobuf::int32 rebatel() const;
  inline void set_rebatel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.operatefund)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_rebates();
  inline void clear_has_rebates();
  inline void set_has_rebatel();
  inline void clear_has_rebatel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 rebates_;
  ::google::protobuf::int32 rebatel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operatefund* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operatefund : public ::google::protobuf::Message {
 public:
  Sheet_operatefund();
  virtual ~Sheet_operatefund();

  Sheet_operatefund(const Sheet_operatefund& from);

  inline Sheet_operatefund& operator=(const Sheet_operatefund& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operatefund& default_instance();

  void Swap(Sheet_operatefund* other);

  // implements Message ----------------------------------------------

  Sheet_operatefund* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operatefund& from);
  void MergeFrom(const Sheet_operatefund& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operatefund operatefund_List = 1;
  inline int operatefund_list_size() const;
  inline void clear_operatefund_list();
  static const int kOperatefundListFieldNumber = 1;
  inline const ::proto_ff::operatefund& operatefund_list(int index) const;
  inline ::proto_ff::operatefund* mutable_operatefund_list(int index);
  inline ::proto_ff::operatefund* add_operatefund_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatefund >&
      operatefund_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatefund >*
      mutable_operatefund_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operatefund)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operatefund > operatefund_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operatefund* default_instance_;
};
// -------------------------------------------------------------------

class operatetask : public ::google::protobuf::Message {
 public:
  operatetask();
  virtual ~operatetask();

  operatetask(const operatetask& from);

  inline operatetask& operator=(const operatetask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operatetask& default_instance();

  void Swap(operatetask* other);

  // implements Message ----------------------------------------------

  operatetask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operatetask& from);
  void MergeFrom(const operatetask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 taskNan = 2;
  inline bool has_tasknan() const;
  inline void clear_tasknan();
  static const int kTaskNanFieldNumber = 2;
  inline ::google::protobuf::int32 tasknan() const;
  inline void set_tasknan(::google::protobuf::int32 value);

  // optional int32 taskType = 3;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 3;
  inline ::google::protobuf::int32 tasktype() const;
  inline void set_tasktype(::google::protobuf::int32 value);

  // optional string num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline const ::std::string& num() const;
  inline void set_num(const ::std::string& value);
  inline void set_num(const char* value);
  inline void set_num(const char* value, size_t size);
  inline ::std::string* mutable_num();
  inline ::std::string* release_num();
  inline void set_allocated_num(::std::string* num);

  // @@protoc_insertion_point(class_scope:proto_ff.operatetask)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_tasknan();
  inline void clear_has_tasknan();
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 tasknan_;
  ::std::string* num_;
  ::google::protobuf::int32 tasktype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operatetask* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operatetask : public ::google::protobuf::Message {
 public:
  Sheet_operatetask();
  virtual ~Sheet_operatetask();

  Sheet_operatetask(const Sheet_operatetask& from);

  inline Sheet_operatetask& operator=(const Sheet_operatetask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operatetask& default_instance();

  void Swap(Sheet_operatetask* other);

  // implements Message ----------------------------------------------

  Sheet_operatetask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operatetask& from);
  void MergeFrom(const Sheet_operatetask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operatetask operatetask_List = 1;
  inline int operatetask_list_size() const;
  inline void clear_operatetask_list();
  static const int kOperatetaskListFieldNumber = 1;
  inline const ::proto_ff::operatetask& operatetask_list(int index) const;
  inline ::proto_ff::operatetask* mutable_operatetask_list(int index);
  inline ::proto_ff::operatetask* add_operatetask_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatetask >&
      operatetask_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatetask >*
      mutable_operatetask_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operatetask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operatetask > operatetask_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operatetask* default_instance_;
};
// -------------------------------------------------------------------

class operateshop : public ::google::protobuf::Message {
 public:
  operateshop();
  virtual ~operateshop();

  operateshop(const operateshop& from);

  inline operateshop& operator=(const operateshop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operateshop& default_instance();

  void Swap(operateshop* other);

  // implements Message ----------------------------------------------

  operateshop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operateshop& from);
  void MergeFrom(const operateshop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 itemid = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // optional int32 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // optional int32 dPrice = 4;
  inline bool has_dprice() const;
  inline void clear_dprice();
  static const int kDPriceFieldNumber = 4;
  inline ::google::protobuf::int32 dprice() const;
  inline void set_dprice(::google::protobuf::int32 value);

  // optional int32 moneyType = 5;
  inline bool has_moneytype() const;
  inline void clear_moneytype();
  static const int kMoneyTypeFieldNumber = 5;
  inline ::google::protobuf::int32 moneytype() const;
  inline void set_moneytype(::google::protobuf::int32 value);

  // optional int32 times = 6;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 6;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // optional int32 timeLimit = 7;
  inline bool has_timelimit() const;
  inline void clear_timelimit();
  static const int kTimeLimitFieldNumber = 7;
  inline ::google::protobuf::int32 timelimit() const;
  inline void set_timelimit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.operateshop)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_dprice();
  inline void clear_has_dprice();
  inline void set_has_moneytype();
  inline void clear_has_moneytype();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_timelimit();
  inline void clear_has_timelimit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 dprice_;
  ::google::protobuf::int32 moneytype_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 timelimit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operateshop* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operateshop : public ::google::protobuf::Message {
 public:
  Sheet_operateshop();
  virtual ~Sheet_operateshop();

  Sheet_operateshop(const Sheet_operateshop& from);

  inline Sheet_operateshop& operator=(const Sheet_operateshop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operateshop& default_instance();

  void Swap(Sheet_operateshop* other);

  // implements Message ----------------------------------------------

  Sheet_operateshop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operateshop& from);
  void MergeFrom(const Sheet_operateshop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operateshop operateshop_List = 1;
  inline int operateshop_list_size() const;
  inline void clear_operateshop_list();
  static const int kOperateshopListFieldNumber = 1;
  inline const ::proto_ff::operateshop& operateshop_list(int index) const;
  inline ::proto_ff::operateshop* mutable_operateshop_list(int index);
  inline ::proto_ff::operateshop* add_operateshop_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operateshop >&
      operateshop_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operateshop >*
      mutable_operateshop_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operateshop)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operateshop > operateshop_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operateshop* default_instance_;
};
// -------------------------------------------------------------------

class operatewish : public ::google::protobuf::Message {
 public:
  operatewish();
  virtual ~operatewish();

  operatewish(const operatewish& from);

  inline operatewish& operator=(const operatewish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operatewish& default_instance();

  void Swap(operatewish* other);

  // implements Message ----------------------------------------------

  operatewish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operatewish& from);
  void MergeFrom(const operatewish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int64 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.operatewish)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operatewish* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operatewish : public ::google::protobuf::Message {
 public:
  Sheet_operatewish();
  virtual ~Sheet_operatewish();

  Sheet_operatewish(const Sheet_operatewish& from);

  inline Sheet_operatewish& operator=(const Sheet_operatewish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operatewish& default_instance();

  void Swap(Sheet_operatewish* other);

  // implements Message ----------------------------------------------

  Sheet_operatewish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operatewish& from);
  void MergeFrom(const Sheet_operatewish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operatewish operatewish_List = 1;
  inline int operatewish_list_size() const;
  inline void clear_operatewish_list();
  static const int kOperatewishListFieldNumber = 1;
  inline const ::proto_ff::operatewish& operatewish_list(int index) const;
  inline ::proto_ff::operatewish* mutable_operatewish_list(int index);
  inline ::proto_ff::operatewish* add_operatewish_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatewish >&
      operatewish_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatewish >*
      mutable_operatewish_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operatewish)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operatewish > operatewish_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operatewish* default_instance_;
};
// -------------------------------------------------------------------

class operateturntable : public ::google::protobuf::Message {
 public:
  operateturntable();
  virtual ~operateturntable();

  operateturntable(const operateturntable& from);

  inline operateturntable& operator=(const operateturntable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operateturntable& default_instance();

  void Swap(operateturntable* other);

  // implements Message ----------------------------------------------

  operateturntable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operateturntable& from);
  void MergeFrom(const operateturntable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 prof = 4;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 4;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 prizeLevel = 5;
  inline bool has_prizelevel() const;
  inline void clear_prizelevel();
  static const int kPrizeLevelFieldNumber = 5;
  inline ::google::protobuf::int32 prizelevel() const;
  inline void set_prizelevel(::google::protobuf::int32 value);

  // optional int32 weight = 6;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 6;
  inline ::google::protobuf::int32 weight() const;
  inline void set_weight(::google::protobuf::int32 value);

  // optional int32 broadcast = 7;
  inline bool has_broadcast() const;
  inline void clear_broadcast();
  static const int kBroadcastFieldNumber = 7;
  inline ::google::protobuf::int32 broadcast() const;
  inline void set_broadcast(::google::protobuf::int32 value);

  // optional int32 order = 8;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 8;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);

  // optional int64 relation = 9;
  inline bool has_relation() const;
  inline void clear_relation();
  static const int kRelationFieldNumber = 9;
  inline ::google::protobuf::int64 relation() const;
  inline void set_relation(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.operateturntable)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_prizelevel();
  inline void clear_has_prizelevel();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_broadcast();
  inline void clear_has_broadcast();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_relation();
  inline void clear_has_relation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 prizelevel_;
  ::google::protobuf::int32 weight_;
  ::google::protobuf::int32 broadcast_;
  ::google::protobuf::int64 relation_;
  ::google::protobuf::int32 order_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operateturntable* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operateturntable : public ::google::protobuf::Message {
 public:
  Sheet_operateturntable();
  virtual ~Sheet_operateturntable();

  Sheet_operateturntable(const Sheet_operateturntable& from);

  inline Sheet_operateturntable& operator=(const Sheet_operateturntable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operateturntable& default_instance();

  void Swap(Sheet_operateturntable* other);

  // implements Message ----------------------------------------------

  Sheet_operateturntable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operateturntable& from);
  void MergeFrom(const Sheet_operateturntable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operateturntable operateturntable_List = 1;
  inline int operateturntable_list_size() const;
  inline void clear_operateturntable_list();
  static const int kOperateturntableListFieldNumber = 1;
  inline const ::proto_ff::operateturntable& operateturntable_list(int index) const;
  inline ::proto_ff::operateturntable* mutable_operateturntable_list(int index);
  inline ::proto_ff::operateturntable* add_operateturntable_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operateturntable >&
      operateturntable_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operateturntable >*
      mutable_operateturntable_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operateturntable)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operateturntable > operateturntable_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operateturntable* default_instance_;
};
// -------------------------------------------------------------------

class operateturntableTask : public ::google::protobuf::Message {
 public:
  operateturntableTask();
  virtual ~operateturntableTask();

  operateturntableTask(const operateturntableTask& from);

  inline operateturntableTask& operator=(const operateturntableTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const operateturntableTask& default_instance();

  void Swap(operateturntableTask* other);

  // implements Message ----------------------------------------------

  operateturntableTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const operateturntableTask& from);
  void MergeFrom(const operateturntableTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 taskType = 2;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 2;
  inline ::google::protobuf::int32 tasktype() const;
  inline void set_tasktype(::google::protobuf::int32 value);

  // optional int32 taskParam = 3;
  inline bool has_taskparam() const;
  inline void clear_taskparam();
  static const int kTaskParamFieldNumber = 3;
  inline ::google::protobuf::int32 taskparam() const;
  inline void set_taskparam(::google::protobuf::int32 value);

  // optional int64 itemId = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 4;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // optional int32 itemCount = 5;
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemCountFieldNumber = 5;
  inline ::google::protobuf::int32 itemcount() const;
  inline void set_itemcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.operateturntableTask)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_taskparam();
  inline void clear_has_taskparam();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 tasktype_;
  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int32 taskparam_;
  ::google::protobuf::int32 itemcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static operateturntableTask* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_operateturntableTask : public ::google::protobuf::Message {
 public:
  Sheet_operateturntableTask();
  virtual ~Sheet_operateturntableTask();

  Sheet_operateturntableTask(const Sheet_operateturntableTask& from);

  inline Sheet_operateturntableTask& operator=(const Sheet_operateturntableTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_operateturntableTask& default_instance();

  void Swap(Sheet_operateturntableTask* other);

  // implements Message ----------------------------------------------

  Sheet_operateturntableTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_operateturntableTask& from);
  void MergeFrom(const Sheet_operateturntableTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.operateturntableTask operateturntableTask_List = 1;
  inline int operateturntabletask_list_size() const;
  inline void clear_operateturntabletask_list();
  static const int kOperateturntableTaskListFieldNumber = 1;
  inline const ::proto_ff::operateturntableTask& operateturntabletask_list(int index) const;
  inline ::proto_ff::operateturntableTask* mutable_operateturntabletask_list(int index);
  inline ::proto_ff::operateturntableTask* add_operateturntabletask_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operateturntableTask >&
      operateturntabletask_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operateturntableTask >*
      mutable_operateturntabletask_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_operateturntableTask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::operateturntableTask > operateturntabletask_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_operate_2eproto();
  friend void protobuf_AssignDesc_operate_2eproto();
  friend void protobuf_ShutdownFile_operate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_operateturntableTask* default_instance_;
};
// ===================================================================


// ===================================================================

// operateoperate

// optional int64 id = 1;
inline bool operateoperate::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operateoperate::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operateoperate::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operateoperate::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 operateoperate::id() const {
  return id_;
}
inline void operateoperate::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 huoDong = 2;
inline bool operateoperate::has_huodong() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operateoperate::set_has_huodong() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operateoperate::clear_has_huodong() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operateoperate::clear_huodong() {
  huodong_ = 0;
  clear_has_huodong();
}
inline ::google::protobuf::int32 operateoperate::huodong() const {
  return huodong_;
}
inline void operateoperate::set_huodong(::google::protobuf::int32 value) {
  set_has_huodong();
  huodong_ = value;
}

// optional string name = 3;
inline bool operateoperate::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operateoperate::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operateoperate::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operateoperate::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& operateoperate::name() const {
  return *name_;
}
inline void operateoperate::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void operateoperate::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void operateoperate::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operateoperate::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* operateoperate::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operateoperate::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 nameId = 4;
inline bool operateoperate::has_nameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void operateoperate::set_has_nameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void operateoperate::clear_has_nameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void operateoperate::clear_nameid() {
  nameid_ = 0;
  clear_has_nameid();
}
inline ::google::protobuf::int32 operateoperate::nameid() const {
  return nameid_;
}
inline void operateoperate::set_nameid(::google::protobuf::int32 value) {
  set_has_nameid();
  nameid_ = value;
}

// optional string tiaoJian = 5;
inline bool operateoperate::has_tiaojian() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void operateoperate::set_has_tiaojian() {
  _has_bits_[0] |= 0x00000010u;
}
inline void operateoperate::clear_has_tiaojian() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void operateoperate::clear_tiaojian() {
  if (tiaojian_ != &::google::protobuf::internal::kEmptyString) {
    tiaojian_->clear();
  }
  clear_has_tiaojian();
}
inline const ::std::string& operateoperate::tiaojian() const {
  return *tiaojian_;
}
inline void operateoperate::set_tiaojian(const ::std::string& value) {
  set_has_tiaojian();
  if (tiaojian_ == &::google::protobuf::internal::kEmptyString) {
    tiaojian_ = new ::std::string;
  }
  tiaojian_->assign(value);
}
inline void operateoperate::set_tiaojian(const char* value) {
  set_has_tiaojian();
  if (tiaojian_ == &::google::protobuf::internal::kEmptyString) {
    tiaojian_ = new ::std::string;
  }
  tiaojian_->assign(value);
}
inline void operateoperate::set_tiaojian(const char* value, size_t size) {
  set_has_tiaojian();
  if (tiaojian_ == &::google::protobuf::internal::kEmptyString) {
    tiaojian_ = new ::std::string;
  }
  tiaojian_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operateoperate::mutable_tiaojian() {
  set_has_tiaojian();
  if (tiaojian_ == &::google::protobuf::internal::kEmptyString) {
    tiaojian_ = new ::std::string;
  }
  return tiaojian_;
}
inline ::std::string* operateoperate::release_tiaojian() {
  clear_has_tiaojian();
  if (tiaojian_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tiaojian_;
    tiaojian_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operateoperate::set_allocated_tiaojian(::std::string* tiaojian) {
  if (tiaojian_ != &::google::protobuf::internal::kEmptyString) {
    delete tiaojian_;
  }
  if (tiaojian) {
    set_has_tiaojian();
    tiaojian_ = tiaojian;
  } else {
    clear_has_tiaojian();
    tiaojian_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 servertype = 6;
inline bool operateoperate::has_servertype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void operateoperate::set_has_servertype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void operateoperate::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void operateoperate::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
inline ::google::protobuf::int32 operateoperate::servertype() const {
  return servertype_;
}
inline void operateoperate::set_servertype(::google::protobuf::int32 value) {
  set_has_servertype();
  servertype_ = value;
}

// optional string timeA = 7;
inline bool operateoperate::has_timea() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void operateoperate::set_has_timea() {
  _has_bits_[0] |= 0x00000040u;
}
inline void operateoperate::clear_has_timea() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void operateoperate::clear_timea() {
  if (timea_ != &::google::protobuf::internal::kEmptyString) {
    timea_->clear();
  }
  clear_has_timea();
}
inline const ::std::string& operateoperate::timea() const {
  return *timea_;
}
inline void operateoperate::set_timea(const ::std::string& value) {
  set_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    timea_ = new ::std::string;
  }
  timea_->assign(value);
}
inline void operateoperate::set_timea(const char* value) {
  set_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    timea_ = new ::std::string;
  }
  timea_->assign(value);
}
inline void operateoperate::set_timea(const char* value, size_t size) {
  set_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    timea_ = new ::std::string;
  }
  timea_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operateoperate::mutable_timea() {
  set_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    timea_ = new ::std::string;
  }
  return timea_;
}
inline ::std::string* operateoperate::release_timea() {
  clear_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timea_;
    timea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operateoperate::set_allocated_timea(::std::string* timea) {
  if (timea_ != &::google::protobuf::internal::kEmptyString) {
    delete timea_;
  }
  if (timea) {
    set_has_timea();
    timea_ = timea;
  } else {
    clear_has_timea();
    timea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string timeB = 8;
inline bool operateoperate::has_timeb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void operateoperate::set_has_timeb() {
  _has_bits_[0] |= 0x00000080u;
}
inline void operateoperate::clear_has_timeb() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void operateoperate::clear_timeb() {
  if (timeb_ != &::google::protobuf::internal::kEmptyString) {
    timeb_->clear();
  }
  clear_has_timeb();
}
inline const ::std::string& operateoperate::timeb() const {
  return *timeb_;
}
inline void operateoperate::set_timeb(const ::std::string& value) {
  set_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    timeb_ = new ::std::string;
  }
  timeb_->assign(value);
}
inline void operateoperate::set_timeb(const char* value) {
  set_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    timeb_ = new ::std::string;
  }
  timeb_->assign(value);
}
inline void operateoperate::set_timeb(const char* value, size_t size) {
  set_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    timeb_ = new ::std::string;
  }
  timeb_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operateoperate::mutable_timeb() {
  set_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    timeb_ = new ::std::string;
  }
  return timeb_;
}
inline ::std::string* operateoperate::release_timeb() {
  clear_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timeb_;
    timeb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operateoperate::set_allocated_timeb(::std::string* timeb) {
  if (timeb_ != &::google::protobuf::internal::kEmptyString) {
    delete timeb_;
  }
  if (timeb) {
    set_has_timeb();
    timeb_ = timeb;
  } else {
    clear_has_timeb();
    timeb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 timeType = 9;
inline bool operateoperate::has_timetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void operateoperate::set_has_timetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void operateoperate::clear_has_timetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void operateoperate::clear_timetype() {
  timetype_ = 0;
  clear_has_timetype();
}
inline ::google::protobuf::int32 operateoperate::timetype() const {
  return timetype_;
}
inline void operateoperate::set_timetype(::google::protobuf::int32 value) {
  set_has_timetype();
  timetype_ = value;
}

// optional string miaoSu = 10;
inline bool operateoperate::has_miaosu() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void operateoperate::set_has_miaosu() {
  _has_bits_[0] |= 0x00000200u;
}
inline void operateoperate::clear_has_miaosu() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void operateoperate::clear_miaosu() {
  if (miaosu_ != &::google::protobuf::internal::kEmptyString) {
    miaosu_->clear();
  }
  clear_has_miaosu();
}
inline const ::std::string& operateoperate::miaosu() const {
  return *miaosu_;
}
inline void operateoperate::set_miaosu(const ::std::string& value) {
  set_has_miaosu();
  if (miaosu_ == &::google::protobuf::internal::kEmptyString) {
    miaosu_ = new ::std::string;
  }
  miaosu_->assign(value);
}
inline void operateoperate::set_miaosu(const char* value) {
  set_has_miaosu();
  if (miaosu_ == &::google::protobuf::internal::kEmptyString) {
    miaosu_ = new ::std::string;
  }
  miaosu_->assign(value);
}
inline void operateoperate::set_miaosu(const char* value, size_t size) {
  set_has_miaosu();
  if (miaosu_ == &::google::protobuf::internal::kEmptyString) {
    miaosu_ = new ::std::string;
  }
  miaosu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operateoperate::mutable_miaosu() {
  set_has_miaosu();
  if (miaosu_ == &::google::protobuf::internal::kEmptyString) {
    miaosu_ = new ::std::string;
  }
  return miaosu_;
}
inline ::std::string* operateoperate::release_miaosu() {
  clear_has_miaosu();
  if (miaosu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = miaosu_;
    miaosu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operateoperate::set_allocated_miaosu(::std::string* miaosu) {
  if (miaosu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaosu_;
  }
  if (miaosu) {
    set_has_miaosu();
    miaosu_ = miaosu;
  } else {
    clear_has_miaosu();
    miaosu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ifOpen = 11;
inline bool operateoperate::has_ifopen() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void operateoperate::set_has_ifopen() {
  _has_bits_[0] |= 0x00000400u;
}
inline void operateoperate::clear_has_ifopen() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void operateoperate::clear_ifopen() {
  ifopen_ = 0;
  clear_has_ifopen();
}
inline ::google::protobuf::int32 operateoperate::ifopen() const {
  return ifopen_;
}
inline void operateoperate::set_ifopen(::google::protobuf::int32 value) {
  set_has_ifopen();
  ifopen_ = value;
}

// -------------------------------------------------------------------

// Sheet_operateoperate

// repeated .proto_ff.operateoperate operateoperate_List = 1;
inline int Sheet_operateoperate::operateoperate_list_size() const {
  return operateoperate_list_.size();
}
inline void Sheet_operateoperate::clear_operateoperate_list() {
  operateoperate_list_.Clear();
}
inline const ::proto_ff::operateoperate& Sheet_operateoperate::operateoperate_list(int index) const {
  return operateoperate_list_.Get(index);
}
inline ::proto_ff::operateoperate* Sheet_operateoperate::mutable_operateoperate_list(int index) {
  return operateoperate_list_.Mutable(index);
}
inline ::proto_ff::operateoperate* Sheet_operateoperate::add_operateoperate_list() {
  return operateoperate_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operateoperate >&
Sheet_operateoperate::operateoperate_list() const {
  return operateoperate_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operateoperate >*
Sheet_operateoperate::mutable_operateoperate_list() {
  return &operateoperate_list_;
}

// -------------------------------------------------------------------

// operatetutor

// optional int32 id = 1;
inline bool operatetutor::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operatetutor::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operatetutor::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operatetutor::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 operatetutor::id() const {
  return id_;
}
inline void operatetutor::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool operatetutor::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operatetutor::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operatetutor::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operatetutor::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 operatetutor::type() const {
  return type_;
}
inline void operatetutor::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 condition = 3;
inline bool operatetutor::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operatetutor::set_has_condition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operatetutor::clear_has_condition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operatetutor::clear_condition() {
  condition_ = 0;
  clear_has_condition();
}
inline ::google::protobuf::int32 operatetutor::condition() const {
  return condition_;
}
inline void operatetutor::set_condition(::google::protobuf::int32 value) {
  set_has_condition();
  condition_ = value;
}

// optional int64 conditionParam1 = 4;
inline bool operatetutor::has_conditionparam1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void operatetutor::set_has_conditionparam1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void operatetutor::clear_has_conditionparam1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void operatetutor::clear_conditionparam1() {
  conditionparam1_ = GOOGLE_LONGLONG(0);
  clear_has_conditionparam1();
}
inline ::google::protobuf::int64 operatetutor::conditionparam1() const {
  return conditionparam1_;
}
inline void operatetutor::set_conditionparam1(::google::protobuf::int64 value) {
  set_has_conditionparam1();
  conditionparam1_ = value;
}

// optional int64 boxId = 6;
inline bool operatetutor::has_boxid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void operatetutor::set_has_boxid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void operatetutor::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void operatetutor::clear_boxid() {
  boxid_ = GOOGLE_LONGLONG(0);
  clear_has_boxid();
}
inline ::google::protobuf::int64 operatetutor::boxid() const {
  return boxid_;
}
inline void operatetutor::set_boxid(::google::protobuf::int64 value) {
  set_has_boxid();
  boxid_ = value;
}

// optional int32 teach = 7;
inline bool operatetutor::has_teach() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void operatetutor::set_has_teach() {
  _has_bits_[0] |= 0x00000020u;
}
inline void operatetutor::clear_has_teach() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void operatetutor::clear_teach() {
  teach_ = 0;
  clear_has_teach();
}
inline ::google::protobuf::int32 operatetutor::teach() const {
  return teach_;
}
inline void operatetutor::set_teach(::google::protobuf::int32 value) {
  set_has_teach();
  teach_ = value;
}

// -------------------------------------------------------------------

// Sheet_operatetutor

// repeated .proto_ff.operatetutor operatetutor_List = 1;
inline int Sheet_operatetutor::operatetutor_list_size() const {
  return operatetutor_list_.size();
}
inline void Sheet_operatetutor::clear_operatetutor_list() {
  operatetutor_list_.Clear();
}
inline const ::proto_ff::operatetutor& Sheet_operatetutor::operatetutor_list(int index) const {
  return operatetutor_list_.Get(index);
}
inline ::proto_ff::operatetutor* Sheet_operatetutor::mutable_operatetutor_list(int index) {
  return operatetutor_list_.Mutable(index);
}
inline ::proto_ff::operatetutor* Sheet_operatetutor::add_operatetutor_list() {
  return operatetutor_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatetutor >&
Sheet_operatetutor::operatetutor_list() const {
  return operatetutor_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatetutor >*
Sheet_operatetutor::mutable_operatetutor_list() {
  return &operatetutor_list_;
}

// -------------------------------------------------------------------

// operatejiangli

// optional int64 tiaoJianId = 1;
inline bool operatejiangli::has_tiaojianid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operatejiangli::set_has_tiaojianid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operatejiangli::clear_has_tiaojianid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operatejiangli::clear_tiaojianid() {
  tiaojianid_ = GOOGLE_LONGLONG(0);
  clear_has_tiaojianid();
}
inline ::google::protobuf::int64 operatejiangli::tiaojianid() const {
  return tiaojianid_;
}
inline void operatejiangli::set_tiaojianid(::google::protobuf::int64 value) {
  set_has_tiaojianid();
  tiaojianid_ = value;
}

// optional string huoDong = 2;
inline bool operatejiangli::has_huodong() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operatejiangli::set_has_huodong() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operatejiangli::clear_has_huodong() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operatejiangli::clear_huodong() {
  if (huodong_ != &::google::protobuf::internal::kEmptyString) {
    huodong_->clear();
  }
  clear_has_huodong();
}
inline const ::std::string& operatejiangli::huodong() const {
  return *huodong_;
}
inline void operatejiangli::set_huodong(const ::std::string& value) {
  set_has_huodong();
  if (huodong_ == &::google::protobuf::internal::kEmptyString) {
    huodong_ = new ::std::string;
  }
  huodong_->assign(value);
}
inline void operatejiangli::set_huodong(const char* value) {
  set_has_huodong();
  if (huodong_ == &::google::protobuf::internal::kEmptyString) {
    huodong_ = new ::std::string;
  }
  huodong_->assign(value);
}
inline void operatejiangli::set_huodong(const char* value, size_t size) {
  set_has_huodong();
  if (huodong_ == &::google::protobuf::internal::kEmptyString) {
    huodong_ = new ::std::string;
  }
  huodong_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operatejiangli::mutable_huodong() {
  set_has_huodong();
  if (huodong_ == &::google::protobuf::internal::kEmptyString) {
    huodong_ = new ::std::string;
  }
  return huodong_;
}
inline ::std::string* operatejiangli::release_huodong() {
  clear_has_huodong();
  if (huodong_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = huodong_;
    huodong_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operatejiangli::set_allocated_huodong(::std::string* huodong) {
  if (huodong_ != &::google::protobuf::internal::kEmptyString) {
    delete huodong_;
  }
  if (huodong) {
    set_has_huodong();
    huodong_ = huodong;
  } else {
    clear_has_huodong();
    huodong_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string downNu = 3;
inline bool operatejiangli::has_downnu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operatejiangli::set_has_downnu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operatejiangli::clear_has_downnu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operatejiangli::clear_downnu() {
  if (downnu_ != &::google::protobuf::internal::kEmptyString) {
    downnu_->clear();
  }
  clear_has_downnu();
}
inline const ::std::string& operatejiangli::downnu() const {
  return *downnu_;
}
inline void operatejiangli::set_downnu(const ::std::string& value) {
  set_has_downnu();
  if (downnu_ == &::google::protobuf::internal::kEmptyString) {
    downnu_ = new ::std::string;
  }
  downnu_->assign(value);
}
inline void operatejiangli::set_downnu(const char* value) {
  set_has_downnu();
  if (downnu_ == &::google::protobuf::internal::kEmptyString) {
    downnu_ = new ::std::string;
  }
  downnu_->assign(value);
}
inline void operatejiangli::set_downnu(const char* value, size_t size) {
  set_has_downnu();
  if (downnu_ == &::google::protobuf::internal::kEmptyString) {
    downnu_ = new ::std::string;
  }
  downnu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operatejiangli::mutable_downnu() {
  set_has_downnu();
  if (downnu_ == &::google::protobuf::internal::kEmptyString) {
    downnu_ = new ::std::string;
  }
  return downnu_;
}
inline ::std::string* operatejiangli::release_downnu() {
  clear_has_downnu();
  if (downnu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = downnu_;
    downnu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operatejiangli::set_allocated_downnu(::std::string* downnu) {
  if (downnu_ != &::google::protobuf::internal::kEmptyString) {
    delete downnu_;
  }
  if (downnu) {
    set_has_downnu();
    downnu_ = downnu;
  } else {
    clear_has_downnu();
    downnu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string upNu = 4;
inline bool operatejiangli::has_upnu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void operatejiangli::set_has_upnu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void operatejiangli::clear_has_upnu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void operatejiangli::clear_upnu() {
  if (upnu_ != &::google::protobuf::internal::kEmptyString) {
    upnu_->clear();
  }
  clear_has_upnu();
}
inline const ::std::string& operatejiangli::upnu() const {
  return *upnu_;
}
inline void operatejiangli::set_upnu(const ::std::string& value) {
  set_has_upnu();
  if (upnu_ == &::google::protobuf::internal::kEmptyString) {
    upnu_ = new ::std::string;
  }
  upnu_->assign(value);
}
inline void operatejiangli::set_upnu(const char* value) {
  set_has_upnu();
  if (upnu_ == &::google::protobuf::internal::kEmptyString) {
    upnu_ = new ::std::string;
  }
  upnu_->assign(value);
}
inline void operatejiangli::set_upnu(const char* value, size_t size) {
  set_has_upnu();
  if (upnu_ == &::google::protobuf::internal::kEmptyString) {
    upnu_ = new ::std::string;
  }
  upnu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operatejiangli::mutable_upnu() {
  set_has_upnu();
  if (upnu_ == &::google::protobuf::internal::kEmptyString) {
    upnu_ = new ::std::string;
  }
  return upnu_;
}
inline ::std::string* operatejiangli::release_upnu() {
  clear_has_upnu();
  if (upnu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = upnu_;
    upnu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operatejiangli::set_allocated_upnu(::std::string* upnu) {
  if (upnu_ != &::google::protobuf::internal::kEmptyString) {
    delete upnu_;
  }
  if (upnu) {
    set_has_upnu();
    upnu_ = upnu;
  } else {
    clear_has_upnu();
    upnu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string miaoshu = 5;
inline bool operatejiangli::has_miaoshu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void operatejiangli::set_has_miaoshu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void operatejiangli::clear_has_miaoshu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void operatejiangli::clear_miaoshu() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    miaoshu_->clear();
  }
  clear_has_miaoshu();
}
inline const ::std::string& operatejiangli::miaoshu() const {
  return *miaoshu_;
}
inline void operatejiangli::set_miaoshu(const ::std::string& value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void operatejiangli::set_miaoshu(const char* value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void operatejiangli::set_miaoshu(const char* value, size_t size) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operatejiangli::mutable_miaoshu() {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  return miaoshu_;
}
inline ::std::string* operatejiangli::release_miaoshu() {
  clear_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = miaoshu_;
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operatejiangli::set_allocated_miaoshu(::std::string* miaoshu) {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (miaoshu) {
    set_has_miaoshu();
    miaoshu_ = miaoshu;
  } else {
    clear_has_miaoshu();
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string miaoshuAdd = 6;
inline bool operatejiangli::has_miaoshuadd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void operatejiangli::set_has_miaoshuadd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void operatejiangli::clear_has_miaoshuadd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void operatejiangli::clear_miaoshuadd() {
  if (miaoshuadd_ != &::google::protobuf::internal::kEmptyString) {
    miaoshuadd_->clear();
  }
  clear_has_miaoshuadd();
}
inline const ::std::string& operatejiangli::miaoshuadd() const {
  return *miaoshuadd_;
}
inline void operatejiangli::set_miaoshuadd(const ::std::string& value) {
  set_has_miaoshuadd();
  if (miaoshuadd_ == &::google::protobuf::internal::kEmptyString) {
    miaoshuadd_ = new ::std::string;
  }
  miaoshuadd_->assign(value);
}
inline void operatejiangli::set_miaoshuadd(const char* value) {
  set_has_miaoshuadd();
  if (miaoshuadd_ == &::google::protobuf::internal::kEmptyString) {
    miaoshuadd_ = new ::std::string;
  }
  miaoshuadd_->assign(value);
}
inline void operatejiangli::set_miaoshuadd(const char* value, size_t size) {
  set_has_miaoshuadd();
  if (miaoshuadd_ == &::google::protobuf::internal::kEmptyString) {
    miaoshuadd_ = new ::std::string;
  }
  miaoshuadd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operatejiangli::mutable_miaoshuadd() {
  set_has_miaoshuadd();
  if (miaoshuadd_ == &::google::protobuf::internal::kEmptyString) {
    miaoshuadd_ = new ::std::string;
  }
  return miaoshuadd_;
}
inline ::std::string* operatejiangli::release_miaoshuadd() {
  clear_has_miaoshuadd();
  if (miaoshuadd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = miaoshuadd_;
    miaoshuadd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operatejiangli::set_allocated_miaoshuadd(::std::string* miaoshuadd) {
  if (miaoshuadd_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshuadd_;
  }
  if (miaoshuadd) {
    set_has_miaoshuadd();
    miaoshuadd_ = miaoshuadd;
  } else {
    clear_has_miaoshuadd();
    miaoshuadd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tiaoJian = 7;
inline bool operatejiangli::has_tiaojian() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void operatejiangli::set_has_tiaojian() {
  _has_bits_[0] |= 0x00000040u;
}
inline void operatejiangli::clear_has_tiaojian() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void operatejiangli::clear_tiaojian() {
  if (tiaojian_ != &::google::protobuf::internal::kEmptyString) {
    tiaojian_->clear();
  }
  clear_has_tiaojian();
}
inline const ::std::string& operatejiangli::tiaojian() const {
  return *tiaojian_;
}
inline void operatejiangli::set_tiaojian(const ::std::string& value) {
  set_has_tiaojian();
  if (tiaojian_ == &::google::protobuf::internal::kEmptyString) {
    tiaojian_ = new ::std::string;
  }
  tiaojian_->assign(value);
}
inline void operatejiangli::set_tiaojian(const char* value) {
  set_has_tiaojian();
  if (tiaojian_ == &::google::protobuf::internal::kEmptyString) {
    tiaojian_ = new ::std::string;
  }
  tiaojian_->assign(value);
}
inline void operatejiangli::set_tiaojian(const char* value, size_t size) {
  set_has_tiaojian();
  if (tiaojian_ == &::google::protobuf::internal::kEmptyString) {
    tiaojian_ = new ::std::string;
  }
  tiaojian_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operatejiangli::mutable_tiaojian() {
  set_has_tiaojian();
  if (tiaojian_ == &::google::protobuf::internal::kEmptyString) {
    tiaojian_ = new ::std::string;
  }
  return tiaojian_;
}
inline ::std::string* operatejiangli::release_tiaojian() {
  clear_has_tiaojian();
  if (tiaojian_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tiaojian_;
    tiaojian_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operatejiangli::set_allocated_tiaojian(::std::string* tiaojian) {
  if (tiaojian_ != &::google::protobuf::internal::kEmptyString) {
    delete tiaojian_;
  }
  if (tiaojian) {
    set_has_tiaojian();
    tiaojian_ = tiaojian;
  } else {
    clear_has_tiaojian();
    tiaojian_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 boxId = 8;
inline bool operatejiangli::has_boxid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void operatejiangli::set_has_boxid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void operatejiangli::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void operatejiangli::clear_boxid() {
  boxid_ = GOOGLE_LONGLONG(0);
  clear_has_boxid();
}
inline ::google::protobuf::int64 operatejiangli::boxid() const {
  return boxid_;
}
inline void operatejiangli::set_boxid(::google::protobuf::int64 value) {
  set_has_boxid();
  boxid_ = value;
}

// optional int64 sdboxid = 9;
inline bool operatejiangli::has_sdboxid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void operatejiangli::set_has_sdboxid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void operatejiangli::clear_has_sdboxid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void operatejiangli::clear_sdboxid() {
  sdboxid_ = GOOGLE_LONGLONG(0);
  clear_has_sdboxid();
}
inline ::google::protobuf::int64 operatejiangli::sdboxid() const {
  return sdboxid_;
}
inline void operatejiangli::set_sdboxid(::google::protobuf::int64 value) {
  set_has_sdboxid();
  sdboxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_operatejiangli

// repeated .proto_ff.operatejiangli operatejiangli_List = 1;
inline int Sheet_operatejiangli::operatejiangli_list_size() const {
  return operatejiangli_list_.size();
}
inline void Sheet_operatejiangli::clear_operatejiangli_list() {
  operatejiangli_list_.Clear();
}
inline const ::proto_ff::operatejiangli& Sheet_operatejiangli::operatejiangli_list(int index) const {
  return operatejiangli_list_.Get(index);
}
inline ::proto_ff::operatejiangli* Sheet_operatejiangli::mutable_operatejiangli_list(int index) {
  return operatejiangli_list_.Mutable(index);
}
inline ::proto_ff::operatejiangli* Sheet_operatejiangli::add_operatejiangli_list() {
  return operatejiangli_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatejiangli >&
Sheet_operatejiangli::operatejiangli_list() const {
  return operatejiangli_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatejiangli >*
Sheet_operatejiangli::mutable_operatejiangli_list() {
  return &operatejiangli_list_;
}

// -------------------------------------------------------------------

// operatehoroscope

// optional int32 id = 1;
inline bool operatehoroscope::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operatehoroscope::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operatehoroscope::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operatehoroscope::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 operatehoroscope::id() const {
  return id_;
}
inline void operatehoroscope::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 daojuId = 2;
inline bool operatehoroscope::has_daojuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operatehoroscope::set_has_daojuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operatehoroscope::clear_has_daojuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operatehoroscope::clear_daojuid() {
  daojuid_ = GOOGLE_LONGLONG(0);
  clear_has_daojuid();
}
inline ::google::protobuf::int64 operatehoroscope::daojuid() const {
  return daojuid_;
}
inline void operatehoroscope::set_daojuid(::google::protobuf::int64 value) {
  set_has_daojuid();
  daojuid_ = value;
}

// optional int32 daojuPrice = 3;
inline bool operatehoroscope::has_daojuprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operatehoroscope::set_has_daojuprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operatehoroscope::clear_has_daojuprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operatehoroscope::clear_daojuprice() {
  daojuprice_ = 0;
  clear_has_daojuprice();
}
inline ::google::protobuf::int32 operatehoroscope::daojuprice() const {
  return daojuprice_;
}
inline void operatehoroscope::set_daojuprice(::google::protobuf::int32 value) {
  set_has_daojuprice();
  daojuprice_ = value;
}

// optional int32 cycle = 4;
inline bool operatehoroscope::has_cycle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void operatehoroscope::set_has_cycle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void operatehoroscope::clear_has_cycle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void operatehoroscope::clear_cycle() {
  cycle_ = 0;
  clear_has_cycle();
}
inline ::google::protobuf::int32 operatehoroscope::cycle() const {
  return cycle_;
}
inline void operatehoroscope::set_cycle(::google::protobuf::int32 value) {
  set_has_cycle();
  cycle_ = value;
}

// optional string poolid = 5;
inline bool operatehoroscope::has_poolid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void operatehoroscope::set_has_poolid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void operatehoroscope::clear_has_poolid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void operatehoroscope::clear_poolid() {
  if (poolid_ != &::google::protobuf::internal::kEmptyString) {
    poolid_->clear();
  }
  clear_has_poolid();
}
inline const ::std::string& operatehoroscope::poolid() const {
  return *poolid_;
}
inline void operatehoroscope::set_poolid(const ::std::string& value) {
  set_has_poolid();
  if (poolid_ == &::google::protobuf::internal::kEmptyString) {
    poolid_ = new ::std::string;
  }
  poolid_->assign(value);
}
inline void operatehoroscope::set_poolid(const char* value) {
  set_has_poolid();
  if (poolid_ == &::google::protobuf::internal::kEmptyString) {
    poolid_ = new ::std::string;
  }
  poolid_->assign(value);
}
inline void operatehoroscope::set_poolid(const char* value, size_t size) {
  set_has_poolid();
  if (poolid_ == &::google::protobuf::internal::kEmptyString) {
    poolid_ = new ::std::string;
  }
  poolid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operatehoroscope::mutable_poolid() {
  set_has_poolid();
  if (poolid_ == &::google::protobuf::internal::kEmptyString) {
    poolid_ = new ::std::string;
  }
  return poolid_;
}
inline ::std::string* operatehoroscope::release_poolid() {
  clear_has_poolid();
  if (poolid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = poolid_;
    poolid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operatehoroscope::set_allocated_poolid(::std::string* poolid) {
  if (poolid_ != &::google::protobuf::internal::kEmptyString) {
    delete poolid_;
  }
  if (poolid) {
    set_has_poolid();
    poolid_ = poolid;
  } else {
    clear_has_poolid();
    poolid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 wheelTime = 6;
inline bool operatehoroscope::has_wheeltime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void operatehoroscope::set_has_wheeltime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void operatehoroscope::clear_has_wheeltime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void operatehoroscope::clear_wheeltime() {
  wheeltime_ = 0;
  clear_has_wheeltime();
}
inline ::google::protobuf::int32 operatehoroscope::wheeltime() const {
  return wheeltime_;
}
inline void operatehoroscope::set_wheeltime(::google::protobuf::int32 value) {
  set_has_wheeltime();
  wheeltime_ = value;
}

// optional string ExchangeGroupID = 7;
inline bool operatehoroscope::has_exchangegroupid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void operatehoroscope::set_has_exchangegroupid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void operatehoroscope::clear_has_exchangegroupid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void operatehoroscope::clear_exchangegroupid() {
  if (exchangegroupid_ != &::google::protobuf::internal::kEmptyString) {
    exchangegroupid_->clear();
  }
  clear_has_exchangegroupid();
}
inline const ::std::string& operatehoroscope::exchangegroupid() const {
  return *exchangegroupid_;
}
inline void operatehoroscope::set_exchangegroupid(const ::std::string& value) {
  set_has_exchangegroupid();
  if (exchangegroupid_ == &::google::protobuf::internal::kEmptyString) {
    exchangegroupid_ = new ::std::string;
  }
  exchangegroupid_->assign(value);
}
inline void operatehoroscope::set_exchangegroupid(const char* value) {
  set_has_exchangegroupid();
  if (exchangegroupid_ == &::google::protobuf::internal::kEmptyString) {
    exchangegroupid_ = new ::std::string;
  }
  exchangegroupid_->assign(value);
}
inline void operatehoroscope::set_exchangegroupid(const char* value, size_t size) {
  set_has_exchangegroupid();
  if (exchangegroupid_ == &::google::protobuf::internal::kEmptyString) {
    exchangegroupid_ = new ::std::string;
  }
  exchangegroupid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operatehoroscope::mutable_exchangegroupid() {
  set_has_exchangegroupid();
  if (exchangegroupid_ == &::google::protobuf::internal::kEmptyString) {
    exchangegroupid_ = new ::std::string;
  }
  return exchangegroupid_;
}
inline ::std::string* operatehoroscope::release_exchangegroupid() {
  clear_has_exchangegroupid();
  if (exchangegroupid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exchangegroupid_;
    exchangegroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operatehoroscope::set_allocated_exchangegroupid(::std::string* exchangegroupid) {
  if (exchangegroupid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangegroupid_;
  }
  if (exchangegroupid) {
    set_has_exchangegroupid();
    exchangegroupid_ = exchangegroupid;
  } else {
    clear_has_exchangegroupid();
    exchangegroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string boxid = 8;
inline bool operatehoroscope::has_boxid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void operatehoroscope::set_has_boxid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void operatehoroscope::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void operatehoroscope::clear_boxid() {
  if (boxid_ != &::google::protobuf::internal::kEmptyString) {
    boxid_->clear();
  }
  clear_has_boxid();
}
inline const ::std::string& operatehoroscope::boxid() const {
  return *boxid_;
}
inline void operatehoroscope::set_boxid(const ::std::string& value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::kEmptyString) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
}
inline void operatehoroscope::set_boxid(const char* value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::kEmptyString) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
}
inline void operatehoroscope::set_boxid(const char* value, size_t size) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::kEmptyString) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operatehoroscope::mutable_boxid() {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::kEmptyString) {
    boxid_ = new ::std::string;
  }
  return boxid_;
}
inline ::std::string* operatehoroscope::release_boxid() {
  clear_has_boxid();
  if (boxid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = boxid_;
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operatehoroscope::set_allocated_boxid(::std::string* boxid) {
  if (boxid_ != &::google::protobuf::internal::kEmptyString) {
    delete boxid_;
  }
  if (boxid) {
    set_has_boxid();
    boxid_ = boxid;
  } else {
    clear_has_boxid();
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 luckid = 9;
inline bool operatehoroscope::has_luckid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void operatehoroscope::set_has_luckid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void operatehoroscope::clear_has_luckid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void operatehoroscope::clear_luckid() {
  luckid_ = GOOGLE_LONGLONG(0);
  clear_has_luckid();
}
inline ::google::protobuf::int64 operatehoroscope::luckid() const {
  return luckid_;
}
inline void operatehoroscope::set_luckid(::google::protobuf::int64 value) {
  set_has_luckid();
  luckid_ = value;
}

// optional string fateid = 10;
inline bool operatehoroscope::has_fateid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void operatehoroscope::set_has_fateid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void operatehoroscope::clear_has_fateid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void operatehoroscope::clear_fateid() {
  if (fateid_ != &::google::protobuf::internal::kEmptyString) {
    fateid_->clear();
  }
  clear_has_fateid();
}
inline const ::std::string& operatehoroscope::fateid() const {
  return *fateid_;
}
inline void operatehoroscope::set_fateid(const ::std::string& value) {
  set_has_fateid();
  if (fateid_ == &::google::protobuf::internal::kEmptyString) {
    fateid_ = new ::std::string;
  }
  fateid_->assign(value);
}
inline void operatehoroscope::set_fateid(const char* value) {
  set_has_fateid();
  if (fateid_ == &::google::protobuf::internal::kEmptyString) {
    fateid_ = new ::std::string;
  }
  fateid_->assign(value);
}
inline void operatehoroscope::set_fateid(const char* value, size_t size) {
  set_has_fateid();
  if (fateid_ == &::google::protobuf::internal::kEmptyString) {
    fateid_ = new ::std::string;
  }
  fateid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operatehoroscope::mutable_fateid() {
  set_has_fateid();
  if (fateid_ == &::google::protobuf::internal::kEmptyString) {
    fateid_ = new ::std::string;
  }
  return fateid_;
}
inline ::std::string* operatehoroscope::release_fateid() {
  clear_has_fateid();
  if (fateid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fateid_;
    fateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operatehoroscope::set_allocated_fateid(::std::string* fateid) {
  if (fateid_ != &::google::protobuf::internal::kEmptyString) {
    delete fateid_;
  }
  if (fateid) {
    set_has_fateid();
    fateid_ = fateid;
  } else {
    clear_has_fateid();
    fateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string felicityid = 11;
inline bool operatehoroscope::has_felicityid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void operatehoroscope::set_has_felicityid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void operatehoroscope::clear_has_felicityid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void operatehoroscope::clear_felicityid() {
  if (felicityid_ != &::google::protobuf::internal::kEmptyString) {
    felicityid_->clear();
  }
  clear_has_felicityid();
}
inline const ::std::string& operatehoroscope::felicityid() const {
  return *felicityid_;
}
inline void operatehoroscope::set_felicityid(const ::std::string& value) {
  set_has_felicityid();
  if (felicityid_ == &::google::protobuf::internal::kEmptyString) {
    felicityid_ = new ::std::string;
  }
  felicityid_->assign(value);
}
inline void operatehoroscope::set_felicityid(const char* value) {
  set_has_felicityid();
  if (felicityid_ == &::google::protobuf::internal::kEmptyString) {
    felicityid_ = new ::std::string;
  }
  felicityid_->assign(value);
}
inline void operatehoroscope::set_felicityid(const char* value, size_t size) {
  set_has_felicityid();
  if (felicityid_ == &::google::protobuf::internal::kEmptyString) {
    felicityid_ = new ::std::string;
  }
  felicityid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operatehoroscope::mutable_felicityid() {
  set_has_felicityid();
  if (felicityid_ == &::google::protobuf::internal::kEmptyString) {
    felicityid_ = new ::std::string;
  }
  return felicityid_;
}
inline ::std::string* operatehoroscope::release_felicityid() {
  clear_has_felicityid();
  if (felicityid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = felicityid_;
    felicityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operatehoroscope::set_allocated_felicityid(::std::string* felicityid) {
  if (felicityid_ != &::google::protobuf::internal::kEmptyString) {
    delete felicityid_;
  }
  if (felicityid) {
    set_has_felicityid();
    felicityid_ = felicityid;
  } else {
    clear_has_felicityid();
    felicityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_operatehoroscope

// repeated .proto_ff.operatehoroscope operatehoroscope_List = 1;
inline int Sheet_operatehoroscope::operatehoroscope_list_size() const {
  return operatehoroscope_list_.size();
}
inline void Sheet_operatehoroscope::clear_operatehoroscope_list() {
  operatehoroscope_list_.Clear();
}
inline const ::proto_ff::operatehoroscope& Sheet_operatehoroscope::operatehoroscope_list(int index) const {
  return operatehoroscope_list_.Get(index);
}
inline ::proto_ff::operatehoroscope* Sheet_operatehoroscope::mutable_operatehoroscope_list(int index) {
  return operatehoroscope_list_.Mutable(index);
}
inline ::proto_ff::operatehoroscope* Sheet_operatehoroscope::add_operatehoroscope_list() {
  return operatehoroscope_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscope >&
Sheet_operatehoroscope::operatehoroscope_list() const {
  return operatehoroscope_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscope >*
Sheet_operatehoroscope::mutable_operatehoroscope_list() {
  return &operatehoroscope_list_;
}

// -------------------------------------------------------------------

// operatehoroscopePool

// optional int32 id = 1;
inline bool operatehoroscopePool::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operatehoroscopePool::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operatehoroscopePool::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operatehoroscopePool::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 operatehoroscopePool::id() const {
  return id_;
}
inline void operatehoroscopePool::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 itemid = 2;
inline bool operatehoroscopePool::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operatehoroscopePool::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operatehoroscopePool::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operatehoroscopePool::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 operatehoroscopePool::itemid() const {
  return itemid_;
}
inline void operatehoroscopePool::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 num = 3;
inline bool operatehoroscopePool::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operatehoroscopePool::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operatehoroscopePool::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operatehoroscopePool::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 operatehoroscopePool::num() const {
  return num_;
}
inline void operatehoroscopePool::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 prof = 4;
inline bool operatehoroscopePool::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void operatehoroscopePool::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void operatehoroscopePool::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void operatehoroscopePool::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 operatehoroscopePool::prof() const {
  return prof_;
}
inline void operatehoroscopePool::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 levelLimitA = 5;
inline bool operatehoroscopePool::has_levellimita() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void operatehoroscopePool::set_has_levellimita() {
  _has_bits_[0] |= 0x00000010u;
}
inline void operatehoroscopePool::clear_has_levellimita() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void operatehoroscopePool::clear_levellimita() {
  levellimita_ = 0;
  clear_has_levellimita();
}
inline ::google::protobuf::int32 operatehoroscopePool::levellimita() const {
  return levellimita_;
}
inline void operatehoroscopePool::set_levellimita(::google::protobuf::int32 value) {
  set_has_levellimita();
  levellimita_ = value;
}

// optional int32 levelLimitB = 6;
inline bool operatehoroscopePool::has_levellimitb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void operatehoroscopePool::set_has_levellimitb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void operatehoroscopePool::clear_has_levellimitb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void operatehoroscopePool::clear_levellimitb() {
  levellimitb_ = 0;
  clear_has_levellimitb();
}
inline ::google::protobuf::int32 operatehoroscopePool::levellimitb() const {
  return levellimitb_;
}
inline void operatehoroscopePool::set_levellimitb(::google::protobuf::int32 value) {
  set_has_levellimitb();
  levellimitb_ = value;
}

// optional int32 type = 7;
inline bool operatehoroscopePool::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void operatehoroscopePool::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void operatehoroscopePool::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void operatehoroscopePool::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 operatehoroscopePool::type() const {
  return type_;
}
inline void operatehoroscopePool::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 typeParma = 8;
inline bool operatehoroscopePool::has_typeparma() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void operatehoroscopePool::set_has_typeparma() {
  _has_bits_[0] |= 0x00000080u;
}
inline void operatehoroscopePool::clear_has_typeparma() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void operatehoroscopePool::clear_typeparma() {
  typeparma_ = 0;
  clear_has_typeparma();
}
inline ::google::protobuf::int32 operatehoroscopePool::typeparma() const {
  return typeparma_;
}
inline void operatehoroscopePool::set_typeparma(::google::protobuf::int32 value) {
  set_has_typeparma();
  typeparma_ = value;
}

// optional int32 probability = 9;
inline bool operatehoroscopePool::has_probability() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void operatehoroscopePool::set_has_probability() {
  _has_bits_[0] |= 0x00000100u;
}
inline void operatehoroscopePool::clear_has_probability() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void operatehoroscopePool::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline ::google::protobuf::int32 operatehoroscopePool::probability() const {
  return probability_;
}
inline void operatehoroscopePool::set_probability(::google::protobuf::int32 value) {
  set_has_probability();
  probability_ = value;
}

// optional int64 groupID = 10;
inline bool operatehoroscopePool::has_groupid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void operatehoroscopePool::set_has_groupid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void operatehoroscopePool::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void operatehoroscopePool::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::int64 operatehoroscopePool::groupid() const {
  return groupid_;
}
inline void operatehoroscopePool::set_groupid(::google::protobuf::int64 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional int32 order = 11;
inline bool operatehoroscopePool::has_order() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void operatehoroscopePool::set_has_order() {
  _has_bits_[0] |= 0x00000400u;
}
inline void operatehoroscopePool::clear_has_order() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void operatehoroscopePool::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 operatehoroscopePool::order() const {
  return order_;
}
inline void operatehoroscopePool::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
}

// -------------------------------------------------------------------

// Sheet_operatehoroscopePool

// repeated .proto_ff.operatehoroscopePool operatehoroscopePool_List = 1;
inline int Sheet_operatehoroscopePool::operatehoroscopepool_list_size() const {
  return operatehoroscopepool_list_.size();
}
inline void Sheet_operatehoroscopePool::clear_operatehoroscopepool_list() {
  operatehoroscopepool_list_.Clear();
}
inline const ::proto_ff::operatehoroscopePool& Sheet_operatehoroscopePool::operatehoroscopepool_list(int index) const {
  return operatehoroscopepool_list_.Get(index);
}
inline ::proto_ff::operatehoroscopePool* Sheet_operatehoroscopePool::mutable_operatehoroscopepool_list(int index) {
  return operatehoroscopepool_list_.Mutable(index);
}
inline ::proto_ff::operatehoroscopePool* Sheet_operatehoroscopePool::add_operatehoroscopepool_list() {
  return operatehoroscopepool_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscopePool >&
Sheet_operatehoroscopePool::operatehoroscopepool_list() const {
  return operatehoroscopepool_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscopePool >*
Sheet_operatehoroscopePool::mutable_operatehoroscopepool_list() {
  return &operatehoroscopepool_list_;
}

// -------------------------------------------------------------------

// operatehoroscopeExchange

// optional int32 ID = 1;
inline bool operatehoroscopeExchange::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operatehoroscopeExchange::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operatehoroscopeExchange::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operatehoroscopeExchange::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 operatehoroscopeExchange::id() const {
  return id_;
}
inline void operatehoroscopeExchange::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 horoscopeId = 2;
inline bool operatehoroscopeExchange::has_horoscopeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operatehoroscopeExchange::set_has_horoscopeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operatehoroscopeExchange::clear_has_horoscopeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operatehoroscopeExchange::clear_horoscopeid() {
  horoscopeid_ = 0;
  clear_has_horoscopeid();
}
inline ::google::protobuf::int32 operatehoroscopeExchange::horoscopeid() const {
  return horoscopeid_;
}
inline void operatehoroscopeExchange::set_horoscopeid(::google::protobuf::int32 value) {
  set_has_horoscopeid();
  horoscopeid_ = value;
}

// optional int64 prizeId = 3;
inline bool operatehoroscopeExchange::has_prizeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operatehoroscopeExchange::set_has_prizeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operatehoroscopeExchange::clear_has_prizeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operatehoroscopeExchange::clear_prizeid() {
  prizeid_ = GOOGLE_LONGLONG(0);
  clear_has_prizeid();
}
inline ::google::protobuf::int64 operatehoroscopeExchange::prizeid() const {
  return prizeid_;
}
inline void operatehoroscopeExchange::set_prizeid(::google::protobuf::int64 value) {
  set_has_prizeid();
  prizeid_ = value;
}

// optional int32 prof = 4;
inline bool operatehoroscopeExchange::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void operatehoroscopeExchange::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void operatehoroscopeExchange::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void operatehoroscopeExchange::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 operatehoroscopeExchange::prof() const {
  return prof_;
}
inline void operatehoroscopeExchange::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 prizeNum = 5;
inline bool operatehoroscopeExchange::has_prizenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void operatehoroscopeExchange::set_has_prizenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void operatehoroscopeExchange::clear_has_prizenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void operatehoroscopeExchange::clear_prizenum() {
  prizenum_ = 0;
  clear_has_prizenum();
}
inline ::google::protobuf::int32 operatehoroscopeExchange::prizenum() const {
  return prizenum_;
}
inline void operatehoroscopeExchange::set_prizenum(::google::protobuf::int32 value) {
  set_has_prizenum();
  prizenum_ = value;
}

// optional int32 luckNeed = 6;
inline bool operatehoroscopeExchange::has_luckneed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void operatehoroscopeExchange::set_has_luckneed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void operatehoroscopeExchange::clear_has_luckneed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void operatehoroscopeExchange::clear_luckneed() {
  luckneed_ = 0;
  clear_has_luckneed();
}
inline ::google::protobuf::int32 operatehoroscopeExchange::luckneed() const {
  return luckneed_;
}
inline void operatehoroscopeExchange::set_luckneed(::google::protobuf::int32 value) {
  set_has_luckneed();
  luckneed_ = value;
}

// optional int32 times = 7;
inline bool operatehoroscopeExchange::has_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void operatehoroscopeExchange::set_has_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void operatehoroscopeExchange::clear_has_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void operatehoroscopeExchange::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 operatehoroscopeExchange::times() const {
  return times_;
}
inline void operatehoroscopeExchange::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// Sheet_operatehoroscopeExchange

// repeated .proto_ff.operatehoroscopeExchange operatehoroscopeExchange_List = 1;
inline int Sheet_operatehoroscopeExchange::operatehoroscopeexchange_list_size() const {
  return operatehoroscopeexchange_list_.size();
}
inline void Sheet_operatehoroscopeExchange::clear_operatehoroscopeexchange_list() {
  operatehoroscopeexchange_list_.Clear();
}
inline const ::proto_ff::operatehoroscopeExchange& Sheet_operatehoroscopeExchange::operatehoroscopeexchange_list(int index) const {
  return operatehoroscopeexchange_list_.Get(index);
}
inline ::proto_ff::operatehoroscopeExchange* Sheet_operatehoroscopeExchange::mutable_operatehoroscopeexchange_list(int index) {
  return operatehoroscopeexchange_list_.Mutable(index);
}
inline ::proto_ff::operatehoroscopeExchange* Sheet_operatehoroscopeExchange::add_operatehoroscopeexchange_list() {
  return operatehoroscopeexchange_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscopeExchange >&
Sheet_operatehoroscopeExchange::operatehoroscopeexchange_list() const {
  return operatehoroscopeexchange_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatehoroscopeExchange >*
Sheet_operatehoroscopeExchange::mutable_operatehoroscopeexchange_list() {
  return &operatehoroscopeexchange_list_;
}

// -------------------------------------------------------------------

// operateconst

// optional int64 constantid = 1;
inline bool operateconst::has_constantid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operateconst::set_has_constantid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operateconst::clear_has_constantid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operateconst::clear_constantid() {
  constantid_ = GOOGLE_LONGLONG(0);
  clear_has_constantid();
}
inline ::google::protobuf::int64 operateconst::constantid() const {
  return constantid_;
}
inline void operateconst::set_constantid(::google::protobuf::int64 value) {
  set_has_constantid();
  constantid_ = value;
}

// optional int64 constantdata = 2;
inline bool operateconst::has_constantdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operateconst::set_has_constantdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operateconst::clear_has_constantdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operateconst::clear_constantdata() {
  constantdata_ = GOOGLE_LONGLONG(0);
  clear_has_constantdata();
}
inline ::google::protobuf::int64 operateconst::constantdata() const {
  return constantdata_;
}
inline void operateconst::set_constantdata(::google::protobuf::int64 value) {
  set_has_constantdata();
  constantdata_ = value;
}

// optional string stringdata = 3;
inline bool operateconst::has_stringdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operateconst::set_has_stringdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operateconst::clear_has_stringdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operateconst::clear_stringdata() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    stringdata_->clear();
  }
  clear_has_stringdata();
}
inline const ::std::string& operateconst::stringdata() const {
  return *stringdata_;
}
inline void operateconst::set_stringdata(const ::std::string& value) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(value);
}
inline void operateconst::set_stringdata(const char* value) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(value);
}
inline void operateconst::set_stringdata(const char* value, size_t size) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operateconst::mutable_stringdata() {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  return stringdata_;
}
inline ::std::string* operateconst::release_stringdata() {
  clear_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stringdata_;
    stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operateconst::set_allocated_stringdata(::std::string* stringdata) {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (stringdata) {
    set_has_stringdata();
    stringdata_ = stringdata;
  } else {
    clear_has_stringdata();
    stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_operateconst

// repeated .proto_ff.operateconst operateconst_List = 1;
inline int Sheet_operateconst::operateconst_list_size() const {
  return operateconst_list_.size();
}
inline void Sheet_operateconst::clear_operateconst_list() {
  operateconst_list_.Clear();
}
inline const ::proto_ff::operateconst& Sheet_operateconst::operateconst_list(int index) const {
  return operateconst_list_.Get(index);
}
inline ::proto_ff::operateconst* Sheet_operateconst::mutable_operateconst_list(int index) {
  return operateconst_list_.Mutable(index);
}
inline ::proto_ff::operateconst* Sheet_operateconst::add_operateconst_list() {
  return operateconst_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operateconst >&
Sheet_operateconst::operateconst_list() const {
  return operateconst_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operateconst >*
Sheet_operateconst::mutable_operateconst_list() {
  return &operateconst_list_;
}

// -------------------------------------------------------------------

// operateunlimited

// optional int32 ID = 1;
inline bool operateunlimited::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operateunlimited::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operateunlimited::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operateunlimited::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 operateunlimited::id() const {
  return id_;
}
inline void operateunlimited::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 price = 2;
inline bool operateunlimited::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operateunlimited::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operateunlimited::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operateunlimited::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 operateunlimited::price() const {
  return price_;
}
inline void operateunlimited::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional string severPrice = 3;
inline bool operateunlimited::has_severprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operateunlimited::set_has_severprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operateunlimited::clear_has_severprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operateunlimited::clear_severprice() {
  if (severprice_ != &::google::protobuf::internal::kEmptyString) {
    severprice_->clear();
  }
  clear_has_severprice();
}
inline const ::std::string& operateunlimited::severprice() const {
  return *severprice_;
}
inline void operateunlimited::set_severprice(const ::std::string& value) {
  set_has_severprice();
  if (severprice_ == &::google::protobuf::internal::kEmptyString) {
    severprice_ = new ::std::string;
  }
  severprice_->assign(value);
}
inline void operateunlimited::set_severprice(const char* value) {
  set_has_severprice();
  if (severprice_ == &::google::protobuf::internal::kEmptyString) {
    severprice_ = new ::std::string;
  }
  severprice_->assign(value);
}
inline void operateunlimited::set_severprice(const char* value, size_t size) {
  set_has_severprice();
  if (severprice_ == &::google::protobuf::internal::kEmptyString) {
    severprice_ = new ::std::string;
  }
  severprice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operateunlimited::mutable_severprice() {
  set_has_severprice();
  if (severprice_ == &::google::protobuf::internal::kEmptyString) {
    severprice_ = new ::std::string;
  }
  return severprice_;
}
inline ::std::string* operateunlimited::release_severprice() {
  clear_has_severprice();
  if (severprice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = severprice_;
    severprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operateunlimited::set_allocated_severprice(::std::string* severprice) {
  if (severprice_ != &::google::protobuf::internal::kEmptyString) {
    delete severprice_;
  }
  if (severprice) {
    set_has_severprice();
    severprice_ = severprice;
  } else {
    clear_has_severprice();
    severprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 itemId = 4;
inline bool operateunlimited::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void operateunlimited::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void operateunlimited::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void operateunlimited::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 operateunlimited::itemid() const {
  return itemid_;
}
inline void operateunlimited::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int64 num = 5;
inline bool operateunlimited::has_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void operateunlimited::set_has_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void operateunlimited::clear_has_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void operateunlimited::clear_num() {
  num_ = GOOGLE_LONGLONG(0);
  clear_has_num();
}
inline ::google::protobuf::int64 operateunlimited::num() const {
  return num_;
}
inline void operateunlimited::set_num(::google::protobuf::int64 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// Sheet_operateunlimited

// repeated .proto_ff.operateunlimited operateunlimited_List = 1;
inline int Sheet_operateunlimited::operateunlimited_list_size() const {
  return operateunlimited_list_.size();
}
inline void Sheet_operateunlimited::clear_operateunlimited_list() {
  operateunlimited_list_.Clear();
}
inline const ::proto_ff::operateunlimited& Sheet_operateunlimited::operateunlimited_list(int index) const {
  return operateunlimited_list_.Get(index);
}
inline ::proto_ff::operateunlimited* Sheet_operateunlimited::mutable_operateunlimited_list(int index) {
  return operateunlimited_list_.Mutable(index);
}
inline ::proto_ff::operateunlimited* Sheet_operateunlimited::add_operateunlimited_list() {
  return operateunlimited_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operateunlimited >&
Sheet_operateunlimited::operateunlimited_list() const {
  return operateunlimited_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operateunlimited >*
Sheet_operateunlimited::mutable_operateunlimited_list() {
  return &operateunlimited_list_;
}

// -------------------------------------------------------------------

// operaterand

// optional int32 id = 1;
inline bool operaterand::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operaterand::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operaterand::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operaterand::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 operaterand::id() const {
  return id_;
}
inline void operaterand::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 randtype = 2;
inline bool operaterand::has_randtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operaterand::set_has_randtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operaterand::clear_has_randtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operaterand::clear_randtype() {
  randtype_ = 0;
  clear_has_randtype();
}
inline ::google::protobuf::int32 operaterand::randtype() const {
  return randtype_;
}
inline void operaterand::set_randtype(::google::protobuf::int32 value) {
  set_has_randtype();
  randtype_ = value;
}

// optional int64 boxid = 3;
inline bool operaterand::has_boxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operaterand::set_has_boxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operaterand::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operaterand::clear_boxid() {
  boxid_ = GOOGLE_LONGLONG(0);
  clear_has_boxid();
}
inline ::google::protobuf::int64 operaterand::boxid() const {
  return boxid_;
}
inline void operaterand::set_boxid(::google::protobuf::int64 value) {
  set_has_boxid();
  boxid_ = value;
}

// repeated string canshu = 4;
inline int operaterand::canshu_size() const {
  return canshu_.size();
}
inline void operaterand::clear_canshu() {
  canshu_.Clear();
}
inline const ::std::string& operaterand::canshu(int index) const {
  return canshu_.Get(index);
}
inline ::std::string* operaterand::mutable_canshu(int index) {
  return canshu_.Mutable(index);
}
inline void operaterand::set_canshu(int index, const ::std::string& value) {
  canshu_.Mutable(index)->assign(value);
}
inline void operaterand::set_canshu(int index, const char* value) {
  canshu_.Mutable(index)->assign(value);
}
inline void operaterand::set_canshu(int index, const char* value, size_t size) {
  canshu_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operaterand::add_canshu() {
  return canshu_.Add();
}
inline void operaterand::add_canshu(const ::std::string& value) {
  canshu_.Add()->assign(value);
}
inline void operaterand::add_canshu(const char* value) {
  canshu_.Add()->assign(value);
}
inline void operaterand::add_canshu(const char* value, size_t size) {
  canshu_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
operaterand::canshu() const {
  return canshu_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
operaterand::mutable_canshu() {
  return &canshu_;
}

// -------------------------------------------------------------------

// Sheet_operaterand

// repeated .proto_ff.operaterand operaterand_List = 1;
inline int Sheet_operaterand::operaterand_list_size() const {
  return operaterand_list_.size();
}
inline void Sheet_operaterand::clear_operaterand_list() {
  operaterand_list_.Clear();
}
inline const ::proto_ff::operaterand& Sheet_operaterand::operaterand_list(int index) const {
  return operaterand_list_.Get(index);
}
inline ::proto_ff::operaterand* Sheet_operaterand::mutable_operaterand_list(int index) {
  return operaterand_list_.Mutable(index);
}
inline ::proto_ff::operaterand* Sheet_operaterand::add_operaterand_list() {
  return operaterand_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operaterand >&
Sheet_operaterand::operaterand_list() const {
  return operaterand_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operaterand >*
Sheet_operaterand::mutable_operaterand_list() {
  return &operaterand_list_;
}

// -------------------------------------------------------------------

// operatemooncard

// optional int32 dayNum = 1;
inline bool operatemooncard::has_daynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operatemooncard::set_has_daynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operatemooncard::clear_has_daynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operatemooncard::clear_daynum() {
  daynum_ = 0;
  clear_has_daynum();
}
inline ::google::protobuf::int32 operatemooncard::daynum() const {
  return daynum_;
}
inline void operatemooncard::set_daynum(::google::protobuf::int32 value) {
  set_has_daynum();
  daynum_ = value;
}

// optional int32 payBack = 2;
inline bool operatemooncard::has_payback() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operatemooncard::set_has_payback() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operatemooncard::clear_has_payback() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operatemooncard::clear_payback() {
  payback_ = 0;
  clear_has_payback();
}
inline ::google::protobuf::int32 operatemooncard::payback() const {
  return payback_;
}
inline void operatemooncard::set_payback(::google::protobuf::int32 value) {
  set_has_payback();
  payback_ = value;
}

// -------------------------------------------------------------------

// Sheet_operatemooncard

// repeated .proto_ff.operatemooncard operatemooncard_List = 1;
inline int Sheet_operatemooncard::operatemooncard_list_size() const {
  return operatemooncard_list_.size();
}
inline void Sheet_operatemooncard::clear_operatemooncard_list() {
  operatemooncard_list_.Clear();
}
inline const ::proto_ff::operatemooncard& Sheet_operatemooncard::operatemooncard_list(int index) const {
  return operatemooncard_list_.Get(index);
}
inline ::proto_ff::operatemooncard* Sheet_operatemooncard::mutable_operatemooncard_list(int index) {
  return operatemooncard_list_.Mutable(index);
}
inline ::proto_ff::operatemooncard* Sheet_operatemooncard::add_operatemooncard_list() {
  return operatemooncard_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatemooncard >&
Sheet_operatemooncard::operatemooncard_list() const {
  return operatemooncard_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatemooncard >*
Sheet_operatemooncard::mutable_operatemooncard_list() {
  return &operatemooncard_list_;
}

// -------------------------------------------------------------------

// operatefund

// optional int32 id = 1;
inline bool operatefund::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operatefund::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operatefund::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operatefund::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 operatefund::id() const {
  return id_;
}
inline void operatefund::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 level = 2;
inline bool operatefund::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operatefund::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operatefund::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operatefund::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 operatefund::level() const {
  return level_;
}
inline void operatefund::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 rebateS = 3;
inline bool operatefund::has_rebates() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operatefund::set_has_rebates() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operatefund::clear_has_rebates() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operatefund::clear_rebates() {
  rebates_ = 0;
  clear_has_rebates();
}
inline ::google::protobuf::int32 operatefund::rebates() const {
  return rebates_;
}
inline void operatefund::set_rebates(::google::protobuf::int32 value) {
  set_has_rebates();
  rebates_ = value;
}

// optional int32 rebateL = 4;
inline bool operatefund::has_rebatel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void operatefund::set_has_rebatel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void operatefund::clear_has_rebatel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void operatefund::clear_rebatel() {
  rebatel_ = 0;
  clear_has_rebatel();
}
inline ::google::protobuf::int32 operatefund::rebatel() const {
  return rebatel_;
}
inline void operatefund::set_rebatel(::google::protobuf::int32 value) {
  set_has_rebatel();
  rebatel_ = value;
}

// -------------------------------------------------------------------

// Sheet_operatefund

// repeated .proto_ff.operatefund operatefund_List = 1;
inline int Sheet_operatefund::operatefund_list_size() const {
  return operatefund_list_.size();
}
inline void Sheet_operatefund::clear_operatefund_list() {
  operatefund_list_.Clear();
}
inline const ::proto_ff::operatefund& Sheet_operatefund::operatefund_list(int index) const {
  return operatefund_list_.Get(index);
}
inline ::proto_ff::operatefund* Sheet_operatefund::mutable_operatefund_list(int index) {
  return operatefund_list_.Mutable(index);
}
inline ::proto_ff::operatefund* Sheet_operatefund::add_operatefund_list() {
  return operatefund_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatefund >&
Sheet_operatefund::operatefund_list() const {
  return operatefund_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatefund >*
Sheet_operatefund::mutable_operatefund_list() {
  return &operatefund_list_;
}

// -------------------------------------------------------------------

// operatetask

// optional int32 id = 1;
inline bool operatetask::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operatetask::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operatetask::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operatetask::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 operatetask::id() const {
  return id_;
}
inline void operatetask::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 taskNan = 2;
inline bool operatetask::has_tasknan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operatetask::set_has_tasknan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operatetask::clear_has_tasknan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operatetask::clear_tasknan() {
  tasknan_ = 0;
  clear_has_tasknan();
}
inline ::google::protobuf::int32 operatetask::tasknan() const {
  return tasknan_;
}
inline void operatetask::set_tasknan(::google::protobuf::int32 value) {
  set_has_tasknan();
  tasknan_ = value;
}

// optional int32 taskType = 3;
inline bool operatetask::has_tasktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operatetask::set_has_tasktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operatetask::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operatetask::clear_tasktype() {
  tasktype_ = 0;
  clear_has_tasktype();
}
inline ::google::protobuf::int32 operatetask::tasktype() const {
  return tasktype_;
}
inline void operatetask::set_tasktype(::google::protobuf::int32 value) {
  set_has_tasktype();
  tasktype_ = value;
}

// optional string num = 4;
inline bool operatetask::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void operatetask::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void operatetask::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void operatetask::clear_num() {
  if (num_ != &::google::protobuf::internal::kEmptyString) {
    num_->clear();
  }
  clear_has_num();
}
inline const ::std::string& operatetask::num() const {
  return *num_;
}
inline void operatetask::set_num(const ::std::string& value) {
  set_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    num_ = new ::std::string;
  }
  num_->assign(value);
}
inline void operatetask::set_num(const char* value) {
  set_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    num_ = new ::std::string;
  }
  num_->assign(value);
}
inline void operatetask::set_num(const char* value, size_t size) {
  set_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    num_ = new ::std::string;
  }
  num_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* operatetask::mutable_num() {
  set_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    num_ = new ::std::string;
  }
  return num_;
}
inline ::std::string* operatetask::release_num() {
  clear_has_num();
  if (num_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = num_;
    num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void operatetask::set_allocated_num(::std::string* num) {
  if (num_ != &::google::protobuf::internal::kEmptyString) {
    delete num_;
  }
  if (num) {
    set_has_num();
    num_ = num;
  } else {
    clear_has_num();
    num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_operatetask

// repeated .proto_ff.operatetask operatetask_List = 1;
inline int Sheet_operatetask::operatetask_list_size() const {
  return operatetask_list_.size();
}
inline void Sheet_operatetask::clear_operatetask_list() {
  operatetask_list_.Clear();
}
inline const ::proto_ff::operatetask& Sheet_operatetask::operatetask_list(int index) const {
  return operatetask_list_.Get(index);
}
inline ::proto_ff::operatetask* Sheet_operatetask::mutable_operatetask_list(int index) {
  return operatetask_list_.Mutable(index);
}
inline ::proto_ff::operatetask* Sheet_operatetask::add_operatetask_list() {
  return operatetask_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatetask >&
Sheet_operatetask::operatetask_list() const {
  return operatetask_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatetask >*
Sheet_operatetask::mutable_operatetask_list() {
  return &operatetask_list_;
}

// -------------------------------------------------------------------

// operateshop

// optional int32 id = 1;
inline bool operateshop::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operateshop::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operateshop::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operateshop::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 operateshop::id() const {
  return id_;
}
inline void operateshop::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 itemid = 2;
inline bool operateshop::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operateshop::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operateshop::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operateshop::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 operateshop::itemid() const {
  return itemid_;
}
inline void operateshop::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 price = 3;
inline bool operateshop::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operateshop::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operateshop::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operateshop::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 operateshop::price() const {
  return price_;
}
inline void operateshop::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional int32 dPrice = 4;
inline bool operateshop::has_dprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void operateshop::set_has_dprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void operateshop::clear_has_dprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void operateshop::clear_dprice() {
  dprice_ = 0;
  clear_has_dprice();
}
inline ::google::protobuf::int32 operateshop::dprice() const {
  return dprice_;
}
inline void operateshop::set_dprice(::google::protobuf::int32 value) {
  set_has_dprice();
  dprice_ = value;
}

// optional int32 moneyType = 5;
inline bool operateshop::has_moneytype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void operateshop::set_has_moneytype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void operateshop::clear_has_moneytype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void operateshop::clear_moneytype() {
  moneytype_ = 0;
  clear_has_moneytype();
}
inline ::google::protobuf::int32 operateshop::moneytype() const {
  return moneytype_;
}
inline void operateshop::set_moneytype(::google::protobuf::int32 value) {
  set_has_moneytype();
  moneytype_ = value;
}

// optional int32 times = 6;
inline bool operateshop::has_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void operateshop::set_has_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void operateshop::clear_has_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void operateshop::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 operateshop::times() const {
  return times_;
}
inline void operateshop::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// optional int32 timeLimit = 7;
inline bool operateshop::has_timelimit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void operateshop::set_has_timelimit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void operateshop::clear_has_timelimit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void operateshop::clear_timelimit() {
  timelimit_ = 0;
  clear_has_timelimit();
}
inline ::google::protobuf::int32 operateshop::timelimit() const {
  return timelimit_;
}
inline void operateshop::set_timelimit(::google::protobuf::int32 value) {
  set_has_timelimit();
  timelimit_ = value;
}

// -------------------------------------------------------------------

// Sheet_operateshop

// repeated .proto_ff.operateshop operateshop_List = 1;
inline int Sheet_operateshop::operateshop_list_size() const {
  return operateshop_list_.size();
}
inline void Sheet_operateshop::clear_operateshop_list() {
  operateshop_list_.Clear();
}
inline const ::proto_ff::operateshop& Sheet_operateshop::operateshop_list(int index) const {
  return operateshop_list_.Get(index);
}
inline ::proto_ff::operateshop* Sheet_operateshop::mutable_operateshop_list(int index) {
  return operateshop_list_.Mutable(index);
}
inline ::proto_ff::operateshop* Sheet_operateshop::add_operateshop_list() {
  return operateshop_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operateshop >&
Sheet_operateshop::operateshop_list() const {
  return operateshop_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operateshop >*
Sheet_operateshop::mutable_operateshop_list() {
  return &operateshop_list_;
}

// -------------------------------------------------------------------

// operatewish

// optional int32 level = 1;
inline bool operatewish::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operatewish::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operatewish::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operatewish::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 operatewish::level() const {
  return level_;
}
inline void operatewish::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int64 exp = 2;
inline bool operatewish::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operatewish::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operatewish::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operatewish::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 operatewish::exp() const {
  return exp_;
}
inline void operatewish::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// Sheet_operatewish

// repeated .proto_ff.operatewish operatewish_List = 1;
inline int Sheet_operatewish::operatewish_list_size() const {
  return operatewish_list_.size();
}
inline void Sheet_operatewish::clear_operatewish_list() {
  operatewish_list_.Clear();
}
inline const ::proto_ff::operatewish& Sheet_operatewish::operatewish_list(int index) const {
  return operatewish_list_.Get(index);
}
inline ::proto_ff::operatewish* Sheet_operatewish::mutable_operatewish_list(int index) {
  return operatewish_list_.Mutable(index);
}
inline ::proto_ff::operatewish* Sheet_operatewish::add_operatewish_list() {
  return operatewish_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operatewish >&
Sheet_operatewish::operatewish_list() const {
  return operatewish_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operatewish >*
Sheet_operatewish::mutable_operatewish_list() {
  return &operatewish_list_;
}

// -------------------------------------------------------------------

// operateturntable

// optional int32 id = 1;
inline bool operateturntable::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operateturntable::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operateturntable::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operateturntable::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 operateturntable::id() const {
  return id_;
}
inline void operateturntable::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 itemId = 2;
inline bool operateturntable::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operateturntable::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operateturntable::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operateturntable::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 operateturntable::itemid() const {
  return itemid_;
}
inline void operateturntable::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 count = 3;
inline bool operateturntable::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operateturntable::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operateturntable::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operateturntable::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 operateturntable::count() const {
  return count_;
}
inline void operateturntable::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 prof = 4;
inline bool operateturntable::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void operateturntable::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void operateturntable::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void operateturntable::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 operateturntable::prof() const {
  return prof_;
}
inline void operateturntable::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 prizeLevel = 5;
inline bool operateturntable::has_prizelevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void operateturntable::set_has_prizelevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void operateturntable::clear_has_prizelevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void operateturntable::clear_prizelevel() {
  prizelevel_ = 0;
  clear_has_prizelevel();
}
inline ::google::protobuf::int32 operateturntable::prizelevel() const {
  return prizelevel_;
}
inline void operateturntable::set_prizelevel(::google::protobuf::int32 value) {
  set_has_prizelevel();
  prizelevel_ = value;
}

// optional int32 weight = 6;
inline bool operateturntable::has_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void operateturntable::set_has_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void operateturntable::clear_has_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void operateturntable::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline ::google::protobuf::int32 operateturntable::weight() const {
  return weight_;
}
inline void operateturntable::set_weight(::google::protobuf::int32 value) {
  set_has_weight();
  weight_ = value;
}

// optional int32 broadcast = 7;
inline bool operateturntable::has_broadcast() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void operateturntable::set_has_broadcast() {
  _has_bits_[0] |= 0x00000040u;
}
inline void operateturntable::clear_has_broadcast() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void operateturntable::clear_broadcast() {
  broadcast_ = 0;
  clear_has_broadcast();
}
inline ::google::protobuf::int32 operateturntable::broadcast() const {
  return broadcast_;
}
inline void operateturntable::set_broadcast(::google::protobuf::int32 value) {
  set_has_broadcast();
  broadcast_ = value;
}

// optional int32 order = 8;
inline bool operateturntable::has_order() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void operateturntable::set_has_order() {
  _has_bits_[0] |= 0x00000080u;
}
inline void operateturntable::clear_has_order() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void operateturntable::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 operateturntable::order() const {
  return order_;
}
inline void operateturntable::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
}

// optional int64 relation = 9;
inline bool operateturntable::has_relation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void operateturntable::set_has_relation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void operateturntable::clear_has_relation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void operateturntable::clear_relation() {
  relation_ = GOOGLE_LONGLONG(0);
  clear_has_relation();
}
inline ::google::protobuf::int64 operateturntable::relation() const {
  return relation_;
}
inline void operateturntable::set_relation(::google::protobuf::int64 value) {
  set_has_relation();
  relation_ = value;
}

// -------------------------------------------------------------------

// Sheet_operateturntable

// repeated .proto_ff.operateturntable operateturntable_List = 1;
inline int Sheet_operateturntable::operateturntable_list_size() const {
  return operateturntable_list_.size();
}
inline void Sheet_operateturntable::clear_operateturntable_list() {
  operateturntable_list_.Clear();
}
inline const ::proto_ff::operateturntable& Sheet_operateturntable::operateturntable_list(int index) const {
  return operateturntable_list_.Get(index);
}
inline ::proto_ff::operateturntable* Sheet_operateturntable::mutable_operateturntable_list(int index) {
  return operateturntable_list_.Mutable(index);
}
inline ::proto_ff::operateturntable* Sheet_operateturntable::add_operateturntable_list() {
  return operateturntable_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operateturntable >&
Sheet_operateturntable::operateturntable_list() const {
  return operateturntable_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operateturntable >*
Sheet_operateturntable::mutable_operateturntable_list() {
  return &operateturntable_list_;
}

// -------------------------------------------------------------------

// operateturntableTask

// optional int32 id = 1;
inline bool operateturntableTask::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void operateturntableTask::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void operateturntableTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void operateturntableTask::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 operateturntableTask::id() const {
  return id_;
}
inline void operateturntableTask::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 taskType = 2;
inline bool operateturntableTask::has_tasktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void operateturntableTask::set_has_tasktype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void operateturntableTask::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void operateturntableTask::clear_tasktype() {
  tasktype_ = 0;
  clear_has_tasktype();
}
inline ::google::protobuf::int32 operateturntableTask::tasktype() const {
  return tasktype_;
}
inline void operateturntableTask::set_tasktype(::google::protobuf::int32 value) {
  set_has_tasktype();
  tasktype_ = value;
}

// optional int32 taskParam = 3;
inline bool operateturntableTask::has_taskparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void operateturntableTask::set_has_taskparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void operateturntableTask::clear_has_taskparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void operateturntableTask::clear_taskparam() {
  taskparam_ = 0;
  clear_has_taskparam();
}
inline ::google::protobuf::int32 operateturntableTask::taskparam() const {
  return taskparam_;
}
inline void operateturntableTask::set_taskparam(::google::protobuf::int32 value) {
  set_has_taskparam();
  taskparam_ = value;
}

// optional int64 itemId = 4;
inline bool operateturntableTask::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void operateturntableTask::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void operateturntableTask::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void operateturntableTask::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 operateturntableTask::itemid() const {
  return itemid_;
}
inline void operateturntableTask::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 itemCount = 5;
inline bool operateturntableTask::has_itemcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void operateturntableTask::set_has_itemcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void operateturntableTask::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void operateturntableTask::clear_itemcount() {
  itemcount_ = 0;
  clear_has_itemcount();
}
inline ::google::protobuf::int32 operateturntableTask::itemcount() const {
  return itemcount_;
}
inline void operateturntableTask::set_itemcount(::google::protobuf::int32 value) {
  set_has_itemcount();
  itemcount_ = value;
}

// -------------------------------------------------------------------

// Sheet_operateturntableTask

// repeated .proto_ff.operateturntableTask operateturntableTask_List = 1;
inline int Sheet_operateturntableTask::operateturntabletask_list_size() const {
  return operateturntabletask_list_.size();
}
inline void Sheet_operateturntableTask::clear_operateturntabletask_list() {
  operateturntabletask_list_.Clear();
}
inline const ::proto_ff::operateturntableTask& Sheet_operateturntableTask::operateturntabletask_list(int index) const {
  return operateturntabletask_list_.Get(index);
}
inline ::proto_ff::operateturntableTask* Sheet_operateturntableTask::mutable_operateturntabletask_list(int index) {
  return operateturntabletask_list_.Mutable(index);
}
inline ::proto_ff::operateturntableTask* Sheet_operateturntableTask::add_operateturntabletask_list() {
  return operateturntabletask_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::operateturntableTask >&
Sheet_operateturntableTask::operateturntabletask_list() const {
  return operateturntabletask_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::operateturntableTask >*
Sheet_operateturntableTask::mutable_operateturntabletask_list() {
  return &operateturntabletask_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_operate_2eproto__INCLUDED
