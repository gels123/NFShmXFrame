// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Market.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Market.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_MarketMarket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarketMarket_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarketMarket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarketMarket_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarketBig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarketBig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarketBig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarketBig_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarketSmall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarketSmall_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarketSmall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarketSmall_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MarketConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MarketConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MarketConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MarketConstant_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fMarket_2eproto() {
  protobuf_AddDesc_E_5fMarket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Market.proto");
  GOOGLE_CHECK(file != NULL);
  E_MarketMarket_descriptor_ = file->message_type(0);
  static const int E_MarketMarket_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, m_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, m_readytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, m_sjtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, m_endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, m_pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, m_vietype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, m_startprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, m_onceprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, m_directprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, m_gztype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, m_gztutype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, m_recoverytype_),
  };
  E_MarketMarket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarketMarket_descriptor_,
      E_MarketMarket::default_instance_,
      E_MarketMarket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketMarket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarketMarket));
  Sheet_MarketMarket_descriptor_ = file->message_type(1);
  static const int Sheet_MarketMarket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarketMarket, e_marketmarket_list_),
  };
  Sheet_MarketMarket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarketMarket_descriptor_,
      Sheet_MarketMarket::default_instance_,
      Sheet_MarketMarket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarketMarket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarketMarket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarketMarket));
  E_MarketBig_descriptor_ = file->message_type(2);
  static const int E_MarketBig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketBig, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketBig, m_bigname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketBig, m_xb_),
  };
  E_MarketBig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarketBig_descriptor_,
      E_MarketBig::default_instance_,
      E_MarketBig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketBig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketBig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarketBig));
  Sheet_MarketBig_descriptor_ = file->message_type(3);
  static const int Sheet_MarketBig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarketBig, e_marketbig_list_),
  };
  Sheet_MarketBig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarketBig_descriptor_,
      Sheet_MarketBig::default_instance_,
      Sheet_MarketBig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarketBig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarketBig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarketBig));
  E_MarketSmall_descriptor_ = file->message_type(4);
  static const int E_MarketSmall_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketSmall, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketSmall, m_smallname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketSmall, m_openlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketSmall, m_bigid_),
  };
  E_MarketSmall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarketSmall_descriptor_,
      E_MarketSmall::default_instance_,
      E_MarketSmall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketSmall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketSmall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarketSmall));
  Sheet_MarketSmall_descriptor_ = file->message_type(5);
  static const int Sheet_MarketSmall_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarketSmall, e_marketsmall_list_),
  };
  Sheet_MarketSmall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarketSmall_descriptor_,
      Sheet_MarketSmall::default_instance_,
      Sheet_MarketSmall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarketSmall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarketSmall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarketSmall));
  E_MarketConstant_descriptor_ = file->message_type(6);
  static const int E_MarketConstant_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketConstant, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketConstant, m_taxrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketConstant, m_bpselltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketConstant, m_sellnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketConstant, m_recyclenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketConstant, m_gz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketConstant, m_epackagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketConstant, m_dh_),
  };
  E_MarketConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MarketConstant_descriptor_,
      E_MarketConstant::default_instance_,
      E_MarketConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MarketConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MarketConstant));
  Sheet_MarketConstant_descriptor_ = file->message_type(7);
  static const int Sheet_MarketConstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarketConstant, e_marketconstant_list_),
  };
  Sheet_MarketConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MarketConstant_descriptor_,
      Sheet_MarketConstant::default_instance_,
      Sheet_MarketConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarketConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MarketConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MarketConstant));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fMarket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarketMarket_descriptor_, &E_MarketMarket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarketMarket_descriptor_, &Sheet_MarketMarket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarketBig_descriptor_, &E_MarketBig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarketBig_descriptor_, &Sheet_MarketBig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarketSmall_descriptor_, &E_MarketSmall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarketSmall_descriptor_, &Sheet_MarketSmall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MarketConstant_descriptor_, &E_MarketConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MarketConstant_descriptor_, &Sheet_MarketConstant::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fMarket_2eproto() {
  delete E_MarketMarket::default_instance_;
  delete E_MarketMarket_reflection_;
  delete Sheet_MarketMarket::default_instance_;
  delete Sheet_MarketMarket_reflection_;
  delete E_MarketBig::default_instance_;
  delete E_MarketBig_reflection_;
  delete Sheet_MarketBig::default_instance_;
  delete Sheet_MarketBig_reflection_;
  delete E_MarketSmall::default_instance_;
  delete E_MarketSmall_reflection_;
  delete Sheet_MarketSmall::default_instance_;
  delete Sheet_MarketSmall_reflection_;
  delete E_MarketConstant::default_instance_;
  delete E_MarketConstant_reflection_;
  delete Sheet_MarketConstant::default_instance_;
  delete Sheet_MarketConstant_reflection_;
}

void protobuf_AddDesc_E_5fMarket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016E_Market.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\"\266\004\n\016E_MarketMarket\022\036\n\010m_itemid"
    "\030\001 \001(\005B\014\302\377\024\010\351\201\223\345\205\267id\022#\n\006m_type\030\002 \001(\005B\023\302\377"
    "\024\017\346\211\200\345\261\236\347\261\273\345\236\213\347\273\204\022\033\n\007m_order\030\003 \001(\005B\n\302\377\024\006"
    "\346\216\222\345\272\217\022%\n\013m_readytime\030\004 \001(\005B\020\302\377\024\014\345\207\206\345\244\207\346"
    "\227\266\351\227\264\022\"\n\010m_sjtime\030\005 \001(\005B\020\302\377\024\014\344\270\212\346\236\266\346\227\266\351\227"
    "\264\022#\n\tm_endtime\030\006 \001(\005B\020\302\377\024\014\347\253\236\346\213\215\346\227\266\351\227\264\022%"
    "\n\013m_pricetype\030\007 \001(\005B\020\302\377\024\014\344\272\244\346\230\223\350\264\247\345\270\201\022)\n"
    "\tm_vietype\030\010 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\346\224\257\346\214\201\347\253\236\344\273\267"
    "\022&\n\014m_startprice\030\t \001(\005B\020\302\377\024\014\347\253\236\346\213\215\345\272\225\344\273\267"
    "\022.\n\013m_onceprice\030\n \001(\005B\031\302\377\024\025\346\257\217\346\254\241\345\242\236\345\212\240\347"
    "\232\204\344\273\267\346\240\274\022$\n\rm_directprice\030\013 \001(\005B\r\302\377\024\t\344\270\200"
    "\345\217\243\344\273\267\022\"\n\010m_gztype\030\014 \001(\005B\020\302\377\024\014\346\230\257\345\220\246\345\205\263\346"
    "\263\250\022.\n\nm_gztutype\030\r \001(\tB\032\302\377\024\022\345\205\263\346\263\250\350\216\267\345\217\226"
    "\351\200\224\345\276\204\220\301\024@\022.\n\016m_recoverytype\030\016 \001(\005B\026\302\377\024\022"
    "\346\230\257\345\220\246\347\263\273\347\273\237\345\233\236\346\224\266\"R\n\022Sheet_MarketMarket"
    "\022<\n\023E_MarketMarket_List\030\001 \003(\0132\030.proto_ff"
    ".E_MarketMarketB\005\210\301\024\200\010\"l\n\013E_MarketBig\022\032\n"
    "\004m_id\030\001 \001(\005B\014\302\377\024\010\345\244\247\347\261\273id\022\'\n\tm_bigname\030\002"
    " \001(\tB\024\302\377\024\014\345\244\247\347\261\273\345\220\215\347\247\260\220\301\024@\022\030\n\004m_xb\030\003 \001(\005"
    "B\n\302\377\024\006\346\200\247\345\210\253\"H\n\017Sheet_MarketBig\0225\n\020E_Mar"
    "ketBig_List\030\001 \003(\0132\025.proto_ff.E_MarketBig"
    "B\004\210\301\024\020\"\242\001\n\rE_MarketSmall\022\035\n\004m_id\030\001 \001(\005B\017"
    "\302\377\024\013\345\255\220\351\241\265\347\255\276id\022,\n\013m_smallname\030\002 \001(\tB\027\302\377"
    "\024\017\345\255\220\351\241\265\347\255\276\345\220\215\347\247\260\220\301\024@\022%\n\013m_openlevel\030\003 \001"
    "(\005B\020\302\377\024\014\346\230\276\347\244\272\347\255\211\347\272\247\022\035\n\007m_bigid\030\004 \001(\005B\014\302"
    "\377\024\010\345\244\247\347\261\273id\"O\n\021Sheet_MarketSmall\022:\n\022E_Ma"
    "rketSmall_List\030\001 \003(\0132\027.proto_ff.E_Market"
    "SmallB\005\210\301\024\200\001\"\302\002\n\020E_MarketConstant\022\024\n\004m_i"
    "d\030\001 \001(\005B\006\302\377\024\002id\022#\n\tm_taxrate\030\002 \001(\005B\020\302\377\024\014"
    "\345\207\272\345\224\256\347\250\216\347\216\207\0222\n\014m_bpselltime\030\003 \001(\005B\034\302\377\024\030"
    "\345\270\256\346\264\276\346\213\215\345\223\201\344\270\212\346\236\266\346\227\266\351\227\264\022#\n\tm_sellnum\030\004 "
    "\001(\005B\020\302\377\024\014\344\270\212\346\236\266\346\225\260\351\207\217\022&\n\014m_recyclenum\030\005 "
    "\001(\005B\020\302\377\024\014\345\233\236\346\224\266\346\225\260\351\207\217\022\036\n\004m_gz\030\006 \001(\005B\020\302\377\024"
    "\014\345\205\263\346\263\250\344\270\212\351\231\220\022,\n\016m_epackagetype\030\007 \001(\tB\024\302"
    "\377\024\014\345\214\205\350\243\271\347\261\273\345\236\213\220\301\024@\022$\n\004m_dh\030\010 \001(\005B\026\302\377\024\022\351"
    "\222\273\347\237\263\345\205\221\346\215\242\345\205\203\345\256\235\"W\n\024Sheet_MarketConstan"
    "t\022\?\n\025E_MarketConstant_List\030\001 \003(\0132\032.proto"
    "_ff.E_MarketConstantB\004\210\301\024\002", 1546);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Market.proto", &protobuf_RegisterTypes);
  E_MarketMarket::default_instance_ = new E_MarketMarket();
  Sheet_MarketMarket::default_instance_ = new Sheet_MarketMarket();
  E_MarketBig::default_instance_ = new E_MarketBig();
  Sheet_MarketBig::default_instance_ = new Sheet_MarketBig();
  E_MarketSmall::default_instance_ = new E_MarketSmall();
  Sheet_MarketSmall::default_instance_ = new Sheet_MarketSmall();
  E_MarketConstant::default_instance_ = new E_MarketConstant();
  Sheet_MarketConstant::default_instance_ = new Sheet_MarketConstant();
  E_MarketMarket::default_instance_->InitAsDefaultInstance();
  Sheet_MarketMarket::default_instance_->InitAsDefaultInstance();
  E_MarketBig::default_instance_->InitAsDefaultInstance();
  Sheet_MarketBig::default_instance_->InitAsDefaultInstance();
  E_MarketSmall::default_instance_->InitAsDefaultInstance();
  Sheet_MarketSmall::default_instance_->InitAsDefaultInstance();
  E_MarketConstant::default_instance_->InitAsDefaultInstance();
  Sheet_MarketConstant::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fMarket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fMarket_2eproto {
  StaticDescriptorInitializer_E_5fMarket_2eproto() {
    protobuf_AddDesc_E_5fMarket_2eproto();
  }
} static_descriptor_initializer_E_5fMarket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_MarketMarket::kMItemidFieldNumber;
const int E_MarketMarket::kMTypeFieldNumber;
const int E_MarketMarket::kMOrderFieldNumber;
const int E_MarketMarket::kMReadytimeFieldNumber;
const int E_MarketMarket::kMSjtimeFieldNumber;
const int E_MarketMarket::kMEndtimeFieldNumber;
const int E_MarketMarket::kMPricetypeFieldNumber;
const int E_MarketMarket::kMVietypeFieldNumber;
const int E_MarketMarket::kMStartpriceFieldNumber;
const int E_MarketMarket::kMOncepriceFieldNumber;
const int E_MarketMarket::kMDirectpriceFieldNumber;
const int E_MarketMarket::kMGztypeFieldNumber;
const int E_MarketMarket::kMGztutypeFieldNumber;
const int E_MarketMarket::kMRecoverytypeFieldNumber;
#endif  // !_MSC_VER

E_MarketMarket::E_MarketMarket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarketMarket::InitAsDefaultInstance() {
}

E_MarketMarket::E_MarketMarket(const E_MarketMarket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarketMarket::SharedCtor() {
  _cached_size_ = 0;
  m_itemid_ = 0;
  m_type_ = 0;
  m_order_ = 0;
  m_readytime_ = 0;
  m_sjtime_ = 0;
  m_endtime_ = 0;
  m_pricetype_ = 0;
  m_vietype_ = 0;
  m_startprice_ = 0;
  m_onceprice_ = 0;
  m_directprice_ = 0;
  m_gztype_ = 0;
  m_gztutype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_recoverytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarketMarket::~E_MarketMarket() {
  SharedDtor();
}

void E_MarketMarket::SharedDtor() {
  if (m_gztutype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gztutype_;
  }
  if (this != default_instance_) {
  }
}

void E_MarketMarket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarketMarket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarketMarket_descriptor_;
}

const E_MarketMarket& E_MarketMarket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarket_2eproto();
  return *default_instance_;
}

E_MarketMarket* E_MarketMarket::default_instance_ = NULL;

E_MarketMarket* E_MarketMarket::New() const {
  return new E_MarketMarket;
}

void E_MarketMarket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_itemid_ = 0;
    m_type_ = 0;
    m_order_ = 0;
    m_readytime_ = 0;
    m_sjtime_ = 0;
    m_endtime_ = 0;
    m_pricetype_ = 0;
    m_vietype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_startprice_ = 0;
    m_onceprice_ = 0;
    m_directprice_ = 0;
    m_gztype_ = 0;
    if (has_m_gztutype()) {
      if (m_gztutype_ != &::google::protobuf::internal::kEmptyString) {
        m_gztutype_->clear();
      }
    }
    m_recoverytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarketMarket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_order;
        break;
      }

      // optional int32 m_order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_order_)));
          set_has_m_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_readytime;
        break;
      }

      // optional int32 m_readytime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_readytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_readytime_)));
          set_has_m_readytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_sjtime;
        break;
      }

      // optional int32 m_sjtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sjtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sjtime_)));
          set_has_m_sjtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_endtime;
        break;
      }

      // optional int32 m_endtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_endtime_)));
          set_has_m_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_pricetype;
        break;
      }

      // optional int32 m_pricetype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pricetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pricetype_)));
          set_has_m_pricetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_vietype;
        break;
      }

      // optional int32 m_vietype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vietype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vietype_)));
          set_has_m_vietype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_startprice;
        break;
      }

      // optional int32 m_startprice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_startprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_startprice_)));
          set_has_m_startprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_onceprice;
        break;
      }

      // optional int32 m_onceprice = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_onceprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_onceprice_)));
          set_has_m_onceprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_directprice;
        break;
      }

      // optional int32 m_directprice = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_directprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_directprice_)));
          set_has_m_directprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_gztype;
        break;
      }

      // optional int32 m_gztype = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gztype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gztype_)));
          set_has_m_gztype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_gztutype;
        break;
      }

      // optional string m_gztutype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_gztutype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_gztutype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_gztutype().data(), this->m_gztutype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_recoverytype;
        break;
      }

      // optional int32 m_recoverytype = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_recoverytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_recoverytype_)));
          set_has_m_recoverytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarketMarket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_itemid = 1;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_itemid(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_order = 3;
  if (has_m_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_order(), output);
  }

  // optional int32 m_readytime = 4;
  if (has_m_readytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_readytime(), output);
  }

  // optional int32 m_sjtime = 5;
  if (has_m_sjtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_sjtime(), output);
  }

  // optional int32 m_endtime = 6;
  if (has_m_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_endtime(), output);
  }

  // optional int32 m_pricetype = 7;
  if (has_m_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_pricetype(), output);
  }

  // optional int32 m_vietype = 8;
  if (has_m_vietype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_vietype(), output);
  }

  // optional int32 m_startprice = 9;
  if (has_m_startprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_startprice(), output);
  }

  // optional int32 m_onceprice = 10;
  if (has_m_onceprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_onceprice(), output);
  }

  // optional int32 m_directprice = 11;
  if (has_m_directprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_directprice(), output);
  }

  // optional int32 m_gztype = 12;
  if (has_m_gztype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_gztype(), output);
  }

  // optional string m_gztutype = 13;
  if (has_m_gztutype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gztutype().data(), this->m_gztutype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->m_gztutype(), output);
  }

  // optional int32 m_recoverytype = 14;
  if (has_m_recoverytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_recoverytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarketMarket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_itemid = 1;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_itemid(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_order = 3;
  if (has_m_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_order(), target);
  }

  // optional int32 m_readytime = 4;
  if (has_m_readytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_readytime(), target);
  }

  // optional int32 m_sjtime = 5;
  if (has_m_sjtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_sjtime(), target);
  }

  // optional int32 m_endtime = 6;
  if (has_m_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_endtime(), target);
  }

  // optional int32 m_pricetype = 7;
  if (has_m_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_pricetype(), target);
  }

  // optional int32 m_vietype = 8;
  if (has_m_vietype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_vietype(), target);
  }

  // optional int32 m_startprice = 9;
  if (has_m_startprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_startprice(), target);
  }

  // optional int32 m_onceprice = 10;
  if (has_m_onceprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_onceprice(), target);
  }

  // optional int32 m_directprice = 11;
  if (has_m_directprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_directprice(), target);
  }

  // optional int32 m_gztype = 12;
  if (has_m_gztype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_gztype(), target);
  }

  // optional string m_gztutype = 13;
  if (has_m_gztutype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gztutype().data(), this->m_gztutype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->m_gztutype(), target);
  }

  // optional int32 m_recoverytype = 14;
  if (has_m_recoverytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_recoverytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarketMarket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_itemid = 1;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_order = 3;
    if (has_m_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_order());
    }

    // optional int32 m_readytime = 4;
    if (has_m_readytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_readytime());
    }

    // optional int32 m_sjtime = 5;
    if (has_m_sjtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sjtime());
    }

    // optional int32 m_endtime = 6;
    if (has_m_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_endtime());
    }

    // optional int32 m_pricetype = 7;
    if (has_m_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pricetype());
    }

    // optional int32 m_vietype = 8;
    if (has_m_vietype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vietype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_startprice = 9;
    if (has_m_startprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_startprice());
    }

    // optional int32 m_onceprice = 10;
    if (has_m_onceprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_onceprice());
    }

    // optional int32 m_directprice = 11;
    if (has_m_directprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_directprice());
    }

    // optional int32 m_gztype = 12;
    if (has_m_gztype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gztype());
    }

    // optional string m_gztutype = 13;
    if (has_m_gztutype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_gztutype());
    }

    // optional int32 m_recoverytype = 14;
    if (has_m_recoverytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_recoverytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarketMarket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarketMarket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarketMarket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarketMarket::MergeFrom(const E_MarketMarket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_order()) {
      set_m_order(from.m_order());
    }
    if (from.has_m_readytime()) {
      set_m_readytime(from.m_readytime());
    }
    if (from.has_m_sjtime()) {
      set_m_sjtime(from.m_sjtime());
    }
    if (from.has_m_endtime()) {
      set_m_endtime(from.m_endtime());
    }
    if (from.has_m_pricetype()) {
      set_m_pricetype(from.m_pricetype());
    }
    if (from.has_m_vietype()) {
      set_m_vietype(from.m_vietype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_startprice()) {
      set_m_startprice(from.m_startprice());
    }
    if (from.has_m_onceprice()) {
      set_m_onceprice(from.m_onceprice());
    }
    if (from.has_m_directprice()) {
      set_m_directprice(from.m_directprice());
    }
    if (from.has_m_gztype()) {
      set_m_gztype(from.m_gztype());
    }
    if (from.has_m_gztutype()) {
      set_m_gztutype(from.m_gztutype());
    }
    if (from.has_m_recoverytype()) {
      set_m_recoverytype(from.m_recoverytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarketMarket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarketMarket::CopyFrom(const E_MarketMarket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarketMarket::IsInitialized() const {

  return true;
}

void E_MarketMarket::Swap(E_MarketMarket* other) {
  if (other != this) {
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_order_, other->m_order_);
    std::swap(m_readytime_, other->m_readytime_);
    std::swap(m_sjtime_, other->m_sjtime_);
    std::swap(m_endtime_, other->m_endtime_);
    std::swap(m_pricetype_, other->m_pricetype_);
    std::swap(m_vietype_, other->m_vietype_);
    std::swap(m_startprice_, other->m_startprice_);
    std::swap(m_onceprice_, other->m_onceprice_);
    std::swap(m_directprice_, other->m_directprice_);
    std::swap(m_gztype_, other->m_gztype_);
    std::swap(m_gztutype_, other->m_gztutype_);
    std::swap(m_recoverytype_, other->m_recoverytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarketMarket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarketMarket_descriptor_;
  metadata.reflection = E_MarketMarket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarketMarket::kEMarketMarketListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarketMarket::Sheet_MarketMarket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarketMarket::InitAsDefaultInstance() {
}

Sheet_MarketMarket::Sheet_MarketMarket(const Sheet_MarketMarket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarketMarket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarketMarket::~Sheet_MarketMarket() {
  SharedDtor();
}

void Sheet_MarketMarket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarketMarket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarketMarket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarketMarket_descriptor_;
}

const Sheet_MarketMarket& Sheet_MarketMarket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarket_2eproto();
  return *default_instance_;
}

Sheet_MarketMarket* Sheet_MarketMarket::default_instance_ = NULL;

Sheet_MarketMarket* Sheet_MarketMarket::New() const {
  return new Sheet_MarketMarket;
}

void Sheet_MarketMarket::Clear() {
  e_marketmarket_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarketMarket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarketMarket E_MarketMarket_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarketMarket_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marketmarket_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarketMarket_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarketMarket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarketMarket E_MarketMarket_List = 1;
  for (int i = 0; i < this->e_marketmarket_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marketmarket_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarketMarket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarketMarket E_MarketMarket_List = 1;
  for (int i = 0; i < this->e_marketmarket_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marketmarket_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarketMarket::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarketMarket E_MarketMarket_List = 1;
  total_size += 1 * this->e_marketmarket_list_size();
  for (int i = 0; i < this->e_marketmarket_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marketmarket_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarketMarket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarketMarket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarketMarket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarketMarket::MergeFrom(const Sheet_MarketMarket& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marketmarket_list_.MergeFrom(from.e_marketmarket_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarketMarket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarketMarket::CopyFrom(const Sheet_MarketMarket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarketMarket::IsInitialized() const {

  return true;
}

void Sheet_MarketMarket::Swap(Sheet_MarketMarket* other) {
  if (other != this) {
    e_marketmarket_list_.Swap(&other->e_marketmarket_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarketMarket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarketMarket_descriptor_;
  metadata.reflection = Sheet_MarketMarket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarketBig::kMIdFieldNumber;
const int E_MarketBig::kMBignameFieldNumber;
const int E_MarketBig::kMXbFieldNumber;
#endif  // !_MSC_VER

E_MarketBig::E_MarketBig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarketBig::InitAsDefaultInstance() {
}

E_MarketBig::E_MarketBig(const E_MarketBig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarketBig::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_bigname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_xb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarketBig::~E_MarketBig() {
  SharedDtor();
}

void E_MarketBig::SharedDtor() {
  if (m_bigname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_bigname_;
  }
  if (this != default_instance_) {
  }
}

void E_MarketBig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarketBig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarketBig_descriptor_;
}

const E_MarketBig& E_MarketBig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarket_2eproto();
  return *default_instance_;
}

E_MarketBig* E_MarketBig::default_instance_ = NULL;

E_MarketBig* E_MarketBig::New() const {
  return new E_MarketBig;
}

void E_MarketBig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_bigname()) {
      if (m_bigname_ != &::google::protobuf::internal::kEmptyString) {
        m_bigname_->clear();
      }
    }
    m_xb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarketBig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_bigname;
        break;
      }

      // optional string m_bigname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_bigname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_bigname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_bigname().data(), this->m_bigname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_xb;
        break;
      }

      // optional int32 m_xb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xb_)));
          set_has_m_xb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarketBig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_bigname = 2;
  if (has_m_bigname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_bigname().data(), this->m_bigname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_bigname(), output);
  }

  // optional int32 m_xb = 3;
  if (has_m_xb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_xb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarketBig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_bigname = 2;
  if (has_m_bigname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_bigname().data(), this->m_bigname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_bigname(), target);
  }

  // optional int32 m_xb = 3;
  if (has_m_xb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_xb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarketBig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_bigname = 2;
    if (has_m_bigname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_bigname());
    }

    // optional int32 m_xb = 3;
    if (has_m_xb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarketBig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarketBig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarketBig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarketBig::MergeFrom(const E_MarketBig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_bigname()) {
      set_m_bigname(from.m_bigname());
    }
    if (from.has_m_xb()) {
      set_m_xb(from.m_xb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarketBig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarketBig::CopyFrom(const E_MarketBig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarketBig::IsInitialized() const {

  return true;
}

void E_MarketBig::Swap(E_MarketBig* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_bigname_, other->m_bigname_);
    std::swap(m_xb_, other->m_xb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarketBig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarketBig_descriptor_;
  metadata.reflection = E_MarketBig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarketBig::kEMarketBigListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarketBig::Sheet_MarketBig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarketBig::InitAsDefaultInstance() {
}

Sheet_MarketBig::Sheet_MarketBig(const Sheet_MarketBig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarketBig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarketBig::~Sheet_MarketBig() {
  SharedDtor();
}

void Sheet_MarketBig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarketBig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarketBig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarketBig_descriptor_;
}

const Sheet_MarketBig& Sheet_MarketBig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarket_2eproto();
  return *default_instance_;
}

Sheet_MarketBig* Sheet_MarketBig::default_instance_ = NULL;

Sheet_MarketBig* Sheet_MarketBig::New() const {
  return new Sheet_MarketBig;
}

void Sheet_MarketBig::Clear() {
  e_marketbig_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarketBig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarketBig E_MarketBig_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarketBig_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marketbig_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarketBig_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarketBig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarketBig E_MarketBig_List = 1;
  for (int i = 0; i < this->e_marketbig_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marketbig_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarketBig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarketBig E_MarketBig_List = 1;
  for (int i = 0; i < this->e_marketbig_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marketbig_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarketBig::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarketBig E_MarketBig_List = 1;
  total_size += 1 * this->e_marketbig_list_size();
  for (int i = 0; i < this->e_marketbig_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marketbig_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarketBig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarketBig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarketBig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarketBig::MergeFrom(const Sheet_MarketBig& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marketbig_list_.MergeFrom(from.e_marketbig_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarketBig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarketBig::CopyFrom(const Sheet_MarketBig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarketBig::IsInitialized() const {

  return true;
}

void Sheet_MarketBig::Swap(Sheet_MarketBig* other) {
  if (other != this) {
    e_marketbig_list_.Swap(&other->e_marketbig_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarketBig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarketBig_descriptor_;
  metadata.reflection = Sheet_MarketBig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarketSmall::kMIdFieldNumber;
const int E_MarketSmall::kMSmallnameFieldNumber;
const int E_MarketSmall::kMOpenlevelFieldNumber;
const int E_MarketSmall::kMBigidFieldNumber;
#endif  // !_MSC_VER

E_MarketSmall::E_MarketSmall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarketSmall::InitAsDefaultInstance() {
}

E_MarketSmall::E_MarketSmall(const E_MarketSmall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarketSmall::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_smallname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_openlevel_ = 0;
  m_bigid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarketSmall::~E_MarketSmall() {
  SharedDtor();
}

void E_MarketSmall::SharedDtor() {
  if (m_smallname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_smallname_;
  }
  if (this != default_instance_) {
  }
}

void E_MarketSmall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarketSmall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarketSmall_descriptor_;
}

const E_MarketSmall& E_MarketSmall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarket_2eproto();
  return *default_instance_;
}

E_MarketSmall* E_MarketSmall::default_instance_ = NULL;

E_MarketSmall* E_MarketSmall::New() const {
  return new E_MarketSmall;
}

void E_MarketSmall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_smallname()) {
      if (m_smallname_ != &::google::protobuf::internal::kEmptyString) {
        m_smallname_->clear();
      }
    }
    m_openlevel_ = 0;
    m_bigid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarketSmall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_smallname;
        break;
      }

      // optional string m_smallname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_smallname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_smallname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_smallname().data(), this->m_smallname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_openlevel;
        break;
      }

      // optional int32 m_openlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_openlevel_)));
          set_has_m_openlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bigid;
        break;
      }

      // optional int32 m_bigid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bigid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bigid_)));
          set_has_m_bigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarketSmall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_smallname = 2;
  if (has_m_smallname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_smallname().data(), this->m_smallname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_smallname(), output);
  }

  // optional int32 m_openlevel = 3;
  if (has_m_openlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_openlevel(), output);
  }

  // optional int32 m_bigid = 4;
  if (has_m_bigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_bigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarketSmall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_smallname = 2;
  if (has_m_smallname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_smallname().data(), this->m_smallname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_smallname(), target);
  }

  // optional int32 m_openlevel = 3;
  if (has_m_openlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_openlevel(), target);
  }

  // optional int32 m_bigid = 4;
  if (has_m_bigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_bigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarketSmall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_smallname = 2;
    if (has_m_smallname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_smallname());
    }

    // optional int32 m_openlevel = 3;
    if (has_m_openlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_openlevel());
    }

    // optional int32 m_bigid = 4;
    if (has_m_bigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarketSmall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarketSmall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarketSmall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarketSmall::MergeFrom(const E_MarketSmall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_smallname()) {
      set_m_smallname(from.m_smallname());
    }
    if (from.has_m_openlevel()) {
      set_m_openlevel(from.m_openlevel());
    }
    if (from.has_m_bigid()) {
      set_m_bigid(from.m_bigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarketSmall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarketSmall::CopyFrom(const E_MarketSmall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarketSmall::IsInitialized() const {

  return true;
}

void E_MarketSmall::Swap(E_MarketSmall* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_smallname_, other->m_smallname_);
    std::swap(m_openlevel_, other->m_openlevel_);
    std::swap(m_bigid_, other->m_bigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarketSmall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarketSmall_descriptor_;
  metadata.reflection = E_MarketSmall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarketSmall::kEMarketSmallListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarketSmall::Sheet_MarketSmall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarketSmall::InitAsDefaultInstance() {
}

Sheet_MarketSmall::Sheet_MarketSmall(const Sheet_MarketSmall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarketSmall::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarketSmall::~Sheet_MarketSmall() {
  SharedDtor();
}

void Sheet_MarketSmall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarketSmall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarketSmall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarketSmall_descriptor_;
}

const Sheet_MarketSmall& Sheet_MarketSmall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarket_2eproto();
  return *default_instance_;
}

Sheet_MarketSmall* Sheet_MarketSmall::default_instance_ = NULL;

Sheet_MarketSmall* Sheet_MarketSmall::New() const {
  return new Sheet_MarketSmall;
}

void Sheet_MarketSmall::Clear() {
  e_marketsmall_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarketSmall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarketSmall E_MarketSmall_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarketSmall_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marketsmall_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarketSmall_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarketSmall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarketSmall E_MarketSmall_List = 1;
  for (int i = 0; i < this->e_marketsmall_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marketsmall_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarketSmall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarketSmall E_MarketSmall_List = 1;
  for (int i = 0; i < this->e_marketsmall_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marketsmall_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarketSmall::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarketSmall E_MarketSmall_List = 1;
  total_size += 1 * this->e_marketsmall_list_size();
  for (int i = 0; i < this->e_marketsmall_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marketsmall_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarketSmall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarketSmall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarketSmall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarketSmall::MergeFrom(const Sheet_MarketSmall& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marketsmall_list_.MergeFrom(from.e_marketsmall_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarketSmall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarketSmall::CopyFrom(const Sheet_MarketSmall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarketSmall::IsInitialized() const {

  return true;
}

void Sheet_MarketSmall::Swap(Sheet_MarketSmall* other) {
  if (other != this) {
    e_marketsmall_list_.Swap(&other->e_marketsmall_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarketSmall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarketSmall_descriptor_;
  metadata.reflection = Sheet_MarketSmall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MarketConstant::kMIdFieldNumber;
const int E_MarketConstant::kMTaxrateFieldNumber;
const int E_MarketConstant::kMBpselltimeFieldNumber;
const int E_MarketConstant::kMSellnumFieldNumber;
const int E_MarketConstant::kMRecyclenumFieldNumber;
const int E_MarketConstant::kMGzFieldNumber;
const int E_MarketConstant::kMEpackagetypeFieldNumber;
const int E_MarketConstant::kMDhFieldNumber;
#endif  // !_MSC_VER

E_MarketConstant::E_MarketConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MarketConstant::InitAsDefaultInstance() {
}

E_MarketConstant::E_MarketConstant(const E_MarketConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MarketConstant::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_taxrate_ = 0;
  m_bpselltime_ = 0;
  m_sellnum_ = 0;
  m_recyclenum_ = 0;
  m_gz_ = 0;
  m_epackagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_dh_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MarketConstant::~E_MarketConstant() {
  SharedDtor();
}

void E_MarketConstant::SharedDtor() {
  if (m_epackagetype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_epackagetype_;
  }
  if (this != default_instance_) {
  }
}

void E_MarketConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MarketConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MarketConstant_descriptor_;
}

const E_MarketConstant& E_MarketConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarket_2eproto();
  return *default_instance_;
}

E_MarketConstant* E_MarketConstant::default_instance_ = NULL;

E_MarketConstant* E_MarketConstant::New() const {
  return new E_MarketConstant;
}

void E_MarketConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_taxrate_ = 0;
    m_bpselltime_ = 0;
    m_sellnum_ = 0;
    m_recyclenum_ = 0;
    m_gz_ = 0;
    if (has_m_epackagetype()) {
      if (m_epackagetype_ != &::google::protobuf::internal::kEmptyString) {
        m_epackagetype_->clear();
      }
    }
    m_dh_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MarketConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_taxrate;
        break;
      }

      // optional int32 m_taxrate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_taxrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_taxrate_)));
          set_has_m_taxrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_bpselltime;
        break;
      }

      // optional int32 m_bpselltime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bpselltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bpselltime_)));
          set_has_m_bpselltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_sellnum;
        break;
      }

      // optional int32 m_sellnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sellnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sellnum_)));
          set_has_m_sellnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_recyclenum;
        break;
      }

      // optional int32 m_recyclenum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_recyclenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_recyclenum_)));
          set_has_m_recyclenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_gz;
        break;
      }

      // optional int32 m_gz = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gz_)));
          set_has_m_gz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_epackagetype;
        break;
      }

      // optional string m_epackagetype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_epackagetype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_epackagetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_epackagetype().data(), this->m_epackagetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_dh;
        break;
      }

      // optional int32 m_dh = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dh_)));
          set_has_m_dh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MarketConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_taxrate = 2;
  if (has_m_taxrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_taxrate(), output);
  }

  // optional int32 m_bpselltime = 3;
  if (has_m_bpselltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_bpselltime(), output);
  }

  // optional int32 m_sellnum = 4;
  if (has_m_sellnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_sellnum(), output);
  }

  // optional int32 m_recyclenum = 5;
  if (has_m_recyclenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_recyclenum(), output);
  }

  // optional int32 m_gz = 6;
  if (has_m_gz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_gz(), output);
  }

  // optional string m_epackagetype = 7;
  if (has_m_epackagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_epackagetype().data(), this->m_epackagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_epackagetype(), output);
  }

  // optional int32 m_dh = 8;
  if (has_m_dh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_dh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MarketConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_taxrate = 2;
  if (has_m_taxrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_taxrate(), target);
  }

  // optional int32 m_bpselltime = 3;
  if (has_m_bpselltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_bpselltime(), target);
  }

  // optional int32 m_sellnum = 4;
  if (has_m_sellnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_sellnum(), target);
  }

  // optional int32 m_recyclenum = 5;
  if (has_m_recyclenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_recyclenum(), target);
  }

  // optional int32 m_gz = 6;
  if (has_m_gz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_gz(), target);
  }

  // optional string m_epackagetype = 7;
  if (has_m_epackagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_epackagetype().data(), this->m_epackagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_epackagetype(), target);
  }

  // optional int32 m_dh = 8;
  if (has_m_dh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_dh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MarketConstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_taxrate = 2;
    if (has_m_taxrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_taxrate());
    }

    // optional int32 m_bpselltime = 3;
    if (has_m_bpselltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bpselltime());
    }

    // optional int32 m_sellnum = 4;
    if (has_m_sellnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sellnum());
    }

    // optional int32 m_recyclenum = 5;
    if (has_m_recyclenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_recyclenum());
    }

    // optional int32 m_gz = 6;
    if (has_m_gz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gz());
    }

    // optional string m_epackagetype = 7;
    if (has_m_epackagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_epackagetype());
    }

    // optional int32 m_dh = 8;
    if (has_m_dh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dh());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MarketConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MarketConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MarketConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MarketConstant::MergeFrom(const E_MarketConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_taxrate()) {
      set_m_taxrate(from.m_taxrate());
    }
    if (from.has_m_bpselltime()) {
      set_m_bpselltime(from.m_bpselltime());
    }
    if (from.has_m_sellnum()) {
      set_m_sellnum(from.m_sellnum());
    }
    if (from.has_m_recyclenum()) {
      set_m_recyclenum(from.m_recyclenum());
    }
    if (from.has_m_gz()) {
      set_m_gz(from.m_gz());
    }
    if (from.has_m_epackagetype()) {
      set_m_epackagetype(from.m_epackagetype());
    }
    if (from.has_m_dh()) {
      set_m_dh(from.m_dh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MarketConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MarketConstant::CopyFrom(const E_MarketConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MarketConstant::IsInitialized() const {

  return true;
}

void E_MarketConstant::Swap(E_MarketConstant* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_taxrate_, other->m_taxrate_);
    std::swap(m_bpselltime_, other->m_bpselltime_);
    std::swap(m_sellnum_, other->m_sellnum_);
    std::swap(m_recyclenum_, other->m_recyclenum_);
    std::swap(m_gz_, other->m_gz_);
    std::swap(m_epackagetype_, other->m_epackagetype_);
    std::swap(m_dh_, other->m_dh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MarketConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MarketConstant_descriptor_;
  metadata.reflection = E_MarketConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MarketConstant::kEMarketConstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_MarketConstant::Sheet_MarketConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MarketConstant::InitAsDefaultInstance() {
}

Sheet_MarketConstant::Sheet_MarketConstant(const Sheet_MarketConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MarketConstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MarketConstant::~Sheet_MarketConstant() {
  SharedDtor();
}

void Sheet_MarketConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MarketConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MarketConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MarketConstant_descriptor_;
}

const Sheet_MarketConstant& Sheet_MarketConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fMarket_2eproto();
  return *default_instance_;
}

Sheet_MarketConstant* Sheet_MarketConstant::default_instance_ = NULL;

Sheet_MarketConstant* Sheet_MarketConstant::New() const {
  return new Sheet_MarketConstant;
}

void Sheet_MarketConstant::Clear() {
  e_marketconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MarketConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MarketConstant E_MarketConstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MarketConstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_marketconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MarketConstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MarketConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MarketConstant E_MarketConstant_List = 1;
  for (int i = 0; i < this->e_marketconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_marketconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MarketConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MarketConstant E_MarketConstant_List = 1;
  for (int i = 0; i < this->e_marketconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_marketconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MarketConstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MarketConstant E_MarketConstant_List = 1;
  total_size += 1 * this->e_marketconstant_list_size();
  for (int i = 0; i < this->e_marketconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_marketconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MarketConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MarketConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MarketConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MarketConstant::MergeFrom(const Sheet_MarketConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_marketconstant_list_.MergeFrom(from.e_marketconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MarketConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MarketConstant::CopyFrom(const Sheet_MarketConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MarketConstant::IsInitialized() const {

  return true;
}

void Sheet_MarketConstant::Swap(Sheet_MarketConstant* other) {
  if (other != this) {
    e_marketconstant_list_.Swap(&other->e_marketconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MarketConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MarketConstant_descriptor_;
  metadata.reflection = Sheet_MarketConstant_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
