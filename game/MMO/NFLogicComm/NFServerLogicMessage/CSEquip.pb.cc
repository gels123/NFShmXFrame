// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSEquip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSEquip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* EquipInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipUnDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipUnDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipUnDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipUnDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyEquipInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyEquipInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipStrongReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipStrongReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipStrongRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipStrongRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipLvAttrActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipLvAttrActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipLvAttrActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipLvAttrActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyEquipLvAttrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyEquipLvAttrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoneInlayReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoneInlayReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoneInlayRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoneInlayRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoneLvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoneLvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoneLvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoneLvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoneOpenSlotReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoneOpenSlotReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoneOpenSlotRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoneOpenSlotRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipStoveInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipStoveInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipStoveInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipStoveInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipStoveSmeltReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipStoveSmeltReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipStoveSmeltRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipStoveSmeltRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipWashUnlockReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipWashUnlockReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipWashUnlockRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipWashUnlockRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipWashReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipWashReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipWashRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipWashRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSuitLvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSuitLvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSuitLvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSuitLvRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CSEquip_2eproto() {
  protobuf_AddDesc_CSEquip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CSEquip.proto");
  GOOGLE_CHECK(file != NULL);
  EquipInfoList_descriptor_ = file->message_type(0);
  static const int EquipInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfoList, infos_),
  };
  EquipInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipInfoList_descriptor_,
      EquipInfoList::default_instance_,
      EquipInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipInfoList));
  EquipDressReq_descriptor_ = file->message_type(1);
  static const int EquipDressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDressReq, bag_pos_),
  };
  EquipDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipDressReq_descriptor_,
      EquipDressReq::default_instance_,
      EquipDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipDressReq));
  EquipDressRsp_descriptor_ = file->message_type(2);
  static const int EquipDressRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDressRsp, bag_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDressRsp, ret_),
  };
  EquipDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipDressRsp_descriptor_,
      EquipDressRsp::default_instance_,
      EquipDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipDressRsp));
  EquipUnDressReq_descriptor_ = file->message_type(3);
  static const int EquipUnDressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUnDressReq, slot_pos_),
  };
  EquipUnDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipUnDressReq_descriptor_,
      EquipUnDressReq::default_instance_,
      EquipUnDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUnDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUnDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipUnDressReq));
  EquipUnDressRsp_descriptor_ = file->message_type(4);
  static const int EquipUnDressRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUnDressRsp, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUnDressRsp, ret_),
  };
  EquipUnDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipUnDressRsp_descriptor_,
      EquipUnDressRsp::default_instance_,
      EquipUnDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUnDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUnDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipUnDressRsp));
  NotifyEquipInfoRsp_descriptor_ = file->message_type(5);
  static const int NotifyEquipInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEquipInfoRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEquipInfoRsp, infos_),
  };
  NotifyEquipInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyEquipInfoRsp_descriptor_,
      NotifyEquipInfoRsp::default_instance_,
      NotifyEquipInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEquipInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEquipInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyEquipInfoRsp));
  EquipStrongReq_descriptor_ = file->message_type(6);
  static const int EquipStrongReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrongReq, slot_pos_),
  };
  EquipStrongReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipStrongReq_descriptor_,
      EquipStrongReq::default_instance_,
      EquipStrongReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrongReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrongReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipStrongReq));
  EquipStrongRsp_descriptor_ = file->message_type(7);
  static const int EquipStrongRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrongRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrongRsp, slot_pos_),
  };
  EquipStrongRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipStrongRsp_descriptor_,
      EquipStrongRsp::default_instance_,
      EquipStrongRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrongRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrongRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipStrongRsp));
  EquipLvAttrActiveReq_descriptor_ = file->message_type(8);
  static const int EquipLvAttrActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLvAttrActiveReq, type_),
  };
  EquipLvAttrActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipLvAttrActiveReq_descriptor_,
      EquipLvAttrActiveReq::default_instance_,
      EquipLvAttrActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLvAttrActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLvAttrActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipLvAttrActiveReq));
  EquipLvAttrActiveRsp_descriptor_ = file->message_type(9);
  static const int EquipLvAttrActiveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLvAttrActiveRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLvAttrActiveRsp, type_),
  };
  EquipLvAttrActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipLvAttrActiveRsp_descriptor_,
      EquipLvAttrActiveRsp::default_instance_,
      EquipLvAttrActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLvAttrActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLvAttrActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipLvAttrActiveRsp));
  NotifyEquipLvAttrRsp_descriptor_ = file->message_type(10);
  static const int NotifyEquipLvAttrRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEquipLvAttrRsp, lv_attr_),
  };
  NotifyEquipLvAttrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyEquipLvAttrRsp_descriptor_,
      NotifyEquipLvAttrRsp::default_instance_,
      NotifyEquipLvAttrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEquipLvAttrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyEquipLvAttrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyEquipLvAttrRsp));
  StoneInlayReq_descriptor_ = file->message_type(11);
  static const int StoneInlayReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayReq, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayReq, stone_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayReq, bag_pos_),
  };
  StoneInlayReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoneInlayReq_descriptor_,
      StoneInlayReq::default_instance_,
      StoneInlayReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoneInlayReq));
  StoneInlayRsp_descriptor_ = file->message_type(12);
  static const int StoneInlayRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayRsp, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayRsp, stone_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayRsp, bag_pos_),
  };
  StoneInlayRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoneInlayRsp_descriptor_,
      StoneInlayRsp::default_instance_,
      StoneInlayRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInlayRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoneInlayRsp));
  StoneLvReq_descriptor_ = file->message_type(13);
  static const int StoneLvReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneLvReq, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneLvReq, stone_pos_),
  };
  StoneLvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoneLvReq_descriptor_,
      StoneLvReq::default_instance_,
      StoneLvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneLvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneLvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoneLvReq));
  StoneLvRsp_descriptor_ = file->message_type(14);
  static const int StoneLvRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneLvRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneLvRsp, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneLvRsp, stone_pos_),
  };
  StoneLvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoneLvRsp_descriptor_,
      StoneLvRsp::default_instance_,
      StoneLvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneLvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneLvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoneLvRsp));
  StoneOpenSlotReq_descriptor_ = file->message_type(15);
  static const int StoneOpenSlotReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneOpenSlotReq, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneOpenSlotReq, stone_pos_),
  };
  StoneOpenSlotReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoneOpenSlotReq_descriptor_,
      StoneOpenSlotReq::default_instance_,
      StoneOpenSlotReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneOpenSlotReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneOpenSlotReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoneOpenSlotReq));
  StoneOpenSlotRsp_descriptor_ = file->message_type(16);
  static const int StoneOpenSlotRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneOpenSlotRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneOpenSlotRsp, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneOpenSlotRsp, stone_pos_),
  };
  StoneOpenSlotRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoneOpenSlotRsp_descriptor_,
      StoneOpenSlotRsp::default_instance_,
      StoneOpenSlotRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneOpenSlotRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneOpenSlotRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoneOpenSlotRsp));
  EquipStoveInfoReq_descriptor_ = file->message_type(17);
  static const int EquipStoveInfoReq_offsets_[1] = {
  };
  EquipStoveInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipStoveInfoReq_descriptor_,
      EquipStoveInfoReq::default_instance_,
      EquipStoveInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipStoveInfoReq));
  EquipStoveInfoRsp_descriptor_ = file->message_type(18);
  static const int EquipStoveInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveInfoRsp, stove_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveInfoRsp, stove_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveInfoRsp, attrs_),
  };
  EquipStoveInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipStoveInfoRsp_descriptor_,
      EquipStoveInfoRsp::default_instance_,
      EquipStoveInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipStoveInfoRsp));
  EquipStoveSmeltReq_descriptor_ = file->message_type(19);
  static const int EquipStoveSmeltReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveSmeltReq, gridlist_),
  };
  EquipStoveSmeltReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipStoveSmeltReq_descriptor_,
      EquipStoveSmeltReq::default_instance_,
      EquipStoveSmeltReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveSmeltReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveSmeltReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipStoveSmeltReq));
  EquipStoveSmeltRsp_descriptor_ = file->message_type(20);
  static const int EquipStoveSmeltRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveSmeltRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveSmeltRsp, stove_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveSmeltRsp, stove_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveSmeltRsp, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveSmeltRsp, all_num_),
  };
  EquipStoveSmeltRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipStoveSmeltRsp_descriptor_,
      EquipStoveSmeltRsp::default_instance_,
      EquipStoveSmeltRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveSmeltRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoveSmeltRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipStoveSmeltRsp));
  EquipWashUnlockReq_descriptor_ = file->message_type(21);
  static const int EquipWashUnlockReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashUnlockReq, equip_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashUnlockReq, wash_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashUnlockReq, useitem_),
  };
  EquipWashUnlockReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipWashUnlockReq_descriptor_,
      EquipWashUnlockReq::default_instance_,
      EquipWashUnlockReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashUnlockReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashUnlockReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipWashUnlockReq));
  EquipWashUnlockRsp_descriptor_ = file->message_type(22);
  static const int EquipWashUnlockRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashUnlockRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashUnlockRsp, equip_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashUnlockRsp, wash_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashUnlockRsp, useitem_),
  };
  EquipWashUnlockRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipWashUnlockRsp_descriptor_,
      EquipWashUnlockRsp::default_instance_,
      EquipWashUnlockRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashUnlockRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashUnlockRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipWashUnlockRsp));
  EquipWashReq_descriptor_ = file->message_type(23);
  static const int EquipWashReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashReq, equip_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashReq, lock_wash_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashReq, useitem_),
  };
  EquipWashReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipWashReq_descriptor_,
      EquipWashReq::default_instance_,
      EquipWashReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipWashReq));
  EquipWashRsp_descriptor_ = file->message_type(24);
  static const int EquipWashRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashRsp, equip_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashRsp, lockslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashRsp, useitem_),
  };
  EquipWashRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipWashRsp_descriptor_,
      EquipWashRsp::default_instance_,
      EquipWashRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipWashRsp));
  EquipSuitLvReq_descriptor_ = file->message_type(25);
  static const int EquipSuitLvReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSuitLvReq, equip_pos_),
  };
  EquipSuitLvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSuitLvReq_descriptor_,
      EquipSuitLvReq::default_instance_,
      EquipSuitLvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSuitLvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSuitLvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSuitLvReq));
  EquipSuitLvRsp_descriptor_ = file->message_type(26);
  static const int EquipSuitLvRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSuitLvRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSuitLvRsp, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSuitLvRsp, suitlv_),
  };
  EquipSuitLvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSuitLvRsp_descriptor_,
      EquipSuitLvRsp::default_instance_,
      EquipSuitLvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSuitLvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSuitLvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSuitLvRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CSEquip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipInfoList_descriptor_, &EquipInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipDressReq_descriptor_, &EquipDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipDressRsp_descriptor_, &EquipDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipUnDressReq_descriptor_, &EquipUnDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipUnDressRsp_descriptor_, &EquipUnDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyEquipInfoRsp_descriptor_, &NotifyEquipInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipStrongReq_descriptor_, &EquipStrongReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipStrongRsp_descriptor_, &EquipStrongRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipLvAttrActiveReq_descriptor_, &EquipLvAttrActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipLvAttrActiveRsp_descriptor_, &EquipLvAttrActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyEquipLvAttrRsp_descriptor_, &NotifyEquipLvAttrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoneInlayReq_descriptor_, &StoneInlayReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoneInlayRsp_descriptor_, &StoneInlayRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoneLvReq_descriptor_, &StoneLvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoneLvRsp_descriptor_, &StoneLvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoneOpenSlotReq_descriptor_, &StoneOpenSlotReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoneOpenSlotRsp_descriptor_, &StoneOpenSlotRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipStoveInfoReq_descriptor_, &EquipStoveInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipStoveInfoRsp_descriptor_, &EquipStoveInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipStoveSmeltReq_descriptor_, &EquipStoveSmeltReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipStoveSmeltRsp_descriptor_, &EquipStoveSmeltRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipWashUnlockReq_descriptor_, &EquipWashUnlockReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipWashUnlockRsp_descriptor_, &EquipWashUnlockRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipWashReq_descriptor_, &EquipWashReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipWashRsp_descriptor_, &EquipWashRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSuitLvReq_descriptor_, &EquipSuitLvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSuitLvRsp_descriptor_, &EquipSuitLvRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CSEquip_2eproto() {
  delete EquipInfoList::default_instance_;
  delete EquipInfoList_reflection_;
  delete EquipDressReq::default_instance_;
  delete EquipDressReq_reflection_;
  delete EquipDressRsp::default_instance_;
  delete EquipDressRsp_reflection_;
  delete EquipUnDressReq::default_instance_;
  delete EquipUnDressReq_reflection_;
  delete EquipUnDressRsp::default_instance_;
  delete EquipUnDressRsp_reflection_;
  delete NotifyEquipInfoRsp::default_instance_;
  delete NotifyEquipInfoRsp_reflection_;
  delete EquipStrongReq::default_instance_;
  delete EquipStrongReq_reflection_;
  delete EquipStrongRsp::default_instance_;
  delete EquipStrongRsp_reflection_;
  delete EquipLvAttrActiveReq::default_instance_;
  delete EquipLvAttrActiveReq_reflection_;
  delete EquipLvAttrActiveRsp::default_instance_;
  delete EquipLvAttrActiveRsp_reflection_;
  delete NotifyEquipLvAttrRsp::default_instance_;
  delete NotifyEquipLvAttrRsp_reflection_;
  delete StoneInlayReq::default_instance_;
  delete StoneInlayReq_reflection_;
  delete StoneInlayRsp::default_instance_;
  delete StoneInlayRsp_reflection_;
  delete StoneLvReq::default_instance_;
  delete StoneLvReq_reflection_;
  delete StoneLvRsp::default_instance_;
  delete StoneLvRsp_reflection_;
  delete StoneOpenSlotReq::default_instance_;
  delete StoneOpenSlotReq_reflection_;
  delete StoneOpenSlotRsp::default_instance_;
  delete StoneOpenSlotRsp_reflection_;
  delete EquipStoveInfoReq::default_instance_;
  delete EquipStoveInfoReq_reflection_;
  delete EquipStoveInfoRsp::default_instance_;
  delete EquipStoveInfoRsp_reflection_;
  delete EquipStoveSmeltReq::default_instance_;
  delete EquipStoveSmeltReq_reflection_;
  delete EquipStoveSmeltRsp::default_instance_;
  delete EquipStoveSmeltRsp_reflection_;
  delete EquipWashUnlockReq::default_instance_;
  delete EquipWashUnlockReq_reflection_;
  delete EquipWashUnlockRsp::default_instance_;
  delete EquipWashUnlockRsp_reflection_;
  delete EquipWashReq::default_instance_;
  delete EquipWashReq_reflection_;
  delete EquipWashRsp::default_instance_;
  delete EquipWashRsp_reflection_;
  delete EquipSuitLvReq::default_instance_;
  delete EquipSuitLvReq_reflection_;
  delete EquipSuitLvRsp::default_instance_;
  delete EquipSuitLvRsp_reflection_;
}

void protobuf_AddDesc_CSEquip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rCSEquip.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\032\022common_logic.proto\032\tCom.proto\""
    "3\n\rEquipInfoList\022\"\n\005infos\030\001 \003(\0132\023.proto_"
    "ff.EquipInfo\" \n\rEquipDressReq\022\017\n\007bag_pos"
    "\030\001 \001(\005\"-\n\rEquipDressRsp\022\017\n\007bag_pos\030\001 \001(\005"
    "\022\013\n\003ret\030\002 \001(\005\"#\n\017EquipUnDressReq\022\020\n\010slot"
    "_pos\030\001 \001(\005\"0\n\017EquipUnDressRsp\022\020\n\010slot_po"
    "s\030\001 \001(\005\022\013\n\003ret\030\002 \001(\005\"F\n\022NotifyEquipInfoR"
    "sp\022\014\n\004type\030\001 \001(\005\022\"\n\005infos\030\002 \003(\0132\023.proto_"
    "ff.EquipInfo\"\"\n\016EquipStrongReq\022\020\n\010slot_p"
    "os\030\001 \001(\005\"/\n\016EquipStrongRsp\022\013\n\003ret\030\001 \001(\005\022"
    "\020\n\010slot_pos\030\002 \001(\005\"$\n\024EquipLvAttrActiveRe"
    "q\022\014\n\004type\030\001 \001(\005\"1\n\024EquipLvAttrActiveRsp\022"
    "\013\n\003ret\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\"B\n\024NotifyEqui"
    "pLvAttrRsp\022*\n\007lv_attr\030\003 \003(\0132\031.proto_ff.E"
    "quipLvAttrInfo\"E\n\rStoneInlayReq\022\020\n\010slot_"
    "pos\030\001 \001(\005\022\021\n\tstone_pos\030\002 \001(\005\022\017\n\007bag_pos\030"
    "\003 \001(\005\"R\n\rStoneInlayRsp\022\013\n\003ret\030\001 \001(\005\022\020\n\010s"
    "lot_pos\030\002 \001(\005\022\021\n\tstone_pos\030\003 \001(\005\022\017\n\007bag_"
    "pos\030\004 \001(\005\"1\n\nStoneLvReq\022\020\n\010slot_pos\030\001 \001("
    "\005\022\021\n\tstone_pos\030\002 \001(\005\">\n\nStoneLvRsp\022\013\n\003re"
    "t\030\001 \001(\005\022\020\n\010slot_pos\030\002 \001(\005\022\021\n\tstone_pos\030\003"
    " \001(\005\"7\n\020StoneOpenSlotReq\022\020\n\010slot_pos\030\001 \001"
    "(\005\022\021\n\tstone_pos\030\002 \001(\005\"D\n\020StoneOpenSlotRs"
    "p\022\013\n\003ret\030\001 \001(\005\022\020\n\010slot_pos\030\002 \001(\005\022\021\n\tston"
    "e_pos\030\003 \001(\005\"\023\n\021EquipStoveInfoReq\"\\\n\021Equi"
    "pStoveInfoRsp\022\023\n\013stove_level\030\001 \001(\r\022\021\n\tst"
    "ove_exp\030\002 \001(\004\022\037\n\005attrs\030\003 \003(\0132\020.proto_ff."
    "Attr64\"&\n\022EquipStoveSmeltReq\022\020\n\010gridlist"
    "\030\001 \003(\r\"\177\n\022EquipStoveSmeltRsp\022\017\n\007retcode\030"
    "\001 \001(\r\022\023\n\013stove_level\030\002 \001(\r\022\021\n\tstove_exp\030"
    "\003 \001(\004\022\037\n\005attrs\030\004 \003(\0132\020.proto_ff.Attr64\022\017"
    "\n\007all_num\030\005 \001(\r\"L\n\022EquipWashUnlockReq\022\022\n"
    "\nequip_slot\030\001 \001(\005\022\021\n\twash_slot\030\002 \001(\005\022\017\n\007"
    "useItem\030\003 \001(\005\"Y\n\022EquipWashUnlockRsp\022\013\n\003r"
    "et\030\001 \001(\005\022\022\n\nequip_slot\030\002 \001(\005\022\021\n\twash_slo"
    "t\030\003 \001(\005\022\017\n\007useItem\030\004 \001(\005\"K\n\014EquipWashReq"
    "\022\022\n\nequip_slot\030\001 \001(\005\022\026\n\016lock_wash_slot\030\002"
    " \003(\005\022\017\n\007useItem\030\003 \001(\003\"R\n\014EquipWashRsp\022\013\n"
    "\003ret\030\001 \001(\005\022\022\n\nequip_slot\030\002 \001(\005\022\020\n\010locksl"
    "ot\030\003 \003(\005\022\017\n\007useItem\030\004 \001(\003\"#\n\016EquipSuitLv"
    "Req\022\021\n\tequip_pos\030\001 \001(\005\"@\n\016EquipSuitLvRsp"
    "\022\013\n\003ret\030\001 \001(\005\022\021\n\tequip_pos\030\002 \001(\005\022\016\n\006suit"
    "lv\030\003 \001(\005", 1728);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSEquip.proto", &protobuf_RegisterTypes);
  EquipInfoList::default_instance_ = new EquipInfoList();
  EquipDressReq::default_instance_ = new EquipDressReq();
  EquipDressRsp::default_instance_ = new EquipDressRsp();
  EquipUnDressReq::default_instance_ = new EquipUnDressReq();
  EquipUnDressRsp::default_instance_ = new EquipUnDressRsp();
  NotifyEquipInfoRsp::default_instance_ = new NotifyEquipInfoRsp();
  EquipStrongReq::default_instance_ = new EquipStrongReq();
  EquipStrongRsp::default_instance_ = new EquipStrongRsp();
  EquipLvAttrActiveReq::default_instance_ = new EquipLvAttrActiveReq();
  EquipLvAttrActiveRsp::default_instance_ = new EquipLvAttrActiveRsp();
  NotifyEquipLvAttrRsp::default_instance_ = new NotifyEquipLvAttrRsp();
  StoneInlayReq::default_instance_ = new StoneInlayReq();
  StoneInlayRsp::default_instance_ = new StoneInlayRsp();
  StoneLvReq::default_instance_ = new StoneLvReq();
  StoneLvRsp::default_instance_ = new StoneLvRsp();
  StoneOpenSlotReq::default_instance_ = new StoneOpenSlotReq();
  StoneOpenSlotRsp::default_instance_ = new StoneOpenSlotRsp();
  EquipStoveInfoReq::default_instance_ = new EquipStoveInfoReq();
  EquipStoveInfoRsp::default_instance_ = new EquipStoveInfoRsp();
  EquipStoveSmeltReq::default_instance_ = new EquipStoveSmeltReq();
  EquipStoveSmeltRsp::default_instance_ = new EquipStoveSmeltRsp();
  EquipWashUnlockReq::default_instance_ = new EquipWashUnlockReq();
  EquipWashUnlockRsp::default_instance_ = new EquipWashUnlockRsp();
  EquipWashReq::default_instance_ = new EquipWashReq();
  EquipWashRsp::default_instance_ = new EquipWashRsp();
  EquipSuitLvReq::default_instance_ = new EquipSuitLvReq();
  EquipSuitLvRsp::default_instance_ = new EquipSuitLvRsp();
  EquipInfoList::default_instance_->InitAsDefaultInstance();
  EquipDressReq::default_instance_->InitAsDefaultInstance();
  EquipDressRsp::default_instance_->InitAsDefaultInstance();
  EquipUnDressReq::default_instance_->InitAsDefaultInstance();
  EquipUnDressRsp::default_instance_->InitAsDefaultInstance();
  NotifyEquipInfoRsp::default_instance_->InitAsDefaultInstance();
  EquipStrongReq::default_instance_->InitAsDefaultInstance();
  EquipStrongRsp::default_instance_->InitAsDefaultInstance();
  EquipLvAttrActiveReq::default_instance_->InitAsDefaultInstance();
  EquipLvAttrActiveRsp::default_instance_->InitAsDefaultInstance();
  NotifyEquipLvAttrRsp::default_instance_->InitAsDefaultInstance();
  StoneInlayReq::default_instance_->InitAsDefaultInstance();
  StoneInlayRsp::default_instance_->InitAsDefaultInstance();
  StoneLvReq::default_instance_->InitAsDefaultInstance();
  StoneLvRsp::default_instance_->InitAsDefaultInstance();
  StoneOpenSlotReq::default_instance_->InitAsDefaultInstance();
  StoneOpenSlotRsp::default_instance_->InitAsDefaultInstance();
  EquipStoveInfoReq::default_instance_->InitAsDefaultInstance();
  EquipStoveInfoRsp::default_instance_->InitAsDefaultInstance();
  EquipStoveSmeltReq::default_instance_->InitAsDefaultInstance();
  EquipStoveSmeltRsp::default_instance_->InitAsDefaultInstance();
  EquipWashUnlockReq::default_instance_->InitAsDefaultInstance();
  EquipWashUnlockRsp::default_instance_->InitAsDefaultInstance();
  EquipWashReq::default_instance_->InitAsDefaultInstance();
  EquipWashRsp::default_instance_->InitAsDefaultInstance();
  EquipSuitLvReq::default_instance_->InitAsDefaultInstance();
  EquipSuitLvRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSEquip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSEquip_2eproto {
  StaticDescriptorInitializer_CSEquip_2eproto() {
    protobuf_AddDesc_CSEquip_2eproto();
  }
} static_descriptor_initializer_CSEquip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EquipInfoList::kInfosFieldNumber;
#endif  // !_MSC_VER

EquipInfoList::EquipInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipInfoList::InitAsDefaultInstance() {
}

EquipInfoList::EquipInfoList(const EquipInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipInfoList::~EquipInfoList() {
  SharedDtor();
}

void EquipInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipInfoList_descriptor_;
}

const EquipInfoList& EquipInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipInfoList* EquipInfoList::default_instance_ = NULL;

EquipInfoList* EquipInfoList::New() const {
  return new EquipInfoList;
}

void EquipInfoList::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.EquipInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.EquipInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.EquipInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.EquipInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipInfoList::MergeFrom(const EquipInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipInfoList::CopyFrom(const EquipInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipInfoList::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void EquipInfoList::Swap(EquipInfoList* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipInfoList_descriptor_;
  metadata.reflection = EquipInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipDressReq::kBagPosFieldNumber;
#endif  // !_MSC_VER

EquipDressReq::EquipDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipDressReq::InitAsDefaultInstance() {
}

EquipDressReq::EquipDressReq(const EquipDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipDressReq::SharedCtor() {
  _cached_size_ = 0;
  bag_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipDressReq::~EquipDressReq() {
  SharedDtor();
}

void EquipDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipDressReq_descriptor_;
}

const EquipDressReq& EquipDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipDressReq* EquipDressReq::default_instance_ = NULL;

EquipDressReq* EquipDressReq::New() const {
  return new EquipDressReq;
}

void EquipDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bag_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bag_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bag_pos = 1;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bag_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bag_pos = 1;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bag_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bag_pos = 1;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipDressReq::MergeFrom(const EquipDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipDressReq::CopyFrom(const EquipDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipDressReq::IsInitialized() const {

  return true;
}

void EquipDressReq::Swap(EquipDressReq* other) {
  if (other != this) {
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipDressReq_descriptor_;
  metadata.reflection = EquipDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipDressRsp::kBagPosFieldNumber;
const int EquipDressRsp::kRetFieldNumber;
#endif  // !_MSC_VER

EquipDressRsp::EquipDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipDressRsp::InitAsDefaultInstance() {
}

EquipDressRsp::EquipDressRsp(const EquipDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipDressRsp::SharedCtor() {
  _cached_size_ = 0;
  bag_pos_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipDressRsp::~EquipDressRsp() {
  SharedDtor();
}

void EquipDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipDressRsp_descriptor_;
}

const EquipDressRsp& EquipDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipDressRsp* EquipDressRsp::default_instance_ = NULL;

EquipDressRsp* EquipDressRsp::New() const {
  return new EquipDressRsp;
}

void EquipDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bag_pos_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bag_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bag_pos = 1;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bag_pos(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bag_pos = 1;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bag_pos(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bag_pos = 1;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_pos());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipDressRsp::MergeFrom(const EquipDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipDressRsp::CopyFrom(const EquipDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipDressRsp::IsInitialized() const {

  return true;
}

void EquipDressRsp::Swap(EquipDressRsp* other) {
  if (other != this) {
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipDressRsp_descriptor_;
  metadata.reflection = EquipDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipUnDressReq::kSlotPosFieldNumber;
#endif  // !_MSC_VER

EquipUnDressReq::EquipUnDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipUnDressReq::InitAsDefaultInstance() {
}

EquipUnDressReq::EquipUnDressReq(const EquipUnDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipUnDressReq::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipUnDressReq::~EquipUnDressReq() {
  SharedDtor();
}

void EquipUnDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipUnDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipUnDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipUnDressReq_descriptor_;
}

const EquipUnDressReq& EquipUnDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipUnDressReq* EquipUnDressReq::default_instance_ = NULL;

EquipUnDressReq* EquipUnDressReq::New() const {
  return new EquipUnDressReq;
}

void EquipUnDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipUnDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipUnDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipUnDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipUnDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipUnDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipUnDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipUnDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipUnDressReq::MergeFrom(const EquipUnDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipUnDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipUnDressReq::CopyFrom(const EquipUnDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipUnDressReq::IsInitialized() const {

  return true;
}

void EquipUnDressReq::Swap(EquipUnDressReq* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipUnDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipUnDressReq_descriptor_;
  metadata.reflection = EquipUnDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipUnDressRsp::kSlotPosFieldNumber;
const int EquipUnDressRsp::kRetFieldNumber;
#endif  // !_MSC_VER

EquipUnDressRsp::EquipUnDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipUnDressRsp::InitAsDefaultInstance() {
}

EquipUnDressRsp::EquipUnDressRsp(const EquipUnDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipUnDressRsp::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipUnDressRsp::~EquipUnDressRsp() {
  SharedDtor();
}

void EquipUnDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipUnDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipUnDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipUnDressRsp_descriptor_;
}

const EquipUnDressRsp& EquipUnDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipUnDressRsp* EquipUnDressRsp::default_instance_ = NULL;

EquipUnDressRsp* EquipUnDressRsp::New() const {
  return new EquipUnDressRsp;
}

void EquipUnDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipUnDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipUnDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_pos(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipUnDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_pos(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipUnDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipUnDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipUnDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipUnDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipUnDressRsp::MergeFrom(const EquipUnDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipUnDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipUnDressRsp::CopyFrom(const EquipUnDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipUnDressRsp::IsInitialized() const {

  return true;
}

void EquipUnDressRsp::Swap(EquipUnDressRsp* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipUnDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipUnDressRsp_descriptor_;
  metadata.reflection = EquipUnDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyEquipInfoRsp::kTypeFieldNumber;
const int NotifyEquipInfoRsp::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifyEquipInfoRsp::NotifyEquipInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyEquipInfoRsp::InitAsDefaultInstance() {
}

NotifyEquipInfoRsp::NotifyEquipInfoRsp(const NotifyEquipInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyEquipInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyEquipInfoRsp::~NotifyEquipInfoRsp() {
  SharedDtor();
}

void NotifyEquipInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyEquipInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyEquipInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyEquipInfoRsp_descriptor_;
}

const NotifyEquipInfoRsp& NotifyEquipInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

NotifyEquipInfoRsp* NotifyEquipInfoRsp::default_instance_ = NULL;

NotifyEquipInfoRsp* NotifyEquipInfoRsp::New() const {
  return new NotifyEquipInfoRsp;
}

void NotifyEquipInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyEquipInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.EquipInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyEquipInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.EquipInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyEquipInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.EquipInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyEquipInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.EquipInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyEquipInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyEquipInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyEquipInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyEquipInfoRsp::MergeFrom(const NotifyEquipInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyEquipInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyEquipInfoRsp::CopyFrom(const NotifyEquipInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyEquipInfoRsp::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyEquipInfoRsp::Swap(NotifyEquipInfoRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyEquipInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyEquipInfoRsp_descriptor_;
  metadata.reflection = NotifyEquipInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipStrongReq::kSlotPosFieldNumber;
#endif  // !_MSC_VER

EquipStrongReq::EquipStrongReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipStrongReq::InitAsDefaultInstance() {
}

EquipStrongReq::EquipStrongReq(const EquipStrongReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipStrongReq::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipStrongReq::~EquipStrongReq() {
  SharedDtor();
}

void EquipStrongReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipStrongReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipStrongReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipStrongReq_descriptor_;
}

const EquipStrongReq& EquipStrongReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipStrongReq* EquipStrongReq::default_instance_ = NULL;

EquipStrongReq* EquipStrongReq::New() const {
  return new EquipStrongReq;
}

void EquipStrongReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipStrongReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipStrongReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipStrongReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipStrongReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipStrongReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipStrongReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipStrongReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipStrongReq::MergeFrom(const EquipStrongReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipStrongReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipStrongReq::CopyFrom(const EquipStrongReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipStrongReq::IsInitialized() const {

  return true;
}

void EquipStrongReq::Swap(EquipStrongReq* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipStrongReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipStrongReq_descriptor_;
  metadata.reflection = EquipStrongReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipStrongRsp::kRetFieldNumber;
const int EquipStrongRsp::kSlotPosFieldNumber;
#endif  // !_MSC_VER

EquipStrongRsp::EquipStrongRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipStrongRsp::InitAsDefaultInstance() {
}

EquipStrongRsp::EquipStrongRsp(const EquipStrongRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipStrongRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  slot_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipStrongRsp::~EquipStrongRsp() {
  SharedDtor();
}

void EquipStrongRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipStrongRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipStrongRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipStrongRsp_descriptor_;
}

const EquipStrongRsp& EquipStrongRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipStrongRsp* EquipStrongRsp::default_instance_ = NULL;

EquipStrongRsp* EquipStrongRsp::New() const {
  return new EquipStrongRsp;
}

void EquipStrongRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    slot_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipStrongRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipStrongRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipStrongRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipStrongRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 slot_pos = 2;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipStrongRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipStrongRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipStrongRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipStrongRsp::MergeFrom(const EquipStrongRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipStrongRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipStrongRsp::CopyFrom(const EquipStrongRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipStrongRsp::IsInitialized() const {

  return true;
}

void EquipStrongRsp::Swap(EquipStrongRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipStrongRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipStrongRsp_descriptor_;
  metadata.reflection = EquipStrongRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipLvAttrActiveReq::kTypeFieldNumber;
#endif  // !_MSC_VER

EquipLvAttrActiveReq::EquipLvAttrActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipLvAttrActiveReq::InitAsDefaultInstance() {
}

EquipLvAttrActiveReq::EquipLvAttrActiveReq(const EquipLvAttrActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipLvAttrActiveReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipLvAttrActiveReq::~EquipLvAttrActiveReq() {
  SharedDtor();
}

void EquipLvAttrActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipLvAttrActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipLvAttrActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipLvAttrActiveReq_descriptor_;
}

const EquipLvAttrActiveReq& EquipLvAttrActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipLvAttrActiveReq* EquipLvAttrActiveReq::default_instance_ = NULL;

EquipLvAttrActiveReq* EquipLvAttrActiveReq::New() const {
  return new EquipLvAttrActiveReq;
}

void EquipLvAttrActiveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipLvAttrActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipLvAttrActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipLvAttrActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipLvAttrActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipLvAttrActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipLvAttrActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipLvAttrActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipLvAttrActiveReq::MergeFrom(const EquipLvAttrActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipLvAttrActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipLvAttrActiveReq::CopyFrom(const EquipLvAttrActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipLvAttrActiveReq::IsInitialized() const {

  return true;
}

void EquipLvAttrActiveReq::Swap(EquipLvAttrActiveReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipLvAttrActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipLvAttrActiveReq_descriptor_;
  metadata.reflection = EquipLvAttrActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipLvAttrActiveRsp::kRetFieldNumber;
const int EquipLvAttrActiveRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

EquipLvAttrActiveRsp::EquipLvAttrActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipLvAttrActiveRsp::InitAsDefaultInstance() {
}

EquipLvAttrActiveRsp::EquipLvAttrActiveRsp(const EquipLvAttrActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipLvAttrActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipLvAttrActiveRsp::~EquipLvAttrActiveRsp() {
  SharedDtor();
}

void EquipLvAttrActiveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipLvAttrActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipLvAttrActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipLvAttrActiveRsp_descriptor_;
}

const EquipLvAttrActiveRsp& EquipLvAttrActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipLvAttrActiveRsp* EquipLvAttrActiveRsp::default_instance_ = NULL;

EquipLvAttrActiveRsp* EquipLvAttrActiveRsp::New() const {
  return new EquipLvAttrActiveRsp;
}

void EquipLvAttrActiveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipLvAttrActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipLvAttrActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipLvAttrActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipLvAttrActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipLvAttrActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipLvAttrActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipLvAttrActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipLvAttrActiveRsp::MergeFrom(const EquipLvAttrActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipLvAttrActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipLvAttrActiveRsp::CopyFrom(const EquipLvAttrActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipLvAttrActiveRsp::IsInitialized() const {

  return true;
}

void EquipLvAttrActiveRsp::Swap(EquipLvAttrActiveRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipLvAttrActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipLvAttrActiveRsp_descriptor_;
  metadata.reflection = EquipLvAttrActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyEquipLvAttrRsp::kLvAttrFieldNumber;
#endif  // !_MSC_VER

NotifyEquipLvAttrRsp::NotifyEquipLvAttrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyEquipLvAttrRsp::InitAsDefaultInstance() {
}

NotifyEquipLvAttrRsp::NotifyEquipLvAttrRsp(const NotifyEquipLvAttrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyEquipLvAttrRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyEquipLvAttrRsp::~NotifyEquipLvAttrRsp() {
  SharedDtor();
}

void NotifyEquipLvAttrRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyEquipLvAttrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyEquipLvAttrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyEquipLvAttrRsp_descriptor_;
}

const NotifyEquipLvAttrRsp& NotifyEquipLvAttrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

NotifyEquipLvAttrRsp* NotifyEquipLvAttrRsp::default_instance_ = NULL;

NotifyEquipLvAttrRsp* NotifyEquipLvAttrRsp::New() const {
  return new NotifyEquipLvAttrRsp;
}

void NotifyEquipLvAttrRsp::Clear() {
  lv_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyEquipLvAttrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.EquipLvAttrInfo lv_attr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lv_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lv_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lv_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyEquipLvAttrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.EquipLvAttrInfo lv_attr = 3;
  for (int i = 0; i < this->lv_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lv_attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyEquipLvAttrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.EquipLvAttrInfo lv_attr = 3;
  for (int i = 0; i < this->lv_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lv_attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyEquipLvAttrRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.EquipLvAttrInfo lv_attr = 3;
  total_size += 1 * this->lv_attr_size();
  for (int i = 0; i < this->lv_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lv_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyEquipLvAttrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyEquipLvAttrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyEquipLvAttrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyEquipLvAttrRsp::MergeFrom(const NotifyEquipLvAttrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  lv_attr_.MergeFrom(from.lv_attr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyEquipLvAttrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyEquipLvAttrRsp::CopyFrom(const NotifyEquipLvAttrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyEquipLvAttrRsp::IsInitialized() const {

  return true;
}

void NotifyEquipLvAttrRsp::Swap(NotifyEquipLvAttrRsp* other) {
  if (other != this) {
    lv_attr_.Swap(&other->lv_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyEquipLvAttrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyEquipLvAttrRsp_descriptor_;
  metadata.reflection = NotifyEquipLvAttrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoneInlayReq::kSlotPosFieldNumber;
const int StoneInlayReq::kStonePosFieldNumber;
const int StoneInlayReq::kBagPosFieldNumber;
#endif  // !_MSC_VER

StoneInlayReq::StoneInlayReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoneInlayReq::InitAsDefaultInstance() {
}

StoneInlayReq::StoneInlayReq(const StoneInlayReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoneInlayReq::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0;
  stone_pos_ = 0;
  bag_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoneInlayReq::~StoneInlayReq() {
  SharedDtor();
}

void StoneInlayReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoneInlayReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoneInlayReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoneInlayReq_descriptor_;
}

const StoneInlayReq& StoneInlayReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

StoneInlayReq* StoneInlayReq::default_instance_ = NULL;

StoneInlayReq* StoneInlayReq::New() const {
  return new StoneInlayReq;
}

void StoneInlayReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0;
    stone_pos_ = 0;
    bag_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoneInlayReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stone_pos;
        break;
      }

      // optional int32 stone_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stone_pos_)));
          set_has_stone_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bag_pos;
        break;
      }

      // optional int32 bag_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoneInlayReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_pos(), output);
  }

  // optional int32 stone_pos = 2;
  if (has_stone_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stone_pos(), output);
  }

  // optional int32 bag_pos = 3;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bag_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoneInlayReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_pos(), target);
  }

  // optional int32 stone_pos = 2;
  if (has_stone_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stone_pos(), target);
  }

  // optional int32 bag_pos = 3;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bag_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoneInlayReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 stone_pos = 2;
    if (has_stone_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stone_pos());
    }

    // optional int32 bag_pos = 3;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoneInlayReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoneInlayReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoneInlayReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoneInlayReq::MergeFrom(const StoneInlayReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_stone_pos()) {
      set_stone_pos(from.stone_pos());
    }
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoneInlayReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoneInlayReq::CopyFrom(const StoneInlayReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoneInlayReq::IsInitialized() const {

  return true;
}

void StoneInlayReq::Swap(StoneInlayReq* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(stone_pos_, other->stone_pos_);
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoneInlayReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoneInlayReq_descriptor_;
  metadata.reflection = StoneInlayReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoneInlayRsp::kRetFieldNumber;
const int StoneInlayRsp::kSlotPosFieldNumber;
const int StoneInlayRsp::kStonePosFieldNumber;
const int StoneInlayRsp::kBagPosFieldNumber;
#endif  // !_MSC_VER

StoneInlayRsp::StoneInlayRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoneInlayRsp::InitAsDefaultInstance() {
}

StoneInlayRsp::StoneInlayRsp(const StoneInlayRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoneInlayRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  slot_pos_ = 0;
  stone_pos_ = 0;
  bag_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoneInlayRsp::~StoneInlayRsp() {
  SharedDtor();
}

void StoneInlayRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoneInlayRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoneInlayRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoneInlayRsp_descriptor_;
}

const StoneInlayRsp& StoneInlayRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

StoneInlayRsp* StoneInlayRsp::default_instance_ = NULL;

StoneInlayRsp* StoneInlayRsp::New() const {
  return new StoneInlayRsp;
}

void StoneInlayRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    slot_pos_ = 0;
    stone_pos_ = 0;
    bag_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoneInlayRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stone_pos;
        break;
      }

      // optional int32 stone_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stone_pos_)));
          set_has_stone_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bag_pos;
        break;
      }

      // optional int32 bag_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoneInlayRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_pos(), output);
  }

  // optional int32 stone_pos = 3;
  if (has_stone_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stone_pos(), output);
  }

  // optional int32 bag_pos = 4;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bag_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoneInlayRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_pos(), target);
  }

  // optional int32 stone_pos = 3;
  if (has_stone_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stone_pos(), target);
  }

  // optional int32 bag_pos = 4;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bag_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoneInlayRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 slot_pos = 2;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 stone_pos = 3;
    if (has_stone_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stone_pos());
    }

    // optional int32 bag_pos = 4;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoneInlayRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoneInlayRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoneInlayRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoneInlayRsp::MergeFrom(const StoneInlayRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_stone_pos()) {
      set_stone_pos(from.stone_pos());
    }
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoneInlayRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoneInlayRsp::CopyFrom(const StoneInlayRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoneInlayRsp::IsInitialized() const {

  return true;
}

void StoneInlayRsp::Swap(StoneInlayRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(stone_pos_, other->stone_pos_);
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoneInlayRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoneInlayRsp_descriptor_;
  metadata.reflection = StoneInlayRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoneLvReq::kSlotPosFieldNumber;
const int StoneLvReq::kStonePosFieldNumber;
#endif  // !_MSC_VER

StoneLvReq::StoneLvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoneLvReq::InitAsDefaultInstance() {
}

StoneLvReq::StoneLvReq(const StoneLvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoneLvReq::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0;
  stone_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoneLvReq::~StoneLvReq() {
  SharedDtor();
}

void StoneLvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoneLvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoneLvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoneLvReq_descriptor_;
}

const StoneLvReq& StoneLvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

StoneLvReq* StoneLvReq::default_instance_ = NULL;

StoneLvReq* StoneLvReq::New() const {
  return new StoneLvReq;
}

void StoneLvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0;
    stone_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoneLvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stone_pos;
        break;
      }

      // optional int32 stone_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stone_pos_)));
          set_has_stone_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoneLvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_pos(), output);
  }

  // optional int32 stone_pos = 2;
  if (has_stone_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stone_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoneLvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_pos(), target);
  }

  // optional int32 stone_pos = 2;
  if (has_stone_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stone_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoneLvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 stone_pos = 2;
    if (has_stone_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stone_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoneLvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoneLvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoneLvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoneLvReq::MergeFrom(const StoneLvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_stone_pos()) {
      set_stone_pos(from.stone_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoneLvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoneLvReq::CopyFrom(const StoneLvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoneLvReq::IsInitialized() const {

  return true;
}

void StoneLvReq::Swap(StoneLvReq* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(stone_pos_, other->stone_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoneLvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoneLvReq_descriptor_;
  metadata.reflection = StoneLvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoneLvRsp::kRetFieldNumber;
const int StoneLvRsp::kSlotPosFieldNumber;
const int StoneLvRsp::kStonePosFieldNumber;
#endif  // !_MSC_VER

StoneLvRsp::StoneLvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoneLvRsp::InitAsDefaultInstance() {
}

StoneLvRsp::StoneLvRsp(const StoneLvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoneLvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  slot_pos_ = 0;
  stone_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoneLvRsp::~StoneLvRsp() {
  SharedDtor();
}

void StoneLvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoneLvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoneLvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoneLvRsp_descriptor_;
}

const StoneLvRsp& StoneLvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

StoneLvRsp* StoneLvRsp::default_instance_ = NULL;

StoneLvRsp* StoneLvRsp::New() const {
  return new StoneLvRsp;
}

void StoneLvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    slot_pos_ = 0;
    stone_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoneLvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stone_pos;
        break;
      }

      // optional int32 stone_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stone_pos_)));
          set_has_stone_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoneLvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_pos(), output);
  }

  // optional int32 stone_pos = 3;
  if (has_stone_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stone_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoneLvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_pos(), target);
  }

  // optional int32 stone_pos = 3;
  if (has_stone_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stone_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoneLvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 slot_pos = 2;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 stone_pos = 3;
    if (has_stone_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stone_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoneLvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoneLvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoneLvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoneLvRsp::MergeFrom(const StoneLvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_stone_pos()) {
      set_stone_pos(from.stone_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoneLvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoneLvRsp::CopyFrom(const StoneLvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoneLvRsp::IsInitialized() const {

  return true;
}

void StoneLvRsp::Swap(StoneLvRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(stone_pos_, other->stone_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoneLvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoneLvRsp_descriptor_;
  metadata.reflection = StoneLvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoneOpenSlotReq::kSlotPosFieldNumber;
const int StoneOpenSlotReq::kStonePosFieldNumber;
#endif  // !_MSC_VER

StoneOpenSlotReq::StoneOpenSlotReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoneOpenSlotReq::InitAsDefaultInstance() {
}

StoneOpenSlotReq::StoneOpenSlotReq(const StoneOpenSlotReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoneOpenSlotReq::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0;
  stone_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoneOpenSlotReq::~StoneOpenSlotReq() {
  SharedDtor();
}

void StoneOpenSlotReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoneOpenSlotReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoneOpenSlotReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoneOpenSlotReq_descriptor_;
}

const StoneOpenSlotReq& StoneOpenSlotReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

StoneOpenSlotReq* StoneOpenSlotReq::default_instance_ = NULL;

StoneOpenSlotReq* StoneOpenSlotReq::New() const {
  return new StoneOpenSlotReq;
}

void StoneOpenSlotReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0;
    stone_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoneOpenSlotReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stone_pos;
        break;
      }

      // optional int32 stone_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stone_pos_)));
          set_has_stone_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoneOpenSlotReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_pos(), output);
  }

  // optional int32 stone_pos = 2;
  if (has_stone_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stone_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoneOpenSlotReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_pos(), target);
  }

  // optional int32 stone_pos = 2;
  if (has_stone_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stone_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoneOpenSlotReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 stone_pos = 2;
    if (has_stone_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stone_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoneOpenSlotReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoneOpenSlotReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoneOpenSlotReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoneOpenSlotReq::MergeFrom(const StoneOpenSlotReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_stone_pos()) {
      set_stone_pos(from.stone_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoneOpenSlotReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoneOpenSlotReq::CopyFrom(const StoneOpenSlotReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoneOpenSlotReq::IsInitialized() const {

  return true;
}

void StoneOpenSlotReq::Swap(StoneOpenSlotReq* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(stone_pos_, other->stone_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoneOpenSlotReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoneOpenSlotReq_descriptor_;
  metadata.reflection = StoneOpenSlotReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoneOpenSlotRsp::kRetFieldNumber;
const int StoneOpenSlotRsp::kSlotPosFieldNumber;
const int StoneOpenSlotRsp::kStonePosFieldNumber;
#endif  // !_MSC_VER

StoneOpenSlotRsp::StoneOpenSlotRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoneOpenSlotRsp::InitAsDefaultInstance() {
}

StoneOpenSlotRsp::StoneOpenSlotRsp(const StoneOpenSlotRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoneOpenSlotRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  slot_pos_ = 0;
  stone_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoneOpenSlotRsp::~StoneOpenSlotRsp() {
  SharedDtor();
}

void StoneOpenSlotRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoneOpenSlotRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoneOpenSlotRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoneOpenSlotRsp_descriptor_;
}

const StoneOpenSlotRsp& StoneOpenSlotRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

StoneOpenSlotRsp* StoneOpenSlotRsp::default_instance_ = NULL;

StoneOpenSlotRsp* StoneOpenSlotRsp::New() const {
  return new StoneOpenSlotRsp;
}

void StoneOpenSlotRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    slot_pos_ = 0;
    stone_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoneOpenSlotRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stone_pos;
        break;
      }

      // optional int32 stone_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stone_pos_)));
          set_has_stone_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoneOpenSlotRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_pos(), output);
  }

  // optional int32 stone_pos = 3;
  if (has_stone_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stone_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoneOpenSlotRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_pos(), target);
  }

  // optional int32 stone_pos = 3;
  if (has_stone_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stone_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoneOpenSlotRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 slot_pos = 2;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 stone_pos = 3;
    if (has_stone_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stone_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoneOpenSlotRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoneOpenSlotRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoneOpenSlotRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoneOpenSlotRsp::MergeFrom(const StoneOpenSlotRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_stone_pos()) {
      set_stone_pos(from.stone_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoneOpenSlotRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoneOpenSlotRsp::CopyFrom(const StoneOpenSlotRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoneOpenSlotRsp::IsInitialized() const {

  return true;
}

void StoneOpenSlotRsp::Swap(StoneOpenSlotRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(stone_pos_, other->stone_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoneOpenSlotRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoneOpenSlotRsp_descriptor_;
  metadata.reflection = StoneOpenSlotRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EquipStoveInfoReq::EquipStoveInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipStoveInfoReq::InitAsDefaultInstance() {
}

EquipStoveInfoReq::EquipStoveInfoReq(const EquipStoveInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipStoveInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipStoveInfoReq::~EquipStoveInfoReq() {
  SharedDtor();
}

void EquipStoveInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipStoveInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipStoveInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipStoveInfoReq_descriptor_;
}

const EquipStoveInfoReq& EquipStoveInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipStoveInfoReq* EquipStoveInfoReq::default_instance_ = NULL;

EquipStoveInfoReq* EquipStoveInfoReq::New() const {
  return new EquipStoveInfoReq;
}

void EquipStoveInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipStoveInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EquipStoveInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipStoveInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipStoveInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipStoveInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipStoveInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipStoveInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipStoveInfoReq::MergeFrom(const EquipStoveInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipStoveInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipStoveInfoReq::CopyFrom(const EquipStoveInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipStoveInfoReq::IsInitialized() const {

  return true;
}

void EquipStoveInfoReq::Swap(EquipStoveInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipStoveInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipStoveInfoReq_descriptor_;
  metadata.reflection = EquipStoveInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipStoveInfoRsp::kStoveLevelFieldNumber;
const int EquipStoveInfoRsp::kStoveExpFieldNumber;
const int EquipStoveInfoRsp::kAttrsFieldNumber;
#endif  // !_MSC_VER

EquipStoveInfoRsp::EquipStoveInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipStoveInfoRsp::InitAsDefaultInstance() {
}

EquipStoveInfoRsp::EquipStoveInfoRsp(const EquipStoveInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipStoveInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  stove_level_ = 0u;
  stove_exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipStoveInfoRsp::~EquipStoveInfoRsp() {
  SharedDtor();
}

void EquipStoveInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipStoveInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipStoveInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipStoveInfoRsp_descriptor_;
}

const EquipStoveInfoRsp& EquipStoveInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipStoveInfoRsp* EquipStoveInfoRsp::default_instance_ = NULL;

EquipStoveInfoRsp* EquipStoveInfoRsp::New() const {
  return new EquipStoveInfoRsp;
}

void EquipStoveInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stove_level_ = 0u;
    stove_exp_ = GOOGLE_ULONGLONG(0);
  }
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipStoveInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stove_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stove_level_)));
          set_has_stove_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stove_exp;
        break;
      }

      // optional uint64 stove_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stove_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stove_exp_)));
          set_has_stove_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attrs;
        break;
      }

      // repeated .proto_ff.Attr64 attrs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipStoveInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stove_level = 1;
  if (has_stove_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stove_level(), output);
  }

  // optional uint64 stove_exp = 2;
  if (has_stove_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stove_exp(), output);
  }

  // repeated .proto_ff.Attr64 attrs = 3;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipStoveInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stove_level = 1;
  if (has_stove_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stove_level(), target);
  }

  // optional uint64 stove_exp = 2;
  if (has_stove_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stove_exp(), target);
  }

  // repeated .proto_ff.Attr64 attrs = 3;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipStoveInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stove_level = 1;
    if (has_stove_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stove_level());
    }

    // optional uint64 stove_exp = 2;
    if (has_stove_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stove_exp());
    }

  }
  // repeated .proto_ff.Attr64 attrs = 3;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipStoveInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipStoveInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipStoveInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipStoveInfoRsp::MergeFrom(const EquipStoveInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stove_level()) {
      set_stove_level(from.stove_level());
    }
    if (from.has_stove_exp()) {
      set_stove_exp(from.stove_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipStoveInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipStoveInfoRsp::CopyFrom(const EquipStoveInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipStoveInfoRsp::IsInitialized() const {

  for (int i = 0; i < attrs_size(); i++) {
    if (!this->attrs(i).IsInitialized()) return false;
  }
  return true;
}

void EquipStoveInfoRsp::Swap(EquipStoveInfoRsp* other) {
  if (other != this) {
    std::swap(stove_level_, other->stove_level_);
    std::swap(stove_exp_, other->stove_exp_);
    attrs_.Swap(&other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipStoveInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipStoveInfoRsp_descriptor_;
  metadata.reflection = EquipStoveInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipStoveSmeltReq::kGridlistFieldNumber;
#endif  // !_MSC_VER

EquipStoveSmeltReq::EquipStoveSmeltReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipStoveSmeltReq::InitAsDefaultInstance() {
}

EquipStoveSmeltReq::EquipStoveSmeltReq(const EquipStoveSmeltReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipStoveSmeltReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipStoveSmeltReq::~EquipStoveSmeltReq() {
  SharedDtor();
}

void EquipStoveSmeltReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipStoveSmeltReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipStoveSmeltReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipStoveSmeltReq_descriptor_;
}

const EquipStoveSmeltReq& EquipStoveSmeltReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipStoveSmeltReq* EquipStoveSmeltReq::default_instance_ = NULL;

EquipStoveSmeltReq* EquipStoveSmeltReq::New() const {
  return new EquipStoveSmeltReq;
}

void EquipStoveSmeltReq::Clear() {
  gridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipStoveSmeltReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 gridlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_gridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_gridlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipStoveSmeltReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 gridlist = 1;
  for (int i = 0; i < this->gridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->gridlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipStoveSmeltReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 gridlist = 1;
  for (int i = 0; i < this->gridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->gridlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipStoveSmeltReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 gridlist = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->gridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gridlist(i));
    }
    total_size += 1 * this->gridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipStoveSmeltReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipStoveSmeltReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipStoveSmeltReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipStoveSmeltReq::MergeFrom(const EquipStoveSmeltReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridlist_.MergeFrom(from.gridlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipStoveSmeltReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipStoveSmeltReq::CopyFrom(const EquipStoveSmeltReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipStoveSmeltReq::IsInitialized() const {

  return true;
}

void EquipStoveSmeltReq::Swap(EquipStoveSmeltReq* other) {
  if (other != this) {
    gridlist_.Swap(&other->gridlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipStoveSmeltReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipStoveSmeltReq_descriptor_;
  metadata.reflection = EquipStoveSmeltReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipStoveSmeltRsp::kRetcodeFieldNumber;
const int EquipStoveSmeltRsp::kStoveLevelFieldNumber;
const int EquipStoveSmeltRsp::kStoveExpFieldNumber;
const int EquipStoveSmeltRsp::kAttrsFieldNumber;
const int EquipStoveSmeltRsp::kAllNumFieldNumber;
#endif  // !_MSC_VER

EquipStoveSmeltRsp::EquipStoveSmeltRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipStoveSmeltRsp::InitAsDefaultInstance() {
}

EquipStoveSmeltRsp::EquipStoveSmeltRsp(const EquipStoveSmeltRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipStoveSmeltRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  stove_level_ = 0u;
  stove_exp_ = GOOGLE_ULONGLONG(0);
  all_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipStoveSmeltRsp::~EquipStoveSmeltRsp() {
  SharedDtor();
}

void EquipStoveSmeltRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipStoveSmeltRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipStoveSmeltRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipStoveSmeltRsp_descriptor_;
}

const EquipStoveSmeltRsp& EquipStoveSmeltRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipStoveSmeltRsp* EquipStoveSmeltRsp::default_instance_ = NULL;

EquipStoveSmeltRsp* EquipStoveSmeltRsp::New() const {
  return new EquipStoveSmeltRsp;
}

void EquipStoveSmeltRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0u;
    stove_level_ = 0u;
    stove_exp_ = GOOGLE_ULONGLONG(0);
    all_num_ = 0u;
  }
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipStoveSmeltRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stove_level;
        break;
      }

      // optional uint32 stove_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stove_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stove_level_)));
          set_has_stove_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stove_exp;
        break;
      }

      // optional uint64 stove_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stove_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stove_exp_)));
          set_has_stove_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attrs;
        break;
      }

      // repeated .proto_ff.Attr64 attrs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attrs;
        if (input->ExpectTag(40)) goto parse_all_num;
        break;
      }

      // optional uint32 all_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_num_)));
          set_has_all_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipStoveSmeltRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional uint32 stove_level = 2;
  if (has_stove_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stove_level(), output);
  }

  // optional uint64 stove_exp = 3;
  if (has_stove_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->stove_exp(), output);
  }

  // repeated .proto_ff.Attr64 attrs = 4;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attrs(i), output);
  }

  // optional uint32 all_num = 5;
  if (has_all_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->all_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipStoveSmeltRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional uint32 stove_level = 2;
  if (has_stove_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stove_level(), target);
  }

  // optional uint64 stove_exp = 3;
  if (has_stove_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->stove_exp(), target);
  }

  // repeated .proto_ff.Attr64 attrs = 4;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attrs(i), target);
  }

  // optional uint32 all_num = 5;
  if (has_all_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->all_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipStoveSmeltRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional uint32 stove_level = 2;
    if (has_stove_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stove_level());
    }

    // optional uint64 stove_exp = 3;
    if (has_stove_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stove_exp());
    }

    // optional uint32 all_num = 5;
    if (has_all_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_num());
    }

  }
  // repeated .proto_ff.Attr64 attrs = 4;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipStoveSmeltRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipStoveSmeltRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipStoveSmeltRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipStoveSmeltRsp::MergeFrom(const EquipStoveSmeltRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_stove_level()) {
      set_stove_level(from.stove_level());
    }
    if (from.has_stove_exp()) {
      set_stove_exp(from.stove_exp());
    }
    if (from.has_all_num()) {
      set_all_num(from.all_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipStoveSmeltRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipStoveSmeltRsp::CopyFrom(const EquipStoveSmeltRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipStoveSmeltRsp::IsInitialized() const {

  for (int i = 0; i < attrs_size(); i++) {
    if (!this->attrs(i).IsInitialized()) return false;
  }
  return true;
}

void EquipStoveSmeltRsp::Swap(EquipStoveSmeltRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(stove_level_, other->stove_level_);
    std::swap(stove_exp_, other->stove_exp_);
    attrs_.Swap(&other->attrs_);
    std::swap(all_num_, other->all_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipStoveSmeltRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipStoveSmeltRsp_descriptor_;
  metadata.reflection = EquipStoveSmeltRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipWashUnlockReq::kEquipSlotFieldNumber;
const int EquipWashUnlockReq::kWashSlotFieldNumber;
const int EquipWashUnlockReq::kUseItemFieldNumber;
#endif  // !_MSC_VER

EquipWashUnlockReq::EquipWashUnlockReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipWashUnlockReq::InitAsDefaultInstance() {
}

EquipWashUnlockReq::EquipWashUnlockReq(const EquipWashUnlockReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipWashUnlockReq::SharedCtor() {
  _cached_size_ = 0;
  equip_slot_ = 0;
  wash_slot_ = 0;
  useitem_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipWashUnlockReq::~EquipWashUnlockReq() {
  SharedDtor();
}

void EquipWashUnlockReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipWashUnlockReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipWashUnlockReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipWashUnlockReq_descriptor_;
}

const EquipWashUnlockReq& EquipWashUnlockReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipWashUnlockReq* EquipWashUnlockReq::default_instance_ = NULL;

EquipWashUnlockReq* EquipWashUnlockReq::New() const {
  return new EquipWashUnlockReq;
}

void EquipWashUnlockReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_slot_ = 0;
    wash_slot_ = 0;
    useitem_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipWashUnlockReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 equip_slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_slot_)));
          set_has_equip_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wash_slot;
        break;
      }

      // optional int32 wash_slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wash_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wash_slot_)));
          set_has_wash_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_useItem;
        break;
      }

      // optional int32 useItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useitem_)));
          set_has_useitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipWashUnlockReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 equip_slot = 1;
  if (has_equip_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_slot(), output);
  }

  // optional int32 wash_slot = 2;
  if (has_wash_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wash_slot(), output);
  }

  // optional int32 useItem = 3;
  if (has_useitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->useitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipWashUnlockReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 equip_slot = 1;
  if (has_equip_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_slot(), target);
  }

  // optional int32 wash_slot = 2;
  if (has_wash_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wash_slot(), target);
  }

  // optional int32 useItem = 3;
  if (has_useitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->useitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipWashUnlockReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 equip_slot = 1;
    if (has_equip_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_slot());
    }

    // optional int32 wash_slot = 2;
    if (has_wash_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wash_slot());
    }

    // optional int32 useItem = 3;
    if (has_useitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useitem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipWashUnlockReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipWashUnlockReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipWashUnlockReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipWashUnlockReq::MergeFrom(const EquipWashUnlockReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_slot()) {
      set_equip_slot(from.equip_slot());
    }
    if (from.has_wash_slot()) {
      set_wash_slot(from.wash_slot());
    }
    if (from.has_useitem()) {
      set_useitem(from.useitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipWashUnlockReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipWashUnlockReq::CopyFrom(const EquipWashUnlockReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipWashUnlockReq::IsInitialized() const {

  return true;
}

void EquipWashUnlockReq::Swap(EquipWashUnlockReq* other) {
  if (other != this) {
    std::swap(equip_slot_, other->equip_slot_);
    std::swap(wash_slot_, other->wash_slot_);
    std::swap(useitem_, other->useitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipWashUnlockReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipWashUnlockReq_descriptor_;
  metadata.reflection = EquipWashUnlockReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipWashUnlockRsp::kRetFieldNumber;
const int EquipWashUnlockRsp::kEquipSlotFieldNumber;
const int EquipWashUnlockRsp::kWashSlotFieldNumber;
const int EquipWashUnlockRsp::kUseItemFieldNumber;
#endif  // !_MSC_VER

EquipWashUnlockRsp::EquipWashUnlockRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipWashUnlockRsp::InitAsDefaultInstance() {
}

EquipWashUnlockRsp::EquipWashUnlockRsp(const EquipWashUnlockRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipWashUnlockRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  equip_slot_ = 0;
  wash_slot_ = 0;
  useitem_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipWashUnlockRsp::~EquipWashUnlockRsp() {
  SharedDtor();
}

void EquipWashUnlockRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipWashUnlockRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipWashUnlockRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipWashUnlockRsp_descriptor_;
}

const EquipWashUnlockRsp& EquipWashUnlockRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipWashUnlockRsp* EquipWashUnlockRsp::default_instance_ = NULL;

EquipWashUnlockRsp* EquipWashUnlockRsp::New() const {
  return new EquipWashUnlockRsp;
}

void EquipWashUnlockRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    equip_slot_ = 0;
    wash_slot_ = 0;
    useitem_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipWashUnlockRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_slot;
        break;
      }

      // optional int32 equip_slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_slot_)));
          set_has_equip_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wash_slot;
        break;
      }

      // optional int32 wash_slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wash_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wash_slot_)));
          set_has_wash_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_useItem;
        break;
      }

      // optional int32 useItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useitem_)));
          set_has_useitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipWashUnlockRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 equip_slot = 2;
  if (has_equip_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_slot(), output);
  }

  // optional int32 wash_slot = 3;
  if (has_wash_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wash_slot(), output);
  }

  // optional int32 useItem = 4;
  if (has_useitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->useitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipWashUnlockRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 equip_slot = 2;
  if (has_equip_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_slot(), target);
  }

  // optional int32 wash_slot = 3;
  if (has_wash_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wash_slot(), target);
  }

  // optional int32 useItem = 4;
  if (has_useitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->useitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipWashUnlockRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 equip_slot = 2;
    if (has_equip_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_slot());
    }

    // optional int32 wash_slot = 3;
    if (has_wash_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wash_slot());
    }

    // optional int32 useItem = 4;
    if (has_useitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useitem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipWashUnlockRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipWashUnlockRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipWashUnlockRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipWashUnlockRsp::MergeFrom(const EquipWashUnlockRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_equip_slot()) {
      set_equip_slot(from.equip_slot());
    }
    if (from.has_wash_slot()) {
      set_wash_slot(from.wash_slot());
    }
    if (from.has_useitem()) {
      set_useitem(from.useitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipWashUnlockRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipWashUnlockRsp::CopyFrom(const EquipWashUnlockRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipWashUnlockRsp::IsInitialized() const {

  return true;
}

void EquipWashUnlockRsp::Swap(EquipWashUnlockRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(equip_slot_, other->equip_slot_);
    std::swap(wash_slot_, other->wash_slot_);
    std::swap(useitem_, other->useitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipWashUnlockRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipWashUnlockRsp_descriptor_;
  metadata.reflection = EquipWashUnlockRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipWashReq::kEquipSlotFieldNumber;
const int EquipWashReq::kLockWashSlotFieldNumber;
const int EquipWashReq::kUseItemFieldNumber;
#endif  // !_MSC_VER

EquipWashReq::EquipWashReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipWashReq::InitAsDefaultInstance() {
}

EquipWashReq::EquipWashReq(const EquipWashReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipWashReq::SharedCtor() {
  _cached_size_ = 0;
  equip_slot_ = 0;
  useitem_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipWashReq::~EquipWashReq() {
  SharedDtor();
}

void EquipWashReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipWashReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipWashReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipWashReq_descriptor_;
}

const EquipWashReq& EquipWashReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipWashReq* EquipWashReq::default_instance_ = NULL;

EquipWashReq* EquipWashReq::New() const {
  return new EquipWashReq;
}

void EquipWashReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_slot_ = 0;
    useitem_ = GOOGLE_LONGLONG(0);
  }
  lock_wash_slot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipWashReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 equip_slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_slot_)));
          set_has_equip_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lock_wash_slot;
        break;
      }

      // repeated int32 lock_wash_slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_wash_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_lock_wash_slot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lock_wash_slot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lock_wash_slot;
        if (input->ExpectTag(24)) goto parse_useItem;
        break;
      }

      // optional int64 useItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &useitem_)));
          set_has_useitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipWashReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 equip_slot = 1;
  if (has_equip_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_slot(), output);
  }

  // repeated int32 lock_wash_slot = 2;
  for (int i = 0; i < this->lock_wash_slot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->lock_wash_slot(i), output);
  }

  // optional int64 useItem = 3;
  if (has_useitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->useitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipWashReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 equip_slot = 1;
  if (has_equip_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_slot(), target);
  }

  // repeated int32 lock_wash_slot = 2;
  for (int i = 0; i < this->lock_wash_slot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->lock_wash_slot(i), target);
  }

  // optional int64 useItem = 3;
  if (has_useitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->useitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipWashReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 equip_slot = 1;
    if (has_equip_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_slot());
    }

    // optional int64 useItem = 3;
    if (has_useitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->useitem());
    }

  }
  // repeated int32 lock_wash_slot = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->lock_wash_slot_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lock_wash_slot(i));
    }
    total_size += 1 * this->lock_wash_slot_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipWashReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipWashReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipWashReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipWashReq::MergeFrom(const EquipWashReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  lock_wash_slot_.MergeFrom(from.lock_wash_slot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_slot()) {
      set_equip_slot(from.equip_slot());
    }
    if (from.has_useitem()) {
      set_useitem(from.useitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipWashReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipWashReq::CopyFrom(const EquipWashReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipWashReq::IsInitialized() const {

  return true;
}

void EquipWashReq::Swap(EquipWashReq* other) {
  if (other != this) {
    std::swap(equip_slot_, other->equip_slot_);
    lock_wash_slot_.Swap(&other->lock_wash_slot_);
    std::swap(useitem_, other->useitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipWashReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipWashReq_descriptor_;
  metadata.reflection = EquipWashReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipWashRsp::kRetFieldNumber;
const int EquipWashRsp::kEquipSlotFieldNumber;
const int EquipWashRsp::kLockslotFieldNumber;
const int EquipWashRsp::kUseItemFieldNumber;
#endif  // !_MSC_VER

EquipWashRsp::EquipWashRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipWashRsp::InitAsDefaultInstance() {
}

EquipWashRsp::EquipWashRsp(const EquipWashRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipWashRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  equip_slot_ = 0;
  useitem_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipWashRsp::~EquipWashRsp() {
  SharedDtor();
}

void EquipWashRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipWashRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipWashRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipWashRsp_descriptor_;
}

const EquipWashRsp& EquipWashRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipWashRsp* EquipWashRsp::default_instance_ = NULL;

EquipWashRsp* EquipWashRsp::New() const {
  return new EquipWashRsp;
}

void EquipWashRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    equip_slot_ = 0;
    useitem_ = GOOGLE_LONGLONG(0);
  }
  lockslot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipWashRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_slot;
        break;
      }

      // optional int32 equip_slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_slot_)));
          set_has_equip_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lockslot;
        break;
      }

      // repeated int32 lockslot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lockslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lockslot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lockslot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lockslot;
        if (input->ExpectTag(32)) goto parse_useItem;
        break;
      }

      // optional int64 useItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &useitem_)));
          set_has_useitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipWashRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 equip_slot = 2;
  if (has_equip_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_slot(), output);
  }

  // repeated int32 lockslot = 3;
  for (int i = 0; i < this->lockslot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lockslot(i), output);
  }

  // optional int64 useItem = 4;
  if (has_useitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->useitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipWashRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 equip_slot = 2;
  if (has_equip_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_slot(), target);
  }

  // repeated int32 lockslot = 3;
  for (int i = 0; i < this->lockslot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->lockslot(i), target);
  }

  // optional int64 useItem = 4;
  if (has_useitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->useitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipWashRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 equip_slot = 2;
    if (has_equip_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_slot());
    }

    // optional int64 useItem = 4;
    if (has_useitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->useitem());
    }

  }
  // repeated int32 lockslot = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lockslot_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lockslot(i));
    }
    total_size += 1 * this->lockslot_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipWashRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipWashRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipWashRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipWashRsp::MergeFrom(const EquipWashRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  lockslot_.MergeFrom(from.lockslot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_equip_slot()) {
      set_equip_slot(from.equip_slot());
    }
    if (from.has_useitem()) {
      set_useitem(from.useitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipWashRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipWashRsp::CopyFrom(const EquipWashRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipWashRsp::IsInitialized() const {

  return true;
}

void EquipWashRsp::Swap(EquipWashRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(equip_slot_, other->equip_slot_);
    lockslot_.Swap(&other->lockslot_);
    std::swap(useitem_, other->useitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipWashRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipWashRsp_descriptor_;
  metadata.reflection = EquipWashRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSuitLvReq::kEquipPosFieldNumber;
#endif  // !_MSC_VER

EquipSuitLvReq::EquipSuitLvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipSuitLvReq::InitAsDefaultInstance() {
}

EquipSuitLvReq::EquipSuitLvReq(const EquipSuitLvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipSuitLvReq::SharedCtor() {
  _cached_size_ = 0;
  equip_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSuitLvReq::~EquipSuitLvReq() {
  SharedDtor();
}

void EquipSuitLvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSuitLvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSuitLvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSuitLvReq_descriptor_;
}

const EquipSuitLvReq& EquipSuitLvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipSuitLvReq* EquipSuitLvReq::default_instance_ = NULL;

EquipSuitLvReq* EquipSuitLvReq::New() const {
  return new EquipSuitLvReq;
}

void EquipSuitLvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSuitLvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 equip_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipSuitLvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipSuitLvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipSuitLvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 equip_pos = 1;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSuitLvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSuitLvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSuitLvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSuitLvReq::MergeFrom(const EquipSuitLvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSuitLvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSuitLvReq::CopyFrom(const EquipSuitLvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSuitLvReq::IsInitialized() const {

  return true;
}

void EquipSuitLvReq::Swap(EquipSuitLvReq* other) {
  if (other != this) {
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSuitLvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSuitLvReq_descriptor_;
  metadata.reflection = EquipSuitLvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSuitLvRsp::kRetFieldNumber;
const int EquipSuitLvRsp::kEquipPosFieldNumber;
const int EquipSuitLvRsp::kSuitlvFieldNumber;
#endif  // !_MSC_VER

EquipSuitLvRsp::EquipSuitLvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipSuitLvRsp::InitAsDefaultInstance() {
}

EquipSuitLvRsp::EquipSuitLvRsp(const EquipSuitLvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipSuitLvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  equip_pos_ = 0;
  suitlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSuitLvRsp::~EquipSuitLvRsp() {
  SharedDtor();
}

void EquipSuitLvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSuitLvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSuitLvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSuitLvRsp_descriptor_;
}

const EquipSuitLvRsp& EquipSuitLvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquip_2eproto();
  return *default_instance_;
}

EquipSuitLvRsp* EquipSuitLvRsp::default_instance_ = NULL;

EquipSuitLvRsp* EquipSuitLvRsp::New() const {
  return new EquipSuitLvRsp;
}

void EquipSuitLvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    equip_pos_ = 0;
    suitlv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSuitLvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // optional int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_suitlv;
        break;
      }

      // optional int32 suitlv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suitlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suitlv_)));
          set_has_suitlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipSuitLvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  // optional int32 suitlv = 3;
  if (has_suitlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->suitlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipSuitLvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  // optional int32 suitlv = 3;
  if (has_suitlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->suitlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipSuitLvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 suitlv = 3;
    if (has_suitlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suitlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSuitLvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSuitLvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSuitLvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSuitLvRsp::MergeFrom(const EquipSuitLvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_suitlv()) {
      set_suitlv(from.suitlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSuitLvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSuitLvRsp::CopyFrom(const EquipSuitLvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSuitLvRsp::IsInitialized() const {

  return true;
}

void EquipSuitLvRsp::Swap(EquipSuitLvRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(suitlv_, other->suitlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSuitLvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSuitLvRsp_descriptor_;
  metadata.reflection = EquipSuitLvRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
