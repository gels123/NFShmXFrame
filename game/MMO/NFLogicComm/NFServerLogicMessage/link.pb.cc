// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: link.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "link.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* linklink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  linklink_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_linklink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_linklink_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_link_2eproto() {
  protobuf_AddDesc_link_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "link.proto");
  GOOGLE_CHECK(file != NULL);
  linklink_descriptor_ = file->message_type(0);
  static const int linklink_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(linklink, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(linklink, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(linklink, dbargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(linklink, argsm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(linklink, functionunlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(linklink, linknpc_),
  };
  linklink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      linklink_descriptor_,
      linklink::default_instance_,
      linklink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(linklink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(linklink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(linklink));
  Sheet_linklink_descriptor_ = file->message_type(1);
  static const int Sheet_linklink_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_linklink, linklink_list_),
  };
  Sheet_linklink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_linklink_descriptor_,
      Sheet_linklink::default_instance_,
      Sheet_linklink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_linklink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_linklink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_linklink));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_link_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    linklink_descriptor_, &linklink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_linklink_descriptor_, &Sheet_linklink::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_link_2eproto() {
  delete linklink::default_instance_;
  delete linklink_reflection_;
  delete Sheet_linklink::default_instance_;
  delete Sheet_linklink_reflection_;
}

void protobuf_AddDesc_link_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nlink.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"\372\001\n\010linklink\022\026\n\002id\030\001 \001(\003B\n\302\377\024\006\345\272\217\345"
    "\217\267\022\"\n\004icon\030\002 \001(\tB\024\302\377\024\014\346\230\276\347\244\272\345\233\276\346\240\207\220\301\024<\0229"
    "\n\006dbArgs\030\003 \001(\tB)\302\377\024!\344\270\273\345\217\202\346\225\260\345\205\263\350\201\224\347\232\204\351\205"
    "\215\347\275\256\350\241\250\345\220\215\347\247\260\220\301\024<\022#\n\005argsm\030\004 \001(\tB\024\302\377\024\014\345\244"
    "\207\351\200\211\345\217\202\346\225\260\220\301\024<\022.\n\016functionUnlock\030\005 \001(\005B\026"
    "\302\377\024\022\345\205\263\350\201\224\345\212\237\350\203\275\345\274\200\346\224\276\022\"\n\007linkNpc\030\006 \001(\tB"
    "\021\302\377\024\t\345\205\263\350\201\224npc\220\301\024<\"A\n\016Sheet_linklink\022/\n\r"
    "linklink_List\030\001 \003(\0132\022.proto_ff.linklinkB"
    "\004\210\301\024(", 365);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "link.proto", &protobuf_RegisterTypes);
  linklink::default_instance_ = new linklink();
  Sheet_linklink::default_instance_ = new Sheet_linklink();
  linklink::default_instance_->InitAsDefaultInstance();
  Sheet_linklink::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_link_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_link_2eproto {
  StaticDescriptorInitializer_link_2eproto() {
    protobuf_AddDesc_link_2eproto();
  }
} static_descriptor_initializer_link_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int linklink::kIdFieldNumber;
const int linklink::kIconFieldNumber;
const int linklink::kDbArgsFieldNumber;
const int linklink::kArgsmFieldNumber;
const int linklink::kFunctionUnlockFieldNumber;
const int linklink::kLinkNpcFieldNumber;
#endif  // !_MSC_VER

linklink::linklink()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void linklink::InitAsDefaultInstance() {
}

linklink::linklink(const linklink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void linklink::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbargs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  argsm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  functionunlock_ = 0;
  linknpc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

linklink::~linklink() {
  SharedDtor();
}

void linklink::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (dbargs_ != &::google::protobuf::internal::kEmptyString) {
    delete dbargs_;
  }
  if (argsm_ != &::google::protobuf::internal::kEmptyString) {
    delete argsm_;
  }
  if (linknpc_ != &::google::protobuf::internal::kEmptyString) {
    delete linknpc_;
  }
  if (this != default_instance_) {
  }
}

void linklink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* linklink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return linklink_descriptor_;
}

const linklink& linklink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_link_2eproto();
  return *default_instance_;
}

linklink* linklink::default_instance_ = NULL;

linklink* linklink::New() const {
  return new linklink;
}

void linklink::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_dbargs()) {
      if (dbargs_ != &::google::protobuf::internal::kEmptyString) {
        dbargs_->clear();
      }
    }
    if (has_argsm()) {
      if (argsm_ != &::google::protobuf::internal::kEmptyString) {
        argsm_->clear();
      }
    }
    functionunlock_ = 0;
    if (has_linknpc()) {
      if (linknpc_ != &::google::protobuf::internal::kEmptyString) {
        linknpc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool linklink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_icon;
        break;
      }

      // optional string icon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dbArgs;
        break;
      }

      // optional string dbArgs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbargs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbargs().data(), this->dbargs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_argsm;
        break;
      }

      // optional string argsm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argsm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_argsm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->argsm().data(), this->argsm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_functionUnlock;
        break;
      }

      // optional int32 functionUnlock = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionUnlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functionunlock_)));
          set_has_functionunlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_linkNpc;
        break;
      }

      // optional string linkNpc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_linkNpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linknpc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->linknpc().data(), this->linknpc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void linklink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->icon(), output);
  }

  // optional string dbArgs = 3;
  if (has_dbargs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbargs().data(), this->dbargs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dbargs(), output);
  }

  // optional string argsm = 4;
  if (has_argsm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argsm().data(), this->argsm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->argsm(), output);
  }

  // optional int32 functionUnlock = 5;
  if (has_functionunlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->functionunlock(), output);
  }

  // optional string linkNpc = 6;
  if (has_linknpc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->linknpc().data(), this->linknpc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->linknpc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* linklink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->icon(), target);
  }

  // optional string dbArgs = 3;
  if (has_dbargs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbargs().data(), this->dbargs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dbargs(), target);
  }

  // optional string argsm = 4;
  if (has_argsm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argsm().data(), this->argsm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->argsm(), target);
  }

  // optional int32 functionUnlock = 5;
  if (has_functionunlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->functionunlock(), target);
  }

  // optional string linkNpc = 6;
  if (has_linknpc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->linknpc().data(), this->linknpc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->linknpc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int linklink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string dbArgs = 3;
    if (has_dbargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbargs());
    }

    // optional string argsm = 4;
    if (has_argsm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->argsm());
    }

    // optional int32 functionUnlock = 5;
    if (has_functionunlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functionunlock());
    }

    // optional string linkNpc = 6;
    if (has_linknpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linknpc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void linklink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const linklink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const linklink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void linklink::MergeFrom(const linklink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_dbargs()) {
      set_dbargs(from.dbargs());
    }
    if (from.has_argsm()) {
      set_argsm(from.argsm());
    }
    if (from.has_functionunlock()) {
      set_functionunlock(from.functionunlock());
    }
    if (from.has_linknpc()) {
      set_linknpc(from.linknpc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void linklink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void linklink::CopyFrom(const linklink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool linklink::IsInitialized() const {

  return true;
}

void linklink::Swap(linklink* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(icon_, other->icon_);
    std::swap(dbargs_, other->dbargs_);
    std::swap(argsm_, other->argsm_);
    std::swap(functionunlock_, other->functionunlock_);
    std::swap(linknpc_, other->linknpc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata linklink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = linklink_descriptor_;
  metadata.reflection = linklink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_linklink::kLinklinkListFieldNumber;
#endif  // !_MSC_VER

Sheet_linklink::Sheet_linklink()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_linklink::InitAsDefaultInstance() {
}

Sheet_linklink::Sheet_linklink(const Sheet_linklink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_linklink::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_linklink::~Sheet_linklink() {
  SharedDtor();
}

void Sheet_linklink::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_linklink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_linklink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_linklink_descriptor_;
}

const Sheet_linklink& Sheet_linklink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_link_2eproto();
  return *default_instance_;
}

Sheet_linklink* Sheet_linklink::default_instance_ = NULL;

Sheet_linklink* Sheet_linklink::New() const {
  return new Sheet_linklink;
}

void Sheet_linklink::Clear() {
  linklink_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_linklink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.linklink linklink_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_linklink_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_linklink_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_linklink_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_linklink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.linklink linklink_List = 1;
  for (int i = 0; i < this->linklink_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->linklink_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_linklink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.linklink linklink_List = 1;
  for (int i = 0; i < this->linklink_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->linklink_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_linklink::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.linklink linklink_List = 1;
  total_size += 1 * this->linklink_list_size();
  for (int i = 0; i < this->linklink_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->linklink_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_linklink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_linklink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_linklink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_linklink::MergeFrom(const Sheet_linklink& from) {
  GOOGLE_CHECK_NE(&from, this);
  linklink_list_.MergeFrom(from.linklink_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_linklink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_linklink::CopyFrom(const Sheet_linklink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_linklink::IsInitialized() const {

  return true;
}

void Sheet_linklink::Swap(Sheet_linklink* other) {
  if (other != this) {
    linklink_list_.Swap(&other->linklink_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_linklink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_linklink_descriptor_;
  metadata.reflection = Sheet_linklink_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
