// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collect.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "collect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_CollectCollectAttributDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CollectCollectAttributDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CollectCollect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CollectCollect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CollectCollect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CollectCollect_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CollectAttributetpyeAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CollectAttributetpyeAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CollectAttributetpye_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CollectAttributetpye_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CollectAttributetpye_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CollectAttributetpye_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CollectConst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CollectConst_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CollectConst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CollectConst_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_collect_2eproto() {
  protobuf_AddDesc_collect_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "collect.proto");
  GOOGLE_CHECK(file != NULL);
  E_CollectCollectAttributDesc_descriptor_ = file->message_type(0);
  static const int E_CollectCollectAttributDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollectAttributDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollectAttributDesc, m_id_),
  };
  E_CollectCollectAttributDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CollectCollectAttributDesc_descriptor_,
      E_CollectCollectAttributDesc::default_instance_,
      E_CollectCollectAttributDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollectAttributDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollectAttributDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CollectCollectAttributDesc));
  E_CollectCollect_descriptor_ = file->message_type(1);
  static const int E_CollectCollect_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollect, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollect, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollect, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollect, m_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollect, m_stagetitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollect, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollect, m_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollect, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollect, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollect, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollect, m_attribut_),
  };
  E_CollectCollect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CollectCollect_descriptor_,
      E_CollectCollect::default_instance_,
      E_CollectCollect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectCollect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CollectCollect));
  Sheet_CollectCollect_descriptor_ = file->message_type(2);
  static const int Sheet_CollectCollect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CollectCollect, e_collectcollect_list_),
  };
  Sheet_CollectCollect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CollectCollect_descriptor_,
      Sheet_CollectCollect::default_instance_,
      Sheet_CollectCollect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CollectCollect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CollectCollect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CollectCollect));
  E_CollectAttributetpyeAttributeDesc_descriptor_ = file->message_type(3);
  static const int E_CollectAttributetpyeAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectAttributetpyeAttributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectAttributetpyeAttributeDesc, m_value_),
  };
  E_CollectAttributetpyeAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CollectAttributetpyeAttributeDesc_descriptor_,
      E_CollectAttributetpyeAttributeDesc::default_instance_,
      E_CollectAttributetpyeAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectAttributetpyeAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectAttributetpyeAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CollectAttributetpyeAttributeDesc));
  E_CollectAttributetpye_descriptor_ = file->message_type(4);
  static const int E_CollectAttributetpye_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectAttributetpye, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectAttributetpye, m_attribute_),
  };
  E_CollectAttributetpye_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CollectAttributetpye_descriptor_,
      E_CollectAttributetpye::default_instance_,
      E_CollectAttributetpye_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectAttributetpye, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectAttributetpye, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CollectAttributetpye));
  Sheet_CollectAttributetpye_descriptor_ = file->message_type(5);
  static const int Sheet_CollectAttributetpye_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CollectAttributetpye, e_collectattributetpye_list_),
  };
  Sheet_CollectAttributetpye_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CollectAttributetpye_descriptor_,
      Sheet_CollectAttributetpye::default_instance_,
      Sheet_CollectAttributetpye_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CollectAttributetpye, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CollectAttributetpye, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CollectAttributetpye));
  E_CollectConst_descriptor_ = file->message_type(6);
  static const int E_CollectConst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectConst, m_id_),
  };
  E_CollectConst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CollectConst_descriptor_,
      E_CollectConst::default_instance_,
      E_CollectConst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectConst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CollectConst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CollectConst));
  Sheet_CollectConst_descriptor_ = file->message_type(7);
  static const int Sheet_CollectConst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CollectConst, e_collectconst_list_),
  };
  Sheet_CollectConst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CollectConst_descriptor_,
      Sheet_CollectConst::default_instance_,
      Sheet_CollectConst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CollectConst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CollectConst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CollectConst));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_collect_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CollectCollectAttributDesc_descriptor_, &E_CollectCollectAttributDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CollectCollect_descriptor_, &E_CollectCollect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CollectCollect_descriptor_, &Sheet_CollectCollect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CollectAttributetpyeAttributeDesc_descriptor_, &E_CollectAttributetpyeAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CollectAttributetpye_descriptor_, &E_CollectAttributetpye::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CollectAttributetpye_descriptor_, &Sheet_CollectAttributetpye::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CollectConst_descriptor_, &E_CollectConst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CollectConst_descriptor_, &Sheet_CollectConst::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_collect_2eproto() {
  delete E_CollectCollectAttributDesc::default_instance_;
  delete E_CollectCollectAttributDesc_reflection_;
  delete E_CollectCollect::default_instance_;
  delete E_CollectCollect_reflection_;
  delete Sheet_CollectCollect::default_instance_;
  delete Sheet_CollectCollect_reflection_;
  delete E_CollectAttributetpyeAttributeDesc::default_instance_;
  delete E_CollectAttributetpyeAttributeDesc_reflection_;
  delete E_CollectAttributetpye::default_instance_;
  delete E_CollectAttributetpye_reflection_;
  delete Sheet_CollectAttributetpye::default_instance_;
  delete Sheet_CollectAttributetpye_reflection_;
  delete E_CollectConst::default_instance_;
  delete E_CollectConst_reflection_;
  delete Sheet_CollectConst::default_instance_;
  delete Sheet_CollectConst_reflection_;
}

void protobuf_AddDesc_collect_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcollect.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"O\n\034E_CollectCollectAttributDesc"
    "\022\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_id\030\002 \001("
    "\005B\006\302\377\024\002ID\"\306\003\n\020E_CollectCollect\022\030\n\004m_id\030\001"
    " \001(\005B\n\302\377\024\006\345\272\217\345\217\267\022$\n\006m_name\030\002 \001(\tB\024\302\377\024\014\347\234"
    "\237\347\224\262\345\220\215\347\247\260\220\301\024<\022\036\n\004m_lv\030\003 \001(\005B\020\302\377\024\014\345\274\200\345\220\257"
    "\347\255\211\347\272\247\022\033\n\007m_group\030\004 \001(\005B\n\302\377\024\006\345\210\206\347\273\204\022*\n\014m"
    "_stagetitle\030\005 \001(\tB\024\302\377\024\014\351\230\266\346\256\265\346\240\207\351\242\230\220\301\024<\022"
    "(\n\nm_position\030\006 \001(\tB\024\302\377\024\014\350\243\205\345\244\207\351\203\250\344\275\215\220\301\024"
    "<\022!\n\007m_grade\030\007 \001(\005B\020\302\377\024\014\350\246\201\346\261\202\351\230\266\346\225\260\022#\n\t"
    "m_quality\030\010 \001(\005B\020\302\377\024\014\350\246\201\346\261\202\345\223\201\350\264\250\022 \n\006m_s"
    "tar\030\t \001(\005B\020\302\377\024\014\350\246\201\346\261\202\346\230\237\347\272\247\022#\n\tm_skillid"
    "\030\n \001(\005B\020\302\377\024\014\346\277\200\346\264\273\346\212\200\350\203\275\022P\n\nm_attribut\030\013"
    " \003(\0132&.proto_ff.E_CollectCollectAttribut"
    "DescB\024\302\377\024\014\345\245\227\350\243\205\345\261\236\346\200\247\210\301\024\004\"W\n\024Sheet_Coll"
    "ectCollect\022\?\n\025E_CollectCollect_List\030\001 \003("
    "\0132\032.proto_ff.E_CollectCollectB\004\210\301\024<\"W\n#E"
    "_CollectAttributetpyeAttributeDesc\022\026\n\006m_"
    "type\030\001 \001(\005B\006\302\377\024\002ID\022\030\n\007m_value\030\002 \001(\005B\007\302\377\024"
    "\003\345\200\274\"\210\001\n\026E_CollectAttributetpye\022\024\n\004m_id\030"
    "\001 \001(\003B\006\302\377\024\002id\022X\n\013m_attribute\030\002 \003(\0132-.pro"
    "to_ff.E_CollectAttributetpyeAttributeDes"
    "cB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\003\"j\n\032Sheet_Collect"
    "Attributetpye\022L\n\033E_CollectAttributetpye_"
    "List\030\001 \003(\0132 .proto_ff.E_CollectAttribute"
    "tpyeB\005\210\301\024\310\001\"&\n\016E_CollectConst\022\024\n\004m_id\030\001 "
    "\001(\005B\006\302\377\024\002id\"Q\n\022Sheet_CollectConst\022;\n\023E_C"
    "ollectConst_List\030\001 \003(\0132\030.proto_ff.E_Coll"
    "ectConstB\004\210\301\024\024", 1134);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "collect.proto", &protobuf_RegisterTypes);
  E_CollectCollectAttributDesc::default_instance_ = new E_CollectCollectAttributDesc();
  E_CollectCollect::default_instance_ = new E_CollectCollect();
  Sheet_CollectCollect::default_instance_ = new Sheet_CollectCollect();
  E_CollectAttributetpyeAttributeDesc::default_instance_ = new E_CollectAttributetpyeAttributeDesc();
  E_CollectAttributetpye::default_instance_ = new E_CollectAttributetpye();
  Sheet_CollectAttributetpye::default_instance_ = new Sheet_CollectAttributetpye();
  E_CollectConst::default_instance_ = new E_CollectConst();
  Sheet_CollectConst::default_instance_ = new Sheet_CollectConst();
  E_CollectCollectAttributDesc::default_instance_->InitAsDefaultInstance();
  E_CollectCollect::default_instance_->InitAsDefaultInstance();
  Sheet_CollectCollect::default_instance_->InitAsDefaultInstance();
  E_CollectAttributetpyeAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_CollectAttributetpye::default_instance_->InitAsDefaultInstance();
  Sheet_CollectAttributetpye::default_instance_->InitAsDefaultInstance();
  E_CollectConst::default_instance_->InitAsDefaultInstance();
  Sheet_CollectConst::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_collect_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_collect_2eproto {
  StaticDescriptorInitializer_collect_2eproto() {
    protobuf_AddDesc_collect_2eproto();
  }
} static_descriptor_initializer_collect_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_CollectCollectAttributDesc::kMNumFieldNumber;
const int E_CollectCollectAttributDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_CollectCollectAttributDesc::E_CollectCollectAttributDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CollectCollectAttributDesc::InitAsDefaultInstance() {
}

E_CollectCollectAttributDesc::E_CollectCollectAttributDesc(const E_CollectCollectAttributDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CollectCollectAttributDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CollectCollectAttributDesc::~E_CollectCollectAttributDesc() {
  SharedDtor();
}

void E_CollectCollectAttributDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CollectCollectAttributDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CollectCollectAttributDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CollectCollectAttributDesc_descriptor_;
}

const E_CollectCollectAttributDesc& E_CollectCollectAttributDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

E_CollectCollectAttributDesc* E_CollectCollectAttributDesc::default_instance_ = NULL;

E_CollectCollectAttributDesc* E_CollectCollectAttributDesc::New() const {
  return new E_CollectCollectAttributDesc;
}

void E_CollectCollectAttributDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CollectCollectAttributDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CollectCollectAttributDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CollectCollectAttributDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CollectCollectAttributDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CollectCollectAttributDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CollectCollectAttributDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CollectCollectAttributDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CollectCollectAttributDesc::MergeFrom(const E_CollectCollectAttributDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CollectCollectAttributDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CollectCollectAttributDesc::CopyFrom(const E_CollectCollectAttributDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CollectCollectAttributDesc::IsInitialized() const {

  return true;
}

void E_CollectCollectAttributDesc::Swap(E_CollectCollectAttributDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CollectCollectAttributDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CollectCollectAttributDesc_descriptor_;
  metadata.reflection = E_CollectCollectAttributDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CollectCollect::kMIdFieldNumber;
const int E_CollectCollect::kMNameFieldNumber;
const int E_CollectCollect::kMLvFieldNumber;
const int E_CollectCollect::kMGroupFieldNumber;
const int E_CollectCollect::kMStagetitleFieldNumber;
const int E_CollectCollect::kMPositionFieldNumber;
const int E_CollectCollect::kMGradeFieldNumber;
const int E_CollectCollect::kMQualityFieldNumber;
const int E_CollectCollect::kMStarFieldNumber;
const int E_CollectCollect::kMSkillidFieldNumber;
const int E_CollectCollect::kMAttributFieldNumber;
#endif  // !_MSC_VER

E_CollectCollect::E_CollectCollect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CollectCollect::InitAsDefaultInstance() {
}

E_CollectCollect::E_CollectCollect(const E_CollectCollect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CollectCollect::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lv_ = 0;
  m_group_ = 0;
  m_stagetitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_grade_ = 0;
  m_quality_ = 0;
  m_star_ = 0;
  m_skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CollectCollect::~E_CollectCollect() {
  SharedDtor();
}

void E_CollectCollect::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_stagetitle_ != &::google::protobuf::internal::kEmptyString) {
    delete m_stagetitle_;
  }
  if (m_position_ != &::google::protobuf::internal::kEmptyString) {
    delete m_position_;
  }
  if (this != default_instance_) {
  }
}

void E_CollectCollect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CollectCollect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CollectCollect_descriptor_;
}

const E_CollectCollect& E_CollectCollect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

E_CollectCollect* E_CollectCollect::default_instance_ = NULL;

E_CollectCollect* E_CollectCollect::New() const {
  return new E_CollectCollect;
}

void E_CollectCollect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_lv_ = 0;
    m_group_ = 0;
    if (has_m_stagetitle()) {
      if (m_stagetitle_ != &::google::protobuf::internal::kEmptyString) {
        m_stagetitle_->clear();
      }
    }
    if (has_m_position()) {
      if (m_position_ != &::google::protobuf::internal::kEmptyString) {
        m_position_->clear();
      }
    }
    m_grade_ = 0;
    m_quality_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_star_ = 0;
    m_skillid_ = 0;
  }
  m_attribut_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CollectCollect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_group;
        break;
      }

      // optional int32 m_group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_group_)));
          set_has_m_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_stagetitle;
        break;
      }

      // optional string m_stagetitle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_stagetitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_stagetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_stagetitle().data(), this->m_stagetitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_position;
        break;
      }

      // optional string m_position = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_position().data(), this->m_position().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_grade;
        break;
      }

      // optional int32 m_grade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grade_)));
          set_has_m_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_star;
        break;
      }

      // optional int32 m_star = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_skillid;
        break;
      }

      // optional int32 m_skillid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_attribut;
        break;
      }

      // repeated .proto_ff.E_CollectCollectAttributDesc m_attribut = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribut:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribut()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_attribut;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CollectCollect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lv(), output);
  }

  // optional int32 m_group = 4;
  if (has_m_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_group(), output);
  }

  // optional string m_stagetitle = 5;
  if (has_m_stagetitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_stagetitle().data(), this->m_stagetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_stagetitle(), output);
  }

  // optional string m_position = 6;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_position().data(), this->m_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_position(), output);
  }

  // optional int32 m_grade = 7;
  if (has_m_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_grade(), output);
  }

  // optional int32 m_quality = 8;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_quality(), output);
  }

  // optional int32 m_star = 9;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_star(), output);
  }

  // optional int32 m_skillid = 10;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_skillid(), output);
  }

  // repeated .proto_ff.E_CollectCollectAttributDesc m_attribut = 11;
  for (int i = 0; i < this->m_attribut_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->m_attribut(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CollectCollect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lv(), target);
  }

  // optional int32 m_group = 4;
  if (has_m_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_group(), target);
  }

  // optional string m_stagetitle = 5;
  if (has_m_stagetitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_stagetitle().data(), this->m_stagetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_stagetitle(), target);
  }

  // optional string m_position = 6;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_position().data(), this->m_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_position(), target);
  }

  // optional int32 m_grade = 7;
  if (has_m_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_grade(), target);
  }

  // optional int32 m_quality = 8;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_quality(), target);
  }

  // optional int32 m_star = 9;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_star(), target);
  }

  // optional int32 m_skillid = 10;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_skillid(), target);
  }

  // repeated .proto_ff.E_CollectCollectAttributDesc m_attribut = 11;
  for (int i = 0; i < this->m_attribut_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->m_attribut(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CollectCollect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_lv = 3;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_group = 4;
    if (has_m_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_group());
    }

    // optional string m_stagetitle = 5;
    if (has_m_stagetitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_stagetitle());
    }

    // optional string m_position = 6;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_position());
    }

    // optional int32 m_grade = 7;
    if (has_m_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grade());
    }

    // optional int32 m_quality = 8;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_star = 9;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

    // optional int32 m_skillid = 10;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

  }
  // repeated .proto_ff.E_CollectCollectAttributDesc m_attribut = 11;
  total_size += 1 * this->m_attribut_size();
  for (int i = 0; i < this->m_attribut_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribut(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CollectCollect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CollectCollect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CollectCollect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CollectCollect::MergeFrom(const E_CollectCollect& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribut_.MergeFrom(from.m_attribut_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_group()) {
      set_m_group(from.m_group());
    }
    if (from.has_m_stagetitle()) {
      set_m_stagetitle(from.m_stagetitle());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_grade()) {
      set_m_grade(from.m_grade());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CollectCollect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CollectCollect::CopyFrom(const E_CollectCollect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CollectCollect::IsInitialized() const {

  return true;
}

void E_CollectCollect::Swap(E_CollectCollect* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_group_, other->m_group_);
    std::swap(m_stagetitle_, other->m_stagetitle_);
    std::swap(m_position_, other->m_position_);
    std::swap(m_grade_, other->m_grade_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_star_, other->m_star_);
    std::swap(m_skillid_, other->m_skillid_);
    m_attribut_.Swap(&other->m_attribut_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CollectCollect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CollectCollect_descriptor_;
  metadata.reflection = E_CollectCollect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CollectCollect::kECollectCollectListFieldNumber;
#endif  // !_MSC_VER

Sheet_CollectCollect::Sheet_CollectCollect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CollectCollect::InitAsDefaultInstance() {
}

Sheet_CollectCollect::Sheet_CollectCollect(const Sheet_CollectCollect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CollectCollect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CollectCollect::~Sheet_CollectCollect() {
  SharedDtor();
}

void Sheet_CollectCollect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CollectCollect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CollectCollect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CollectCollect_descriptor_;
}

const Sheet_CollectCollect& Sheet_CollectCollect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

Sheet_CollectCollect* Sheet_CollectCollect::default_instance_ = NULL;

Sheet_CollectCollect* Sheet_CollectCollect::New() const {
  return new Sheet_CollectCollect;
}

void Sheet_CollectCollect::Clear() {
  e_collectcollect_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CollectCollect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CollectCollect E_CollectCollect_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CollectCollect_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_collectcollect_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CollectCollect_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CollectCollect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CollectCollect E_CollectCollect_List = 1;
  for (int i = 0; i < this->e_collectcollect_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_collectcollect_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CollectCollect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CollectCollect E_CollectCollect_List = 1;
  for (int i = 0; i < this->e_collectcollect_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_collectcollect_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CollectCollect::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CollectCollect E_CollectCollect_List = 1;
  total_size += 1 * this->e_collectcollect_list_size();
  for (int i = 0; i < this->e_collectcollect_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_collectcollect_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CollectCollect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CollectCollect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CollectCollect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CollectCollect::MergeFrom(const Sheet_CollectCollect& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_collectcollect_list_.MergeFrom(from.e_collectcollect_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CollectCollect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CollectCollect::CopyFrom(const Sheet_CollectCollect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CollectCollect::IsInitialized() const {

  return true;
}

void Sheet_CollectCollect::Swap(Sheet_CollectCollect* other) {
  if (other != this) {
    e_collectcollect_list_.Swap(&other->e_collectcollect_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CollectCollect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CollectCollect_descriptor_;
  metadata.reflection = Sheet_CollectCollect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CollectAttributetpyeAttributeDesc::kMTypeFieldNumber;
const int E_CollectAttributetpyeAttributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_CollectAttributetpyeAttributeDesc::E_CollectAttributetpyeAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CollectAttributetpyeAttributeDesc::InitAsDefaultInstance() {
}

E_CollectAttributetpyeAttributeDesc::E_CollectAttributetpyeAttributeDesc(const E_CollectAttributetpyeAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CollectAttributetpyeAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CollectAttributetpyeAttributeDesc::~E_CollectAttributetpyeAttributeDesc() {
  SharedDtor();
}

void E_CollectAttributetpyeAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CollectAttributetpyeAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CollectAttributetpyeAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CollectAttributetpyeAttributeDesc_descriptor_;
}

const E_CollectAttributetpyeAttributeDesc& E_CollectAttributetpyeAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

E_CollectAttributetpyeAttributeDesc* E_CollectAttributetpyeAttributeDesc::default_instance_ = NULL;

E_CollectAttributetpyeAttributeDesc* E_CollectAttributetpyeAttributeDesc::New() const {
  return new E_CollectAttributetpyeAttributeDesc;
}

void E_CollectAttributetpyeAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CollectAttributetpyeAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CollectAttributetpyeAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CollectAttributetpyeAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CollectAttributetpyeAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CollectAttributetpyeAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CollectAttributetpyeAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CollectAttributetpyeAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CollectAttributetpyeAttributeDesc::MergeFrom(const E_CollectAttributetpyeAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CollectAttributetpyeAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CollectAttributetpyeAttributeDesc::CopyFrom(const E_CollectAttributetpyeAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CollectAttributetpyeAttributeDesc::IsInitialized() const {

  return true;
}

void E_CollectAttributetpyeAttributeDesc::Swap(E_CollectAttributetpyeAttributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CollectAttributetpyeAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CollectAttributetpyeAttributeDesc_descriptor_;
  metadata.reflection = E_CollectAttributetpyeAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CollectAttributetpye::kMIdFieldNumber;
const int E_CollectAttributetpye::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_CollectAttributetpye::E_CollectAttributetpye()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CollectAttributetpye::InitAsDefaultInstance() {
}

E_CollectAttributetpye::E_CollectAttributetpye(const E_CollectAttributetpye& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CollectAttributetpye::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CollectAttributetpye::~E_CollectAttributetpye() {
  SharedDtor();
}

void E_CollectAttributetpye::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CollectAttributetpye::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CollectAttributetpye::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CollectAttributetpye_descriptor_;
}

const E_CollectAttributetpye& E_CollectAttributetpye::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

E_CollectAttributetpye* E_CollectAttributetpye::default_instance_ = NULL;

E_CollectAttributetpye* E_CollectAttributetpye::New() const {
  return new E_CollectAttributetpye;
}

void E_CollectAttributetpye::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CollectAttributetpye::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_CollectAttributetpyeAttributeDesc m_attribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CollectAttributetpye::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // repeated .proto_ff.E_CollectAttributetpyeAttributeDesc m_attribute = 2;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CollectAttributetpye::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // repeated .proto_ff.E_CollectAttributetpyeAttributeDesc m_attribute = 2;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CollectAttributetpye::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

  }
  // repeated .proto_ff.E_CollectAttributetpyeAttributeDesc m_attribute = 2;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CollectAttributetpye::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CollectAttributetpye* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CollectAttributetpye*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CollectAttributetpye::MergeFrom(const E_CollectAttributetpye& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CollectAttributetpye::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CollectAttributetpye::CopyFrom(const E_CollectAttributetpye& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CollectAttributetpye::IsInitialized() const {

  return true;
}

void E_CollectAttributetpye::Swap(E_CollectAttributetpye* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CollectAttributetpye::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CollectAttributetpye_descriptor_;
  metadata.reflection = E_CollectAttributetpye_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CollectAttributetpye::kECollectAttributetpyeListFieldNumber;
#endif  // !_MSC_VER

Sheet_CollectAttributetpye::Sheet_CollectAttributetpye()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CollectAttributetpye::InitAsDefaultInstance() {
}

Sheet_CollectAttributetpye::Sheet_CollectAttributetpye(const Sheet_CollectAttributetpye& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CollectAttributetpye::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CollectAttributetpye::~Sheet_CollectAttributetpye() {
  SharedDtor();
}

void Sheet_CollectAttributetpye::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CollectAttributetpye::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CollectAttributetpye::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CollectAttributetpye_descriptor_;
}

const Sheet_CollectAttributetpye& Sheet_CollectAttributetpye::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

Sheet_CollectAttributetpye* Sheet_CollectAttributetpye::default_instance_ = NULL;

Sheet_CollectAttributetpye* Sheet_CollectAttributetpye::New() const {
  return new Sheet_CollectAttributetpye;
}

void Sheet_CollectAttributetpye::Clear() {
  e_collectattributetpye_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CollectAttributetpye::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CollectAttributetpye E_CollectAttributetpye_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CollectAttributetpye_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_collectattributetpye_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CollectAttributetpye_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CollectAttributetpye::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CollectAttributetpye E_CollectAttributetpye_List = 1;
  for (int i = 0; i < this->e_collectattributetpye_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_collectattributetpye_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CollectAttributetpye::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CollectAttributetpye E_CollectAttributetpye_List = 1;
  for (int i = 0; i < this->e_collectattributetpye_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_collectattributetpye_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CollectAttributetpye::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CollectAttributetpye E_CollectAttributetpye_List = 1;
  total_size += 1 * this->e_collectattributetpye_list_size();
  for (int i = 0; i < this->e_collectattributetpye_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_collectattributetpye_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CollectAttributetpye::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CollectAttributetpye* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CollectAttributetpye*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CollectAttributetpye::MergeFrom(const Sheet_CollectAttributetpye& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_collectattributetpye_list_.MergeFrom(from.e_collectattributetpye_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CollectAttributetpye::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CollectAttributetpye::CopyFrom(const Sheet_CollectAttributetpye& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CollectAttributetpye::IsInitialized() const {

  return true;
}

void Sheet_CollectAttributetpye::Swap(Sheet_CollectAttributetpye* other) {
  if (other != this) {
    e_collectattributetpye_list_.Swap(&other->e_collectattributetpye_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CollectAttributetpye::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CollectAttributetpye_descriptor_;
  metadata.reflection = Sheet_CollectAttributetpye_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CollectConst::kMIdFieldNumber;
#endif  // !_MSC_VER

E_CollectConst::E_CollectConst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CollectConst::InitAsDefaultInstance() {
}

E_CollectConst::E_CollectConst(const E_CollectConst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CollectConst::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CollectConst::~E_CollectConst() {
  SharedDtor();
}

void E_CollectConst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CollectConst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CollectConst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CollectConst_descriptor_;
}

const E_CollectConst& E_CollectConst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

E_CollectConst* E_CollectConst::default_instance_ = NULL;

E_CollectConst* E_CollectConst::New() const {
  return new E_CollectConst;
}

void E_CollectConst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CollectConst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CollectConst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CollectConst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CollectConst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CollectConst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CollectConst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CollectConst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CollectConst::MergeFrom(const E_CollectConst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CollectConst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CollectConst::CopyFrom(const E_CollectConst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CollectConst::IsInitialized() const {

  return true;
}

void E_CollectConst::Swap(E_CollectConst* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CollectConst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CollectConst_descriptor_;
  metadata.reflection = E_CollectConst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CollectConst::kECollectConstListFieldNumber;
#endif  // !_MSC_VER

Sheet_CollectConst::Sheet_CollectConst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CollectConst::InitAsDefaultInstance() {
}

Sheet_CollectConst::Sheet_CollectConst(const Sheet_CollectConst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CollectConst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CollectConst::~Sheet_CollectConst() {
  SharedDtor();
}

void Sheet_CollectConst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CollectConst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CollectConst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CollectConst_descriptor_;
}

const Sheet_CollectConst& Sheet_CollectConst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

Sheet_CollectConst* Sheet_CollectConst::default_instance_ = NULL;

Sheet_CollectConst* Sheet_CollectConst::New() const {
  return new Sheet_CollectConst;
}

void Sheet_CollectConst::Clear() {
  e_collectconst_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CollectConst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CollectConst E_CollectConst_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CollectConst_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_collectconst_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CollectConst_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CollectConst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CollectConst E_CollectConst_List = 1;
  for (int i = 0; i < this->e_collectconst_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_collectconst_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CollectConst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CollectConst E_CollectConst_List = 1;
  for (int i = 0; i < this->e_collectconst_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_collectconst_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CollectConst::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CollectConst E_CollectConst_List = 1;
  total_size += 1 * this->e_collectconst_list_size();
  for (int i = 0; i < this->e_collectconst_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_collectconst_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CollectConst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CollectConst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CollectConst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CollectConst::MergeFrom(const Sheet_CollectConst& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_collectconst_list_.MergeFrom(from.e_collectconst_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CollectConst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CollectConst::CopyFrom(const Sheet_CollectConst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CollectConst::IsInitialized() const {

  return true;
}

void Sheet_CollectConst::Swap(Sheet_CollectConst* other) {
  if (other != this) {
    e_collectconst_list_.Swap(&other->e_collectconst_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CollectConst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CollectConst_descriptor_;
  metadata.reflection = Sheet_CollectConst_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
