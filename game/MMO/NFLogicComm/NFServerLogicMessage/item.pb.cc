// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* itemitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  itemitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_itemitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_itemitem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_item_2eproto() {
  protobuf_AddDesc_item_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "item.proto");
  GOOGLE_CHECK(file != NULL);
  itemitem_descriptor_ = file->message_type(0);
  static const int itemitem_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, functiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, functionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, usecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, levelrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, bindtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, istradebind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, stacklimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, sellprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, sellbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, iscanbatchuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, dayuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, outtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, uselimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, blessing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, invest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, exchange_),
  };
  itemitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      itemitem_descriptor_,
      itemitem::default_instance_,
      itemitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(itemitem));
  Sheet_itemitem_descriptor_ = file->message_type(1);
  static const int Sheet_itemitem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_itemitem, itemitem_list_),
  };
  Sheet_itemitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_itemitem_descriptor_,
      Sheet_itemitem::default_instance_,
      Sheet_itemitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_itemitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_itemitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_itemitem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_item_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    itemitem_descriptor_, &itemitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_itemitem_descriptor_, &Sheet_itemitem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_item_2eproto() {
  delete itemitem::default_instance_;
  delete itemitem_reflection_;
  delete Sheet_itemitem::default_instance_;
  delete Sheet_itemitem_reflection_;
}

void protobuf_AddDesc_item_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nitem.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"\276\007\n\010itemitem\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\347\211\251\345"
    "\223\201ID\022\"\n\004name\030\002 \001(\tB\024\302\377\024\014\347\211\251\345\223\201\345\220\215\347\247\260\220\301\024x"
    "\022\"\n\010itemType\030\003 \001(\005B\020\302\377\024\014\347\211\251\345\223\201\347\261\273\345\236\213\022\036\n\007"
    "subType\030\004 \001(\005B\r\302\377\024\t\345\255\220\347\261\273\345\236\213\022,\n\014function"
    "Type\030\005 \001(\005B\026\302\377\024\022\347\211\251\345\223\201\345\212\237\350\203\275\347\261\273\345\236\213\0221\n\rfu"
    "nctionValue\030\006 \001(\tB\032\302\377\024\022\347\211\251\345\223\201\345\212\237\350\203\275\345\217\202\346\225"
    "\260\220\301\024<\022*\n\014usecondition\030\007 \001(\tB\024\302\377\024\014\344\275\277\347\224\250\346"
    "\235\241\344\273\266\220\301\024<\022\037\n\005level\030\010 \001(\005B\020\302\377\024\014\347\211\251\345\223\201\347\255\211\347"
    "\272\247\022!\n\007quality\030\t \001(\005B\020\302\377\024\014\347\211\251\345\223\201\345\223\201\350\264\250\022&\n"
    "\014levelRequest\030\n \001(\005B\020\302\377\024\014\344\275\277\347\224\250\347\255\211\347\272\247\022(\n"
    "\nprofession\030\013 \001(\tB\024\302\377\024\014\344\275\277\347\224\250\350\201\214\344\270\232\220\301\024<\022"
    "\"\n\010bindType\030\014 \001(\005B\020\302\377\024\014\347\273\221\345\256\232\347\261\273\345\236\213\022+\n\013i"
    "sTradeBind\030\r \001(\005B\026\302\377\024\022\346\230\257\345\220\246\344\272\244\346\230\223\347\273\221\345\256\232"
    "\022$\n\nstackLimit\030\016 \001(\005B\020\302\377\024\014\345\240\206\345\217\240\344\270\212\351\231\220\022#"
    "\n\tsellPrice\030\017 \001(\005B\020\302\377\024\014\345\207\272\345\224\256\344\273\267\346\240\274\022!\n\007s"
    "ellBox\030\020 \001(\003B\020\302\377\024\014\345\207\272\345\224\256\346\216\211\350\220\275\022,\n\tbroadc"
    "ast\030\021 \001(\005B\031\302\377\024\025\346\230\257\345\220\246\350\267\221\351\251\254\347\201\257\345\271\277\346\222\255\0220\n\r"
    "isCanBatchUse\030\022 \001(\005B\031\302\377\024\025\346\230\257\345\220\246\345\217\257\346\211\271\351\207\217"
    "\344\275\277\347\224\250\022&\n\006dayUse\030\023 \001(\005B\026\302\377\024\022\346\257\217\346\227\245\344\275\277\347\224\250"
    "\346\254\241\346\225\260\022!\n\007outTime\030\024 \001(\005B\020\302\377\024\014\351\201\223\345\205\267\346\227\266\351\231"
    "\220\0220\n\010useLimit\030\025 \001(\tB\036\302\377\024\025\347\246\201\347\224\250\346\234\254\351\201\223\345\205\267"
    "\345\234\260\345\233\276\220\301\024\320\017\022%\n\010blessing\030\026 \001(\005B\023\302\377\024\017\351\276\231\345\237"
    "\237\347\245\235\347\246\217\345\200\274\022#\n\006invest\030\027 \001(\005B\023\302\377\024\017\351\276\231\345\237\237\346\212"
    "\225\350\265\204\345\200\274\022%\n\010exchange\030\030 \001(\005B\023\302\377\024\017\345\205\221\346\215\242\351\255\224"
    "\347\201\265\345\200\274\"B\n\016Sheet_itemitem\0220\n\ritemitem_Lis"
    "t\030\001 \003(\0132\022.proto_ff.itemitemB\005\210\301\024\270\027", 1074);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "item.proto", &protobuf_RegisterTypes);
  itemitem::default_instance_ = new itemitem();
  Sheet_itemitem::default_instance_ = new Sheet_itemitem();
  itemitem::default_instance_->InitAsDefaultInstance();
  Sheet_itemitem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_item_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_item_2eproto {
  StaticDescriptorInitializer_item_2eproto() {
    protobuf_AddDesc_item_2eproto();
  }
} static_descriptor_initializer_item_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int itemitem::kIdFieldNumber;
const int itemitem::kNameFieldNumber;
const int itemitem::kItemTypeFieldNumber;
const int itemitem::kSubTypeFieldNumber;
const int itemitem::kFunctionTypeFieldNumber;
const int itemitem::kFunctionValueFieldNumber;
const int itemitem::kUseconditionFieldNumber;
const int itemitem::kLevelFieldNumber;
const int itemitem::kQualityFieldNumber;
const int itemitem::kLevelRequestFieldNumber;
const int itemitem::kProfessionFieldNumber;
const int itemitem::kBindTypeFieldNumber;
const int itemitem::kIsTradeBindFieldNumber;
const int itemitem::kStackLimitFieldNumber;
const int itemitem::kSellPriceFieldNumber;
const int itemitem::kSellBoxFieldNumber;
const int itemitem::kBroadcastFieldNumber;
const int itemitem::kIsCanBatchUseFieldNumber;
const int itemitem::kDayUseFieldNumber;
const int itemitem::kOutTimeFieldNumber;
const int itemitem::kUseLimitFieldNumber;
const int itemitem::kBlessingFieldNumber;
const int itemitem::kInvestFieldNumber;
const int itemitem::kExchangeFieldNumber;
#endif  // !_MSC_VER

itemitem::itemitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void itemitem::InitAsDefaultInstance() {
}

itemitem::itemitem(const itemitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void itemitem::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemtype_ = 0;
  subtype_ = 0;
  functiontype_ = 0;
  functionvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  quality_ = 0;
  levelrequest_ = 0;
  profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bindtype_ = 0;
  istradebind_ = 0;
  stacklimit_ = 0;
  sellprice_ = 0;
  sellbox_ = GOOGLE_LONGLONG(0);
  broadcast_ = 0;
  iscanbatchuse_ = 0;
  dayuse_ = 0;
  outtime_ = 0;
  uselimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blessing_ = 0;
  invest_ = 0;
  exchange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

itemitem::~itemitem() {
  SharedDtor();
}

void itemitem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (functionvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete functionvalue_;
  }
  if (usecondition_ != &::google::protobuf::internal::kEmptyString) {
    delete usecondition_;
  }
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    delete profession_;
  }
  if (uselimit_ != &::google::protobuf::internal::kEmptyString) {
    delete uselimit_;
  }
  if (this != default_instance_) {
  }
}

void itemitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* itemitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return itemitem_descriptor_;
}

const itemitem& itemitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

itemitem* itemitem::default_instance_ = NULL;

itemitem* itemitem::New() const {
  return new itemitem;
}

void itemitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    itemtype_ = 0;
    subtype_ = 0;
    functiontype_ = 0;
    if (has_functionvalue()) {
      if (functionvalue_ != &::google::protobuf::internal::kEmptyString) {
        functionvalue_->clear();
      }
    }
    if (has_usecondition()) {
      if (usecondition_ != &::google::protobuf::internal::kEmptyString) {
        usecondition_->clear();
      }
    }
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    quality_ = 0;
    levelrequest_ = 0;
    if (has_profession()) {
      if (profession_ != &::google::protobuf::internal::kEmptyString) {
        profession_->clear();
      }
    }
    bindtype_ = 0;
    istradebind_ = 0;
    stacklimit_ = 0;
    sellprice_ = 0;
    sellbox_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    broadcast_ = 0;
    iscanbatchuse_ = 0;
    dayuse_ = 0;
    outtime_ = 0;
    if (has_uselimit()) {
      if (uselimit_ != &::google::protobuf::internal::kEmptyString) {
        uselimit_->clear();
      }
    }
    blessing_ = 0;
    invest_ = 0;
    exchange_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool itemitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemType;
        break;
      }

      // optional int32 itemType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_subType;
        break;
      }

      // optional int32 subType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_functionType;
        break;
      }

      // optional int32 functionType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functiontype_)));
          set_has_functiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_functionValue;
        break;
      }

      // optional string functionValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_functionValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_functionvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->functionvalue().data(), this->functionvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_usecondition;
        break;
      }

      // optional string usecondition = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usecondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usecondition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usecondition().data(), this->usecondition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_quality;
        break;
      }

      // optional int32 quality = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_levelRequest;
        break;
      }

      // optional int32 levelRequest = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelRequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelrequest_)));
          set_has_levelrequest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_profession;
        break;
      }

      // optional string profession = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profession()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->profession().data(), this->profession().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bindType;
        break;
      }

      // optional int32 bindType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindtype_)));
          set_has_bindtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isTradeBind;
        break;
      }

      // optional int32 isTradeBind = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTradeBind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istradebind_)));
          set_has_istradebind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_stackLimit;
        break;
      }

      // optional int32 stackLimit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stackLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stacklimit_)));
          set_has_stacklimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_sellPrice;
        break;
      }

      // optional int32 sellPrice = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice_)));
          set_has_sellprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_sellBox;
        break;
      }

      // optional int64 sellBox = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sellbox_)));
          set_has_sellbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_broadcast;
        break;
      }

      // optional int32 broadcast = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadcast_)));
          set_has_broadcast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_isCanBatchUse;
        break;
      }

      // optional int32 isCanBatchUse = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCanBatchUse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscanbatchuse_)));
          set_has_iscanbatchuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_dayUse;
        break;
      }

      // optional int32 dayUse = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayUse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayuse_)));
          set_has_dayuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_outTime;
        break;
      }

      // optional int32 outTime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outtime_)));
          set_has_outtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_useLimit;
        break;
      }

      // optional string useLimit = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useLimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uselimit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uselimit().data(), this->uselimit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_blessing;
        break;
      }

      // optional int32 blessing = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blessing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blessing_)));
          set_has_blessing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_invest;
        break;
      }

      // optional int32 invest = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invest_)));
          set_has_invest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_exchange;
        break;
      }

      // optional int32 exchange = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void itemitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 itemType = 3;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemtype(), output);
  }

  // optional int32 subType = 4;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->subtype(), output);
  }

  // optional int32 functionType = 5;
  if (has_functiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->functiontype(), output);
  }

  // optional string functionValue = 6;
  if (has_functionvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->functionvalue().data(), this->functionvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->functionvalue(), output);
  }

  // optional string usecondition = 7;
  if (has_usecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usecondition().data(), this->usecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->usecondition(), output);
  }

  // optional int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }

  // optional int32 quality = 9;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->quality(), output);
  }

  // optional int32 levelRequest = 10;
  if (has_levelrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->levelrequest(), output);
  }

  // optional string profession = 11;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->profession(), output);
  }

  // optional int32 bindType = 12;
  if (has_bindtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bindtype(), output);
  }

  // optional int32 isTradeBind = 13;
  if (has_istradebind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->istradebind(), output);
  }

  // optional int32 stackLimit = 14;
  if (has_stacklimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->stacklimit(), output);
  }

  // optional int32 sellPrice = 15;
  if (has_sellprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->sellprice(), output);
  }

  // optional int64 sellBox = 16;
  if (has_sellbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->sellbox(), output);
  }

  // optional int32 broadcast = 17;
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->broadcast(), output);
  }

  // optional int32 isCanBatchUse = 18;
  if (has_iscanbatchuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->iscanbatchuse(), output);
  }

  // optional int32 dayUse = 19;
  if (has_dayuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->dayuse(), output);
  }

  // optional int32 outTime = 20;
  if (has_outtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->outtime(), output);
  }

  // optional string useLimit = 21;
  if (has_uselimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uselimit().data(), this->uselimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->uselimit(), output);
  }

  // optional int32 blessing = 22;
  if (has_blessing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->blessing(), output);
  }

  // optional int32 invest = 23;
  if (has_invest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->invest(), output);
  }

  // optional int32 exchange = 24;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->exchange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* itemitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 itemType = 3;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemtype(), target);
  }

  // optional int32 subType = 4;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->subtype(), target);
  }

  // optional int32 functionType = 5;
  if (has_functiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->functiontype(), target);
  }

  // optional string functionValue = 6;
  if (has_functionvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->functionvalue().data(), this->functionvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->functionvalue(), target);
  }

  // optional string usecondition = 7;
  if (has_usecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usecondition().data(), this->usecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->usecondition(), target);
  }

  // optional int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }

  // optional int32 quality = 9;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->quality(), target);
  }

  // optional int32 levelRequest = 10;
  if (has_levelrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->levelrequest(), target);
  }

  // optional string profession = 11;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->profession(), target);
  }

  // optional int32 bindType = 12;
  if (has_bindtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bindtype(), target);
  }

  // optional int32 isTradeBind = 13;
  if (has_istradebind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->istradebind(), target);
  }

  // optional int32 stackLimit = 14;
  if (has_stacklimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->stacklimit(), target);
  }

  // optional int32 sellPrice = 15;
  if (has_sellprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->sellprice(), target);
  }

  // optional int64 sellBox = 16;
  if (has_sellbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->sellbox(), target);
  }

  // optional int32 broadcast = 17;
  if (has_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->broadcast(), target);
  }

  // optional int32 isCanBatchUse = 18;
  if (has_iscanbatchuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->iscanbatchuse(), target);
  }

  // optional int32 dayUse = 19;
  if (has_dayuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->dayuse(), target);
  }

  // optional int32 outTime = 20;
  if (has_outtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->outtime(), target);
  }

  // optional string useLimit = 21;
  if (has_uselimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uselimit().data(), this->uselimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->uselimit(), target);
  }

  // optional int32 blessing = 22;
  if (has_blessing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->blessing(), target);
  }

  // optional int32 invest = 23;
  if (has_invest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->invest(), target);
  }

  // optional int32 exchange = 24;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->exchange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int itemitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 itemType = 3;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // optional int32 subType = 4;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }

    // optional int32 functionType = 5;
    if (has_functiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functiontype());
    }

    // optional string functionValue = 6;
    if (has_functionvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->functionvalue());
    }

    // optional string usecondition = 7;
    if (has_usecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usecondition());
    }

    // optional int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 quality = 9;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 levelRequest = 10;
    if (has_levelrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelrequest());
    }

    // optional string profession = 11;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profession());
    }

    // optional int32 bindType = 12;
    if (has_bindtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindtype());
    }

    // optional int32 isTradeBind = 13;
    if (has_istradebind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istradebind());
    }

    // optional int32 stackLimit = 14;
    if (has_stacklimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stacklimit());
    }

    // optional int32 sellPrice = 15;
    if (has_sellprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice());
    }

    // optional int64 sellBox = 16;
    if (has_sellbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sellbox());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 broadcast = 17;
    if (has_broadcast()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadcast());
    }

    // optional int32 isCanBatchUse = 18;
    if (has_iscanbatchuse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscanbatchuse());
    }

    // optional int32 dayUse = 19;
    if (has_dayuse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayuse());
    }

    // optional int32 outTime = 20;
    if (has_outtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outtime());
    }

    // optional string useLimit = 21;
    if (has_uselimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uselimit());
    }

    // optional int32 blessing = 22;
    if (has_blessing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blessing());
    }

    // optional int32 invest = 23;
    if (has_invest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invest());
    }

    // optional int32 exchange = 24;
    if (has_exchange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void itemitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const itemitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const itemitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void itemitem::MergeFrom(const itemitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_functiontype()) {
      set_functiontype(from.functiontype());
    }
    if (from.has_functionvalue()) {
      set_functionvalue(from.functionvalue());
    }
    if (from.has_usecondition()) {
      set_usecondition(from.usecondition());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_levelrequest()) {
      set_levelrequest(from.levelrequest());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_bindtype()) {
      set_bindtype(from.bindtype());
    }
    if (from.has_istradebind()) {
      set_istradebind(from.istradebind());
    }
    if (from.has_stacklimit()) {
      set_stacklimit(from.stacklimit());
    }
    if (from.has_sellprice()) {
      set_sellprice(from.sellprice());
    }
    if (from.has_sellbox()) {
      set_sellbox(from.sellbox());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_broadcast()) {
      set_broadcast(from.broadcast());
    }
    if (from.has_iscanbatchuse()) {
      set_iscanbatchuse(from.iscanbatchuse());
    }
    if (from.has_dayuse()) {
      set_dayuse(from.dayuse());
    }
    if (from.has_outtime()) {
      set_outtime(from.outtime());
    }
    if (from.has_uselimit()) {
      set_uselimit(from.uselimit());
    }
    if (from.has_blessing()) {
      set_blessing(from.blessing());
    }
    if (from.has_invest()) {
      set_invest(from.invest());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void itemitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void itemitem::CopyFrom(const itemitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool itemitem::IsInitialized() const {

  return true;
}

void itemitem::Swap(itemitem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(subtype_, other->subtype_);
    std::swap(functiontype_, other->functiontype_);
    std::swap(functionvalue_, other->functionvalue_);
    std::swap(usecondition_, other->usecondition_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(levelrequest_, other->levelrequest_);
    std::swap(profession_, other->profession_);
    std::swap(bindtype_, other->bindtype_);
    std::swap(istradebind_, other->istradebind_);
    std::swap(stacklimit_, other->stacklimit_);
    std::swap(sellprice_, other->sellprice_);
    std::swap(sellbox_, other->sellbox_);
    std::swap(broadcast_, other->broadcast_);
    std::swap(iscanbatchuse_, other->iscanbatchuse_);
    std::swap(dayuse_, other->dayuse_);
    std::swap(outtime_, other->outtime_);
    std::swap(uselimit_, other->uselimit_);
    std::swap(blessing_, other->blessing_);
    std::swap(invest_, other->invest_);
    std::swap(exchange_, other->exchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata itemitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = itemitem_descriptor_;
  metadata.reflection = itemitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_itemitem::kItemitemListFieldNumber;
#endif  // !_MSC_VER

Sheet_itemitem::Sheet_itemitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_itemitem::InitAsDefaultInstance() {
}

Sheet_itemitem::Sheet_itemitem(const Sheet_itemitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_itemitem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_itemitem::~Sheet_itemitem() {
  SharedDtor();
}

void Sheet_itemitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_itemitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_itemitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_itemitem_descriptor_;
}

const Sheet_itemitem& Sheet_itemitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

Sheet_itemitem* Sheet_itemitem::default_instance_ = NULL;

Sheet_itemitem* Sheet_itemitem::New() const {
  return new Sheet_itemitem;
}

void Sheet_itemitem::Clear() {
  itemitem_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_itemitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.itemitem itemitem_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemitem_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemitem_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemitem_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_itemitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.itemitem itemitem_List = 1;
  for (int i = 0; i < this->itemitem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemitem_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_itemitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.itemitem itemitem_List = 1;
  for (int i = 0; i < this->itemitem_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemitem_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_itemitem::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.itemitem itemitem_List = 1;
  total_size += 1 * this->itemitem_list_size();
  for (int i = 0; i < this->itemitem_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemitem_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_itemitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_itemitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_itemitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_itemitem::MergeFrom(const Sheet_itemitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemitem_list_.MergeFrom(from.itemitem_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_itemitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_itemitem::CopyFrom(const Sheet_itemitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_itemitem::IsInitialized() const {

  return true;
}

void Sheet_itemitem::Swap(Sheet_itemitem* other) {
  if (other != this) {
    itemitem_list_.Swap(&other->itemitem_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_itemitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_itemitem_descriptor_;
  metadata.reflection = Sheet_itemitem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
