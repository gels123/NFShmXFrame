// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Convoy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Convoy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* NotifyConvoyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyConvoyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvoyAcceptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvoyAcceptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvoyAcceptRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvoyAcceptRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyConvoyReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyConvoyReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvoyTimeOutNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvoyTimeOutNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshEscortReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshEscortReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshEscortRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshEscortRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Convoy_2eproto() {
  protobuf_AddDesc_Convoy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Convoy.proto");
  GOOGLE_CHECK(file != NULL);
  NotifyConvoyInfo_descriptor_ = file->message_type(0);
  static const int NotifyConvoyInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyConvoyInfo, daynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyConvoyInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyConvoyInfo, genescortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyConvoyInfo, freenum_),
  };
  NotifyConvoyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyConvoyInfo_descriptor_,
      NotifyConvoyInfo::default_instance_,
      NotifyConvoyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyConvoyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyConvoyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyConvoyInfo));
  ConvoyAcceptReq_descriptor_ = file->message_type(1);
  static const int ConvoyAcceptReq_offsets_[1] = {
  };
  ConvoyAcceptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConvoyAcceptReq_descriptor_,
      ConvoyAcceptReq::default_instance_,
      ConvoyAcceptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyAcceptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyAcceptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConvoyAcceptReq));
  ConvoyAcceptRsp_descriptor_ = file->message_type(2);
  static const int ConvoyAcceptRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyAcceptRsp, ret_),
  };
  ConvoyAcceptRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConvoyAcceptRsp_descriptor_,
      ConvoyAcceptRsp::default_instance_,
      ConvoyAcceptRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyAcceptRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyAcceptRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConvoyAcceptRsp));
  NotifyConvoyReward_descriptor_ = file->message_type(3);
  static const int NotifyConvoyReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyConvoyReward, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyConvoyReward, items_),
  };
  NotifyConvoyReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyConvoyReward_descriptor_,
      NotifyConvoyReward::default_instance_,
      NotifyConvoyReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyConvoyReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyConvoyReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyConvoyReward));
  ConvoyTimeOutNotify_descriptor_ = file->message_type(4);
  static const int ConvoyTimeOutNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyTimeOutNotify, escortid_),
  };
  ConvoyTimeOutNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConvoyTimeOutNotify_descriptor_,
      ConvoyTimeOutNotify::default_instance_,
      ConvoyTimeOutNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyTimeOutNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyTimeOutNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConvoyTimeOutNotify));
  RefreshEscortReq_descriptor_ = file->message_type(5);
  static const int RefreshEscortReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshEscortReq, onekey_),
  };
  RefreshEscortReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshEscortReq_descriptor_,
      RefreshEscortReq::default_instance_,
      RefreshEscortReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshEscortReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshEscortReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshEscortReq));
  RefreshEscortRsp_descriptor_ = file->message_type(6);
  static const int RefreshEscortRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshEscortRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshEscortRsp, genescortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshEscortRsp, refreshtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshEscortRsp, costmoneycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshEscortRsp, costitemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshEscortRsp, onekey_),
  };
  RefreshEscortRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshEscortRsp_descriptor_,
      RefreshEscortRsp::default_instance_,
      RefreshEscortRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshEscortRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshEscortRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshEscortRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Convoy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyConvoyInfo_descriptor_, &NotifyConvoyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConvoyAcceptReq_descriptor_, &ConvoyAcceptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConvoyAcceptRsp_descriptor_, &ConvoyAcceptRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyConvoyReward_descriptor_, &NotifyConvoyReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConvoyTimeOutNotify_descriptor_, &ConvoyTimeOutNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshEscortReq_descriptor_, &RefreshEscortReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshEscortRsp_descriptor_, &RefreshEscortRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Convoy_2eproto() {
  delete NotifyConvoyInfo::default_instance_;
  delete NotifyConvoyInfo_reflection_;
  delete ConvoyAcceptReq::default_instance_;
  delete ConvoyAcceptReq_reflection_;
  delete ConvoyAcceptRsp::default_instance_;
  delete ConvoyAcceptRsp_reflection_;
  delete NotifyConvoyReward::default_instance_;
  delete NotifyConvoyReward_reflection_;
  delete ConvoyTimeOutNotify::default_instance_;
  delete ConvoyTimeOutNotify_reflection_;
  delete RefreshEscortReq::default_instance_;
  delete RefreshEscortReq_reflection_;
  delete RefreshEscortRsp::default_instance_;
  delete RefreshEscortRsp_reflection_;
}

void protobuf_AddDesc_Convoy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Convoy.proto\022\010proto_ff\032\tCom.proto\032\017Com"
    "Define.proto\"Y\n\020NotifyConvoyInfo\022\016\n\006dayn"
    "um\030\001 \001(\005\022\017\n\007endTime\030\002 \001(\004\022\023\n\013genEscortId"
    "\030\003 \001(\005\022\017\n\007freeNum\030\004 \001(\005\"\021\n\017ConvoyAcceptR"
    "eq\"\036\n\017ConvoyAcceptRsp\022\013\n\003ret\030\001 \001(\005\"E\n\022No"
    "tifyConvoyReward\022\013\n\003exp\030\001 \001(\003\022\"\n\005items\030\002"
    " \003(\0132\023.proto_ff.ComPair64\"\'\n\023ConvoyTimeO"
    "utNotify\022\020\n\010escortId\030\001 \001(\005\"\"\n\020RefreshEsc"
    "ortReq\022\016\n\006onekey\030\001 \001(\010\"\211\001\n\020RefreshEscort"
    "Rsp\022\013\n\003ret\030\001 \001(\005\022\023\n\013genEscortId\030\002 \001(\005\022\024\n"
    "\014refreshTimes\030\003 \001(\005\022\026\n\016costMoneyCount\030\004 "
    "\001(\005\022\025\n\rcostItemCount\030\005 \001(\005\022\016\n\006onekey\030\006 \001"
    "(\010", 482);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Convoy.proto", &protobuf_RegisterTypes);
  NotifyConvoyInfo::default_instance_ = new NotifyConvoyInfo();
  ConvoyAcceptReq::default_instance_ = new ConvoyAcceptReq();
  ConvoyAcceptRsp::default_instance_ = new ConvoyAcceptRsp();
  NotifyConvoyReward::default_instance_ = new NotifyConvoyReward();
  ConvoyTimeOutNotify::default_instance_ = new ConvoyTimeOutNotify();
  RefreshEscortReq::default_instance_ = new RefreshEscortReq();
  RefreshEscortRsp::default_instance_ = new RefreshEscortRsp();
  NotifyConvoyInfo::default_instance_->InitAsDefaultInstance();
  ConvoyAcceptReq::default_instance_->InitAsDefaultInstance();
  ConvoyAcceptRsp::default_instance_->InitAsDefaultInstance();
  NotifyConvoyReward::default_instance_->InitAsDefaultInstance();
  ConvoyTimeOutNotify::default_instance_->InitAsDefaultInstance();
  RefreshEscortReq::default_instance_->InitAsDefaultInstance();
  RefreshEscortRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Convoy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Convoy_2eproto {
  StaticDescriptorInitializer_Convoy_2eproto() {
    protobuf_AddDesc_Convoy_2eproto();
  }
} static_descriptor_initializer_Convoy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NotifyConvoyInfo::kDaynumFieldNumber;
const int NotifyConvoyInfo::kEndTimeFieldNumber;
const int NotifyConvoyInfo::kGenEscortIdFieldNumber;
const int NotifyConvoyInfo::kFreeNumFieldNumber;
#endif  // !_MSC_VER

NotifyConvoyInfo::NotifyConvoyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyConvoyInfo::InitAsDefaultInstance() {
}

NotifyConvoyInfo::NotifyConvoyInfo(const NotifyConvoyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyConvoyInfo::SharedCtor() {
  _cached_size_ = 0;
  daynum_ = 0;
  endtime_ = GOOGLE_ULONGLONG(0);
  genescortid_ = 0;
  freenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyConvoyInfo::~NotifyConvoyInfo() {
  SharedDtor();
}

void NotifyConvoyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyConvoyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyConvoyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyConvoyInfo_descriptor_;
}

const NotifyConvoyInfo& NotifyConvoyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Convoy_2eproto();
  return *default_instance_;
}

NotifyConvoyInfo* NotifyConvoyInfo::default_instance_ = NULL;

NotifyConvoyInfo* NotifyConvoyInfo::New() const {
  return new NotifyConvoyInfo;
}

void NotifyConvoyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    daynum_ = 0;
    endtime_ = GOOGLE_ULONGLONG(0);
    genescortid_ = 0;
    freenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyConvoyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 daynum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daynum_)));
          set_has_daynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }

      // optional uint64 endTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_genEscortId;
        break;
      }

      // optional int32 genEscortId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genEscortId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &genescortid_)));
          set_has_genescortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_freeNum;
        break;
      }

      // optional int32 freeNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freenum_)));
          set_has_freenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyConvoyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 daynum = 1;
  if (has_daynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->daynum(), output);
  }

  // optional uint64 endTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->endtime(), output);
  }

  // optional int32 genEscortId = 3;
  if (has_genescortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->genescortid(), output);
  }

  // optional int32 freeNum = 4;
  if (has_freenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->freenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyConvoyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 daynum = 1;
  if (has_daynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->daynum(), target);
  }

  // optional uint64 endTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->endtime(), target);
  }

  // optional int32 genEscortId = 3;
  if (has_genescortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->genescortid(), target);
  }

  // optional int32 freeNum = 4;
  if (has_freenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->freenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyConvoyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 daynum = 1;
    if (has_daynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daynum());
    }

    // optional uint64 endTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional int32 genEscortId = 3;
    if (has_genescortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->genescortid());
    }

    // optional int32 freeNum = 4;
    if (has_freenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyConvoyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyConvoyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyConvoyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyConvoyInfo::MergeFrom(const NotifyConvoyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daynum()) {
      set_daynum(from.daynum());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_genescortid()) {
      set_genescortid(from.genescortid());
    }
    if (from.has_freenum()) {
      set_freenum(from.freenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyConvoyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyConvoyInfo::CopyFrom(const NotifyConvoyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyConvoyInfo::IsInitialized() const {

  return true;
}

void NotifyConvoyInfo::Swap(NotifyConvoyInfo* other) {
  if (other != this) {
    std::swap(daynum_, other->daynum_);
    std::swap(endtime_, other->endtime_);
    std::swap(genescortid_, other->genescortid_);
    std::swap(freenum_, other->freenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyConvoyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyConvoyInfo_descriptor_;
  metadata.reflection = NotifyConvoyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ConvoyAcceptReq::ConvoyAcceptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConvoyAcceptReq::InitAsDefaultInstance() {
}

ConvoyAcceptReq::ConvoyAcceptReq(const ConvoyAcceptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConvoyAcceptReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvoyAcceptReq::~ConvoyAcceptReq() {
  SharedDtor();
}

void ConvoyAcceptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConvoyAcceptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvoyAcceptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvoyAcceptReq_descriptor_;
}

const ConvoyAcceptReq& ConvoyAcceptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Convoy_2eproto();
  return *default_instance_;
}

ConvoyAcceptReq* ConvoyAcceptReq::default_instance_ = NULL;

ConvoyAcceptReq* ConvoyAcceptReq::New() const {
  return new ConvoyAcceptReq;
}

void ConvoyAcceptReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConvoyAcceptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ConvoyAcceptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConvoyAcceptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConvoyAcceptReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvoyAcceptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConvoyAcceptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConvoyAcceptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConvoyAcceptReq::MergeFrom(const ConvoyAcceptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConvoyAcceptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvoyAcceptReq::CopyFrom(const ConvoyAcceptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvoyAcceptReq::IsInitialized() const {

  return true;
}

void ConvoyAcceptReq::Swap(ConvoyAcceptReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConvoyAcceptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvoyAcceptReq_descriptor_;
  metadata.reflection = ConvoyAcceptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConvoyAcceptRsp::kRetFieldNumber;
#endif  // !_MSC_VER

ConvoyAcceptRsp::ConvoyAcceptRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConvoyAcceptRsp::InitAsDefaultInstance() {
}

ConvoyAcceptRsp::ConvoyAcceptRsp(const ConvoyAcceptRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConvoyAcceptRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvoyAcceptRsp::~ConvoyAcceptRsp() {
  SharedDtor();
}

void ConvoyAcceptRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConvoyAcceptRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvoyAcceptRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvoyAcceptRsp_descriptor_;
}

const ConvoyAcceptRsp& ConvoyAcceptRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Convoy_2eproto();
  return *default_instance_;
}

ConvoyAcceptRsp* ConvoyAcceptRsp::default_instance_ = NULL;

ConvoyAcceptRsp* ConvoyAcceptRsp::New() const {
  return new ConvoyAcceptRsp;
}

void ConvoyAcceptRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConvoyAcceptRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConvoyAcceptRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConvoyAcceptRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConvoyAcceptRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvoyAcceptRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConvoyAcceptRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConvoyAcceptRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConvoyAcceptRsp::MergeFrom(const ConvoyAcceptRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConvoyAcceptRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvoyAcceptRsp::CopyFrom(const ConvoyAcceptRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvoyAcceptRsp::IsInitialized() const {

  return true;
}

void ConvoyAcceptRsp::Swap(ConvoyAcceptRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConvoyAcceptRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvoyAcceptRsp_descriptor_;
  metadata.reflection = ConvoyAcceptRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyConvoyReward::kExpFieldNumber;
const int NotifyConvoyReward::kItemsFieldNumber;
#endif  // !_MSC_VER

NotifyConvoyReward::NotifyConvoyReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyConvoyReward::InitAsDefaultInstance() {
}

NotifyConvoyReward::NotifyConvoyReward(const NotifyConvoyReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyConvoyReward::SharedCtor() {
  _cached_size_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyConvoyReward::~NotifyConvoyReward() {
  SharedDtor();
}

void NotifyConvoyReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyConvoyReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyConvoyReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyConvoyReward_descriptor_;
}

const NotifyConvoyReward& NotifyConvoyReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Convoy_2eproto();
  return *default_instance_;
}

NotifyConvoyReward* NotifyConvoyReward::default_instance_ = NULL;

NotifyConvoyReward* NotifyConvoyReward::New() const {
  return new NotifyConvoyReward;
}

void NotifyConvoyReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = GOOGLE_LONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyConvoyReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ComPair64 items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyConvoyReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->exp(), output);
  }

  // repeated .proto_ff.ComPair64 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyConvoyReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->exp(), target);
  }

  // repeated .proto_ff.ComPair64 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyConvoyReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

  }
  // repeated .proto_ff.ComPair64 items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyConvoyReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyConvoyReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyConvoyReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyConvoyReward::MergeFrom(const NotifyConvoyReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyConvoyReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyConvoyReward::CopyFrom(const NotifyConvoyReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyConvoyReward::IsInitialized() const {

  return true;
}

void NotifyConvoyReward::Swap(NotifyConvoyReward* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyConvoyReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyConvoyReward_descriptor_;
  metadata.reflection = NotifyConvoyReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConvoyTimeOutNotify::kEscortIdFieldNumber;
#endif  // !_MSC_VER

ConvoyTimeOutNotify::ConvoyTimeOutNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConvoyTimeOutNotify::InitAsDefaultInstance() {
}

ConvoyTimeOutNotify::ConvoyTimeOutNotify(const ConvoyTimeOutNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConvoyTimeOutNotify::SharedCtor() {
  _cached_size_ = 0;
  escortid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvoyTimeOutNotify::~ConvoyTimeOutNotify() {
  SharedDtor();
}

void ConvoyTimeOutNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConvoyTimeOutNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvoyTimeOutNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvoyTimeOutNotify_descriptor_;
}

const ConvoyTimeOutNotify& ConvoyTimeOutNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Convoy_2eproto();
  return *default_instance_;
}

ConvoyTimeOutNotify* ConvoyTimeOutNotify::default_instance_ = NULL;

ConvoyTimeOutNotify* ConvoyTimeOutNotify::New() const {
  return new ConvoyTimeOutNotify;
}

void ConvoyTimeOutNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    escortid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConvoyTimeOutNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 escortId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &escortid_)));
          set_has_escortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConvoyTimeOutNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 escortId = 1;
  if (has_escortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->escortid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConvoyTimeOutNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 escortId = 1;
  if (has_escortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->escortid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConvoyTimeOutNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 escortId = 1;
    if (has_escortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->escortid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvoyTimeOutNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConvoyTimeOutNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConvoyTimeOutNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConvoyTimeOutNotify::MergeFrom(const ConvoyTimeOutNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_escortid()) {
      set_escortid(from.escortid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConvoyTimeOutNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvoyTimeOutNotify::CopyFrom(const ConvoyTimeOutNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvoyTimeOutNotify::IsInitialized() const {

  return true;
}

void ConvoyTimeOutNotify::Swap(ConvoyTimeOutNotify* other) {
  if (other != this) {
    std::swap(escortid_, other->escortid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConvoyTimeOutNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvoyTimeOutNotify_descriptor_;
  metadata.reflection = ConvoyTimeOutNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshEscortReq::kOnekeyFieldNumber;
#endif  // !_MSC_VER

RefreshEscortReq::RefreshEscortReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshEscortReq::InitAsDefaultInstance() {
}

RefreshEscortReq::RefreshEscortReq(const RefreshEscortReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshEscortReq::SharedCtor() {
  _cached_size_ = 0;
  onekey_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshEscortReq::~RefreshEscortReq() {
  SharedDtor();
}

void RefreshEscortReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshEscortReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshEscortReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshEscortReq_descriptor_;
}

const RefreshEscortReq& RefreshEscortReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Convoy_2eproto();
  return *default_instance_;
}

RefreshEscortReq* RefreshEscortReq::default_instance_ = NULL;

RefreshEscortReq* RefreshEscortReq::New() const {
  return new RefreshEscortReq;
}

void RefreshEscortReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    onekey_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshEscortReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool onekey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onekey_)));
          set_has_onekey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefreshEscortReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool onekey = 1;
  if (has_onekey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->onekey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshEscortReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool onekey = 1;
  if (has_onekey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->onekey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshEscortReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool onekey = 1;
    if (has_onekey()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshEscortReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshEscortReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshEscortReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshEscortReq::MergeFrom(const RefreshEscortReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onekey()) {
      set_onekey(from.onekey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshEscortReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshEscortReq::CopyFrom(const RefreshEscortReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshEscortReq::IsInitialized() const {

  return true;
}

void RefreshEscortReq::Swap(RefreshEscortReq* other) {
  if (other != this) {
    std::swap(onekey_, other->onekey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshEscortReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshEscortReq_descriptor_;
  metadata.reflection = RefreshEscortReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshEscortRsp::kRetFieldNumber;
const int RefreshEscortRsp::kGenEscortIdFieldNumber;
const int RefreshEscortRsp::kRefreshTimesFieldNumber;
const int RefreshEscortRsp::kCostMoneyCountFieldNumber;
const int RefreshEscortRsp::kCostItemCountFieldNumber;
const int RefreshEscortRsp::kOnekeyFieldNumber;
#endif  // !_MSC_VER

RefreshEscortRsp::RefreshEscortRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshEscortRsp::InitAsDefaultInstance() {
}

RefreshEscortRsp::RefreshEscortRsp(const RefreshEscortRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshEscortRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  genescortid_ = 0;
  refreshtimes_ = 0;
  costmoneycount_ = 0;
  costitemcount_ = 0;
  onekey_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshEscortRsp::~RefreshEscortRsp() {
  SharedDtor();
}

void RefreshEscortRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshEscortRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshEscortRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshEscortRsp_descriptor_;
}

const RefreshEscortRsp& RefreshEscortRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Convoy_2eproto();
  return *default_instance_;
}

RefreshEscortRsp* RefreshEscortRsp::default_instance_ = NULL;

RefreshEscortRsp* RefreshEscortRsp::New() const {
  return new RefreshEscortRsp;
}

void RefreshEscortRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    genescortid_ = 0;
    refreshtimes_ = 0;
    costmoneycount_ = 0;
    costitemcount_ = 0;
    onekey_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshEscortRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_genEscortId;
        break;
      }

      // optional int32 genEscortId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genEscortId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &genescortid_)));
          set_has_genescortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refreshTimes;
        break;
      }

      // optional int32 refreshTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refreshtimes_)));
          set_has_refreshtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_costMoneyCount;
        break;
      }

      // optional int32 costMoneyCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costMoneyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costmoneycount_)));
          set_has_costmoneycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_costItemCount;
        break;
      }

      // optional int32 costItemCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costItemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costitemcount_)));
          set_has_costitemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_onekey;
        break;
      }

      // optional bool onekey = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onekey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onekey_)));
          set_has_onekey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefreshEscortRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 genEscortId = 2;
  if (has_genescortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->genescortid(), output);
  }

  // optional int32 refreshTimes = 3;
  if (has_refreshtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->refreshtimes(), output);
  }

  // optional int32 costMoneyCount = 4;
  if (has_costmoneycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->costmoneycount(), output);
  }

  // optional int32 costItemCount = 5;
  if (has_costitemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->costitemcount(), output);
  }

  // optional bool onekey = 6;
  if (has_onekey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->onekey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshEscortRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 genEscortId = 2;
  if (has_genescortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->genescortid(), target);
  }

  // optional int32 refreshTimes = 3;
  if (has_refreshtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refreshtimes(), target);
  }

  // optional int32 costMoneyCount = 4;
  if (has_costmoneycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->costmoneycount(), target);
  }

  // optional int32 costItemCount = 5;
  if (has_costitemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->costitemcount(), target);
  }

  // optional bool onekey = 6;
  if (has_onekey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->onekey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshEscortRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 genEscortId = 2;
    if (has_genescortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->genescortid());
    }

    // optional int32 refreshTimes = 3;
    if (has_refreshtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refreshtimes());
    }

    // optional int32 costMoneyCount = 4;
    if (has_costmoneycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costmoneycount());
    }

    // optional int32 costItemCount = 5;
    if (has_costitemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costitemcount());
    }

    // optional bool onekey = 6;
    if (has_onekey()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshEscortRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshEscortRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshEscortRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshEscortRsp::MergeFrom(const RefreshEscortRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_genescortid()) {
      set_genescortid(from.genescortid());
    }
    if (from.has_refreshtimes()) {
      set_refreshtimes(from.refreshtimes());
    }
    if (from.has_costmoneycount()) {
      set_costmoneycount(from.costmoneycount());
    }
    if (from.has_costitemcount()) {
      set_costitemcount(from.costitemcount());
    }
    if (from.has_onekey()) {
      set_onekey(from.onekey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshEscortRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshEscortRsp::CopyFrom(const RefreshEscortRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshEscortRsp::IsInitialized() const {

  return true;
}

void RefreshEscortRsp::Swap(RefreshEscortRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(genescortid_, other->genescortid_);
    std::swap(refreshtimes_, other->refreshtimes_);
    std::swap(costmoneycount_, other->costmoneycount_);
    std::swap(costitemcount_, other->costitemcount_);
    std::swap(onekey_, other->onekey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshEscortRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshEscortRsp_descriptor_;
  metadata.reflection = RefreshEscortRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
