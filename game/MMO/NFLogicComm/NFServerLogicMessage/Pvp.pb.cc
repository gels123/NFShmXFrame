// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pvp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Pvp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* WarEmblemProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarEmblemProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarEmblemListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarEmblemListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pk1v1RankProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pk1v1RankProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pk1v1RankSimpleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pk1v1RankSimpleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_ChgPkModeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_ChgPkModeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_ChgPkModeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_ChgPkModeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_StrikeListNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_StrikeListNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_PkModeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_PkModeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_WarEmblemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_WarEmblemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_WarEmblemRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_WarEmblemRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_WarEmblemUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_WarEmblemUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_WarEmblemSoulReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_WarEmblemSoulReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_WarEmblemSoulRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_WarEmblemSoulRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_WarEmblemStarReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_WarEmblemStarReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_WarEmblemStarRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_WarEmblemStarRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_1v1InfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_1v1InfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_1v1InfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_1v1InfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_1v1InfoUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_1v1InfoUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_1v1FetchRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_1v1FetchRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_1v1FetchRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_1v1FetchRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_1v1RankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_1v1RankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_1v1RankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_1v1RankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_1v1RankSimpleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_1v1RankSimpleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_1v1ResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_1v1ResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_1v1MatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_1v1MatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_1v1MatchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_1v1MatchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_L2S_1v1RankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_L2S_1v1RankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_S2L_1v1RankNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_S2L_1v1RankNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_L2S_1v1ScoreChgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_L2S_1v1ScoreChgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_L2S_1v1MatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_L2S_1v1MatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_L2S_1v1RaceInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_L2S_1v1RaceInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pvp_S2L_1v1RaceInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pvp_S2L_1v1RaceInfoRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Pvp_2eproto() {
  protobuf_AddDesc_Pvp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Pvp.proto");
  GOOGLE_CHECK(file != NULL);
  WarEmblemProto_descriptor_ = file->message_type(0);
  static const int WarEmblemProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarEmblemProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarEmblemProto, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarEmblemProto, star_),
  };
  WarEmblemProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarEmblemProto_descriptor_,
      WarEmblemProto::default_instance_,
      WarEmblemProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarEmblemProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarEmblemProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarEmblemProto));
  WarEmblemListProto_descriptor_ = file->message_type(1);
  static const int WarEmblemListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarEmblemListProto, lst_),
  };
  WarEmblemListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarEmblemListProto_descriptor_,
      WarEmblemListProto::default_instance_,
      WarEmblemListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarEmblemListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarEmblemListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarEmblemListProto));
  Pk1v1RankProto_descriptor_ = file->message_type(2);
  static const int Pk1v1RankProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankProto, score_),
  };
  Pk1v1RankProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pk1v1RankProto_descriptor_,
      Pk1v1RankProto::default_instance_,
      Pk1v1RankProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pk1v1RankProto));
  Pk1v1RankSimpleProto_descriptor_ = file->message_type(3);
  static const int Pk1v1RankSimpleProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankSimpleProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankSimpleProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankSimpleProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankSimpleProto, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankSimpleProto, cid_),
  };
  Pk1v1RankSimpleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pk1v1RankSimpleProto_descriptor_,
      Pk1v1RankSimpleProto::default_instance_,
      Pk1v1RankSimpleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankSimpleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pk1v1RankSimpleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pk1v1RankSimpleProto));
  Pvp_ChgPkModeReq_descriptor_ = file->message_type(4);
  static const int Pvp_ChgPkModeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_ChgPkModeReq, pkmode_),
  };
  Pvp_ChgPkModeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_ChgPkModeReq_descriptor_,
      Pvp_ChgPkModeReq::default_instance_,
      Pvp_ChgPkModeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_ChgPkModeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_ChgPkModeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_ChgPkModeReq));
  Pvp_ChgPkModeRsp_descriptor_ = file->message_type(5);
  static const int Pvp_ChgPkModeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_ChgPkModeRsp, ret_),
  };
  Pvp_ChgPkModeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_ChgPkModeRsp_descriptor_,
      Pvp_ChgPkModeRsp::default_instance_,
      Pvp_ChgPkModeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_ChgPkModeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_ChgPkModeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_ChgPkModeRsp));
  Pvp_StrikeListNotify_descriptor_ = file->message_type(6);
  static const int Pvp_StrikeListNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_StrikeListNotify, strike_lst_),
  };
  Pvp_StrikeListNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_StrikeListNotify_descriptor_,
      Pvp_StrikeListNotify::default_instance_,
      Pvp_StrikeListNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_StrikeListNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_StrikeListNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_StrikeListNotify));
  Pvp_PkModeNotify_descriptor_ = file->message_type(7);
  static const int Pvp_PkModeNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_PkModeNotify, pkmode_),
  };
  Pvp_PkModeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_PkModeNotify_descriptor_,
      Pvp_PkModeNotify::default_instance_,
      Pvp_PkModeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_PkModeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_PkModeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_PkModeNotify));
  Pvp_WarEmblemReq_descriptor_ = file->message_type(8);
  static const int Pvp_WarEmblemReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemReq, type_),
  };
  Pvp_WarEmblemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_WarEmblemReq_descriptor_,
      Pvp_WarEmblemReq::default_instance_,
      Pvp_WarEmblemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_WarEmblemReq));
  Pvp_WarEmblemRsp_descriptor_ = file->message_type(9);
  static const int Pvp_WarEmblemRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemRsp, info_),
  };
  Pvp_WarEmblemRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_WarEmblemRsp_descriptor_,
      Pvp_WarEmblemRsp::default_instance_,
      Pvp_WarEmblemRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_WarEmblemRsp));
  Pvp_WarEmblemUpdateRsp_descriptor_ = file->message_type(10);
  static const int Pvp_WarEmblemUpdateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemUpdateRsp, info_),
  };
  Pvp_WarEmblemUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_WarEmblemUpdateRsp_descriptor_,
      Pvp_WarEmblemUpdateRsp::default_instance_,
      Pvp_WarEmblemUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_WarEmblemUpdateRsp));
  Pvp_WarEmblemSoulReq_descriptor_ = file->message_type(11);
  static const int Pvp_WarEmblemSoulReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemSoulReq, id_),
  };
  Pvp_WarEmblemSoulReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_WarEmblemSoulReq_descriptor_,
      Pvp_WarEmblemSoulReq::default_instance_,
      Pvp_WarEmblemSoulReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemSoulReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemSoulReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_WarEmblemSoulReq));
  Pvp_WarEmblemSoulRsp_descriptor_ = file->message_type(12);
  static const int Pvp_WarEmblemSoulRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemSoulRsp, ret_),
  };
  Pvp_WarEmblemSoulRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_WarEmblemSoulRsp_descriptor_,
      Pvp_WarEmblemSoulRsp::default_instance_,
      Pvp_WarEmblemSoulRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemSoulRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemSoulRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_WarEmblemSoulRsp));
  Pvp_WarEmblemStarReq_descriptor_ = file->message_type(13);
  static const int Pvp_WarEmblemStarReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemStarReq, id_),
  };
  Pvp_WarEmblemStarReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_WarEmblemStarReq_descriptor_,
      Pvp_WarEmblemStarReq::default_instance_,
      Pvp_WarEmblemStarReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemStarReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemStarReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_WarEmblemStarReq));
  Pvp_WarEmblemStarRsp_descriptor_ = file->message_type(14);
  static const int Pvp_WarEmblemStarRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemStarRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemStarRsp, success_),
  };
  Pvp_WarEmblemStarRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_WarEmblemStarRsp_descriptor_,
      Pvp_WarEmblemStarRsp::default_instance_,
      Pvp_WarEmblemStarRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemStarRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_WarEmblemStarRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_WarEmblemStarRsp));
  Pvp_1v1InfoReq_descriptor_ = file->message_type(15);
  static const int Pvp_1v1InfoReq_offsets_[1] = {
  };
  Pvp_1v1InfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_1v1InfoReq_descriptor_,
      Pvp_1v1InfoReq::default_instance_,
      Pvp_1v1InfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_1v1InfoReq));
  Pvp_1v1InfoRsp_descriptor_ = file->message_type(16);
  static const int Pvp_1v1InfoRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoRsp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoRsp, match_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoRsp, win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoRsp, conti_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoRsp, reward_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoRsp, already_fetch_),
  };
  Pvp_1v1InfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_1v1InfoRsp_descriptor_,
      Pvp_1v1InfoRsp::default_instance_,
      Pvp_1v1InfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_1v1InfoRsp));
  Pvp_1v1InfoUpdateRsp_descriptor_ = file->message_type(17);
  static const int Pvp_1v1InfoUpdateRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoUpdateRsp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoUpdateRsp, match_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoUpdateRsp, win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoUpdateRsp, conti_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoUpdateRsp, reward_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoUpdateRsp, already_fetch_),
  };
  Pvp_1v1InfoUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_1v1InfoUpdateRsp_descriptor_,
      Pvp_1v1InfoUpdateRsp::default_instance_,
      Pvp_1v1InfoUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1InfoUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_1v1InfoUpdateRsp));
  Pvp_1v1FetchRewardReq_descriptor_ = file->message_type(18);
  static const int Pvp_1v1FetchRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1FetchRewardReq, id_),
  };
  Pvp_1v1FetchRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_1v1FetchRewardReq_descriptor_,
      Pvp_1v1FetchRewardReq::default_instance_,
      Pvp_1v1FetchRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1FetchRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1FetchRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_1v1FetchRewardReq));
  Pvp_1v1FetchRewardRsp_descriptor_ = file->message_type(19);
  static const int Pvp_1v1FetchRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1FetchRewardRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1FetchRewardRsp, id_),
  };
  Pvp_1v1FetchRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_1v1FetchRewardRsp_descriptor_,
      Pvp_1v1FetchRewardRsp::default_instance_,
      Pvp_1v1FetchRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1FetchRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1FetchRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_1v1FetchRewardRsp));
  Pvp_1v1RankReq_descriptor_ = file->message_type(20);
  static const int Pvp_1v1RankReq_offsets_[1] = {
  };
  Pvp_1v1RankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_1v1RankReq_descriptor_,
      Pvp_1v1RankReq::default_instance_,
      Pvp_1v1RankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1RankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1RankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_1v1RankReq));
  Pvp_1v1RankRsp_descriptor_ = file->message_type(21);
  static const int Pvp_1v1RankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1RankRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1RankRsp, myrank_),
  };
  Pvp_1v1RankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_1v1RankRsp_descriptor_,
      Pvp_1v1RankRsp::default_instance_,
      Pvp_1v1RankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1RankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1RankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_1v1RankRsp));
  Pvp_1v1RankSimpleRsp_descriptor_ = file->message_type(22);
  static const int Pvp_1v1RankSimpleRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1RankSimpleRsp, rank_simple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1RankSimpleRsp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1RankSimpleRsp, myrank_),
  };
  Pvp_1v1RankSimpleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_1v1RankSimpleRsp_descriptor_,
      Pvp_1v1RankSimpleRsp::default_instance_,
      Pvp_1v1RankSimpleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1RankSimpleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1RankSimpleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_1v1RankSimpleRsp));
  Pvp_1v1ResultRsp_descriptor_ = file->message_type(23);
  static const int Pvp_1v1ResultRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1ResultRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1ResultRsp, old_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1ResultRsp, new_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1ResultRsp, reward_),
  };
  Pvp_1v1ResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_1v1ResultRsp_descriptor_,
      Pvp_1v1ResultRsp::default_instance_,
      Pvp_1v1ResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1ResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1ResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_1v1ResultRsp));
  Pvp_1v1MatchReq_descriptor_ = file->message_type(24);
  static const int Pvp_1v1MatchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1MatchReq, cancel_),
  };
  Pvp_1v1MatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_1v1MatchReq_descriptor_,
      Pvp_1v1MatchReq::default_instance_,
      Pvp_1v1MatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1MatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1MatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_1v1MatchReq));
  Pvp_1v1MatchRsp_descriptor_ = file->message_type(25);
  static const int Pvp_1v1MatchRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1MatchRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1MatchRsp, cancel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1MatchRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1MatchRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1MatchRsp, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1MatchRsp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1MatchRsp, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1MatchRsp, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1MatchRsp, head_),
  };
  Pvp_1v1MatchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_1v1MatchRsp_descriptor_,
      Pvp_1v1MatchRsp::default_instance_,
      Pvp_1v1MatchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1MatchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_1v1MatchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_1v1MatchRsp));
  Pvp_L2S_1v1RankReq_descriptor_ = file->message_type(26);
  static const int Pvp_L2S_1v1RankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1RankReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1RankReq, score_),
  };
  Pvp_L2S_1v1RankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_L2S_1v1RankReq_descriptor_,
      Pvp_L2S_1v1RankReq::default_instance_,
      Pvp_L2S_1v1RankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1RankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1RankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_L2S_1v1RankReq));
  Pvp_S2L_1v1RankNotify_descriptor_ = file->message_type(27);
  static const int Pvp_S2L_1v1RankNotify_offsets_[1] = {
  };
  Pvp_S2L_1v1RankNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_S2L_1v1RankNotify_descriptor_,
      Pvp_S2L_1v1RankNotify::default_instance_,
      Pvp_S2L_1v1RankNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_S2L_1v1RankNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_S2L_1v1RankNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_S2L_1v1RankNotify));
  Pvp_L2S_1v1ScoreChgReq_descriptor_ = file->message_type(28);
  static const int Pvp_L2S_1v1ScoreChgReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1ScoreChgReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1ScoreChgReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1ScoreChgReq, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1ScoreChgReq, match_num_),
  };
  Pvp_L2S_1v1ScoreChgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_L2S_1v1ScoreChgReq_descriptor_,
      Pvp_L2S_1v1ScoreChgReq::default_instance_,
      Pvp_L2S_1v1ScoreChgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1ScoreChgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1ScoreChgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_L2S_1v1ScoreChgReq));
  Pvp_L2S_1v1MatchReq_descriptor_ = file->message_type(29);
  static const int Pvp_L2S_1v1MatchReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1MatchReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1MatchReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1MatchReq, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1MatchReq, cancel_),
  };
  Pvp_L2S_1v1MatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_L2S_1v1MatchReq_descriptor_,
      Pvp_L2S_1v1MatchReq::default_instance_,
      Pvp_L2S_1v1MatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1MatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1MatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_L2S_1v1MatchReq));
  Pvp_L2S_1v1RaceInfoReq_descriptor_ = file->message_type(30);
  static const int Pvp_L2S_1v1RaceInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1RaceInfoReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1RaceInfoReq, logicid_),
  };
  Pvp_L2S_1v1RaceInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_L2S_1v1RaceInfoReq_descriptor_,
      Pvp_L2S_1v1RaceInfoReq::default_instance_,
      Pvp_L2S_1v1RaceInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1RaceInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_L2S_1v1RaceInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_L2S_1v1RaceInfoReq));
  Pvp_S2L_1v1RaceInfoRsp_descriptor_ = file->message_type(31);
  static const int Pvp_S2L_1v1RaceInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_S2L_1v1RaceInfoRsp, num_),
  };
  Pvp_S2L_1v1RaceInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pvp_S2L_1v1RaceInfoRsp_descriptor_,
      Pvp_S2L_1v1RaceInfoRsp::default_instance_,
      Pvp_S2L_1v1RaceInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_S2L_1v1RaceInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pvp_S2L_1v1RaceInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pvp_S2L_1v1RaceInfoRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Pvp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarEmblemProto_descriptor_, &WarEmblemProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarEmblemListProto_descriptor_, &WarEmblemListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pk1v1RankProto_descriptor_, &Pk1v1RankProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pk1v1RankSimpleProto_descriptor_, &Pk1v1RankSimpleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_ChgPkModeReq_descriptor_, &Pvp_ChgPkModeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_ChgPkModeRsp_descriptor_, &Pvp_ChgPkModeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_StrikeListNotify_descriptor_, &Pvp_StrikeListNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_PkModeNotify_descriptor_, &Pvp_PkModeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_WarEmblemReq_descriptor_, &Pvp_WarEmblemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_WarEmblemRsp_descriptor_, &Pvp_WarEmblemRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_WarEmblemUpdateRsp_descriptor_, &Pvp_WarEmblemUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_WarEmblemSoulReq_descriptor_, &Pvp_WarEmblemSoulReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_WarEmblemSoulRsp_descriptor_, &Pvp_WarEmblemSoulRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_WarEmblemStarReq_descriptor_, &Pvp_WarEmblemStarReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_WarEmblemStarRsp_descriptor_, &Pvp_WarEmblemStarRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_1v1InfoReq_descriptor_, &Pvp_1v1InfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_1v1InfoRsp_descriptor_, &Pvp_1v1InfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_1v1InfoUpdateRsp_descriptor_, &Pvp_1v1InfoUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_1v1FetchRewardReq_descriptor_, &Pvp_1v1FetchRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_1v1FetchRewardRsp_descriptor_, &Pvp_1v1FetchRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_1v1RankReq_descriptor_, &Pvp_1v1RankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_1v1RankRsp_descriptor_, &Pvp_1v1RankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_1v1RankSimpleRsp_descriptor_, &Pvp_1v1RankSimpleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_1v1ResultRsp_descriptor_, &Pvp_1v1ResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_1v1MatchReq_descriptor_, &Pvp_1v1MatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_1v1MatchRsp_descriptor_, &Pvp_1v1MatchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_L2S_1v1RankReq_descriptor_, &Pvp_L2S_1v1RankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_S2L_1v1RankNotify_descriptor_, &Pvp_S2L_1v1RankNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_L2S_1v1ScoreChgReq_descriptor_, &Pvp_L2S_1v1ScoreChgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_L2S_1v1MatchReq_descriptor_, &Pvp_L2S_1v1MatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_L2S_1v1RaceInfoReq_descriptor_, &Pvp_L2S_1v1RaceInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pvp_S2L_1v1RaceInfoRsp_descriptor_, &Pvp_S2L_1v1RaceInfoRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Pvp_2eproto() {
  delete WarEmblemProto::default_instance_;
  delete WarEmblemProto_reflection_;
  delete WarEmblemListProto::default_instance_;
  delete WarEmblemListProto_reflection_;
  delete Pk1v1RankProto::default_instance_;
  delete Pk1v1RankProto_reflection_;
  delete Pk1v1RankSimpleProto::default_instance_;
  delete Pk1v1RankSimpleProto_reflection_;
  delete Pvp_ChgPkModeReq::default_instance_;
  delete Pvp_ChgPkModeReq_reflection_;
  delete Pvp_ChgPkModeRsp::default_instance_;
  delete Pvp_ChgPkModeRsp_reflection_;
  delete Pvp_StrikeListNotify::default_instance_;
  delete Pvp_StrikeListNotify_reflection_;
  delete Pvp_PkModeNotify::default_instance_;
  delete Pvp_PkModeNotify_reflection_;
  delete Pvp_WarEmblemReq::default_instance_;
  delete Pvp_WarEmblemReq_reflection_;
  delete Pvp_WarEmblemRsp::default_instance_;
  delete Pvp_WarEmblemRsp_reflection_;
  delete Pvp_WarEmblemUpdateRsp::default_instance_;
  delete Pvp_WarEmblemUpdateRsp_reflection_;
  delete Pvp_WarEmblemSoulReq::default_instance_;
  delete Pvp_WarEmblemSoulReq_reflection_;
  delete Pvp_WarEmblemSoulRsp::default_instance_;
  delete Pvp_WarEmblemSoulRsp_reflection_;
  delete Pvp_WarEmblemStarReq::default_instance_;
  delete Pvp_WarEmblemStarReq_reflection_;
  delete Pvp_WarEmblemStarRsp::default_instance_;
  delete Pvp_WarEmblemStarRsp_reflection_;
  delete Pvp_1v1InfoReq::default_instance_;
  delete Pvp_1v1InfoReq_reflection_;
  delete Pvp_1v1InfoRsp::default_instance_;
  delete Pvp_1v1InfoRsp_reflection_;
  delete Pvp_1v1InfoUpdateRsp::default_instance_;
  delete Pvp_1v1InfoUpdateRsp_reflection_;
  delete Pvp_1v1FetchRewardReq::default_instance_;
  delete Pvp_1v1FetchRewardReq_reflection_;
  delete Pvp_1v1FetchRewardRsp::default_instance_;
  delete Pvp_1v1FetchRewardRsp_reflection_;
  delete Pvp_1v1RankReq::default_instance_;
  delete Pvp_1v1RankReq_reflection_;
  delete Pvp_1v1RankRsp::default_instance_;
  delete Pvp_1v1RankRsp_reflection_;
  delete Pvp_1v1RankSimpleRsp::default_instance_;
  delete Pvp_1v1RankSimpleRsp_reflection_;
  delete Pvp_1v1ResultRsp::default_instance_;
  delete Pvp_1v1ResultRsp_reflection_;
  delete Pvp_1v1MatchReq::default_instance_;
  delete Pvp_1v1MatchReq_reflection_;
  delete Pvp_1v1MatchRsp::default_instance_;
  delete Pvp_1v1MatchRsp_reflection_;
  delete Pvp_L2S_1v1RankReq::default_instance_;
  delete Pvp_L2S_1v1RankReq_reflection_;
  delete Pvp_S2L_1v1RankNotify::default_instance_;
  delete Pvp_S2L_1v1RankNotify_reflection_;
  delete Pvp_L2S_1v1ScoreChgReq::default_instance_;
  delete Pvp_L2S_1v1ScoreChgReq_reflection_;
  delete Pvp_L2S_1v1MatchReq::default_instance_;
  delete Pvp_L2S_1v1MatchReq_reflection_;
  delete Pvp_L2S_1v1RaceInfoReq::default_instance_;
  delete Pvp_L2S_1v1RaceInfoReq_reflection_;
  delete Pvp_S2L_1v1RaceInfoRsp::default_instance_;
  delete Pvp_S2L_1v1RaceInfoRsp_reflection_;
}

void protobuf_AddDesc_Pvp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tPvp.proto\022\010proto_ff\032\tCom.proto\032\017ComDef"
    "ine.proto\"6\n\016WarEmblemProto\022\n\n\002id\030\001 \001(\005\022"
    "\n\n\002lv\030\002 \001(\005\022\014\n\004star\030\003 \001(\005\";\n\022WarEmblemLi"
    "stProto\022%\n\003lst\030\001 \003(\0132\030.proto_ff.WarEmble"
    "mProto\"r\n\016Pk1v1RankProto\022\014\n\004rank\030\001 \001(\005\022\013"
    "\n\003cid\030\002 \001(\004\022\014\n\004name\030\003 \001(\014\022\014\n\004prof\030\004 \001(\005\022"
    "\r\n\005fight\030\005 \001(\004\022\013\n\003zid\030\006 \001(\r\022\r\n\005score\030\007 \001"
    "(\005\"[\n\024Pk1v1RankSimpleProto\022\014\n\004rank\030\001 \001(\005"
    "\022\014\n\004name\030\002 \001(\014\022\013\n\003zid\030\003 \001(\r\022\r\n\005score\030\004 \001"
    "(\005\022\013\n\003cid\030\005 \001(\004\"\"\n\020Pvp_ChgPkModeReq\022\016\n\006p"
    "kmode\030\001 \001(\005\"\037\n\020Pvp_ChgPkModeRsp\022\013\n\003ret\030\001"
    " \002(\005\"*\n\024Pvp_StrikeListNotify\022\022\n\nstrike_l"
    "st\030\001 \003(\004\"\"\n\020Pvp_PkModeNotify\022\016\n\006pkmode\030\001"
    " \001(\005\" \n\020Pvp_WarEmblemReq\022\014\n\004type\030\001 \001(\005\"L"
    "\n\020Pvp_WarEmblemRsp\022\014\n\004type\030\001 \002(\005\022*\n\004info"
    "\030\002 \001(\0132\034.proto_ff.WarEmblemListProto\"D\n\026"
    "Pvp_WarEmblemUpdateRsp\022*\n\004info\030\001 \001(\0132\034.p"
    "roto_ff.WarEmblemListProto\"\"\n\024Pvp_WarEmb"
    "lemSoulReq\022\n\n\002id\030\001 \002(\005\"#\n\024Pvp_WarEmblemS"
    "oulRsp\022\013\n\003ret\030\001 \002(\005\"\"\n\024Pvp_WarEmblemStar"
    "Req\022\n\n\002id\030\001 \002(\005\"4\n\024Pvp_WarEmblemStarRsp\022"
    "\013\n\003ret\030\001 \002(\005\022\017\n\007success\030\002 \001(\005\"\020\n\016Pvp_1v1"
    "InfoReq\"\201\001\n\016Pvp_1v1InfoRsp\022\r\n\005score\030\001 \001("
    "\005\022\021\n\tmatch_num\030\002 \001(\005\022\017\n\007win_num\030\003 \001(\005\022\021\n"
    "\tconti_num\030\004 \001(\005\022\022\n\nreward_num\030\005 \001(\005\022\025\n\r"
    "already_fetch\030\006 \003(\005\"\207\001\n\024Pvp_1v1InfoUpdat"
    "eRsp\022\r\n\005score\030\001 \001(\005\022\021\n\tmatch_num\030\002 \001(\005\022\017"
    "\n\007win_num\030\003 \001(\005\022\021\n\tconti_num\030\004 \001(\005\022\022\n\nre"
    "ward_num\030\005 \001(\005\022\025\n\ralready_fetch\030\006 \003(\005\"#\n"
    "\025Pvp_1v1FetchRewardReq\022\n\n\002id\030\001 \001(\005\"0\n\025Pv"
    "p_1v1FetchRewardRsp\022\013\n\003ret\030\001 \002(\005\022\n\n\002id\030\002"
    " \001(\005\"\020\n\016Pvp_1v1RankReq\"H\n\016Pvp_1v1RankRsp"
    "\022&\n\004rank\030\001 \003(\0132\030.proto_ff.Pk1v1RankProto"
    "\022\016\n\006myrank\030\002 \001(\005\"j\n\024Pvp_1v1RankSimpleRsp"
    "\0223\n\013rank_simple\030\001 \003(\0132\036.proto_ff.Pk1v1Ra"
    "nkSimpleProto\022\r\n\005score\030\002 \001(\005\022\016\n\006myrank\030\003"
    " \001(\005\"k\n\020Pvp_1v1ResultRsp\022\016\n\006result\030\001 \001(\005"
    "\022\021\n\told_score\030\002 \001(\005\022\021\n\tnew_score\030\003 \001(\005\022!"
    "\n\006reward\030\004 \003(\0132\021.proto_ff.ComItem\"!\n\017Pvp"
    "_1v1MatchReq\022\016\n\006cancel\030\001 \001(\005\"\262\001\n\017Pvp_1v1"
    "MatchRsp\022\013\n\003ret\030\001 \002(\005\022\016\n\006cancel\030\002 \001(\005\022\013\n"
    "\003cid\030\003 \001(\004\022\014\n\004name\030\004 \001(\014\022\014\n\004prof\030\005 \001(\005\022\r"
    "\n\005level\030\006 \001(\005\022\r\n\005fight\030\007 \001(\004\022\021\n\tbegintim"
    "e\030\010 \001(\005\022(\n\004head\030\t \001(\0132\032.proto_ff.RoleHea"
    "dPicProto\"0\n\022Pvp_L2S_1v1RankReq\022\013\n\003cid\030\001"
    " \003(\004\022\r\n\005score\030\002 \003(\005\"\027\n\025Pvp_S2L_1v1RankNo"
    "tify\"T\n\026Pvp_L2S_1v1ScoreChgReq\022\013\n\003cid\030\001 "
    "\002(\004\022\013\n\003zid\030\002 \002(\r\022\r\n\005score\030\003 \002(\005\022\021\n\tmatch"
    "_num\030\004 \002(\005\"N\n\023Pvp_L2S_1v1MatchReq\022\013\n\003cid"
    "\030\001 \002(\004\022\013\n\003zid\030\002 \002(\r\022\r\n\005score\030\003 \002(\005\022\016\n\006ca"
    "ncel\030\004 \002(\005\"6\n\026Pvp_L2S_1v1RaceInfoReq\022\013\n\003"
    "zid\030\001 \002(\r\022\017\n\007logicid\030\002 \002(\r\"%\n\026Pvp_S2L_1v"
    "1RaceInfoRsp\022\013\n\003num\030\001 \002(\005", 2105);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Pvp.proto", &protobuf_RegisterTypes);
  WarEmblemProto::default_instance_ = new WarEmblemProto();
  WarEmblemListProto::default_instance_ = new WarEmblemListProto();
  Pk1v1RankProto::default_instance_ = new Pk1v1RankProto();
  Pk1v1RankSimpleProto::default_instance_ = new Pk1v1RankSimpleProto();
  Pvp_ChgPkModeReq::default_instance_ = new Pvp_ChgPkModeReq();
  Pvp_ChgPkModeRsp::default_instance_ = new Pvp_ChgPkModeRsp();
  Pvp_StrikeListNotify::default_instance_ = new Pvp_StrikeListNotify();
  Pvp_PkModeNotify::default_instance_ = new Pvp_PkModeNotify();
  Pvp_WarEmblemReq::default_instance_ = new Pvp_WarEmblemReq();
  Pvp_WarEmblemRsp::default_instance_ = new Pvp_WarEmblemRsp();
  Pvp_WarEmblemUpdateRsp::default_instance_ = new Pvp_WarEmblemUpdateRsp();
  Pvp_WarEmblemSoulReq::default_instance_ = new Pvp_WarEmblemSoulReq();
  Pvp_WarEmblemSoulRsp::default_instance_ = new Pvp_WarEmblemSoulRsp();
  Pvp_WarEmblemStarReq::default_instance_ = new Pvp_WarEmblemStarReq();
  Pvp_WarEmblemStarRsp::default_instance_ = new Pvp_WarEmblemStarRsp();
  Pvp_1v1InfoReq::default_instance_ = new Pvp_1v1InfoReq();
  Pvp_1v1InfoRsp::default_instance_ = new Pvp_1v1InfoRsp();
  Pvp_1v1InfoUpdateRsp::default_instance_ = new Pvp_1v1InfoUpdateRsp();
  Pvp_1v1FetchRewardReq::default_instance_ = new Pvp_1v1FetchRewardReq();
  Pvp_1v1FetchRewardRsp::default_instance_ = new Pvp_1v1FetchRewardRsp();
  Pvp_1v1RankReq::default_instance_ = new Pvp_1v1RankReq();
  Pvp_1v1RankRsp::default_instance_ = new Pvp_1v1RankRsp();
  Pvp_1v1RankSimpleRsp::default_instance_ = new Pvp_1v1RankSimpleRsp();
  Pvp_1v1ResultRsp::default_instance_ = new Pvp_1v1ResultRsp();
  Pvp_1v1MatchReq::default_instance_ = new Pvp_1v1MatchReq();
  Pvp_1v1MatchRsp::default_instance_ = new Pvp_1v1MatchRsp();
  Pvp_L2S_1v1RankReq::default_instance_ = new Pvp_L2S_1v1RankReq();
  Pvp_S2L_1v1RankNotify::default_instance_ = new Pvp_S2L_1v1RankNotify();
  Pvp_L2S_1v1ScoreChgReq::default_instance_ = new Pvp_L2S_1v1ScoreChgReq();
  Pvp_L2S_1v1MatchReq::default_instance_ = new Pvp_L2S_1v1MatchReq();
  Pvp_L2S_1v1RaceInfoReq::default_instance_ = new Pvp_L2S_1v1RaceInfoReq();
  Pvp_S2L_1v1RaceInfoRsp::default_instance_ = new Pvp_S2L_1v1RaceInfoRsp();
  WarEmblemProto::default_instance_->InitAsDefaultInstance();
  WarEmblemListProto::default_instance_->InitAsDefaultInstance();
  Pk1v1RankProto::default_instance_->InitAsDefaultInstance();
  Pk1v1RankSimpleProto::default_instance_->InitAsDefaultInstance();
  Pvp_ChgPkModeReq::default_instance_->InitAsDefaultInstance();
  Pvp_ChgPkModeRsp::default_instance_->InitAsDefaultInstance();
  Pvp_StrikeListNotify::default_instance_->InitAsDefaultInstance();
  Pvp_PkModeNotify::default_instance_->InitAsDefaultInstance();
  Pvp_WarEmblemReq::default_instance_->InitAsDefaultInstance();
  Pvp_WarEmblemRsp::default_instance_->InitAsDefaultInstance();
  Pvp_WarEmblemUpdateRsp::default_instance_->InitAsDefaultInstance();
  Pvp_WarEmblemSoulReq::default_instance_->InitAsDefaultInstance();
  Pvp_WarEmblemSoulRsp::default_instance_->InitAsDefaultInstance();
  Pvp_WarEmblemStarReq::default_instance_->InitAsDefaultInstance();
  Pvp_WarEmblemStarRsp::default_instance_->InitAsDefaultInstance();
  Pvp_1v1InfoReq::default_instance_->InitAsDefaultInstance();
  Pvp_1v1InfoRsp::default_instance_->InitAsDefaultInstance();
  Pvp_1v1InfoUpdateRsp::default_instance_->InitAsDefaultInstance();
  Pvp_1v1FetchRewardReq::default_instance_->InitAsDefaultInstance();
  Pvp_1v1FetchRewardRsp::default_instance_->InitAsDefaultInstance();
  Pvp_1v1RankReq::default_instance_->InitAsDefaultInstance();
  Pvp_1v1RankRsp::default_instance_->InitAsDefaultInstance();
  Pvp_1v1RankSimpleRsp::default_instance_->InitAsDefaultInstance();
  Pvp_1v1ResultRsp::default_instance_->InitAsDefaultInstance();
  Pvp_1v1MatchReq::default_instance_->InitAsDefaultInstance();
  Pvp_1v1MatchRsp::default_instance_->InitAsDefaultInstance();
  Pvp_L2S_1v1RankReq::default_instance_->InitAsDefaultInstance();
  Pvp_S2L_1v1RankNotify::default_instance_->InitAsDefaultInstance();
  Pvp_L2S_1v1ScoreChgReq::default_instance_->InitAsDefaultInstance();
  Pvp_L2S_1v1MatchReq::default_instance_->InitAsDefaultInstance();
  Pvp_L2S_1v1RaceInfoReq::default_instance_->InitAsDefaultInstance();
  Pvp_S2L_1v1RaceInfoRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Pvp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Pvp_2eproto {
  StaticDescriptorInitializer_Pvp_2eproto() {
    protobuf_AddDesc_Pvp_2eproto();
  }
} static_descriptor_initializer_Pvp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WarEmblemProto::kIdFieldNumber;
const int WarEmblemProto::kLvFieldNumber;
const int WarEmblemProto::kStarFieldNumber;
#endif  // !_MSC_VER

WarEmblemProto::WarEmblemProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarEmblemProto::InitAsDefaultInstance() {
}

WarEmblemProto::WarEmblemProto(const WarEmblemProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarEmblemProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  lv_ = 0;
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarEmblemProto::~WarEmblemProto() {
  SharedDtor();
}

void WarEmblemProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarEmblemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarEmblemProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarEmblemProto_descriptor_;
}

const WarEmblemProto& WarEmblemProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

WarEmblemProto* WarEmblemProto::default_instance_ = NULL;

WarEmblemProto* WarEmblemProto::New() const {
  return new WarEmblemProto;
}

void WarEmblemProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    lv_ = 0;
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarEmblemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional int32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarEmblemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarEmblemProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarEmblemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarEmblemProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarEmblemProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarEmblemProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarEmblemProto::MergeFrom(const WarEmblemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarEmblemProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarEmblemProto::CopyFrom(const WarEmblemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarEmblemProto::IsInitialized() const {

  return true;
}

void WarEmblemProto::Swap(WarEmblemProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarEmblemProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarEmblemProto_descriptor_;
  metadata.reflection = WarEmblemProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarEmblemListProto::kLstFieldNumber;
#endif  // !_MSC_VER

WarEmblemListProto::WarEmblemListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarEmblemListProto::InitAsDefaultInstance() {
}

WarEmblemListProto::WarEmblemListProto(const WarEmblemListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarEmblemListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarEmblemListProto::~WarEmblemListProto() {
  SharedDtor();
}

void WarEmblemListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarEmblemListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarEmblemListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarEmblemListProto_descriptor_;
}

const WarEmblemListProto& WarEmblemListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

WarEmblemListProto* WarEmblemListProto::default_instance_ = NULL;

WarEmblemListProto* WarEmblemListProto::New() const {
  return new WarEmblemListProto;
}

void WarEmblemListProto::Clear() {
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarEmblemListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.WarEmblemProto lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarEmblemListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.WarEmblemProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarEmblemListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.WarEmblemProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarEmblemListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.WarEmblemProto lst = 1;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarEmblemListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarEmblemListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarEmblemListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarEmblemListProto::MergeFrom(const WarEmblemListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarEmblemListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarEmblemListProto::CopyFrom(const WarEmblemListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarEmblemListProto::IsInitialized() const {

  return true;
}

void WarEmblemListProto::Swap(WarEmblemListProto* other) {
  if (other != this) {
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarEmblemListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarEmblemListProto_descriptor_;
  metadata.reflection = WarEmblemListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pk1v1RankProto::kRankFieldNumber;
const int Pk1v1RankProto::kCidFieldNumber;
const int Pk1v1RankProto::kNameFieldNumber;
const int Pk1v1RankProto::kProfFieldNumber;
const int Pk1v1RankProto::kFightFieldNumber;
const int Pk1v1RankProto::kZidFieldNumber;
const int Pk1v1RankProto::kScoreFieldNumber;
#endif  // !_MSC_VER

Pk1v1RankProto::Pk1v1RankProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pk1v1RankProto::InitAsDefaultInstance() {
}

Pk1v1RankProto::Pk1v1RankProto(const Pk1v1RankProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pk1v1RankProto::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pk1v1RankProto::~Pk1v1RankProto() {
  SharedDtor();
}

void Pk1v1RankProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Pk1v1RankProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pk1v1RankProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pk1v1RankProto_descriptor_;
}

const Pk1v1RankProto& Pk1v1RankProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pk1v1RankProto* Pk1v1RankProto::default_instance_ = NULL;

Pk1v1RankProto* Pk1v1RankProto::New() const {
  return new Pk1v1RankProto;
}

void Pk1v1RankProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pk1v1RankProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional int32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_score;
        break;
      }

      // optional int32 score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pk1v1RankProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prof(), output);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fight(), output);
  }

  // optional uint32 zid = 6;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->zid(), output);
  }

  // optional int32 score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pk1v1RankProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prof(), target);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fight(), target);
  }

  // optional uint32 zid = 6;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->zid(), target);
  }

  // optional int32 score = 7;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pk1v1RankProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional uint64 fight = 5;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint32 zid = 6;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional int32 score = 7;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pk1v1RankProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pk1v1RankProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pk1v1RankProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pk1v1RankProto::MergeFrom(const Pk1v1RankProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pk1v1RankProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pk1v1RankProto::CopyFrom(const Pk1v1RankProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pk1v1RankProto::IsInitialized() const {

  return true;
}

void Pk1v1RankProto::Swap(Pk1v1RankProto* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(fight_, other->fight_);
    std::swap(zid_, other->zid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pk1v1RankProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pk1v1RankProto_descriptor_;
  metadata.reflection = Pk1v1RankProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pk1v1RankSimpleProto::kRankFieldNumber;
const int Pk1v1RankSimpleProto::kNameFieldNumber;
const int Pk1v1RankSimpleProto::kZidFieldNumber;
const int Pk1v1RankSimpleProto::kScoreFieldNumber;
const int Pk1v1RankSimpleProto::kCidFieldNumber;
#endif  // !_MSC_VER

Pk1v1RankSimpleProto::Pk1v1RankSimpleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pk1v1RankSimpleProto::InitAsDefaultInstance() {
}

Pk1v1RankSimpleProto::Pk1v1RankSimpleProto(const Pk1v1RankSimpleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pk1v1RankSimpleProto::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  score_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pk1v1RankSimpleProto::~Pk1v1RankSimpleProto() {
  SharedDtor();
}

void Pk1v1RankSimpleProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Pk1v1RankSimpleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pk1v1RankSimpleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pk1v1RankSimpleProto_descriptor_;
}

const Pk1v1RankSimpleProto& Pk1v1RankSimpleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pk1v1RankSimpleProto* Pk1v1RankSimpleProto::default_instance_ = NULL;

Pk1v1RankSimpleProto* Pk1v1RankSimpleProto::New() const {
  return new Pk1v1RankSimpleProto;
}

void Pk1v1RankSimpleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zid_ = 0u;
    score_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pk1v1RankSimpleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pk1v1RankSimpleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zid(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // optional uint64 cid = 5;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pk1v1RankSimpleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zid(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // optional uint64 cid = 5;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pk1v1RankSimpleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional uint64 cid = 5;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pk1v1RankSimpleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pk1v1RankSimpleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pk1v1RankSimpleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pk1v1RankSimpleProto::MergeFrom(const Pk1v1RankSimpleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pk1v1RankSimpleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pk1v1RankSimpleProto::CopyFrom(const Pk1v1RankSimpleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pk1v1RankSimpleProto::IsInitialized() const {

  return true;
}

void Pk1v1RankSimpleProto::Swap(Pk1v1RankSimpleProto* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(zid_, other->zid_);
    std::swap(score_, other->score_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pk1v1RankSimpleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pk1v1RankSimpleProto_descriptor_;
  metadata.reflection = Pk1v1RankSimpleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_ChgPkModeReq::kPkmodeFieldNumber;
#endif  // !_MSC_VER

Pvp_ChgPkModeReq::Pvp_ChgPkModeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_ChgPkModeReq::InitAsDefaultInstance() {
}

Pvp_ChgPkModeReq::Pvp_ChgPkModeReq(const Pvp_ChgPkModeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_ChgPkModeReq::SharedCtor() {
  _cached_size_ = 0;
  pkmode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_ChgPkModeReq::~Pvp_ChgPkModeReq() {
  SharedDtor();
}

void Pvp_ChgPkModeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_ChgPkModeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_ChgPkModeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_ChgPkModeReq_descriptor_;
}

const Pvp_ChgPkModeReq& Pvp_ChgPkModeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_ChgPkModeReq* Pvp_ChgPkModeReq::default_instance_ = NULL;

Pvp_ChgPkModeReq* Pvp_ChgPkModeReq::New() const {
  return new Pvp_ChgPkModeReq;
}

void Pvp_ChgPkModeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pkmode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_ChgPkModeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pkmode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkmode_)));
          set_has_pkmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_ChgPkModeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pkmode = 1;
  if (has_pkmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pkmode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_ChgPkModeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pkmode = 1;
  if (has_pkmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pkmode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_ChgPkModeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pkmode = 1;
    if (has_pkmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkmode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_ChgPkModeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_ChgPkModeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_ChgPkModeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_ChgPkModeReq::MergeFrom(const Pvp_ChgPkModeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pkmode()) {
      set_pkmode(from.pkmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_ChgPkModeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_ChgPkModeReq::CopyFrom(const Pvp_ChgPkModeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_ChgPkModeReq::IsInitialized() const {

  return true;
}

void Pvp_ChgPkModeReq::Swap(Pvp_ChgPkModeReq* other) {
  if (other != this) {
    std::swap(pkmode_, other->pkmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_ChgPkModeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_ChgPkModeReq_descriptor_;
  metadata.reflection = Pvp_ChgPkModeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_ChgPkModeRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Pvp_ChgPkModeRsp::Pvp_ChgPkModeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_ChgPkModeRsp::InitAsDefaultInstance() {
}

Pvp_ChgPkModeRsp::Pvp_ChgPkModeRsp(const Pvp_ChgPkModeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_ChgPkModeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_ChgPkModeRsp::~Pvp_ChgPkModeRsp() {
  SharedDtor();
}

void Pvp_ChgPkModeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_ChgPkModeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_ChgPkModeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_ChgPkModeRsp_descriptor_;
}

const Pvp_ChgPkModeRsp& Pvp_ChgPkModeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_ChgPkModeRsp* Pvp_ChgPkModeRsp::default_instance_ = NULL;

Pvp_ChgPkModeRsp* Pvp_ChgPkModeRsp::New() const {
  return new Pvp_ChgPkModeRsp;
}

void Pvp_ChgPkModeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_ChgPkModeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_ChgPkModeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_ChgPkModeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_ChgPkModeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_ChgPkModeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_ChgPkModeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_ChgPkModeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_ChgPkModeRsp::MergeFrom(const Pvp_ChgPkModeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_ChgPkModeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_ChgPkModeRsp::CopyFrom(const Pvp_ChgPkModeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_ChgPkModeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Pvp_ChgPkModeRsp::Swap(Pvp_ChgPkModeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_ChgPkModeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_ChgPkModeRsp_descriptor_;
  metadata.reflection = Pvp_ChgPkModeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_StrikeListNotify::kStrikeLstFieldNumber;
#endif  // !_MSC_VER

Pvp_StrikeListNotify::Pvp_StrikeListNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_StrikeListNotify::InitAsDefaultInstance() {
}

Pvp_StrikeListNotify::Pvp_StrikeListNotify(const Pvp_StrikeListNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_StrikeListNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_StrikeListNotify::~Pvp_StrikeListNotify() {
  SharedDtor();
}

void Pvp_StrikeListNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_StrikeListNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_StrikeListNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_StrikeListNotify_descriptor_;
}

const Pvp_StrikeListNotify& Pvp_StrikeListNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_StrikeListNotify* Pvp_StrikeListNotify::default_instance_ = NULL;

Pvp_StrikeListNotify* Pvp_StrikeListNotify::New() const {
  return new Pvp_StrikeListNotify;
}

void Pvp_StrikeListNotify::Clear() {
  strike_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_StrikeListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 strike_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strike_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_strike_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_strike_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_strike_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_StrikeListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 strike_lst = 1;
  for (int i = 0; i < this->strike_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->strike_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_StrikeListNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 strike_lst = 1;
  for (int i = 0; i < this->strike_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->strike_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_StrikeListNotify::ByteSize() const {
  int total_size = 0;

  // repeated uint64 strike_lst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->strike_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->strike_lst(i));
    }
    total_size += 1 * this->strike_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_StrikeListNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_StrikeListNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_StrikeListNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_StrikeListNotify::MergeFrom(const Pvp_StrikeListNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  strike_lst_.MergeFrom(from.strike_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_StrikeListNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_StrikeListNotify::CopyFrom(const Pvp_StrikeListNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_StrikeListNotify::IsInitialized() const {

  return true;
}

void Pvp_StrikeListNotify::Swap(Pvp_StrikeListNotify* other) {
  if (other != this) {
    strike_lst_.Swap(&other->strike_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_StrikeListNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_StrikeListNotify_descriptor_;
  metadata.reflection = Pvp_StrikeListNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_PkModeNotify::kPkmodeFieldNumber;
#endif  // !_MSC_VER

Pvp_PkModeNotify::Pvp_PkModeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_PkModeNotify::InitAsDefaultInstance() {
}

Pvp_PkModeNotify::Pvp_PkModeNotify(const Pvp_PkModeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_PkModeNotify::SharedCtor() {
  _cached_size_ = 0;
  pkmode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_PkModeNotify::~Pvp_PkModeNotify() {
  SharedDtor();
}

void Pvp_PkModeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_PkModeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_PkModeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_PkModeNotify_descriptor_;
}

const Pvp_PkModeNotify& Pvp_PkModeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_PkModeNotify* Pvp_PkModeNotify::default_instance_ = NULL;

Pvp_PkModeNotify* Pvp_PkModeNotify::New() const {
  return new Pvp_PkModeNotify;
}

void Pvp_PkModeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pkmode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_PkModeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pkmode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkmode_)));
          set_has_pkmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_PkModeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pkmode = 1;
  if (has_pkmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pkmode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_PkModeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pkmode = 1;
  if (has_pkmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pkmode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_PkModeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pkmode = 1;
    if (has_pkmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkmode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_PkModeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_PkModeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_PkModeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_PkModeNotify::MergeFrom(const Pvp_PkModeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pkmode()) {
      set_pkmode(from.pkmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_PkModeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_PkModeNotify::CopyFrom(const Pvp_PkModeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_PkModeNotify::IsInitialized() const {

  return true;
}

void Pvp_PkModeNotify::Swap(Pvp_PkModeNotify* other) {
  if (other != this) {
    std::swap(pkmode_, other->pkmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_PkModeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_PkModeNotify_descriptor_;
  metadata.reflection = Pvp_PkModeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_WarEmblemReq::kTypeFieldNumber;
#endif  // !_MSC_VER

Pvp_WarEmblemReq::Pvp_WarEmblemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_WarEmblemReq::InitAsDefaultInstance() {
}

Pvp_WarEmblemReq::Pvp_WarEmblemReq(const Pvp_WarEmblemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_WarEmblemReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_WarEmblemReq::~Pvp_WarEmblemReq() {
  SharedDtor();
}

void Pvp_WarEmblemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_WarEmblemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_WarEmblemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_WarEmblemReq_descriptor_;
}

const Pvp_WarEmblemReq& Pvp_WarEmblemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_WarEmblemReq* Pvp_WarEmblemReq::default_instance_ = NULL;

Pvp_WarEmblemReq* Pvp_WarEmblemReq::New() const {
  return new Pvp_WarEmblemReq;
}

void Pvp_WarEmblemReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_WarEmblemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_WarEmblemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_WarEmblemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_WarEmblemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_WarEmblemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_WarEmblemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_WarEmblemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_WarEmblemReq::MergeFrom(const Pvp_WarEmblemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_WarEmblemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_WarEmblemReq::CopyFrom(const Pvp_WarEmblemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_WarEmblemReq::IsInitialized() const {

  return true;
}

void Pvp_WarEmblemReq::Swap(Pvp_WarEmblemReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_WarEmblemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_WarEmblemReq_descriptor_;
  metadata.reflection = Pvp_WarEmblemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_WarEmblemRsp::kTypeFieldNumber;
const int Pvp_WarEmblemRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Pvp_WarEmblemRsp::Pvp_WarEmblemRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_WarEmblemRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::WarEmblemListProto*>(&::proto_ff::WarEmblemListProto::default_instance());
}

Pvp_WarEmblemRsp::Pvp_WarEmblemRsp(const Pvp_WarEmblemRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_WarEmblemRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_WarEmblemRsp::~Pvp_WarEmblemRsp() {
  SharedDtor();
}

void Pvp_WarEmblemRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Pvp_WarEmblemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_WarEmblemRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_WarEmblemRsp_descriptor_;
}

const Pvp_WarEmblemRsp& Pvp_WarEmblemRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_WarEmblemRsp* Pvp_WarEmblemRsp::default_instance_ = NULL;

Pvp_WarEmblemRsp* Pvp_WarEmblemRsp::New() const {
  return new Pvp_WarEmblemRsp;
}

void Pvp_WarEmblemRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::WarEmblemListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_WarEmblemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.WarEmblemListProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_WarEmblemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .proto_ff.WarEmblemListProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_WarEmblemRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .proto_ff.WarEmblemListProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_WarEmblemRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .proto_ff.WarEmblemListProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_WarEmblemRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_WarEmblemRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_WarEmblemRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_WarEmblemRsp::MergeFrom(const Pvp_WarEmblemRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::WarEmblemListProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_WarEmblemRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_WarEmblemRsp::CopyFrom(const Pvp_WarEmblemRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_WarEmblemRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Pvp_WarEmblemRsp::Swap(Pvp_WarEmblemRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_WarEmblemRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_WarEmblemRsp_descriptor_;
  metadata.reflection = Pvp_WarEmblemRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_WarEmblemUpdateRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Pvp_WarEmblemUpdateRsp::Pvp_WarEmblemUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_WarEmblemUpdateRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::WarEmblemListProto*>(&::proto_ff::WarEmblemListProto::default_instance());
}

Pvp_WarEmblemUpdateRsp::Pvp_WarEmblemUpdateRsp(const Pvp_WarEmblemUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_WarEmblemUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_WarEmblemUpdateRsp::~Pvp_WarEmblemUpdateRsp() {
  SharedDtor();
}

void Pvp_WarEmblemUpdateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Pvp_WarEmblemUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_WarEmblemUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_WarEmblemUpdateRsp_descriptor_;
}

const Pvp_WarEmblemUpdateRsp& Pvp_WarEmblemUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_WarEmblemUpdateRsp* Pvp_WarEmblemUpdateRsp::default_instance_ = NULL;

Pvp_WarEmblemUpdateRsp* Pvp_WarEmblemUpdateRsp::New() const {
  return new Pvp_WarEmblemUpdateRsp;
}

void Pvp_WarEmblemUpdateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::WarEmblemListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_WarEmblemUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.WarEmblemListProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_WarEmblemUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.WarEmblemListProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_WarEmblemUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.WarEmblemListProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_WarEmblemUpdateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.WarEmblemListProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_WarEmblemUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_WarEmblemUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_WarEmblemUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_WarEmblemUpdateRsp::MergeFrom(const Pvp_WarEmblemUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::WarEmblemListProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_WarEmblemUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_WarEmblemUpdateRsp::CopyFrom(const Pvp_WarEmblemUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_WarEmblemUpdateRsp::IsInitialized() const {

  return true;
}

void Pvp_WarEmblemUpdateRsp::Swap(Pvp_WarEmblemUpdateRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_WarEmblemUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_WarEmblemUpdateRsp_descriptor_;
  metadata.reflection = Pvp_WarEmblemUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_WarEmblemSoulReq::kIdFieldNumber;
#endif  // !_MSC_VER

Pvp_WarEmblemSoulReq::Pvp_WarEmblemSoulReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_WarEmblemSoulReq::InitAsDefaultInstance() {
}

Pvp_WarEmblemSoulReq::Pvp_WarEmblemSoulReq(const Pvp_WarEmblemSoulReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_WarEmblemSoulReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_WarEmblemSoulReq::~Pvp_WarEmblemSoulReq() {
  SharedDtor();
}

void Pvp_WarEmblemSoulReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_WarEmblemSoulReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_WarEmblemSoulReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_WarEmblemSoulReq_descriptor_;
}

const Pvp_WarEmblemSoulReq& Pvp_WarEmblemSoulReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_WarEmblemSoulReq* Pvp_WarEmblemSoulReq::default_instance_ = NULL;

Pvp_WarEmblemSoulReq* Pvp_WarEmblemSoulReq::New() const {
  return new Pvp_WarEmblemSoulReq;
}

void Pvp_WarEmblemSoulReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_WarEmblemSoulReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_WarEmblemSoulReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_WarEmblemSoulReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_WarEmblemSoulReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_WarEmblemSoulReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_WarEmblemSoulReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_WarEmblemSoulReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_WarEmblemSoulReq::MergeFrom(const Pvp_WarEmblemSoulReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_WarEmblemSoulReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_WarEmblemSoulReq::CopyFrom(const Pvp_WarEmblemSoulReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_WarEmblemSoulReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Pvp_WarEmblemSoulReq::Swap(Pvp_WarEmblemSoulReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_WarEmblemSoulReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_WarEmblemSoulReq_descriptor_;
  metadata.reflection = Pvp_WarEmblemSoulReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_WarEmblemSoulRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Pvp_WarEmblemSoulRsp::Pvp_WarEmblemSoulRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_WarEmblemSoulRsp::InitAsDefaultInstance() {
}

Pvp_WarEmblemSoulRsp::Pvp_WarEmblemSoulRsp(const Pvp_WarEmblemSoulRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_WarEmblemSoulRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_WarEmblemSoulRsp::~Pvp_WarEmblemSoulRsp() {
  SharedDtor();
}

void Pvp_WarEmblemSoulRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_WarEmblemSoulRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_WarEmblemSoulRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_WarEmblemSoulRsp_descriptor_;
}

const Pvp_WarEmblemSoulRsp& Pvp_WarEmblemSoulRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_WarEmblemSoulRsp* Pvp_WarEmblemSoulRsp::default_instance_ = NULL;

Pvp_WarEmblemSoulRsp* Pvp_WarEmblemSoulRsp::New() const {
  return new Pvp_WarEmblemSoulRsp;
}

void Pvp_WarEmblemSoulRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_WarEmblemSoulRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_WarEmblemSoulRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_WarEmblemSoulRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_WarEmblemSoulRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_WarEmblemSoulRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_WarEmblemSoulRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_WarEmblemSoulRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_WarEmblemSoulRsp::MergeFrom(const Pvp_WarEmblemSoulRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_WarEmblemSoulRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_WarEmblemSoulRsp::CopyFrom(const Pvp_WarEmblemSoulRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_WarEmblemSoulRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Pvp_WarEmblemSoulRsp::Swap(Pvp_WarEmblemSoulRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_WarEmblemSoulRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_WarEmblemSoulRsp_descriptor_;
  metadata.reflection = Pvp_WarEmblemSoulRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_WarEmblemStarReq::kIdFieldNumber;
#endif  // !_MSC_VER

Pvp_WarEmblemStarReq::Pvp_WarEmblemStarReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_WarEmblemStarReq::InitAsDefaultInstance() {
}

Pvp_WarEmblemStarReq::Pvp_WarEmblemStarReq(const Pvp_WarEmblemStarReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_WarEmblemStarReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_WarEmblemStarReq::~Pvp_WarEmblemStarReq() {
  SharedDtor();
}

void Pvp_WarEmblemStarReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_WarEmblemStarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_WarEmblemStarReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_WarEmblemStarReq_descriptor_;
}

const Pvp_WarEmblemStarReq& Pvp_WarEmblemStarReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_WarEmblemStarReq* Pvp_WarEmblemStarReq::default_instance_ = NULL;

Pvp_WarEmblemStarReq* Pvp_WarEmblemStarReq::New() const {
  return new Pvp_WarEmblemStarReq;
}

void Pvp_WarEmblemStarReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_WarEmblemStarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_WarEmblemStarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_WarEmblemStarReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_WarEmblemStarReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_WarEmblemStarReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_WarEmblemStarReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_WarEmblemStarReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_WarEmblemStarReq::MergeFrom(const Pvp_WarEmblemStarReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_WarEmblemStarReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_WarEmblemStarReq::CopyFrom(const Pvp_WarEmblemStarReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_WarEmblemStarReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Pvp_WarEmblemStarReq::Swap(Pvp_WarEmblemStarReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_WarEmblemStarReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_WarEmblemStarReq_descriptor_;
  metadata.reflection = Pvp_WarEmblemStarReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_WarEmblemStarRsp::kRetFieldNumber;
const int Pvp_WarEmblemStarRsp::kSuccessFieldNumber;
#endif  // !_MSC_VER

Pvp_WarEmblemStarRsp::Pvp_WarEmblemStarRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_WarEmblemStarRsp::InitAsDefaultInstance() {
}

Pvp_WarEmblemStarRsp::Pvp_WarEmblemStarRsp(const Pvp_WarEmblemStarRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_WarEmblemStarRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  success_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_WarEmblemStarRsp::~Pvp_WarEmblemStarRsp() {
  SharedDtor();
}

void Pvp_WarEmblemStarRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_WarEmblemStarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_WarEmblemStarRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_WarEmblemStarRsp_descriptor_;
}

const Pvp_WarEmblemStarRsp& Pvp_WarEmblemStarRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_WarEmblemStarRsp* Pvp_WarEmblemStarRsp::default_instance_ = NULL;

Pvp_WarEmblemStarRsp* Pvp_WarEmblemStarRsp::New() const {
  return new Pvp_WarEmblemStarRsp;
}

void Pvp_WarEmblemStarRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    success_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_WarEmblemStarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // optional int32 success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_WarEmblemStarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_WarEmblemStarRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_WarEmblemStarRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 success = 2;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_WarEmblemStarRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_WarEmblemStarRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_WarEmblemStarRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_WarEmblemStarRsp::MergeFrom(const Pvp_WarEmblemStarRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_WarEmblemStarRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_WarEmblemStarRsp::CopyFrom(const Pvp_WarEmblemStarRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_WarEmblemStarRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Pvp_WarEmblemStarRsp::Swap(Pvp_WarEmblemStarRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_WarEmblemStarRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_WarEmblemStarRsp_descriptor_;
  metadata.reflection = Pvp_WarEmblemStarRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Pvp_1v1InfoReq::Pvp_1v1InfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_1v1InfoReq::InitAsDefaultInstance() {
}

Pvp_1v1InfoReq::Pvp_1v1InfoReq(const Pvp_1v1InfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_1v1InfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_1v1InfoReq::~Pvp_1v1InfoReq() {
  SharedDtor();
}

void Pvp_1v1InfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_1v1InfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_1v1InfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_1v1InfoReq_descriptor_;
}

const Pvp_1v1InfoReq& Pvp_1v1InfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_1v1InfoReq* Pvp_1v1InfoReq::default_instance_ = NULL;

Pvp_1v1InfoReq* Pvp_1v1InfoReq::New() const {
  return new Pvp_1v1InfoReq;
}

void Pvp_1v1InfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_1v1InfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Pvp_1v1InfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_1v1InfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_1v1InfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_1v1InfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_1v1InfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_1v1InfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_1v1InfoReq::MergeFrom(const Pvp_1v1InfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_1v1InfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_1v1InfoReq::CopyFrom(const Pvp_1v1InfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_1v1InfoReq::IsInitialized() const {

  return true;
}

void Pvp_1v1InfoReq::Swap(Pvp_1v1InfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_1v1InfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_1v1InfoReq_descriptor_;
  metadata.reflection = Pvp_1v1InfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_1v1InfoRsp::kScoreFieldNumber;
const int Pvp_1v1InfoRsp::kMatchNumFieldNumber;
const int Pvp_1v1InfoRsp::kWinNumFieldNumber;
const int Pvp_1v1InfoRsp::kContiNumFieldNumber;
const int Pvp_1v1InfoRsp::kRewardNumFieldNumber;
const int Pvp_1v1InfoRsp::kAlreadyFetchFieldNumber;
#endif  // !_MSC_VER

Pvp_1v1InfoRsp::Pvp_1v1InfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_1v1InfoRsp::InitAsDefaultInstance() {
}

Pvp_1v1InfoRsp::Pvp_1v1InfoRsp(const Pvp_1v1InfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_1v1InfoRsp::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  match_num_ = 0;
  win_num_ = 0;
  conti_num_ = 0;
  reward_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_1v1InfoRsp::~Pvp_1v1InfoRsp() {
  SharedDtor();
}

void Pvp_1v1InfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_1v1InfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_1v1InfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_1v1InfoRsp_descriptor_;
}

const Pvp_1v1InfoRsp& Pvp_1v1InfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_1v1InfoRsp* Pvp_1v1InfoRsp::default_instance_ = NULL;

Pvp_1v1InfoRsp* Pvp_1v1InfoRsp::New() const {
  return new Pvp_1v1InfoRsp;
}

void Pvp_1v1InfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0;
    match_num_ = 0;
    win_num_ = 0;
    conti_num_ = 0;
    reward_num_ = 0;
  }
  already_fetch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_1v1InfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_num;
        break;
      }

      // optional int32 match_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_num_)));
          set_has_match_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_num;
        break;
      }

      // optional int32 win_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_conti_num;
        break;
      }

      // optional int32 conti_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conti_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conti_num_)));
          set_has_conti_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward_num;
        break;
      }

      // optional int32 reward_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_num_)));
          set_has_reward_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_already_fetch;
        break;
      }

      // repeated int32 already_fetch = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_already_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_already_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_already_fetch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_1v1InfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // optional int32 match_num = 2;
  if (has_match_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->match_num(), output);
  }

  // optional int32 win_num = 3;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win_num(), output);
  }

  // optional int32 conti_num = 4;
  if (has_conti_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->conti_num(), output);
  }

  // optional int32 reward_num = 5;
  if (has_reward_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_num(), output);
  }

  // repeated int32 already_fetch = 6;
  for (int i = 0; i < this->already_fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->already_fetch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_1v1InfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  // optional int32 match_num = 2;
  if (has_match_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->match_num(), target);
  }

  // optional int32 win_num = 3;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win_num(), target);
  }

  // optional int32 conti_num = 4;
  if (has_conti_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->conti_num(), target);
  }

  // optional int32 reward_num = 5;
  if (has_reward_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_num(), target);
  }

  // repeated int32 already_fetch = 6;
  for (int i = 0; i < this->already_fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->already_fetch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_1v1InfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 match_num = 2;
    if (has_match_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_num());
    }

    // optional int32 win_num = 3;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num());
    }

    // optional int32 conti_num = 4;
    if (has_conti_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conti_num());
    }

    // optional int32 reward_num = 5;
    if (has_reward_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_num());
    }

  }
  // repeated int32 already_fetch = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->already_fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->already_fetch(i));
    }
    total_size += 1 * this->already_fetch_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_1v1InfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_1v1InfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_1v1InfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_1v1InfoRsp::MergeFrom(const Pvp_1v1InfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  already_fetch_.MergeFrom(from.already_fetch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_match_num()) {
      set_match_num(from.match_num());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
    if (from.has_conti_num()) {
      set_conti_num(from.conti_num());
    }
    if (from.has_reward_num()) {
      set_reward_num(from.reward_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_1v1InfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_1v1InfoRsp::CopyFrom(const Pvp_1v1InfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_1v1InfoRsp::IsInitialized() const {

  return true;
}

void Pvp_1v1InfoRsp::Swap(Pvp_1v1InfoRsp* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(match_num_, other->match_num_);
    std::swap(win_num_, other->win_num_);
    std::swap(conti_num_, other->conti_num_);
    std::swap(reward_num_, other->reward_num_);
    already_fetch_.Swap(&other->already_fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_1v1InfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_1v1InfoRsp_descriptor_;
  metadata.reflection = Pvp_1v1InfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_1v1InfoUpdateRsp::kScoreFieldNumber;
const int Pvp_1v1InfoUpdateRsp::kMatchNumFieldNumber;
const int Pvp_1v1InfoUpdateRsp::kWinNumFieldNumber;
const int Pvp_1v1InfoUpdateRsp::kContiNumFieldNumber;
const int Pvp_1v1InfoUpdateRsp::kRewardNumFieldNumber;
const int Pvp_1v1InfoUpdateRsp::kAlreadyFetchFieldNumber;
#endif  // !_MSC_VER

Pvp_1v1InfoUpdateRsp::Pvp_1v1InfoUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_1v1InfoUpdateRsp::InitAsDefaultInstance() {
}

Pvp_1v1InfoUpdateRsp::Pvp_1v1InfoUpdateRsp(const Pvp_1v1InfoUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_1v1InfoUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  match_num_ = 0;
  win_num_ = 0;
  conti_num_ = 0;
  reward_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_1v1InfoUpdateRsp::~Pvp_1v1InfoUpdateRsp() {
  SharedDtor();
}

void Pvp_1v1InfoUpdateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_1v1InfoUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_1v1InfoUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_1v1InfoUpdateRsp_descriptor_;
}

const Pvp_1v1InfoUpdateRsp& Pvp_1v1InfoUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_1v1InfoUpdateRsp* Pvp_1v1InfoUpdateRsp::default_instance_ = NULL;

Pvp_1v1InfoUpdateRsp* Pvp_1v1InfoUpdateRsp::New() const {
  return new Pvp_1v1InfoUpdateRsp;
}

void Pvp_1v1InfoUpdateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0;
    match_num_ = 0;
    win_num_ = 0;
    conti_num_ = 0;
    reward_num_ = 0;
  }
  already_fetch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_1v1InfoUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_num;
        break;
      }

      // optional int32 match_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_num_)));
          set_has_match_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_num;
        break;
      }

      // optional int32 win_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_conti_num;
        break;
      }

      // optional int32 conti_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conti_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conti_num_)));
          set_has_conti_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward_num;
        break;
      }

      // optional int32 reward_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_num_)));
          set_has_reward_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_already_fetch;
        break;
      }

      // repeated int32 already_fetch = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_already_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_already_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_already_fetch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_1v1InfoUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // optional int32 match_num = 2;
  if (has_match_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->match_num(), output);
  }

  // optional int32 win_num = 3;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win_num(), output);
  }

  // optional int32 conti_num = 4;
  if (has_conti_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->conti_num(), output);
  }

  // optional int32 reward_num = 5;
  if (has_reward_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_num(), output);
  }

  // repeated int32 already_fetch = 6;
  for (int i = 0; i < this->already_fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->already_fetch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_1v1InfoUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  // optional int32 match_num = 2;
  if (has_match_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->match_num(), target);
  }

  // optional int32 win_num = 3;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win_num(), target);
  }

  // optional int32 conti_num = 4;
  if (has_conti_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->conti_num(), target);
  }

  // optional int32 reward_num = 5;
  if (has_reward_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_num(), target);
  }

  // repeated int32 already_fetch = 6;
  for (int i = 0; i < this->already_fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->already_fetch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_1v1InfoUpdateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 match_num = 2;
    if (has_match_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_num());
    }

    // optional int32 win_num = 3;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num());
    }

    // optional int32 conti_num = 4;
    if (has_conti_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conti_num());
    }

    // optional int32 reward_num = 5;
    if (has_reward_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_num());
    }

  }
  // repeated int32 already_fetch = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->already_fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->already_fetch(i));
    }
    total_size += 1 * this->already_fetch_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_1v1InfoUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_1v1InfoUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_1v1InfoUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_1v1InfoUpdateRsp::MergeFrom(const Pvp_1v1InfoUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  already_fetch_.MergeFrom(from.already_fetch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_match_num()) {
      set_match_num(from.match_num());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
    if (from.has_conti_num()) {
      set_conti_num(from.conti_num());
    }
    if (from.has_reward_num()) {
      set_reward_num(from.reward_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_1v1InfoUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_1v1InfoUpdateRsp::CopyFrom(const Pvp_1v1InfoUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_1v1InfoUpdateRsp::IsInitialized() const {

  return true;
}

void Pvp_1v1InfoUpdateRsp::Swap(Pvp_1v1InfoUpdateRsp* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(match_num_, other->match_num_);
    std::swap(win_num_, other->win_num_);
    std::swap(conti_num_, other->conti_num_);
    std::swap(reward_num_, other->reward_num_);
    already_fetch_.Swap(&other->already_fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_1v1InfoUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_1v1InfoUpdateRsp_descriptor_;
  metadata.reflection = Pvp_1v1InfoUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_1v1FetchRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

Pvp_1v1FetchRewardReq::Pvp_1v1FetchRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_1v1FetchRewardReq::InitAsDefaultInstance() {
}

Pvp_1v1FetchRewardReq::Pvp_1v1FetchRewardReq(const Pvp_1v1FetchRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_1v1FetchRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_1v1FetchRewardReq::~Pvp_1v1FetchRewardReq() {
  SharedDtor();
}

void Pvp_1v1FetchRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_1v1FetchRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_1v1FetchRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_1v1FetchRewardReq_descriptor_;
}

const Pvp_1v1FetchRewardReq& Pvp_1v1FetchRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_1v1FetchRewardReq* Pvp_1v1FetchRewardReq::default_instance_ = NULL;

Pvp_1v1FetchRewardReq* Pvp_1v1FetchRewardReq::New() const {
  return new Pvp_1v1FetchRewardReq;
}

void Pvp_1v1FetchRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_1v1FetchRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_1v1FetchRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_1v1FetchRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_1v1FetchRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_1v1FetchRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_1v1FetchRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_1v1FetchRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_1v1FetchRewardReq::MergeFrom(const Pvp_1v1FetchRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_1v1FetchRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_1v1FetchRewardReq::CopyFrom(const Pvp_1v1FetchRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_1v1FetchRewardReq::IsInitialized() const {

  return true;
}

void Pvp_1v1FetchRewardReq::Swap(Pvp_1v1FetchRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_1v1FetchRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_1v1FetchRewardReq_descriptor_;
  metadata.reflection = Pvp_1v1FetchRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_1v1FetchRewardRsp::kRetFieldNumber;
const int Pvp_1v1FetchRewardRsp::kIdFieldNumber;
#endif  // !_MSC_VER

Pvp_1v1FetchRewardRsp::Pvp_1v1FetchRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_1v1FetchRewardRsp::InitAsDefaultInstance() {
}

Pvp_1v1FetchRewardRsp::Pvp_1v1FetchRewardRsp(const Pvp_1v1FetchRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_1v1FetchRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_1v1FetchRewardRsp::~Pvp_1v1FetchRewardRsp() {
  SharedDtor();
}

void Pvp_1v1FetchRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_1v1FetchRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_1v1FetchRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_1v1FetchRewardRsp_descriptor_;
}

const Pvp_1v1FetchRewardRsp& Pvp_1v1FetchRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_1v1FetchRewardRsp* Pvp_1v1FetchRewardRsp::default_instance_ = NULL;

Pvp_1v1FetchRewardRsp* Pvp_1v1FetchRewardRsp::New() const {
  return new Pvp_1v1FetchRewardRsp;
}

void Pvp_1v1FetchRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_1v1FetchRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_1v1FetchRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_1v1FetchRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_1v1FetchRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_1v1FetchRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_1v1FetchRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_1v1FetchRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_1v1FetchRewardRsp::MergeFrom(const Pvp_1v1FetchRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_1v1FetchRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_1v1FetchRewardRsp::CopyFrom(const Pvp_1v1FetchRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_1v1FetchRewardRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Pvp_1v1FetchRewardRsp::Swap(Pvp_1v1FetchRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_1v1FetchRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_1v1FetchRewardRsp_descriptor_;
  metadata.reflection = Pvp_1v1FetchRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Pvp_1v1RankReq::Pvp_1v1RankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_1v1RankReq::InitAsDefaultInstance() {
}

Pvp_1v1RankReq::Pvp_1v1RankReq(const Pvp_1v1RankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_1v1RankReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_1v1RankReq::~Pvp_1v1RankReq() {
  SharedDtor();
}

void Pvp_1v1RankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_1v1RankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_1v1RankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_1v1RankReq_descriptor_;
}

const Pvp_1v1RankReq& Pvp_1v1RankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_1v1RankReq* Pvp_1v1RankReq::default_instance_ = NULL;

Pvp_1v1RankReq* Pvp_1v1RankReq::New() const {
  return new Pvp_1v1RankReq;
}

void Pvp_1v1RankReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_1v1RankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Pvp_1v1RankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_1v1RankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_1v1RankReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_1v1RankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_1v1RankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_1v1RankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_1v1RankReq::MergeFrom(const Pvp_1v1RankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_1v1RankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_1v1RankReq::CopyFrom(const Pvp_1v1RankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_1v1RankReq::IsInitialized() const {

  return true;
}

void Pvp_1v1RankReq::Swap(Pvp_1v1RankReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_1v1RankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_1v1RankReq_descriptor_;
  metadata.reflection = Pvp_1v1RankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_1v1RankRsp::kRankFieldNumber;
const int Pvp_1v1RankRsp::kMyrankFieldNumber;
#endif  // !_MSC_VER

Pvp_1v1RankRsp::Pvp_1v1RankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_1v1RankRsp::InitAsDefaultInstance() {
}

Pvp_1v1RankRsp::Pvp_1v1RankRsp(const Pvp_1v1RankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_1v1RankRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_1v1RankRsp::~Pvp_1v1RankRsp() {
  SharedDtor();
}

void Pvp_1v1RankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_1v1RankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_1v1RankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_1v1RankRsp_descriptor_;
}

const Pvp_1v1RankRsp& Pvp_1v1RankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_1v1RankRsp* Pvp_1v1RankRsp::default_instance_ = NULL;

Pvp_1v1RankRsp* Pvp_1v1RankRsp::New() const {
  return new Pvp_1v1RankRsp;
}

void Pvp_1v1RankRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    myrank_ = 0;
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_1v1RankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Pk1v1RankProto rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank;
        if (input->ExpectTag(16)) goto parse_myrank;
        break;
      }

      // optional int32 myrank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_1v1RankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Pk1v1RankProto rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(i), output);
  }

  // optional int32 myrank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_1v1RankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Pk1v1RankProto rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(i), target);
  }

  // optional int32 myrank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_1v1RankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 myrank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  // repeated .proto_ff.Pk1v1RankProto rank = 1;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_1v1RankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_1v1RankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_1v1RankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_1v1RankRsp::MergeFrom(const Pvp_1v1RankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_1v1RankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_1v1RankRsp::CopyFrom(const Pvp_1v1RankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_1v1RankRsp::IsInitialized() const {

  return true;
}

void Pvp_1v1RankRsp::Swap(Pvp_1v1RankRsp* other) {
  if (other != this) {
    rank_.Swap(&other->rank_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_1v1RankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_1v1RankRsp_descriptor_;
  metadata.reflection = Pvp_1v1RankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_1v1RankSimpleRsp::kRankSimpleFieldNumber;
const int Pvp_1v1RankSimpleRsp::kScoreFieldNumber;
const int Pvp_1v1RankSimpleRsp::kMyrankFieldNumber;
#endif  // !_MSC_VER

Pvp_1v1RankSimpleRsp::Pvp_1v1RankSimpleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_1v1RankSimpleRsp::InitAsDefaultInstance() {
}

Pvp_1v1RankSimpleRsp::Pvp_1v1RankSimpleRsp(const Pvp_1v1RankSimpleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_1v1RankSimpleRsp::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_1v1RankSimpleRsp::~Pvp_1v1RankSimpleRsp() {
  SharedDtor();
}

void Pvp_1v1RankSimpleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_1v1RankSimpleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_1v1RankSimpleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_1v1RankSimpleRsp_descriptor_;
}

const Pvp_1v1RankSimpleRsp& Pvp_1v1RankSimpleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_1v1RankSimpleRsp* Pvp_1v1RankSimpleRsp::default_instance_ = NULL;

Pvp_1v1RankSimpleRsp* Pvp_1v1RankSimpleRsp::New() const {
  return new Pvp_1v1RankSimpleRsp;
}

void Pvp_1v1RankSimpleRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    score_ = 0;
    myrank_ = 0;
  }
  rank_simple_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_1v1RankSimpleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Pk1v1RankSimpleProto rank_simple = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_simple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank_simple;
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_myrank;
        break;
      }

      // optional int32 myrank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_1v1RankSimpleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Pk1v1RankSimpleProto rank_simple = 1;
  for (int i = 0; i < this->rank_simple_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank_simple(i), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional int32 myrank = 3;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_1v1RankSimpleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Pk1v1RankSimpleProto rank_simple = 1;
  for (int i = 0; i < this->rank_simple_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank_simple(i), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional int32 myrank = 3;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_1v1RankSimpleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 myrank = 3;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  // repeated .proto_ff.Pk1v1RankSimpleProto rank_simple = 1;
  total_size += 1 * this->rank_simple_size();
  for (int i = 0; i < this->rank_simple_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_simple(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_1v1RankSimpleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_1v1RankSimpleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_1v1RankSimpleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_1v1RankSimpleRsp::MergeFrom(const Pvp_1v1RankSimpleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_simple_.MergeFrom(from.rank_simple_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_1v1RankSimpleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_1v1RankSimpleRsp::CopyFrom(const Pvp_1v1RankSimpleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_1v1RankSimpleRsp::IsInitialized() const {

  return true;
}

void Pvp_1v1RankSimpleRsp::Swap(Pvp_1v1RankSimpleRsp* other) {
  if (other != this) {
    rank_simple_.Swap(&other->rank_simple_);
    std::swap(score_, other->score_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_1v1RankSimpleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_1v1RankSimpleRsp_descriptor_;
  metadata.reflection = Pvp_1v1RankSimpleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_1v1ResultRsp::kResultFieldNumber;
const int Pvp_1v1ResultRsp::kOldScoreFieldNumber;
const int Pvp_1v1ResultRsp::kNewScoreFieldNumber;
const int Pvp_1v1ResultRsp::kRewardFieldNumber;
#endif  // !_MSC_VER

Pvp_1v1ResultRsp::Pvp_1v1ResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_1v1ResultRsp::InitAsDefaultInstance() {
}

Pvp_1v1ResultRsp::Pvp_1v1ResultRsp(const Pvp_1v1ResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_1v1ResultRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  old_score_ = 0;
  new_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_1v1ResultRsp::~Pvp_1v1ResultRsp() {
  SharedDtor();
}

void Pvp_1v1ResultRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_1v1ResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_1v1ResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_1v1ResultRsp_descriptor_;
}

const Pvp_1v1ResultRsp& Pvp_1v1ResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_1v1ResultRsp* Pvp_1v1ResultRsp::default_instance_ = NULL;

Pvp_1v1ResultRsp* Pvp_1v1ResultRsp::New() const {
  return new Pvp_1v1ResultRsp;
}

void Pvp_1v1ResultRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    old_score_ = 0;
    new_score_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_1v1ResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_old_score;
        break;
      }

      // optional int32 old_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_score_)));
          set_has_old_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_score;
        break;
      }

      // optional int32 new_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_score_)));
          set_has_new_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.ComItem reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_1v1ResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 old_score = 2;
  if (has_old_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->old_score(), output);
  }

  // optional int32 new_score = 3;
  if (has_new_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->new_score(), output);
  }

  // repeated .proto_ff.ComItem reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_1v1ResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 old_score = 2;
  if (has_old_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->old_score(), target);
  }

  // optional int32 new_score = 3;
  if (has_new_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->new_score(), target);
  }

  // repeated .proto_ff.ComItem reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_1v1ResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 old_score = 2;
    if (has_old_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_score());
    }

    // optional int32 new_score = 3;
    if (has_new_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_score());
    }

  }
  // repeated .proto_ff.ComItem reward = 4;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_1v1ResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_1v1ResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_1v1ResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_1v1ResultRsp::MergeFrom(const Pvp_1v1ResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_old_score()) {
      set_old_score(from.old_score());
    }
    if (from.has_new_score()) {
      set_new_score(from.new_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_1v1ResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_1v1ResultRsp::CopyFrom(const Pvp_1v1ResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_1v1ResultRsp::IsInitialized() const {

  return true;
}

void Pvp_1v1ResultRsp::Swap(Pvp_1v1ResultRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(old_score_, other->old_score_);
    std::swap(new_score_, other->new_score_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_1v1ResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_1v1ResultRsp_descriptor_;
  metadata.reflection = Pvp_1v1ResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_1v1MatchReq::kCancelFieldNumber;
#endif  // !_MSC_VER

Pvp_1v1MatchReq::Pvp_1v1MatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_1v1MatchReq::InitAsDefaultInstance() {
}

Pvp_1v1MatchReq::Pvp_1v1MatchReq(const Pvp_1v1MatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_1v1MatchReq::SharedCtor() {
  _cached_size_ = 0;
  cancel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_1v1MatchReq::~Pvp_1v1MatchReq() {
  SharedDtor();
}

void Pvp_1v1MatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_1v1MatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_1v1MatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_1v1MatchReq_descriptor_;
}

const Pvp_1v1MatchReq& Pvp_1v1MatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_1v1MatchReq* Pvp_1v1MatchReq::default_instance_ = NULL;

Pvp_1v1MatchReq* Pvp_1v1MatchReq::New() const {
  return new Pvp_1v1MatchReq;
}

void Pvp_1v1MatchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cancel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_1v1MatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cancel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cancel_)));
          set_has_cancel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_1v1MatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cancel = 1;
  if (has_cancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cancel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_1v1MatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cancel = 1;
  if (has_cancel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cancel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_1v1MatchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cancel = 1;
    if (has_cancel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cancel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_1v1MatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_1v1MatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_1v1MatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_1v1MatchReq::MergeFrom(const Pvp_1v1MatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cancel()) {
      set_cancel(from.cancel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_1v1MatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_1v1MatchReq::CopyFrom(const Pvp_1v1MatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_1v1MatchReq::IsInitialized() const {

  return true;
}

void Pvp_1v1MatchReq::Swap(Pvp_1v1MatchReq* other) {
  if (other != this) {
    std::swap(cancel_, other->cancel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_1v1MatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_1v1MatchReq_descriptor_;
  metadata.reflection = Pvp_1v1MatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_1v1MatchRsp::kRetFieldNumber;
const int Pvp_1v1MatchRsp::kCancelFieldNumber;
const int Pvp_1v1MatchRsp::kCidFieldNumber;
const int Pvp_1v1MatchRsp::kNameFieldNumber;
const int Pvp_1v1MatchRsp::kProfFieldNumber;
const int Pvp_1v1MatchRsp::kLevelFieldNumber;
const int Pvp_1v1MatchRsp::kFightFieldNumber;
const int Pvp_1v1MatchRsp::kBegintimeFieldNumber;
const int Pvp_1v1MatchRsp::kHeadFieldNumber;
#endif  // !_MSC_VER

Pvp_1v1MatchRsp::Pvp_1v1MatchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_1v1MatchRsp::InitAsDefaultInstance() {
  head_ = const_cast< ::proto_ff::RoleHeadPicProto*>(&::proto_ff::RoleHeadPicProto::default_instance());
}

Pvp_1v1MatchRsp::Pvp_1v1MatchRsp(const Pvp_1v1MatchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_1v1MatchRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cancel_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0;
  level_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  begintime_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_1v1MatchRsp::~Pvp_1v1MatchRsp() {
  SharedDtor();
}

void Pvp_1v1MatchRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void Pvp_1v1MatchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_1v1MatchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_1v1MatchRsp_descriptor_;
}

const Pvp_1v1MatchRsp& Pvp_1v1MatchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_1v1MatchRsp* Pvp_1v1MatchRsp::default_instance_ = NULL;

Pvp_1v1MatchRsp* Pvp_1v1MatchRsp::New() const {
  return new Pvp_1v1MatchRsp;
}

void Pvp_1v1MatchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cancel_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0;
    level_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
    begintime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::proto_ff::RoleHeadPicProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_1v1MatchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cancel;
        break;
      }

      // optional int32 cancel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cancel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cancel_)));
          set_has_cancel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prof;
        break;
      }

      // optional int32 prof = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_begintime;
        break;
      }

      // optional int32 begintime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_head;
        break;
      }

      // optional .proto_ff.RoleHeadPicProto head = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_1v1MatchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 cancel = 2;
  if (has_cancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cancel(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  // optional int32 prof = 5;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prof(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional uint64 fight = 7;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->fight(), output);
  }

  // optional int32 begintime = 8;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->begintime(), output);
  }

  // optional .proto_ff.RoleHeadPicProto head = 9;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_1v1MatchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 cancel = 2;
  if (has_cancel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cancel(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  // optional int32 prof = 5;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prof(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional uint64 fight = 7;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->fight(), target);
  }

  // optional int32 begintime = 8;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->begintime(), target);
  }

  // optional .proto_ff.RoleHeadPicProto head = 9;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_1v1MatchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 cancel = 2;
    if (has_cancel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cancel());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 prof = 5;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 fight = 7;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional int32 begintime = 8;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begintime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.RoleHeadPicProto head = 9;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_1v1MatchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_1v1MatchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_1v1MatchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_1v1MatchRsp::MergeFrom(const Pvp_1v1MatchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cancel()) {
      set_cancel(from.cancel());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_head()) {
      mutable_head()->::proto_ff::RoleHeadPicProto::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_1v1MatchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_1v1MatchRsp::CopyFrom(const Pvp_1v1MatchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_1v1MatchRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Pvp_1v1MatchRsp::Swap(Pvp_1v1MatchRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cancel_, other->cancel_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(begintime_, other->begintime_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_1v1MatchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_1v1MatchRsp_descriptor_;
  metadata.reflection = Pvp_1v1MatchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_L2S_1v1RankReq::kCidFieldNumber;
const int Pvp_L2S_1v1RankReq::kScoreFieldNumber;
#endif  // !_MSC_VER

Pvp_L2S_1v1RankReq::Pvp_L2S_1v1RankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_L2S_1v1RankReq::InitAsDefaultInstance() {
}

Pvp_L2S_1v1RankReq::Pvp_L2S_1v1RankReq(const Pvp_L2S_1v1RankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_L2S_1v1RankReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_L2S_1v1RankReq::~Pvp_L2S_1v1RankReq() {
  SharedDtor();
}

void Pvp_L2S_1v1RankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_L2S_1v1RankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_L2S_1v1RankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_L2S_1v1RankReq_descriptor_;
}

const Pvp_L2S_1v1RankReq& Pvp_L2S_1v1RankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_L2S_1v1RankReq* Pvp_L2S_1v1RankReq::default_instance_ = NULL;

Pvp_L2S_1v1RankReq* Pvp_L2S_1v1RankReq::New() const {
  return new Pvp_L2S_1v1RankReq;
}

void Pvp_L2S_1v1RankReq::Clear() {
  cid_.Clear();
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_L2S_1v1RankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_cid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cid;
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // repeated int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_L2S_1v1RankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 cid = 1;
  for (int i = 0; i < this->cid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->cid(i), output);
  }

  // repeated int32 score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_L2S_1v1RankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 cid = 1;
  for (int i = 0; i < this->cid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->cid(i), target);
  }

  // repeated int32 score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_L2S_1v1RankReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 cid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid(i));
    }
    total_size += 1 * this->cid_size() + data_size;
  }

  // repeated int32 score = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_L2S_1v1RankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_L2S_1v1RankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_L2S_1v1RankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_L2S_1v1RankReq::MergeFrom(const Pvp_L2S_1v1RankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_.MergeFrom(from.cid_);
  score_.MergeFrom(from.score_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_L2S_1v1RankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_L2S_1v1RankReq::CopyFrom(const Pvp_L2S_1v1RankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_L2S_1v1RankReq::IsInitialized() const {

  return true;
}

void Pvp_L2S_1v1RankReq::Swap(Pvp_L2S_1v1RankReq* other) {
  if (other != this) {
    cid_.Swap(&other->cid_);
    score_.Swap(&other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_L2S_1v1RankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_L2S_1v1RankReq_descriptor_;
  metadata.reflection = Pvp_L2S_1v1RankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Pvp_S2L_1v1RankNotify::Pvp_S2L_1v1RankNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_S2L_1v1RankNotify::InitAsDefaultInstance() {
}

Pvp_S2L_1v1RankNotify::Pvp_S2L_1v1RankNotify(const Pvp_S2L_1v1RankNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_S2L_1v1RankNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_S2L_1v1RankNotify::~Pvp_S2L_1v1RankNotify() {
  SharedDtor();
}

void Pvp_S2L_1v1RankNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_S2L_1v1RankNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_S2L_1v1RankNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_S2L_1v1RankNotify_descriptor_;
}

const Pvp_S2L_1v1RankNotify& Pvp_S2L_1v1RankNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_S2L_1v1RankNotify* Pvp_S2L_1v1RankNotify::default_instance_ = NULL;

Pvp_S2L_1v1RankNotify* Pvp_S2L_1v1RankNotify::New() const {
  return new Pvp_S2L_1v1RankNotify;
}

void Pvp_S2L_1v1RankNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_S2L_1v1RankNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Pvp_S2L_1v1RankNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_S2L_1v1RankNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_S2L_1v1RankNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_S2L_1v1RankNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_S2L_1v1RankNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_S2L_1v1RankNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_S2L_1v1RankNotify::MergeFrom(const Pvp_S2L_1v1RankNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_S2L_1v1RankNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_S2L_1v1RankNotify::CopyFrom(const Pvp_S2L_1v1RankNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_S2L_1v1RankNotify::IsInitialized() const {

  return true;
}

void Pvp_S2L_1v1RankNotify::Swap(Pvp_S2L_1v1RankNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_S2L_1v1RankNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_S2L_1v1RankNotify_descriptor_;
  metadata.reflection = Pvp_S2L_1v1RankNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_L2S_1v1ScoreChgReq::kCidFieldNumber;
const int Pvp_L2S_1v1ScoreChgReq::kZidFieldNumber;
const int Pvp_L2S_1v1ScoreChgReq::kScoreFieldNumber;
const int Pvp_L2S_1v1ScoreChgReq::kMatchNumFieldNumber;
#endif  // !_MSC_VER

Pvp_L2S_1v1ScoreChgReq::Pvp_L2S_1v1ScoreChgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_L2S_1v1ScoreChgReq::InitAsDefaultInstance() {
}

Pvp_L2S_1v1ScoreChgReq::Pvp_L2S_1v1ScoreChgReq(const Pvp_L2S_1v1ScoreChgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_L2S_1v1ScoreChgReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  score_ = 0;
  match_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_L2S_1v1ScoreChgReq::~Pvp_L2S_1v1ScoreChgReq() {
  SharedDtor();
}

void Pvp_L2S_1v1ScoreChgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_L2S_1v1ScoreChgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_L2S_1v1ScoreChgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_L2S_1v1ScoreChgReq_descriptor_;
}

const Pvp_L2S_1v1ScoreChgReq& Pvp_L2S_1v1ScoreChgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_L2S_1v1ScoreChgReq* Pvp_L2S_1v1ScoreChgReq::default_instance_ = NULL;

Pvp_L2S_1v1ScoreChgReq* Pvp_L2S_1v1ScoreChgReq::New() const {
  return new Pvp_L2S_1v1ScoreChgReq;
}

void Pvp_L2S_1v1ScoreChgReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    score_ = 0;
    match_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_L2S_1v1ScoreChgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // required uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_match_num;
        break;
      }

      // required int32 match_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_num_)));
          set_has_match_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_L2S_1v1ScoreChgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // required int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // required int32 match_num = 4;
  if (has_match_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->match_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_L2S_1v1ScoreChgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // required int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // required int32 match_num = 4;
  if (has_match_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->match_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_L2S_1v1ScoreChgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 match_num = 4;
    if (has_match_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_L2S_1v1ScoreChgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_L2S_1v1ScoreChgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_L2S_1v1ScoreChgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_L2S_1v1ScoreChgReq::MergeFrom(const Pvp_L2S_1v1ScoreChgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_match_num()) {
      set_match_num(from.match_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_L2S_1v1ScoreChgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_L2S_1v1ScoreChgReq::CopyFrom(const Pvp_L2S_1v1ScoreChgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_L2S_1v1ScoreChgReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Pvp_L2S_1v1ScoreChgReq::Swap(Pvp_L2S_1v1ScoreChgReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(score_, other->score_);
    std::swap(match_num_, other->match_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_L2S_1v1ScoreChgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_L2S_1v1ScoreChgReq_descriptor_;
  metadata.reflection = Pvp_L2S_1v1ScoreChgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_L2S_1v1MatchReq::kCidFieldNumber;
const int Pvp_L2S_1v1MatchReq::kZidFieldNumber;
const int Pvp_L2S_1v1MatchReq::kScoreFieldNumber;
const int Pvp_L2S_1v1MatchReq::kCancelFieldNumber;
#endif  // !_MSC_VER

Pvp_L2S_1v1MatchReq::Pvp_L2S_1v1MatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_L2S_1v1MatchReq::InitAsDefaultInstance() {
}

Pvp_L2S_1v1MatchReq::Pvp_L2S_1v1MatchReq(const Pvp_L2S_1v1MatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_L2S_1v1MatchReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  score_ = 0;
  cancel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_L2S_1v1MatchReq::~Pvp_L2S_1v1MatchReq() {
  SharedDtor();
}

void Pvp_L2S_1v1MatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_L2S_1v1MatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_L2S_1v1MatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_L2S_1v1MatchReq_descriptor_;
}

const Pvp_L2S_1v1MatchReq& Pvp_L2S_1v1MatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_L2S_1v1MatchReq* Pvp_L2S_1v1MatchReq::default_instance_ = NULL;

Pvp_L2S_1v1MatchReq* Pvp_L2S_1v1MatchReq::New() const {
  return new Pvp_L2S_1v1MatchReq;
}

void Pvp_L2S_1v1MatchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    score_ = 0;
    cancel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_L2S_1v1MatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // required uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cancel;
        break;
      }

      // required int32 cancel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cancel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cancel_)));
          set_has_cancel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_L2S_1v1MatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // required int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // required int32 cancel = 4;
  if (has_cancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cancel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_L2S_1v1MatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // required int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // required int32 cancel = 4;
  if (has_cancel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cancel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_L2S_1v1MatchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 cancel = 4;
    if (has_cancel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cancel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_L2S_1v1MatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_L2S_1v1MatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_L2S_1v1MatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_L2S_1v1MatchReq::MergeFrom(const Pvp_L2S_1v1MatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_cancel()) {
      set_cancel(from.cancel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_L2S_1v1MatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_L2S_1v1MatchReq::CopyFrom(const Pvp_L2S_1v1MatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_L2S_1v1MatchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Pvp_L2S_1v1MatchReq::Swap(Pvp_L2S_1v1MatchReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(score_, other->score_);
    std::swap(cancel_, other->cancel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_L2S_1v1MatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_L2S_1v1MatchReq_descriptor_;
  metadata.reflection = Pvp_L2S_1v1MatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_L2S_1v1RaceInfoReq::kZidFieldNumber;
const int Pvp_L2S_1v1RaceInfoReq::kLogicidFieldNumber;
#endif  // !_MSC_VER

Pvp_L2S_1v1RaceInfoReq::Pvp_L2S_1v1RaceInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_L2S_1v1RaceInfoReq::InitAsDefaultInstance() {
}

Pvp_L2S_1v1RaceInfoReq::Pvp_L2S_1v1RaceInfoReq(const Pvp_L2S_1v1RaceInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_L2S_1v1RaceInfoReq::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0u;
  logicid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_L2S_1v1RaceInfoReq::~Pvp_L2S_1v1RaceInfoReq() {
  SharedDtor();
}

void Pvp_L2S_1v1RaceInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_L2S_1v1RaceInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_L2S_1v1RaceInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_L2S_1v1RaceInfoReq_descriptor_;
}

const Pvp_L2S_1v1RaceInfoReq& Pvp_L2S_1v1RaceInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_L2S_1v1RaceInfoReq* Pvp_L2S_1v1RaceInfoReq::default_instance_ = NULL;

Pvp_L2S_1v1RaceInfoReq* Pvp_L2S_1v1RaceInfoReq::New() const {
  return new Pvp_L2S_1v1RaceInfoReq;
}

void Pvp_L2S_1v1RaceInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0u;
    logicid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_L2S_1v1RaceInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logicid;
        break;
      }

      // required uint32 logicid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_L2S_1v1RaceInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zid(), output);
  }

  // required uint32 logicid = 2;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_L2S_1v1RaceInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zid(), target);
  }

  // required uint32 logicid = 2;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_L2S_1v1RaceInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required uint32 logicid = 2;
    if (has_logicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_L2S_1v1RaceInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_L2S_1v1RaceInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_L2S_1v1RaceInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_L2S_1v1RaceInfoReq::MergeFrom(const Pvp_L2S_1v1RaceInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_L2S_1v1RaceInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_L2S_1v1RaceInfoReq::CopyFrom(const Pvp_L2S_1v1RaceInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_L2S_1v1RaceInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Pvp_L2S_1v1RaceInfoReq::Swap(Pvp_L2S_1v1RaceInfoReq* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    std::swap(logicid_, other->logicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_L2S_1v1RaceInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_L2S_1v1RaceInfoReq_descriptor_;
  metadata.reflection = Pvp_L2S_1v1RaceInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pvp_S2L_1v1RaceInfoRsp::kNumFieldNumber;
#endif  // !_MSC_VER

Pvp_S2L_1v1RaceInfoRsp::Pvp_S2L_1v1RaceInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pvp_S2L_1v1RaceInfoRsp::InitAsDefaultInstance() {
}

Pvp_S2L_1v1RaceInfoRsp::Pvp_S2L_1v1RaceInfoRsp(const Pvp_S2L_1v1RaceInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pvp_S2L_1v1RaceInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pvp_S2L_1v1RaceInfoRsp::~Pvp_S2L_1v1RaceInfoRsp() {
  SharedDtor();
}

void Pvp_S2L_1v1RaceInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pvp_S2L_1v1RaceInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pvp_S2L_1v1RaceInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pvp_S2L_1v1RaceInfoRsp_descriptor_;
}

const Pvp_S2L_1v1RaceInfoRsp& Pvp_S2L_1v1RaceInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp_2eproto();
  return *default_instance_;
}

Pvp_S2L_1v1RaceInfoRsp* Pvp_S2L_1v1RaceInfoRsp::default_instance_ = NULL;

Pvp_S2L_1v1RaceInfoRsp* Pvp_S2L_1v1RaceInfoRsp::New() const {
  return new Pvp_S2L_1v1RaceInfoRsp;
}

void Pvp_S2L_1v1RaceInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pvp_S2L_1v1RaceInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pvp_S2L_1v1RaceInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pvp_S2L_1v1RaceInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pvp_S2L_1v1RaceInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pvp_S2L_1v1RaceInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pvp_S2L_1v1RaceInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pvp_S2L_1v1RaceInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pvp_S2L_1v1RaceInfoRsp::MergeFrom(const Pvp_S2L_1v1RaceInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pvp_S2L_1v1RaceInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pvp_S2L_1v1RaceInfoRsp::CopyFrom(const Pvp_S2L_1v1RaceInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pvp_S2L_1v1RaceInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Pvp_S2L_1v1RaceInfoRsp::Swap(Pvp_S2L_1v1RaceInfoRsp* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pvp_S2L_1v1RaceInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pvp_S2L_1v1RaceInfoRsp_descriptor_;
  metadata.reflection = Pvp_S2L_1v1RaceInfoRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
