// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Dup.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Dup.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* DupDropProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupDropProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTowerRecordEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTowerRecordEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerDupData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerDupData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassDupData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassDupData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComDupGroupData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComDupGroupData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupResultReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupResultReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupLeaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupLeaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupLeaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupLeaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDupRunRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDupRunRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDupEndRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDupEndRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDupBeginCdRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDupBeginCdRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecvTowerDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecvTowerDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecvTowerDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecvTowerDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyDupNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyDupNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyDupNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyDupNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTowerRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTowerRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTowerRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTowerRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CEnterDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CEnterDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CCreateDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CCreateDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CDupStateChgNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CDupStateChgNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LPullRoleEnterDupNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LPullRoleEnterDupNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CDupRoleActionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CDupRoleActionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2CEnterDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2CEnterDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2SEnterDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2SEnterDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CTowerRecvRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CTowerRecvRecordReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Dup_2eproto() {
  protobuf_AddDesc_Dup_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Dup.proto");
  GOOGLE_CHECK(file != NULL);
  DupDropProto_descriptor_ = file->message_type(0);
  static const int DupDropProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDropProto, pick_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDropProto, pick_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDropProto, pick_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDropProto, kill_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDropProto, star3_),
  };
  DupDropProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupDropProto_descriptor_,
      DupDropProto::default_instance_,
      DupDropProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDropProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDropProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupDropProto));
  DupTowerRecordEntry_descriptor_ = file->message_type(1);
  static const int DupTowerRecordEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordEntry, time_),
  };
  DupTowerRecordEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTowerRecordEntry_descriptor_,
      DupTowerRecordEntry::default_instance_,
      DupTowerRecordEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTowerRecordEntry));
  TowerDupData_descriptor_ = file->message_type(2);
  static const int TowerDupData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerDupData, ids_),
  };
  TowerDupData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerDupData_descriptor_,
      TowerDupData::default_instance_,
      TowerDupData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerDupData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerDupData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerDupData));
  PassDupData_descriptor_ = file->message_type(3);
  static const int PassDupData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDupData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDupData, star_),
  };
  PassDupData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassDupData_descriptor_,
      PassDupData::default_instance_,
      PassDupData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDupData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDupData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassDupData));
  ComDupGroupData_descriptor_ = file->message_type(4);
  static const int ComDupGroupData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, pass_dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, enter_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, max_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, buy_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, tower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, pass_),
  };
  ComDupGroupData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComDupGroupData_descriptor_,
      ComDupGroupData::default_instance_,
      ComDupGroupData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComDupGroupData));
  EnterDupReq_descriptor_ = file->message_type(5);
  static const int EnterDupReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupReq, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupReq, mergenum_),
  };
  EnterDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterDupReq_descriptor_,
      EnterDupReq::default_instance_,
      EnterDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterDupReq));
  EnterDupRsp_descriptor_ = file->message_type(6);
  static const int EnterDupRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupRsp, duptime_),
  };
  EnterDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterDupRsp_descriptor_,
      EnterDupRsp::default_instance_,
      EnterDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterDupRsp));
  DupResultReq_descriptor_ = file->message_type(7);
  static const int DupResultReq_offsets_[1] = {
  };
  DupResultReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupResultReq_descriptor_,
      DupResultReq::default_instance_,
      DupResultReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupResultReq));
  DupResultRsp_descriptor_ = file->message_type(8);
  static const int DupResultRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultRsp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultRsp, cost_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultRsp, info_),
  };
  DupResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupResultRsp_descriptor_,
      DupResultRsp::default_instance_,
      DupResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupResultRsp));
  DupLeaveReq_descriptor_ = file->message_type(9);
  static const int DupLeaveReq_offsets_[1] = {
  };
  DupLeaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupLeaveReq_descriptor_,
      DupLeaveReq::default_instance_,
      DupLeaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupLeaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupLeaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupLeaveReq));
  DupLeaveRsp_descriptor_ = file->message_type(10);
  static const int DupLeaveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupLeaveRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupLeaveRsp, dupid_),
  };
  DupLeaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupLeaveRsp_descriptor_,
      DupLeaveRsp::default_instance_,
      DupLeaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupLeaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupLeaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupLeaveRsp));
  NotifyDupRsp_descriptor_ = file->message_type(11);
  static const int NotifyDupRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRsp, infos_),
  };
  NotifyDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDupRsp_descriptor_,
      NotifyDupRsp::default_instance_,
      NotifyDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDupRsp));
  NotifyDupRunRsp_descriptor_ = file->message_type(12);
  static const int NotifyDupRunRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, kill_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, all_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, cur_wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, max_wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, cur_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, items_),
  };
  NotifyDupRunRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDupRunRsp_descriptor_,
      NotifyDupRunRsp::default_instance_,
      NotifyDupRunRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDupRunRsp));
  NotifyDupEndRsp_descriptor_ = file->message_type(13);
  static const int NotifyDupEndRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupEndRsp, dupid_),
  };
  NotifyDupEndRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDupEndRsp_descriptor_,
      NotifyDupEndRsp::default_instance_,
      NotifyDupEndRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupEndRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupEndRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDupEndRsp));
  NotifyDupBeginCdRsp_descriptor_ = file->message_type(14);
  static const int NotifyDupBeginCdRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupBeginCdRsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupBeginCdRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupBeginCdRsp, timeend_),
  };
  NotifyDupBeginCdRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDupBeginCdRsp_descriptor_,
      NotifyDupBeginCdRsp::default_instance_,
      NotifyDupBeginCdRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupBeginCdRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupBeginCdRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDupBeginCdRsp));
  RecvTowerDupReq_descriptor_ = file->message_type(15);
  static const int RecvTowerDupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTowerDupReq, id_),
  };
  RecvTowerDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecvTowerDupReq_descriptor_,
      RecvTowerDupReq::default_instance_,
      RecvTowerDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTowerDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTowerDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecvTowerDupReq));
  RecvTowerDupRsp_descriptor_ = file->message_type(16);
  static const int RecvTowerDupRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTowerDupRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTowerDupRsp, id_),
  };
  RecvTowerDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecvTowerDupRsp_descriptor_,
      RecvTowerDupRsp::default_instance_,
      RecvTowerDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTowerDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTowerDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecvTowerDupRsp));
  BuyDupNumReq_descriptor_ = file->message_type(17);
  static const int BuyDupNumReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumReq, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumReq, num_),
  };
  BuyDupNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyDupNumReq_descriptor_,
      BuyDupNumReq::default_instance_,
      BuyDupNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyDupNumReq));
  BuyDupNumRsp_descriptor_ = file->message_type(18);
  static const int BuyDupNumRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumRsp, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumRsp, num_),
  };
  BuyDupNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyDupNumRsp_descriptor_,
      BuyDupNumRsp::default_instance_,
      BuyDupNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyDupNumRsp));
  DupTowerRecordReq_descriptor_ = file->message_type(19);
  static const int DupTowerRecordReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordReq, id_),
  };
  DupTowerRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTowerRecordReq_descriptor_,
      DupTowerRecordReq::default_instance_,
      DupTowerRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTowerRecordReq));
  DupTowerRecordRsp_descriptor_ = file->message_type(20);
  static const int DupTowerRecordRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordRsp, entrys_),
  };
  DupTowerRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTowerRecordRsp_descriptor_,
      DupTowerRecordRsp::default_instance_,
      DupTowerRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTowerRecordRsp));
  L2CEnterDupReq_descriptor_ = file->message_type(21);
  static const int L2CEnterDupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CEnterDupReq, params_),
  };
  L2CEnterDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CEnterDupReq_descriptor_,
      L2CEnterDupReq::default_instance_,
      L2CEnterDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CEnterDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CEnterDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CEnterDupReq));
  L2CCreateDupRsp_descriptor_ = file->message_type(22);
  static const int L2CCreateDupRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CCreateDupRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CCreateDupRsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CCreateDupRsp, dupid_),
  };
  L2CCreateDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CCreateDupRsp_descriptor_,
      L2CCreateDupRsp::default_instance_,
      L2CCreateDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CCreateDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CCreateDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CCreateDupRsp));
  L2CDupStateChgNotify_descriptor_ = file->message_type(23);
  static const int L2CDupStateChgNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupStateChgNotify, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupStateChgNotify, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupStateChgNotify, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupStateChgNotify, time_),
  };
  L2CDupStateChgNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CDupStateChgNotify_descriptor_,
      L2CDupStateChgNotify::default_instance_,
      L2CDupStateChgNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupStateChgNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupStateChgNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CDupStateChgNotify));
  C2LPullRoleEnterDupNotify_descriptor_ = file->message_type(24);
  static const int C2LPullRoleEnterDupNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, born_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, zoneid_),
  };
  C2LPullRoleEnterDupNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LPullRoleEnterDupNotify_descriptor_,
      C2LPullRoleEnterDupNotify::default_instance_,
      C2LPullRoleEnterDupNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LPullRoleEnterDupNotify));
  L2CDupRoleActionNotify_descriptor_ = file->message_type(25);
  static const int L2CDupRoleActionNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupRoleActionNotify, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupRoleActionNotify, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupRoleActionNotify, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupRoleActionNotify, ret_),
  };
  L2CDupRoleActionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CDupRoleActionNotify_descriptor_,
      L2CDupRoleActionNotify::default_instance_,
      L2CDupRoleActionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupRoleActionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupRoleActionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CDupRoleActionNotify));
  S2CEnterDupReq_descriptor_ = file->message_type(26);
  static const int S2CEnterDupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CEnterDupReq, params_),
  };
  S2CEnterDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2CEnterDupReq_descriptor_,
      S2CEnterDupReq::default_instance_,
      S2CEnterDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CEnterDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CEnterDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2CEnterDupReq));
  C2SEnterDupRsp_descriptor_ = file->message_type(27);
  static const int C2SEnterDupRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SEnterDupRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SEnterDupRsp, params_),
  };
  C2SEnterDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2SEnterDupRsp_descriptor_,
      C2SEnterDupRsp::default_instance_,
      C2SEnterDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SEnterDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SEnterDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2SEnterDupRsp));
  L2CTowerRecvRecordReq_descriptor_ = file->message_type(28);
  static const int L2CTowerRecvRecordReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CTowerRecvRecordReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CTowerRecvRecordReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CTowerRecvRecordReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CTowerRecvRecordReq, time_),
  };
  L2CTowerRecvRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CTowerRecvRecordReq_descriptor_,
      L2CTowerRecvRecordReq::default_instance_,
      L2CTowerRecvRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CTowerRecvRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CTowerRecvRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CTowerRecvRecordReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Dup_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupDropProto_descriptor_, &DupDropProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTowerRecordEntry_descriptor_, &DupTowerRecordEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerDupData_descriptor_, &TowerDupData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassDupData_descriptor_, &PassDupData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComDupGroupData_descriptor_, &ComDupGroupData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterDupReq_descriptor_, &EnterDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterDupRsp_descriptor_, &EnterDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupResultReq_descriptor_, &DupResultReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupResultRsp_descriptor_, &DupResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupLeaveReq_descriptor_, &DupLeaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupLeaveRsp_descriptor_, &DupLeaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDupRsp_descriptor_, &NotifyDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDupRunRsp_descriptor_, &NotifyDupRunRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDupEndRsp_descriptor_, &NotifyDupEndRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDupBeginCdRsp_descriptor_, &NotifyDupBeginCdRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecvTowerDupReq_descriptor_, &RecvTowerDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecvTowerDupRsp_descriptor_, &RecvTowerDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyDupNumReq_descriptor_, &BuyDupNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyDupNumRsp_descriptor_, &BuyDupNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTowerRecordReq_descriptor_, &DupTowerRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTowerRecordRsp_descriptor_, &DupTowerRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CEnterDupReq_descriptor_, &L2CEnterDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CCreateDupRsp_descriptor_, &L2CCreateDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CDupStateChgNotify_descriptor_, &L2CDupStateChgNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LPullRoleEnterDupNotify_descriptor_, &C2LPullRoleEnterDupNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CDupRoleActionNotify_descriptor_, &L2CDupRoleActionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2CEnterDupReq_descriptor_, &S2CEnterDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2SEnterDupRsp_descriptor_, &C2SEnterDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CTowerRecvRecordReq_descriptor_, &L2CTowerRecvRecordReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Dup_2eproto() {
  delete DupDropProto::default_instance_;
  delete DupDropProto_reflection_;
  delete DupTowerRecordEntry::default_instance_;
  delete DupTowerRecordEntry_reflection_;
  delete TowerDupData::default_instance_;
  delete TowerDupData_reflection_;
  delete PassDupData::default_instance_;
  delete PassDupData_reflection_;
  delete ComDupGroupData::default_instance_;
  delete ComDupGroupData_reflection_;
  delete EnterDupReq::default_instance_;
  delete EnterDupReq_reflection_;
  delete EnterDupRsp::default_instance_;
  delete EnterDupRsp_reflection_;
  delete DupResultReq::default_instance_;
  delete DupResultReq_reflection_;
  delete DupResultRsp::default_instance_;
  delete DupResultRsp_reflection_;
  delete DupLeaveReq::default_instance_;
  delete DupLeaveReq_reflection_;
  delete DupLeaveRsp::default_instance_;
  delete DupLeaveRsp_reflection_;
  delete NotifyDupRsp::default_instance_;
  delete NotifyDupRsp_reflection_;
  delete NotifyDupRunRsp::default_instance_;
  delete NotifyDupRunRsp_reflection_;
  delete NotifyDupEndRsp::default_instance_;
  delete NotifyDupEndRsp_reflection_;
  delete NotifyDupBeginCdRsp::default_instance_;
  delete NotifyDupBeginCdRsp_reflection_;
  delete RecvTowerDupReq::default_instance_;
  delete RecvTowerDupReq_reflection_;
  delete RecvTowerDupRsp::default_instance_;
  delete RecvTowerDupRsp_reflection_;
  delete BuyDupNumReq::default_instance_;
  delete BuyDupNumReq_reflection_;
  delete BuyDupNumRsp::default_instance_;
  delete BuyDupNumRsp_reflection_;
  delete DupTowerRecordReq::default_instance_;
  delete DupTowerRecordReq_reflection_;
  delete DupTowerRecordRsp::default_instance_;
  delete DupTowerRecordRsp_reflection_;
  delete L2CEnterDupReq::default_instance_;
  delete L2CEnterDupReq_reflection_;
  delete L2CCreateDupRsp::default_instance_;
  delete L2CCreateDupRsp_reflection_;
  delete L2CDupStateChgNotify::default_instance_;
  delete L2CDupStateChgNotify_reflection_;
  delete C2LPullRoleEnterDupNotify::default_instance_;
  delete C2LPullRoleEnterDupNotify_reflection_;
  delete L2CDupRoleActionNotify::default_instance_;
  delete L2CDupRoleActionNotify_reflection_;
  delete S2CEnterDupReq::default_instance_;
  delete S2CEnterDupReq_reflection_;
  delete C2SEnterDupRsp::default_instance_;
  delete C2SEnterDupRsp_reflection_;
  delete L2CTowerRecvRecordReq::default_instance_;
  delete L2CTowerRecvRecordReq_reflection_;
}

void protobuf_AddDesc_Dup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_Scene_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tDup.proto\022\010proto_ff\032\025yd_fieldoptions.p"
    "roto\032\022common_logic.proto\032\tCom.proto\032\013Sce"
    "ne.proto\"\231\001\n\014DupDropProto\022*\n\tpick_item\030\001"
    " \003(\0132\027.proto_ff.ItemProtoInfo\022\021\n\tpick_go"
    "ld\030\002 \001(\003\022\020\n\010pick_exp\030\003 \001(\003\022\020\n\010kill_num\030\004"
    " \001(\005\022&\n\005star3\030\005 \003(\0132\027.proto_ff.ItemProto"
    "Info\"1\n\023DupTowerRecordEntry\022\014\n\004name\030\001 \001("
    "\t\022\014\n\004time\030\002 \001(\004\"\033\n\014TowerDupData\022\013\n\003ids\030\001"
    " \003(\003\"\'\n\013PassDupData\022\n\n\002id\030\001 \001(\003\022\014\n\004star\030"
    "\002 \001(\005\"\303\001\n\017ComDupGroupData\022\r\n\005group\030\001 \001(\005"
    "\022\022\n\npass_dupId\030\002 \001(\004\022\021\n\tenter_num\030\003 \001(\005\022"
    "\017\n\007max_num\030\004 \001(\005\022\017\n\007buy_num\030\005 \001(\005\022\014\n\004sta"
    "r\030\006 \001(\005\022%\n\005tower\030\007 \001(\0132\026.proto_ff.TowerD"
    "upData\022#\n\004pass\030\010 \003(\0132\025.proto_ff.PassDupD"
    "ata\".\n\013EnterDupReq\022\r\n\005dupId\030\001 \001(\004\022\020\n\010mer"
    "geNum\030\002 \001(\005\":\n\013EnterDupRsp\022\013\n\003ret\030\001 \001(\005\022"
    "\r\n\005dupId\030\002 \001(\004\022\017\n\007dupTime\030\003 \001(\005\"\016\n\014DupRe"
    "sultReq\"s\n\014DupResultRsp\022\016\n\006result\030\001 \001(\005\022"
    "\r\n\005dupId\030\002 \001(\004\022\014\n\004star\030\003 \001(\005\022\020\n\010cost_sec"
    "\030\004 \001(\005\022$\n\004info\030\005 \001(\0132\026.proto_ff.DupDropP"
    "roto\"\r\n\013DupLeaveReq\",\n\013DupLeaveRsp\022\016\n\006re"
    "sult\030\001 \001(\005\022\r\n\005dupId\030\002 \001(\003\"F\n\014NotifyDupRs"
    "p\022\014\n\004type\030\001 \001(\005\022(\n\005infos\030\002 \003(\0132\031.proto_f"
    "f.ComDupGroupData\"\253\001\n\017NotifyDupRunRsp\022\r\n"
    "\005dupId\030\001 \001(\004\022\020\n\010kill_num\030\002 \001(\005\022\017\n\007all_nu"
    "m\030\003 \001(\005\022\020\n\010cur_wave\030\004 \001(\005\022\020\n\010max_wave\030\005 "
    "\001(\005\022\016\n\006cur_hp\030\006 \001(\003\022\016\n\006max_hp\030\007 \001(\003\022\"\n\005i"
    "tems\030\010 \003(\0132\023.proto_ff.ComPair64\" \n\017Notif"
    "yDupEndRsp\022\r\n\005dupId\030\001 \001(\004\"F\n\023NotifyDupBe"
    "ginCdRsp\022\017\n\007sceneId\030\001 \001(\004\022\r\n\005dupId\030\002 \001(\004"
    "\022\017\n\007timeEnd\030\003 \001(\004\"\035\n\017RecvTowerDupReq\022\n\n\002"
    "id\030\001 \001(\004\"-\n\017RecvTowerDupRsp\022\016\n\006result\030\001 "
    "\001(\005\022\n\n\002id\030\002 \001(\004\"*\n\014BuyDupNumReq\022\r\n\005group"
    "\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\":\n\014BuyDupNumRsp\022\016\n\006r"
    "esult\030\001 \001(\005\022\r\n\005group\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\""
    "\037\n\021DupTowerRecordReq\022\n\n\002id\030\001 \001(\004\"N\n\021DupT"
    "owerRecordRsp\022\n\n\002id\030\001 \001(\004\022-\n\006entrys\030\002 \003("
    "\0132\035.proto_ff.DupTowerRecordEntry\"A\n\016L2CE"
    "nterDupReq\022/\n\006params\030\001 \001(\0132\037.proto_ff.Cr"
    "eateSceneParamProto\">\n\017L2CCreateDupRsp\022\013"
    "\n\003ret\030\001 \001(\005\022\017\n\007sceneId\030\002 \001(\004\022\r\n\005dupId\030\003 "
    "\001(\004\"S\n\024L2CDupStateChgNotify\022\017\n\007sceneId\030\001"
    " \001(\004\022\r\n\005dupId\030\002 \001(\004\022\r\n\005state\030\003 \001(\005\022\014\n\004ti"
    "me\030\004 \001(\004\"u\n\031C2LPullRoleEnterDupNotify\022\017\n"
    "\007char_id\030\001 \002(\004\022\024\n\014duplicate_id\030\002 \002(\004\022\020\n\010"
    "scene_id\030\003 \002(\004\022\017\n\007born_id\030\004 \001(\004\022\016\n\006zonei"
    "d\030\005 \001(\r\"U\n\026L2CDupRoleActionNotify\022\017\n\007sce"
    "neId\030\001 \001(\003\022\013\n\003cid\030\002 \001(\003\022\020\n\010actionId\030\003 \001("
    "\005\022\013\n\003ret\030\004 \001(\005\"A\n\016S2CEnterDupReq\022/\n\006para"
    "ms\030\001 \001(\0132\037.proto_ff.CreateSceneParamProt"
    "o\"N\n\016C2SEnterDupRsp\022\013\n\003ret\030\001 \001(\005\022/\n\006para"
    "ms\030\002 \001(\0132\037.proto_ff.CreateSceneParamProt"
    "o\"L\n\025L2CTowerRecvRecordReq\022\n\n\002id\030\001 \001(\003\022\013"
    "\n\003cid\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\014\n\004time\030\004 \001(\003", 2159);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Dup.proto", &protobuf_RegisterTypes);
  DupDropProto::default_instance_ = new DupDropProto();
  DupTowerRecordEntry::default_instance_ = new DupTowerRecordEntry();
  TowerDupData::default_instance_ = new TowerDupData();
  PassDupData::default_instance_ = new PassDupData();
  ComDupGroupData::default_instance_ = new ComDupGroupData();
  EnterDupReq::default_instance_ = new EnterDupReq();
  EnterDupRsp::default_instance_ = new EnterDupRsp();
  DupResultReq::default_instance_ = new DupResultReq();
  DupResultRsp::default_instance_ = new DupResultRsp();
  DupLeaveReq::default_instance_ = new DupLeaveReq();
  DupLeaveRsp::default_instance_ = new DupLeaveRsp();
  NotifyDupRsp::default_instance_ = new NotifyDupRsp();
  NotifyDupRunRsp::default_instance_ = new NotifyDupRunRsp();
  NotifyDupEndRsp::default_instance_ = new NotifyDupEndRsp();
  NotifyDupBeginCdRsp::default_instance_ = new NotifyDupBeginCdRsp();
  RecvTowerDupReq::default_instance_ = new RecvTowerDupReq();
  RecvTowerDupRsp::default_instance_ = new RecvTowerDupRsp();
  BuyDupNumReq::default_instance_ = new BuyDupNumReq();
  BuyDupNumRsp::default_instance_ = new BuyDupNumRsp();
  DupTowerRecordReq::default_instance_ = new DupTowerRecordReq();
  DupTowerRecordRsp::default_instance_ = new DupTowerRecordRsp();
  L2CEnterDupReq::default_instance_ = new L2CEnterDupReq();
  L2CCreateDupRsp::default_instance_ = new L2CCreateDupRsp();
  L2CDupStateChgNotify::default_instance_ = new L2CDupStateChgNotify();
  C2LPullRoleEnterDupNotify::default_instance_ = new C2LPullRoleEnterDupNotify();
  L2CDupRoleActionNotify::default_instance_ = new L2CDupRoleActionNotify();
  S2CEnterDupReq::default_instance_ = new S2CEnterDupReq();
  C2SEnterDupRsp::default_instance_ = new C2SEnterDupRsp();
  L2CTowerRecvRecordReq::default_instance_ = new L2CTowerRecvRecordReq();
  DupDropProto::default_instance_->InitAsDefaultInstance();
  DupTowerRecordEntry::default_instance_->InitAsDefaultInstance();
  TowerDupData::default_instance_->InitAsDefaultInstance();
  PassDupData::default_instance_->InitAsDefaultInstance();
  ComDupGroupData::default_instance_->InitAsDefaultInstance();
  EnterDupReq::default_instance_->InitAsDefaultInstance();
  EnterDupRsp::default_instance_->InitAsDefaultInstance();
  DupResultReq::default_instance_->InitAsDefaultInstance();
  DupResultRsp::default_instance_->InitAsDefaultInstance();
  DupLeaveReq::default_instance_->InitAsDefaultInstance();
  DupLeaveRsp::default_instance_->InitAsDefaultInstance();
  NotifyDupRsp::default_instance_->InitAsDefaultInstance();
  NotifyDupRunRsp::default_instance_->InitAsDefaultInstance();
  NotifyDupEndRsp::default_instance_->InitAsDefaultInstance();
  NotifyDupBeginCdRsp::default_instance_->InitAsDefaultInstance();
  RecvTowerDupReq::default_instance_->InitAsDefaultInstance();
  RecvTowerDupRsp::default_instance_->InitAsDefaultInstance();
  BuyDupNumReq::default_instance_->InitAsDefaultInstance();
  BuyDupNumRsp::default_instance_->InitAsDefaultInstance();
  DupTowerRecordReq::default_instance_->InitAsDefaultInstance();
  DupTowerRecordRsp::default_instance_->InitAsDefaultInstance();
  L2CEnterDupReq::default_instance_->InitAsDefaultInstance();
  L2CCreateDupRsp::default_instance_->InitAsDefaultInstance();
  L2CDupStateChgNotify::default_instance_->InitAsDefaultInstance();
  C2LPullRoleEnterDupNotify::default_instance_->InitAsDefaultInstance();
  L2CDupRoleActionNotify::default_instance_->InitAsDefaultInstance();
  S2CEnterDupReq::default_instance_->InitAsDefaultInstance();
  C2SEnterDupRsp::default_instance_->InitAsDefaultInstance();
  L2CTowerRecvRecordReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Dup_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Dup_2eproto {
  StaticDescriptorInitializer_Dup_2eproto() {
    protobuf_AddDesc_Dup_2eproto();
  }
} static_descriptor_initializer_Dup_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DupDropProto::kPickItemFieldNumber;
const int DupDropProto::kPickGoldFieldNumber;
const int DupDropProto::kPickExpFieldNumber;
const int DupDropProto::kKillNumFieldNumber;
const int DupDropProto::kStar3FieldNumber;
#endif  // !_MSC_VER

DupDropProto::DupDropProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupDropProto::InitAsDefaultInstance() {
}

DupDropProto::DupDropProto(const DupDropProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupDropProto::SharedCtor() {
  _cached_size_ = 0;
  pick_gold_ = GOOGLE_LONGLONG(0);
  pick_exp_ = GOOGLE_LONGLONG(0);
  kill_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupDropProto::~DupDropProto() {
  SharedDtor();
}

void DupDropProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupDropProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupDropProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupDropProto_descriptor_;
}

const DupDropProto& DupDropProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupDropProto* DupDropProto::default_instance_ = NULL;

DupDropProto* DupDropProto::New() const {
  return new DupDropProto;
}

void DupDropProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    pick_gold_ = GOOGLE_LONGLONG(0);
    pick_exp_ = GOOGLE_LONGLONG(0);
    kill_num_ = 0;
  }
  pick_item_.Clear();
  star3_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupDropProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ItemProtoInfo pick_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pick_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pick_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pick_item;
        if (input->ExpectTag(16)) goto parse_pick_gold;
        break;
      }

      // optional int64 pick_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pick_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pick_gold_)));
          set_has_pick_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pick_exp;
        break;
      }

      // optional int64 pick_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pick_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pick_exp_)));
          set_has_pick_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kill_num;
        break;
      }

      // optional int32 kill_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_num_)));
          set_has_kill_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_star3;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo star3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_star3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_star3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_star3;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupDropProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ItemProtoInfo pick_item = 1;
  for (int i = 0; i < this->pick_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pick_item(i), output);
  }

  // optional int64 pick_gold = 2;
  if (has_pick_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pick_gold(), output);
  }

  // optional int64 pick_exp = 3;
  if (has_pick_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pick_exp(), output);
  }

  // optional int32 kill_num = 4;
  if (has_kill_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kill_num(), output);
  }

  // repeated .proto_ff.ItemProtoInfo star3 = 5;
  for (int i = 0; i < this->star3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->star3(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupDropProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ItemProtoInfo pick_item = 1;
  for (int i = 0; i < this->pick_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pick_item(i), target);
  }

  // optional int64 pick_gold = 2;
  if (has_pick_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pick_gold(), target);
  }

  // optional int64 pick_exp = 3;
  if (has_pick_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pick_exp(), target);
  }

  // optional int32 kill_num = 4;
  if (has_kill_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kill_num(), target);
  }

  // repeated .proto_ff.ItemProtoInfo star3 = 5;
  for (int i = 0; i < this->star3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->star3(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupDropProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 pick_gold = 2;
    if (has_pick_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pick_gold());
    }

    // optional int64 pick_exp = 3;
    if (has_pick_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pick_exp());
    }

    // optional int32 kill_num = 4;
    if (has_kill_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_num());
    }

  }
  // repeated .proto_ff.ItemProtoInfo pick_item = 1;
  total_size += 1 * this->pick_item_size();
  for (int i = 0; i < this->pick_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pick_item(i));
  }

  // repeated .proto_ff.ItemProtoInfo star3 = 5;
  total_size += 1 * this->star3_size();
  for (int i = 0; i < this->star3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->star3(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupDropProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupDropProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupDropProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupDropProto::MergeFrom(const DupDropProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  pick_item_.MergeFrom(from.pick_item_);
  star3_.MergeFrom(from.star3_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_pick_gold()) {
      set_pick_gold(from.pick_gold());
    }
    if (from.has_pick_exp()) {
      set_pick_exp(from.pick_exp());
    }
    if (from.has_kill_num()) {
      set_kill_num(from.kill_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupDropProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupDropProto::CopyFrom(const DupDropProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupDropProto::IsInitialized() const {

  return true;
}

void DupDropProto::Swap(DupDropProto* other) {
  if (other != this) {
    pick_item_.Swap(&other->pick_item_);
    std::swap(pick_gold_, other->pick_gold_);
    std::swap(pick_exp_, other->pick_exp_);
    std::swap(kill_num_, other->kill_num_);
    star3_.Swap(&other->star3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupDropProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupDropProto_descriptor_;
  metadata.reflection = DupDropProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTowerRecordEntry::kNameFieldNumber;
const int DupTowerRecordEntry::kTimeFieldNumber;
#endif  // !_MSC_VER

DupTowerRecordEntry::DupTowerRecordEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTowerRecordEntry::InitAsDefaultInstance() {
}

DupTowerRecordEntry::DupTowerRecordEntry(const DupTowerRecordEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTowerRecordEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTowerRecordEntry::~DupTowerRecordEntry() {
  SharedDtor();
}

void DupTowerRecordEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DupTowerRecordEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTowerRecordEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTowerRecordEntry_descriptor_;
}

const DupTowerRecordEntry& DupTowerRecordEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupTowerRecordEntry* DupTowerRecordEntry::default_instance_ = NULL;

DupTowerRecordEntry* DupTowerRecordEntry::New() const {
  return new DupTowerRecordEntry;
}

void DupTowerRecordEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTowerRecordEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTowerRecordEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTowerRecordEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTowerRecordEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTowerRecordEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTowerRecordEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTowerRecordEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTowerRecordEntry::MergeFrom(const DupTowerRecordEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTowerRecordEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTowerRecordEntry::CopyFrom(const DupTowerRecordEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTowerRecordEntry::IsInitialized() const {

  return true;
}

void DupTowerRecordEntry::Swap(DupTowerRecordEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTowerRecordEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTowerRecordEntry_descriptor_;
  metadata.reflection = DupTowerRecordEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerDupData::kIdsFieldNumber;
#endif  // !_MSC_VER

TowerDupData::TowerDupData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TowerDupData::InitAsDefaultInstance() {
}

TowerDupData::TowerDupData(const TowerDupData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TowerDupData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerDupData::~TowerDupData() {
  SharedDtor();
}

void TowerDupData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerDupData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerDupData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerDupData_descriptor_;
}

const TowerDupData& TowerDupData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

TowerDupData* TowerDupData::default_instance_ = NULL;

TowerDupData* TowerDupData::New() const {
  return new TowerDupData;
}

void TowerDupData::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerDupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TowerDupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TowerDupData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TowerDupData::ByteSize() const {
  int total_size = 0;

  // repeated int64 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerDupData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerDupData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerDupData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerDupData::MergeFrom(const TowerDupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerDupData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerDupData::CopyFrom(const TowerDupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerDupData::IsInitialized() const {

  return true;
}

void TowerDupData::Swap(TowerDupData* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerDupData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerDupData_descriptor_;
  metadata.reflection = TowerDupData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassDupData::kIdFieldNumber;
const int PassDupData::kStarFieldNumber;
#endif  // !_MSC_VER

PassDupData::PassDupData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassDupData::InitAsDefaultInstance() {
}

PassDupData::PassDupData(const PassDupData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassDupData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassDupData::~PassDupData() {
  SharedDtor();
}

void PassDupData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassDupData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassDupData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassDupData_descriptor_;
}

const PassDupData& PassDupData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

PassDupData* PassDupData::default_instance_ = NULL;

PassDupData* PassDupData::New() const {
  return new PassDupData;
}

void PassDupData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassDupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassDupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassDupData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassDupData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassDupData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassDupData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassDupData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassDupData::MergeFrom(const PassDupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassDupData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassDupData::CopyFrom(const PassDupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassDupData::IsInitialized() const {

  return true;
}

void PassDupData::Swap(PassDupData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassDupData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassDupData_descriptor_;
  metadata.reflection = PassDupData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComDupGroupData::kGroupFieldNumber;
const int ComDupGroupData::kPassDupIdFieldNumber;
const int ComDupGroupData::kEnterNumFieldNumber;
const int ComDupGroupData::kMaxNumFieldNumber;
const int ComDupGroupData::kBuyNumFieldNumber;
const int ComDupGroupData::kStarFieldNumber;
const int ComDupGroupData::kTowerFieldNumber;
const int ComDupGroupData::kPassFieldNumber;
#endif  // !_MSC_VER

ComDupGroupData::ComDupGroupData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComDupGroupData::InitAsDefaultInstance() {
  tower_ = const_cast< ::proto_ff::TowerDupData*>(&::proto_ff::TowerDupData::default_instance());
}

ComDupGroupData::ComDupGroupData(const ComDupGroupData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComDupGroupData::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0;
  pass_dupid_ = GOOGLE_ULONGLONG(0);
  enter_num_ = 0;
  max_num_ = 0;
  buy_num_ = 0;
  star_ = 0;
  tower_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComDupGroupData::~ComDupGroupData() {
  SharedDtor();
}

void ComDupGroupData::SharedDtor() {
  if (this != default_instance_) {
    delete tower_;
  }
}

void ComDupGroupData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComDupGroupData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComDupGroupData_descriptor_;
}

const ComDupGroupData& ComDupGroupData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

ComDupGroupData* ComDupGroupData::default_instance_ = NULL;

ComDupGroupData* ComDupGroupData::New() const {
  return new ComDupGroupData;
}

void ComDupGroupData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0;
    pass_dupid_ = GOOGLE_ULONGLONG(0);
    enter_num_ = 0;
    max_num_ = 0;
    buy_num_ = 0;
    star_ = 0;
    if (has_tower()) {
      if (tower_ != NULL) tower_->::proto_ff::TowerDupData::Clear();
    }
  }
  pass_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComDupGroupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_dupId;
        break;
      }

      // optional uint64 pass_dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pass_dupid_)));
          set_has_pass_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enter_num;
        break;
      }

      // optional int32 enter_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_num_)));
          set_has_enter_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_num;
        break;
      }

      // optional int32 max_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_)));
          set_has_max_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_star;
        break;
      }

      // optional int32 star = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tower;
        break;
      }

      // optional .proto_ff.TowerDupData tower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pass;
        break;
      }

      // repeated .proto_ff.PassDupData pass = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pass()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pass;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComDupGroupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group(), output);
  }

  // optional uint64 pass_dupId = 2;
  if (has_pass_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pass_dupid(), output);
  }

  // optional int32 enter_num = 3;
  if (has_enter_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enter_num(), output);
  }

  // optional int32 max_num = 4;
  if (has_max_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_num(), output);
  }

  // optional int32 buy_num = 5;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buy_num(), output);
  }

  // optional int32 star = 6;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->star(), output);
  }

  // optional .proto_ff.TowerDupData tower = 7;
  if (has_tower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tower(), output);
  }

  // repeated .proto_ff.PassDupData pass = 8;
  for (int i = 0; i < this->pass_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pass(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComDupGroupData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group(), target);
  }

  // optional uint64 pass_dupId = 2;
  if (has_pass_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pass_dupid(), target);
  }

  // optional int32 enter_num = 3;
  if (has_enter_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enter_num(), target);
  }

  // optional int32 max_num = 4;
  if (has_max_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_num(), target);
  }

  // optional int32 buy_num = 5;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buy_num(), target);
  }

  // optional int32 star = 6;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->star(), target);
  }

  // optional .proto_ff.TowerDupData tower = 7;
  if (has_tower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tower(), target);
  }

  // repeated .proto_ff.PassDupData pass = 8;
  for (int i = 0; i < this->pass_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pass(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComDupGroupData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional uint64 pass_dupId = 2;
    if (has_pass_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pass_dupid());
    }

    // optional int32 enter_num = 3;
    if (has_enter_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_num());
    }

    // optional int32 max_num = 4;
    if (has_max_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num());
    }

    // optional int32 buy_num = 5;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

    // optional int32 star = 6;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional .proto_ff.TowerDupData tower = 7;
    if (has_tower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower());
    }

  }
  // repeated .proto_ff.PassDupData pass = 8;
  total_size += 1 * this->pass_size();
  for (int i = 0; i < this->pass_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pass(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComDupGroupData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComDupGroupData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComDupGroupData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComDupGroupData::MergeFrom(const ComDupGroupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  pass_.MergeFrom(from.pass_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_pass_dupid()) {
      set_pass_dupid(from.pass_dupid());
    }
    if (from.has_enter_num()) {
      set_enter_num(from.enter_num());
    }
    if (from.has_max_num()) {
      set_max_num(from.max_num());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_tower()) {
      mutable_tower()->::proto_ff::TowerDupData::MergeFrom(from.tower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComDupGroupData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComDupGroupData::CopyFrom(const ComDupGroupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComDupGroupData::IsInitialized() const {

  return true;
}

void ComDupGroupData::Swap(ComDupGroupData* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(pass_dupid_, other->pass_dupid_);
    std::swap(enter_num_, other->enter_num_);
    std::swap(max_num_, other->max_num_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(star_, other->star_);
    std::swap(tower_, other->tower_);
    pass_.Swap(&other->pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComDupGroupData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComDupGroupData_descriptor_;
  metadata.reflection = ComDupGroupData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterDupReq::kDupIdFieldNumber;
const int EnterDupReq::kMergeNumFieldNumber;
#endif  // !_MSC_VER

EnterDupReq::EnterDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterDupReq::InitAsDefaultInstance() {
}

EnterDupReq::EnterDupReq(const EnterDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterDupReq::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  mergenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterDupReq::~EnterDupReq() {
  SharedDtor();
}

void EnterDupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterDupReq_descriptor_;
}

const EnterDupReq& EnterDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

EnterDupReq* EnterDupReq::default_instance_ = NULL;

EnterDupReq* EnterDupReq::New() const {
  return new EnterDupReq;
}

void EnterDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = GOOGLE_ULONGLONG(0);
    mergenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mergeNum;
        break;
      }

      // optional int32 mergeNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mergeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mergenum_)));
          set_has_mergenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dupid(), output);
  }

  // optional int32 mergeNum = 2;
  if (has_mergenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mergenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dupid(), target);
  }

  // optional int32 mergeNum = 2;
  if (has_mergenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mergenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dupId = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int32 mergeNum = 2;
    if (has_mergenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mergenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterDupReq::MergeFrom(const EnterDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_mergenum()) {
      set_mergenum(from.mergenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterDupReq::CopyFrom(const EnterDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterDupReq::IsInitialized() const {

  return true;
}

void EnterDupReq::Swap(EnterDupReq* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    std::swap(mergenum_, other->mergenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterDupReq_descriptor_;
  metadata.reflection = EnterDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterDupRsp::kRetFieldNumber;
const int EnterDupRsp::kDupIdFieldNumber;
const int EnterDupRsp::kDupTimeFieldNumber;
#endif  // !_MSC_VER

EnterDupRsp::EnterDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterDupRsp::InitAsDefaultInstance() {
}

EnterDupRsp::EnterDupRsp(const EnterDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterDupRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  duptime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterDupRsp::~EnterDupRsp() {
  SharedDtor();
}

void EnterDupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterDupRsp_descriptor_;
}

const EnterDupRsp& EnterDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

EnterDupRsp* EnterDupRsp::default_instance_ = NULL;

EnterDupRsp* EnterDupRsp::New() const {
  return new EnterDupRsp;
}

void EnterDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    dupid_ = GOOGLE_ULONGLONG(0);
    duptime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupId;
        break;
      }

      // optional uint64 dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dupTime;
        break;
      }

      // optional int32 dupTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duptime_)));
          set_has_duptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional int32 dupTime = 3;
  if (has_duptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional int32 dupTime = 3;
  if (has_duptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 dupId = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int32 dupTime = 3;
    if (has_duptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterDupRsp::MergeFrom(const EnterDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_duptime()) {
      set_duptime(from.duptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterDupRsp::CopyFrom(const EnterDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterDupRsp::IsInitialized() const {

  return true;
}

void EnterDupRsp::Swap(EnterDupRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(dupid_, other->dupid_);
    std::swap(duptime_, other->duptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterDupRsp_descriptor_;
  metadata.reflection = EnterDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DupResultReq::DupResultReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupResultReq::InitAsDefaultInstance() {
}

DupResultReq::DupResultReq(const DupResultReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupResultReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupResultReq::~DupResultReq() {
  SharedDtor();
}

void DupResultReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupResultReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupResultReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupResultReq_descriptor_;
}

const DupResultReq& DupResultReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupResultReq* DupResultReq::default_instance_ = NULL;

DupResultReq* DupResultReq::New() const {
  return new DupResultReq;
}

void DupResultReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupResultReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DupResultReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupResultReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupResultReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupResultReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupResultReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupResultReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupResultReq::MergeFrom(const DupResultReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupResultReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupResultReq::CopyFrom(const DupResultReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupResultReq::IsInitialized() const {

  return true;
}

void DupResultReq::Swap(DupResultReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupResultReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupResultReq_descriptor_;
  metadata.reflection = DupResultReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupResultRsp::kResultFieldNumber;
const int DupResultRsp::kDupIdFieldNumber;
const int DupResultRsp::kStarFieldNumber;
const int DupResultRsp::kCostSecFieldNumber;
const int DupResultRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

DupResultRsp::DupResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupResultRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::DupDropProto*>(&::proto_ff::DupDropProto::default_instance());
}

DupResultRsp::DupResultRsp(const DupResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupResultRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  star_ = 0;
  cost_sec_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupResultRsp::~DupResultRsp() {
  SharedDtor();
}

void DupResultRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void DupResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupResultRsp_descriptor_;
}

const DupResultRsp& DupResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupResultRsp* DupResultRsp::default_instance_ = NULL;

DupResultRsp* DupResultRsp::New() const {
  return new DupResultRsp;
}

void DupResultRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    dupid_ = GOOGLE_ULONGLONG(0);
    star_ = 0;
    cost_sec_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::DupDropProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupId;
        break;
      }

      // optional uint64 dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional int32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_sec;
        break;
      }

      // optional int32 cost_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_sec_)));
          set_has_cost_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .proto_ff.DupDropProto info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional int32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  // optional int32 cost_sec = 4;
  if (has_cost_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cost_sec(), output);
  }

  // optional .proto_ff.DupDropProto info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional int32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  // optional int32 cost_sec = 4;
  if (has_cost_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cost_sec(), target);
  }

  // optional .proto_ff.DupDropProto info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 dupId = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 cost_sec = 4;
    if (has_cost_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_sec());
    }

    // optional .proto_ff.DupDropProto info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupResultRsp::MergeFrom(const DupResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_cost_sec()) {
      set_cost_sec(from.cost_sec());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::DupDropProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupResultRsp::CopyFrom(const DupResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupResultRsp::IsInitialized() const {

  return true;
}

void DupResultRsp::Swap(DupResultRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(dupid_, other->dupid_);
    std::swap(star_, other->star_);
    std::swap(cost_sec_, other->cost_sec_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupResultRsp_descriptor_;
  metadata.reflection = DupResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DupLeaveReq::DupLeaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupLeaveReq::InitAsDefaultInstance() {
}

DupLeaveReq::DupLeaveReq(const DupLeaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupLeaveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupLeaveReq::~DupLeaveReq() {
  SharedDtor();
}

void DupLeaveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupLeaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupLeaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupLeaveReq_descriptor_;
}

const DupLeaveReq& DupLeaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupLeaveReq* DupLeaveReq::default_instance_ = NULL;

DupLeaveReq* DupLeaveReq::New() const {
  return new DupLeaveReq;
}

void DupLeaveReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupLeaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DupLeaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupLeaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupLeaveReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupLeaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupLeaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupLeaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupLeaveReq::MergeFrom(const DupLeaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupLeaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupLeaveReq::CopyFrom(const DupLeaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupLeaveReq::IsInitialized() const {

  return true;
}

void DupLeaveReq::Swap(DupLeaveReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupLeaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupLeaveReq_descriptor_;
  metadata.reflection = DupLeaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupLeaveRsp::kResultFieldNumber;
const int DupLeaveRsp::kDupIdFieldNumber;
#endif  // !_MSC_VER

DupLeaveRsp::DupLeaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupLeaveRsp::InitAsDefaultInstance() {
}

DupLeaveRsp::DupLeaveRsp(const DupLeaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupLeaveRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  dupid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupLeaveRsp::~DupLeaveRsp() {
  SharedDtor();
}

void DupLeaveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupLeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupLeaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupLeaveRsp_descriptor_;
}

const DupLeaveRsp& DupLeaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupLeaveRsp* DupLeaveRsp::default_instance_ = NULL;

DupLeaveRsp* DupLeaveRsp::New() const {
  return new DupLeaveRsp;
}

void DupLeaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    dupid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupLeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupId;
        break;
      }

      // optional int64 dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupLeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 dupId = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupLeaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 dupId = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupLeaveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 dupId = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupLeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupLeaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupLeaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupLeaveRsp::MergeFrom(const DupLeaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupLeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupLeaveRsp::CopyFrom(const DupLeaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupLeaveRsp::IsInitialized() const {

  return true;
}

void DupLeaveRsp::Swap(DupLeaveRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(dupid_, other->dupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupLeaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupLeaveRsp_descriptor_;
  metadata.reflection = DupLeaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyDupRsp::kTypeFieldNumber;
const int NotifyDupRsp::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifyDupRsp::NotifyDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDupRsp::InitAsDefaultInstance() {
}

NotifyDupRsp::NotifyDupRsp(const NotifyDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDupRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDupRsp::~NotifyDupRsp() {
  SharedDtor();
}

void NotifyDupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDupRsp_descriptor_;
}

const NotifyDupRsp& NotifyDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyDupRsp* NotifyDupRsp::default_instance_ = NULL;

NotifyDupRsp* NotifyDupRsp::New() const {
  return new NotifyDupRsp;
}

void NotifyDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.ComDupGroupData infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.ComDupGroupData infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.ComDupGroupData infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.ComDupGroupData infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDupRsp::MergeFrom(const NotifyDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDupRsp::CopyFrom(const NotifyDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDupRsp::IsInitialized() const {

  return true;
}

void NotifyDupRsp::Swap(NotifyDupRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDupRsp_descriptor_;
  metadata.reflection = NotifyDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyDupRunRsp::kDupIdFieldNumber;
const int NotifyDupRunRsp::kKillNumFieldNumber;
const int NotifyDupRunRsp::kAllNumFieldNumber;
const int NotifyDupRunRsp::kCurWaveFieldNumber;
const int NotifyDupRunRsp::kMaxWaveFieldNumber;
const int NotifyDupRunRsp::kCurHpFieldNumber;
const int NotifyDupRunRsp::kMaxHpFieldNumber;
const int NotifyDupRunRsp::kItemsFieldNumber;
#endif  // !_MSC_VER

NotifyDupRunRsp::NotifyDupRunRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDupRunRsp::InitAsDefaultInstance() {
}

NotifyDupRunRsp::NotifyDupRunRsp(const NotifyDupRunRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDupRunRsp::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  kill_num_ = 0;
  all_num_ = 0;
  cur_wave_ = 0;
  max_wave_ = 0;
  cur_hp_ = GOOGLE_LONGLONG(0);
  max_hp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDupRunRsp::~NotifyDupRunRsp() {
  SharedDtor();
}

void NotifyDupRunRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDupRunRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDupRunRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDupRunRsp_descriptor_;
}

const NotifyDupRunRsp& NotifyDupRunRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyDupRunRsp* NotifyDupRunRsp::default_instance_ = NULL;

NotifyDupRunRsp* NotifyDupRunRsp::New() const {
  return new NotifyDupRunRsp;
}

void NotifyDupRunRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = GOOGLE_ULONGLONG(0);
    kill_num_ = 0;
    all_num_ = 0;
    cur_wave_ = 0;
    max_wave_ = 0;
    cur_hp_ = GOOGLE_LONGLONG(0);
    max_hp_ = GOOGLE_LONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDupRunRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kill_num;
        break;
      }

      // optional int32 kill_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_num_)));
          set_has_kill_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_all_num;
        break;
      }

      // optional int32 all_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_num_)));
          set_has_all_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_wave;
        break;
      }

      // optional int32 cur_wave = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_wave_)));
          set_has_cur_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_wave;
        break;
      }

      // optional int32 max_wave = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_wave_)));
          set_has_max_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cur_hp;
        break;
      }

      // optional int64 cur_hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_hp_)));
          set_has_cur_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_hp;
        break;
      }

      // optional int64 max_hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ComPair64 items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyDupRunRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dupid(), output);
  }

  // optional int32 kill_num = 2;
  if (has_kill_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kill_num(), output);
  }

  // optional int32 all_num = 3;
  if (has_all_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->all_num(), output);
  }

  // optional int32 cur_wave = 4;
  if (has_cur_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_wave(), output);
  }

  // optional int32 max_wave = 5;
  if (has_max_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_wave(), output);
  }

  // optional int64 cur_hp = 6;
  if (has_cur_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cur_hp(), output);
  }

  // optional int64 max_hp = 7;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->max_hp(), output);
  }

  // repeated .proto_ff.ComPair64 items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDupRunRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dupid(), target);
  }

  // optional int32 kill_num = 2;
  if (has_kill_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kill_num(), target);
  }

  // optional int32 all_num = 3;
  if (has_all_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->all_num(), target);
  }

  // optional int32 cur_wave = 4;
  if (has_cur_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_wave(), target);
  }

  // optional int32 max_wave = 5;
  if (has_max_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_wave(), target);
  }

  // optional int64 cur_hp = 6;
  if (has_cur_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cur_hp(), target);
  }

  // optional int64 max_hp = 7;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->max_hp(), target);
  }

  // repeated .proto_ff.ComPair64 items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDupRunRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dupId = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int32 kill_num = 2;
    if (has_kill_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_num());
    }

    // optional int32 all_num = 3;
    if (has_all_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_num());
    }

    // optional int32 cur_wave = 4;
    if (has_cur_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_wave());
    }

    // optional int32 max_wave = 5;
    if (has_max_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_wave());
    }

    // optional int64 cur_hp = 6;
    if (has_cur_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_hp());
    }

    // optional int64 max_hp = 7;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_hp());
    }

  }
  // repeated .proto_ff.ComPair64 items = 8;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDupRunRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDupRunRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDupRunRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDupRunRsp::MergeFrom(const NotifyDupRunRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_kill_num()) {
      set_kill_num(from.kill_num());
    }
    if (from.has_all_num()) {
      set_all_num(from.all_num());
    }
    if (from.has_cur_wave()) {
      set_cur_wave(from.cur_wave());
    }
    if (from.has_max_wave()) {
      set_max_wave(from.max_wave());
    }
    if (from.has_cur_hp()) {
      set_cur_hp(from.cur_hp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDupRunRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDupRunRsp::CopyFrom(const NotifyDupRunRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDupRunRsp::IsInitialized() const {

  return true;
}

void NotifyDupRunRsp::Swap(NotifyDupRunRsp* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    std::swap(kill_num_, other->kill_num_);
    std::swap(all_num_, other->all_num_);
    std::swap(cur_wave_, other->cur_wave_);
    std::swap(max_wave_, other->max_wave_);
    std::swap(cur_hp_, other->cur_hp_);
    std::swap(max_hp_, other->max_hp_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDupRunRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDupRunRsp_descriptor_;
  metadata.reflection = NotifyDupRunRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyDupEndRsp::kDupIdFieldNumber;
#endif  // !_MSC_VER

NotifyDupEndRsp::NotifyDupEndRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDupEndRsp::InitAsDefaultInstance() {
}

NotifyDupEndRsp::NotifyDupEndRsp(const NotifyDupEndRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDupEndRsp::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDupEndRsp::~NotifyDupEndRsp() {
  SharedDtor();
}

void NotifyDupEndRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDupEndRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDupEndRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDupEndRsp_descriptor_;
}

const NotifyDupEndRsp& NotifyDupEndRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyDupEndRsp* NotifyDupEndRsp::default_instance_ = NULL;

NotifyDupEndRsp* NotifyDupEndRsp::New() const {
  return new NotifyDupEndRsp;
}

void NotifyDupEndRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDupEndRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyDupEndRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDupEndRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDupEndRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dupId = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDupEndRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDupEndRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDupEndRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDupEndRsp::MergeFrom(const NotifyDupEndRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDupEndRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDupEndRsp::CopyFrom(const NotifyDupEndRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDupEndRsp::IsInitialized() const {

  return true;
}

void NotifyDupEndRsp::Swap(NotifyDupEndRsp* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDupEndRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDupEndRsp_descriptor_;
  metadata.reflection = NotifyDupEndRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyDupBeginCdRsp::kSceneIdFieldNumber;
const int NotifyDupBeginCdRsp::kDupIdFieldNumber;
const int NotifyDupBeginCdRsp::kTimeEndFieldNumber;
#endif  // !_MSC_VER

NotifyDupBeginCdRsp::NotifyDupBeginCdRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDupBeginCdRsp::InitAsDefaultInstance() {
}

NotifyDupBeginCdRsp::NotifyDupBeginCdRsp(const NotifyDupBeginCdRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDupBeginCdRsp::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  dupid_ = GOOGLE_ULONGLONG(0);
  timeend_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDupBeginCdRsp::~NotifyDupBeginCdRsp() {
  SharedDtor();
}

void NotifyDupBeginCdRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDupBeginCdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDupBeginCdRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDupBeginCdRsp_descriptor_;
}

const NotifyDupBeginCdRsp& NotifyDupBeginCdRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyDupBeginCdRsp* NotifyDupBeginCdRsp::default_instance_ = NULL;

NotifyDupBeginCdRsp* NotifyDupBeginCdRsp::New() const {
  return new NotifyDupBeginCdRsp;
}

void NotifyDupBeginCdRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_ULONGLONG(0);
    dupid_ = GOOGLE_ULONGLONG(0);
    timeend_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDupBeginCdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupId;
        break;
      }

      // optional uint64 dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timeEnd;
        break;
      }

      // optional uint64 timeEnd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeend_)));
          set_has_timeend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyDupBeginCdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sceneid(), output);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional uint64 timeEnd = 3;
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timeend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDupBeginCdRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sceneid(), target);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional uint64 timeEnd = 3;
  if (has_timeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timeend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDupBeginCdRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 dupId = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional uint64 timeEnd = 3;
    if (has_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDupBeginCdRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDupBeginCdRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDupBeginCdRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDupBeginCdRsp::MergeFrom(const NotifyDupBeginCdRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_timeend()) {
      set_timeend(from.timeend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDupBeginCdRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDupBeginCdRsp::CopyFrom(const NotifyDupBeginCdRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDupBeginCdRsp::IsInitialized() const {

  return true;
}

void NotifyDupBeginCdRsp::Swap(NotifyDupBeginCdRsp* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(dupid_, other->dupid_);
    std::swap(timeend_, other->timeend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDupBeginCdRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDupBeginCdRsp_descriptor_;
  metadata.reflection = NotifyDupBeginCdRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecvTowerDupReq::kIdFieldNumber;
#endif  // !_MSC_VER

RecvTowerDupReq::RecvTowerDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecvTowerDupReq::InitAsDefaultInstance() {
}

RecvTowerDupReq::RecvTowerDupReq(const RecvTowerDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecvTowerDupReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecvTowerDupReq::~RecvTowerDupReq() {
  SharedDtor();
}

void RecvTowerDupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecvTowerDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvTowerDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecvTowerDupReq_descriptor_;
}

const RecvTowerDupReq& RecvTowerDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

RecvTowerDupReq* RecvTowerDupReq::default_instance_ = NULL;

RecvTowerDupReq* RecvTowerDupReq::New() const {
  return new RecvTowerDupReq;
}

void RecvTowerDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecvTowerDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecvTowerDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecvTowerDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecvTowerDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvTowerDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecvTowerDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecvTowerDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecvTowerDupReq::MergeFrom(const RecvTowerDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecvTowerDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvTowerDupReq::CopyFrom(const RecvTowerDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvTowerDupReq::IsInitialized() const {

  return true;
}

void RecvTowerDupReq::Swap(RecvTowerDupReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecvTowerDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecvTowerDupReq_descriptor_;
  metadata.reflection = RecvTowerDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecvTowerDupRsp::kResultFieldNumber;
const int RecvTowerDupRsp::kIdFieldNumber;
#endif  // !_MSC_VER

RecvTowerDupRsp::RecvTowerDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecvTowerDupRsp::InitAsDefaultInstance() {
}

RecvTowerDupRsp::RecvTowerDupRsp(const RecvTowerDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecvTowerDupRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecvTowerDupRsp::~RecvTowerDupRsp() {
  SharedDtor();
}

void RecvTowerDupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecvTowerDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvTowerDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecvTowerDupRsp_descriptor_;
}

const RecvTowerDupRsp& RecvTowerDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

RecvTowerDupRsp* RecvTowerDupRsp::default_instance_ = NULL;

RecvTowerDupRsp* RecvTowerDupRsp::New() const {
  return new RecvTowerDupRsp;
}

void RecvTowerDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecvTowerDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecvTowerDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecvTowerDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecvTowerDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvTowerDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecvTowerDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecvTowerDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecvTowerDupRsp::MergeFrom(const RecvTowerDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecvTowerDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvTowerDupRsp::CopyFrom(const RecvTowerDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvTowerDupRsp::IsInitialized() const {

  return true;
}

void RecvTowerDupRsp::Swap(RecvTowerDupRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecvTowerDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecvTowerDupRsp_descriptor_;
  metadata.reflection = RecvTowerDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyDupNumReq::kGroupFieldNumber;
const int BuyDupNumReq::kNumFieldNumber;
#endif  // !_MSC_VER

BuyDupNumReq::BuyDupNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyDupNumReq::InitAsDefaultInstance() {
}

BuyDupNumReq::BuyDupNumReq(const BuyDupNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyDupNumReq::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyDupNumReq::~BuyDupNumReq() {
  SharedDtor();
}

void BuyDupNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyDupNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyDupNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyDupNumReq_descriptor_;
}

const BuyDupNumReq& BuyDupNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

BuyDupNumReq* BuyDupNumReq::default_instance_ = NULL;

BuyDupNumReq* BuyDupNumReq::New() const {
  return new BuyDupNumReq;
}

void BuyDupNumReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyDupNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyDupNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyDupNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyDupNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyDupNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyDupNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyDupNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyDupNumReq::MergeFrom(const BuyDupNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyDupNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyDupNumReq::CopyFrom(const BuyDupNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyDupNumReq::IsInitialized() const {

  return true;
}

void BuyDupNumReq::Swap(BuyDupNumReq* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyDupNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyDupNumReq_descriptor_;
  metadata.reflection = BuyDupNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyDupNumRsp::kResultFieldNumber;
const int BuyDupNumRsp::kGroupFieldNumber;
const int BuyDupNumRsp::kNumFieldNumber;
#endif  // !_MSC_VER

BuyDupNumRsp::BuyDupNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyDupNumRsp::InitAsDefaultInstance() {
}

BuyDupNumRsp::BuyDupNumRsp(const BuyDupNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyDupNumRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  group_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyDupNumRsp::~BuyDupNumRsp() {
  SharedDtor();
}

void BuyDupNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyDupNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyDupNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyDupNumRsp_descriptor_;
}

const BuyDupNumRsp& BuyDupNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

BuyDupNumRsp* BuyDupNumRsp::default_instance_ = NULL;

BuyDupNumRsp* BuyDupNumRsp::New() const {
  return new BuyDupNumRsp;
}

void BuyDupNumRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    group_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyDupNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // optional int32 group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyDupNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyDupNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyDupNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyDupNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyDupNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyDupNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyDupNumRsp::MergeFrom(const BuyDupNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyDupNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyDupNumRsp::CopyFrom(const BuyDupNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyDupNumRsp::IsInitialized() const {

  return true;
}

void BuyDupNumRsp::Swap(BuyDupNumRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(group_, other->group_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyDupNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyDupNumRsp_descriptor_;
  metadata.reflection = BuyDupNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTowerRecordReq::kIdFieldNumber;
#endif  // !_MSC_VER

DupTowerRecordReq::DupTowerRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTowerRecordReq::InitAsDefaultInstance() {
}

DupTowerRecordReq::DupTowerRecordReq(const DupTowerRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTowerRecordReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTowerRecordReq::~DupTowerRecordReq() {
  SharedDtor();
}

void DupTowerRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupTowerRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTowerRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTowerRecordReq_descriptor_;
}

const DupTowerRecordReq& DupTowerRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupTowerRecordReq* DupTowerRecordReq::default_instance_ = NULL;

DupTowerRecordReq* DupTowerRecordReq::New() const {
  return new DupTowerRecordReq;
}

void DupTowerRecordReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTowerRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTowerRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTowerRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTowerRecordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTowerRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTowerRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTowerRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTowerRecordReq::MergeFrom(const DupTowerRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTowerRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTowerRecordReq::CopyFrom(const DupTowerRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTowerRecordReq::IsInitialized() const {

  return true;
}

void DupTowerRecordReq::Swap(DupTowerRecordReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTowerRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTowerRecordReq_descriptor_;
  metadata.reflection = DupTowerRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTowerRecordRsp::kIdFieldNumber;
const int DupTowerRecordRsp::kEntrysFieldNumber;
#endif  // !_MSC_VER

DupTowerRecordRsp::DupTowerRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTowerRecordRsp::InitAsDefaultInstance() {
}

DupTowerRecordRsp::DupTowerRecordRsp(const DupTowerRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTowerRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTowerRecordRsp::~DupTowerRecordRsp() {
  SharedDtor();
}

void DupTowerRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupTowerRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTowerRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTowerRecordRsp_descriptor_;
}

const DupTowerRecordRsp& DupTowerRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupTowerRecordRsp* DupTowerRecordRsp::default_instance_ = NULL;

DupTowerRecordRsp* DupTowerRecordRsp::New() const {
  return new DupTowerRecordRsp;
}

void DupTowerRecordRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTowerRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.DupTowerRecordEntry entrys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTowerRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto_ff.DupTowerRecordEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entrys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTowerRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.DupTowerRecordEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entrys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTowerRecordRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .proto_ff.DupTowerRecordEntry entrys = 2;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTowerRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTowerRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTowerRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTowerRecordRsp::MergeFrom(const DupTowerRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTowerRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTowerRecordRsp::CopyFrom(const DupTowerRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTowerRecordRsp::IsInitialized() const {

  return true;
}

void DupTowerRecordRsp::Swap(DupTowerRecordRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    entrys_.Swap(&other->entrys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTowerRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTowerRecordRsp_descriptor_;
  metadata.reflection = DupTowerRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CEnterDupReq::kParamsFieldNumber;
#endif  // !_MSC_VER

L2CEnterDupReq::L2CEnterDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CEnterDupReq::InitAsDefaultInstance() {
  params_ = const_cast< ::proto_ff::CreateSceneParamProto*>(&::proto_ff::CreateSceneParamProto::default_instance());
}

L2CEnterDupReq::L2CEnterDupReq(const L2CEnterDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CEnterDupReq::SharedCtor() {
  _cached_size_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CEnterDupReq::~L2CEnterDupReq() {
  SharedDtor();
}

void L2CEnterDupReq::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void L2CEnterDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CEnterDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CEnterDupReq_descriptor_;
}

const L2CEnterDupReq& L2CEnterDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2CEnterDupReq* L2CEnterDupReq::default_instance_ = NULL;

L2CEnterDupReq* L2CEnterDupReq::New() const {
  return new L2CEnterDupReq;
}

void L2CEnterDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_params()) {
      if (params_ != NULL) params_->::proto_ff::CreateSceneParamProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CEnterDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.CreateSceneParamProto params = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CEnterDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.CreateSceneParamProto params = 1;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CEnterDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.CreateSceneParamProto params = 1;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CEnterDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.CreateSceneParamProto params = 1;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CEnterDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CEnterDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CEnterDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CEnterDupReq::MergeFrom(const L2CEnterDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_params()) {
      mutable_params()->::proto_ff::CreateSceneParamProto::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CEnterDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CEnterDupReq::CopyFrom(const L2CEnterDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CEnterDupReq::IsInitialized() const {

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  return true;
}

void L2CEnterDupReq::Swap(L2CEnterDupReq* other) {
  if (other != this) {
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CEnterDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CEnterDupReq_descriptor_;
  metadata.reflection = L2CEnterDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CCreateDupRsp::kRetFieldNumber;
const int L2CCreateDupRsp::kSceneIdFieldNumber;
const int L2CCreateDupRsp::kDupIdFieldNumber;
#endif  // !_MSC_VER

L2CCreateDupRsp::L2CCreateDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CCreateDupRsp::InitAsDefaultInstance() {
}

L2CCreateDupRsp::L2CCreateDupRsp(const L2CCreateDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CCreateDupRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  dupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CCreateDupRsp::~L2CCreateDupRsp() {
  SharedDtor();
}

void L2CCreateDupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CCreateDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CCreateDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CCreateDupRsp_descriptor_;
}

const L2CCreateDupRsp& L2CCreateDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2CCreateDupRsp* L2CCreateDupRsp::default_instance_ = NULL;

L2CCreateDupRsp* L2CCreateDupRsp::New() const {
  return new L2CCreateDupRsp;
}

void L2CCreateDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    sceneid_ = GOOGLE_ULONGLONG(0);
    dupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CCreateDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneId;
        break;
      }

      // optional uint64 sceneId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dupId;
        break;
      }

      // optional uint64 dupId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CCreateDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 sceneId = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sceneid(), output);
  }

  // optional uint64 dupId = 3;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CCreateDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 sceneId = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sceneid(), target);
  }

  // optional uint64 dupId = 3;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CCreateDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 sceneId = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 dupId = 3;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CCreateDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CCreateDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CCreateDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CCreateDupRsp::MergeFrom(const L2CCreateDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CCreateDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CCreateDupRsp::CopyFrom(const L2CCreateDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CCreateDupRsp::IsInitialized() const {

  return true;
}

void L2CCreateDupRsp::Swap(L2CCreateDupRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(dupid_, other->dupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CCreateDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CCreateDupRsp_descriptor_;
  metadata.reflection = L2CCreateDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CDupStateChgNotify::kSceneIdFieldNumber;
const int L2CDupStateChgNotify::kDupIdFieldNumber;
const int L2CDupStateChgNotify::kStateFieldNumber;
const int L2CDupStateChgNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

L2CDupStateChgNotify::L2CDupStateChgNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CDupStateChgNotify::InitAsDefaultInstance() {
}

L2CDupStateChgNotify::L2CDupStateChgNotify(const L2CDupStateChgNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CDupStateChgNotify::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  dupid_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CDupStateChgNotify::~L2CDupStateChgNotify() {
  SharedDtor();
}

void L2CDupStateChgNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CDupStateChgNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CDupStateChgNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CDupStateChgNotify_descriptor_;
}

const L2CDupStateChgNotify& L2CDupStateChgNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2CDupStateChgNotify* L2CDupStateChgNotify::default_instance_ = NULL;

L2CDupStateChgNotify* L2CDupStateChgNotify::New() const {
  return new L2CDupStateChgNotify;
}

void L2CDupStateChgNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_ULONGLONG(0);
    dupid_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CDupStateChgNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupId;
        break;
      }

      // optional uint64 dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CDupStateChgNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sceneid(), output);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CDupStateChgNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sceneid(), target);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CDupStateChgNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 dupId = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CDupStateChgNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CDupStateChgNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CDupStateChgNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CDupStateChgNotify::MergeFrom(const L2CDupStateChgNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CDupStateChgNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CDupStateChgNotify::CopyFrom(const L2CDupStateChgNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CDupStateChgNotify::IsInitialized() const {

  return true;
}

void L2CDupStateChgNotify::Swap(L2CDupStateChgNotify* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(dupid_, other->dupid_);
    std::swap(state_, other->state_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CDupStateChgNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CDupStateChgNotify_descriptor_;
  metadata.reflection = L2CDupStateChgNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LPullRoleEnterDupNotify::kCharIdFieldNumber;
const int C2LPullRoleEnterDupNotify::kDuplicateIdFieldNumber;
const int C2LPullRoleEnterDupNotify::kSceneIdFieldNumber;
const int C2LPullRoleEnterDupNotify::kBornIdFieldNumber;
const int C2LPullRoleEnterDupNotify::kZoneidFieldNumber;
#endif  // !_MSC_VER

C2LPullRoleEnterDupNotify::C2LPullRoleEnterDupNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LPullRoleEnterDupNotify::InitAsDefaultInstance() {
}

C2LPullRoleEnterDupNotify::C2LPullRoleEnterDupNotify(const C2LPullRoleEnterDupNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LPullRoleEnterDupNotify::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = GOOGLE_ULONGLONG(0);
  duplicate_id_ = GOOGLE_ULONGLONG(0);
  scene_id_ = GOOGLE_ULONGLONG(0);
  born_id_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LPullRoleEnterDupNotify::~C2LPullRoleEnterDupNotify() {
  SharedDtor();
}

void C2LPullRoleEnterDupNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LPullRoleEnterDupNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LPullRoleEnterDupNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LPullRoleEnterDupNotify_descriptor_;
}

const C2LPullRoleEnterDupNotify& C2LPullRoleEnterDupNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

C2LPullRoleEnterDupNotify* C2LPullRoleEnterDupNotify::default_instance_ = NULL;

C2LPullRoleEnterDupNotify* C2LPullRoleEnterDupNotify::New() const {
  return new C2LPullRoleEnterDupNotify;
}

void C2LPullRoleEnterDupNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = GOOGLE_ULONGLONG(0);
    duplicate_id_ = GOOGLE_ULONGLONG(0);
    scene_id_ = GOOGLE_ULONGLONG(0);
    born_id_ = GOOGLE_ULONGLONG(0);
    zoneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LPullRoleEnterDupNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duplicate_id;
        break;
      }

      // required uint64 duplicate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }

      // required uint64 scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_born_id;
        break;
      }

      // optional uint64 born_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_born_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &born_id_)));
          set_has_born_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LPullRoleEnterDupNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->char_id(), output);
  }

  // required uint64 duplicate_id = 2;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->duplicate_id(), output);
  }

  // required uint64 scene_id = 3;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->scene_id(), output);
  }

  // optional uint64 born_id = 4;
  if (has_born_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->born_id(), output);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LPullRoleEnterDupNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->char_id(), target);
  }

  // required uint64 duplicate_id = 2;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->duplicate_id(), target);
  }

  // required uint64 scene_id = 3;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->scene_id(), target);
  }

  // optional uint64 born_id = 4;
  if (has_born_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->born_id(), target);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LPullRoleEnterDupNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->char_id());
    }

    // required uint64 duplicate_id = 2;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duplicate_id());
    }

    // required uint64 scene_id = 3;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional uint64 born_id = 4;
    if (has_born_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->born_id());
    }

    // optional uint32 zoneid = 5;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LPullRoleEnterDupNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LPullRoleEnterDupNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LPullRoleEnterDupNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LPullRoleEnterDupNotify::MergeFrom(const C2LPullRoleEnterDupNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_born_id()) {
      set_born_id(from.born_id());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LPullRoleEnterDupNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LPullRoleEnterDupNotify::CopyFrom(const C2LPullRoleEnterDupNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LPullRoleEnterDupNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2LPullRoleEnterDupNotify::Swap(C2LPullRoleEnterDupNotify* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(born_id_, other->born_id_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LPullRoleEnterDupNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LPullRoleEnterDupNotify_descriptor_;
  metadata.reflection = C2LPullRoleEnterDupNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CDupRoleActionNotify::kSceneIdFieldNumber;
const int L2CDupRoleActionNotify::kCidFieldNumber;
const int L2CDupRoleActionNotify::kActionIdFieldNumber;
const int L2CDupRoleActionNotify::kRetFieldNumber;
#endif  // !_MSC_VER

L2CDupRoleActionNotify::L2CDupRoleActionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CDupRoleActionNotify::InitAsDefaultInstance() {
}

L2CDupRoleActionNotify::L2CDupRoleActionNotify(const L2CDupRoleActionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CDupRoleActionNotify::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_LONGLONG(0);
  cid_ = GOOGLE_LONGLONG(0);
  actionid_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CDupRoleActionNotify::~L2CDupRoleActionNotify() {
  SharedDtor();
}

void L2CDupRoleActionNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CDupRoleActionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CDupRoleActionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CDupRoleActionNotify_descriptor_;
}

const L2CDupRoleActionNotify& L2CDupRoleActionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2CDupRoleActionNotify* L2CDupRoleActionNotify::default_instance_ = NULL;

L2CDupRoleActionNotify* L2CDupRoleActionNotify::New() const {
  return new L2CDupRoleActionNotify;
}

void L2CDupRoleActionNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_LONGLONG(0);
    cid_ = GOOGLE_LONGLONG(0);
    actionid_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CDupRoleActionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional int64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_actionId;
        break;
      }

      // optional int32 actionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionid_)));
          set_has_actionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CDupRoleActionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sceneid(), output);
  }

  // optional int64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cid(), output);
  }

  // optional int32 actionId = 3;
  if (has_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionid(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CDupRoleActionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sceneid(), target);
  }

  // optional int64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cid(), target);
  }

  // optional int32 actionId = 3;
  if (has_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionid(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CDupRoleActionNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sceneid());
    }

    // optional int64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cid());
    }

    // optional int32 actionId = 3;
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionid());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CDupRoleActionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CDupRoleActionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CDupRoleActionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CDupRoleActionNotify::MergeFrom(const L2CDupRoleActionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_actionid()) {
      set_actionid(from.actionid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CDupRoleActionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CDupRoleActionNotify::CopyFrom(const L2CDupRoleActionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CDupRoleActionNotify::IsInitialized() const {

  return true;
}

void L2CDupRoleActionNotify::Swap(L2CDupRoleActionNotify* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(cid_, other->cid_);
    std::swap(actionid_, other->actionid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CDupRoleActionNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CDupRoleActionNotify_descriptor_;
  metadata.reflection = L2CDupRoleActionNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2CEnterDupReq::kParamsFieldNumber;
#endif  // !_MSC_VER

S2CEnterDupReq::S2CEnterDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2CEnterDupReq::InitAsDefaultInstance() {
  params_ = const_cast< ::proto_ff::CreateSceneParamProto*>(&::proto_ff::CreateSceneParamProto::default_instance());
}

S2CEnterDupReq::S2CEnterDupReq(const S2CEnterDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2CEnterDupReq::SharedCtor() {
  _cached_size_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CEnterDupReq::~S2CEnterDupReq() {
  SharedDtor();
}

void S2CEnterDupReq::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void S2CEnterDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2CEnterDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2CEnterDupReq_descriptor_;
}

const S2CEnterDupReq& S2CEnterDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

S2CEnterDupReq* S2CEnterDupReq::default_instance_ = NULL;

S2CEnterDupReq* S2CEnterDupReq::New() const {
  return new S2CEnterDupReq;
}

void S2CEnterDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_params()) {
      if (params_ != NULL) params_->::proto_ff::CreateSceneParamProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2CEnterDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.CreateSceneParamProto params = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2CEnterDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.CreateSceneParamProto params = 1;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2CEnterDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.CreateSceneParamProto params = 1;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2CEnterDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.CreateSceneParamProto params = 1;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CEnterDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2CEnterDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2CEnterDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2CEnterDupReq::MergeFrom(const S2CEnterDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_params()) {
      mutable_params()->::proto_ff::CreateSceneParamProto::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2CEnterDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CEnterDupReq::CopyFrom(const S2CEnterDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CEnterDupReq::IsInitialized() const {

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  return true;
}

void S2CEnterDupReq::Swap(S2CEnterDupReq* other) {
  if (other != this) {
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2CEnterDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2CEnterDupReq_descriptor_;
  metadata.reflection = S2CEnterDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2SEnterDupRsp::kRetFieldNumber;
const int C2SEnterDupRsp::kParamsFieldNumber;
#endif  // !_MSC_VER

C2SEnterDupRsp::C2SEnterDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2SEnterDupRsp::InitAsDefaultInstance() {
  params_ = const_cast< ::proto_ff::CreateSceneParamProto*>(&::proto_ff::CreateSceneParamProto::default_instance());
}

C2SEnterDupRsp::C2SEnterDupRsp(const C2SEnterDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2SEnterDupRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SEnterDupRsp::~C2SEnterDupRsp() {
  SharedDtor();
}

void C2SEnterDupRsp::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void C2SEnterDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2SEnterDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2SEnterDupRsp_descriptor_;
}

const C2SEnterDupRsp& C2SEnterDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

C2SEnterDupRsp* C2SEnterDupRsp::default_instance_ = NULL;

C2SEnterDupRsp* C2SEnterDupRsp::New() const {
  return new C2SEnterDupRsp;
}

void C2SEnterDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_params()) {
      if (params_ != NULL) params_->::proto_ff::CreateSceneParamProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2SEnterDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_params;
        break;
      }

      // optional .proto_ff.CreateSceneParamProto params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SEnterDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.CreateSceneParamProto params = 2;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2SEnterDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.CreateSceneParamProto params = 2;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2SEnterDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.CreateSceneParamProto params = 2;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SEnterDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2SEnterDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2SEnterDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2SEnterDupRsp::MergeFrom(const C2SEnterDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_params()) {
      mutable_params()->::proto_ff::CreateSceneParamProto::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2SEnterDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SEnterDupRsp::CopyFrom(const C2SEnterDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SEnterDupRsp::IsInitialized() const {

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  return true;
}

void C2SEnterDupRsp::Swap(C2SEnterDupRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2SEnterDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2SEnterDupRsp_descriptor_;
  metadata.reflection = C2SEnterDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CTowerRecvRecordReq::kIdFieldNumber;
const int L2CTowerRecvRecordReq::kCidFieldNumber;
const int L2CTowerRecvRecordReq::kNameFieldNumber;
const int L2CTowerRecvRecordReq::kTimeFieldNumber;
#endif  // !_MSC_VER

L2CTowerRecvRecordReq::L2CTowerRecvRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CTowerRecvRecordReq::InitAsDefaultInstance() {
}

L2CTowerRecvRecordReq::L2CTowerRecvRecordReq(const L2CTowerRecvRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CTowerRecvRecordReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  cid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CTowerRecvRecordReq::~L2CTowerRecvRecordReq() {
  SharedDtor();
}

void L2CTowerRecvRecordReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void L2CTowerRecvRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CTowerRecvRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CTowerRecvRecordReq_descriptor_;
}

const L2CTowerRecvRecordReq& L2CTowerRecvRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2CTowerRecvRecordReq* L2CTowerRecvRecordReq::default_instance_ = NULL;

L2CTowerRecvRecordReq* L2CTowerRecvRecordReq::New() const {
  return new L2CTowerRecvRecordReq;
}

void L2CTowerRecvRecordReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    cid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CTowerRecvRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional int64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CTowerRecvRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CTowerRecvRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CTowerRecvRecordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CTowerRecvRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CTowerRecvRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CTowerRecvRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CTowerRecvRecordReq::MergeFrom(const L2CTowerRecvRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CTowerRecvRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CTowerRecvRecordReq::CopyFrom(const L2CTowerRecvRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CTowerRecvRecordReq::IsInitialized() const {

  return true;
}

void L2CTowerRecvRecordReq::Swap(L2CTowerRecvRecordReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CTowerRecvRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CTowerRecvRecordReq_descriptor_;
  metadata.reflection = L2CTowerRecvRecordReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
