// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Dup.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Dup.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* DupDropProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupDropProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTowerRecordEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTowerRecordEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTeamInviteState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTeamInviteState_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerDupData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerDupData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassDupData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassDupData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassGhostData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassGhostData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassMoyuData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassMoyuData_reflection_ = NULL;
const ::google::protobuf::Descriptor* YaoTaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YaoTaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComDupGroupData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComDupGroupData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupResultReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupResultReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupLeaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupLeaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupLeaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupLeaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDupRunRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDupRunRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDupEndRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDupEndRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDupBeginCdRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDupBeginCdRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecvTowerDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecvTowerDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecvTowerDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecvTowerDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyDupNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyDupNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyDupNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyDupNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTowerRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTowerRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTowerRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTowerRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTeamInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTeamInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTeamInviteRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTeamInviteRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDupTeamInviteStateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDupTeamInviteStateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTeamOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTeamOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTeamOptRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTeamOptRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupSweepReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupSweepReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupSweepRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupSweepRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GhostDupRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GhostDupRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GHostDupRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GHostDupRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGHostDupRun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGHostDupRun_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGHostChgStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGHostChgStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGHostDupRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGHostDupRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* GhostRecvPassReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GhostRecvPassReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GhostRecvPassRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GhostRecvPassRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* YaotaReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YaotaReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyYaotaFirstPass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyYaotaFirstPass_reflection_ = NULL;
const ::google::protobuf::Descriptor* YaotaFirstPassInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YaotaFirstPassInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* YaotaFirstPassInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YaotaFirstPassInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* YaotaRecvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YaotaRecvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* YaotaRecvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YaotaRecvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyYaotaDupRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyYaotaDupRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerFlashReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerFlashReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerFlashRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerFlashRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CEnterDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CEnterDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CCreateDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CCreateDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CDupStateChgNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CDupStateChgNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LPullRoleEnterDupNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LPullRoleEnterDupNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CDupRoleActionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CDupRoleActionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2CEnterDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2CEnterDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2SEnterDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2SEnterDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CTowerRecvRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CTowerRecvRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2SEnterDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2SEnterDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2SDupTeamInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2SDupTeamInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2SCreateDupResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2SCreateDupResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2CNotifyCharEnterDup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2CNotifyCharEnterDup_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRebotEnterDup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRebotEnterDup_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2SDupTeamOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2SDupTeamOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2CNofityRoleRebotEnterDup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2CNofityRoleRebotEnterDup_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LRoleRobotEnterDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LRoleRobotEnterDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CDupResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CDupResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LEnterRebotReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LEnterRebotReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2SNotifyDupFinishRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2SNotifyDupFinishRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2STeamEnterDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2STeamEnterDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2LCreateDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2LCreateDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2SCreateDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2SCreateDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2LNotifyRoleEnterDup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2LNotifyRoleEnterDup_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2SNotifyDupFinishRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2SNotifyDupFinishRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CGHostDupRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CGHostDupRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CUpdateGHostDupRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CUpdateGHostDupRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CSynPassYaotaReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CSynPassYaotaReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDupTeamDisReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDupTeamDisReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCNotifyYaotaFirstPassReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCNotifyYaotaFirstPassReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLYaotaRecvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLYaotaRecvReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Dup_2eproto() {
  protobuf_AddDesc_Dup_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Dup.proto");
  GOOGLE_CHECK(file != NULL);
  DupDropProto_descriptor_ = file->message_type(0);
  static const int DupDropProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDropProto, pick_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDropProto, pick_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDropProto, pick_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDropProto, kill_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDropProto, star3_),
  };
  DupDropProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupDropProto_descriptor_,
      DupDropProto::default_instance_,
      DupDropProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDropProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDropProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupDropProto));
  DupTowerRecordEntry_descriptor_ = file->message_type(1);
  static const int DupTowerRecordEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordEntry, time_),
  };
  DupTowerRecordEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTowerRecordEntry_descriptor_,
      DupTowerRecordEntry::default_instance_,
      DupTowerRecordEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTowerRecordEntry));
  DupTeamInviteState_descriptor_ = file->message_type(2);
  static const int DupTeamInviteState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamInviteState, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamInviteState, state_),
  };
  DupTeamInviteState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTeamInviteState_descriptor_,
      DupTeamInviteState::default_instance_,
      DupTeamInviteState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamInviteState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamInviteState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTeamInviteState));
  TowerDupData_descriptor_ = file->message_type(3);
  static const int TowerDupData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerDupData, ids_),
  };
  TowerDupData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerDupData_descriptor_,
      TowerDupData::default_instance_,
      TowerDupData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerDupData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerDupData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerDupData));
  PassDupData_descriptor_ = file->message_type(4);
  static const int PassDupData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDupData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDupData, star_),
  };
  PassDupData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassDupData_descriptor_,
      PassDupData::default_instance_,
      PassDupData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDupData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassDupData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassDupData));
  PassGhostData_descriptor_ = file->message_type(5);
  static const int PassGhostData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassGhostData, wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassGhostData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassGhostData, recv_ids_),
  };
  PassGhostData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassGhostData_descriptor_,
      PassGhostData::default_instance_,
      PassGhostData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassGhostData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassGhostData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassGhostData));
  PassMoyuData_descriptor_ = file->message_type(6);
  static const int PassMoyuData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassMoyuData, recv_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassMoyuData, day_harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassMoyuData, week_harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassMoyuData, last_day_harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassMoyuData, last_week_harm_),
  };
  PassMoyuData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassMoyuData_descriptor_,
      PassMoyuData::default_instance_,
      PassMoyuData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassMoyuData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassMoyuData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassMoyuData));
  YaoTaData_descriptor_ = file->message_type(7);
  static const int YaoTaData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoTaData, pass_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoTaData, first_pass_ids_),
  };
  YaoTaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YaoTaData_descriptor_,
      YaoTaData::default_instance_,
      YaoTaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoTaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoTaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YaoTaData));
  ComDupGroupData_descriptor_ = file->message_type(8);
  static const int ComDupGroupData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, pass_dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, enter_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, max_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, buy_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, tower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, ghost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, moyu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, yaota_),
  };
  ComDupGroupData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComDupGroupData_descriptor_,
      ComDupGroupData::default_instance_,
      ComDupGroupData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDupGroupData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComDupGroupData));
  EnterDupReq_descriptor_ = file->message_type(9);
  static const int EnterDupReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupReq, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupReq, mergenum_),
  };
  EnterDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterDupReq_descriptor_,
      EnterDupReq::default_instance_,
      EnterDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterDupReq));
  EnterDupRsp_descriptor_ = file->message_type(10);
  static const int EnterDupRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupRsp, duptime_),
  };
  EnterDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterDupRsp_descriptor_,
      EnterDupRsp::default_instance_,
      EnterDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterDupRsp));
  DupResultReq_descriptor_ = file->message_type(11);
  static const int DupResultReq_offsets_[1] = {
  };
  DupResultReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupResultReq_descriptor_,
      DupResultReq::default_instance_,
      DupResultReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupResultReq));
  DupResultRsp_descriptor_ = file->message_type(12);
  static const int DupResultRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultRsp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultRsp, cost_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultRsp, info_),
  };
  DupResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupResultRsp_descriptor_,
      DupResultRsp::default_instance_,
      DupResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupResultRsp));
  DupLeaveReq_descriptor_ = file->message_type(13);
  static const int DupLeaveReq_offsets_[1] = {
  };
  DupLeaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupLeaveReq_descriptor_,
      DupLeaveReq::default_instance_,
      DupLeaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupLeaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupLeaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupLeaveReq));
  DupLeaveRsp_descriptor_ = file->message_type(14);
  static const int DupLeaveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupLeaveRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupLeaveRsp, dupid_),
  };
  DupLeaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupLeaveRsp_descriptor_,
      DupLeaveRsp::default_instance_,
      DupLeaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupLeaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupLeaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupLeaveRsp));
  NotifyDupRsp_descriptor_ = file->message_type(15);
  static const int NotifyDupRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRsp, infos_),
  };
  NotifyDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDupRsp_descriptor_,
      NotifyDupRsp::default_instance_,
      NotifyDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDupRsp));
  NotifyDupRunRsp_descriptor_ = file->message_type(16);
  static const int NotifyDupRunRsp_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, kill_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, all_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, cur_wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, max_wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, cur_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, kill_boss_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, boss_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, add_exp_),
  };
  NotifyDupRunRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDupRunRsp_descriptor_,
      NotifyDupRunRsp::default_instance_,
      NotifyDupRunRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupRunRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDupRunRsp));
  NotifyDupEndRsp_descriptor_ = file->message_type(17);
  static const int NotifyDupEndRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupEndRsp, dupid_),
  };
  NotifyDupEndRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDupEndRsp_descriptor_,
      NotifyDupEndRsp::default_instance_,
      NotifyDupEndRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupEndRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupEndRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDupEndRsp));
  NotifyDupBeginCdRsp_descriptor_ = file->message_type(18);
  static const int NotifyDupBeginCdRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupBeginCdRsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupBeginCdRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupBeginCdRsp, timeend_),
  };
  NotifyDupBeginCdRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDupBeginCdRsp_descriptor_,
      NotifyDupBeginCdRsp::default_instance_,
      NotifyDupBeginCdRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupBeginCdRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupBeginCdRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDupBeginCdRsp));
  RecvTowerDupReq_descriptor_ = file->message_type(19);
  static const int RecvTowerDupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTowerDupReq, id_),
  };
  RecvTowerDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecvTowerDupReq_descriptor_,
      RecvTowerDupReq::default_instance_,
      RecvTowerDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTowerDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTowerDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecvTowerDupReq));
  RecvTowerDupRsp_descriptor_ = file->message_type(20);
  static const int RecvTowerDupRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTowerDupRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTowerDupRsp, id_),
  };
  RecvTowerDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecvTowerDupRsp_descriptor_,
      RecvTowerDupRsp::default_instance_,
      RecvTowerDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTowerDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTowerDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecvTowerDupRsp));
  BuyDupNumReq_descriptor_ = file->message_type(21);
  static const int BuyDupNumReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumReq, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumReq, num_),
  };
  BuyDupNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyDupNumReq_descriptor_,
      BuyDupNumReq::default_instance_,
      BuyDupNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyDupNumReq));
  BuyDupNumRsp_descriptor_ = file->message_type(22);
  static const int BuyDupNumRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumRsp, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumRsp, num_),
  };
  BuyDupNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyDupNumRsp_descriptor_,
      BuyDupNumRsp::default_instance_,
      BuyDupNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyDupNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyDupNumRsp));
  DupTowerRecordReq_descriptor_ = file->message_type(23);
  static const int DupTowerRecordReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordReq, id_),
  };
  DupTowerRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTowerRecordReq_descriptor_,
      DupTowerRecordReq::default_instance_,
      DupTowerRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTowerRecordReq));
  DupTowerRecordRsp_descriptor_ = file->message_type(24);
  static const int DupTowerRecordRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordRsp, entrys_),
  };
  DupTowerRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTowerRecordRsp_descriptor_,
      DupTowerRecordRsp::default_instance_,
      DupTowerRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTowerRecordRsp));
  DupTeamInviteReq_descriptor_ = file->message_type(25);
  static const int DupTeamInviteReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamInviteReq, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamInviteReq, mergenum_),
  };
  DupTeamInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTeamInviteReq_descriptor_,
      DupTeamInviteReq::default_instance_,
      DupTeamInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTeamInviteReq));
  DupTeamInviteRsp_descriptor_ = file->message_type(26);
  static const int DupTeamInviteRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamInviteRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamInviteRsp, dupid_),
  };
  DupTeamInviteRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTeamInviteRsp_descriptor_,
      DupTeamInviteRsp::default_instance_,
      DupTeamInviteRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamInviteRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamInviteRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTeamInviteRsp));
  NotifyDupTeamInviteStateRsp_descriptor_ = file->message_type(27);
  static const int NotifyDupTeamInviteStateRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupTeamInviteStateRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupTeamInviteStateRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupTeamInviteStateRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupTeamInviteStateRsp, infos_),
  };
  NotifyDupTeamInviteStateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDupTeamInviteStateRsp_descriptor_,
      NotifyDupTeamInviteStateRsp::default_instance_,
      NotifyDupTeamInviteStateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupTeamInviteStateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupTeamInviteStateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDupTeamInviteStateRsp));
  DupTeamOptReq_descriptor_ = file->message_type(28);
  static const int DupTeamOptReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamOptReq, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamOptReq, mergenum_),
  };
  DupTeamOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTeamOptReq_descriptor_,
      DupTeamOptReq::default_instance_,
      DupTeamOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTeamOptReq));
  DupTeamOptRsp_descriptor_ = file->message_type(29);
  static const int DupTeamOptRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamOptRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamOptRsp, opt_),
  };
  DupTeamOptRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTeamOptRsp_descriptor_,
      DupTeamOptRsp::default_instance_,
      DupTeamOptRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamOptRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamOptRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTeamOptRsp));
  DupSweepReq_descriptor_ = file->message_type(30);
  static const int DupSweepReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupSweepReq, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupSweepReq, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupSweepReq, show_type_),
  };
  DupSweepReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupSweepReq_descriptor_,
      DupSweepReq::default_instance_,
      DupSweepReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupSweepReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupSweepReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupSweepReq));
  DupSweepRsp_descriptor_ = file->message_type(31);
  static const int DupSweepRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupSweepRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupSweepRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupSweepRsp, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupSweepRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupSweepRsp, show_type_),
  };
  DupSweepRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupSweepRsp_descriptor_,
      DupSweepRsp::default_instance_,
      DupSweepRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupSweepRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupSweepRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupSweepRsp));
  GhostDupRankReq_descriptor_ = file->message_type(32);
  static const int GhostDupRankReq_offsets_[1] = {
  };
  GhostDupRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GhostDupRankReq_descriptor_,
      GhostDupRankReq::default_instance_,
      GhostDupRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostDupRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostDupRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GhostDupRankReq));
  GHostDupRankRsp_descriptor_ = file->message_type(33);
  static const int GHostDupRankRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GHostDupRankRsp, ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GHostDupRankRsp, my_wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GHostDupRankRsp, my_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GHostDupRankRsp, my_rank_),
  };
  GHostDupRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GHostDupRankRsp_descriptor_,
      GHostDupRankRsp::default_instance_,
      GHostDupRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GHostDupRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GHostDupRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GHostDupRankRsp));
  NotifyGHostDupRun_descriptor_ = file->message_type(34);
  static const int NotifyGHostDupRun_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGHostDupRun, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGHostDupRun, curwave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGHostDupRun, num_),
  };
  NotifyGHostDupRun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGHostDupRun_descriptor_,
      NotifyGHostDupRun::default_instance_,
      NotifyGHostDupRun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGHostDupRun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGHostDupRun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGHostDupRun));
  NotifyGHostChgStep_descriptor_ = file->message_type(35);
  static const int NotifyGHostChgStep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGHostChgStep, time_),
  };
  NotifyGHostChgStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGHostChgStep_descriptor_,
      NotifyGHostChgStep::default_instance_,
      NotifyGHostChgStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGHostChgStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGHostChgStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGHostChgStep));
  NotifyGHostDupRes_descriptor_ = file->message_type(36);
  static const int NotifyGHostDupRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGHostDupRes, curwave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGHostDupRes, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGHostDupRes, reward_),
  };
  NotifyGHostDupRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGHostDupRes_descriptor_,
      NotifyGHostDupRes::default_instance_,
      NotifyGHostDupRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGHostDupRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGHostDupRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGHostDupRes));
  GhostRecvPassReq_descriptor_ = file->message_type(37);
  static const int GhostRecvPassReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostRecvPassReq, id_),
  };
  GhostRecvPassReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GhostRecvPassReq_descriptor_,
      GhostRecvPassReq::default_instance_,
      GhostRecvPassReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostRecvPassReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostRecvPassReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GhostRecvPassReq));
  GhostRecvPassRsp_descriptor_ = file->message_type(38);
  static const int GhostRecvPassRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostRecvPassRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostRecvPassRsp, id_),
  };
  GhostRecvPassRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GhostRecvPassRsp_descriptor_,
      GhostRecvPassRsp::default_instance_,
      GhostRecvPassRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostRecvPassRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostRecvPassRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GhostRecvPassRsp));
  YaotaReq_descriptor_ = file->message_type(39);
  static const int YaotaReq_offsets_[1] = {
  };
  YaotaReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YaotaReq_descriptor_,
      YaotaReq::default_instance_,
      YaotaReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YaotaReq));
  NotifyYaotaFirstPass_descriptor_ = file->message_type(40);
  static const int NotifyYaotaFirstPass_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyYaotaFirstPass, can_recv_first_pass_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyYaotaFirstPass, first_pass_ids_),
  };
  NotifyYaotaFirstPass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyYaotaFirstPass_descriptor_,
      NotifyYaotaFirstPass::default_instance_,
      NotifyYaotaFirstPass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyYaotaFirstPass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyYaotaFirstPass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyYaotaFirstPass));
  YaotaFirstPassInfoReq_descriptor_ = file->message_type(41);
  static const int YaotaFirstPassInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaFirstPassInfoReq, dupid_),
  };
  YaotaFirstPassInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YaotaFirstPassInfoReq_descriptor_,
      YaotaFirstPassInfoReq::default_instance_,
      YaotaFirstPassInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaFirstPassInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaFirstPassInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YaotaFirstPassInfoReq));
  YaotaFirstPassInfoRsp_descriptor_ = file->message_type(42);
  static const int YaotaFirstPassInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaFirstPassInfoRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaFirstPassInfoRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaFirstPassInfoRsp, time_),
  };
  YaotaFirstPassInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YaotaFirstPassInfoRsp_descriptor_,
      YaotaFirstPassInfoRsp::default_instance_,
      YaotaFirstPassInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaFirstPassInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaFirstPassInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YaotaFirstPassInfoRsp));
  YaotaRecvReq_descriptor_ = file->message_type(43);
  static const int YaotaRecvReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaRecvReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaRecvReq, dupid_),
  };
  YaotaRecvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YaotaRecvReq_descriptor_,
      YaotaRecvReq::default_instance_,
      YaotaRecvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaRecvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaRecvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YaotaRecvReq));
  YaotaRecvRsp_descriptor_ = file->message_type(44);
  static const int YaotaRecvRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaRecvRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaRecvRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaRecvRsp, dupid_),
  };
  YaotaRecvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YaotaRecvRsp_descriptor_,
      YaotaRecvRsp::default_instance_,
      YaotaRecvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaRecvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaotaRecvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YaotaRecvRsp));
  NotifyYaotaDupRes_descriptor_ = file->message_type(45);
  static const int NotifyYaotaDupRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyYaotaDupRes, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyYaotaDupRes, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyYaotaDupRes, time_),
  };
  NotifyYaotaDupRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyYaotaDupRes_descriptor_,
      NotifyYaotaDupRes::default_instance_,
      NotifyYaotaDupRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyYaotaDupRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyYaotaDupRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyYaotaDupRes));
  TowerFlashReq_descriptor_ = file->message_type(46);
  static const int TowerFlashReq_offsets_[1] = {
  };
  TowerFlashReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerFlashReq_descriptor_,
      TowerFlashReq::default_instance_,
      TowerFlashReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFlashReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFlashReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerFlashReq));
  TowerFlashRsp_descriptor_ = file->message_type(47);
  static const int TowerFlashRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFlashRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFlashRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFlashRsp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFlashRsp, cost_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFlashRsp, info_),
  };
  TowerFlashRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerFlashRsp_descriptor_,
      TowerFlashRsp::default_instance_,
      TowerFlashRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFlashRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFlashRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerFlashRsp));
  L2CEnterDupReq_descriptor_ = file->message_type(48);
  static const int L2CEnterDupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CEnterDupReq, params_),
  };
  L2CEnterDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CEnterDupReq_descriptor_,
      L2CEnterDupReq::default_instance_,
      L2CEnterDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CEnterDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CEnterDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CEnterDupReq));
  L2CCreateDupRsp_descriptor_ = file->message_type(49);
  static const int L2CCreateDupRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CCreateDupRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CCreateDupRsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CCreateDupRsp, dupid_),
  };
  L2CCreateDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CCreateDupRsp_descriptor_,
      L2CCreateDupRsp::default_instance_,
      L2CCreateDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CCreateDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CCreateDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CCreateDupRsp));
  L2CDupStateChgNotify_descriptor_ = file->message_type(50);
  static const int L2CDupStateChgNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupStateChgNotify, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupStateChgNotify, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupStateChgNotify, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupStateChgNotify, time_),
  };
  L2CDupStateChgNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CDupStateChgNotify_descriptor_,
      L2CDupStateChgNotify::default_instance_,
      L2CDupStateChgNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupStateChgNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupStateChgNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CDupStateChgNotify));
  C2LPullRoleEnterDupNotify_descriptor_ = file->message_type(51);
  static const int C2LPullRoleEnterDupNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, born_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, tran_tag_),
  };
  C2LPullRoleEnterDupNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LPullRoleEnterDupNotify_descriptor_,
      C2LPullRoleEnterDupNotify::default_instance_,
      C2LPullRoleEnterDupNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LPullRoleEnterDupNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LPullRoleEnterDupNotify));
  L2CDupRoleActionNotify_descriptor_ = file->message_type(52);
  static const int L2CDupRoleActionNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupRoleActionNotify, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupRoleActionNotify, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupRoleActionNotify, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupRoleActionNotify, ret_),
  };
  L2CDupRoleActionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CDupRoleActionNotify_descriptor_,
      L2CDupRoleActionNotify::default_instance_,
      L2CDupRoleActionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupRoleActionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupRoleActionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CDupRoleActionNotify));
  S2CEnterDupReq_descriptor_ = file->message_type(53);
  static const int S2CEnterDupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CEnterDupReq, params_),
  };
  S2CEnterDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2CEnterDupReq_descriptor_,
      S2CEnterDupReq::default_instance_,
      S2CEnterDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CEnterDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CEnterDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2CEnterDupReq));
  C2SEnterDupRsp_descriptor_ = file->message_type(54);
  static const int C2SEnterDupRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SEnterDupRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SEnterDupRsp, params_),
  };
  C2SEnterDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2SEnterDupRsp_descriptor_,
      C2SEnterDupRsp::default_instance_,
      C2SEnterDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SEnterDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SEnterDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2SEnterDupRsp));
  L2CTowerRecvRecordReq_descriptor_ = file->message_type(55);
  static const int L2CTowerRecvRecordReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CTowerRecvRecordReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CTowerRecvRecordReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CTowerRecvRecordReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CTowerRecvRecordReq, time_),
  };
  L2CTowerRecvRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CTowerRecvRecordReq_descriptor_,
      L2CTowerRecvRecordReq::default_instance_,
      L2CTowerRecvRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CTowerRecvRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CTowerRecvRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CTowerRecvRecordReq));
  L2SEnterDupReq_descriptor_ = file->message_type(56);
  static const int L2SEnterDupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SEnterDupReq, params_),
  };
  L2SEnterDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2SEnterDupReq_descriptor_,
      L2SEnterDupReq::default_instance_,
      L2SEnterDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SEnterDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SEnterDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2SEnterDupReq));
  L2SDupTeamInviteReq_descriptor_ = file->message_type(57);
  static const int L2SDupTeamInviteReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SDupTeamInviteReq, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SDupTeamInviteReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SDupTeamInviteReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SDupTeamInviteReq, params_),
  };
  L2SDupTeamInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2SDupTeamInviteReq_descriptor_,
      L2SDupTeamInviteReq::default_instance_,
      L2SDupTeamInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SDupTeamInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SDupTeamInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2SDupTeamInviteReq));
  C2SCreateDupResultRsp_descriptor_ = file->message_type(58);
  static const int C2SCreateDupResultRsp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SCreateDupResultRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SCreateDupResultRsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SCreateDupResultRsp, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SCreateDupResultRsp, logicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SCreateDupResultRsp, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SCreateDupResultRsp, keytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SCreateDupResultRsp, keyval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SCreateDupResultRsp, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SCreateDupResultRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SCreateDupResultRsp, str_param_),
  };
  C2SCreateDupResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2SCreateDupResultRsp_descriptor_,
      C2SCreateDupResultRsp::default_instance_,
      C2SCreateDupResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SCreateDupResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SCreateDupResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2SCreateDupResultRsp));
  S2CNotifyCharEnterDup_descriptor_ = file->message_type(59);
  static const int S2CNotifyCharEnterDup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNotifyCharEnterDup, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNotifyCharEnterDup, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNotifyCharEnterDup, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNotifyCharEnterDup, bornid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNotifyCharEnterDup, tran_tag_),
  };
  S2CNotifyCharEnterDup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2CNotifyCharEnterDup_descriptor_,
      S2CNotifyCharEnterDup::default_instance_,
      S2CNotifyCharEnterDup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNotifyCharEnterDup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNotifyCharEnterDup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2CNotifyCharEnterDup));
  NotifyRebotEnterDup_descriptor_ = file->message_type(60);
  static const int NotifyRebotEnterDup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRebotEnterDup, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRebotEnterDup, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRebotEnterDup, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRebotEnterDup, bornid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRebotEnterDup, teamid_),
  };
  NotifyRebotEnterDup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRebotEnterDup_descriptor_,
      NotifyRebotEnterDup::default_instance_,
      NotifyRebotEnterDup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRebotEnterDup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRebotEnterDup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRebotEnterDup));
  L2SDupTeamOptReq_descriptor_ = file->message_type(61);
  static const int L2SDupTeamOptReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SDupTeamOptReq, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SDupTeamOptReq, mergenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SDupTeamOptReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SDupTeamOptReq, cid_),
  };
  L2SDupTeamOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2SDupTeamOptReq_descriptor_,
      L2SDupTeamOptReq::default_instance_,
      L2SDupTeamOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SDupTeamOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SDupTeamOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2SDupTeamOptReq));
  S2CNofityRoleRebotEnterDup_descriptor_ = file->message_type(62);
  static const int S2CNofityRoleRebotEnterDup_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNofityRoleRebotEnterDup, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNofityRoleRebotEnterDup, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNofityRoleRebotEnterDup, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNofityRoleRebotEnterDup, bornid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNofityRoleRebotEnterDup, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNofityRoleRebotEnterDup, logicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNofityRoleRebotEnterDup, campid_),
  };
  S2CNofityRoleRebotEnterDup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2CNofityRoleRebotEnterDup_descriptor_,
      S2CNofityRoleRebotEnterDup::default_instance_,
      S2CNofityRoleRebotEnterDup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNofityRoleRebotEnterDup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CNofityRoleRebotEnterDup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2CNofityRoleRebotEnterDup));
  C2LRoleRobotEnterDupReq_descriptor_ = file->message_type(63);
  static const int C2LRoleRobotEnterDupReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LRoleRobotEnterDupReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LRoleRobotEnterDupReq, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LRoleRobotEnterDupReq, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LRoleRobotEnterDupReq, bornid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LRoleRobotEnterDupReq, mirrors_),
  };
  C2LRoleRobotEnterDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LRoleRobotEnterDupReq_descriptor_,
      C2LRoleRobotEnterDupReq::default_instance_,
      C2LRoleRobotEnterDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LRoleRobotEnterDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LRoleRobotEnterDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LRoleRobotEnterDupReq));
  L2CDupResultRsp_descriptor_ = file->message_type(64);
  static const int L2CDupResultRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupResultRsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupResultRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupResultRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupResultRsp, int_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupResultRsp, str_param_),
  };
  L2CDupResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CDupResultRsp_descriptor_,
      L2CDupResultRsp::default_instance_,
      L2CDupResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDupResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CDupResultRsp));
  C2LEnterRebotReq_descriptor_ = file->message_type(65);
  static const int C2LEnterRebotReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LEnterRebotReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LEnterRebotReq, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LEnterRebotReq, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LEnterRebotReq, bornid_),
  };
  C2LEnterRebotReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LEnterRebotReq_descriptor_,
      C2LEnterRebotReq::default_instance_,
      C2LEnterRebotReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LEnterRebotReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LEnterRebotReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LEnterRebotReq));
  C2SNotifyDupFinishRsp_descriptor_ = file->message_type(66);
  static const int C2SNotifyDupFinishRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SNotifyDupFinishRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SNotifyDupFinishRsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SNotifyDupFinishRsp, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SNotifyDupFinishRsp, logicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SNotifyDupFinishRsp, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SNotifyDupFinishRsp, keytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SNotifyDupFinishRsp, keyval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SNotifyDupFinishRsp, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SNotifyDupFinishRsp, dupid_),
  };
  C2SNotifyDupFinishRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2SNotifyDupFinishRsp_descriptor_,
      C2SNotifyDupFinishRsp::default_instance_,
      C2SNotifyDupFinishRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SNotifyDupFinishRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SNotifyDupFinishRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2SNotifyDupFinishRsp));
  C2STeamEnterDupReq_descriptor_ = file->message_type(67);
  static const int C2STeamEnterDupReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2STeamEnterDupReq, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2STeamEnterDupReq, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2STeamEnterDupReq, isdyn_),
  };
  C2STeamEnterDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2STeamEnterDupReq_descriptor_,
      C2STeamEnterDupReq::default_instance_,
      C2STeamEnterDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2STeamEnterDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2STeamEnterDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2STeamEnterDupReq));
  S2LCreateDupReq_descriptor_ = file->message_type(68);
  static const int S2LCreateDupReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2LCreateDupReq, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2LCreateDupReq, ex_params_),
  };
  S2LCreateDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2LCreateDupReq_descriptor_,
      S2LCreateDupReq::default_instance_,
      S2LCreateDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2LCreateDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2LCreateDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2LCreateDupReq));
  L2SCreateDupRsp_descriptor_ = file->message_type(69);
  static const int L2SCreateDupRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SCreateDupRsp, rsp_),
  };
  L2SCreateDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2SCreateDupRsp_descriptor_,
      L2SCreateDupRsp::default_instance_,
      L2SCreateDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SCreateDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SCreateDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2SCreateDupRsp));
  S2LNotifyRoleEnterDup_descriptor_ = file->message_type(70);
  static const int S2LNotifyRoleEnterDup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2LNotifyRoleEnterDup, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2LNotifyRoleEnterDup, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2LNotifyRoleEnterDup, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2LNotifyRoleEnterDup, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2LNotifyRoleEnterDup, bornid_),
  };
  S2LNotifyRoleEnterDup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2LNotifyRoleEnterDup_descriptor_,
      S2LNotifyRoleEnterDup::default_instance_,
      S2LNotifyRoleEnterDup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2LNotifyRoleEnterDup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2LNotifyRoleEnterDup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2LNotifyRoleEnterDup));
  L2SNotifyDupFinishRsp_descriptor_ = file->message_type(71);
  static const int L2SNotifyDupFinishRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SNotifyDupFinishRsp, rsp_),
  };
  L2SNotifyDupFinishRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2SNotifyDupFinishRsp_descriptor_,
      L2SNotifyDupFinishRsp::default_instance_,
      L2SNotifyDupFinishRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SNotifyDupFinishRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SNotifyDupFinishRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2SNotifyDupFinishRsp));
  L2CGHostDupRankReq_descriptor_ = file->message_type(72);
  static const int L2CGHostDupRankReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CGHostDupRankReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CGHostDupRankReq, wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CGHostDupRankReq, time_),
  };
  L2CGHostDupRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CGHostDupRankReq_descriptor_,
      L2CGHostDupRankReq::default_instance_,
      L2CGHostDupRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CGHostDupRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CGHostDupRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CGHostDupRankReq));
  L2CUpdateGHostDupRankReq_descriptor_ = file->message_type(73);
  static const int L2CUpdateGHostDupRankReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CUpdateGHostDupRankReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CUpdateGHostDupRankReq, wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CUpdateGHostDupRankReq, time_),
  };
  L2CUpdateGHostDupRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CUpdateGHostDupRankReq_descriptor_,
      L2CUpdateGHostDupRankReq::default_instance_,
      L2CUpdateGHostDupRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CUpdateGHostDupRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CUpdateGHostDupRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CUpdateGHostDupRankReq));
  L2CSynPassYaotaReq_descriptor_ = file->message_type(74);
  static const int L2CSynPassYaotaReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynPassYaotaReq, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynPassYaotaReq, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynPassYaotaReq, time_),
  };
  L2CSynPassYaotaReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CSynPassYaotaReq_descriptor_,
      L2CSynPassYaotaReq::default_instance_,
      L2CSynPassYaotaReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynPassYaotaReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynPassYaotaReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CSynPassYaotaReq));
  NotifyDupTeamDisReq_descriptor_ = file->message_type(75);
  static const int NotifyDupTeamDisReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupTeamDisReq, teamid_),
  };
  NotifyDupTeamDisReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDupTeamDisReq_descriptor_,
      NotifyDupTeamDisReq::default_instance_,
      NotifyDupTeamDisReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupTeamDisReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDupTeamDisReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDupTeamDisReq));
  LCNotifyYaotaFirstPassReq_descriptor_ = file->message_type(76);
  static const int LCNotifyYaotaFirstPassReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCNotifyYaotaFirstPassReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCNotifyYaotaFirstPassReq, recved_first_pass_ids_),
  };
  LCNotifyYaotaFirstPassReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCNotifyYaotaFirstPassReq_descriptor_,
      LCNotifyYaotaFirstPassReq::default_instance_,
      LCNotifyYaotaFirstPassReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCNotifyYaotaFirstPassReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCNotifyYaotaFirstPassReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCNotifyYaotaFirstPassReq));
  CLYaotaRecvReq_descriptor_ = file->message_type(77);
  static const int CLYaotaRecvReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLYaotaRecvReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLYaotaRecvReq, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLYaotaRecvReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLYaotaRecvReq, first_pass_ids_),
  };
  CLYaotaRecvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLYaotaRecvReq_descriptor_,
      CLYaotaRecvReq::default_instance_,
      CLYaotaRecvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLYaotaRecvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLYaotaRecvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLYaotaRecvReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Dup_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupDropProto_descriptor_, &DupDropProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTowerRecordEntry_descriptor_, &DupTowerRecordEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTeamInviteState_descriptor_, &DupTeamInviteState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerDupData_descriptor_, &TowerDupData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassDupData_descriptor_, &PassDupData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassGhostData_descriptor_, &PassGhostData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassMoyuData_descriptor_, &PassMoyuData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YaoTaData_descriptor_, &YaoTaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComDupGroupData_descriptor_, &ComDupGroupData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterDupReq_descriptor_, &EnterDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterDupRsp_descriptor_, &EnterDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupResultReq_descriptor_, &DupResultReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupResultRsp_descriptor_, &DupResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupLeaveReq_descriptor_, &DupLeaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupLeaveRsp_descriptor_, &DupLeaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDupRsp_descriptor_, &NotifyDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDupRunRsp_descriptor_, &NotifyDupRunRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDupEndRsp_descriptor_, &NotifyDupEndRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDupBeginCdRsp_descriptor_, &NotifyDupBeginCdRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecvTowerDupReq_descriptor_, &RecvTowerDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecvTowerDupRsp_descriptor_, &RecvTowerDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyDupNumReq_descriptor_, &BuyDupNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyDupNumRsp_descriptor_, &BuyDupNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTowerRecordReq_descriptor_, &DupTowerRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTowerRecordRsp_descriptor_, &DupTowerRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTeamInviteReq_descriptor_, &DupTeamInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTeamInviteRsp_descriptor_, &DupTeamInviteRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDupTeamInviteStateRsp_descriptor_, &NotifyDupTeamInviteStateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTeamOptReq_descriptor_, &DupTeamOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTeamOptRsp_descriptor_, &DupTeamOptRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupSweepReq_descriptor_, &DupSweepReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupSweepRsp_descriptor_, &DupSweepRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GhostDupRankReq_descriptor_, &GhostDupRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GHostDupRankRsp_descriptor_, &GHostDupRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGHostDupRun_descriptor_, &NotifyGHostDupRun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGHostChgStep_descriptor_, &NotifyGHostChgStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGHostDupRes_descriptor_, &NotifyGHostDupRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GhostRecvPassReq_descriptor_, &GhostRecvPassReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GhostRecvPassRsp_descriptor_, &GhostRecvPassRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YaotaReq_descriptor_, &YaotaReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyYaotaFirstPass_descriptor_, &NotifyYaotaFirstPass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YaotaFirstPassInfoReq_descriptor_, &YaotaFirstPassInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YaotaFirstPassInfoRsp_descriptor_, &YaotaFirstPassInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YaotaRecvReq_descriptor_, &YaotaRecvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YaotaRecvRsp_descriptor_, &YaotaRecvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyYaotaDupRes_descriptor_, &NotifyYaotaDupRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerFlashReq_descriptor_, &TowerFlashReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerFlashRsp_descriptor_, &TowerFlashRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CEnterDupReq_descriptor_, &L2CEnterDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CCreateDupRsp_descriptor_, &L2CCreateDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CDupStateChgNotify_descriptor_, &L2CDupStateChgNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LPullRoleEnterDupNotify_descriptor_, &C2LPullRoleEnterDupNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CDupRoleActionNotify_descriptor_, &L2CDupRoleActionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2CEnterDupReq_descriptor_, &S2CEnterDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2SEnterDupRsp_descriptor_, &C2SEnterDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CTowerRecvRecordReq_descriptor_, &L2CTowerRecvRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2SEnterDupReq_descriptor_, &L2SEnterDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2SDupTeamInviteReq_descriptor_, &L2SDupTeamInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2SCreateDupResultRsp_descriptor_, &C2SCreateDupResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2CNotifyCharEnterDup_descriptor_, &S2CNotifyCharEnterDup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRebotEnterDup_descriptor_, &NotifyRebotEnterDup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2SDupTeamOptReq_descriptor_, &L2SDupTeamOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2CNofityRoleRebotEnterDup_descriptor_, &S2CNofityRoleRebotEnterDup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LRoleRobotEnterDupReq_descriptor_, &C2LRoleRobotEnterDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CDupResultRsp_descriptor_, &L2CDupResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LEnterRebotReq_descriptor_, &C2LEnterRebotReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2SNotifyDupFinishRsp_descriptor_, &C2SNotifyDupFinishRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2STeamEnterDupReq_descriptor_, &C2STeamEnterDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2LCreateDupReq_descriptor_, &S2LCreateDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2SCreateDupRsp_descriptor_, &L2SCreateDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2LNotifyRoleEnterDup_descriptor_, &S2LNotifyRoleEnterDup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2SNotifyDupFinishRsp_descriptor_, &L2SNotifyDupFinishRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CGHostDupRankReq_descriptor_, &L2CGHostDupRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CUpdateGHostDupRankReq_descriptor_, &L2CUpdateGHostDupRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CSynPassYaotaReq_descriptor_, &L2CSynPassYaotaReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDupTeamDisReq_descriptor_, &NotifyDupTeamDisReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCNotifyYaotaFirstPassReq_descriptor_, &LCNotifyYaotaFirstPassReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLYaotaRecvReq_descriptor_, &CLYaotaRecvReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Dup_2eproto() {
  delete DupDropProto::default_instance_;
  delete DupDropProto_reflection_;
  delete DupTowerRecordEntry::default_instance_;
  delete DupTowerRecordEntry_reflection_;
  delete DupTeamInviteState::default_instance_;
  delete DupTeamInviteState_reflection_;
  delete TowerDupData::default_instance_;
  delete TowerDupData_reflection_;
  delete PassDupData::default_instance_;
  delete PassDupData_reflection_;
  delete PassGhostData::default_instance_;
  delete PassGhostData_reflection_;
  delete PassMoyuData::default_instance_;
  delete PassMoyuData_reflection_;
  delete YaoTaData::default_instance_;
  delete YaoTaData_reflection_;
  delete ComDupGroupData::default_instance_;
  delete ComDupGroupData_reflection_;
  delete EnterDupReq::default_instance_;
  delete EnterDupReq_reflection_;
  delete EnterDupRsp::default_instance_;
  delete EnterDupRsp_reflection_;
  delete DupResultReq::default_instance_;
  delete DupResultReq_reflection_;
  delete DupResultRsp::default_instance_;
  delete DupResultRsp_reflection_;
  delete DupLeaveReq::default_instance_;
  delete DupLeaveReq_reflection_;
  delete DupLeaveRsp::default_instance_;
  delete DupLeaveRsp_reflection_;
  delete NotifyDupRsp::default_instance_;
  delete NotifyDupRsp_reflection_;
  delete NotifyDupRunRsp::default_instance_;
  delete NotifyDupRunRsp_reflection_;
  delete NotifyDupEndRsp::default_instance_;
  delete NotifyDupEndRsp_reflection_;
  delete NotifyDupBeginCdRsp::default_instance_;
  delete NotifyDupBeginCdRsp_reflection_;
  delete RecvTowerDupReq::default_instance_;
  delete RecvTowerDupReq_reflection_;
  delete RecvTowerDupRsp::default_instance_;
  delete RecvTowerDupRsp_reflection_;
  delete BuyDupNumReq::default_instance_;
  delete BuyDupNumReq_reflection_;
  delete BuyDupNumRsp::default_instance_;
  delete BuyDupNumRsp_reflection_;
  delete DupTowerRecordReq::default_instance_;
  delete DupTowerRecordReq_reflection_;
  delete DupTowerRecordRsp::default_instance_;
  delete DupTowerRecordRsp_reflection_;
  delete DupTeamInviteReq::default_instance_;
  delete DupTeamInviteReq_reflection_;
  delete DupTeamInviteRsp::default_instance_;
  delete DupTeamInviteRsp_reflection_;
  delete NotifyDupTeamInviteStateRsp::default_instance_;
  delete NotifyDupTeamInviteStateRsp_reflection_;
  delete DupTeamOptReq::default_instance_;
  delete DupTeamOptReq_reflection_;
  delete DupTeamOptRsp::default_instance_;
  delete DupTeamOptRsp_reflection_;
  delete DupSweepReq::default_instance_;
  delete DupSweepReq_reflection_;
  delete DupSweepRsp::default_instance_;
  delete DupSweepRsp_reflection_;
  delete GhostDupRankReq::default_instance_;
  delete GhostDupRankReq_reflection_;
  delete GHostDupRankRsp::default_instance_;
  delete GHostDupRankRsp_reflection_;
  delete NotifyGHostDupRun::default_instance_;
  delete NotifyGHostDupRun_reflection_;
  delete NotifyGHostChgStep::default_instance_;
  delete NotifyGHostChgStep_reflection_;
  delete NotifyGHostDupRes::default_instance_;
  delete NotifyGHostDupRes_reflection_;
  delete GhostRecvPassReq::default_instance_;
  delete GhostRecvPassReq_reflection_;
  delete GhostRecvPassRsp::default_instance_;
  delete GhostRecvPassRsp_reflection_;
  delete YaotaReq::default_instance_;
  delete YaotaReq_reflection_;
  delete NotifyYaotaFirstPass::default_instance_;
  delete NotifyYaotaFirstPass_reflection_;
  delete YaotaFirstPassInfoReq::default_instance_;
  delete YaotaFirstPassInfoReq_reflection_;
  delete YaotaFirstPassInfoRsp::default_instance_;
  delete YaotaFirstPassInfoRsp_reflection_;
  delete YaotaRecvReq::default_instance_;
  delete YaotaRecvReq_reflection_;
  delete YaotaRecvRsp::default_instance_;
  delete YaotaRecvRsp_reflection_;
  delete NotifyYaotaDupRes::default_instance_;
  delete NotifyYaotaDupRes_reflection_;
  delete TowerFlashReq::default_instance_;
  delete TowerFlashReq_reflection_;
  delete TowerFlashRsp::default_instance_;
  delete TowerFlashRsp_reflection_;
  delete L2CEnterDupReq::default_instance_;
  delete L2CEnterDupReq_reflection_;
  delete L2CCreateDupRsp::default_instance_;
  delete L2CCreateDupRsp_reflection_;
  delete L2CDupStateChgNotify::default_instance_;
  delete L2CDupStateChgNotify_reflection_;
  delete C2LPullRoleEnterDupNotify::default_instance_;
  delete C2LPullRoleEnterDupNotify_reflection_;
  delete L2CDupRoleActionNotify::default_instance_;
  delete L2CDupRoleActionNotify_reflection_;
  delete S2CEnterDupReq::default_instance_;
  delete S2CEnterDupReq_reflection_;
  delete C2SEnterDupRsp::default_instance_;
  delete C2SEnterDupRsp_reflection_;
  delete L2CTowerRecvRecordReq::default_instance_;
  delete L2CTowerRecvRecordReq_reflection_;
  delete L2SEnterDupReq::default_instance_;
  delete L2SEnterDupReq_reflection_;
  delete L2SDupTeamInviteReq::default_instance_;
  delete L2SDupTeamInviteReq_reflection_;
  delete C2SCreateDupResultRsp::default_instance_;
  delete C2SCreateDupResultRsp_reflection_;
  delete S2CNotifyCharEnterDup::default_instance_;
  delete S2CNotifyCharEnterDup_reflection_;
  delete NotifyRebotEnterDup::default_instance_;
  delete NotifyRebotEnterDup_reflection_;
  delete L2SDupTeamOptReq::default_instance_;
  delete L2SDupTeamOptReq_reflection_;
  delete S2CNofityRoleRebotEnterDup::default_instance_;
  delete S2CNofityRoleRebotEnterDup_reflection_;
  delete C2LRoleRobotEnterDupReq::default_instance_;
  delete C2LRoleRobotEnterDupReq_reflection_;
  delete L2CDupResultRsp::default_instance_;
  delete L2CDupResultRsp_reflection_;
  delete C2LEnterRebotReq::default_instance_;
  delete C2LEnterRebotReq_reflection_;
  delete C2SNotifyDupFinishRsp::default_instance_;
  delete C2SNotifyDupFinishRsp_reflection_;
  delete C2STeamEnterDupReq::default_instance_;
  delete C2STeamEnterDupReq_reflection_;
  delete S2LCreateDupReq::default_instance_;
  delete S2LCreateDupReq_reflection_;
  delete L2SCreateDupRsp::default_instance_;
  delete L2SCreateDupRsp_reflection_;
  delete S2LNotifyRoleEnterDup::default_instance_;
  delete S2LNotifyRoleEnterDup_reflection_;
  delete L2SNotifyDupFinishRsp::default_instance_;
  delete L2SNotifyDupFinishRsp_reflection_;
  delete L2CGHostDupRankReq::default_instance_;
  delete L2CGHostDupRankReq_reflection_;
  delete L2CUpdateGHostDupRankReq::default_instance_;
  delete L2CUpdateGHostDupRankReq_reflection_;
  delete L2CSynPassYaotaReq::default_instance_;
  delete L2CSynPassYaotaReq_reflection_;
  delete NotifyDupTeamDisReq::default_instance_;
  delete NotifyDupTeamDisReq_reflection_;
  delete LCNotifyYaotaFirstPassReq::default_instance_;
  delete LCNotifyYaotaFirstPassReq_reflection_;
  delete CLYaotaRecvReq::default_instance_;
  delete CLYaotaRecvReq_reflection_;
}

void protobuf_AddDesc_Dup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::proto_ff::protobuf_AddDesc_Scene_2eproto();
  ::proto_ff::protobuf_AddDesc_DBProxy_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tDup.proto\022\010proto_ff\032\tCom.proto\032\017ComDef"
    "ine.proto\032\013Scene.proto\032\rDBProxy.proto\"\231\001"
    "\n\014DupDropProto\022*\n\tpick_item\030\001 \003(\0132\027.prot"
    "o_ff.ItemProtoInfo\022\021\n\tpick_gold\030\002 \001(\003\022\020\n"
    "\010pick_exp\030\003 \001(\003\022\020\n\010kill_num\030\004 \001(\005\022&\n\005sta"
    "r3\030\005 \003(\0132\027.proto_ff.ItemProtoInfo\"1\n\023Dup"
    "TowerRecordEntry\022\014\n\004name\030\001 \001(\t\022\014\n\004time\030\002"
    " \001(\004\"0\n\022DupTeamInviteState\022\013\n\003cid\030\001 \001(\004\022"
    "\r\n\005state\030\002 \001(\005\"\033\n\014TowerDupData\022\013\n\003ids\030\001 "
    "\003(\003\"\'\n\013PassDupData\022\n\n\002id\030\001 \001(\003\022\014\n\004star\030\002"
    " \001(\005\"=\n\rPassGhostData\022\014\n\004wave\030\001 \001(\005\022\014\n\004t"
    "ime\030\002 \001(\005\022\020\n\010recv_ids\030\003 \003(\005\"v\n\014PassMoyuD"
    "ata\022\022\n\nrecv_layer\030\001 \003(\005\022\020\n\010day_harm\030\002 \001("
    "\004\022\021\n\tweek_harm\030\003 \001(\004\022\025\n\rlast_day_harm\030\004 "
    "\001(\004\022\026\n\016last_week_harm\030\005 \001(\004\"5\n\tYaoTaData"
    "\022\020\n\010pass_ids\030\001 \003(\005\022\026\n\016first_pass_ids\030\002 \003"
    "(\005\"\265\002\n\017ComDupGroupData\022\r\n\005group\030\001 \001(\005\022\022\n"
    "\npass_dupId\030\002 \001(\004\022\021\n\tenter_num\030\003 \001(\005\022\017\n\007"
    "max_num\030\004 \001(\005\022\017\n\007buy_num\030\005 \001(\005\022\014\n\004star\030\006"
    " \001(\005\022%\n\005tower\030\007 \001(\0132\026.proto_ff.TowerDupD"
    "ata\022#\n\004pass\030\010 \003(\0132\025.proto_ff.PassDupData"
    "\022&\n\005ghost\030\t \001(\0132\027.proto_ff.PassGhostData"
    "\022$\n\004moyu\030\n \001(\0132\026.proto_ff.PassMoyuData\022\""
    "\n\005yaota\030\013 \001(\0132\023.proto_ff.YaoTaData\".\n\013En"
    "terDupReq\022\r\n\005dupId\030\001 \001(\004\022\020\n\010mergeNum\030\002 \001"
    "(\005\":\n\013EnterDupRsp\022\013\n\003ret\030\001 \001(\005\022\r\n\005dupId\030"
    "\002 \001(\004\022\017\n\007dupTime\030\003 \001(\005\"\016\n\014DupResultReq\"s"
    "\n\014DupResultRsp\022\016\n\006result\030\001 \001(\005\022\r\n\005dupId\030"
    "\002 \001(\004\022\014\n\004star\030\003 \001(\005\022\020\n\010cost_sec\030\004 \001(\005\022$\n"
    "\004info\030\005 \001(\0132\026.proto_ff.DupDropProto\"\r\n\013D"
    "upLeaveReq\",\n\013DupLeaveRsp\022\016\n\006result\030\001 \001("
    "\005\022\r\n\005dupId\030\002 \001(\003\"F\n\014NotifyDupRsp\022\014\n\004type"
    "\030\001 \001(\005\022(\n\005infos\030\002 \003(\0132\031.proto_ff.ComDupG"
    "roupData\"\345\001\n\017NotifyDupRunRsp\022\r\n\005dupId\030\001 "
    "\001(\004\022\020\n\010kill_num\030\002 \001(\005\022\017\n\007all_num\030\003 \001(\005\022\020"
    "\n\010cur_wave\030\004 \001(\005\022\020\n\010max_wave\030\005 \001(\005\022\016\n\006cu"
    "r_hp\030\006 \001(\003\022\016\n\006max_hp\030\007 \001(\003\022\"\n\005items\030\010 \003("
    "\0132\023.proto_ff.ComPair64\022\025\n\rkill_boss_num\030"
    "\t \001(\005\022\020\n\010boss_num\030\n \001(\005\022\017\n\007add_exp\030\013 \001(\003"
    "\" \n\017NotifyDupEndRsp\022\r\n\005dupId\030\001 \001(\004\"F\n\023No"
    "tifyDupBeginCdRsp\022\017\n\007sceneId\030\001 \001(\004\022\r\n\005du"
    "pId\030\002 \001(\004\022\017\n\007timeEnd\030\003 \001(\004\"\035\n\017RecvTowerD"
    "upReq\022\n\n\002id\030\001 \001(\004\"-\n\017RecvTowerDupRsp\022\016\n\006"
    "result\030\001 \001(\005\022\n\n\002id\030\002 \001(\004\"*\n\014BuyDupNumReq"
    "\022\r\n\005group\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\":\n\014BuyDupNu"
    "mRsp\022\016\n\006result\030\001 \001(\005\022\r\n\005group\030\002 \001(\005\022\013\n\003n"
    "um\030\003 \001(\005\"\037\n\021DupTowerRecordReq\022\n\n\002id\030\001 \001("
    "\004\"N\n\021DupTowerRecordRsp\022\n\n\002id\030\001 \001(\004\022-\n\006en"
    "trys\030\002 \003(\0132\035.proto_ff.DupTowerRecordEntr"
    "y\"3\n\020DupTeamInviteReq\022\r\n\005dupid\030\001 \002(\004\022\020\n\010"
    "mergeNum\030\002 \001(\r\".\n\020DupTeamInviteRsp\022\013\n\003re"
    "t\030\001 \001(\005\022\r\n\005dupid\030\002 \002(\004\"t\n\033NotifyDupTeamI"
    "nviteStateRsp\022\013\n\003ret\030\001 \001(\005\022\014\n\004type\030\002 \001(\005"
    "\022\r\n\005dupid\030\003 \001(\003\022+\n\005infos\030\004 \003(\0132\034.proto_f"
    "f.DupTeamInviteState\".\n\rDupTeamOptReq\022\013\n"
    "\003opt\030\001 \001(\005\022\020\n\010mergeNum\030\002 \001(\r\")\n\rDupTeamO"
    "ptRsp\022\013\n\003ret\030\001 \001(\005\022\013\n\003opt\030\002 \001(\005\"<\n\013DupSw"
    "eepReq\022\r\n\005dupid\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\022\021\n\tsh"
    "ow_type\030\003 \001(\005\"o\n\013DupSweepRsp\022\013\n\003ret\030\001 \001("
    "\005\022\r\n\005dupid\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022$\n\004info\030\004 "
    "\001(\0132\026.proto_ff.DupDropProto\022\021\n\tshow_type"
    "\030\005 \001(\005\"\021\n\017GhostDupRankReq\"o\n\017GHostDupRan"
    "kRsp\022)\n\005ranks\030\001 \003(\0132\032.proto_ff.GHostDupR"
    "ankInfo\022\017\n\007my_wave\030\002 \001(\005\022\017\n\007my_time\030\003 \001("
    "\005\022\017\n\007my_rank\030\004 \001(\005\"@\n\021NotifyGHostDupRun\022"
    "\r\n\005fight\030\001 \001(\004\022\017\n\007curwave\030\002 \001(\005\022\013\n\003num\030\003"
    " \001(\005\"\"\n\022NotifyGHostChgStep\022\014\n\004time\030\001 \001(\005"
    "\"[\n\021NotifyGHostDupRes\022\017\n\007curwave\030\001 \001(\005\022\014"
    "\n\004time\030\002 \001(\005\022\'\n\006reward\030\003 \003(\0132\027.proto_ff."
    "ItemProtoInfo\"\036\n\020GhostRecvPassReq\022\n\n\002id\030"
    "\001 \001(\005\"+\n\020GhostRecvPassRsp\022\013\n\003ret\030\001 \001(\005\022\n"
    "\n\002id\030\002 \001(\005\"\n\n\010YaotaReq\"O\n\024NotifyYaotaFir"
    "stPass\022\037\n\027can_recv_first_pass_ids\030\001 \003(\005\022"
    "\026\n\016first_pass_ids\030\002 \003(\005\"&\n\025YaotaFirstPas"
    "sInfoReq\022\r\n\005dupid\030\001 \001(\005\"`\n\025YaotaFirstPas"
    "sInfoRsp\022\r\n\005dupid\030\001 \001(\005\022*\n\004info\030\002 \003(\0132\034."
    "proto_ff.RolePlayerMiniInfo\022\014\n\004time\030\003 \001("
    "\004\"+\n\014YaotaRecvReq\022\014\n\004type\030\001 \001(\005\022\r\n\005dupId"
    "\030\002 \001(\005\"8\n\014YaotaRecvRsp\022\013\n\003ret\030\001 \001(\005\022\014\n\004t"
    "ype\030\002 \001(\005\022\r\n\005dupId\030\003 \001(\005\"X\n\021NotifyYaotaD"
    "upRes\022\014\n\004flag\030\001 \001(\005\022\'\n\006reward\030\002 \003(\0132\027.pr"
    "oto_ff.ItemProtoInfo\022\014\n\004time\030\003 \001(\005\"\017\n\rTo"
    "werFlashReq\"t\n\rTowerFlashRsp\022\016\n\006result\030\001"
    " \001(\005\022\r\n\005dupId\030\002 \001(\004\022\014\n\004star\030\003 \001(\005\022\020\n\010cos"
    "t_sec\030\004 \001(\005\022$\n\004info\030\005 \001(\0132\026.proto_ff.Dup"
    "DropProto\"A\n\016L2CEnterDupReq\022/\n\006params\030\001 "
    "\001(\0132\037.proto_ff.CreateSceneParamProto\">\n\017"
    "L2CCreateDupRsp\022\013\n\003ret\030\001 \001(\005\022\017\n\007sceneId\030"
    "\002 \001(\004\022\r\n\005dupId\030\003 \001(\004\"S\n\024L2CDupStateChgNo"
    "tify\022\017\n\007sceneId\030\001 \001(\004\022\r\n\005dupId\030\002 \001(\004\022\r\n\005"
    "state\030\003 \001(\005\022\014\n\004time\030\004 \001(\004\"\207\001\n\031C2LPullRol"
    "eEnterDupNotify\022\017\n\007char_id\030\001 \002(\004\022\024\n\014dupl"
    "icate_id\030\002 \002(\004\022\020\n\010scene_id\030\003 \002(\004\022\017\n\007born"
    "_id\030\004 \001(\004\022\016\n\006zoneid\030\005 \001(\r\022\020\n\010tran_tag\030\006 "
    "\001(\005\"U\n\026L2CDupRoleActionNotify\022\017\n\007sceneId"
    "\030\001 \001(\003\022\013\n\003cid\030\002 \001(\003\022\020\n\010actionId\030\003 \001(\005\022\013\n"
    "\003ret\030\004 \001(\005\"A\n\016S2CEnterDupReq\022/\n\006params\030\001"
    " \001(\0132\037.proto_ff.CreateSceneParamProto\"N\n"
    "\016C2SEnterDupRsp\022\013\n\003ret\030\001 \001(\005\022/\n\006params\030\002"
    " \001(\0132\037.proto_ff.CreateSceneParamProto\"L\n"
    "\025L2CTowerRecvRecordReq\022\n\n\002id\030\001 \001(\003\022\013\n\003ci"
    "d\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\014\n\004time\030\004 \001(\003\"A\n\016L"
    "2SEnterDupReq\022/\n\006params\030\001 \001(\0132\037.proto_ff"
    ".CreateSceneParamProto\"r\n\023L2SDupTeamInvi"
    "teReq\022\r\n\005dupid\030\001 \002(\004\022\016\n\006teamid\030\002 \001(\003\022\013\n\003"
    "cid\030\003 \001(\003\022/\n\006params\030\004 \001(\0132\037.proto_ff.Cre"
    "ateSceneParamProto\"\270\001\n\025C2SCreateDupResul"
    "tRsp\022\013\n\003ret\030\001 \001(\005\022\017\n\007sceneid\030\002 \001(\004\022\r\n\005ma"
    "pid\030\003 \001(\004\022\017\n\007logicid\030\004 \001(\r\022\016\n\006zoneid\030\005 \001"
    "(\r\022\017\n\007keytype\030\006 \001(\005\022\016\n\006keyval\030\007 \001(\004\022\016\n\006t"
    "eamid\030\010 \001(\005\022\r\n\005dupid\030\t \001(\005\022\021\n\tstr_param\030"
    "\n \001(\014\"f\n\025S2CNotifyCharEnterDup\022\013\n\003cid\030\001 "
    "\001(\004\022\r\n\005dupid\030\002 \001(\004\022\017\n\007sceneid\030\003 \001(\004\022\016\n\006b"
    "ornid\030\004 \001(\004\022\020\n\010tran_tag\030\005 \001(\005\"b\n\023NotifyR"
    "ebotEnterDup\022\013\n\003cid\030\001 \001(\004\022\r\n\005dupid\030\002 \001(\004"
    "\022\017\n\007sceneid\030\003 \001(\004\022\016\n\006bornid\030\004 \001(\005\022\016\n\006tea"
    "mid\030\005 \001(\005\"N\n\020L2SDupTeamOptReq\022\013\n\003opt\030\001 \001"
    "(\005\022\020\n\010mergeNum\030\002 \001(\r\022\016\n\006teamId\030\003 \001(\005\022\013\n\003"
    "cid\030\004 \001(\004\"\212\001\n\032S2CNofityRoleRebotEnterDup"
    "\022\013\n\003cid\030\001 \001(\004\022\r\n\005dupid\030\002 \001(\004\022\017\n\007sceneid\030"
    "\003 \001(\004\022\016\n\006bornid\030\004 \001(\005\022\016\n\006teamid\030\005 \001(\005\022\017\n"
    "\007logicid\030\006 \001(\005\022\016\n\006campid\030\007 \001(\005\"\201\001\n\027C2LRo"
    "leRobotEnterDupReq\022\013\n\003cid\030\001 \001(\004\022\r\n\005dupid"
    "\030\002 \001(\004\022\017\n\007sceneid\030\003 \001(\004\022\016\n\006bornid\030\004 \001(\005\022"
    ")\n\007mirrors\030\005 \003(\0132\030.proto_ff.RoleMirrorDa"
    "ta\"g\n\017L2CDupResultRsp\022\017\n\007sceneId\030\001 \001(\004\022\r"
    "\n\005dupId\030\002 \001(\004\022\016\n\006result\030\003 \001(\005\022\021\n\tint_par"
    "am\030\004 \001(\003\022\021\n\tstr_param\030\005 \001(\014\"O\n\020C2LEnterR"
    "ebotReq\022\013\n\003cid\030\001 \001(\004\022\r\n\005dupid\030\002 \001(\004\022\017\n\007s"
    "ceneid\030\003 \001(\004\022\016\n\006bornid\030\004 \001(\005\"\250\001\n\025C2SNoti"
    "fyDupFinishRsp\022\016\n\006result\030\001 \001(\005\022\017\n\007scenei"
    "d\030\002 \001(\004\022\r\n\005mapid\030\003 \001(\004\022\017\n\007logicid\030\004 \001(\r\022"
    "\016\n\006zoneid\030\005 \001(\r\022\017\n\007keytype\030\006 \001(\005\022\016\n\006keyv"
    "al\030\007 \001(\004\022\016\n\006teamid\030\010 \001(\005\022\r\n\005dupid\030\t \001(\003\""
    "c\n\022C2STeamEnterDupReq\022\r\n\005dupId\030\001 \001(\005\022/\n\006"
    "params\030\003 \001(\0132\037.proto_ff.CreateSceneParam"
    "Proto\022\r\n\005isdyn\030\004 \001(\005\"U\n\017S2LCreateDupReq\022"
    "/\n\006params\030\001 \001(\0132\037.proto_ff.CreateScenePa"
    "ramProto\022\021\n\tex_params\030\002 \001(\014\"\?\n\017L2SCreate"
    "DupRsp\022,\n\003rsp\030\001 \001(\0132\037.proto_ff.C2SCreate"
    "DupResultRsp\"a\n\025S2LNotifyRoleEnterDup\022\013\n"
    "\003cid\030\001 \001(\003\022\013\n\003zid\030\002 \001(\005\022\017\n\007sceneid\030\003 \001(\004"
    "\022\r\n\005mapid\030\004 \001(\004\022\016\n\006bornid\030\005 \001(\005\"E\n\025L2SNo"
    "tifyDupFinishRsp\022,\n\003rsp\030\001 \001(\0132\037.proto_ff"
    ".C2SNotifyDupFinishRsp\"=\n\022L2CGHostDupRan"
    "kReq\022\013\n\003cid\030\001 \001(\004\022\014\n\004wave\030\002 \001(\005\022\014\n\004time\030"
    "\003 \001(\005\"C\n\030L2CUpdateGHostDupRankReq\022\013\n\003cid"
    "\030\001 \001(\004\022\014\n\004wave\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\"]\n\022L2"
    "CSynPassYaotaReq\022\r\n\005dupid\030\001 \001(\005\022*\n\004info\030"
    "\002 \003(\0132\034.proto_ff.RolePlayerMiniInfo\022\014\n\004t"
    "ime\030\003 \001(\004\"%\n\023NotifyDupTeamDisReq\022\016\n\006team"
    "id\030\001 \001(\005\"G\n\031LCNotifyYaotaFirstPassReq\022\013\n"
    "\003cid\030\001 \001(\004\022\035\n\025recved_first_pass_ids\030\002 \003("
    "\005\"R\n\016CLYaotaRecvReq\022\013\n\003cid\030\001 \001(\004\022\r\n\005dupi"
    "d\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022\026\n\016first_pass_ids\030"
    "\004 \003(\005", 6205);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Dup.proto", &protobuf_RegisterTypes);
  DupDropProto::default_instance_ = new DupDropProto();
  DupTowerRecordEntry::default_instance_ = new DupTowerRecordEntry();
  DupTeamInviteState::default_instance_ = new DupTeamInviteState();
  TowerDupData::default_instance_ = new TowerDupData();
  PassDupData::default_instance_ = new PassDupData();
  PassGhostData::default_instance_ = new PassGhostData();
  PassMoyuData::default_instance_ = new PassMoyuData();
  YaoTaData::default_instance_ = new YaoTaData();
  ComDupGroupData::default_instance_ = new ComDupGroupData();
  EnterDupReq::default_instance_ = new EnterDupReq();
  EnterDupRsp::default_instance_ = new EnterDupRsp();
  DupResultReq::default_instance_ = new DupResultReq();
  DupResultRsp::default_instance_ = new DupResultRsp();
  DupLeaveReq::default_instance_ = new DupLeaveReq();
  DupLeaveRsp::default_instance_ = new DupLeaveRsp();
  NotifyDupRsp::default_instance_ = new NotifyDupRsp();
  NotifyDupRunRsp::default_instance_ = new NotifyDupRunRsp();
  NotifyDupEndRsp::default_instance_ = new NotifyDupEndRsp();
  NotifyDupBeginCdRsp::default_instance_ = new NotifyDupBeginCdRsp();
  RecvTowerDupReq::default_instance_ = new RecvTowerDupReq();
  RecvTowerDupRsp::default_instance_ = new RecvTowerDupRsp();
  BuyDupNumReq::default_instance_ = new BuyDupNumReq();
  BuyDupNumRsp::default_instance_ = new BuyDupNumRsp();
  DupTowerRecordReq::default_instance_ = new DupTowerRecordReq();
  DupTowerRecordRsp::default_instance_ = new DupTowerRecordRsp();
  DupTeamInviteReq::default_instance_ = new DupTeamInviteReq();
  DupTeamInviteRsp::default_instance_ = new DupTeamInviteRsp();
  NotifyDupTeamInviteStateRsp::default_instance_ = new NotifyDupTeamInviteStateRsp();
  DupTeamOptReq::default_instance_ = new DupTeamOptReq();
  DupTeamOptRsp::default_instance_ = new DupTeamOptRsp();
  DupSweepReq::default_instance_ = new DupSweepReq();
  DupSweepRsp::default_instance_ = new DupSweepRsp();
  GhostDupRankReq::default_instance_ = new GhostDupRankReq();
  GHostDupRankRsp::default_instance_ = new GHostDupRankRsp();
  NotifyGHostDupRun::default_instance_ = new NotifyGHostDupRun();
  NotifyGHostChgStep::default_instance_ = new NotifyGHostChgStep();
  NotifyGHostDupRes::default_instance_ = new NotifyGHostDupRes();
  GhostRecvPassReq::default_instance_ = new GhostRecvPassReq();
  GhostRecvPassRsp::default_instance_ = new GhostRecvPassRsp();
  YaotaReq::default_instance_ = new YaotaReq();
  NotifyYaotaFirstPass::default_instance_ = new NotifyYaotaFirstPass();
  YaotaFirstPassInfoReq::default_instance_ = new YaotaFirstPassInfoReq();
  YaotaFirstPassInfoRsp::default_instance_ = new YaotaFirstPassInfoRsp();
  YaotaRecvReq::default_instance_ = new YaotaRecvReq();
  YaotaRecvRsp::default_instance_ = new YaotaRecvRsp();
  NotifyYaotaDupRes::default_instance_ = new NotifyYaotaDupRes();
  TowerFlashReq::default_instance_ = new TowerFlashReq();
  TowerFlashRsp::default_instance_ = new TowerFlashRsp();
  L2CEnterDupReq::default_instance_ = new L2CEnterDupReq();
  L2CCreateDupRsp::default_instance_ = new L2CCreateDupRsp();
  L2CDupStateChgNotify::default_instance_ = new L2CDupStateChgNotify();
  C2LPullRoleEnterDupNotify::default_instance_ = new C2LPullRoleEnterDupNotify();
  L2CDupRoleActionNotify::default_instance_ = new L2CDupRoleActionNotify();
  S2CEnterDupReq::default_instance_ = new S2CEnterDupReq();
  C2SEnterDupRsp::default_instance_ = new C2SEnterDupRsp();
  L2CTowerRecvRecordReq::default_instance_ = new L2CTowerRecvRecordReq();
  L2SEnterDupReq::default_instance_ = new L2SEnterDupReq();
  L2SDupTeamInviteReq::default_instance_ = new L2SDupTeamInviteReq();
  C2SCreateDupResultRsp::default_instance_ = new C2SCreateDupResultRsp();
  S2CNotifyCharEnterDup::default_instance_ = new S2CNotifyCharEnterDup();
  NotifyRebotEnterDup::default_instance_ = new NotifyRebotEnterDup();
  L2SDupTeamOptReq::default_instance_ = new L2SDupTeamOptReq();
  S2CNofityRoleRebotEnterDup::default_instance_ = new S2CNofityRoleRebotEnterDup();
  C2LRoleRobotEnterDupReq::default_instance_ = new C2LRoleRobotEnterDupReq();
  L2CDupResultRsp::default_instance_ = new L2CDupResultRsp();
  C2LEnterRebotReq::default_instance_ = new C2LEnterRebotReq();
  C2SNotifyDupFinishRsp::default_instance_ = new C2SNotifyDupFinishRsp();
  C2STeamEnterDupReq::default_instance_ = new C2STeamEnterDupReq();
  S2LCreateDupReq::default_instance_ = new S2LCreateDupReq();
  L2SCreateDupRsp::default_instance_ = new L2SCreateDupRsp();
  S2LNotifyRoleEnterDup::default_instance_ = new S2LNotifyRoleEnterDup();
  L2SNotifyDupFinishRsp::default_instance_ = new L2SNotifyDupFinishRsp();
  L2CGHostDupRankReq::default_instance_ = new L2CGHostDupRankReq();
  L2CUpdateGHostDupRankReq::default_instance_ = new L2CUpdateGHostDupRankReq();
  L2CSynPassYaotaReq::default_instance_ = new L2CSynPassYaotaReq();
  NotifyDupTeamDisReq::default_instance_ = new NotifyDupTeamDisReq();
  LCNotifyYaotaFirstPassReq::default_instance_ = new LCNotifyYaotaFirstPassReq();
  CLYaotaRecvReq::default_instance_ = new CLYaotaRecvReq();
  DupDropProto::default_instance_->InitAsDefaultInstance();
  DupTowerRecordEntry::default_instance_->InitAsDefaultInstance();
  DupTeamInviteState::default_instance_->InitAsDefaultInstance();
  TowerDupData::default_instance_->InitAsDefaultInstance();
  PassDupData::default_instance_->InitAsDefaultInstance();
  PassGhostData::default_instance_->InitAsDefaultInstance();
  PassMoyuData::default_instance_->InitAsDefaultInstance();
  YaoTaData::default_instance_->InitAsDefaultInstance();
  ComDupGroupData::default_instance_->InitAsDefaultInstance();
  EnterDupReq::default_instance_->InitAsDefaultInstance();
  EnterDupRsp::default_instance_->InitAsDefaultInstance();
  DupResultReq::default_instance_->InitAsDefaultInstance();
  DupResultRsp::default_instance_->InitAsDefaultInstance();
  DupLeaveReq::default_instance_->InitAsDefaultInstance();
  DupLeaveRsp::default_instance_->InitAsDefaultInstance();
  NotifyDupRsp::default_instance_->InitAsDefaultInstance();
  NotifyDupRunRsp::default_instance_->InitAsDefaultInstance();
  NotifyDupEndRsp::default_instance_->InitAsDefaultInstance();
  NotifyDupBeginCdRsp::default_instance_->InitAsDefaultInstance();
  RecvTowerDupReq::default_instance_->InitAsDefaultInstance();
  RecvTowerDupRsp::default_instance_->InitAsDefaultInstance();
  BuyDupNumReq::default_instance_->InitAsDefaultInstance();
  BuyDupNumRsp::default_instance_->InitAsDefaultInstance();
  DupTowerRecordReq::default_instance_->InitAsDefaultInstance();
  DupTowerRecordRsp::default_instance_->InitAsDefaultInstance();
  DupTeamInviteReq::default_instance_->InitAsDefaultInstance();
  DupTeamInviteRsp::default_instance_->InitAsDefaultInstance();
  NotifyDupTeamInviteStateRsp::default_instance_->InitAsDefaultInstance();
  DupTeamOptReq::default_instance_->InitAsDefaultInstance();
  DupTeamOptRsp::default_instance_->InitAsDefaultInstance();
  DupSweepReq::default_instance_->InitAsDefaultInstance();
  DupSweepRsp::default_instance_->InitAsDefaultInstance();
  GhostDupRankReq::default_instance_->InitAsDefaultInstance();
  GHostDupRankRsp::default_instance_->InitAsDefaultInstance();
  NotifyGHostDupRun::default_instance_->InitAsDefaultInstance();
  NotifyGHostChgStep::default_instance_->InitAsDefaultInstance();
  NotifyGHostDupRes::default_instance_->InitAsDefaultInstance();
  GhostRecvPassReq::default_instance_->InitAsDefaultInstance();
  GhostRecvPassRsp::default_instance_->InitAsDefaultInstance();
  YaotaReq::default_instance_->InitAsDefaultInstance();
  NotifyYaotaFirstPass::default_instance_->InitAsDefaultInstance();
  YaotaFirstPassInfoReq::default_instance_->InitAsDefaultInstance();
  YaotaFirstPassInfoRsp::default_instance_->InitAsDefaultInstance();
  YaotaRecvReq::default_instance_->InitAsDefaultInstance();
  YaotaRecvRsp::default_instance_->InitAsDefaultInstance();
  NotifyYaotaDupRes::default_instance_->InitAsDefaultInstance();
  TowerFlashReq::default_instance_->InitAsDefaultInstance();
  TowerFlashRsp::default_instance_->InitAsDefaultInstance();
  L2CEnterDupReq::default_instance_->InitAsDefaultInstance();
  L2CCreateDupRsp::default_instance_->InitAsDefaultInstance();
  L2CDupStateChgNotify::default_instance_->InitAsDefaultInstance();
  C2LPullRoleEnterDupNotify::default_instance_->InitAsDefaultInstance();
  L2CDupRoleActionNotify::default_instance_->InitAsDefaultInstance();
  S2CEnterDupReq::default_instance_->InitAsDefaultInstance();
  C2SEnterDupRsp::default_instance_->InitAsDefaultInstance();
  L2CTowerRecvRecordReq::default_instance_->InitAsDefaultInstance();
  L2SEnterDupReq::default_instance_->InitAsDefaultInstance();
  L2SDupTeamInviteReq::default_instance_->InitAsDefaultInstance();
  C2SCreateDupResultRsp::default_instance_->InitAsDefaultInstance();
  S2CNotifyCharEnterDup::default_instance_->InitAsDefaultInstance();
  NotifyRebotEnterDup::default_instance_->InitAsDefaultInstance();
  L2SDupTeamOptReq::default_instance_->InitAsDefaultInstance();
  S2CNofityRoleRebotEnterDup::default_instance_->InitAsDefaultInstance();
  C2LRoleRobotEnterDupReq::default_instance_->InitAsDefaultInstance();
  L2CDupResultRsp::default_instance_->InitAsDefaultInstance();
  C2LEnterRebotReq::default_instance_->InitAsDefaultInstance();
  C2SNotifyDupFinishRsp::default_instance_->InitAsDefaultInstance();
  C2STeamEnterDupReq::default_instance_->InitAsDefaultInstance();
  S2LCreateDupReq::default_instance_->InitAsDefaultInstance();
  L2SCreateDupRsp::default_instance_->InitAsDefaultInstance();
  S2LNotifyRoleEnterDup::default_instance_->InitAsDefaultInstance();
  L2SNotifyDupFinishRsp::default_instance_->InitAsDefaultInstance();
  L2CGHostDupRankReq::default_instance_->InitAsDefaultInstance();
  L2CUpdateGHostDupRankReq::default_instance_->InitAsDefaultInstance();
  L2CSynPassYaotaReq::default_instance_->InitAsDefaultInstance();
  NotifyDupTeamDisReq::default_instance_->InitAsDefaultInstance();
  LCNotifyYaotaFirstPassReq::default_instance_->InitAsDefaultInstance();
  CLYaotaRecvReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Dup_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Dup_2eproto {
  StaticDescriptorInitializer_Dup_2eproto() {
    protobuf_AddDesc_Dup_2eproto();
  }
} static_descriptor_initializer_Dup_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DupDropProto::kPickItemFieldNumber;
const int DupDropProto::kPickGoldFieldNumber;
const int DupDropProto::kPickExpFieldNumber;
const int DupDropProto::kKillNumFieldNumber;
const int DupDropProto::kStar3FieldNumber;
#endif  // !_MSC_VER

DupDropProto::DupDropProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupDropProto::InitAsDefaultInstance() {
}

DupDropProto::DupDropProto(const DupDropProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupDropProto::SharedCtor() {
  _cached_size_ = 0;
  pick_gold_ = GOOGLE_LONGLONG(0);
  pick_exp_ = GOOGLE_LONGLONG(0);
  kill_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupDropProto::~DupDropProto() {
  SharedDtor();
}

void DupDropProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupDropProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupDropProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupDropProto_descriptor_;
}

const DupDropProto& DupDropProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupDropProto* DupDropProto::default_instance_ = NULL;

DupDropProto* DupDropProto::New() const {
  return new DupDropProto;
}

void DupDropProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    pick_gold_ = GOOGLE_LONGLONG(0);
    pick_exp_ = GOOGLE_LONGLONG(0);
    kill_num_ = 0;
  }
  pick_item_.Clear();
  star3_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupDropProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ItemProtoInfo pick_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pick_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pick_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pick_item;
        if (input->ExpectTag(16)) goto parse_pick_gold;
        break;
      }

      // optional int64 pick_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pick_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pick_gold_)));
          set_has_pick_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pick_exp;
        break;
      }

      // optional int64 pick_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pick_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pick_exp_)));
          set_has_pick_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kill_num;
        break;
      }

      // optional int32 kill_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_num_)));
          set_has_kill_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_star3;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo star3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_star3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_star3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_star3;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupDropProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ItemProtoInfo pick_item = 1;
  for (int i = 0; i < this->pick_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pick_item(i), output);
  }

  // optional int64 pick_gold = 2;
  if (has_pick_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pick_gold(), output);
  }

  // optional int64 pick_exp = 3;
  if (has_pick_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pick_exp(), output);
  }

  // optional int32 kill_num = 4;
  if (has_kill_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kill_num(), output);
  }

  // repeated .proto_ff.ItemProtoInfo star3 = 5;
  for (int i = 0; i < this->star3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->star3(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupDropProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ItemProtoInfo pick_item = 1;
  for (int i = 0; i < this->pick_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pick_item(i), target);
  }

  // optional int64 pick_gold = 2;
  if (has_pick_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pick_gold(), target);
  }

  // optional int64 pick_exp = 3;
  if (has_pick_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pick_exp(), target);
  }

  // optional int32 kill_num = 4;
  if (has_kill_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kill_num(), target);
  }

  // repeated .proto_ff.ItemProtoInfo star3 = 5;
  for (int i = 0; i < this->star3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->star3(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupDropProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 pick_gold = 2;
    if (has_pick_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pick_gold());
    }

    // optional int64 pick_exp = 3;
    if (has_pick_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pick_exp());
    }

    // optional int32 kill_num = 4;
    if (has_kill_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_num());
    }

  }
  // repeated .proto_ff.ItemProtoInfo pick_item = 1;
  total_size += 1 * this->pick_item_size();
  for (int i = 0; i < this->pick_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pick_item(i));
  }

  // repeated .proto_ff.ItemProtoInfo star3 = 5;
  total_size += 1 * this->star3_size();
  for (int i = 0; i < this->star3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->star3(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupDropProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupDropProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupDropProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupDropProto::MergeFrom(const DupDropProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  pick_item_.MergeFrom(from.pick_item_);
  star3_.MergeFrom(from.star3_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_pick_gold()) {
      set_pick_gold(from.pick_gold());
    }
    if (from.has_pick_exp()) {
      set_pick_exp(from.pick_exp());
    }
    if (from.has_kill_num()) {
      set_kill_num(from.kill_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupDropProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupDropProto::CopyFrom(const DupDropProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupDropProto::IsInitialized() const {

  for (int i = 0; i < pick_item_size(); i++) {
    if (!this->pick_item(i).IsInitialized()) return false;
  }
  for (int i = 0; i < star3_size(); i++) {
    if (!this->star3(i).IsInitialized()) return false;
  }
  return true;
}

void DupDropProto::Swap(DupDropProto* other) {
  if (other != this) {
    pick_item_.Swap(&other->pick_item_);
    std::swap(pick_gold_, other->pick_gold_);
    std::swap(pick_exp_, other->pick_exp_);
    std::swap(kill_num_, other->kill_num_);
    star3_.Swap(&other->star3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupDropProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupDropProto_descriptor_;
  metadata.reflection = DupDropProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTowerRecordEntry::kNameFieldNumber;
const int DupTowerRecordEntry::kTimeFieldNumber;
#endif  // !_MSC_VER

DupTowerRecordEntry::DupTowerRecordEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTowerRecordEntry::InitAsDefaultInstance() {
}

DupTowerRecordEntry::DupTowerRecordEntry(const DupTowerRecordEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTowerRecordEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTowerRecordEntry::~DupTowerRecordEntry() {
  SharedDtor();
}

void DupTowerRecordEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DupTowerRecordEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTowerRecordEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTowerRecordEntry_descriptor_;
}

const DupTowerRecordEntry& DupTowerRecordEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupTowerRecordEntry* DupTowerRecordEntry::default_instance_ = NULL;

DupTowerRecordEntry* DupTowerRecordEntry::New() const {
  return new DupTowerRecordEntry;
}

void DupTowerRecordEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTowerRecordEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTowerRecordEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTowerRecordEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTowerRecordEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTowerRecordEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTowerRecordEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTowerRecordEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTowerRecordEntry::MergeFrom(const DupTowerRecordEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTowerRecordEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTowerRecordEntry::CopyFrom(const DupTowerRecordEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTowerRecordEntry::IsInitialized() const {

  return true;
}

void DupTowerRecordEntry::Swap(DupTowerRecordEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTowerRecordEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTowerRecordEntry_descriptor_;
  metadata.reflection = DupTowerRecordEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTeamInviteState::kCidFieldNumber;
const int DupTeamInviteState::kStateFieldNumber;
#endif  // !_MSC_VER

DupTeamInviteState::DupTeamInviteState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTeamInviteState::InitAsDefaultInstance() {
}

DupTeamInviteState::DupTeamInviteState(const DupTeamInviteState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTeamInviteState::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTeamInviteState::~DupTeamInviteState() {
  SharedDtor();
}

void DupTeamInviteState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupTeamInviteState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTeamInviteState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTeamInviteState_descriptor_;
}

const DupTeamInviteState& DupTeamInviteState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupTeamInviteState* DupTeamInviteState::default_instance_ = NULL;

DupTeamInviteState* DupTeamInviteState::New() const {
  return new DupTeamInviteState;
}

void DupTeamInviteState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTeamInviteState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTeamInviteState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTeamInviteState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTeamInviteState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTeamInviteState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTeamInviteState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTeamInviteState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTeamInviteState::MergeFrom(const DupTeamInviteState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTeamInviteState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTeamInviteState::CopyFrom(const DupTeamInviteState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTeamInviteState::IsInitialized() const {

  return true;
}

void DupTeamInviteState::Swap(DupTeamInviteState* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTeamInviteState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTeamInviteState_descriptor_;
  metadata.reflection = DupTeamInviteState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerDupData::kIdsFieldNumber;
#endif  // !_MSC_VER

TowerDupData::TowerDupData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TowerDupData::InitAsDefaultInstance() {
}

TowerDupData::TowerDupData(const TowerDupData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TowerDupData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerDupData::~TowerDupData() {
  SharedDtor();
}

void TowerDupData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerDupData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerDupData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerDupData_descriptor_;
}

const TowerDupData& TowerDupData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

TowerDupData* TowerDupData::default_instance_ = NULL;

TowerDupData* TowerDupData::New() const {
  return new TowerDupData;
}

void TowerDupData::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerDupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TowerDupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TowerDupData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TowerDupData::ByteSize() const {
  int total_size = 0;

  // repeated int64 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerDupData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerDupData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerDupData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerDupData::MergeFrom(const TowerDupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerDupData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerDupData::CopyFrom(const TowerDupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerDupData::IsInitialized() const {

  return true;
}

void TowerDupData::Swap(TowerDupData* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerDupData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerDupData_descriptor_;
  metadata.reflection = TowerDupData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassDupData::kIdFieldNumber;
const int PassDupData::kStarFieldNumber;
#endif  // !_MSC_VER

PassDupData::PassDupData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassDupData::InitAsDefaultInstance() {
}

PassDupData::PassDupData(const PassDupData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassDupData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassDupData::~PassDupData() {
  SharedDtor();
}

void PassDupData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassDupData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassDupData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassDupData_descriptor_;
}

const PassDupData& PassDupData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

PassDupData* PassDupData::default_instance_ = NULL;

PassDupData* PassDupData::New() const {
  return new PassDupData;
}

void PassDupData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassDupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassDupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassDupData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassDupData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassDupData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassDupData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassDupData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassDupData::MergeFrom(const PassDupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassDupData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassDupData::CopyFrom(const PassDupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassDupData::IsInitialized() const {

  return true;
}

void PassDupData::Swap(PassDupData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassDupData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassDupData_descriptor_;
  metadata.reflection = PassDupData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassGhostData::kWaveFieldNumber;
const int PassGhostData::kTimeFieldNumber;
const int PassGhostData::kRecvIdsFieldNumber;
#endif  // !_MSC_VER

PassGhostData::PassGhostData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassGhostData::InitAsDefaultInstance() {
}

PassGhostData::PassGhostData(const PassGhostData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassGhostData::SharedCtor() {
  _cached_size_ = 0;
  wave_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassGhostData::~PassGhostData() {
  SharedDtor();
}

void PassGhostData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassGhostData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassGhostData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassGhostData_descriptor_;
}

const PassGhostData& PassGhostData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

PassGhostData* PassGhostData::default_instance_ = NULL;

PassGhostData* PassGhostData::New() const {
  return new PassGhostData;
}

void PassGhostData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wave_ = 0;
    time_ = 0;
  }
  recv_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassGhostData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recv_ids;
        break;
      }

      // repeated int32 recv_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_recv_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recv_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recv_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassGhostData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wave = 1;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wave(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // repeated int32 recv_ids = 3;
  for (int i = 0; i < this->recv_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->recv_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassGhostData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wave = 1;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wave(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // repeated int32 recv_ids = 3;
  for (int i = 0; i < this->recv_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->recv_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassGhostData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wave = 1;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  // repeated int32 recv_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->recv_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recv_ids(i));
    }
    total_size += 1 * this->recv_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassGhostData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassGhostData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassGhostData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassGhostData::MergeFrom(const PassGhostData& from) {
  GOOGLE_CHECK_NE(&from, this);
  recv_ids_.MergeFrom(from.recv_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassGhostData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassGhostData::CopyFrom(const PassGhostData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassGhostData::IsInitialized() const {

  return true;
}

void PassGhostData::Swap(PassGhostData* other) {
  if (other != this) {
    std::swap(wave_, other->wave_);
    std::swap(time_, other->time_);
    recv_ids_.Swap(&other->recv_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassGhostData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassGhostData_descriptor_;
  metadata.reflection = PassGhostData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassMoyuData::kRecvLayerFieldNumber;
const int PassMoyuData::kDayHarmFieldNumber;
const int PassMoyuData::kWeekHarmFieldNumber;
const int PassMoyuData::kLastDayHarmFieldNumber;
const int PassMoyuData::kLastWeekHarmFieldNumber;
#endif  // !_MSC_VER

PassMoyuData::PassMoyuData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassMoyuData::InitAsDefaultInstance() {
}

PassMoyuData::PassMoyuData(const PassMoyuData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassMoyuData::SharedCtor() {
  _cached_size_ = 0;
  day_harm_ = GOOGLE_ULONGLONG(0);
  week_harm_ = GOOGLE_ULONGLONG(0);
  last_day_harm_ = GOOGLE_ULONGLONG(0);
  last_week_harm_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassMoyuData::~PassMoyuData() {
  SharedDtor();
}

void PassMoyuData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassMoyuData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassMoyuData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassMoyuData_descriptor_;
}

const PassMoyuData& PassMoyuData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

PassMoyuData* PassMoyuData::default_instance_ = NULL;

PassMoyuData* PassMoyuData::New() const {
  return new PassMoyuData;
}

void PassMoyuData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    day_harm_ = GOOGLE_ULONGLONG(0);
    week_harm_ = GOOGLE_ULONGLONG(0);
    last_day_harm_ = GOOGLE_ULONGLONG(0);
    last_week_harm_ = GOOGLE_ULONGLONG(0);
  }
  recv_layer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassMoyuData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 recv_layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_recv_layer())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recv_layer())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_recv_layer;
        if (input->ExpectTag(16)) goto parse_day_harm;
        break;
      }

      // optional uint64 day_harm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &day_harm_)));
          set_has_day_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_week_harm;
        break;
      }

      // optional uint64 week_harm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &week_harm_)));
          set_has_week_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_day_harm;
        break;
      }

      // optional uint64 last_day_harm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_day_harm_)));
          set_has_last_day_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_week_harm;
        break;
      }

      // optional uint64 last_week_harm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_week_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_week_harm_)));
          set_has_last_week_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassMoyuData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 recv_layer = 1;
  for (int i = 0; i < this->recv_layer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->recv_layer(i), output);
  }

  // optional uint64 day_harm = 2;
  if (has_day_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->day_harm(), output);
  }

  // optional uint64 week_harm = 3;
  if (has_week_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->week_harm(), output);
  }

  // optional uint64 last_day_harm = 4;
  if (has_last_day_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_day_harm(), output);
  }

  // optional uint64 last_week_harm = 5;
  if (has_last_week_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_week_harm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassMoyuData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 recv_layer = 1;
  for (int i = 0; i < this->recv_layer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->recv_layer(i), target);
  }

  // optional uint64 day_harm = 2;
  if (has_day_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->day_harm(), target);
  }

  // optional uint64 week_harm = 3;
  if (has_week_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->week_harm(), target);
  }

  // optional uint64 last_day_harm = 4;
  if (has_last_day_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_day_harm(), target);
  }

  // optional uint64 last_week_harm = 5;
  if (has_last_week_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_week_harm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassMoyuData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 day_harm = 2;
    if (has_day_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->day_harm());
    }

    // optional uint64 week_harm = 3;
    if (has_week_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->week_harm());
    }

    // optional uint64 last_day_harm = 4;
    if (has_last_day_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_day_harm());
    }

    // optional uint64 last_week_harm = 5;
    if (has_last_week_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_week_harm());
    }

  }
  // repeated int32 recv_layer = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->recv_layer_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recv_layer(i));
    }
    total_size += 1 * this->recv_layer_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassMoyuData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassMoyuData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassMoyuData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassMoyuData::MergeFrom(const PassMoyuData& from) {
  GOOGLE_CHECK_NE(&from, this);
  recv_layer_.MergeFrom(from.recv_layer_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_day_harm()) {
      set_day_harm(from.day_harm());
    }
    if (from.has_week_harm()) {
      set_week_harm(from.week_harm());
    }
    if (from.has_last_day_harm()) {
      set_last_day_harm(from.last_day_harm());
    }
    if (from.has_last_week_harm()) {
      set_last_week_harm(from.last_week_harm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassMoyuData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassMoyuData::CopyFrom(const PassMoyuData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassMoyuData::IsInitialized() const {

  return true;
}

void PassMoyuData::Swap(PassMoyuData* other) {
  if (other != this) {
    recv_layer_.Swap(&other->recv_layer_);
    std::swap(day_harm_, other->day_harm_);
    std::swap(week_harm_, other->week_harm_);
    std::swap(last_day_harm_, other->last_day_harm_);
    std::swap(last_week_harm_, other->last_week_harm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassMoyuData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassMoyuData_descriptor_;
  metadata.reflection = PassMoyuData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YaoTaData::kPassIdsFieldNumber;
const int YaoTaData::kFirstPassIdsFieldNumber;
#endif  // !_MSC_VER

YaoTaData::YaoTaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YaoTaData::InitAsDefaultInstance() {
}

YaoTaData::YaoTaData(const YaoTaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YaoTaData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YaoTaData::~YaoTaData() {
  SharedDtor();
}

void YaoTaData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YaoTaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YaoTaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaoTaData_descriptor_;
}

const YaoTaData& YaoTaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

YaoTaData* YaoTaData::default_instance_ = NULL;

YaoTaData* YaoTaData::New() const {
  return new YaoTaData;
}

void YaoTaData::Clear() {
  pass_ids_.Clear();
  first_pass_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YaoTaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 pass_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_pass_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pass_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_pass_ids;
        if (input->ExpectTag(16)) goto parse_first_pass_ids;
        break;
      }

      // repeated int32 first_pass_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_pass_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_first_pass_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_first_pass_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_pass_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YaoTaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 pass_ids = 1;
  for (int i = 0; i < this->pass_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->pass_ids(i), output);
  }

  // repeated int32 first_pass_ids = 2;
  for (int i = 0; i < this->first_pass_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->first_pass_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YaoTaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 pass_ids = 1;
  for (int i = 0; i < this->pass_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->pass_ids(i), target);
  }

  // repeated int32 first_pass_ids = 2;
  for (int i = 0; i < this->first_pass_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->first_pass_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YaoTaData::ByteSize() const {
  int total_size = 0;

  // repeated int32 pass_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pass_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pass_ids(i));
    }
    total_size += 1 * this->pass_ids_size() + data_size;
  }

  // repeated int32 first_pass_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_pass_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->first_pass_ids(i));
    }
    total_size += 1 * this->first_pass_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YaoTaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YaoTaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YaoTaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YaoTaData::MergeFrom(const YaoTaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  pass_ids_.MergeFrom(from.pass_ids_);
  first_pass_ids_.MergeFrom(from.first_pass_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YaoTaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YaoTaData::CopyFrom(const YaoTaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YaoTaData::IsInitialized() const {

  return true;
}

void YaoTaData::Swap(YaoTaData* other) {
  if (other != this) {
    pass_ids_.Swap(&other->pass_ids_);
    first_pass_ids_.Swap(&other->first_pass_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YaoTaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YaoTaData_descriptor_;
  metadata.reflection = YaoTaData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComDupGroupData::kGroupFieldNumber;
const int ComDupGroupData::kPassDupIdFieldNumber;
const int ComDupGroupData::kEnterNumFieldNumber;
const int ComDupGroupData::kMaxNumFieldNumber;
const int ComDupGroupData::kBuyNumFieldNumber;
const int ComDupGroupData::kStarFieldNumber;
const int ComDupGroupData::kTowerFieldNumber;
const int ComDupGroupData::kPassFieldNumber;
const int ComDupGroupData::kGhostFieldNumber;
const int ComDupGroupData::kMoyuFieldNumber;
const int ComDupGroupData::kYaotaFieldNumber;
#endif  // !_MSC_VER

ComDupGroupData::ComDupGroupData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComDupGroupData::InitAsDefaultInstance() {
  tower_ = const_cast< ::proto_ff::TowerDupData*>(&::proto_ff::TowerDupData::default_instance());
  ghost_ = const_cast< ::proto_ff::PassGhostData*>(&::proto_ff::PassGhostData::default_instance());
  moyu_ = const_cast< ::proto_ff::PassMoyuData*>(&::proto_ff::PassMoyuData::default_instance());
  yaota_ = const_cast< ::proto_ff::YaoTaData*>(&::proto_ff::YaoTaData::default_instance());
}

ComDupGroupData::ComDupGroupData(const ComDupGroupData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComDupGroupData::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0;
  pass_dupid_ = GOOGLE_ULONGLONG(0);
  enter_num_ = 0;
  max_num_ = 0;
  buy_num_ = 0;
  star_ = 0;
  tower_ = NULL;
  ghost_ = NULL;
  moyu_ = NULL;
  yaota_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComDupGroupData::~ComDupGroupData() {
  SharedDtor();
}

void ComDupGroupData::SharedDtor() {
  if (this != default_instance_) {
    delete tower_;
    delete ghost_;
    delete moyu_;
    delete yaota_;
  }
}

void ComDupGroupData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComDupGroupData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComDupGroupData_descriptor_;
}

const ComDupGroupData& ComDupGroupData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

ComDupGroupData* ComDupGroupData::default_instance_ = NULL;

ComDupGroupData* ComDupGroupData::New() const {
  return new ComDupGroupData;
}

void ComDupGroupData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0;
    pass_dupid_ = GOOGLE_ULONGLONG(0);
    enter_num_ = 0;
    max_num_ = 0;
    buy_num_ = 0;
    star_ = 0;
    if (has_tower()) {
      if (tower_ != NULL) tower_->::proto_ff::TowerDupData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ghost()) {
      if (ghost_ != NULL) ghost_->::proto_ff::PassGhostData::Clear();
    }
    if (has_moyu()) {
      if (moyu_ != NULL) moyu_->::proto_ff::PassMoyuData::Clear();
    }
    if (has_yaota()) {
      if (yaota_ != NULL) yaota_->::proto_ff::YaoTaData::Clear();
    }
  }
  pass_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComDupGroupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_dupId;
        break;
      }

      // optional uint64 pass_dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pass_dupid_)));
          set_has_pass_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enter_num;
        break;
      }

      // optional int32 enter_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_num_)));
          set_has_enter_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_num;
        break;
      }

      // optional int32 max_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_)));
          set_has_max_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_star;
        break;
      }

      // optional int32 star = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tower;
        break;
      }

      // optional .proto_ff.TowerDupData tower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pass;
        break;
      }

      // repeated .proto_ff.PassDupData pass = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pass()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pass;
        if (input->ExpectTag(74)) goto parse_ghost;
        break;
      }

      // optional .proto_ff.PassGhostData ghost = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ghost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ghost()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_moyu;
        break;
      }

      // optional .proto_ff.PassMoyuData moyu = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moyu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moyu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_yaota;
        break;
      }

      // optional .proto_ff.YaoTaData yaota = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yaota:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yaota()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComDupGroupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group(), output);
  }

  // optional uint64 pass_dupId = 2;
  if (has_pass_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pass_dupid(), output);
  }

  // optional int32 enter_num = 3;
  if (has_enter_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enter_num(), output);
  }

  // optional int32 max_num = 4;
  if (has_max_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_num(), output);
  }

  // optional int32 buy_num = 5;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buy_num(), output);
  }

  // optional int32 star = 6;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->star(), output);
  }

  // optional .proto_ff.TowerDupData tower = 7;
  if (has_tower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tower(), output);
  }

  // repeated .proto_ff.PassDupData pass = 8;
  for (int i = 0; i < this->pass_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pass(i), output);
  }

  // optional .proto_ff.PassGhostData ghost = 9;
  if (has_ghost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->ghost(), output);
  }

  // optional .proto_ff.PassMoyuData moyu = 10;
  if (has_moyu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->moyu(), output);
  }

  // optional .proto_ff.YaoTaData yaota = 11;
  if (has_yaota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->yaota(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComDupGroupData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group(), target);
  }

  // optional uint64 pass_dupId = 2;
  if (has_pass_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pass_dupid(), target);
  }

  // optional int32 enter_num = 3;
  if (has_enter_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enter_num(), target);
  }

  // optional int32 max_num = 4;
  if (has_max_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_num(), target);
  }

  // optional int32 buy_num = 5;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buy_num(), target);
  }

  // optional int32 star = 6;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->star(), target);
  }

  // optional .proto_ff.TowerDupData tower = 7;
  if (has_tower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tower(), target);
  }

  // repeated .proto_ff.PassDupData pass = 8;
  for (int i = 0; i < this->pass_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pass(i), target);
  }

  // optional .proto_ff.PassGhostData ghost = 9;
  if (has_ghost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->ghost(), target);
  }

  // optional .proto_ff.PassMoyuData moyu = 10;
  if (has_moyu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->moyu(), target);
  }

  // optional .proto_ff.YaoTaData yaota = 11;
  if (has_yaota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->yaota(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComDupGroupData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional uint64 pass_dupId = 2;
    if (has_pass_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pass_dupid());
    }

    // optional int32 enter_num = 3;
    if (has_enter_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_num());
    }

    // optional int32 max_num = 4;
    if (has_max_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num());
    }

    // optional int32 buy_num = 5;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

    // optional int32 star = 6;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional .proto_ff.TowerDupData tower = 7;
    if (has_tower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.PassGhostData ghost = 9;
    if (has_ghost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ghost());
    }

    // optional .proto_ff.PassMoyuData moyu = 10;
    if (has_moyu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moyu());
    }

    // optional .proto_ff.YaoTaData yaota = 11;
    if (has_yaota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yaota());
    }

  }
  // repeated .proto_ff.PassDupData pass = 8;
  total_size += 1 * this->pass_size();
  for (int i = 0; i < this->pass_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pass(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComDupGroupData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComDupGroupData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComDupGroupData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComDupGroupData::MergeFrom(const ComDupGroupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  pass_.MergeFrom(from.pass_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_pass_dupid()) {
      set_pass_dupid(from.pass_dupid());
    }
    if (from.has_enter_num()) {
      set_enter_num(from.enter_num());
    }
    if (from.has_max_num()) {
      set_max_num(from.max_num());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_tower()) {
      mutable_tower()->::proto_ff::TowerDupData::MergeFrom(from.tower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ghost()) {
      mutable_ghost()->::proto_ff::PassGhostData::MergeFrom(from.ghost());
    }
    if (from.has_moyu()) {
      mutable_moyu()->::proto_ff::PassMoyuData::MergeFrom(from.moyu());
    }
    if (from.has_yaota()) {
      mutable_yaota()->::proto_ff::YaoTaData::MergeFrom(from.yaota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComDupGroupData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComDupGroupData::CopyFrom(const ComDupGroupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComDupGroupData::IsInitialized() const {

  return true;
}

void ComDupGroupData::Swap(ComDupGroupData* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(pass_dupid_, other->pass_dupid_);
    std::swap(enter_num_, other->enter_num_);
    std::swap(max_num_, other->max_num_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(star_, other->star_);
    std::swap(tower_, other->tower_);
    pass_.Swap(&other->pass_);
    std::swap(ghost_, other->ghost_);
    std::swap(moyu_, other->moyu_);
    std::swap(yaota_, other->yaota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComDupGroupData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComDupGroupData_descriptor_;
  metadata.reflection = ComDupGroupData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterDupReq::kDupIdFieldNumber;
const int EnterDupReq::kMergeNumFieldNumber;
#endif  // !_MSC_VER

EnterDupReq::EnterDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterDupReq::InitAsDefaultInstance() {
}

EnterDupReq::EnterDupReq(const EnterDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterDupReq::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  mergenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterDupReq::~EnterDupReq() {
  SharedDtor();
}

void EnterDupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterDupReq_descriptor_;
}

const EnterDupReq& EnterDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

EnterDupReq* EnterDupReq::default_instance_ = NULL;

EnterDupReq* EnterDupReq::New() const {
  return new EnterDupReq;
}

void EnterDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = GOOGLE_ULONGLONG(0);
    mergenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mergeNum;
        break;
      }

      // optional int32 mergeNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mergeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mergenum_)));
          set_has_mergenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dupid(), output);
  }

  // optional int32 mergeNum = 2;
  if (has_mergenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mergenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dupid(), target);
  }

  // optional int32 mergeNum = 2;
  if (has_mergenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mergenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dupId = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int32 mergeNum = 2;
    if (has_mergenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mergenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterDupReq::MergeFrom(const EnterDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_mergenum()) {
      set_mergenum(from.mergenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterDupReq::CopyFrom(const EnterDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterDupReq::IsInitialized() const {

  return true;
}

void EnterDupReq::Swap(EnterDupReq* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    std::swap(mergenum_, other->mergenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterDupReq_descriptor_;
  metadata.reflection = EnterDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterDupRsp::kRetFieldNumber;
const int EnterDupRsp::kDupIdFieldNumber;
const int EnterDupRsp::kDupTimeFieldNumber;
#endif  // !_MSC_VER

EnterDupRsp::EnterDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterDupRsp::InitAsDefaultInstance() {
}

EnterDupRsp::EnterDupRsp(const EnterDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterDupRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  duptime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterDupRsp::~EnterDupRsp() {
  SharedDtor();
}

void EnterDupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterDupRsp_descriptor_;
}

const EnterDupRsp& EnterDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

EnterDupRsp* EnterDupRsp::default_instance_ = NULL;

EnterDupRsp* EnterDupRsp::New() const {
  return new EnterDupRsp;
}

void EnterDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    dupid_ = GOOGLE_ULONGLONG(0);
    duptime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupId;
        break;
      }

      // optional uint64 dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dupTime;
        break;
      }

      // optional int32 dupTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duptime_)));
          set_has_duptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional int32 dupTime = 3;
  if (has_duptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional int32 dupTime = 3;
  if (has_duptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 dupId = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int32 dupTime = 3;
    if (has_duptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterDupRsp::MergeFrom(const EnterDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_duptime()) {
      set_duptime(from.duptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterDupRsp::CopyFrom(const EnterDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterDupRsp::IsInitialized() const {

  return true;
}

void EnterDupRsp::Swap(EnterDupRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(dupid_, other->dupid_);
    std::swap(duptime_, other->duptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterDupRsp_descriptor_;
  metadata.reflection = EnterDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DupResultReq::DupResultReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupResultReq::InitAsDefaultInstance() {
}

DupResultReq::DupResultReq(const DupResultReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupResultReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupResultReq::~DupResultReq() {
  SharedDtor();
}

void DupResultReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupResultReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupResultReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupResultReq_descriptor_;
}

const DupResultReq& DupResultReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupResultReq* DupResultReq::default_instance_ = NULL;

DupResultReq* DupResultReq::New() const {
  return new DupResultReq;
}

void DupResultReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupResultReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DupResultReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupResultReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupResultReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupResultReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupResultReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupResultReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupResultReq::MergeFrom(const DupResultReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupResultReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupResultReq::CopyFrom(const DupResultReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupResultReq::IsInitialized() const {

  return true;
}

void DupResultReq::Swap(DupResultReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupResultReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupResultReq_descriptor_;
  metadata.reflection = DupResultReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupResultRsp::kResultFieldNumber;
const int DupResultRsp::kDupIdFieldNumber;
const int DupResultRsp::kStarFieldNumber;
const int DupResultRsp::kCostSecFieldNumber;
const int DupResultRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

DupResultRsp::DupResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupResultRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::DupDropProto*>(&::proto_ff::DupDropProto::default_instance());
}

DupResultRsp::DupResultRsp(const DupResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupResultRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  star_ = 0;
  cost_sec_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupResultRsp::~DupResultRsp() {
  SharedDtor();
}

void DupResultRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void DupResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupResultRsp_descriptor_;
}

const DupResultRsp& DupResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupResultRsp* DupResultRsp::default_instance_ = NULL;

DupResultRsp* DupResultRsp::New() const {
  return new DupResultRsp;
}

void DupResultRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    dupid_ = GOOGLE_ULONGLONG(0);
    star_ = 0;
    cost_sec_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::DupDropProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupId;
        break;
      }

      // optional uint64 dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional int32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_sec;
        break;
      }

      // optional int32 cost_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_sec_)));
          set_has_cost_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .proto_ff.DupDropProto info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional int32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  // optional int32 cost_sec = 4;
  if (has_cost_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cost_sec(), output);
  }

  // optional .proto_ff.DupDropProto info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional int32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  // optional int32 cost_sec = 4;
  if (has_cost_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cost_sec(), target);
  }

  // optional .proto_ff.DupDropProto info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 dupId = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 cost_sec = 4;
    if (has_cost_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_sec());
    }

    // optional .proto_ff.DupDropProto info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupResultRsp::MergeFrom(const DupResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_cost_sec()) {
      set_cost_sec(from.cost_sec());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::DupDropProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupResultRsp::CopyFrom(const DupResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupResultRsp::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void DupResultRsp::Swap(DupResultRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(dupid_, other->dupid_);
    std::swap(star_, other->star_);
    std::swap(cost_sec_, other->cost_sec_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupResultRsp_descriptor_;
  metadata.reflection = DupResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DupLeaveReq::DupLeaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupLeaveReq::InitAsDefaultInstance() {
}

DupLeaveReq::DupLeaveReq(const DupLeaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupLeaveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupLeaveReq::~DupLeaveReq() {
  SharedDtor();
}

void DupLeaveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupLeaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupLeaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupLeaveReq_descriptor_;
}

const DupLeaveReq& DupLeaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupLeaveReq* DupLeaveReq::default_instance_ = NULL;

DupLeaveReq* DupLeaveReq::New() const {
  return new DupLeaveReq;
}

void DupLeaveReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupLeaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DupLeaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupLeaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupLeaveReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupLeaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupLeaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupLeaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupLeaveReq::MergeFrom(const DupLeaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupLeaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupLeaveReq::CopyFrom(const DupLeaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupLeaveReq::IsInitialized() const {

  return true;
}

void DupLeaveReq::Swap(DupLeaveReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupLeaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupLeaveReq_descriptor_;
  metadata.reflection = DupLeaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupLeaveRsp::kResultFieldNumber;
const int DupLeaveRsp::kDupIdFieldNumber;
#endif  // !_MSC_VER

DupLeaveRsp::DupLeaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupLeaveRsp::InitAsDefaultInstance() {
}

DupLeaveRsp::DupLeaveRsp(const DupLeaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupLeaveRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  dupid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupLeaveRsp::~DupLeaveRsp() {
  SharedDtor();
}

void DupLeaveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupLeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupLeaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupLeaveRsp_descriptor_;
}

const DupLeaveRsp& DupLeaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupLeaveRsp* DupLeaveRsp::default_instance_ = NULL;

DupLeaveRsp* DupLeaveRsp::New() const {
  return new DupLeaveRsp;
}

void DupLeaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    dupid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupLeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupId;
        break;
      }

      // optional int64 dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupLeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 dupId = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupLeaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 dupId = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupLeaveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 dupId = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupLeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupLeaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupLeaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupLeaveRsp::MergeFrom(const DupLeaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupLeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupLeaveRsp::CopyFrom(const DupLeaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupLeaveRsp::IsInitialized() const {

  return true;
}

void DupLeaveRsp::Swap(DupLeaveRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(dupid_, other->dupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupLeaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupLeaveRsp_descriptor_;
  metadata.reflection = DupLeaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyDupRsp::kTypeFieldNumber;
const int NotifyDupRsp::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifyDupRsp::NotifyDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDupRsp::InitAsDefaultInstance() {
}

NotifyDupRsp::NotifyDupRsp(const NotifyDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDupRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDupRsp::~NotifyDupRsp() {
  SharedDtor();
}

void NotifyDupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDupRsp_descriptor_;
}

const NotifyDupRsp& NotifyDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyDupRsp* NotifyDupRsp::default_instance_ = NULL;

NotifyDupRsp* NotifyDupRsp::New() const {
  return new NotifyDupRsp;
}

void NotifyDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.ComDupGroupData infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.ComDupGroupData infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.ComDupGroupData infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.ComDupGroupData infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDupRsp::MergeFrom(const NotifyDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDupRsp::CopyFrom(const NotifyDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDupRsp::IsInitialized() const {

  return true;
}

void NotifyDupRsp::Swap(NotifyDupRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDupRsp_descriptor_;
  metadata.reflection = NotifyDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyDupRunRsp::kDupIdFieldNumber;
const int NotifyDupRunRsp::kKillNumFieldNumber;
const int NotifyDupRunRsp::kAllNumFieldNumber;
const int NotifyDupRunRsp::kCurWaveFieldNumber;
const int NotifyDupRunRsp::kMaxWaveFieldNumber;
const int NotifyDupRunRsp::kCurHpFieldNumber;
const int NotifyDupRunRsp::kMaxHpFieldNumber;
const int NotifyDupRunRsp::kItemsFieldNumber;
const int NotifyDupRunRsp::kKillBossNumFieldNumber;
const int NotifyDupRunRsp::kBossNumFieldNumber;
const int NotifyDupRunRsp::kAddExpFieldNumber;
#endif  // !_MSC_VER

NotifyDupRunRsp::NotifyDupRunRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDupRunRsp::InitAsDefaultInstance() {
}

NotifyDupRunRsp::NotifyDupRunRsp(const NotifyDupRunRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDupRunRsp::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  kill_num_ = 0;
  all_num_ = 0;
  cur_wave_ = 0;
  max_wave_ = 0;
  cur_hp_ = GOOGLE_LONGLONG(0);
  max_hp_ = GOOGLE_LONGLONG(0);
  kill_boss_num_ = 0;
  boss_num_ = 0;
  add_exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDupRunRsp::~NotifyDupRunRsp() {
  SharedDtor();
}

void NotifyDupRunRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDupRunRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDupRunRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDupRunRsp_descriptor_;
}

const NotifyDupRunRsp& NotifyDupRunRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyDupRunRsp* NotifyDupRunRsp::default_instance_ = NULL;

NotifyDupRunRsp* NotifyDupRunRsp::New() const {
  return new NotifyDupRunRsp;
}

void NotifyDupRunRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = GOOGLE_ULONGLONG(0);
    kill_num_ = 0;
    all_num_ = 0;
    cur_wave_ = 0;
    max_wave_ = 0;
    cur_hp_ = GOOGLE_LONGLONG(0);
    max_hp_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    kill_boss_num_ = 0;
    boss_num_ = 0;
    add_exp_ = GOOGLE_LONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDupRunRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kill_num;
        break;
      }

      // optional int32 kill_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_num_)));
          set_has_kill_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_all_num;
        break;
      }

      // optional int32 all_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_num_)));
          set_has_all_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_wave;
        break;
      }

      // optional int32 cur_wave = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_wave_)));
          set_has_cur_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_wave;
        break;
      }

      // optional int32 max_wave = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_wave_)));
          set_has_max_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cur_hp;
        break;
      }

      // optional int64 cur_hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_hp_)));
          set_has_cur_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_hp;
        break;
      }

      // optional int64 max_hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ComPair64 items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        if (input->ExpectTag(72)) goto parse_kill_boss_num;
        break;
      }

      // optional int32 kill_boss_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_boss_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_boss_num_)));
          set_has_kill_boss_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_boss_num;
        break;
      }

      // optional int32 boss_num = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_num_)));
          set_has_boss_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_add_exp;
        break;
      }

      // optional int64 add_exp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_exp_)));
          set_has_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyDupRunRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dupid(), output);
  }

  // optional int32 kill_num = 2;
  if (has_kill_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kill_num(), output);
  }

  // optional int32 all_num = 3;
  if (has_all_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->all_num(), output);
  }

  // optional int32 cur_wave = 4;
  if (has_cur_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_wave(), output);
  }

  // optional int32 max_wave = 5;
  if (has_max_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_wave(), output);
  }

  // optional int64 cur_hp = 6;
  if (has_cur_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cur_hp(), output);
  }

  // optional int64 max_hp = 7;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->max_hp(), output);
  }

  // repeated .proto_ff.ComPair64 items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->items(i), output);
  }

  // optional int32 kill_boss_num = 9;
  if (has_kill_boss_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->kill_boss_num(), output);
  }

  // optional int32 boss_num = 10;
  if (has_boss_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->boss_num(), output);
  }

  // optional int64 add_exp = 11;
  if (has_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->add_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDupRunRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dupid(), target);
  }

  // optional int32 kill_num = 2;
  if (has_kill_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kill_num(), target);
  }

  // optional int32 all_num = 3;
  if (has_all_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->all_num(), target);
  }

  // optional int32 cur_wave = 4;
  if (has_cur_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_wave(), target);
  }

  // optional int32 max_wave = 5;
  if (has_max_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_wave(), target);
  }

  // optional int64 cur_hp = 6;
  if (has_cur_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cur_hp(), target);
  }

  // optional int64 max_hp = 7;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->max_hp(), target);
  }

  // repeated .proto_ff.ComPair64 items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->items(i), target);
  }

  // optional int32 kill_boss_num = 9;
  if (has_kill_boss_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->kill_boss_num(), target);
  }

  // optional int32 boss_num = 10;
  if (has_boss_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->boss_num(), target);
  }

  // optional int64 add_exp = 11;
  if (has_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->add_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDupRunRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dupId = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int32 kill_num = 2;
    if (has_kill_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_num());
    }

    // optional int32 all_num = 3;
    if (has_all_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_num());
    }

    // optional int32 cur_wave = 4;
    if (has_cur_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_wave());
    }

    // optional int32 max_wave = 5;
    if (has_max_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_wave());
    }

    // optional int64 cur_hp = 6;
    if (has_cur_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_hp());
    }

    // optional int64 max_hp = 7;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_hp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 kill_boss_num = 9;
    if (has_kill_boss_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_boss_num());
    }

    // optional int32 boss_num = 10;
    if (has_boss_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_num());
    }

    // optional int64 add_exp = 11;
    if (has_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_exp());
    }

  }
  // repeated .proto_ff.ComPair64 items = 8;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDupRunRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDupRunRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDupRunRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDupRunRsp::MergeFrom(const NotifyDupRunRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_kill_num()) {
      set_kill_num(from.kill_num());
    }
    if (from.has_all_num()) {
      set_all_num(from.all_num());
    }
    if (from.has_cur_wave()) {
      set_cur_wave(from.cur_wave());
    }
    if (from.has_max_wave()) {
      set_max_wave(from.max_wave());
    }
    if (from.has_cur_hp()) {
      set_cur_hp(from.cur_hp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kill_boss_num()) {
      set_kill_boss_num(from.kill_boss_num());
    }
    if (from.has_boss_num()) {
      set_boss_num(from.boss_num());
    }
    if (from.has_add_exp()) {
      set_add_exp(from.add_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDupRunRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDupRunRsp::CopyFrom(const NotifyDupRunRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDupRunRsp::IsInitialized() const {

  return true;
}

void NotifyDupRunRsp::Swap(NotifyDupRunRsp* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    std::swap(kill_num_, other->kill_num_);
    std::swap(all_num_, other->all_num_);
    std::swap(cur_wave_, other->cur_wave_);
    std::swap(max_wave_, other->max_wave_);
    std::swap(cur_hp_, other->cur_hp_);
    std::swap(max_hp_, other->max_hp_);
    items_.Swap(&other->items_);
    std::swap(kill_boss_num_, other->kill_boss_num_);
    std::swap(boss_num_, other->boss_num_);
    std::swap(add_exp_, other->add_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDupRunRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDupRunRsp_descriptor_;
  metadata.reflection = NotifyDupRunRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyDupEndRsp::kDupIdFieldNumber;
#endif  // !_MSC_VER

NotifyDupEndRsp::NotifyDupEndRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDupEndRsp::InitAsDefaultInstance() {
}

NotifyDupEndRsp::NotifyDupEndRsp(const NotifyDupEndRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDupEndRsp::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDupEndRsp::~NotifyDupEndRsp() {
  SharedDtor();
}

void NotifyDupEndRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDupEndRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDupEndRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDupEndRsp_descriptor_;
}

const NotifyDupEndRsp& NotifyDupEndRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyDupEndRsp* NotifyDupEndRsp::default_instance_ = NULL;

NotifyDupEndRsp* NotifyDupEndRsp::New() const {
  return new NotifyDupEndRsp;
}

void NotifyDupEndRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDupEndRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyDupEndRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDupEndRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDupEndRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dupId = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDupEndRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDupEndRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDupEndRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDupEndRsp::MergeFrom(const NotifyDupEndRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDupEndRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDupEndRsp::CopyFrom(const NotifyDupEndRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDupEndRsp::IsInitialized() const {

  return true;
}

void NotifyDupEndRsp::Swap(NotifyDupEndRsp* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDupEndRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDupEndRsp_descriptor_;
  metadata.reflection = NotifyDupEndRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyDupBeginCdRsp::kSceneIdFieldNumber;
const int NotifyDupBeginCdRsp::kDupIdFieldNumber;
const int NotifyDupBeginCdRsp::kTimeEndFieldNumber;
#endif  // !_MSC_VER

NotifyDupBeginCdRsp::NotifyDupBeginCdRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDupBeginCdRsp::InitAsDefaultInstance() {
}

NotifyDupBeginCdRsp::NotifyDupBeginCdRsp(const NotifyDupBeginCdRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDupBeginCdRsp::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  dupid_ = GOOGLE_ULONGLONG(0);
  timeend_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDupBeginCdRsp::~NotifyDupBeginCdRsp() {
  SharedDtor();
}

void NotifyDupBeginCdRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDupBeginCdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDupBeginCdRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDupBeginCdRsp_descriptor_;
}

const NotifyDupBeginCdRsp& NotifyDupBeginCdRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyDupBeginCdRsp* NotifyDupBeginCdRsp::default_instance_ = NULL;

NotifyDupBeginCdRsp* NotifyDupBeginCdRsp::New() const {
  return new NotifyDupBeginCdRsp;
}

void NotifyDupBeginCdRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_ULONGLONG(0);
    dupid_ = GOOGLE_ULONGLONG(0);
    timeend_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDupBeginCdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupId;
        break;
      }

      // optional uint64 dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timeEnd;
        break;
      }

      // optional uint64 timeEnd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeend_)));
          set_has_timeend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyDupBeginCdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sceneid(), output);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional uint64 timeEnd = 3;
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timeend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDupBeginCdRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sceneid(), target);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional uint64 timeEnd = 3;
  if (has_timeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timeend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDupBeginCdRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 dupId = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional uint64 timeEnd = 3;
    if (has_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDupBeginCdRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDupBeginCdRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDupBeginCdRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDupBeginCdRsp::MergeFrom(const NotifyDupBeginCdRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_timeend()) {
      set_timeend(from.timeend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDupBeginCdRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDupBeginCdRsp::CopyFrom(const NotifyDupBeginCdRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDupBeginCdRsp::IsInitialized() const {

  return true;
}

void NotifyDupBeginCdRsp::Swap(NotifyDupBeginCdRsp* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(dupid_, other->dupid_);
    std::swap(timeend_, other->timeend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDupBeginCdRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDupBeginCdRsp_descriptor_;
  metadata.reflection = NotifyDupBeginCdRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecvTowerDupReq::kIdFieldNumber;
#endif  // !_MSC_VER

RecvTowerDupReq::RecvTowerDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecvTowerDupReq::InitAsDefaultInstance() {
}

RecvTowerDupReq::RecvTowerDupReq(const RecvTowerDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecvTowerDupReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecvTowerDupReq::~RecvTowerDupReq() {
  SharedDtor();
}

void RecvTowerDupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecvTowerDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvTowerDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecvTowerDupReq_descriptor_;
}

const RecvTowerDupReq& RecvTowerDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

RecvTowerDupReq* RecvTowerDupReq::default_instance_ = NULL;

RecvTowerDupReq* RecvTowerDupReq::New() const {
  return new RecvTowerDupReq;
}

void RecvTowerDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecvTowerDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecvTowerDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecvTowerDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecvTowerDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvTowerDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecvTowerDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecvTowerDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecvTowerDupReq::MergeFrom(const RecvTowerDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecvTowerDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvTowerDupReq::CopyFrom(const RecvTowerDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvTowerDupReq::IsInitialized() const {

  return true;
}

void RecvTowerDupReq::Swap(RecvTowerDupReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecvTowerDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecvTowerDupReq_descriptor_;
  metadata.reflection = RecvTowerDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecvTowerDupRsp::kResultFieldNumber;
const int RecvTowerDupRsp::kIdFieldNumber;
#endif  // !_MSC_VER

RecvTowerDupRsp::RecvTowerDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecvTowerDupRsp::InitAsDefaultInstance() {
}

RecvTowerDupRsp::RecvTowerDupRsp(const RecvTowerDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecvTowerDupRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecvTowerDupRsp::~RecvTowerDupRsp() {
  SharedDtor();
}

void RecvTowerDupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecvTowerDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvTowerDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecvTowerDupRsp_descriptor_;
}

const RecvTowerDupRsp& RecvTowerDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

RecvTowerDupRsp* RecvTowerDupRsp::default_instance_ = NULL;

RecvTowerDupRsp* RecvTowerDupRsp::New() const {
  return new RecvTowerDupRsp;
}

void RecvTowerDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecvTowerDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecvTowerDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecvTowerDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecvTowerDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvTowerDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecvTowerDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecvTowerDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecvTowerDupRsp::MergeFrom(const RecvTowerDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecvTowerDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvTowerDupRsp::CopyFrom(const RecvTowerDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvTowerDupRsp::IsInitialized() const {

  return true;
}

void RecvTowerDupRsp::Swap(RecvTowerDupRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecvTowerDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecvTowerDupRsp_descriptor_;
  metadata.reflection = RecvTowerDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyDupNumReq::kGroupFieldNumber;
const int BuyDupNumReq::kNumFieldNumber;
#endif  // !_MSC_VER

BuyDupNumReq::BuyDupNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyDupNumReq::InitAsDefaultInstance() {
}

BuyDupNumReq::BuyDupNumReq(const BuyDupNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyDupNumReq::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyDupNumReq::~BuyDupNumReq() {
  SharedDtor();
}

void BuyDupNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyDupNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyDupNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyDupNumReq_descriptor_;
}

const BuyDupNumReq& BuyDupNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

BuyDupNumReq* BuyDupNumReq::default_instance_ = NULL;

BuyDupNumReq* BuyDupNumReq::New() const {
  return new BuyDupNumReq;
}

void BuyDupNumReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyDupNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyDupNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyDupNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyDupNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyDupNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyDupNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyDupNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyDupNumReq::MergeFrom(const BuyDupNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyDupNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyDupNumReq::CopyFrom(const BuyDupNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyDupNumReq::IsInitialized() const {

  return true;
}

void BuyDupNumReq::Swap(BuyDupNumReq* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyDupNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyDupNumReq_descriptor_;
  metadata.reflection = BuyDupNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyDupNumRsp::kResultFieldNumber;
const int BuyDupNumRsp::kGroupFieldNumber;
const int BuyDupNumRsp::kNumFieldNumber;
#endif  // !_MSC_VER

BuyDupNumRsp::BuyDupNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyDupNumRsp::InitAsDefaultInstance() {
}

BuyDupNumRsp::BuyDupNumRsp(const BuyDupNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyDupNumRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  group_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyDupNumRsp::~BuyDupNumRsp() {
  SharedDtor();
}

void BuyDupNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyDupNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyDupNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyDupNumRsp_descriptor_;
}

const BuyDupNumRsp& BuyDupNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

BuyDupNumRsp* BuyDupNumRsp::default_instance_ = NULL;

BuyDupNumRsp* BuyDupNumRsp::New() const {
  return new BuyDupNumRsp;
}

void BuyDupNumRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    group_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyDupNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // optional int32 group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyDupNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyDupNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyDupNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyDupNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyDupNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyDupNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyDupNumRsp::MergeFrom(const BuyDupNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyDupNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyDupNumRsp::CopyFrom(const BuyDupNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyDupNumRsp::IsInitialized() const {

  return true;
}

void BuyDupNumRsp::Swap(BuyDupNumRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(group_, other->group_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyDupNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyDupNumRsp_descriptor_;
  metadata.reflection = BuyDupNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTowerRecordReq::kIdFieldNumber;
#endif  // !_MSC_VER

DupTowerRecordReq::DupTowerRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTowerRecordReq::InitAsDefaultInstance() {
}

DupTowerRecordReq::DupTowerRecordReq(const DupTowerRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTowerRecordReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTowerRecordReq::~DupTowerRecordReq() {
  SharedDtor();
}

void DupTowerRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupTowerRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTowerRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTowerRecordReq_descriptor_;
}

const DupTowerRecordReq& DupTowerRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupTowerRecordReq* DupTowerRecordReq::default_instance_ = NULL;

DupTowerRecordReq* DupTowerRecordReq::New() const {
  return new DupTowerRecordReq;
}

void DupTowerRecordReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTowerRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTowerRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTowerRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTowerRecordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTowerRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTowerRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTowerRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTowerRecordReq::MergeFrom(const DupTowerRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTowerRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTowerRecordReq::CopyFrom(const DupTowerRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTowerRecordReq::IsInitialized() const {

  return true;
}

void DupTowerRecordReq::Swap(DupTowerRecordReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTowerRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTowerRecordReq_descriptor_;
  metadata.reflection = DupTowerRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTowerRecordRsp::kIdFieldNumber;
const int DupTowerRecordRsp::kEntrysFieldNumber;
#endif  // !_MSC_VER

DupTowerRecordRsp::DupTowerRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTowerRecordRsp::InitAsDefaultInstance() {
}

DupTowerRecordRsp::DupTowerRecordRsp(const DupTowerRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTowerRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTowerRecordRsp::~DupTowerRecordRsp() {
  SharedDtor();
}

void DupTowerRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupTowerRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTowerRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTowerRecordRsp_descriptor_;
}

const DupTowerRecordRsp& DupTowerRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupTowerRecordRsp* DupTowerRecordRsp::default_instance_ = NULL;

DupTowerRecordRsp* DupTowerRecordRsp::New() const {
  return new DupTowerRecordRsp;
}

void DupTowerRecordRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTowerRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.DupTowerRecordEntry entrys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTowerRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto_ff.DupTowerRecordEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entrys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTowerRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.DupTowerRecordEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entrys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTowerRecordRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .proto_ff.DupTowerRecordEntry entrys = 2;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTowerRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTowerRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTowerRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTowerRecordRsp::MergeFrom(const DupTowerRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTowerRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTowerRecordRsp::CopyFrom(const DupTowerRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTowerRecordRsp::IsInitialized() const {

  return true;
}

void DupTowerRecordRsp::Swap(DupTowerRecordRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    entrys_.Swap(&other->entrys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTowerRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTowerRecordRsp_descriptor_;
  metadata.reflection = DupTowerRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTeamInviteReq::kDupidFieldNumber;
const int DupTeamInviteReq::kMergeNumFieldNumber;
#endif  // !_MSC_VER

DupTeamInviteReq::DupTeamInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTeamInviteReq::InitAsDefaultInstance() {
}

DupTeamInviteReq::DupTeamInviteReq(const DupTeamInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTeamInviteReq::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  mergenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTeamInviteReq::~DupTeamInviteReq() {
  SharedDtor();
}

void DupTeamInviteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupTeamInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTeamInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTeamInviteReq_descriptor_;
}

const DupTeamInviteReq& DupTeamInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupTeamInviteReq* DupTeamInviteReq::default_instance_ = NULL;

DupTeamInviteReq* DupTeamInviteReq::New() const {
  return new DupTeamInviteReq;
}

void DupTeamInviteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = GOOGLE_ULONGLONG(0);
    mergenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTeamInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 dupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mergeNum;
        break;
      }

      // optional uint32 mergeNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mergeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mergenum_)));
          set_has_mergenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTeamInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 dupid = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dupid(), output);
  }

  // optional uint32 mergeNum = 2;
  if (has_mergenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mergenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTeamInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 dupid = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dupid(), target);
  }

  // optional uint32 mergeNum = 2;
  if (has_mergenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mergenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTeamInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 dupid = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional uint32 mergeNum = 2;
    if (has_mergenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mergenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTeamInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTeamInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTeamInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTeamInviteReq::MergeFrom(const DupTeamInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_mergenum()) {
      set_mergenum(from.mergenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTeamInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTeamInviteReq::CopyFrom(const DupTeamInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTeamInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DupTeamInviteReq::Swap(DupTeamInviteReq* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    std::swap(mergenum_, other->mergenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTeamInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTeamInviteReq_descriptor_;
  metadata.reflection = DupTeamInviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTeamInviteRsp::kRetFieldNumber;
const int DupTeamInviteRsp::kDupidFieldNumber;
#endif  // !_MSC_VER

DupTeamInviteRsp::DupTeamInviteRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTeamInviteRsp::InitAsDefaultInstance() {
}

DupTeamInviteRsp::DupTeamInviteRsp(const DupTeamInviteRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTeamInviteRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTeamInviteRsp::~DupTeamInviteRsp() {
  SharedDtor();
}

void DupTeamInviteRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupTeamInviteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTeamInviteRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTeamInviteRsp_descriptor_;
}

const DupTeamInviteRsp& DupTeamInviteRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupTeamInviteRsp* DupTeamInviteRsp::default_instance_ = NULL;

DupTeamInviteRsp* DupTeamInviteRsp::New() const {
  return new DupTeamInviteRsp;
}

void DupTeamInviteRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    dupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTeamInviteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupid;
        break;
      }

      // required uint64 dupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTeamInviteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint64 dupid = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTeamInviteRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint64 dupid = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTeamInviteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required uint64 dupid = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTeamInviteRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTeamInviteRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTeamInviteRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTeamInviteRsp::MergeFrom(const DupTeamInviteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTeamInviteRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTeamInviteRsp::CopyFrom(const DupTeamInviteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTeamInviteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void DupTeamInviteRsp::Swap(DupTeamInviteRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(dupid_, other->dupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTeamInviteRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTeamInviteRsp_descriptor_;
  metadata.reflection = DupTeamInviteRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyDupTeamInviteStateRsp::kRetFieldNumber;
const int NotifyDupTeamInviteStateRsp::kTypeFieldNumber;
const int NotifyDupTeamInviteStateRsp::kDupidFieldNumber;
const int NotifyDupTeamInviteStateRsp::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifyDupTeamInviteStateRsp::NotifyDupTeamInviteStateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDupTeamInviteStateRsp::InitAsDefaultInstance() {
}

NotifyDupTeamInviteStateRsp::NotifyDupTeamInviteStateRsp(const NotifyDupTeamInviteStateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDupTeamInviteStateRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  dupid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDupTeamInviteStateRsp::~NotifyDupTeamInviteStateRsp() {
  SharedDtor();
}

void NotifyDupTeamInviteStateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDupTeamInviteStateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDupTeamInviteStateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDupTeamInviteStateRsp_descriptor_;
}

const NotifyDupTeamInviteStateRsp& NotifyDupTeamInviteStateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyDupTeamInviteStateRsp* NotifyDupTeamInviteStateRsp::default_instance_ = NULL;

NotifyDupTeamInviteStateRsp* NotifyDupTeamInviteStateRsp::New() const {
  return new NotifyDupTeamInviteStateRsp;
}

void NotifyDupTeamInviteStateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
    dupid_ = GOOGLE_LONGLONG(0);
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDupTeamInviteStateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dupid;
        break;
      }

      // optional int64 dupid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.DupTeamInviteState infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyDupTeamInviteStateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int64 dupid = 3;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dupid(), output);
  }

  // repeated .proto_ff.DupTeamInviteState infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDupTeamInviteStateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int64 dupid = 3;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->dupid(), target);
  }

  // repeated .proto_ff.DupTeamInviteState infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDupTeamInviteStateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 dupid = 3;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dupid());
    }

  }
  // repeated .proto_ff.DupTeamInviteState infos = 4;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDupTeamInviteStateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDupTeamInviteStateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDupTeamInviteStateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDupTeamInviteStateRsp::MergeFrom(const NotifyDupTeamInviteStateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDupTeamInviteStateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDupTeamInviteStateRsp::CopyFrom(const NotifyDupTeamInviteStateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDupTeamInviteStateRsp::IsInitialized() const {

  return true;
}

void NotifyDupTeamInviteStateRsp::Swap(NotifyDupTeamInviteStateRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(dupid_, other->dupid_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDupTeamInviteStateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDupTeamInviteStateRsp_descriptor_;
  metadata.reflection = NotifyDupTeamInviteStateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTeamOptReq::kOptFieldNumber;
const int DupTeamOptReq::kMergeNumFieldNumber;
#endif  // !_MSC_VER

DupTeamOptReq::DupTeamOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTeamOptReq::InitAsDefaultInstance() {
}

DupTeamOptReq::DupTeamOptReq(const DupTeamOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTeamOptReq::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  mergenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTeamOptReq::~DupTeamOptReq() {
  SharedDtor();
}

void DupTeamOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupTeamOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTeamOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTeamOptReq_descriptor_;
}

const DupTeamOptReq& DupTeamOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupTeamOptReq* DupTeamOptReq::default_instance_ = NULL;

DupTeamOptReq* DupTeamOptReq::New() const {
  return new DupTeamOptReq;
}

void DupTeamOptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
    mergenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTeamOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mergeNum;
        break;
      }

      // optional uint32 mergeNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mergeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mergenum_)));
          set_has_mergenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTeamOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  // optional uint32 mergeNum = 2;
  if (has_mergenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mergenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTeamOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  // optional uint32 mergeNum = 2;
  if (has_mergenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mergenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTeamOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional uint32 mergeNum = 2;
    if (has_mergenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mergenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTeamOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTeamOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTeamOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTeamOptReq::MergeFrom(const DupTeamOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_mergenum()) {
      set_mergenum(from.mergenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTeamOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTeamOptReq::CopyFrom(const DupTeamOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTeamOptReq::IsInitialized() const {

  return true;
}

void DupTeamOptReq::Swap(DupTeamOptReq* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(mergenum_, other->mergenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTeamOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTeamOptReq_descriptor_;
  metadata.reflection = DupTeamOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTeamOptRsp::kRetFieldNumber;
const int DupTeamOptRsp::kOptFieldNumber;
#endif  // !_MSC_VER

DupTeamOptRsp::DupTeamOptRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTeamOptRsp::InitAsDefaultInstance() {
}

DupTeamOptRsp::DupTeamOptRsp(const DupTeamOptRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTeamOptRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTeamOptRsp::~DupTeamOptRsp() {
  SharedDtor();
}

void DupTeamOptRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupTeamOptRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTeamOptRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTeamOptRsp_descriptor_;
}

const DupTeamOptRsp& DupTeamOptRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupTeamOptRsp* DupTeamOptRsp::default_instance_ = NULL;

DupTeamOptRsp* DupTeamOptRsp::New() const {
  return new DupTeamOptRsp;
}

void DupTeamOptRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTeamOptRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }

      // optional int32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTeamOptRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTeamOptRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTeamOptRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTeamOptRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTeamOptRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTeamOptRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTeamOptRsp::MergeFrom(const DupTeamOptRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTeamOptRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTeamOptRsp::CopyFrom(const DupTeamOptRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTeamOptRsp::IsInitialized() const {

  return true;
}

void DupTeamOptRsp::Swap(DupTeamOptRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTeamOptRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTeamOptRsp_descriptor_;
  metadata.reflection = DupTeamOptRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupSweepReq::kDupidFieldNumber;
const int DupSweepReq::kNumFieldNumber;
const int DupSweepReq::kShowTypeFieldNumber;
#endif  // !_MSC_VER

DupSweepReq::DupSweepReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupSweepReq::InitAsDefaultInstance() {
}

DupSweepReq::DupSweepReq(const DupSweepReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupSweepReq::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = 0;
  num_ = 0;
  show_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupSweepReq::~DupSweepReq() {
  SharedDtor();
}

void DupSweepReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupSweepReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupSweepReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupSweepReq_descriptor_;
}

const DupSweepReq& DupSweepReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupSweepReq* DupSweepReq::default_instance_ = NULL;

DupSweepReq* DupSweepReq::New() const {
  return new DupSweepReq;
}

void DupSweepReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = 0;
    num_ = 0;
    show_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupSweepReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_type;
        break;
      }

      // optional int32 show_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_type_)));
          set_has_show_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupSweepReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dupid = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dupid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 show_type = 3;
  if (has_show_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->show_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupSweepReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dupid = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dupid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 show_type = 3;
  if (has_show_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->show_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupSweepReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dupid = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dupid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 show_type = 3;
    if (has_show_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->show_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupSweepReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupSweepReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupSweepReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupSweepReq::MergeFrom(const DupSweepReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_show_type()) {
      set_show_type(from.show_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupSweepReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupSweepReq::CopyFrom(const DupSweepReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupSweepReq::IsInitialized() const {

  return true;
}

void DupSweepReq::Swap(DupSweepReq* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    std::swap(num_, other->num_);
    std::swap(show_type_, other->show_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupSweepReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupSweepReq_descriptor_;
  metadata.reflection = DupSweepReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupSweepRsp::kRetFieldNumber;
const int DupSweepRsp::kDupidFieldNumber;
const int DupSweepRsp::kNumFieldNumber;
const int DupSweepRsp::kInfoFieldNumber;
const int DupSweepRsp::kShowTypeFieldNumber;
#endif  // !_MSC_VER

DupSweepRsp::DupSweepRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupSweepRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::DupDropProto*>(&::proto_ff::DupDropProto::default_instance());
}

DupSweepRsp::DupSweepRsp(const DupSweepRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupSweepRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  dupid_ = 0;
  num_ = 0;
  info_ = NULL;
  show_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupSweepRsp::~DupSweepRsp() {
  SharedDtor();
}

void DupSweepRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void DupSweepRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupSweepRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupSweepRsp_descriptor_;
}

const DupSweepRsp& DupSweepRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

DupSweepRsp* DupSweepRsp::default_instance_ = NULL;

DupSweepRsp* DupSweepRsp::New() const {
  return new DupSweepRsp;
}

void DupSweepRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    dupid_ = 0;
    num_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::DupDropProto::Clear();
    }
    show_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupSweepRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupid;
        break;
      }

      // optional int32 dupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .proto_ff.DupDropProto info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_type;
        break;
      }

      // optional int32 show_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_type_)));
          set_has_show_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupSweepRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 dupid = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dupid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional .proto_ff.DupDropProto info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  // optional int32 show_type = 5;
  if (has_show_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->show_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupSweepRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 dupid = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dupid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional .proto_ff.DupDropProto info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  // optional int32 show_type = 5;
  if (has_show_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->show_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupSweepRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 dupid = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dupid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional .proto_ff.DupDropProto info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int32 show_type = 5;
    if (has_show_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->show_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupSweepRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupSweepRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupSweepRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupSweepRsp::MergeFrom(const DupSweepRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::DupDropProto::MergeFrom(from.info());
    }
    if (from.has_show_type()) {
      set_show_type(from.show_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupSweepRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupSweepRsp::CopyFrom(const DupSweepRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupSweepRsp::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void DupSweepRsp::Swap(DupSweepRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(dupid_, other->dupid_);
    std::swap(num_, other->num_);
    std::swap(info_, other->info_);
    std::swap(show_type_, other->show_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupSweepRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupSweepRsp_descriptor_;
  metadata.reflection = DupSweepRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GhostDupRankReq::GhostDupRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GhostDupRankReq::InitAsDefaultInstance() {
}

GhostDupRankReq::GhostDupRankReq(const GhostDupRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GhostDupRankReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GhostDupRankReq::~GhostDupRankReq() {
  SharedDtor();
}

void GhostDupRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GhostDupRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GhostDupRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GhostDupRankReq_descriptor_;
}

const GhostDupRankReq& GhostDupRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

GhostDupRankReq* GhostDupRankReq::default_instance_ = NULL;

GhostDupRankReq* GhostDupRankReq::New() const {
  return new GhostDupRankReq;
}

void GhostDupRankReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GhostDupRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GhostDupRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GhostDupRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GhostDupRankReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GhostDupRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GhostDupRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GhostDupRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GhostDupRankReq::MergeFrom(const GhostDupRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GhostDupRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GhostDupRankReq::CopyFrom(const GhostDupRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostDupRankReq::IsInitialized() const {

  return true;
}

void GhostDupRankReq::Swap(GhostDupRankReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GhostDupRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GhostDupRankReq_descriptor_;
  metadata.reflection = GhostDupRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GHostDupRankRsp::kRanksFieldNumber;
const int GHostDupRankRsp::kMyWaveFieldNumber;
const int GHostDupRankRsp::kMyTimeFieldNumber;
const int GHostDupRankRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

GHostDupRankRsp::GHostDupRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GHostDupRankRsp::InitAsDefaultInstance() {
}

GHostDupRankRsp::GHostDupRankRsp(const GHostDupRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GHostDupRankRsp::SharedCtor() {
  _cached_size_ = 0;
  my_wave_ = 0;
  my_time_ = 0;
  my_rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GHostDupRankRsp::~GHostDupRankRsp() {
  SharedDtor();
}

void GHostDupRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GHostDupRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GHostDupRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GHostDupRankRsp_descriptor_;
}

const GHostDupRankRsp& GHostDupRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

GHostDupRankRsp* GHostDupRankRsp::default_instance_ = NULL;

GHostDupRankRsp* GHostDupRankRsp::New() const {
  return new GHostDupRankRsp;
}

void GHostDupRankRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    my_wave_ = 0;
    my_time_ = 0;
    my_rank_ = 0;
  }
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GHostDupRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GHostDupRankInfo ranks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ranks;
        if (input->ExpectTag(16)) goto parse_my_wave;
        break;
      }

      // optional int32 my_wave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_wave_)));
          set_has_my_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_my_time;
        break;
      }

      // optional int32 my_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_time_)));
          set_has_my_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_my_rank;
        break;
      }

      // optional int32 my_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_rank_)));
          set_has_my_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GHostDupRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GHostDupRankInfo ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranks(i), output);
  }

  // optional int32 my_wave = 2;
  if (has_my_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->my_wave(), output);
  }

  // optional int32 my_time = 3;
  if (has_my_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->my_time(), output);
  }

  // optional int32 my_rank = 4;
  if (has_my_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->my_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GHostDupRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GHostDupRankInfo ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranks(i), target);
  }

  // optional int32 my_wave = 2;
  if (has_my_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->my_wave(), target);
  }

  // optional int32 my_time = 3;
  if (has_my_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->my_time(), target);
  }

  // optional int32 my_rank = 4;
  if (has_my_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->my_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GHostDupRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 my_wave = 2;
    if (has_my_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_wave());
    }

    // optional int32 my_time = 3;
    if (has_my_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_time());
    }

    // optional int32 my_rank = 4;
    if (has_my_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_rank());
    }

  }
  // repeated .proto_ff.GHostDupRankInfo ranks = 1;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GHostDupRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GHostDupRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GHostDupRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GHostDupRankRsp::MergeFrom(const GHostDupRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_my_wave()) {
      set_my_wave(from.my_wave());
    }
    if (from.has_my_time()) {
      set_my_time(from.my_time());
    }
    if (from.has_my_rank()) {
      set_my_rank(from.my_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GHostDupRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GHostDupRankRsp::CopyFrom(const GHostDupRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GHostDupRankRsp::IsInitialized() const {

  return true;
}

void GHostDupRankRsp::Swap(GHostDupRankRsp* other) {
  if (other != this) {
    ranks_.Swap(&other->ranks_);
    std::swap(my_wave_, other->my_wave_);
    std::swap(my_time_, other->my_time_);
    std::swap(my_rank_, other->my_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GHostDupRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GHostDupRankRsp_descriptor_;
  metadata.reflection = GHostDupRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGHostDupRun::kFightFieldNumber;
const int NotifyGHostDupRun::kCurwaveFieldNumber;
const int NotifyGHostDupRun::kNumFieldNumber;
#endif  // !_MSC_VER

NotifyGHostDupRun::NotifyGHostDupRun()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyGHostDupRun::InitAsDefaultInstance() {
}

NotifyGHostDupRun::NotifyGHostDupRun(const NotifyGHostDupRun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGHostDupRun::SharedCtor() {
  _cached_size_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  curwave_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGHostDupRun::~NotifyGHostDupRun() {
  SharedDtor();
}

void NotifyGHostDupRun::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGHostDupRun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGHostDupRun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGHostDupRun_descriptor_;
}

const NotifyGHostDupRun& NotifyGHostDupRun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyGHostDupRun* NotifyGHostDupRun::default_instance_ = NULL;

NotifyGHostDupRun* NotifyGHostDupRun::New() const {
  return new NotifyGHostDupRun;
}

void NotifyGHostDupRun::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fight_ = GOOGLE_ULONGLONG(0);
    curwave_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGHostDupRun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curwave;
        break;
      }

      // optional int32 curwave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curwave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curwave_)));
          set_has_curwave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGHostDupRun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fight = 1;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fight(), output);
  }

  // optional int32 curwave = 2;
  if (has_curwave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curwave(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyGHostDupRun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fight = 1;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fight(), target);
  }

  // optional int32 curwave = 2;
  if (has_curwave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curwave(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyGHostDupRun::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fight = 1;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional int32 curwave = 2;
    if (has_curwave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curwave());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGHostDupRun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGHostDupRun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGHostDupRun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGHostDupRun::MergeFrom(const NotifyGHostDupRun& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_curwave()) {
      set_curwave(from.curwave());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGHostDupRun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGHostDupRun::CopyFrom(const NotifyGHostDupRun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGHostDupRun::IsInitialized() const {

  return true;
}

void NotifyGHostDupRun::Swap(NotifyGHostDupRun* other) {
  if (other != this) {
    std::swap(fight_, other->fight_);
    std::swap(curwave_, other->curwave_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGHostDupRun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGHostDupRun_descriptor_;
  metadata.reflection = NotifyGHostDupRun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGHostChgStep::kTimeFieldNumber;
#endif  // !_MSC_VER

NotifyGHostChgStep::NotifyGHostChgStep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyGHostChgStep::InitAsDefaultInstance() {
}

NotifyGHostChgStep::NotifyGHostChgStep(const NotifyGHostChgStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGHostChgStep::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGHostChgStep::~NotifyGHostChgStep() {
  SharedDtor();
}

void NotifyGHostChgStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGHostChgStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGHostChgStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGHostChgStep_descriptor_;
}

const NotifyGHostChgStep& NotifyGHostChgStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyGHostChgStep* NotifyGHostChgStep::default_instance_ = NULL;

NotifyGHostChgStep* NotifyGHostChgStep::New() const {
  return new NotifyGHostChgStep;
}

void NotifyGHostChgStep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGHostChgStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGHostChgStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyGHostChgStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyGHostChgStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGHostChgStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGHostChgStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGHostChgStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGHostChgStep::MergeFrom(const NotifyGHostChgStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGHostChgStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGHostChgStep::CopyFrom(const NotifyGHostChgStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGHostChgStep::IsInitialized() const {

  return true;
}

void NotifyGHostChgStep::Swap(NotifyGHostChgStep* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGHostChgStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGHostChgStep_descriptor_;
  metadata.reflection = NotifyGHostChgStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGHostDupRes::kCurwaveFieldNumber;
const int NotifyGHostDupRes::kTimeFieldNumber;
const int NotifyGHostDupRes::kRewardFieldNumber;
#endif  // !_MSC_VER

NotifyGHostDupRes::NotifyGHostDupRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyGHostDupRes::InitAsDefaultInstance() {
}

NotifyGHostDupRes::NotifyGHostDupRes(const NotifyGHostDupRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGHostDupRes::SharedCtor() {
  _cached_size_ = 0;
  curwave_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGHostDupRes::~NotifyGHostDupRes() {
  SharedDtor();
}

void NotifyGHostDupRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGHostDupRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGHostDupRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGHostDupRes_descriptor_;
}

const NotifyGHostDupRes& NotifyGHostDupRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyGHostDupRes* NotifyGHostDupRes::default_instance_ = NULL;

NotifyGHostDupRes* NotifyGHostDupRes::New() const {
  return new NotifyGHostDupRes;
}

void NotifyGHostDupRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curwave_ = 0;
    time_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGHostDupRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 curwave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curwave_)));
          set_has_curwave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGHostDupRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 curwave = 1;
  if (has_curwave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curwave(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // repeated .proto_ff.ItemProtoInfo reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyGHostDupRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 curwave = 1;
  if (has_curwave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curwave(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // repeated .proto_ff.ItemProtoInfo reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyGHostDupRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 curwave = 1;
    if (has_curwave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curwave());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  // repeated .proto_ff.ItemProtoInfo reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGHostDupRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGHostDupRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGHostDupRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGHostDupRes::MergeFrom(const NotifyGHostDupRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curwave()) {
      set_curwave(from.curwave());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGHostDupRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGHostDupRes::CopyFrom(const NotifyGHostDupRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGHostDupRes::IsInitialized() const {

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyGHostDupRes::Swap(NotifyGHostDupRes* other) {
  if (other != this) {
    std::swap(curwave_, other->curwave_);
    std::swap(time_, other->time_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGHostDupRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGHostDupRes_descriptor_;
  metadata.reflection = NotifyGHostDupRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GhostRecvPassReq::kIdFieldNumber;
#endif  // !_MSC_VER

GhostRecvPassReq::GhostRecvPassReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GhostRecvPassReq::InitAsDefaultInstance() {
}

GhostRecvPassReq::GhostRecvPassReq(const GhostRecvPassReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GhostRecvPassReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GhostRecvPassReq::~GhostRecvPassReq() {
  SharedDtor();
}

void GhostRecvPassReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GhostRecvPassReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GhostRecvPassReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GhostRecvPassReq_descriptor_;
}

const GhostRecvPassReq& GhostRecvPassReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

GhostRecvPassReq* GhostRecvPassReq::default_instance_ = NULL;

GhostRecvPassReq* GhostRecvPassReq::New() const {
  return new GhostRecvPassReq;
}

void GhostRecvPassReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GhostRecvPassReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GhostRecvPassReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GhostRecvPassReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GhostRecvPassReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GhostRecvPassReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GhostRecvPassReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GhostRecvPassReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GhostRecvPassReq::MergeFrom(const GhostRecvPassReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GhostRecvPassReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GhostRecvPassReq::CopyFrom(const GhostRecvPassReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostRecvPassReq::IsInitialized() const {

  return true;
}

void GhostRecvPassReq::Swap(GhostRecvPassReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GhostRecvPassReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GhostRecvPassReq_descriptor_;
  metadata.reflection = GhostRecvPassReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GhostRecvPassRsp::kRetFieldNumber;
const int GhostRecvPassRsp::kIdFieldNumber;
#endif  // !_MSC_VER

GhostRecvPassRsp::GhostRecvPassRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GhostRecvPassRsp::InitAsDefaultInstance() {
}

GhostRecvPassRsp::GhostRecvPassRsp(const GhostRecvPassRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GhostRecvPassRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GhostRecvPassRsp::~GhostRecvPassRsp() {
  SharedDtor();
}

void GhostRecvPassRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GhostRecvPassRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GhostRecvPassRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GhostRecvPassRsp_descriptor_;
}

const GhostRecvPassRsp& GhostRecvPassRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

GhostRecvPassRsp* GhostRecvPassRsp::default_instance_ = NULL;

GhostRecvPassRsp* GhostRecvPassRsp::New() const {
  return new GhostRecvPassRsp;
}

void GhostRecvPassRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GhostRecvPassRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GhostRecvPassRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GhostRecvPassRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GhostRecvPassRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GhostRecvPassRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GhostRecvPassRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GhostRecvPassRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GhostRecvPassRsp::MergeFrom(const GhostRecvPassRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GhostRecvPassRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GhostRecvPassRsp::CopyFrom(const GhostRecvPassRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostRecvPassRsp::IsInitialized() const {

  return true;
}

void GhostRecvPassRsp::Swap(GhostRecvPassRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GhostRecvPassRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GhostRecvPassRsp_descriptor_;
  metadata.reflection = GhostRecvPassRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

YaotaReq::YaotaReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YaotaReq::InitAsDefaultInstance() {
}

YaotaReq::YaotaReq(const YaotaReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YaotaReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YaotaReq::~YaotaReq() {
  SharedDtor();
}

void YaotaReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YaotaReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YaotaReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaotaReq_descriptor_;
}

const YaotaReq& YaotaReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

YaotaReq* YaotaReq::default_instance_ = NULL;

YaotaReq* YaotaReq::New() const {
  return new YaotaReq;
}

void YaotaReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YaotaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void YaotaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YaotaReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YaotaReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YaotaReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YaotaReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YaotaReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YaotaReq::MergeFrom(const YaotaReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YaotaReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YaotaReq::CopyFrom(const YaotaReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YaotaReq::IsInitialized() const {

  return true;
}

void YaotaReq::Swap(YaotaReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YaotaReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YaotaReq_descriptor_;
  metadata.reflection = YaotaReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyYaotaFirstPass::kCanRecvFirstPassIdsFieldNumber;
const int NotifyYaotaFirstPass::kFirstPassIdsFieldNumber;
#endif  // !_MSC_VER

NotifyYaotaFirstPass::NotifyYaotaFirstPass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyYaotaFirstPass::InitAsDefaultInstance() {
}

NotifyYaotaFirstPass::NotifyYaotaFirstPass(const NotifyYaotaFirstPass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyYaotaFirstPass::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyYaotaFirstPass::~NotifyYaotaFirstPass() {
  SharedDtor();
}

void NotifyYaotaFirstPass::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyYaotaFirstPass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyYaotaFirstPass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyYaotaFirstPass_descriptor_;
}

const NotifyYaotaFirstPass& NotifyYaotaFirstPass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyYaotaFirstPass* NotifyYaotaFirstPass::default_instance_ = NULL;

NotifyYaotaFirstPass* NotifyYaotaFirstPass::New() const {
  return new NotifyYaotaFirstPass;
}

void NotifyYaotaFirstPass::Clear() {
  can_recv_first_pass_ids_.Clear();
  first_pass_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyYaotaFirstPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 can_recv_first_pass_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_recv_first_pass_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_can_recv_first_pass_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_can_recv_first_pass_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_can_recv_first_pass_ids;
        if (input->ExpectTag(16)) goto parse_first_pass_ids;
        break;
      }

      // repeated int32 first_pass_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_pass_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_first_pass_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_first_pass_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_pass_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyYaotaFirstPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 can_recv_first_pass_ids = 1;
  for (int i = 0; i < this->can_recv_first_pass_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->can_recv_first_pass_ids(i), output);
  }

  // repeated int32 first_pass_ids = 2;
  for (int i = 0; i < this->first_pass_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->first_pass_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyYaotaFirstPass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 can_recv_first_pass_ids = 1;
  for (int i = 0; i < this->can_recv_first_pass_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->can_recv_first_pass_ids(i), target);
  }

  // repeated int32 first_pass_ids = 2;
  for (int i = 0; i < this->first_pass_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->first_pass_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyYaotaFirstPass::ByteSize() const {
  int total_size = 0;

  // repeated int32 can_recv_first_pass_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->can_recv_first_pass_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->can_recv_first_pass_ids(i));
    }
    total_size += 1 * this->can_recv_first_pass_ids_size() + data_size;
  }

  // repeated int32 first_pass_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_pass_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->first_pass_ids(i));
    }
    total_size += 1 * this->first_pass_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyYaotaFirstPass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyYaotaFirstPass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyYaotaFirstPass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyYaotaFirstPass::MergeFrom(const NotifyYaotaFirstPass& from) {
  GOOGLE_CHECK_NE(&from, this);
  can_recv_first_pass_ids_.MergeFrom(from.can_recv_first_pass_ids_);
  first_pass_ids_.MergeFrom(from.first_pass_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyYaotaFirstPass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyYaotaFirstPass::CopyFrom(const NotifyYaotaFirstPass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyYaotaFirstPass::IsInitialized() const {

  return true;
}

void NotifyYaotaFirstPass::Swap(NotifyYaotaFirstPass* other) {
  if (other != this) {
    can_recv_first_pass_ids_.Swap(&other->can_recv_first_pass_ids_);
    first_pass_ids_.Swap(&other->first_pass_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyYaotaFirstPass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyYaotaFirstPass_descriptor_;
  metadata.reflection = NotifyYaotaFirstPass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YaotaFirstPassInfoReq::kDupidFieldNumber;
#endif  // !_MSC_VER

YaotaFirstPassInfoReq::YaotaFirstPassInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YaotaFirstPassInfoReq::InitAsDefaultInstance() {
}

YaotaFirstPassInfoReq::YaotaFirstPassInfoReq(const YaotaFirstPassInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YaotaFirstPassInfoReq::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YaotaFirstPassInfoReq::~YaotaFirstPassInfoReq() {
  SharedDtor();
}

void YaotaFirstPassInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YaotaFirstPassInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YaotaFirstPassInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaotaFirstPassInfoReq_descriptor_;
}

const YaotaFirstPassInfoReq& YaotaFirstPassInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

YaotaFirstPassInfoReq* YaotaFirstPassInfoReq::default_instance_ = NULL;

YaotaFirstPassInfoReq* YaotaFirstPassInfoReq::New() const {
  return new YaotaFirstPassInfoReq;
}

void YaotaFirstPassInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YaotaFirstPassInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YaotaFirstPassInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dupid = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YaotaFirstPassInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dupid = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YaotaFirstPassInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dupid = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YaotaFirstPassInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YaotaFirstPassInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YaotaFirstPassInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YaotaFirstPassInfoReq::MergeFrom(const YaotaFirstPassInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YaotaFirstPassInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YaotaFirstPassInfoReq::CopyFrom(const YaotaFirstPassInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YaotaFirstPassInfoReq::IsInitialized() const {

  return true;
}

void YaotaFirstPassInfoReq::Swap(YaotaFirstPassInfoReq* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YaotaFirstPassInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YaotaFirstPassInfoReq_descriptor_;
  metadata.reflection = YaotaFirstPassInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YaotaFirstPassInfoRsp::kDupidFieldNumber;
const int YaotaFirstPassInfoRsp::kInfoFieldNumber;
const int YaotaFirstPassInfoRsp::kTimeFieldNumber;
#endif  // !_MSC_VER

YaotaFirstPassInfoRsp::YaotaFirstPassInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YaotaFirstPassInfoRsp::InitAsDefaultInstance() {
}

YaotaFirstPassInfoRsp::YaotaFirstPassInfoRsp(const YaotaFirstPassInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YaotaFirstPassInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YaotaFirstPassInfoRsp::~YaotaFirstPassInfoRsp() {
  SharedDtor();
}

void YaotaFirstPassInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YaotaFirstPassInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YaotaFirstPassInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaotaFirstPassInfoRsp_descriptor_;
}

const YaotaFirstPassInfoRsp& YaotaFirstPassInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

YaotaFirstPassInfoRsp* YaotaFirstPassInfoRsp::default_instance_ = NULL;

YaotaFirstPassInfoRsp* YaotaFirstPassInfoRsp::New() const {
  return new YaotaFirstPassInfoRsp;
}

void YaotaFirstPassInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YaotaFirstPassInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.RolePlayerMiniInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YaotaFirstPassInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dupid = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dupid(), output);
  }

  // repeated .proto_ff.RolePlayerMiniInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YaotaFirstPassInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dupid = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dupid(), target);
  }

  // repeated .proto_ff.RolePlayerMiniInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YaotaFirstPassInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dupid = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dupid());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  // repeated .proto_ff.RolePlayerMiniInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YaotaFirstPassInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YaotaFirstPassInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YaotaFirstPassInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YaotaFirstPassInfoRsp::MergeFrom(const YaotaFirstPassInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YaotaFirstPassInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YaotaFirstPassInfoRsp::CopyFrom(const YaotaFirstPassInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YaotaFirstPassInfoRsp::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void YaotaFirstPassInfoRsp::Swap(YaotaFirstPassInfoRsp* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    info_.Swap(&other->info_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YaotaFirstPassInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YaotaFirstPassInfoRsp_descriptor_;
  metadata.reflection = YaotaFirstPassInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YaotaRecvReq::kTypeFieldNumber;
const int YaotaRecvReq::kDupIdFieldNumber;
#endif  // !_MSC_VER

YaotaRecvReq::YaotaRecvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YaotaRecvReq::InitAsDefaultInstance() {
}

YaotaRecvReq::YaotaRecvReq(const YaotaRecvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YaotaRecvReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  dupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YaotaRecvReq::~YaotaRecvReq() {
  SharedDtor();
}

void YaotaRecvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YaotaRecvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YaotaRecvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaotaRecvReq_descriptor_;
}

const YaotaRecvReq& YaotaRecvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

YaotaRecvReq* YaotaRecvReq::default_instance_ = NULL;

YaotaRecvReq* YaotaRecvReq::New() const {
  return new YaotaRecvReq;
}

void YaotaRecvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    dupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YaotaRecvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupId;
        break;
      }

      // optional int32 dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YaotaRecvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 dupId = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YaotaRecvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 dupId = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YaotaRecvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 dupId = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YaotaRecvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YaotaRecvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YaotaRecvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YaotaRecvReq::MergeFrom(const YaotaRecvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YaotaRecvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YaotaRecvReq::CopyFrom(const YaotaRecvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YaotaRecvReq::IsInitialized() const {

  return true;
}

void YaotaRecvReq::Swap(YaotaRecvReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(dupid_, other->dupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YaotaRecvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YaotaRecvReq_descriptor_;
  metadata.reflection = YaotaRecvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YaotaRecvRsp::kRetFieldNumber;
const int YaotaRecvRsp::kTypeFieldNumber;
const int YaotaRecvRsp::kDupIdFieldNumber;
#endif  // !_MSC_VER

YaotaRecvRsp::YaotaRecvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YaotaRecvRsp::InitAsDefaultInstance() {
}

YaotaRecvRsp::YaotaRecvRsp(const YaotaRecvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YaotaRecvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  dupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YaotaRecvRsp::~YaotaRecvRsp() {
  SharedDtor();
}

void YaotaRecvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YaotaRecvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YaotaRecvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaotaRecvRsp_descriptor_;
}

const YaotaRecvRsp& YaotaRecvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

YaotaRecvRsp* YaotaRecvRsp::default_instance_ = NULL;

YaotaRecvRsp* YaotaRecvRsp::New() const {
  return new YaotaRecvRsp;
}

void YaotaRecvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
    dupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YaotaRecvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dupId;
        break;
      }

      // optional int32 dupId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YaotaRecvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 dupId = 3;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YaotaRecvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 dupId = 3;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YaotaRecvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 dupId = 3;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YaotaRecvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YaotaRecvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YaotaRecvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YaotaRecvRsp::MergeFrom(const YaotaRecvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YaotaRecvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YaotaRecvRsp::CopyFrom(const YaotaRecvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YaotaRecvRsp::IsInitialized() const {

  return true;
}

void YaotaRecvRsp::Swap(YaotaRecvRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(dupid_, other->dupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YaotaRecvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YaotaRecvRsp_descriptor_;
  metadata.reflection = YaotaRecvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyYaotaDupRes::kFlagFieldNumber;
const int NotifyYaotaDupRes::kRewardFieldNumber;
const int NotifyYaotaDupRes::kTimeFieldNumber;
#endif  // !_MSC_VER

NotifyYaotaDupRes::NotifyYaotaDupRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyYaotaDupRes::InitAsDefaultInstance() {
}

NotifyYaotaDupRes::NotifyYaotaDupRes(const NotifyYaotaDupRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyYaotaDupRes::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyYaotaDupRes::~NotifyYaotaDupRes() {
  SharedDtor();
}

void NotifyYaotaDupRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyYaotaDupRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyYaotaDupRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyYaotaDupRes_descriptor_;
}

const NotifyYaotaDupRes& NotifyYaotaDupRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyYaotaDupRes* NotifyYaotaDupRes::default_instance_ = NULL;

NotifyYaotaDupRes* NotifyYaotaDupRes::New() const {
  return new NotifyYaotaDupRes;
}

void NotifyYaotaDupRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
    time_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyYaotaDupRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyYaotaDupRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // repeated .proto_ff.ItemProtoInfo reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyYaotaDupRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // repeated .proto_ff.ItemProtoInfo reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyYaotaDupRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  // repeated .proto_ff.ItemProtoInfo reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyYaotaDupRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyYaotaDupRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyYaotaDupRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyYaotaDupRes::MergeFrom(const NotifyYaotaDupRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyYaotaDupRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyYaotaDupRes::CopyFrom(const NotifyYaotaDupRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyYaotaDupRes::IsInitialized() const {

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyYaotaDupRes::Swap(NotifyYaotaDupRes* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    reward_.Swap(&other->reward_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyYaotaDupRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyYaotaDupRes_descriptor_;
  metadata.reflection = NotifyYaotaDupRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TowerFlashReq::TowerFlashReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TowerFlashReq::InitAsDefaultInstance() {
}

TowerFlashReq::TowerFlashReq(const TowerFlashReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TowerFlashReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerFlashReq::~TowerFlashReq() {
  SharedDtor();
}

void TowerFlashReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerFlashReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerFlashReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerFlashReq_descriptor_;
}

const TowerFlashReq& TowerFlashReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

TowerFlashReq* TowerFlashReq::default_instance_ = NULL;

TowerFlashReq* TowerFlashReq::New() const {
  return new TowerFlashReq;
}

void TowerFlashReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerFlashReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TowerFlashReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TowerFlashReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TowerFlashReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerFlashReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerFlashReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerFlashReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerFlashReq::MergeFrom(const TowerFlashReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerFlashReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerFlashReq::CopyFrom(const TowerFlashReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerFlashReq::IsInitialized() const {

  return true;
}

void TowerFlashReq::Swap(TowerFlashReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerFlashReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerFlashReq_descriptor_;
  metadata.reflection = TowerFlashReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerFlashRsp::kResultFieldNumber;
const int TowerFlashRsp::kDupIdFieldNumber;
const int TowerFlashRsp::kStarFieldNumber;
const int TowerFlashRsp::kCostSecFieldNumber;
const int TowerFlashRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

TowerFlashRsp::TowerFlashRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TowerFlashRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::DupDropProto*>(&::proto_ff::DupDropProto::default_instance());
}

TowerFlashRsp::TowerFlashRsp(const TowerFlashRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TowerFlashRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  star_ = 0;
  cost_sec_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerFlashRsp::~TowerFlashRsp() {
  SharedDtor();
}

void TowerFlashRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void TowerFlashRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerFlashRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerFlashRsp_descriptor_;
}

const TowerFlashRsp& TowerFlashRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

TowerFlashRsp* TowerFlashRsp::default_instance_ = NULL;

TowerFlashRsp* TowerFlashRsp::New() const {
  return new TowerFlashRsp;
}

void TowerFlashRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    dupid_ = GOOGLE_ULONGLONG(0);
    star_ = 0;
    cost_sec_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::DupDropProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerFlashRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupId;
        break;
      }

      // optional uint64 dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional int32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_sec;
        break;
      }

      // optional int32 cost_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_sec_)));
          set_has_cost_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .proto_ff.DupDropProto info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TowerFlashRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional int32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  // optional int32 cost_sec = 4;
  if (has_cost_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cost_sec(), output);
  }

  // optional .proto_ff.DupDropProto info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TowerFlashRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional int32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  // optional int32 cost_sec = 4;
  if (has_cost_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cost_sec(), target);
  }

  // optional .proto_ff.DupDropProto info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TowerFlashRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 dupId = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 cost_sec = 4;
    if (has_cost_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_sec());
    }

    // optional .proto_ff.DupDropProto info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerFlashRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerFlashRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerFlashRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerFlashRsp::MergeFrom(const TowerFlashRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_cost_sec()) {
      set_cost_sec(from.cost_sec());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::DupDropProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerFlashRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerFlashRsp::CopyFrom(const TowerFlashRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerFlashRsp::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void TowerFlashRsp::Swap(TowerFlashRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(dupid_, other->dupid_);
    std::swap(star_, other->star_);
    std::swap(cost_sec_, other->cost_sec_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerFlashRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerFlashRsp_descriptor_;
  metadata.reflection = TowerFlashRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CEnterDupReq::kParamsFieldNumber;
#endif  // !_MSC_VER

L2CEnterDupReq::L2CEnterDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CEnterDupReq::InitAsDefaultInstance() {
  params_ = const_cast< ::proto_ff::CreateSceneParamProto*>(&::proto_ff::CreateSceneParamProto::default_instance());
}

L2CEnterDupReq::L2CEnterDupReq(const L2CEnterDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CEnterDupReq::SharedCtor() {
  _cached_size_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CEnterDupReq::~L2CEnterDupReq() {
  SharedDtor();
}

void L2CEnterDupReq::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void L2CEnterDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CEnterDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CEnterDupReq_descriptor_;
}

const L2CEnterDupReq& L2CEnterDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2CEnterDupReq* L2CEnterDupReq::default_instance_ = NULL;

L2CEnterDupReq* L2CEnterDupReq::New() const {
  return new L2CEnterDupReq;
}

void L2CEnterDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_params()) {
      if (params_ != NULL) params_->::proto_ff::CreateSceneParamProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CEnterDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.CreateSceneParamProto params = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CEnterDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.CreateSceneParamProto params = 1;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CEnterDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.CreateSceneParamProto params = 1;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CEnterDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.CreateSceneParamProto params = 1;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CEnterDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CEnterDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CEnterDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CEnterDupReq::MergeFrom(const L2CEnterDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_params()) {
      mutable_params()->::proto_ff::CreateSceneParamProto::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CEnterDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CEnterDupReq::CopyFrom(const L2CEnterDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CEnterDupReq::IsInitialized() const {

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  return true;
}

void L2CEnterDupReq::Swap(L2CEnterDupReq* other) {
  if (other != this) {
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CEnterDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CEnterDupReq_descriptor_;
  metadata.reflection = L2CEnterDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CCreateDupRsp::kRetFieldNumber;
const int L2CCreateDupRsp::kSceneIdFieldNumber;
const int L2CCreateDupRsp::kDupIdFieldNumber;
#endif  // !_MSC_VER

L2CCreateDupRsp::L2CCreateDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CCreateDupRsp::InitAsDefaultInstance() {
}

L2CCreateDupRsp::L2CCreateDupRsp(const L2CCreateDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CCreateDupRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  dupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CCreateDupRsp::~L2CCreateDupRsp() {
  SharedDtor();
}

void L2CCreateDupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CCreateDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CCreateDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CCreateDupRsp_descriptor_;
}

const L2CCreateDupRsp& L2CCreateDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2CCreateDupRsp* L2CCreateDupRsp::default_instance_ = NULL;

L2CCreateDupRsp* L2CCreateDupRsp::New() const {
  return new L2CCreateDupRsp;
}

void L2CCreateDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    sceneid_ = GOOGLE_ULONGLONG(0);
    dupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CCreateDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneId;
        break;
      }

      // optional uint64 sceneId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dupId;
        break;
      }

      // optional uint64 dupId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CCreateDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 sceneId = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sceneid(), output);
  }

  // optional uint64 dupId = 3;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CCreateDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 sceneId = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sceneid(), target);
  }

  // optional uint64 dupId = 3;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CCreateDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 sceneId = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 dupId = 3;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CCreateDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CCreateDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CCreateDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CCreateDupRsp::MergeFrom(const L2CCreateDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CCreateDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CCreateDupRsp::CopyFrom(const L2CCreateDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CCreateDupRsp::IsInitialized() const {

  return true;
}

void L2CCreateDupRsp::Swap(L2CCreateDupRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(dupid_, other->dupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CCreateDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CCreateDupRsp_descriptor_;
  metadata.reflection = L2CCreateDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CDupStateChgNotify::kSceneIdFieldNumber;
const int L2CDupStateChgNotify::kDupIdFieldNumber;
const int L2CDupStateChgNotify::kStateFieldNumber;
const int L2CDupStateChgNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

L2CDupStateChgNotify::L2CDupStateChgNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CDupStateChgNotify::InitAsDefaultInstance() {
}

L2CDupStateChgNotify::L2CDupStateChgNotify(const L2CDupStateChgNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CDupStateChgNotify::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  dupid_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CDupStateChgNotify::~L2CDupStateChgNotify() {
  SharedDtor();
}

void L2CDupStateChgNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CDupStateChgNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CDupStateChgNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CDupStateChgNotify_descriptor_;
}

const L2CDupStateChgNotify& L2CDupStateChgNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2CDupStateChgNotify* L2CDupStateChgNotify::default_instance_ = NULL;

L2CDupStateChgNotify* L2CDupStateChgNotify::New() const {
  return new L2CDupStateChgNotify;
}

void L2CDupStateChgNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_ULONGLONG(0);
    dupid_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CDupStateChgNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupId;
        break;
      }

      // optional uint64 dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CDupStateChgNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sceneid(), output);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CDupStateChgNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sceneid(), target);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CDupStateChgNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 dupId = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CDupStateChgNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CDupStateChgNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CDupStateChgNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CDupStateChgNotify::MergeFrom(const L2CDupStateChgNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CDupStateChgNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CDupStateChgNotify::CopyFrom(const L2CDupStateChgNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CDupStateChgNotify::IsInitialized() const {

  return true;
}

void L2CDupStateChgNotify::Swap(L2CDupStateChgNotify* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(dupid_, other->dupid_);
    std::swap(state_, other->state_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CDupStateChgNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CDupStateChgNotify_descriptor_;
  metadata.reflection = L2CDupStateChgNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LPullRoleEnterDupNotify::kCharIdFieldNumber;
const int C2LPullRoleEnterDupNotify::kDuplicateIdFieldNumber;
const int C2LPullRoleEnterDupNotify::kSceneIdFieldNumber;
const int C2LPullRoleEnterDupNotify::kBornIdFieldNumber;
const int C2LPullRoleEnterDupNotify::kZoneidFieldNumber;
const int C2LPullRoleEnterDupNotify::kTranTagFieldNumber;
#endif  // !_MSC_VER

C2LPullRoleEnterDupNotify::C2LPullRoleEnterDupNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LPullRoleEnterDupNotify::InitAsDefaultInstance() {
}

C2LPullRoleEnterDupNotify::C2LPullRoleEnterDupNotify(const C2LPullRoleEnterDupNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LPullRoleEnterDupNotify::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = GOOGLE_ULONGLONG(0);
  duplicate_id_ = GOOGLE_ULONGLONG(0);
  scene_id_ = GOOGLE_ULONGLONG(0);
  born_id_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  tran_tag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LPullRoleEnterDupNotify::~C2LPullRoleEnterDupNotify() {
  SharedDtor();
}

void C2LPullRoleEnterDupNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LPullRoleEnterDupNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LPullRoleEnterDupNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LPullRoleEnterDupNotify_descriptor_;
}

const C2LPullRoleEnterDupNotify& C2LPullRoleEnterDupNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

C2LPullRoleEnterDupNotify* C2LPullRoleEnterDupNotify::default_instance_ = NULL;

C2LPullRoleEnterDupNotify* C2LPullRoleEnterDupNotify::New() const {
  return new C2LPullRoleEnterDupNotify;
}

void C2LPullRoleEnterDupNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = GOOGLE_ULONGLONG(0);
    duplicate_id_ = GOOGLE_ULONGLONG(0);
    scene_id_ = GOOGLE_ULONGLONG(0);
    born_id_ = GOOGLE_ULONGLONG(0);
    zoneid_ = 0u;
    tran_tag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LPullRoleEnterDupNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duplicate_id;
        break;
      }

      // required uint64 duplicate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }

      // required uint64 scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_born_id;
        break;
      }

      // optional uint64 born_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_born_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &born_id_)));
          set_has_born_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tran_tag;
        break;
      }

      // optional int32 tran_tag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tran_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tran_tag_)));
          set_has_tran_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LPullRoleEnterDupNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->char_id(), output);
  }

  // required uint64 duplicate_id = 2;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->duplicate_id(), output);
  }

  // required uint64 scene_id = 3;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->scene_id(), output);
  }

  // optional uint64 born_id = 4;
  if (has_born_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->born_id(), output);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // optional int32 tran_tag = 6;
  if (has_tran_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tran_tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LPullRoleEnterDupNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->char_id(), target);
  }

  // required uint64 duplicate_id = 2;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->duplicate_id(), target);
  }

  // required uint64 scene_id = 3;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->scene_id(), target);
  }

  // optional uint64 born_id = 4;
  if (has_born_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->born_id(), target);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // optional int32 tran_tag = 6;
  if (has_tran_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tran_tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LPullRoleEnterDupNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->char_id());
    }

    // required uint64 duplicate_id = 2;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duplicate_id());
    }

    // required uint64 scene_id = 3;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional uint64 born_id = 4;
    if (has_born_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->born_id());
    }

    // optional uint32 zoneid = 5;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional int32 tran_tag = 6;
    if (has_tran_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tran_tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LPullRoleEnterDupNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LPullRoleEnterDupNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LPullRoleEnterDupNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LPullRoleEnterDupNotify::MergeFrom(const C2LPullRoleEnterDupNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_born_id()) {
      set_born_id(from.born_id());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_tran_tag()) {
      set_tran_tag(from.tran_tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LPullRoleEnterDupNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LPullRoleEnterDupNotify::CopyFrom(const C2LPullRoleEnterDupNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LPullRoleEnterDupNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2LPullRoleEnterDupNotify::Swap(C2LPullRoleEnterDupNotify* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(born_id_, other->born_id_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(tran_tag_, other->tran_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LPullRoleEnterDupNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LPullRoleEnterDupNotify_descriptor_;
  metadata.reflection = C2LPullRoleEnterDupNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CDupRoleActionNotify::kSceneIdFieldNumber;
const int L2CDupRoleActionNotify::kCidFieldNumber;
const int L2CDupRoleActionNotify::kActionIdFieldNumber;
const int L2CDupRoleActionNotify::kRetFieldNumber;
#endif  // !_MSC_VER

L2CDupRoleActionNotify::L2CDupRoleActionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CDupRoleActionNotify::InitAsDefaultInstance() {
}

L2CDupRoleActionNotify::L2CDupRoleActionNotify(const L2CDupRoleActionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CDupRoleActionNotify::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_LONGLONG(0);
  cid_ = GOOGLE_LONGLONG(0);
  actionid_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CDupRoleActionNotify::~L2CDupRoleActionNotify() {
  SharedDtor();
}

void L2CDupRoleActionNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CDupRoleActionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CDupRoleActionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CDupRoleActionNotify_descriptor_;
}

const L2CDupRoleActionNotify& L2CDupRoleActionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2CDupRoleActionNotify* L2CDupRoleActionNotify::default_instance_ = NULL;

L2CDupRoleActionNotify* L2CDupRoleActionNotify::New() const {
  return new L2CDupRoleActionNotify;
}

void L2CDupRoleActionNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_LONGLONG(0);
    cid_ = GOOGLE_LONGLONG(0);
    actionid_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CDupRoleActionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional int64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_actionId;
        break;
      }

      // optional int32 actionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionid_)));
          set_has_actionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CDupRoleActionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sceneid(), output);
  }

  // optional int64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cid(), output);
  }

  // optional int32 actionId = 3;
  if (has_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionid(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CDupRoleActionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sceneid(), target);
  }

  // optional int64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cid(), target);
  }

  // optional int32 actionId = 3;
  if (has_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionid(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CDupRoleActionNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sceneid());
    }

    // optional int64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cid());
    }

    // optional int32 actionId = 3;
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionid());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CDupRoleActionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CDupRoleActionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CDupRoleActionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CDupRoleActionNotify::MergeFrom(const L2CDupRoleActionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_actionid()) {
      set_actionid(from.actionid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CDupRoleActionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CDupRoleActionNotify::CopyFrom(const L2CDupRoleActionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CDupRoleActionNotify::IsInitialized() const {

  return true;
}

void L2CDupRoleActionNotify::Swap(L2CDupRoleActionNotify* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(cid_, other->cid_);
    std::swap(actionid_, other->actionid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CDupRoleActionNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CDupRoleActionNotify_descriptor_;
  metadata.reflection = L2CDupRoleActionNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2CEnterDupReq::kParamsFieldNumber;
#endif  // !_MSC_VER

S2CEnterDupReq::S2CEnterDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2CEnterDupReq::InitAsDefaultInstance() {
  params_ = const_cast< ::proto_ff::CreateSceneParamProto*>(&::proto_ff::CreateSceneParamProto::default_instance());
}

S2CEnterDupReq::S2CEnterDupReq(const S2CEnterDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2CEnterDupReq::SharedCtor() {
  _cached_size_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CEnterDupReq::~S2CEnterDupReq() {
  SharedDtor();
}

void S2CEnterDupReq::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void S2CEnterDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2CEnterDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2CEnterDupReq_descriptor_;
}

const S2CEnterDupReq& S2CEnterDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

S2CEnterDupReq* S2CEnterDupReq::default_instance_ = NULL;

S2CEnterDupReq* S2CEnterDupReq::New() const {
  return new S2CEnterDupReq;
}

void S2CEnterDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_params()) {
      if (params_ != NULL) params_->::proto_ff::CreateSceneParamProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2CEnterDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.CreateSceneParamProto params = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2CEnterDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.CreateSceneParamProto params = 1;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2CEnterDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.CreateSceneParamProto params = 1;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2CEnterDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.CreateSceneParamProto params = 1;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CEnterDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2CEnterDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2CEnterDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2CEnterDupReq::MergeFrom(const S2CEnterDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_params()) {
      mutable_params()->::proto_ff::CreateSceneParamProto::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2CEnterDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CEnterDupReq::CopyFrom(const S2CEnterDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CEnterDupReq::IsInitialized() const {

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  return true;
}

void S2CEnterDupReq::Swap(S2CEnterDupReq* other) {
  if (other != this) {
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2CEnterDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2CEnterDupReq_descriptor_;
  metadata.reflection = S2CEnterDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2SEnterDupRsp::kRetFieldNumber;
const int C2SEnterDupRsp::kParamsFieldNumber;
#endif  // !_MSC_VER

C2SEnterDupRsp::C2SEnterDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2SEnterDupRsp::InitAsDefaultInstance() {
  params_ = const_cast< ::proto_ff::CreateSceneParamProto*>(&::proto_ff::CreateSceneParamProto::default_instance());
}

C2SEnterDupRsp::C2SEnterDupRsp(const C2SEnterDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2SEnterDupRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SEnterDupRsp::~C2SEnterDupRsp() {
  SharedDtor();
}

void C2SEnterDupRsp::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void C2SEnterDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2SEnterDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2SEnterDupRsp_descriptor_;
}

const C2SEnterDupRsp& C2SEnterDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

C2SEnterDupRsp* C2SEnterDupRsp::default_instance_ = NULL;

C2SEnterDupRsp* C2SEnterDupRsp::New() const {
  return new C2SEnterDupRsp;
}

void C2SEnterDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_params()) {
      if (params_ != NULL) params_->::proto_ff::CreateSceneParamProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2SEnterDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_params;
        break;
      }

      // optional .proto_ff.CreateSceneParamProto params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SEnterDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.CreateSceneParamProto params = 2;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2SEnterDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.CreateSceneParamProto params = 2;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2SEnterDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.CreateSceneParamProto params = 2;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SEnterDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2SEnterDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2SEnterDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2SEnterDupRsp::MergeFrom(const C2SEnterDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_params()) {
      mutable_params()->::proto_ff::CreateSceneParamProto::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2SEnterDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SEnterDupRsp::CopyFrom(const C2SEnterDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SEnterDupRsp::IsInitialized() const {

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  return true;
}

void C2SEnterDupRsp::Swap(C2SEnterDupRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2SEnterDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2SEnterDupRsp_descriptor_;
  metadata.reflection = C2SEnterDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CTowerRecvRecordReq::kIdFieldNumber;
const int L2CTowerRecvRecordReq::kCidFieldNumber;
const int L2CTowerRecvRecordReq::kNameFieldNumber;
const int L2CTowerRecvRecordReq::kTimeFieldNumber;
#endif  // !_MSC_VER

L2CTowerRecvRecordReq::L2CTowerRecvRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CTowerRecvRecordReq::InitAsDefaultInstance() {
}

L2CTowerRecvRecordReq::L2CTowerRecvRecordReq(const L2CTowerRecvRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CTowerRecvRecordReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  cid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CTowerRecvRecordReq::~L2CTowerRecvRecordReq() {
  SharedDtor();
}

void L2CTowerRecvRecordReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void L2CTowerRecvRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CTowerRecvRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CTowerRecvRecordReq_descriptor_;
}

const L2CTowerRecvRecordReq& L2CTowerRecvRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2CTowerRecvRecordReq* L2CTowerRecvRecordReq::default_instance_ = NULL;

L2CTowerRecvRecordReq* L2CTowerRecvRecordReq::New() const {
  return new L2CTowerRecvRecordReq;
}

void L2CTowerRecvRecordReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    cid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CTowerRecvRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional int64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CTowerRecvRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CTowerRecvRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CTowerRecvRecordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CTowerRecvRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CTowerRecvRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CTowerRecvRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CTowerRecvRecordReq::MergeFrom(const L2CTowerRecvRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CTowerRecvRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CTowerRecvRecordReq::CopyFrom(const L2CTowerRecvRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CTowerRecvRecordReq::IsInitialized() const {

  return true;
}

void L2CTowerRecvRecordReq::Swap(L2CTowerRecvRecordReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CTowerRecvRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CTowerRecvRecordReq_descriptor_;
  metadata.reflection = L2CTowerRecvRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2SEnterDupReq::kParamsFieldNumber;
#endif  // !_MSC_VER

L2SEnterDupReq::L2SEnterDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2SEnterDupReq::InitAsDefaultInstance() {
  params_ = const_cast< ::proto_ff::CreateSceneParamProto*>(&::proto_ff::CreateSceneParamProto::default_instance());
}

L2SEnterDupReq::L2SEnterDupReq(const L2SEnterDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2SEnterDupReq::SharedCtor() {
  _cached_size_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2SEnterDupReq::~L2SEnterDupReq() {
  SharedDtor();
}

void L2SEnterDupReq::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void L2SEnterDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2SEnterDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2SEnterDupReq_descriptor_;
}

const L2SEnterDupReq& L2SEnterDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2SEnterDupReq* L2SEnterDupReq::default_instance_ = NULL;

L2SEnterDupReq* L2SEnterDupReq::New() const {
  return new L2SEnterDupReq;
}

void L2SEnterDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_params()) {
      if (params_ != NULL) params_->::proto_ff::CreateSceneParamProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2SEnterDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.CreateSceneParamProto params = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2SEnterDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.CreateSceneParamProto params = 1;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2SEnterDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.CreateSceneParamProto params = 1;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2SEnterDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.CreateSceneParamProto params = 1;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2SEnterDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2SEnterDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2SEnterDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2SEnterDupReq::MergeFrom(const L2SEnterDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_params()) {
      mutable_params()->::proto_ff::CreateSceneParamProto::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2SEnterDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2SEnterDupReq::CopyFrom(const L2SEnterDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2SEnterDupReq::IsInitialized() const {

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  return true;
}

void L2SEnterDupReq::Swap(L2SEnterDupReq* other) {
  if (other != this) {
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2SEnterDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2SEnterDupReq_descriptor_;
  metadata.reflection = L2SEnterDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2SDupTeamInviteReq::kDupidFieldNumber;
const int L2SDupTeamInviteReq::kTeamidFieldNumber;
const int L2SDupTeamInviteReq::kCidFieldNumber;
const int L2SDupTeamInviteReq::kParamsFieldNumber;
#endif  // !_MSC_VER

L2SDupTeamInviteReq::L2SDupTeamInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2SDupTeamInviteReq::InitAsDefaultInstance() {
  params_ = const_cast< ::proto_ff::CreateSceneParamProto*>(&::proto_ff::CreateSceneParamProto::default_instance());
}

L2SDupTeamInviteReq::L2SDupTeamInviteReq(const L2SDupTeamInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2SDupTeamInviteReq::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_LONGLONG(0);
  cid_ = GOOGLE_LONGLONG(0);
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2SDupTeamInviteReq::~L2SDupTeamInviteReq() {
  SharedDtor();
}

void L2SDupTeamInviteReq::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void L2SDupTeamInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2SDupTeamInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2SDupTeamInviteReq_descriptor_;
}

const L2SDupTeamInviteReq& L2SDupTeamInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2SDupTeamInviteReq* L2SDupTeamInviteReq::default_instance_ = NULL;

L2SDupTeamInviteReq* L2SDupTeamInviteReq::New() const {
  return new L2SDupTeamInviteReq;
}

void L2SDupTeamInviteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = GOOGLE_ULONGLONG(0);
    teamid_ = GOOGLE_LONGLONG(0);
    cid_ = GOOGLE_LONGLONG(0);
    if (has_params()) {
      if (params_ != NULL) params_->::proto_ff::CreateSceneParamProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2SDupTeamInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 dupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamid;
        break;
      }

      // optional int64 teamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional int64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_params;
        break;
      }

      // optional .proto_ff.CreateSceneParamProto params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2SDupTeamInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 dupid = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dupid(), output);
  }

  // optional int64 teamid = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->teamid(), output);
  }

  // optional int64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cid(), output);
  }

  // optional .proto_ff.CreateSceneParamProto params = 4;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2SDupTeamInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 dupid = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dupid(), target);
  }

  // optional int64 teamid = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->teamid(), target);
  }

  // optional int64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cid(), target);
  }

  // optional .proto_ff.CreateSceneParamProto params = 4;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2SDupTeamInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 dupid = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int64 teamid = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

    // optional int64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cid());
    }

    // optional .proto_ff.CreateSceneParamProto params = 4;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2SDupTeamInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2SDupTeamInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2SDupTeamInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2SDupTeamInviteReq::MergeFrom(const L2SDupTeamInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_params()) {
      mutable_params()->::proto_ff::CreateSceneParamProto::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2SDupTeamInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2SDupTeamInviteReq::CopyFrom(const L2SDupTeamInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2SDupTeamInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  return true;
}

void L2SDupTeamInviteReq::Swap(L2SDupTeamInviteReq* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    std::swap(teamid_, other->teamid_);
    std::swap(cid_, other->cid_);
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2SDupTeamInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2SDupTeamInviteReq_descriptor_;
  metadata.reflection = L2SDupTeamInviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2SCreateDupResultRsp::kRetFieldNumber;
const int C2SCreateDupResultRsp::kSceneidFieldNumber;
const int C2SCreateDupResultRsp::kMapidFieldNumber;
const int C2SCreateDupResultRsp::kLogicidFieldNumber;
const int C2SCreateDupResultRsp::kZoneidFieldNumber;
const int C2SCreateDupResultRsp::kKeytypeFieldNumber;
const int C2SCreateDupResultRsp::kKeyvalFieldNumber;
const int C2SCreateDupResultRsp::kTeamidFieldNumber;
const int C2SCreateDupResultRsp::kDupidFieldNumber;
const int C2SCreateDupResultRsp::kStrParamFieldNumber;
#endif  // !_MSC_VER

C2SCreateDupResultRsp::C2SCreateDupResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2SCreateDupResultRsp::InitAsDefaultInstance() {
}

C2SCreateDupResultRsp::C2SCreateDupResultRsp(const C2SCreateDupResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2SCreateDupResultRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  mapid_ = GOOGLE_ULONGLONG(0);
  logicid_ = 0u;
  zoneid_ = 0u;
  keytype_ = 0;
  keyval_ = GOOGLE_ULONGLONG(0);
  teamid_ = 0;
  dupid_ = 0;
  str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SCreateDupResultRsp::~C2SCreateDupResultRsp() {
  SharedDtor();
}

void C2SCreateDupResultRsp::SharedDtor() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (this != default_instance_) {
  }
}

void C2SCreateDupResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2SCreateDupResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2SCreateDupResultRsp_descriptor_;
}

const C2SCreateDupResultRsp& C2SCreateDupResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

C2SCreateDupResultRsp* C2SCreateDupResultRsp::default_instance_ = NULL;

C2SCreateDupResultRsp* C2SCreateDupResultRsp::New() const {
  return new C2SCreateDupResultRsp;
}

void C2SCreateDupResultRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    sceneid_ = GOOGLE_ULONGLONG(0);
    mapid_ = GOOGLE_ULONGLONG(0);
    logicid_ = 0u;
    zoneid_ = 0u;
    keytype_ = 0;
    keyval_ = GOOGLE_ULONGLONG(0);
    teamid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dupid_ = 0;
    if (has_str_param()) {
      if (str_param_ != &::google::protobuf::internal::kEmptyString) {
        str_param_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2SCreateDupResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_logicid;
        break;
      }

      // optional uint32 logicid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_keytype;
        break;
      }

      // optional int32 keytype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keytype_)));
          set_has_keytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_keyval;
        break;
      }

      // optional uint64 keyval = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keyval_)));
          set_has_keyval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dupid;
        break;
      }

      // optional int32 dupid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_str_param;
        break;
      }

      // optional bytes str_param = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SCreateDupResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 sceneid = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sceneid(), output);
  }

  // optional uint64 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mapid(), output);
  }

  // optional uint32 logicid = 4;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->logicid(), output);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // optional int32 keytype = 6;
  if (has_keytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->keytype(), output);
  }

  // optional uint64 keyval = 7;
  if (has_keyval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->keyval(), output);
  }

  // optional int32 teamid = 8;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->teamid(), output);
  }

  // optional int32 dupid = 9;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dupid(), output);
  }

  // optional bytes str_param = 10;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->str_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2SCreateDupResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 sceneid = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sceneid(), target);
  }

  // optional uint64 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mapid(), target);
  }

  // optional uint32 logicid = 4;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->logicid(), target);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // optional int32 keytype = 6;
  if (has_keytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->keytype(), target);
  }

  // optional uint64 keyval = 7;
  if (has_keyval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->keyval(), target);
  }

  // optional int32 teamid = 8;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->teamid(), target);
  }

  // optional int32 dupid = 9;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dupid(), target);
  }

  // optional bytes str_param = 10;
  if (has_str_param()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->str_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2SCreateDupResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 sceneid = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional uint32 logicid = 4;
    if (has_logicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicid());
    }

    // optional uint32 zoneid = 5;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional int32 keytype = 6;
    if (has_keytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keytype());
    }

    // optional uint64 keyval = 7;
    if (has_keyval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->keyval());
    }

    // optional int32 teamid = 8;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 dupid = 9;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dupid());
    }

    // optional bytes str_param = 10;
    if (has_str_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SCreateDupResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2SCreateDupResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2SCreateDupResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2SCreateDupResultRsp::MergeFrom(const C2SCreateDupResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_keytype()) {
      set_keytype(from.keytype());
    }
    if (from.has_keyval()) {
      set_keyval(from.keyval());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_str_param()) {
      set_str_param(from.str_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2SCreateDupResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SCreateDupResultRsp::CopyFrom(const C2SCreateDupResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SCreateDupResultRsp::IsInitialized() const {

  return true;
}

void C2SCreateDupResultRsp::Swap(C2SCreateDupResultRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(mapid_, other->mapid_);
    std::swap(logicid_, other->logicid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(keytype_, other->keytype_);
    std::swap(keyval_, other->keyval_);
    std::swap(teamid_, other->teamid_);
    std::swap(dupid_, other->dupid_);
    std::swap(str_param_, other->str_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2SCreateDupResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2SCreateDupResultRsp_descriptor_;
  metadata.reflection = C2SCreateDupResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2CNotifyCharEnterDup::kCidFieldNumber;
const int S2CNotifyCharEnterDup::kDupidFieldNumber;
const int S2CNotifyCharEnterDup::kSceneidFieldNumber;
const int S2CNotifyCharEnterDup::kBornidFieldNumber;
const int S2CNotifyCharEnterDup::kTranTagFieldNumber;
#endif  // !_MSC_VER

S2CNotifyCharEnterDup::S2CNotifyCharEnterDup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2CNotifyCharEnterDup::InitAsDefaultInstance() {
}

S2CNotifyCharEnterDup::S2CNotifyCharEnterDup(const S2CNotifyCharEnterDup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2CNotifyCharEnterDup::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  dupid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = GOOGLE_ULONGLONG(0);
  bornid_ = GOOGLE_ULONGLONG(0);
  tran_tag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CNotifyCharEnterDup::~S2CNotifyCharEnterDup() {
  SharedDtor();
}

void S2CNotifyCharEnterDup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2CNotifyCharEnterDup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2CNotifyCharEnterDup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2CNotifyCharEnterDup_descriptor_;
}

const S2CNotifyCharEnterDup& S2CNotifyCharEnterDup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

S2CNotifyCharEnterDup* S2CNotifyCharEnterDup::default_instance_ = NULL;

S2CNotifyCharEnterDup* S2CNotifyCharEnterDup::New() const {
  return new S2CNotifyCharEnterDup;
}

void S2CNotifyCharEnterDup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    dupid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = GOOGLE_ULONGLONG(0);
    bornid_ = GOOGLE_ULONGLONG(0);
    tran_tag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2CNotifyCharEnterDup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupid;
        break;
      }

      // optional uint64 dupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bornid;
        break;
      }

      // optional uint64 bornid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bornid_)));
          set_has_bornid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tran_tag;
        break;
      }

      // optional int32 tran_tag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tran_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tran_tag_)));
          set_has_tran_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2CNotifyCharEnterDup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 dupid = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional uint64 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sceneid(), output);
  }

  // optional uint64 bornid = 4;
  if (has_bornid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bornid(), output);
  }

  // optional int32 tran_tag = 5;
  if (has_tran_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tran_tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2CNotifyCharEnterDup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 dupid = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional uint64 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sceneid(), target);
  }

  // optional uint64 bornid = 4;
  if (has_bornid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bornid(), target);
  }

  // optional int32 tran_tag = 5;
  if (has_tran_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tran_tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2CNotifyCharEnterDup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 dupid = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional uint64 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 bornid = 4;
    if (has_bornid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bornid());
    }

    // optional int32 tran_tag = 5;
    if (has_tran_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tran_tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CNotifyCharEnterDup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2CNotifyCharEnterDup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2CNotifyCharEnterDup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2CNotifyCharEnterDup::MergeFrom(const S2CNotifyCharEnterDup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_bornid()) {
      set_bornid(from.bornid());
    }
    if (from.has_tran_tag()) {
      set_tran_tag(from.tran_tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2CNotifyCharEnterDup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CNotifyCharEnterDup::CopyFrom(const S2CNotifyCharEnterDup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CNotifyCharEnterDup::IsInitialized() const {

  return true;
}

void S2CNotifyCharEnterDup::Swap(S2CNotifyCharEnterDup* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(dupid_, other->dupid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(bornid_, other->bornid_);
    std::swap(tran_tag_, other->tran_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2CNotifyCharEnterDup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2CNotifyCharEnterDup_descriptor_;
  metadata.reflection = S2CNotifyCharEnterDup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRebotEnterDup::kCidFieldNumber;
const int NotifyRebotEnterDup::kDupidFieldNumber;
const int NotifyRebotEnterDup::kSceneidFieldNumber;
const int NotifyRebotEnterDup::kBornidFieldNumber;
const int NotifyRebotEnterDup::kTeamidFieldNumber;
#endif  // !_MSC_VER

NotifyRebotEnterDup::NotifyRebotEnterDup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyRebotEnterDup::InitAsDefaultInstance() {
}

NotifyRebotEnterDup::NotifyRebotEnterDup(const NotifyRebotEnterDup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyRebotEnterDup::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  dupid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = GOOGLE_ULONGLONG(0);
  bornid_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRebotEnterDup::~NotifyRebotEnterDup() {
  SharedDtor();
}

void NotifyRebotEnterDup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyRebotEnterDup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRebotEnterDup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRebotEnterDup_descriptor_;
}

const NotifyRebotEnterDup& NotifyRebotEnterDup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyRebotEnterDup* NotifyRebotEnterDup::default_instance_ = NULL;

NotifyRebotEnterDup* NotifyRebotEnterDup::New() const {
  return new NotifyRebotEnterDup;
}

void NotifyRebotEnterDup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    dupid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = GOOGLE_ULONGLONG(0);
    bornid_ = 0;
    teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRebotEnterDup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupid;
        break;
      }

      // optional uint64 dupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bornid;
        break;
      }

      // optional int32 bornid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bornid_)));
          set_has_bornid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyRebotEnterDup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 dupid = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional uint64 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sceneid(), output);
  }

  // optional int32 bornid = 4;
  if (has_bornid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bornid(), output);
  }

  // optional int32 teamid = 5;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyRebotEnterDup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 dupid = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional uint64 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sceneid(), target);
  }

  // optional int32 bornid = 4;
  if (has_bornid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bornid(), target);
  }

  // optional int32 teamid = 5;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyRebotEnterDup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 dupid = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional uint64 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional int32 bornid = 4;
    if (has_bornid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bornid());
    }

    // optional int32 teamid = 5;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRebotEnterDup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRebotEnterDup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRebotEnterDup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRebotEnterDup::MergeFrom(const NotifyRebotEnterDup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_bornid()) {
      set_bornid(from.bornid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRebotEnterDup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRebotEnterDup::CopyFrom(const NotifyRebotEnterDup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRebotEnterDup::IsInitialized() const {

  return true;
}

void NotifyRebotEnterDup::Swap(NotifyRebotEnterDup* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(dupid_, other->dupid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(bornid_, other->bornid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRebotEnterDup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRebotEnterDup_descriptor_;
  metadata.reflection = NotifyRebotEnterDup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2SDupTeamOptReq::kOptFieldNumber;
const int L2SDupTeamOptReq::kMergeNumFieldNumber;
const int L2SDupTeamOptReq::kTeamIdFieldNumber;
const int L2SDupTeamOptReq::kCidFieldNumber;
#endif  // !_MSC_VER

L2SDupTeamOptReq::L2SDupTeamOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2SDupTeamOptReq::InitAsDefaultInstance() {
}

L2SDupTeamOptReq::L2SDupTeamOptReq(const L2SDupTeamOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2SDupTeamOptReq::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  mergenum_ = 0u;
  teamid_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2SDupTeamOptReq::~L2SDupTeamOptReq() {
  SharedDtor();
}

void L2SDupTeamOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2SDupTeamOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2SDupTeamOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2SDupTeamOptReq_descriptor_;
}

const L2SDupTeamOptReq& L2SDupTeamOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2SDupTeamOptReq* L2SDupTeamOptReq::default_instance_ = NULL;

L2SDupTeamOptReq* L2SDupTeamOptReq::New() const {
  return new L2SDupTeamOptReq;
}

void L2SDupTeamOptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
    mergenum_ = 0u;
    teamid_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2SDupTeamOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mergeNum;
        break;
      }

      // optional uint32 mergeNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mergeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mergenum_)));
          set_has_mergenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamId;
        break;
      }

      // optional int32 teamId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2SDupTeamOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  // optional uint32 mergeNum = 2;
  if (has_mergenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mergenum(), output);
  }

  // optional int32 teamId = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teamid(), output);
  }

  // optional uint64 cid = 4;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2SDupTeamOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  // optional uint32 mergeNum = 2;
  if (has_mergenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mergenum(), target);
  }

  // optional int32 teamId = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->teamid(), target);
  }

  // optional uint64 cid = 4;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2SDupTeamOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional uint32 mergeNum = 2;
    if (has_mergenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mergenum());
    }

    // optional int32 teamId = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional uint64 cid = 4;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2SDupTeamOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2SDupTeamOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2SDupTeamOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2SDupTeamOptReq::MergeFrom(const L2SDupTeamOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_mergenum()) {
      set_mergenum(from.mergenum());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2SDupTeamOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2SDupTeamOptReq::CopyFrom(const L2SDupTeamOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2SDupTeamOptReq::IsInitialized() const {

  return true;
}

void L2SDupTeamOptReq::Swap(L2SDupTeamOptReq* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(mergenum_, other->mergenum_);
    std::swap(teamid_, other->teamid_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2SDupTeamOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2SDupTeamOptReq_descriptor_;
  metadata.reflection = L2SDupTeamOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2CNofityRoleRebotEnterDup::kCidFieldNumber;
const int S2CNofityRoleRebotEnterDup::kDupidFieldNumber;
const int S2CNofityRoleRebotEnterDup::kSceneidFieldNumber;
const int S2CNofityRoleRebotEnterDup::kBornidFieldNumber;
const int S2CNofityRoleRebotEnterDup::kTeamidFieldNumber;
const int S2CNofityRoleRebotEnterDup::kLogicidFieldNumber;
const int S2CNofityRoleRebotEnterDup::kCampidFieldNumber;
#endif  // !_MSC_VER

S2CNofityRoleRebotEnterDup::S2CNofityRoleRebotEnterDup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2CNofityRoleRebotEnterDup::InitAsDefaultInstance() {
}

S2CNofityRoleRebotEnterDup::S2CNofityRoleRebotEnterDup(const S2CNofityRoleRebotEnterDup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2CNofityRoleRebotEnterDup::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  dupid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = GOOGLE_ULONGLONG(0);
  bornid_ = 0;
  teamid_ = 0;
  logicid_ = 0;
  campid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CNofityRoleRebotEnterDup::~S2CNofityRoleRebotEnterDup() {
  SharedDtor();
}

void S2CNofityRoleRebotEnterDup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2CNofityRoleRebotEnterDup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2CNofityRoleRebotEnterDup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2CNofityRoleRebotEnterDup_descriptor_;
}

const S2CNofityRoleRebotEnterDup& S2CNofityRoleRebotEnterDup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

S2CNofityRoleRebotEnterDup* S2CNofityRoleRebotEnterDup::default_instance_ = NULL;

S2CNofityRoleRebotEnterDup* S2CNofityRoleRebotEnterDup::New() const {
  return new S2CNofityRoleRebotEnterDup;
}

void S2CNofityRoleRebotEnterDup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    dupid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = GOOGLE_ULONGLONG(0);
    bornid_ = 0;
    teamid_ = 0;
    logicid_ = 0;
    campid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2CNofityRoleRebotEnterDup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupid;
        break;
      }

      // optional uint64 dupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bornid;
        break;
      }

      // optional int32 bornid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bornid_)));
          set_has_bornid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_logicid;
        break;
      }

      // optional int32 logicid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_campid;
        break;
      }

      // optional int32 campid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2CNofityRoleRebotEnterDup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 dupid = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional uint64 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sceneid(), output);
  }

  // optional int32 bornid = 4;
  if (has_bornid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bornid(), output);
  }

  // optional int32 teamid = 5;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->teamid(), output);
  }

  // optional int32 logicid = 6;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->logicid(), output);
  }

  // optional int32 campid = 7;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->campid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2CNofityRoleRebotEnterDup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 dupid = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional uint64 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sceneid(), target);
  }

  // optional int32 bornid = 4;
  if (has_bornid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bornid(), target);
  }

  // optional int32 teamid = 5;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->teamid(), target);
  }

  // optional int32 logicid = 6;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->logicid(), target);
  }

  // optional int32 campid = 7;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->campid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2CNofityRoleRebotEnterDup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 dupid = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional uint64 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional int32 bornid = 4;
    if (has_bornid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bornid());
    }

    // optional int32 teamid = 5;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional int32 logicid = 6;
    if (has_logicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logicid());
    }

    // optional int32 campid = 7;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->campid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CNofityRoleRebotEnterDup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2CNofityRoleRebotEnterDup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2CNofityRoleRebotEnterDup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2CNofityRoleRebotEnterDup::MergeFrom(const S2CNofityRoleRebotEnterDup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_bornid()) {
      set_bornid(from.bornid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2CNofityRoleRebotEnterDup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CNofityRoleRebotEnterDup::CopyFrom(const S2CNofityRoleRebotEnterDup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CNofityRoleRebotEnterDup::IsInitialized() const {

  return true;
}

void S2CNofityRoleRebotEnterDup::Swap(S2CNofityRoleRebotEnterDup* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(dupid_, other->dupid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(bornid_, other->bornid_);
    std::swap(teamid_, other->teamid_);
    std::swap(logicid_, other->logicid_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2CNofityRoleRebotEnterDup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2CNofityRoleRebotEnterDup_descriptor_;
  metadata.reflection = S2CNofityRoleRebotEnterDup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LRoleRobotEnterDupReq::kCidFieldNumber;
const int C2LRoleRobotEnterDupReq::kDupidFieldNumber;
const int C2LRoleRobotEnterDupReq::kSceneidFieldNumber;
const int C2LRoleRobotEnterDupReq::kBornidFieldNumber;
const int C2LRoleRobotEnterDupReq::kMirrorsFieldNumber;
#endif  // !_MSC_VER

C2LRoleRobotEnterDupReq::C2LRoleRobotEnterDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LRoleRobotEnterDupReq::InitAsDefaultInstance() {
}

C2LRoleRobotEnterDupReq::C2LRoleRobotEnterDupReq(const C2LRoleRobotEnterDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LRoleRobotEnterDupReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  dupid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = GOOGLE_ULONGLONG(0);
  bornid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LRoleRobotEnterDupReq::~C2LRoleRobotEnterDupReq() {
  SharedDtor();
}

void C2LRoleRobotEnterDupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LRoleRobotEnterDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LRoleRobotEnterDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LRoleRobotEnterDupReq_descriptor_;
}

const C2LRoleRobotEnterDupReq& C2LRoleRobotEnterDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

C2LRoleRobotEnterDupReq* C2LRoleRobotEnterDupReq::default_instance_ = NULL;

C2LRoleRobotEnterDupReq* C2LRoleRobotEnterDupReq::New() const {
  return new C2LRoleRobotEnterDupReq;
}

void C2LRoleRobotEnterDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    dupid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = GOOGLE_ULONGLONG(0);
    bornid_ = 0;
  }
  mirrors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LRoleRobotEnterDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupid;
        break;
      }

      // optional uint64 dupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bornid;
        break;
      }

      // optional int32 bornid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bornid_)));
          set_has_bornid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mirrors;
        break;
      }

      // repeated .proto_ff.RoleMirrorData mirrors = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mirrors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mirrors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mirrors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LRoleRobotEnterDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 dupid = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional uint64 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sceneid(), output);
  }

  // optional int32 bornid = 4;
  if (has_bornid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bornid(), output);
  }

  // repeated .proto_ff.RoleMirrorData mirrors = 5;
  for (int i = 0; i < this->mirrors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mirrors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LRoleRobotEnterDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 dupid = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional uint64 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sceneid(), target);
  }

  // optional int32 bornid = 4;
  if (has_bornid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bornid(), target);
  }

  // repeated .proto_ff.RoleMirrorData mirrors = 5;
  for (int i = 0; i < this->mirrors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mirrors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LRoleRobotEnterDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 dupid = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional uint64 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional int32 bornid = 4;
    if (has_bornid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bornid());
    }

  }
  // repeated .proto_ff.RoleMirrorData mirrors = 5;
  total_size += 1 * this->mirrors_size();
  for (int i = 0; i < this->mirrors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mirrors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LRoleRobotEnterDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LRoleRobotEnterDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LRoleRobotEnterDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LRoleRobotEnterDupReq::MergeFrom(const C2LRoleRobotEnterDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mirrors_.MergeFrom(from.mirrors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_bornid()) {
      set_bornid(from.bornid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LRoleRobotEnterDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LRoleRobotEnterDupReq::CopyFrom(const C2LRoleRobotEnterDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LRoleRobotEnterDupReq::IsInitialized() const {

  for (int i = 0; i < mirrors_size(); i++) {
    if (!this->mirrors(i).IsInitialized()) return false;
  }
  return true;
}

void C2LRoleRobotEnterDupReq::Swap(C2LRoleRobotEnterDupReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(dupid_, other->dupid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(bornid_, other->bornid_);
    mirrors_.Swap(&other->mirrors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LRoleRobotEnterDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LRoleRobotEnterDupReq_descriptor_;
  metadata.reflection = C2LRoleRobotEnterDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CDupResultRsp::kSceneIdFieldNumber;
const int L2CDupResultRsp::kDupIdFieldNumber;
const int L2CDupResultRsp::kResultFieldNumber;
const int L2CDupResultRsp::kIntParamFieldNumber;
const int L2CDupResultRsp::kStrParamFieldNumber;
#endif  // !_MSC_VER

L2CDupResultRsp::L2CDupResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CDupResultRsp::InitAsDefaultInstance() {
}

L2CDupResultRsp::L2CDupResultRsp(const L2CDupResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CDupResultRsp::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  dupid_ = GOOGLE_ULONGLONG(0);
  result_ = 0;
  int_param_ = GOOGLE_LONGLONG(0);
  str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CDupResultRsp::~L2CDupResultRsp() {
  SharedDtor();
}

void L2CDupResultRsp::SharedDtor() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (this != default_instance_) {
  }
}

void L2CDupResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CDupResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CDupResultRsp_descriptor_;
}

const L2CDupResultRsp& L2CDupResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2CDupResultRsp* L2CDupResultRsp::default_instance_ = NULL;

L2CDupResultRsp* L2CDupResultRsp::New() const {
  return new L2CDupResultRsp;
}

void L2CDupResultRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_ULONGLONG(0);
    dupid_ = GOOGLE_ULONGLONG(0);
    result_ = 0;
    int_param_ = GOOGLE_LONGLONG(0);
    if (has_str_param()) {
      if (str_param_ != &::google::protobuf::internal::kEmptyString) {
        str_param_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CDupResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupId;
        break;
      }

      // optional uint64 dupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_int_param;
        break;
      }

      // optional int64 int_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_param_)));
          set_has_int_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_str_param;
        break;
      }

      // optional bytes str_param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CDupResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sceneid(), output);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional int64 int_param = 4;
  if (has_int_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->int_param(), output);
  }

  // optional bytes str_param = 5;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->str_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CDupResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sceneid(), target);
  }

  // optional uint64 dupId = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional int64 int_param = 4;
  if (has_int_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->int_param(), target);
  }

  // optional bytes str_param = 5;
  if (has_str_param()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->str_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CDupResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 dupId = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 int_param = 4;
    if (has_int_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_param());
    }

    // optional bytes str_param = 5;
    if (has_str_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CDupResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CDupResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CDupResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CDupResultRsp::MergeFrom(const L2CDupResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_int_param()) {
      set_int_param(from.int_param());
    }
    if (from.has_str_param()) {
      set_str_param(from.str_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CDupResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CDupResultRsp::CopyFrom(const L2CDupResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CDupResultRsp::IsInitialized() const {

  return true;
}

void L2CDupResultRsp::Swap(L2CDupResultRsp* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(dupid_, other->dupid_);
    std::swap(result_, other->result_);
    std::swap(int_param_, other->int_param_);
    std::swap(str_param_, other->str_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CDupResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CDupResultRsp_descriptor_;
  metadata.reflection = L2CDupResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LEnterRebotReq::kCidFieldNumber;
const int C2LEnterRebotReq::kDupidFieldNumber;
const int C2LEnterRebotReq::kSceneidFieldNumber;
const int C2LEnterRebotReq::kBornidFieldNumber;
#endif  // !_MSC_VER

C2LEnterRebotReq::C2LEnterRebotReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LEnterRebotReq::InitAsDefaultInstance() {
}

C2LEnterRebotReq::C2LEnterRebotReq(const C2LEnterRebotReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LEnterRebotReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  dupid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = GOOGLE_ULONGLONG(0);
  bornid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LEnterRebotReq::~C2LEnterRebotReq() {
  SharedDtor();
}

void C2LEnterRebotReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LEnterRebotReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LEnterRebotReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LEnterRebotReq_descriptor_;
}

const C2LEnterRebotReq& C2LEnterRebotReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

C2LEnterRebotReq* C2LEnterRebotReq::default_instance_ = NULL;

C2LEnterRebotReq* C2LEnterRebotReq::New() const {
  return new C2LEnterRebotReq;
}

void C2LEnterRebotReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    dupid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = GOOGLE_ULONGLONG(0);
    bornid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LEnterRebotReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupid;
        break;
      }

      // optional uint64 dupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bornid;
        break;
      }

      // optional int32 bornid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bornid_)));
          set_has_bornid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LEnterRebotReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 dupid = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dupid(), output);
  }

  // optional uint64 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sceneid(), output);
  }

  // optional int32 bornid = 4;
  if (has_bornid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bornid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LEnterRebotReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 dupid = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dupid(), target);
  }

  // optional uint64 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sceneid(), target);
  }

  // optional int32 bornid = 4;
  if (has_bornid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bornid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LEnterRebotReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 dupid = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional uint64 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional int32 bornid = 4;
    if (has_bornid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bornid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LEnterRebotReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LEnterRebotReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LEnterRebotReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LEnterRebotReq::MergeFrom(const C2LEnterRebotReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_bornid()) {
      set_bornid(from.bornid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LEnterRebotReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LEnterRebotReq::CopyFrom(const C2LEnterRebotReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LEnterRebotReq::IsInitialized() const {

  return true;
}

void C2LEnterRebotReq::Swap(C2LEnterRebotReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(dupid_, other->dupid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(bornid_, other->bornid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LEnterRebotReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LEnterRebotReq_descriptor_;
  metadata.reflection = C2LEnterRebotReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2SNotifyDupFinishRsp::kResultFieldNumber;
const int C2SNotifyDupFinishRsp::kSceneidFieldNumber;
const int C2SNotifyDupFinishRsp::kMapidFieldNumber;
const int C2SNotifyDupFinishRsp::kLogicidFieldNumber;
const int C2SNotifyDupFinishRsp::kZoneidFieldNumber;
const int C2SNotifyDupFinishRsp::kKeytypeFieldNumber;
const int C2SNotifyDupFinishRsp::kKeyvalFieldNumber;
const int C2SNotifyDupFinishRsp::kTeamidFieldNumber;
const int C2SNotifyDupFinishRsp::kDupidFieldNumber;
#endif  // !_MSC_VER

C2SNotifyDupFinishRsp::C2SNotifyDupFinishRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2SNotifyDupFinishRsp::InitAsDefaultInstance() {
}

C2SNotifyDupFinishRsp::C2SNotifyDupFinishRsp(const C2SNotifyDupFinishRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2SNotifyDupFinishRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  mapid_ = GOOGLE_ULONGLONG(0);
  logicid_ = 0u;
  zoneid_ = 0u;
  keytype_ = 0;
  keyval_ = GOOGLE_ULONGLONG(0);
  teamid_ = 0;
  dupid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SNotifyDupFinishRsp::~C2SNotifyDupFinishRsp() {
  SharedDtor();
}

void C2SNotifyDupFinishRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2SNotifyDupFinishRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2SNotifyDupFinishRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2SNotifyDupFinishRsp_descriptor_;
}

const C2SNotifyDupFinishRsp& C2SNotifyDupFinishRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

C2SNotifyDupFinishRsp* C2SNotifyDupFinishRsp::default_instance_ = NULL;

C2SNotifyDupFinishRsp* C2SNotifyDupFinishRsp::New() const {
  return new C2SNotifyDupFinishRsp;
}

void C2SNotifyDupFinishRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    sceneid_ = GOOGLE_ULONGLONG(0);
    mapid_ = GOOGLE_ULONGLONG(0);
    logicid_ = 0u;
    zoneid_ = 0u;
    keytype_ = 0;
    keyval_ = GOOGLE_ULONGLONG(0);
    teamid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dupid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2SNotifyDupFinishRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_logicid;
        break;
      }

      // optional uint32 logicid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_keytype;
        break;
      }

      // optional int32 keytype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keytype_)));
          set_has_keytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_keyval;
        break;
      }

      // optional uint64 keyval = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keyval_)));
          set_has_keyval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dupid;
        break;
      }

      // optional int64 dupid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SNotifyDupFinishRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 sceneid = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sceneid(), output);
  }

  // optional uint64 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mapid(), output);
  }

  // optional uint32 logicid = 4;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->logicid(), output);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // optional int32 keytype = 6;
  if (has_keytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->keytype(), output);
  }

  // optional uint64 keyval = 7;
  if (has_keyval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->keyval(), output);
  }

  // optional int32 teamid = 8;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->teamid(), output);
  }

  // optional int64 dupid = 9;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->dupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2SNotifyDupFinishRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 sceneid = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sceneid(), target);
  }

  // optional uint64 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mapid(), target);
  }

  // optional uint32 logicid = 4;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->logicid(), target);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // optional int32 keytype = 6;
  if (has_keytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->keytype(), target);
  }

  // optional uint64 keyval = 7;
  if (has_keyval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->keyval(), target);
  }

  // optional int32 teamid = 8;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->teamid(), target);
  }

  // optional int64 dupid = 9;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->dupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2SNotifyDupFinishRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 sceneid = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional uint32 logicid = 4;
    if (has_logicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicid());
    }

    // optional uint32 zoneid = 5;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional int32 keytype = 6;
    if (has_keytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keytype());
    }

    // optional uint64 keyval = 7;
    if (has_keyval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->keyval());
    }

    // optional int32 teamid = 8;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 dupid = 9;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SNotifyDupFinishRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2SNotifyDupFinishRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2SNotifyDupFinishRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2SNotifyDupFinishRsp::MergeFrom(const C2SNotifyDupFinishRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_keytype()) {
      set_keytype(from.keytype());
    }
    if (from.has_keyval()) {
      set_keyval(from.keyval());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2SNotifyDupFinishRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SNotifyDupFinishRsp::CopyFrom(const C2SNotifyDupFinishRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SNotifyDupFinishRsp::IsInitialized() const {

  return true;
}

void C2SNotifyDupFinishRsp::Swap(C2SNotifyDupFinishRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(mapid_, other->mapid_);
    std::swap(logicid_, other->logicid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(keytype_, other->keytype_);
    std::swap(keyval_, other->keyval_);
    std::swap(teamid_, other->teamid_);
    std::swap(dupid_, other->dupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2SNotifyDupFinishRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2SNotifyDupFinishRsp_descriptor_;
  metadata.reflection = C2SNotifyDupFinishRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2STeamEnterDupReq::kDupIdFieldNumber;
const int C2STeamEnterDupReq::kParamsFieldNumber;
const int C2STeamEnterDupReq::kIsdynFieldNumber;
#endif  // !_MSC_VER

C2STeamEnterDupReq::C2STeamEnterDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2STeamEnterDupReq::InitAsDefaultInstance() {
  params_ = const_cast< ::proto_ff::CreateSceneParamProto*>(&::proto_ff::CreateSceneParamProto::default_instance());
}

C2STeamEnterDupReq::C2STeamEnterDupReq(const C2STeamEnterDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2STeamEnterDupReq::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = 0;
  params_ = NULL;
  isdyn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2STeamEnterDupReq::~C2STeamEnterDupReq() {
  SharedDtor();
}

void C2STeamEnterDupReq::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void C2STeamEnterDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2STeamEnterDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2STeamEnterDupReq_descriptor_;
}

const C2STeamEnterDupReq& C2STeamEnterDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

C2STeamEnterDupReq* C2STeamEnterDupReq::default_instance_ = NULL;

C2STeamEnterDupReq* C2STeamEnterDupReq::New() const {
  return new C2STeamEnterDupReq;
}

void C2STeamEnterDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = 0;
    if (has_params()) {
      if (params_ != NULL) params_->::proto_ff::CreateSceneParamProto::Clear();
    }
    isdyn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2STeamEnterDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // optional .proto_ff.CreateSceneParamProto params = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isdyn;
        break;
      }

      // optional int32 isdyn = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdyn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdyn_)));
          set_has_isdyn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2STeamEnterDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dupId = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dupid(), output);
  }

  // optional .proto_ff.CreateSceneParamProto params = 3;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->params(), output);
  }

  // optional int32 isdyn = 4;
  if (has_isdyn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isdyn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2STeamEnterDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dupId = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dupid(), target);
  }

  // optional .proto_ff.CreateSceneParamProto params = 3;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->params(), target);
  }

  // optional int32 isdyn = 4;
  if (has_isdyn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isdyn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2STeamEnterDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dupId = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dupid());
    }

    // optional .proto_ff.CreateSceneParamProto params = 3;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

    // optional int32 isdyn = 4;
    if (has_isdyn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdyn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2STeamEnterDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2STeamEnterDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2STeamEnterDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2STeamEnterDupReq::MergeFrom(const C2STeamEnterDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_params()) {
      mutable_params()->::proto_ff::CreateSceneParamProto::MergeFrom(from.params());
    }
    if (from.has_isdyn()) {
      set_isdyn(from.isdyn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2STeamEnterDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2STeamEnterDupReq::CopyFrom(const C2STeamEnterDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2STeamEnterDupReq::IsInitialized() const {

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  return true;
}

void C2STeamEnterDupReq::Swap(C2STeamEnterDupReq* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    std::swap(params_, other->params_);
    std::swap(isdyn_, other->isdyn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2STeamEnterDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2STeamEnterDupReq_descriptor_;
  metadata.reflection = C2STeamEnterDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2LCreateDupReq::kParamsFieldNumber;
const int S2LCreateDupReq::kExParamsFieldNumber;
#endif  // !_MSC_VER

S2LCreateDupReq::S2LCreateDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2LCreateDupReq::InitAsDefaultInstance() {
  params_ = const_cast< ::proto_ff::CreateSceneParamProto*>(&::proto_ff::CreateSceneParamProto::default_instance());
}

S2LCreateDupReq::S2LCreateDupReq(const S2LCreateDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2LCreateDupReq::SharedCtor() {
  _cached_size_ = 0;
  params_ = NULL;
  ex_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2LCreateDupReq::~S2LCreateDupReq() {
  SharedDtor();
}

void S2LCreateDupReq::SharedDtor() {
  if (ex_params_ != &::google::protobuf::internal::kEmptyString) {
    delete ex_params_;
  }
  if (this != default_instance_) {
    delete params_;
  }
}

void S2LCreateDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2LCreateDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2LCreateDupReq_descriptor_;
}

const S2LCreateDupReq& S2LCreateDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

S2LCreateDupReq* S2LCreateDupReq::default_instance_ = NULL;

S2LCreateDupReq* S2LCreateDupReq::New() const {
  return new S2LCreateDupReq;
}

void S2LCreateDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_params()) {
      if (params_ != NULL) params_->::proto_ff::CreateSceneParamProto::Clear();
    }
    if (has_ex_params()) {
      if (ex_params_ != &::google::protobuf::internal::kEmptyString) {
        ex_params_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2LCreateDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.CreateSceneParamProto params = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ex_params;
        break;
      }

      // optional bytes ex_params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ex_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ex_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2LCreateDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.CreateSceneParamProto params = 1;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->params(), output);
  }

  // optional bytes ex_params = 2;
  if (has_ex_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ex_params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2LCreateDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.CreateSceneParamProto params = 1;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->params(), target);
  }

  // optional bytes ex_params = 2;
  if (has_ex_params()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ex_params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2LCreateDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.CreateSceneParamProto params = 1;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

    // optional bytes ex_params = 2;
    if (has_ex_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ex_params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2LCreateDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2LCreateDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2LCreateDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2LCreateDupReq::MergeFrom(const S2LCreateDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_params()) {
      mutable_params()->::proto_ff::CreateSceneParamProto::MergeFrom(from.params());
    }
    if (from.has_ex_params()) {
      set_ex_params(from.ex_params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2LCreateDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2LCreateDupReq::CopyFrom(const S2LCreateDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2LCreateDupReq::IsInitialized() const {

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  return true;
}

void S2LCreateDupReq::Swap(S2LCreateDupReq* other) {
  if (other != this) {
    std::swap(params_, other->params_);
    std::swap(ex_params_, other->ex_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2LCreateDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2LCreateDupReq_descriptor_;
  metadata.reflection = S2LCreateDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2SCreateDupRsp::kRspFieldNumber;
#endif  // !_MSC_VER

L2SCreateDupRsp::L2SCreateDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2SCreateDupRsp::InitAsDefaultInstance() {
  rsp_ = const_cast< ::proto_ff::C2SCreateDupResultRsp*>(&::proto_ff::C2SCreateDupResultRsp::default_instance());
}

L2SCreateDupRsp::L2SCreateDupRsp(const L2SCreateDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2SCreateDupRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2SCreateDupRsp::~L2SCreateDupRsp() {
  SharedDtor();
}

void L2SCreateDupRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_;
  }
}

void L2SCreateDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2SCreateDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2SCreateDupRsp_descriptor_;
}

const L2SCreateDupRsp& L2SCreateDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2SCreateDupRsp* L2SCreateDupRsp::default_instance_ = NULL;

L2SCreateDupRsp* L2SCreateDupRsp::New() const {
  return new L2SCreateDupRsp;
}

void L2SCreateDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp()) {
      if (rsp_ != NULL) rsp_->::proto_ff::C2SCreateDupResultRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2SCreateDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.C2SCreateDupResultRsp rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2SCreateDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.C2SCreateDupResultRsp rsp = 1;
  if (has_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2SCreateDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.C2SCreateDupResultRsp rsp = 1;
  if (has_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2SCreateDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.C2SCreateDupResultRsp rsp = 1;
    if (has_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2SCreateDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2SCreateDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2SCreateDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2SCreateDupRsp::MergeFrom(const L2SCreateDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp()) {
      mutable_rsp()->::proto_ff::C2SCreateDupResultRsp::MergeFrom(from.rsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2SCreateDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2SCreateDupRsp::CopyFrom(const L2SCreateDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2SCreateDupRsp::IsInitialized() const {

  return true;
}

void L2SCreateDupRsp::Swap(L2SCreateDupRsp* other) {
  if (other != this) {
    std::swap(rsp_, other->rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2SCreateDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2SCreateDupRsp_descriptor_;
  metadata.reflection = L2SCreateDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2LNotifyRoleEnterDup::kCidFieldNumber;
const int S2LNotifyRoleEnterDup::kZidFieldNumber;
const int S2LNotifyRoleEnterDup::kSceneidFieldNumber;
const int S2LNotifyRoleEnterDup::kMapidFieldNumber;
const int S2LNotifyRoleEnterDup::kBornidFieldNumber;
#endif  // !_MSC_VER

S2LNotifyRoleEnterDup::S2LNotifyRoleEnterDup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2LNotifyRoleEnterDup::InitAsDefaultInstance() {
}

S2LNotifyRoleEnterDup::S2LNotifyRoleEnterDup(const S2LNotifyRoleEnterDup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2LNotifyRoleEnterDup::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_LONGLONG(0);
  zid_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  mapid_ = GOOGLE_ULONGLONG(0);
  bornid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2LNotifyRoleEnterDup::~S2LNotifyRoleEnterDup() {
  SharedDtor();
}

void S2LNotifyRoleEnterDup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2LNotifyRoleEnterDup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2LNotifyRoleEnterDup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2LNotifyRoleEnterDup_descriptor_;
}

const S2LNotifyRoleEnterDup& S2LNotifyRoleEnterDup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

S2LNotifyRoleEnterDup* S2LNotifyRoleEnterDup::default_instance_ = NULL;

S2LNotifyRoleEnterDup* S2LNotifyRoleEnterDup::New() const {
  return new S2LNotifyRoleEnterDup;
}

void S2LNotifyRoleEnterDup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_LONGLONG(0);
    zid_ = 0;
    sceneid_ = GOOGLE_ULONGLONG(0);
    mapid_ = GOOGLE_ULONGLONG(0);
    bornid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2LNotifyRoleEnterDup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional int32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bornid;
        break;
      }

      // optional int32 bornid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bornid_)));
          set_has_bornid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2LNotifyRoleEnterDup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cid(), output);
  }

  // optional int32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zid(), output);
  }

  // optional uint64 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sceneid(), output);
  }

  // optional uint64 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mapid(), output);
  }

  // optional int32 bornid = 5;
  if (has_bornid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bornid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2LNotifyRoleEnterDup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cid(), target);
  }

  // optional int32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zid(), target);
  }

  // optional uint64 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sceneid(), target);
  }

  // optional uint64 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mapid(), target);
  }

  // optional int32 bornid = 5;
  if (has_bornid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bornid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2LNotifyRoleEnterDup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cid());
    }

    // optional int32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional uint64 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional int32 bornid = 5;
    if (has_bornid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bornid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2LNotifyRoleEnterDup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2LNotifyRoleEnterDup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2LNotifyRoleEnterDup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2LNotifyRoleEnterDup::MergeFrom(const S2LNotifyRoleEnterDup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_bornid()) {
      set_bornid(from.bornid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2LNotifyRoleEnterDup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2LNotifyRoleEnterDup::CopyFrom(const S2LNotifyRoleEnterDup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2LNotifyRoleEnterDup::IsInitialized() const {

  return true;
}

void S2LNotifyRoleEnterDup::Swap(S2LNotifyRoleEnterDup* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(mapid_, other->mapid_);
    std::swap(bornid_, other->bornid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2LNotifyRoleEnterDup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2LNotifyRoleEnterDup_descriptor_;
  metadata.reflection = S2LNotifyRoleEnterDup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2SNotifyDupFinishRsp::kRspFieldNumber;
#endif  // !_MSC_VER

L2SNotifyDupFinishRsp::L2SNotifyDupFinishRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2SNotifyDupFinishRsp::InitAsDefaultInstance() {
  rsp_ = const_cast< ::proto_ff::C2SNotifyDupFinishRsp*>(&::proto_ff::C2SNotifyDupFinishRsp::default_instance());
}

L2SNotifyDupFinishRsp::L2SNotifyDupFinishRsp(const L2SNotifyDupFinishRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2SNotifyDupFinishRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2SNotifyDupFinishRsp::~L2SNotifyDupFinishRsp() {
  SharedDtor();
}

void L2SNotifyDupFinishRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_;
  }
}

void L2SNotifyDupFinishRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2SNotifyDupFinishRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2SNotifyDupFinishRsp_descriptor_;
}

const L2SNotifyDupFinishRsp& L2SNotifyDupFinishRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2SNotifyDupFinishRsp* L2SNotifyDupFinishRsp::default_instance_ = NULL;

L2SNotifyDupFinishRsp* L2SNotifyDupFinishRsp::New() const {
  return new L2SNotifyDupFinishRsp;
}

void L2SNotifyDupFinishRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rsp()) {
      if (rsp_ != NULL) rsp_->::proto_ff::C2SNotifyDupFinishRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2SNotifyDupFinishRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.C2SNotifyDupFinishRsp rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2SNotifyDupFinishRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.C2SNotifyDupFinishRsp rsp = 1;
  if (has_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2SNotifyDupFinishRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.C2SNotifyDupFinishRsp rsp = 1;
  if (has_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2SNotifyDupFinishRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.C2SNotifyDupFinishRsp rsp = 1;
    if (has_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2SNotifyDupFinishRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2SNotifyDupFinishRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2SNotifyDupFinishRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2SNotifyDupFinishRsp::MergeFrom(const L2SNotifyDupFinishRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp()) {
      mutable_rsp()->::proto_ff::C2SNotifyDupFinishRsp::MergeFrom(from.rsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2SNotifyDupFinishRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2SNotifyDupFinishRsp::CopyFrom(const L2SNotifyDupFinishRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2SNotifyDupFinishRsp::IsInitialized() const {

  return true;
}

void L2SNotifyDupFinishRsp::Swap(L2SNotifyDupFinishRsp* other) {
  if (other != this) {
    std::swap(rsp_, other->rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2SNotifyDupFinishRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2SNotifyDupFinishRsp_descriptor_;
  metadata.reflection = L2SNotifyDupFinishRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CGHostDupRankReq::kCidFieldNumber;
const int L2CGHostDupRankReq::kWaveFieldNumber;
const int L2CGHostDupRankReq::kTimeFieldNumber;
#endif  // !_MSC_VER

L2CGHostDupRankReq::L2CGHostDupRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CGHostDupRankReq::InitAsDefaultInstance() {
}

L2CGHostDupRankReq::L2CGHostDupRankReq(const L2CGHostDupRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CGHostDupRankReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  wave_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CGHostDupRankReq::~L2CGHostDupRankReq() {
  SharedDtor();
}

void L2CGHostDupRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CGHostDupRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CGHostDupRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CGHostDupRankReq_descriptor_;
}

const L2CGHostDupRankReq& L2CGHostDupRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2CGHostDupRankReq* L2CGHostDupRankReq::default_instance_ = NULL;

L2CGHostDupRankReq* L2CGHostDupRankReq::New() const {
  return new L2CGHostDupRankReq;
}

void L2CGHostDupRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    wave_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CGHostDupRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wave;
        break;
      }

      // optional int32 wave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CGHostDupRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 wave = 2;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wave(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CGHostDupRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 wave = 2;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wave(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CGHostDupRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 wave = 2;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CGHostDupRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CGHostDupRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CGHostDupRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CGHostDupRankReq::MergeFrom(const L2CGHostDupRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CGHostDupRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CGHostDupRankReq::CopyFrom(const L2CGHostDupRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CGHostDupRankReq::IsInitialized() const {

  return true;
}

void L2CGHostDupRankReq::Swap(L2CGHostDupRankReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(wave_, other->wave_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CGHostDupRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CGHostDupRankReq_descriptor_;
  metadata.reflection = L2CGHostDupRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CUpdateGHostDupRankReq::kCidFieldNumber;
const int L2CUpdateGHostDupRankReq::kWaveFieldNumber;
const int L2CUpdateGHostDupRankReq::kTimeFieldNumber;
#endif  // !_MSC_VER

L2CUpdateGHostDupRankReq::L2CUpdateGHostDupRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CUpdateGHostDupRankReq::InitAsDefaultInstance() {
}

L2CUpdateGHostDupRankReq::L2CUpdateGHostDupRankReq(const L2CUpdateGHostDupRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CUpdateGHostDupRankReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  wave_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CUpdateGHostDupRankReq::~L2CUpdateGHostDupRankReq() {
  SharedDtor();
}

void L2CUpdateGHostDupRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CUpdateGHostDupRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CUpdateGHostDupRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CUpdateGHostDupRankReq_descriptor_;
}

const L2CUpdateGHostDupRankReq& L2CUpdateGHostDupRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2CUpdateGHostDupRankReq* L2CUpdateGHostDupRankReq::default_instance_ = NULL;

L2CUpdateGHostDupRankReq* L2CUpdateGHostDupRankReq::New() const {
  return new L2CUpdateGHostDupRankReq;
}

void L2CUpdateGHostDupRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    wave_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CUpdateGHostDupRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wave;
        break;
      }

      // optional int32 wave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CUpdateGHostDupRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 wave = 2;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wave(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CUpdateGHostDupRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 wave = 2;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wave(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CUpdateGHostDupRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 wave = 2;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CUpdateGHostDupRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CUpdateGHostDupRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CUpdateGHostDupRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CUpdateGHostDupRankReq::MergeFrom(const L2CUpdateGHostDupRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CUpdateGHostDupRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CUpdateGHostDupRankReq::CopyFrom(const L2CUpdateGHostDupRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CUpdateGHostDupRankReq::IsInitialized() const {

  return true;
}

void L2CUpdateGHostDupRankReq::Swap(L2CUpdateGHostDupRankReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(wave_, other->wave_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CUpdateGHostDupRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CUpdateGHostDupRankReq_descriptor_;
  metadata.reflection = L2CUpdateGHostDupRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CSynPassYaotaReq::kDupidFieldNumber;
const int L2CSynPassYaotaReq::kInfoFieldNumber;
const int L2CSynPassYaotaReq::kTimeFieldNumber;
#endif  // !_MSC_VER

L2CSynPassYaotaReq::L2CSynPassYaotaReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CSynPassYaotaReq::InitAsDefaultInstance() {
}

L2CSynPassYaotaReq::L2CSynPassYaotaReq(const L2CSynPassYaotaReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CSynPassYaotaReq::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CSynPassYaotaReq::~L2CSynPassYaotaReq() {
  SharedDtor();
}

void L2CSynPassYaotaReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CSynPassYaotaReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CSynPassYaotaReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CSynPassYaotaReq_descriptor_;
}

const L2CSynPassYaotaReq& L2CSynPassYaotaReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

L2CSynPassYaotaReq* L2CSynPassYaotaReq::default_instance_ = NULL;

L2CSynPassYaotaReq* L2CSynPassYaotaReq::New() const {
  return new L2CSynPassYaotaReq;
}

void L2CSynPassYaotaReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CSynPassYaotaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.RolePlayerMiniInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CSynPassYaotaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dupid = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dupid(), output);
  }

  // repeated .proto_ff.RolePlayerMiniInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CSynPassYaotaReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dupid = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dupid(), target);
  }

  // repeated .proto_ff.RolePlayerMiniInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CSynPassYaotaReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dupid = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dupid());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  // repeated .proto_ff.RolePlayerMiniInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CSynPassYaotaReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CSynPassYaotaReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CSynPassYaotaReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CSynPassYaotaReq::MergeFrom(const L2CSynPassYaotaReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CSynPassYaotaReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CSynPassYaotaReq::CopyFrom(const L2CSynPassYaotaReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CSynPassYaotaReq::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void L2CSynPassYaotaReq::Swap(L2CSynPassYaotaReq* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    info_.Swap(&other->info_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CSynPassYaotaReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CSynPassYaotaReq_descriptor_;
  metadata.reflection = L2CSynPassYaotaReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyDupTeamDisReq::kTeamidFieldNumber;
#endif  // !_MSC_VER

NotifyDupTeamDisReq::NotifyDupTeamDisReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyDupTeamDisReq::InitAsDefaultInstance() {
}

NotifyDupTeamDisReq::NotifyDupTeamDisReq(const NotifyDupTeamDisReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyDupTeamDisReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDupTeamDisReq::~NotifyDupTeamDisReq() {
  SharedDtor();
}

void NotifyDupTeamDisReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDupTeamDisReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDupTeamDisReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDupTeamDisReq_descriptor_;
}

const NotifyDupTeamDisReq& NotifyDupTeamDisReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

NotifyDupTeamDisReq* NotifyDupTeamDisReq::default_instance_ = NULL;

NotifyDupTeamDisReq* NotifyDupTeamDisReq::New() const {
  return new NotifyDupTeamDisReq;
}

void NotifyDupTeamDisReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDupTeamDisReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyDupTeamDisReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyDupTeamDisReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyDupTeamDisReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDupTeamDisReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDupTeamDisReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDupTeamDisReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDupTeamDisReq::MergeFrom(const NotifyDupTeamDisReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDupTeamDisReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDupTeamDisReq::CopyFrom(const NotifyDupTeamDisReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDupTeamDisReq::IsInitialized() const {

  return true;
}

void NotifyDupTeamDisReq::Swap(NotifyDupTeamDisReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDupTeamDisReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDupTeamDisReq_descriptor_;
  metadata.reflection = NotifyDupTeamDisReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCNotifyYaotaFirstPassReq::kCidFieldNumber;
const int LCNotifyYaotaFirstPassReq::kRecvedFirstPassIdsFieldNumber;
#endif  // !_MSC_VER

LCNotifyYaotaFirstPassReq::LCNotifyYaotaFirstPassReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCNotifyYaotaFirstPassReq::InitAsDefaultInstance() {
}

LCNotifyYaotaFirstPassReq::LCNotifyYaotaFirstPassReq(const LCNotifyYaotaFirstPassReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCNotifyYaotaFirstPassReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCNotifyYaotaFirstPassReq::~LCNotifyYaotaFirstPassReq() {
  SharedDtor();
}

void LCNotifyYaotaFirstPassReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCNotifyYaotaFirstPassReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCNotifyYaotaFirstPassReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCNotifyYaotaFirstPassReq_descriptor_;
}

const LCNotifyYaotaFirstPassReq& LCNotifyYaotaFirstPassReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

LCNotifyYaotaFirstPassReq* LCNotifyYaotaFirstPassReq::default_instance_ = NULL;

LCNotifyYaotaFirstPassReq* LCNotifyYaotaFirstPassReq::New() const {
  return new LCNotifyYaotaFirstPassReq;
}

void LCNotifyYaotaFirstPassReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  recved_first_pass_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCNotifyYaotaFirstPassReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recved_first_pass_ids;
        break;
      }

      // repeated int32 recved_first_pass_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recved_first_pass_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_recved_first_pass_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recved_first_pass_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recved_first_pass_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCNotifyYaotaFirstPassReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // repeated int32 recved_first_pass_ids = 2;
  for (int i = 0; i < this->recved_first_pass_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->recved_first_pass_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCNotifyYaotaFirstPassReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // repeated int32 recved_first_pass_ids = 2;
  for (int i = 0; i < this->recved_first_pass_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->recved_first_pass_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCNotifyYaotaFirstPassReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated int32 recved_first_pass_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->recved_first_pass_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recved_first_pass_ids(i));
    }
    total_size += 1 * this->recved_first_pass_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCNotifyYaotaFirstPassReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCNotifyYaotaFirstPassReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCNotifyYaotaFirstPassReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCNotifyYaotaFirstPassReq::MergeFrom(const LCNotifyYaotaFirstPassReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  recved_first_pass_ids_.MergeFrom(from.recved_first_pass_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCNotifyYaotaFirstPassReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCNotifyYaotaFirstPassReq::CopyFrom(const LCNotifyYaotaFirstPassReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCNotifyYaotaFirstPassReq::IsInitialized() const {

  return true;
}

void LCNotifyYaotaFirstPassReq::Swap(LCNotifyYaotaFirstPassReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    recved_first_pass_ids_.Swap(&other->recved_first_pass_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCNotifyYaotaFirstPassReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCNotifyYaotaFirstPassReq_descriptor_;
  metadata.reflection = LCNotifyYaotaFirstPassReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLYaotaRecvReq::kCidFieldNumber;
const int CLYaotaRecvReq::kDupidFieldNumber;
const int CLYaotaRecvReq::kTypeFieldNumber;
const int CLYaotaRecvReq::kFirstPassIdsFieldNumber;
#endif  // !_MSC_VER

CLYaotaRecvReq::CLYaotaRecvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLYaotaRecvReq::InitAsDefaultInstance() {
}

CLYaotaRecvReq::CLYaotaRecvReq(const CLYaotaRecvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLYaotaRecvReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  dupid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLYaotaRecvReq::~CLYaotaRecvReq() {
  SharedDtor();
}

void CLYaotaRecvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLYaotaRecvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLYaotaRecvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLYaotaRecvReq_descriptor_;
}

const CLYaotaRecvReq& CLYaotaRecvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dup_2eproto();
  return *default_instance_;
}

CLYaotaRecvReq* CLYaotaRecvReq::default_instance_ = NULL;

CLYaotaRecvReq* CLYaotaRecvReq::New() const {
  return new CLYaotaRecvReq;
}

void CLYaotaRecvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    dupid_ = 0;
    type_ = 0;
  }
  first_pass_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLYaotaRecvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupid;
        break;
      }

      // optional int32 dupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_first_pass_ids;
        break;
      }

      // repeated int32 first_pass_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_pass_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_first_pass_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_first_pass_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_first_pass_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLYaotaRecvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 dupid = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dupid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // repeated int32 first_pass_ids = 4;
  for (int i = 0; i < this->first_pass_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->first_pass_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLYaotaRecvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 dupid = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dupid(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // repeated int32 first_pass_ids = 4;
  for (int i = 0; i < this->first_pass_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->first_pass_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLYaotaRecvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 dupid = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dupid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 first_pass_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_pass_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->first_pass_ids(i));
    }
    total_size += 1 * this->first_pass_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLYaotaRecvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLYaotaRecvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLYaotaRecvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLYaotaRecvReq::MergeFrom(const CLYaotaRecvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  first_pass_ids_.MergeFrom(from.first_pass_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLYaotaRecvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLYaotaRecvReq::CopyFrom(const CLYaotaRecvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLYaotaRecvReq::IsInitialized() const {

  return true;
}

void CLYaotaRecvReq::Swap(CLYaotaRecvReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(dupid_, other->dupid_);
    std::swap(type_, other->type_);
    first_pass_ids_.Swap(&other->first_pass_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLYaotaRecvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLYaotaRecvReq_descriptor_;
  metadata.reflection = CLYaotaRecvReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
