// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: element.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "element.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* elementelementattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  elementelementattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* elementelementmaterialDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  elementelementmaterialDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* elementelement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  elementelement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_elementelement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_elementelement_reflection_ = NULL;
const ::google::protobuf::Descriptor* elementfragmentattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  elementfragmentattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* elementfragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  elementfragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_elementfragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_elementfragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* elementelementUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  elementelementUI_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_elementelementUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_elementelementUI_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_element_2eproto() {
  protobuf_AddDesc_element_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "element.proto");
  GOOGLE_CHECK(file != NULL);
  elementelementattributeDesc_descriptor_ = file->message_type(0);
  static const int elementelementattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelementattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelementattributeDesc, value_),
  };
  elementelementattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      elementelementattributeDesc_descriptor_,
      elementelementattributeDesc::default_instance_,
      elementelementattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelementattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelementattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(elementelementattributeDesc));
  elementelementmaterialDesc_descriptor_ = file->message_type(1);
  static const int elementelementmaterialDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelementmaterialDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelementmaterialDesc, exp_),
  };
  elementelementmaterialDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      elementelementmaterialDesc_descriptor_,
      elementelementmaterialDesc::default_instance_,
      elementelementmaterialDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelementmaterialDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelementmaterialDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(elementelementmaterialDesc));
  elementelement_descriptor_ = file->message_type(2);
  static const int elementelement_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelement, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelement, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelement, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelement, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelement, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelement, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelement, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelement, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelement, fragmentid_),
  };
  elementelement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      elementelement_descriptor_,
      elementelement::default_instance_,
      elementelement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(elementelement));
  Sheet_elementelement_descriptor_ = file->message_type(3);
  static const int Sheet_elementelement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_elementelement, elementelement_list_),
  };
  Sheet_elementelement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_elementelement_descriptor_,
      Sheet_elementelement::default_instance_,
      Sheet_elementelement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_elementelement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_elementelement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_elementelement));
  elementfragmentattributeDesc_descriptor_ = file->message_type(4);
  static const int elementfragmentattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementfragmentattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementfragmentattributeDesc, value_),
  };
  elementfragmentattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      elementfragmentattributeDesc_descriptor_,
      elementfragmentattributeDesc::default_instance_,
      elementfragmentattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementfragmentattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementfragmentattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(elementfragmentattributeDesc));
  elementfragment_descriptor_ = file->message_type(5);
  static const int elementfragment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementfragment, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementfragment, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementfragment, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementfragment, attribute_),
  };
  elementfragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      elementfragment_descriptor_,
      elementfragment::default_instance_,
      elementfragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementfragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementfragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(elementfragment));
  Sheet_elementfragment_descriptor_ = file->message_type(6);
  static const int Sheet_elementfragment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_elementfragment, elementfragment_list_),
  };
  Sheet_elementfragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_elementfragment_descriptor_,
      Sheet_elementfragment::default_instance_,
      Sheet_elementfragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_elementfragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_elementfragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_elementfragment));
  elementelementUI_descriptor_ = file->message_type(7);
  static const int elementelementUI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelementUI, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelementUI, name_),
  };
  elementelementUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      elementelementUI_descriptor_,
      elementelementUI::default_instance_,
      elementelementUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelementUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(elementelementUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(elementelementUI));
  Sheet_elementelementUI_descriptor_ = file->message_type(8);
  static const int Sheet_elementelementUI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_elementelementUI, elementelementui_list_),
  };
  Sheet_elementelementUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_elementelementUI_descriptor_,
      Sheet_elementelementUI::default_instance_,
      Sheet_elementelementUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_elementelementUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_elementelementUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_elementelementUI));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_element_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    elementelementattributeDesc_descriptor_, &elementelementattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    elementelementmaterialDesc_descriptor_, &elementelementmaterialDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    elementelement_descriptor_, &elementelement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_elementelement_descriptor_, &Sheet_elementelement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    elementfragmentattributeDesc_descriptor_, &elementfragmentattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    elementfragment_descriptor_, &elementfragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_elementfragment_descriptor_, &Sheet_elementfragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    elementelementUI_descriptor_, &elementelementUI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_elementelementUI_descriptor_, &Sheet_elementelementUI::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_element_2eproto() {
  delete elementelementattributeDesc::default_instance_;
  delete elementelementattributeDesc_reflection_;
  delete elementelementmaterialDesc::default_instance_;
  delete elementelementmaterialDesc_reflection_;
  delete elementelement::default_instance_;
  delete elementelement_reflection_;
  delete Sheet_elementelement::default_instance_;
  delete Sheet_elementelement_reflection_;
  delete elementfragmentattributeDesc::default_instance_;
  delete elementfragmentattributeDesc_reflection_;
  delete elementfragment::default_instance_;
  delete elementfragment_reflection_;
  delete Sheet_elementfragment::default_instance_;
  delete Sheet_elementfragment_reflection_;
  delete elementelementUI::default_instance_;
  delete elementelementUI_reflection_;
  delete Sheet_elementelementUI::default_instance_;
  delete Sheet_elementelementUI_reflection_;
}

void protobuf_AddDesc_element_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\relement.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"c\n\033elementelementattributeDesc\022"
    " \n\004type\030\001 \001(\005B\022\302\377\024\016\345\237\272\347\241\200\345\261\236\346\200\247ID\022\"\n\005val"
    "ue\030\002 \001(\005B\023\302\377\024\017\345\237\272\347\241\200\345\261\236\346\200\247\345\200\274\"d\n\032element"
    "elementmaterialDesc\022\036\n\002id\030\001 \001(\003B\022\302\377\024\016\350\277\233"
    "\351\230\266\346\235\220\346\226\231ID\022&\n\003exp\030\002 \001(\005B\031\302\377\024\025\350\277\233\351\230\266\346\235\220\346"
    "\226\231\347\273\217\351\252\214\345\200\274\"\213\003\n\016elementelement\022\030\n\002ID\030\001 \001"
    "(\003B\014\302\377\024\010\345\205\203\347\264\240ID\022&\n\010resource\030\002 \001(\tB\024\302\377\024\014"
    "\350\265\204\346\272\220\345\275\242\350\261\241\220\301\024<\022\030\n\004type\030\003 \001(\005B\n\302\377\024\006\347\261\273\345"
    "\236\213\022\031\n\005level\030\004 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022#\n\003exp\030\005 \001"
    "(\005B\026\302\377\024\022\345\205\203\347\264\240\345\215\207\347\272\247\347\273\217\351\252\214\022#\n\007skillID\030\006 "
    "\001(\003B\022\302\377\024\016\350\247\243\351\224\201\346\212\200\350\203\275ID\022F\n\tattribute\030\007 \003"
    "(\0132%.proto_ff.elementelementattributeDes"
    "cB\014\302\377\024\004$$$$\210\301\024\002\022D\n\010material\030\010 \003(\0132$.prot"
    "o_ff.elementelementmaterialDescB\014\302\377\024\004$$$"
    "$\210\301\024\003\022*\n\nfragmentID\030\t \003(\003B\026\302\377\024\016\345\205\263\350\201\224\347\242\216"
    "\347\211\207ID\210\301\024\003\"T\n\024Sheet_elementelement\022<\n\023ele"
    "mentelement_List\030\001 \003(\0132\030.proto_ff.elemen"
    "telementB\005\210\301\024\320\017\"d\n\034elementfragmentattrib"
    "uteDesc\022 \n\004type\030\001 \001(\005B\022\302\377\024\016\345\237\272\347\241\200\345\261\236\346\200\247I"
    "D\022\"\n\005value\030\002 \001(\005B\023\302\377\024\017\345\237\272\347\241\200\345\261\236\346\200\247\345\200\274\"\273\001"
    "\n\017elementfragment\022\030\n\002ID\030\001 \001(\003B\014\302\377\024\010\347\242\216\347\211"
    "\207ID\022\034\n\006itemID\030\002 \001(\003B\014\302\377\024\010\347\211\251\345\223\201ID\022\'\n\007ite"
    "mNum\030\003 \001(\005B\026\302\377\024\022\347\242\216\347\211\207\344\275\277\347\224\250\344\270\212\351\231\220\022G\n\tat"
    "tribute\030\004 \003(\0132&.proto_ff.elementfragment"
    "attributeDescB\014\302\377\024\004$$$$\210\301\024\003\"V\n\025Sheet_ele"
    "mentfragment\022=\n\024elementfragment_List\030\001 \003"
    "(\0132\031.proto_ff.elementfragmentB\004\210\301\024\024\"P\n\020e"
    "lementelementUI\022\030\n\004type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236"
    "\213\022\"\n\004name\030\002 \001(\tB\024\302\377\024\014\345\205\203\347\264\240\345\220\215\345\255\227\220\301\024<\"Y\n"
    "\026Sheet_elementelementUI\022\?\n\025elementelemen"
    "tUI_List\030\001 \003(\0132\032.proto_ff.elementelement"
    "UIB\004\210\301\024\024", 1288);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "element.proto", &protobuf_RegisterTypes);
  elementelementattributeDesc::default_instance_ = new elementelementattributeDesc();
  elementelementmaterialDesc::default_instance_ = new elementelementmaterialDesc();
  elementelement::default_instance_ = new elementelement();
  Sheet_elementelement::default_instance_ = new Sheet_elementelement();
  elementfragmentattributeDesc::default_instance_ = new elementfragmentattributeDesc();
  elementfragment::default_instance_ = new elementfragment();
  Sheet_elementfragment::default_instance_ = new Sheet_elementfragment();
  elementelementUI::default_instance_ = new elementelementUI();
  Sheet_elementelementUI::default_instance_ = new Sheet_elementelementUI();
  elementelementattributeDesc::default_instance_->InitAsDefaultInstance();
  elementelementmaterialDesc::default_instance_->InitAsDefaultInstance();
  elementelement::default_instance_->InitAsDefaultInstance();
  Sheet_elementelement::default_instance_->InitAsDefaultInstance();
  elementfragmentattributeDesc::default_instance_->InitAsDefaultInstance();
  elementfragment::default_instance_->InitAsDefaultInstance();
  Sheet_elementfragment::default_instance_->InitAsDefaultInstance();
  elementelementUI::default_instance_->InitAsDefaultInstance();
  Sheet_elementelementUI::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_element_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_element_2eproto {
  StaticDescriptorInitializer_element_2eproto() {
    protobuf_AddDesc_element_2eproto();
  }
} static_descriptor_initializer_element_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int elementelementattributeDesc::kTypeFieldNumber;
const int elementelementattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

elementelementattributeDesc::elementelementattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void elementelementattributeDesc::InitAsDefaultInstance() {
}

elementelementattributeDesc::elementelementattributeDesc(const elementelementattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void elementelementattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

elementelementattributeDesc::~elementelementattributeDesc() {
  SharedDtor();
}

void elementelementattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void elementelementattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* elementelementattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return elementelementattributeDesc_descriptor_;
}

const elementelementattributeDesc& elementelementattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_element_2eproto();
  return *default_instance_;
}

elementelementattributeDesc* elementelementattributeDesc::default_instance_ = NULL;

elementelementattributeDesc* elementelementattributeDesc::New() const {
  return new elementelementattributeDesc;
}

void elementelementattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool elementelementattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void elementelementattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* elementelementattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int elementelementattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void elementelementattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const elementelementattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const elementelementattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void elementelementattributeDesc::MergeFrom(const elementelementattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void elementelementattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void elementelementattributeDesc::CopyFrom(const elementelementattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool elementelementattributeDesc::IsInitialized() const {

  return true;
}

void elementelementattributeDesc::Swap(elementelementattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata elementelementattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = elementelementattributeDesc_descriptor_;
  metadata.reflection = elementelementattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int elementelementmaterialDesc::kIdFieldNumber;
const int elementelementmaterialDesc::kExpFieldNumber;
#endif  // !_MSC_VER

elementelementmaterialDesc::elementelementmaterialDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void elementelementmaterialDesc::InitAsDefaultInstance() {
}

elementelementmaterialDesc::elementelementmaterialDesc(const elementelementmaterialDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void elementelementmaterialDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

elementelementmaterialDesc::~elementelementmaterialDesc() {
  SharedDtor();
}

void elementelementmaterialDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void elementelementmaterialDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* elementelementmaterialDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return elementelementmaterialDesc_descriptor_;
}

const elementelementmaterialDesc& elementelementmaterialDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_element_2eproto();
  return *default_instance_;
}

elementelementmaterialDesc* elementelementmaterialDesc::default_instance_ = NULL;

elementelementmaterialDesc* elementelementmaterialDesc::New() const {
  return new elementelementmaterialDesc;
}

void elementelementmaterialDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool elementelementmaterialDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void elementelementmaterialDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* elementelementmaterialDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int elementelementmaterialDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void elementelementmaterialDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const elementelementmaterialDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const elementelementmaterialDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void elementelementmaterialDesc::MergeFrom(const elementelementmaterialDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void elementelementmaterialDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void elementelementmaterialDesc::CopyFrom(const elementelementmaterialDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool elementelementmaterialDesc::IsInitialized() const {

  return true;
}

void elementelementmaterialDesc::Swap(elementelementmaterialDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata elementelementmaterialDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = elementelementmaterialDesc_descriptor_;
  metadata.reflection = elementelementmaterialDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int elementelement::kIDFieldNumber;
const int elementelement::kResourceFieldNumber;
const int elementelement::kTypeFieldNumber;
const int elementelement::kLevelFieldNumber;
const int elementelement::kExpFieldNumber;
const int elementelement::kSkillIDFieldNumber;
const int elementelement::kAttributeFieldNumber;
const int elementelement::kMaterialFieldNumber;
const int elementelement::kFragmentIDFieldNumber;
#endif  // !_MSC_VER

elementelement::elementelement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void elementelement::InitAsDefaultInstance() {
}

elementelement::elementelement(const elementelement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void elementelement::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  level_ = 0;
  exp_ = 0;
  skillid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

elementelement::~elementelement() {
  SharedDtor();
}

void elementelement::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (this != default_instance_) {
  }
}

void elementelement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* elementelement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return elementelement_descriptor_;
}

const elementelement& elementelement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_element_2eproto();
  return *default_instance_;
}

elementelement* elementelement::default_instance_ = NULL;

elementelement* elementelement::New() const {
  return new elementelement;
}

void elementelement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    type_ = 0;
    level_ = 0;
    exp_ = 0;
    skillid_ = GOOGLE_LONGLONG(0);
  }
  attribute_.Clear();
  material_.Clear();
  fragmentid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool elementelement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // optional string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional int32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skillID;
        break;
      }

      // optional int64 skillID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.elementelementattributeDesc attribute = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attribute;
        if (input->ExpectTag(66)) goto parse_material;
        break;
      }

      // repeated .proto_ff.elementelementmaterialDesc material = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_material;
        if (input->ExpectTag(72)) goto parse_fragmentID;
        break;
      }

      // repeated int64 fragmentID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragmentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 72, input, this->mutable_fragmentid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_fragmentid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fragmentID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void elementelement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }

  // optional int64 skillID = 6;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->skillid(), output);
  }

  // repeated .proto_ff.elementelementattributeDesc attribute = 7;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attribute(i), output);
  }

  // repeated .proto_ff.elementelementmaterialDesc material = 8;
  for (int i = 0; i < this->material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->material(i), output);
  }

  // repeated int64 fragmentID = 9;
  for (int i = 0; i < this->fragmentid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      9, this->fragmentid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* elementelement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resource(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }

  // optional int64 skillID = 6;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->skillid(), target);
  }

  // repeated .proto_ff.elementelementattributeDesc attribute = 7;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attribute(i), target);
  }

  // repeated .proto_ff.elementelementmaterialDesc material = 8;
  for (int i = 0; i < this->material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->material(i), target);
  }

  // repeated int64 fragmentID = 9;
  for (int i = 0; i < this->fragmentid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(9, this->fragmentid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int elementelement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int64 skillID = 6;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillid());
    }

  }
  // repeated .proto_ff.elementelementattributeDesc attribute = 7;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  // repeated .proto_ff.elementelementmaterialDesc material = 8;
  total_size += 1 * this->material_size();
  for (int i = 0; i < this->material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->material(i));
  }

  // repeated int64 fragmentID = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->fragmentid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->fragmentid(i));
    }
    total_size += 1 * this->fragmentid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void elementelement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const elementelement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const elementelement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void elementelement::MergeFrom(const elementelement& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  material_.MergeFrom(from.material_);
  fragmentid_.MergeFrom(from.fragmentid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void elementelement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void elementelement::CopyFrom(const elementelement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool elementelement::IsInitialized() const {

  return true;
}

void elementelement::Swap(elementelement* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(resource_, other->resource_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(skillid_, other->skillid_);
    attribute_.Swap(&other->attribute_);
    material_.Swap(&other->material_);
    fragmentid_.Swap(&other->fragmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata elementelement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = elementelement_descriptor_;
  metadata.reflection = elementelement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_elementelement::kElementelementListFieldNumber;
#endif  // !_MSC_VER

Sheet_elementelement::Sheet_elementelement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_elementelement::InitAsDefaultInstance() {
}

Sheet_elementelement::Sheet_elementelement(const Sheet_elementelement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_elementelement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_elementelement::~Sheet_elementelement() {
  SharedDtor();
}

void Sheet_elementelement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_elementelement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_elementelement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_elementelement_descriptor_;
}

const Sheet_elementelement& Sheet_elementelement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_element_2eproto();
  return *default_instance_;
}

Sheet_elementelement* Sheet_elementelement::default_instance_ = NULL;

Sheet_elementelement* Sheet_elementelement::New() const {
  return new Sheet_elementelement;
}

void Sheet_elementelement::Clear() {
  elementelement_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_elementelement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.elementelement elementelement_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elementelement_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elementelement_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elementelement_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_elementelement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.elementelement elementelement_List = 1;
  for (int i = 0; i < this->elementelement_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elementelement_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_elementelement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.elementelement elementelement_List = 1;
  for (int i = 0; i < this->elementelement_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elementelement_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_elementelement::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.elementelement elementelement_List = 1;
  total_size += 1 * this->elementelement_list_size();
  for (int i = 0; i < this->elementelement_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elementelement_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_elementelement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_elementelement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_elementelement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_elementelement::MergeFrom(const Sheet_elementelement& from) {
  GOOGLE_CHECK_NE(&from, this);
  elementelement_list_.MergeFrom(from.elementelement_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_elementelement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_elementelement::CopyFrom(const Sheet_elementelement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_elementelement::IsInitialized() const {

  return true;
}

void Sheet_elementelement::Swap(Sheet_elementelement* other) {
  if (other != this) {
    elementelement_list_.Swap(&other->elementelement_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_elementelement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_elementelement_descriptor_;
  metadata.reflection = Sheet_elementelement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int elementfragmentattributeDesc::kTypeFieldNumber;
const int elementfragmentattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

elementfragmentattributeDesc::elementfragmentattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void elementfragmentattributeDesc::InitAsDefaultInstance() {
}

elementfragmentattributeDesc::elementfragmentattributeDesc(const elementfragmentattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void elementfragmentattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

elementfragmentattributeDesc::~elementfragmentattributeDesc() {
  SharedDtor();
}

void elementfragmentattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void elementfragmentattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* elementfragmentattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return elementfragmentattributeDesc_descriptor_;
}

const elementfragmentattributeDesc& elementfragmentattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_element_2eproto();
  return *default_instance_;
}

elementfragmentattributeDesc* elementfragmentattributeDesc::default_instance_ = NULL;

elementfragmentattributeDesc* elementfragmentattributeDesc::New() const {
  return new elementfragmentattributeDesc;
}

void elementfragmentattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool elementfragmentattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void elementfragmentattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* elementfragmentattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int elementfragmentattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void elementfragmentattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const elementfragmentattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const elementfragmentattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void elementfragmentattributeDesc::MergeFrom(const elementfragmentattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void elementfragmentattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void elementfragmentattributeDesc::CopyFrom(const elementfragmentattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool elementfragmentattributeDesc::IsInitialized() const {

  return true;
}

void elementfragmentattributeDesc::Swap(elementfragmentattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata elementfragmentattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = elementfragmentattributeDesc_descriptor_;
  metadata.reflection = elementfragmentattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int elementfragment::kIDFieldNumber;
const int elementfragment::kItemIDFieldNumber;
const int elementfragment::kItemNumFieldNumber;
const int elementfragment::kAttributeFieldNumber;
#endif  // !_MSC_VER

elementfragment::elementfragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void elementfragment::InitAsDefaultInstance() {
}

elementfragment::elementfragment(const elementfragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void elementfragment::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  itemid_ = GOOGLE_LONGLONG(0);
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

elementfragment::~elementfragment() {
  SharedDtor();
}

void elementfragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void elementfragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* elementfragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return elementfragment_descriptor_;
}

const elementfragment& elementfragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_element_2eproto();
  return *default_instance_;
}

elementfragment* elementfragment::default_instance_ = NULL;

elementfragment* elementfragment::New() const {
  return new elementfragment;
}

void elementfragment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    itemid_ = GOOGLE_LONGLONG(0);
    itemnum_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool elementfragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemID;
        break;
      }

      // optional int64 itemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.elementfragmentattributeDesc attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void elementfragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 itemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  // repeated .proto_ff.elementfragmentattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* elementfragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 itemID = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemnum(), target);
  }

  // repeated .proto_ff.elementfragmentattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int elementfragment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 itemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  // repeated .proto_ff.elementfragmentattributeDesc attribute = 4;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void elementfragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const elementfragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const elementfragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void elementfragment::MergeFrom(const elementfragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void elementfragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void elementfragment::CopyFrom(const elementfragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool elementfragment::IsInitialized() const {

  return true;
}

void elementfragment::Swap(elementfragment* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata elementfragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = elementfragment_descriptor_;
  metadata.reflection = elementfragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_elementfragment::kElementfragmentListFieldNumber;
#endif  // !_MSC_VER

Sheet_elementfragment::Sheet_elementfragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_elementfragment::InitAsDefaultInstance() {
}

Sheet_elementfragment::Sheet_elementfragment(const Sheet_elementfragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_elementfragment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_elementfragment::~Sheet_elementfragment() {
  SharedDtor();
}

void Sheet_elementfragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_elementfragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_elementfragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_elementfragment_descriptor_;
}

const Sheet_elementfragment& Sheet_elementfragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_element_2eproto();
  return *default_instance_;
}

Sheet_elementfragment* Sheet_elementfragment::default_instance_ = NULL;

Sheet_elementfragment* Sheet_elementfragment::New() const {
  return new Sheet_elementfragment;
}

void Sheet_elementfragment::Clear() {
  elementfragment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_elementfragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.elementfragment elementfragment_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elementfragment_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elementfragment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elementfragment_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_elementfragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.elementfragment elementfragment_List = 1;
  for (int i = 0; i < this->elementfragment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elementfragment_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_elementfragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.elementfragment elementfragment_List = 1;
  for (int i = 0; i < this->elementfragment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elementfragment_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_elementfragment::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.elementfragment elementfragment_List = 1;
  total_size += 1 * this->elementfragment_list_size();
  for (int i = 0; i < this->elementfragment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elementfragment_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_elementfragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_elementfragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_elementfragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_elementfragment::MergeFrom(const Sheet_elementfragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  elementfragment_list_.MergeFrom(from.elementfragment_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_elementfragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_elementfragment::CopyFrom(const Sheet_elementfragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_elementfragment::IsInitialized() const {

  return true;
}

void Sheet_elementfragment::Swap(Sheet_elementfragment* other) {
  if (other != this) {
    elementfragment_list_.Swap(&other->elementfragment_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_elementfragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_elementfragment_descriptor_;
  metadata.reflection = Sheet_elementfragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int elementelementUI::kTypeFieldNumber;
const int elementelementUI::kNameFieldNumber;
#endif  // !_MSC_VER

elementelementUI::elementelementUI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void elementelementUI::InitAsDefaultInstance() {
}

elementelementUI::elementelementUI(const elementelementUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void elementelementUI::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

elementelementUI::~elementelementUI() {
  SharedDtor();
}

void elementelementUI::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void elementelementUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* elementelementUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return elementelementUI_descriptor_;
}

const elementelementUI& elementelementUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_element_2eproto();
  return *default_instance_;
}

elementelementUI* elementelementUI::default_instance_ = NULL;

elementelementUI* elementelementUI::New() const {
  return new elementelementUI;
}

void elementelementUI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool elementelementUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void elementelementUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* elementelementUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int elementelementUI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void elementelementUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const elementelementUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const elementelementUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void elementelementUI::MergeFrom(const elementelementUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void elementelementUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void elementelementUI::CopyFrom(const elementelementUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool elementelementUI::IsInitialized() const {

  return true;
}

void elementelementUI::Swap(elementelementUI* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata elementelementUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = elementelementUI_descriptor_;
  metadata.reflection = elementelementUI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_elementelementUI::kElementelementUIListFieldNumber;
#endif  // !_MSC_VER

Sheet_elementelementUI::Sheet_elementelementUI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_elementelementUI::InitAsDefaultInstance() {
}

Sheet_elementelementUI::Sheet_elementelementUI(const Sheet_elementelementUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_elementelementUI::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_elementelementUI::~Sheet_elementelementUI() {
  SharedDtor();
}

void Sheet_elementelementUI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_elementelementUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_elementelementUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_elementelementUI_descriptor_;
}

const Sheet_elementelementUI& Sheet_elementelementUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_element_2eproto();
  return *default_instance_;
}

Sheet_elementelementUI* Sheet_elementelementUI::default_instance_ = NULL;

Sheet_elementelementUI* Sheet_elementelementUI::New() const {
  return new Sheet_elementelementUI;
}

void Sheet_elementelementUI::Clear() {
  elementelementui_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_elementelementUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.elementelementUI elementelementUI_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elementelementUI_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elementelementui_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elementelementUI_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_elementelementUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.elementelementUI elementelementUI_List = 1;
  for (int i = 0; i < this->elementelementui_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elementelementui_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_elementelementUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.elementelementUI elementelementUI_List = 1;
  for (int i = 0; i < this->elementelementui_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elementelementui_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_elementelementUI::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.elementelementUI elementelementUI_List = 1;
  total_size += 1 * this->elementelementui_list_size();
  for (int i = 0; i < this->elementelementui_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elementelementui_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_elementelementUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_elementelementUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_elementelementUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_elementelementUI::MergeFrom(const Sheet_elementelementUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  elementelementui_list_.MergeFrom(from.elementelementui_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_elementelementUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_elementelementUI::CopyFrom(const Sheet_elementelementUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_elementelementUI::IsInitialized() const {

  return true;
}

void Sheet_elementelementUI::Swap(Sheet_elementelementUI* other) {
  if (other != this) {
    elementelementui_list_.Swap(&other->elementelementui_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_elementelementUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_elementelementUI_descriptor_;
  metadata.reflection = Sheet_elementelementUI_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
