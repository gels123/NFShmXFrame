// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: handbook.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "handbook.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* handbookhandbookattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  handbookhandbookattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* handbookhandbook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  handbookhandbook_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_handbookhandbook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_handbookhandbook_reflection_ = NULL;
const ::google::protobuf::Descriptor* handbookfateattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  handbookfateattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* handbookfate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  handbookfate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_handbookfate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_handbookfate_reflection_ = NULL;
const ::google::protobuf::Descriptor* handbookattr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  handbookattr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_handbookattr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_handbookattr_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_handbook_2eproto() {
  protobuf_AddDesc_handbook_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "handbook.proto");
  GOOGLE_CHECK(file != NULL);
  handbookhandbookattributeDesc_descriptor_ = file->message_type(0);
  static const int handbookhandbookattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbookattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbookattributeDesc, value_),
  };
  handbookhandbookattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      handbookhandbookattributeDesc_descriptor_,
      handbookhandbookattributeDesc::default_instance_,
      handbookhandbookattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbookattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbookattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(handbookhandbookattributeDesc));
  handbookhandbook_descriptor_ = file->message_type(1);
  static const int handbookhandbook_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbook, handbookid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbook, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbook, handbookname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbook, handbooktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbook, handbookquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbook, handbooklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbook, handz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbook, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbook, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbook, attribute_),
  };
  handbookhandbook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      handbookhandbook_descriptor_,
      handbookhandbook::default_instance_,
      handbookhandbook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookhandbook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(handbookhandbook));
  Sheet_handbookhandbook_descriptor_ = file->message_type(2);
  static const int Sheet_handbookhandbook_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_handbookhandbook, handbookhandbook_list_),
  };
  Sheet_handbookhandbook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_handbookhandbook_descriptor_,
      Sheet_handbookhandbook::default_instance_,
      Sheet_handbookhandbook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_handbookhandbook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_handbookhandbook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_handbookhandbook));
  handbookfateattributeDesc_descriptor_ = file->message_type(3);
  static const int handbookfateattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookfateattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookfateattributeDesc, value_),
  };
  handbookfateattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      handbookfateattributeDesc_descriptor_,
      handbookfateattributeDesc::default_instance_,
      handbookfateattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookfateattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookfateattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(handbookfateattributeDesc));
  handbookfate_descriptor_ = file->message_type(4);
  static const int handbookfate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookfate, fateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookfate, fatename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookfate, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookfate, fatehand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookfate, attribute_),
  };
  handbookfate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      handbookfate_descriptor_,
      handbookfate::default_instance_,
      handbookfate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookfate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookfate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(handbookfate));
  Sheet_handbookfate_descriptor_ = file->message_type(5);
  static const int Sheet_handbookfate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_handbookfate, handbookfate_list_),
  };
  Sheet_handbookfate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_handbookfate_descriptor_,
      Sheet_handbookfate::default_instance_,
      Sheet_handbookfate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_handbookfate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_handbookfate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_handbookfate));
  handbookattr_descriptor_ = file->message_type(6);
  static const int handbookattr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookattr, attid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookattr, att_),
  };
  handbookattr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      handbookattr_descriptor_,
      handbookattr::default_instance_,
      handbookattr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookattr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handbookattr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(handbookattr));
  Sheet_handbookattr_descriptor_ = file->message_type(7);
  static const int Sheet_handbookattr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_handbookattr, handbookattr_list_),
  };
  Sheet_handbookattr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_handbookattr_descriptor_,
      Sheet_handbookattr::default_instance_,
      Sheet_handbookattr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_handbookattr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_handbookattr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_handbookattr));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_handbook_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    handbookhandbookattributeDesc_descriptor_, &handbookhandbookattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    handbookhandbook_descriptor_, &handbookhandbook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_handbookhandbook_descriptor_, &Sheet_handbookhandbook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    handbookfateattributeDesc_descriptor_, &handbookfateattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    handbookfate_descriptor_, &handbookfate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_handbookfate_descriptor_, &Sheet_handbookfate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    handbookattr_descriptor_, &handbookattr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_handbookattr_descriptor_, &Sheet_handbookattr::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_handbook_2eproto() {
  delete handbookhandbookattributeDesc::default_instance_;
  delete handbookhandbookattributeDesc_reflection_;
  delete handbookhandbook::default_instance_;
  delete handbookhandbook_reflection_;
  delete Sheet_handbookhandbook::default_instance_;
  delete Sheet_handbookhandbook_reflection_;
  delete handbookfateattributeDesc::default_instance_;
  delete handbookfateattributeDesc_reflection_;
  delete handbookfate::default_instance_;
  delete handbookfate_reflection_;
  delete Sheet_handbookfate::default_instance_;
  delete Sheet_handbookfate_reflection_;
  delete handbookattr::default_instance_;
  delete handbookattr_reflection_;
  delete Sheet_handbookattr::default_instance_;
  delete Sheet_handbookattr_reflection_;
}

void protobuf_AddDesc_handbook_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016handbook.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\"Q\n\035handbookhandbookattributeDe"
    "sc\022\030\n\004type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005value\030\002 "
    "\001(\003B\007\302\377\024\003\345\200\274\"\277\003\n\020handbookhandbook\022 \n\nhan"
    "dbookID\030\001 \001(\003B\014\302\377\024\010\345\233\276\351\211\264id\022\"\n\006itemId\030\002 "
    "\001(\003B\022\302\377\024\016\345\205\263\350\201\224\347\211\251\345\223\201id\022*\n\014handbookName\030"
    "\003 \001(\tB\024\302\377\024\014\345\233\276\351\211\264\345\220\215\347\247\260\220\301\024 \022&\n\014handbookT"
    "ype\030\004 \001(\005B\020\302\377\024\014\345\233\276\351\211\264\347\261\273\345\236\213\022)\n\017handbookQ"
    "uality\030\005 \001(\005B\020\302\377\024\014\345\233\276\351\211\264\345\223\201\350\264\250\022*\n\nhandbo"
    "okLv\030\006 \001(\005B\026\302\377\024\022\345\233\276\351\211\264\347\255\211\347\272\247\344\270\212\351\231\220\022\034\n\005ha"
    "ndZ\030\007 \001(\005B\r\302\377\024\t\345\233\276\351\211\264\347\273\204\022\"\n\006starId\030\010 \001(\003"
    "B\022\302\377\024\016\345\215\207\346\230\237\351\201\223\345\205\267id\022,\n\007starNum\030\t \001(\tB\033\302"
    "\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024\311\001\022J\n\tattribute\030"
    "\n \003(\0132\'.proto_ff.handbookhandbookattribu"
    "teDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\004\"Z\n\026Sheet_handbook"
    "handbook\022@\n\025handbookhandbook_List\030\001 \003(\0132"
    "\032.proto_ff.handbookhandbookB\005\210\301\024\370\003\"M\n\031ha"
    "ndbookfateattributeDesc\022\030\n\004type\030\001 \001(\005B\n\302"
    "\377\024\006\347\261\273\345\236\213\022\026\n\005value\030\002 \001(\003B\007\302\377\024\003\345\200\274\"\350\001\n\014ha"
    "ndbookfate\022\034\n\006fateID\030\001 \001(\003B\014\302\377\024\010\347\276\201\347\273\212id"
    "\022&\n\010fateName\030\002 \001(\tB\024\302\377\024\014\347\276\201\347\273\212\345\220\215\347\247\260\220\301\024 "
    "\022&\n\006starLv\030\003 \001(\005B\026\302\377\024\022\345\215\207\346\230\237\347\255\211\347\272\247\344\270\212\351\231\220"
    "\022\"\n\010fateHand\030\004 \003(\003B\020\302\377\024\014\347\276\201\347\273\212\345\233\276\351\211\264\022F\n\t"
    "attribute\030\005 \003(\0132#.proto_ff.handbookfatea"
    "ttributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\004\"N\n\022Sheet_ha"
    "ndbookfate\0228\n\021handbookfate_List\030\001 \003(\0132\026."
    "proto_ff.handbookfateB\005\210\301\024\201\001\"M\n\014handbook"
    "attr\022\036\n\005attID\030\001 \001(\003B\017\302\377\024\013\345\261\236\346\200\247\347\273\204id\022\035\n\003"
    "att\030\002 \003(\005B\020\302\377\024\014\345\261\236\346\200\247\347\255\211\347\272\247\"N\n\022Sheet_han"
    "dbookattr\0228\n\021handbookattr_List\030\001 \003(\0132\026.p"
    "roto_ff.handbookattrB\005\210\301\024\327\004", 1227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "handbook.proto", &protobuf_RegisterTypes);
  handbookhandbookattributeDesc::default_instance_ = new handbookhandbookattributeDesc();
  handbookhandbook::default_instance_ = new handbookhandbook();
  Sheet_handbookhandbook::default_instance_ = new Sheet_handbookhandbook();
  handbookfateattributeDesc::default_instance_ = new handbookfateattributeDesc();
  handbookfate::default_instance_ = new handbookfate();
  Sheet_handbookfate::default_instance_ = new Sheet_handbookfate();
  handbookattr::default_instance_ = new handbookattr();
  Sheet_handbookattr::default_instance_ = new Sheet_handbookattr();
  handbookhandbookattributeDesc::default_instance_->InitAsDefaultInstance();
  handbookhandbook::default_instance_->InitAsDefaultInstance();
  Sheet_handbookhandbook::default_instance_->InitAsDefaultInstance();
  handbookfateattributeDesc::default_instance_->InitAsDefaultInstance();
  handbookfate::default_instance_->InitAsDefaultInstance();
  Sheet_handbookfate::default_instance_->InitAsDefaultInstance();
  handbookattr::default_instance_->InitAsDefaultInstance();
  Sheet_handbookattr::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_handbook_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_handbook_2eproto {
  StaticDescriptorInitializer_handbook_2eproto() {
    protobuf_AddDesc_handbook_2eproto();
  }
} static_descriptor_initializer_handbook_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int handbookhandbookattributeDesc::kTypeFieldNumber;
const int handbookhandbookattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

handbookhandbookattributeDesc::handbookhandbookattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void handbookhandbookattributeDesc::InitAsDefaultInstance() {
}

handbookhandbookattributeDesc::handbookhandbookattributeDesc(const handbookhandbookattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void handbookhandbookattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

handbookhandbookattributeDesc::~handbookhandbookattributeDesc() {
  SharedDtor();
}

void handbookhandbookattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void handbookhandbookattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* handbookhandbookattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return handbookhandbookattributeDesc_descriptor_;
}

const handbookhandbookattributeDesc& handbookhandbookattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_handbook_2eproto();
  return *default_instance_;
}

handbookhandbookattributeDesc* handbookhandbookattributeDesc::default_instance_ = NULL;

handbookhandbookattributeDesc* handbookhandbookattributeDesc::New() const {
  return new handbookhandbookattributeDesc;
}

void handbookhandbookattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool handbookhandbookattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void handbookhandbookattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* handbookhandbookattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int handbookhandbookattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void handbookhandbookattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const handbookhandbookattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const handbookhandbookattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void handbookhandbookattributeDesc::MergeFrom(const handbookhandbookattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void handbookhandbookattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void handbookhandbookattributeDesc::CopyFrom(const handbookhandbookattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool handbookhandbookattributeDesc::IsInitialized() const {

  return true;
}

void handbookhandbookattributeDesc::Swap(handbookhandbookattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata handbookhandbookattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = handbookhandbookattributeDesc_descriptor_;
  metadata.reflection = handbookhandbookattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int handbookhandbook::kHandbookIDFieldNumber;
const int handbookhandbook::kItemIdFieldNumber;
const int handbookhandbook::kHandbookNameFieldNumber;
const int handbookhandbook::kHandbookTypeFieldNumber;
const int handbookhandbook::kHandbookQualityFieldNumber;
const int handbookhandbook::kHandbookLvFieldNumber;
const int handbookhandbook::kHandZFieldNumber;
const int handbookhandbook::kStarIdFieldNumber;
const int handbookhandbook::kStarNumFieldNumber;
const int handbookhandbook::kAttributeFieldNumber;
#endif  // !_MSC_VER

handbookhandbook::handbookhandbook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void handbookhandbook::InitAsDefaultInstance() {
}

handbookhandbook::handbookhandbook(const handbookhandbook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void handbookhandbook::SharedCtor() {
  _cached_size_ = 0;
  handbookid_ = GOOGLE_LONGLONG(0);
  itemid_ = GOOGLE_LONGLONG(0);
  handbookname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handbooktype_ = 0;
  handbookquality_ = 0;
  handbooklv_ = 0;
  handz_ = 0;
  starid_ = GOOGLE_LONGLONG(0);
  starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

handbookhandbook::~handbookhandbook() {
  SharedDtor();
}

void handbookhandbook::SharedDtor() {
  if (handbookname_ != &::google::protobuf::internal::kEmptyString) {
    delete handbookname_;
  }
  if (starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete starnum_;
  }
  if (this != default_instance_) {
  }
}

void handbookhandbook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* handbookhandbook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return handbookhandbook_descriptor_;
}

const handbookhandbook& handbookhandbook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_handbook_2eproto();
  return *default_instance_;
}

handbookhandbook* handbookhandbook::default_instance_ = NULL;

handbookhandbook* handbookhandbook::New() const {
  return new handbookhandbook;
}

void handbookhandbook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handbookid_ = GOOGLE_LONGLONG(0);
    itemid_ = GOOGLE_LONGLONG(0);
    if (has_handbookname()) {
      if (handbookname_ != &::google::protobuf::internal::kEmptyString) {
        handbookname_->clear();
      }
    }
    handbooktype_ = 0;
    handbookquality_ = 0;
    handbooklv_ = 0;
    handz_ = 0;
    starid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_starnum()) {
      if (starnum_ != &::google::protobuf::internal::kEmptyString) {
        starnum_->clear();
      }
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool handbookhandbook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 handbookID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &handbookid_)));
          set_has_handbookid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int64 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_handbookName;
        break;
      }

      // optional string handbookName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handbookName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handbookname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->handbookname().data(), this->handbookname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_handbookType;
        break;
      }

      // optional int32 handbookType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handbookType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handbooktype_)));
          set_has_handbooktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_handbookQuality;
        break;
      }

      // optional int32 handbookQuality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handbookQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handbookquality_)));
          set_has_handbookquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handbookLv;
        break;
      }

      // optional int32 handbookLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handbookLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handbooklv_)));
          set_has_handbooklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_handZ;
        break;
      }

      // optional int32 handZ = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handz_)));
          set_has_handz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_starId;
        break;
      }

      // optional int64 starId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_starNum;
        break;
      }

      // optional string starNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starnum().data(), this->starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.handbookhandbookattributeDesc attribute = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void handbookhandbook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 handbookID = 1;
  if (has_handbookid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->handbookid(), output);
  }

  // optional int64 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional string handbookName = 3;
  if (has_handbookname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->handbookname().data(), this->handbookname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->handbookname(), output);
  }

  // optional int32 handbookType = 4;
  if (has_handbooktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->handbooktype(), output);
  }

  // optional int32 handbookQuality = 5;
  if (has_handbookquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->handbookquality(), output);
  }

  // optional int32 handbookLv = 6;
  if (has_handbooklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->handbooklv(), output);
  }

  // optional int32 handZ = 7;
  if (has_handz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->handz(), output);
  }

  // optional int64 starId = 8;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->starid(), output);
  }

  // optional string starNum = 9;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->starnum(), output);
  }

  // repeated .proto_ff.handbookhandbookattributeDesc attribute = 10;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* handbookhandbook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 handbookID = 1;
  if (has_handbookid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->handbookid(), target);
  }

  // optional int64 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional string handbookName = 3;
  if (has_handbookname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->handbookname().data(), this->handbookname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->handbookname(), target);
  }

  // optional int32 handbookType = 4;
  if (has_handbooktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->handbooktype(), target);
  }

  // optional int32 handbookQuality = 5;
  if (has_handbookquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->handbookquality(), target);
  }

  // optional int32 handbookLv = 6;
  if (has_handbooklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->handbooklv(), target);
  }

  // optional int32 handZ = 7;
  if (has_handz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->handz(), target);
  }

  // optional int64 starId = 8;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->starid(), target);
  }

  // optional string starNum = 9;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->starnum(), target);
  }

  // repeated .proto_ff.handbookhandbookattributeDesc attribute = 10;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int handbookhandbook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 handbookID = 1;
    if (has_handbookid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->handbookid());
    }

    // optional int64 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional string handbookName = 3;
    if (has_handbookname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->handbookname());
    }

    // optional int32 handbookType = 4;
    if (has_handbooktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handbooktype());
    }

    // optional int32 handbookQuality = 5;
    if (has_handbookquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handbookquality());
    }

    // optional int32 handbookLv = 6;
    if (has_handbooklv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handbooklv());
    }

    // optional int32 handZ = 7;
    if (has_handz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handz());
    }

    // optional int64 starId = 8;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string starNum = 9;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starnum());
    }

  }
  // repeated .proto_ff.handbookhandbookattributeDesc attribute = 10;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void handbookhandbook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const handbookhandbook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const handbookhandbook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void handbookhandbook::MergeFrom(const handbookhandbook& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handbookid()) {
      set_handbookid(from.handbookid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_handbookname()) {
      set_handbookname(from.handbookname());
    }
    if (from.has_handbooktype()) {
      set_handbooktype(from.handbooktype());
    }
    if (from.has_handbookquality()) {
      set_handbookquality(from.handbookquality());
    }
    if (from.has_handbooklv()) {
      set_handbooklv(from.handbooklv());
    }
    if (from.has_handz()) {
      set_handz(from.handz());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void handbookhandbook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void handbookhandbook::CopyFrom(const handbookhandbook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool handbookhandbook::IsInitialized() const {

  return true;
}

void handbookhandbook::Swap(handbookhandbook* other) {
  if (other != this) {
    std::swap(handbookid_, other->handbookid_);
    std::swap(itemid_, other->itemid_);
    std::swap(handbookname_, other->handbookname_);
    std::swap(handbooktype_, other->handbooktype_);
    std::swap(handbookquality_, other->handbookquality_);
    std::swap(handbooklv_, other->handbooklv_);
    std::swap(handz_, other->handz_);
    std::swap(starid_, other->starid_);
    std::swap(starnum_, other->starnum_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata handbookhandbook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = handbookhandbook_descriptor_;
  metadata.reflection = handbookhandbook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_handbookhandbook::kHandbookhandbookListFieldNumber;
#endif  // !_MSC_VER

Sheet_handbookhandbook::Sheet_handbookhandbook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_handbookhandbook::InitAsDefaultInstance() {
}

Sheet_handbookhandbook::Sheet_handbookhandbook(const Sheet_handbookhandbook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_handbookhandbook::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_handbookhandbook::~Sheet_handbookhandbook() {
  SharedDtor();
}

void Sheet_handbookhandbook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_handbookhandbook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_handbookhandbook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_handbookhandbook_descriptor_;
}

const Sheet_handbookhandbook& Sheet_handbookhandbook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_handbook_2eproto();
  return *default_instance_;
}

Sheet_handbookhandbook* Sheet_handbookhandbook::default_instance_ = NULL;

Sheet_handbookhandbook* Sheet_handbookhandbook::New() const {
  return new Sheet_handbookhandbook;
}

void Sheet_handbookhandbook::Clear() {
  handbookhandbook_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_handbookhandbook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.handbookhandbook handbookhandbook_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handbookhandbook_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_handbookhandbook_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_handbookhandbook_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_handbookhandbook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.handbookhandbook handbookhandbook_List = 1;
  for (int i = 0; i < this->handbookhandbook_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->handbookhandbook_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_handbookhandbook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.handbookhandbook handbookhandbook_List = 1;
  for (int i = 0; i < this->handbookhandbook_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->handbookhandbook_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_handbookhandbook::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.handbookhandbook handbookhandbook_List = 1;
  total_size += 1 * this->handbookhandbook_list_size();
  for (int i = 0; i < this->handbookhandbook_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->handbookhandbook_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_handbookhandbook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_handbookhandbook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_handbookhandbook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_handbookhandbook::MergeFrom(const Sheet_handbookhandbook& from) {
  GOOGLE_CHECK_NE(&from, this);
  handbookhandbook_list_.MergeFrom(from.handbookhandbook_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_handbookhandbook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_handbookhandbook::CopyFrom(const Sheet_handbookhandbook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_handbookhandbook::IsInitialized() const {

  return true;
}

void Sheet_handbookhandbook::Swap(Sheet_handbookhandbook* other) {
  if (other != this) {
    handbookhandbook_list_.Swap(&other->handbookhandbook_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_handbookhandbook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_handbookhandbook_descriptor_;
  metadata.reflection = Sheet_handbookhandbook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int handbookfateattributeDesc::kTypeFieldNumber;
const int handbookfateattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

handbookfateattributeDesc::handbookfateattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void handbookfateattributeDesc::InitAsDefaultInstance() {
}

handbookfateattributeDesc::handbookfateattributeDesc(const handbookfateattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void handbookfateattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

handbookfateattributeDesc::~handbookfateattributeDesc() {
  SharedDtor();
}

void handbookfateattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void handbookfateattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* handbookfateattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return handbookfateattributeDesc_descriptor_;
}

const handbookfateattributeDesc& handbookfateattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_handbook_2eproto();
  return *default_instance_;
}

handbookfateattributeDesc* handbookfateattributeDesc::default_instance_ = NULL;

handbookfateattributeDesc* handbookfateattributeDesc::New() const {
  return new handbookfateattributeDesc;
}

void handbookfateattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool handbookfateattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void handbookfateattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* handbookfateattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int handbookfateattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void handbookfateattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const handbookfateattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const handbookfateattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void handbookfateattributeDesc::MergeFrom(const handbookfateattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void handbookfateattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void handbookfateattributeDesc::CopyFrom(const handbookfateattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool handbookfateattributeDesc::IsInitialized() const {

  return true;
}

void handbookfateattributeDesc::Swap(handbookfateattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata handbookfateattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = handbookfateattributeDesc_descriptor_;
  metadata.reflection = handbookfateattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int handbookfate::kFateIDFieldNumber;
const int handbookfate::kFateNameFieldNumber;
const int handbookfate::kStarLvFieldNumber;
const int handbookfate::kFateHandFieldNumber;
const int handbookfate::kAttributeFieldNumber;
#endif  // !_MSC_VER

handbookfate::handbookfate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void handbookfate::InitAsDefaultInstance() {
}

handbookfate::handbookfate(const handbookfate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void handbookfate::SharedCtor() {
  _cached_size_ = 0;
  fateid_ = GOOGLE_LONGLONG(0);
  fatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

handbookfate::~handbookfate() {
  SharedDtor();
}

void handbookfate::SharedDtor() {
  if (fatename_ != &::google::protobuf::internal::kEmptyString) {
    delete fatename_;
  }
  if (this != default_instance_) {
  }
}

void handbookfate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* handbookfate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return handbookfate_descriptor_;
}

const handbookfate& handbookfate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_handbook_2eproto();
  return *default_instance_;
}

handbookfate* handbookfate::default_instance_ = NULL;

handbookfate* handbookfate::New() const {
  return new handbookfate;
}

void handbookfate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fateid_ = GOOGLE_LONGLONG(0);
    if (has_fatename()) {
      if (fatename_ != &::google::protobuf::internal::kEmptyString) {
        fatename_->clear();
      }
    }
    starlv_ = 0;
  }
  fatehand_.Clear();
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool handbookfate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 fateID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fateid_)));
          set_has_fateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fateName;
        break;
      }

      // optional string fateName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fateName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fatename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fatename().data(), this->fatename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starLv;
        break;
      }

      // optional int32 starLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fateHand;
        break;
      }

      // repeated int64 fateHand = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fateHand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_fatehand())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_fatehand())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fateHand;
        if (input->ExpectTag(42)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.handbookfateattributeDesc attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void handbookfate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 fateID = 1;
  if (has_fateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->fateid(), output);
  }

  // optional string fateName = 2;
  if (has_fatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fatename().data(), this->fatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fatename(), output);
  }

  // optional int32 starLv = 3;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starlv(), output);
  }

  // repeated int64 fateHand = 4;
  for (int i = 0; i < this->fatehand_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->fatehand(i), output);
  }

  // repeated .proto_ff.handbookfateattributeDesc attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* handbookfate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 fateID = 1;
  if (has_fateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->fateid(), target);
  }

  // optional string fateName = 2;
  if (has_fatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fatename().data(), this->fatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fatename(), target);
  }

  // optional int32 starLv = 3;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starlv(), target);
  }

  // repeated int64 fateHand = 4;
  for (int i = 0; i < this->fatehand_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->fatehand(i), target);
  }

  // repeated .proto_ff.handbookfateattributeDesc attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int handbookfate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 fateID = 1;
    if (has_fateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fateid());
    }

    // optional string fateName = 2;
    if (has_fatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fatename());
    }

    // optional int32 starLv = 3;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starlv());
    }

  }
  // repeated int64 fateHand = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->fatehand_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->fatehand(i));
    }
    total_size += 1 * this->fatehand_size() + data_size;
  }

  // repeated .proto_ff.handbookfateattributeDesc attribute = 5;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void handbookfate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const handbookfate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const handbookfate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void handbookfate::MergeFrom(const handbookfate& from) {
  GOOGLE_CHECK_NE(&from, this);
  fatehand_.MergeFrom(from.fatehand_);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fateid()) {
      set_fateid(from.fateid());
    }
    if (from.has_fatename()) {
      set_fatename(from.fatename());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void handbookfate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void handbookfate::CopyFrom(const handbookfate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool handbookfate::IsInitialized() const {

  return true;
}

void handbookfate::Swap(handbookfate* other) {
  if (other != this) {
    std::swap(fateid_, other->fateid_);
    std::swap(fatename_, other->fatename_);
    std::swap(starlv_, other->starlv_);
    fatehand_.Swap(&other->fatehand_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata handbookfate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = handbookfate_descriptor_;
  metadata.reflection = handbookfate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_handbookfate::kHandbookfateListFieldNumber;
#endif  // !_MSC_VER

Sheet_handbookfate::Sheet_handbookfate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_handbookfate::InitAsDefaultInstance() {
}

Sheet_handbookfate::Sheet_handbookfate(const Sheet_handbookfate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_handbookfate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_handbookfate::~Sheet_handbookfate() {
  SharedDtor();
}

void Sheet_handbookfate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_handbookfate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_handbookfate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_handbookfate_descriptor_;
}

const Sheet_handbookfate& Sheet_handbookfate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_handbook_2eproto();
  return *default_instance_;
}

Sheet_handbookfate* Sheet_handbookfate::default_instance_ = NULL;

Sheet_handbookfate* Sheet_handbookfate::New() const {
  return new Sheet_handbookfate;
}

void Sheet_handbookfate::Clear() {
  handbookfate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_handbookfate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.handbookfate handbookfate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handbookfate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_handbookfate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_handbookfate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_handbookfate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.handbookfate handbookfate_List = 1;
  for (int i = 0; i < this->handbookfate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->handbookfate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_handbookfate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.handbookfate handbookfate_List = 1;
  for (int i = 0; i < this->handbookfate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->handbookfate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_handbookfate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.handbookfate handbookfate_List = 1;
  total_size += 1 * this->handbookfate_list_size();
  for (int i = 0; i < this->handbookfate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->handbookfate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_handbookfate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_handbookfate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_handbookfate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_handbookfate::MergeFrom(const Sheet_handbookfate& from) {
  GOOGLE_CHECK_NE(&from, this);
  handbookfate_list_.MergeFrom(from.handbookfate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_handbookfate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_handbookfate::CopyFrom(const Sheet_handbookfate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_handbookfate::IsInitialized() const {

  return true;
}

void Sheet_handbookfate::Swap(Sheet_handbookfate* other) {
  if (other != this) {
    handbookfate_list_.Swap(&other->handbookfate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_handbookfate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_handbookfate_descriptor_;
  metadata.reflection = Sheet_handbookfate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int handbookattr::kAttIDFieldNumber;
const int handbookattr::kAttFieldNumber;
#endif  // !_MSC_VER

handbookattr::handbookattr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void handbookattr::InitAsDefaultInstance() {
}

handbookattr::handbookattr(const handbookattr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void handbookattr::SharedCtor() {
  _cached_size_ = 0;
  attid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

handbookattr::~handbookattr() {
  SharedDtor();
}

void handbookattr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void handbookattr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* handbookattr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return handbookattr_descriptor_;
}

const handbookattr& handbookattr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_handbook_2eproto();
  return *default_instance_;
}

handbookattr* handbookattr::default_instance_ = NULL;

handbookattr* handbookattr::New() const {
  return new handbookattr;
}

void handbookattr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attid_ = GOOGLE_LONGLONG(0);
  }
  att_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool handbookattr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 attID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attid_)));
          set_has_attid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_att;
        break;
      }

      // repeated int32 att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_att())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_att())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_att;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void handbookattr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 attID = 1;
  if (has_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->attid(), output);
  }

  // repeated int32 att = 2;
  for (int i = 0; i < this->att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->att(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* handbookattr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 attID = 1;
  if (has_attid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->attid(), target);
  }

  // repeated int32 att = 2;
  for (int i = 0; i < this->att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->att(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int handbookattr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 attID = 1;
    if (has_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attid());
    }

  }
  // repeated int32 att = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->att_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->att(i));
    }
    total_size += 1 * this->att_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void handbookattr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const handbookattr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const handbookattr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void handbookattr::MergeFrom(const handbookattr& from) {
  GOOGLE_CHECK_NE(&from, this);
  att_.MergeFrom(from.att_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attid()) {
      set_attid(from.attid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void handbookattr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void handbookattr::CopyFrom(const handbookattr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool handbookattr::IsInitialized() const {

  return true;
}

void handbookattr::Swap(handbookattr* other) {
  if (other != this) {
    std::swap(attid_, other->attid_);
    att_.Swap(&other->att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata handbookattr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = handbookattr_descriptor_;
  metadata.reflection = handbookattr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_handbookattr::kHandbookattrListFieldNumber;
#endif  // !_MSC_VER

Sheet_handbookattr::Sheet_handbookattr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_handbookattr::InitAsDefaultInstance() {
}

Sheet_handbookattr::Sheet_handbookattr(const Sheet_handbookattr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_handbookattr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_handbookattr::~Sheet_handbookattr() {
  SharedDtor();
}

void Sheet_handbookattr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_handbookattr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_handbookattr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_handbookattr_descriptor_;
}

const Sheet_handbookattr& Sheet_handbookattr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_handbook_2eproto();
  return *default_instance_;
}

Sheet_handbookattr* Sheet_handbookattr::default_instance_ = NULL;

Sheet_handbookattr* Sheet_handbookattr::New() const {
  return new Sheet_handbookattr;
}

void Sheet_handbookattr::Clear() {
  handbookattr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_handbookattr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.handbookattr handbookattr_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handbookattr_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_handbookattr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_handbookattr_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_handbookattr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.handbookattr handbookattr_List = 1;
  for (int i = 0; i < this->handbookattr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->handbookattr_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_handbookattr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.handbookattr handbookattr_List = 1;
  for (int i = 0; i < this->handbookattr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->handbookattr_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_handbookattr::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.handbookattr handbookattr_List = 1;
  total_size += 1 * this->handbookattr_list_size();
  for (int i = 0; i < this->handbookattr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->handbookattr_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_handbookattr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_handbookattr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_handbookattr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_handbookattr::MergeFrom(const Sheet_handbookattr& from) {
  GOOGLE_CHECK_NE(&from, this);
  handbookattr_list_.MergeFrom(from.handbookattr_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_handbookattr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_handbookattr::CopyFrom(const Sheet_handbookattr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_handbookattr::IsInitialized() const {

  return true;
}

void Sheet_handbookattr::Swap(Sheet_handbookattr* other) {
  if (other != this) {
    handbookattr_list_.Swap(&other->handbookattr_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_handbookattr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_handbookattr_descriptor_;
  metadata.reflection = Sheet_handbookattr_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
