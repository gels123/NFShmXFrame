// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Taskdynamic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Taskdynamic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_TaskdynamicTaskdynamic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_TaskdynamicTaskdynamic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_TaskdynamicTaskdynamic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_TaskdynamicTaskdynamic_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_TaskdynamicTaskcomcond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_TaskdynamicTaskcomcond_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_TaskdynamicTaskcomcond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_TaskdynamicTaskcomcond_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_TaskdynamicTasktext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_TaskdynamicTasktext_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_TaskdynamicTasktext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_TaskdynamicTasktext_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fTaskdynamic_2eproto() {
  protobuf_AddDesc_E_5fTaskdynamic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Taskdynamic.proto");
  GOOGLE_CHECK(file != NULL);
  E_TaskdynamicTaskdynamic_descriptor_ = file->message_type(0);
  static const int E_TaskdynamicTaskdynamic_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskdynamic, m_taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskdynamic, m_remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskdynamic, m_tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskdynamic, m_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskdynamic, m_minlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskdynamic, m_maxlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskdynamic, m_rececount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskdynamic, m_idlist_),
  };
  E_TaskdynamicTaskdynamic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_TaskdynamicTaskdynamic_descriptor_,
      E_TaskdynamicTaskdynamic::default_instance_,
      E_TaskdynamicTaskdynamic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskdynamic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskdynamic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_TaskdynamicTaskdynamic));
  Sheet_TaskdynamicTaskdynamic_descriptor_ = file->message_type(1);
  static const int Sheet_TaskdynamicTaskdynamic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskdynamicTaskdynamic, e_taskdynamictaskdynamic_list_),
  };
  Sheet_TaskdynamicTaskdynamic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_TaskdynamicTaskdynamic_descriptor_,
      Sheet_TaskdynamicTaskdynamic::default_instance_,
      Sheet_TaskdynamicTaskdynamic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskdynamicTaskdynamic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskdynamicTaskdynamic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_TaskdynamicTaskdynamic));
  E_TaskdynamicTaskcomcond_descriptor_ = file->message_type(2);
  static const int E_TaskdynamicTaskcomcond_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskcomcond, m_comcondid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskcomcond, m_comcondtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskcomcond, m_param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskcomcond, m_param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskcomcond, m_param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskcomcond, m_param4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskcomcond, m_param5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskcomcond, m_comcondrandomvalue_),
  };
  E_TaskdynamicTaskcomcond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_TaskdynamicTaskcomcond_descriptor_,
      E_TaskdynamicTaskcomcond::default_instance_,
      E_TaskdynamicTaskcomcond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskcomcond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTaskcomcond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_TaskdynamicTaskcomcond));
  Sheet_TaskdynamicTaskcomcond_descriptor_ = file->message_type(3);
  static const int Sheet_TaskdynamicTaskcomcond_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskdynamicTaskcomcond, e_taskdynamictaskcomcond_list_),
  };
  Sheet_TaskdynamicTaskcomcond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_TaskdynamicTaskcomcond_descriptor_,
      Sheet_TaskdynamicTaskcomcond::default_instance_,
      Sheet_TaskdynamicTaskcomcond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskdynamicTaskcomcond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskdynamicTaskcomcond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_TaskdynamicTaskcomcond));
  E_TaskdynamicTasktext_descriptor_ = file->message_type(4);
  static const int E_TaskdynamicTasktext_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTasktext, m_textid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTasktext, m_tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTasktext, m_comcondtype_),
  };
  E_TaskdynamicTasktext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_TaskdynamicTasktext_descriptor_,
      E_TaskdynamicTasktext::default_instance_,
      E_TaskdynamicTasktext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTasktext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskdynamicTasktext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_TaskdynamicTasktext));
  Sheet_TaskdynamicTasktext_descriptor_ = file->message_type(5);
  static const int Sheet_TaskdynamicTasktext_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskdynamicTasktext, e_taskdynamictasktext_list_),
  };
  Sheet_TaskdynamicTasktext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_TaskdynamicTasktext_descriptor_,
      Sheet_TaskdynamicTasktext::default_instance_,
      Sheet_TaskdynamicTasktext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskdynamicTasktext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskdynamicTasktext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_TaskdynamicTasktext));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fTaskdynamic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_TaskdynamicTaskdynamic_descriptor_, &E_TaskdynamicTaskdynamic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_TaskdynamicTaskdynamic_descriptor_, &Sheet_TaskdynamicTaskdynamic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_TaskdynamicTaskcomcond_descriptor_, &E_TaskdynamicTaskcomcond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_TaskdynamicTaskcomcond_descriptor_, &Sheet_TaskdynamicTaskcomcond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_TaskdynamicTasktext_descriptor_, &E_TaskdynamicTasktext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_TaskdynamicTasktext_descriptor_, &Sheet_TaskdynamicTasktext::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fTaskdynamic_2eproto() {
  delete E_TaskdynamicTaskdynamic::default_instance_;
  delete E_TaskdynamicTaskdynamic_reflection_;
  delete Sheet_TaskdynamicTaskdynamic::default_instance_;
  delete Sheet_TaskdynamicTaskdynamic_reflection_;
  delete E_TaskdynamicTaskcomcond::default_instance_;
  delete E_TaskdynamicTaskcomcond_reflection_;
  delete Sheet_TaskdynamicTaskcomcond::default_instance_;
  delete Sheet_TaskdynamicTaskcomcond_reflection_;
  delete E_TaskdynamicTasktext::default_instance_;
  delete E_TaskdynamicTasktext_reflection_;
  delete Sheet_TaskdynamicTasktext::default_instance_;
  delete Sheet_TaskdynamicTasktext_reflection_;
}

void protobuf_AddDesc_E_5fTaskdynamic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023E_Taskdynamic.proto\022\010proto_ff\032\025yd_fiel"
    "doptions.proto\"\276\002\n\030E_TaskdynamicTaskdyna"
    "mic\022\030\n\010m_taskID\030\001 \001(\003B\006\302\377\024\002id\022&\n\010m_remar"
    "k\030\002 \001(\tB\024\302\377\024\014\347\255\226\345\210\222\345\244\207\346\263\250\220\301\024@\022$\n\nm_taskT"
    "ype\030\003 \001(\005B\020\302\377\024\014\344\273\273\345\212\241\347\261\273\345\236\213\022 \n\tm_weights"
    "\030\004 \001(\005B\r\302\377\024\t\346\235\203\351\207\215\345\200\274\022!\n\007m_minlv\030\005 \001(\005B\020"
    "\302\377\024\014\346\234\200\344\275\216\347\255\211\347\272\247\022!\n\007m_maxlv\030\006 \001(\005B\020\302\377\024\014\346"
    "\234\200\351\253\230\347\255\211\347\272\247\022(\n\013m_receCount\030\007 \001(\005B\023\302\377\024\017\345\217"
    "\257\346\216\245\345\217\226\346\225\260\351\207\217\022(\n\010m_idList\030\010 \001(\tB\026\302\377\024\016\346\212\275"
    "\345\217\226id\345\210\227\350\241\250\220\301\024@\"o\n\034Sheet_TaskdynamicTask"
    "dynamic\022O\n\035E_TaskdynamicTaskdynamic_List"
    "\030\001 \003(\0132\".proto_ff.E_TaskdynamicTaskdynam"
    "icB\004\210\301\024 \"\330\002\n\030E_TaskdynamicTaskcomcond\022!\n"
    "\013m_comcondID\030\001 \001(\003B\014\302\377\024\010\345\256\214\346\210\220id\022\'\n\rm_co"
    "mcondType\030\002 \001(\005B\020\302\377\024\014\346\235\241\344\273\266\347\261\273\345\236\213\022#\n\010m_p"
    "aram1\030\003 \001(\003B\021\302\377\024\r\346\235\241\344\273\266\345\217\202\346\225\260a\022#\n\010m_para"
    "m2\030\004 \001(\003B\021\302\377\024\r\346\235\241\344\273\266\345\217\202\346\225\260b\022#\n\010m_param3\030"
    "\005 \001(\003B\021\302\377\024\r\346\235\241\344\273\266\345\217\202\346\225\260c\022#\n\010m_param4\030\006 \001"
    "(\003B\021\302\377\024\r\346\235\241\344\273\266\345\217\202\346\225\260d\022#\n\010m_param5\030\007 \001(\003B"
    "\021\302\377\024\r\346\235\241\344\273\266\345\217\202\346\225\260e\0227\n\024m_comcondRandomVal"
    "ue\030\010 \001(\005B\031\302\377\024\025\345\256\214\346\210\220\346\235\241\344\273\266\351\232\217\346\234\272\345\200\274\"p\n\034S"
    "heet_TaskdynamicTaskcomcond\022P\n\035E_Taskdyn"
    "amicTaskcomcond_List\030\001 \003(\0132\".proto_ff.E_"
    "TaskdynamicTaskcomcondB\005\210\301\024\200\001\"\220\001\n\025E_Task"
    "dynamicTasktext\022\036\n\010m_textID\030\001 \001(\003B\014\302\377\024\010\346"
    "\226\207\346\234\254id\022(\n\nm_taskType\030\002 \001(\tB\024\302\377\024\014\344\273\273\345\212\241\347"
    "\261\273\345\236\213\220\301\024@\022-\n\rm_comcondType\030\003 \001(\005B\026\302\377\024\022\345\256"
    "\214\346\210\220\346\235\241\344\273\266\347\261\273\345\236\213\"f\n\031Sheet_TaskdynamicTas"
    "ktext\022I\n\032E_TaskdynamicTasktext_List\030\001 \003("
    "\0132\037.proto_ff.E_TaskdynamicTasktextB\004\210\301\024 ", 1200);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Taskdynamic.proto", &protobuf_RegisterTypes);
  E_TaskdynamicTaskdynamic::default_instance_ = new E_TaskdynamicTaskdynamic();
  Sheet_TaskdynamicTaskdynamic::default_instance_ = new Sheet_TaskdynamicTaskdynamic();
  E_TaskdynamicTaskcomcond::default_instance_ = new E_TaskdynamicTaskcomcond();
  Sheet_TaskdynamicTaskcomcond::default_instance_ = new Sheet_TaskdynamicTaskcomcond();
  E_TaskdynamicTasktext::default_instance_ = new E_TaskdynamicTasktext();
  Sheet_TaskdynamicTasktext::default_instance_ = new Sheet_TaskdynamicTasktext();
  E_TaskdynamicTaskdynamic::default_instance_->InitAsDefaultInstance();
  Sheet_TaskdynamicTaskdynamic::default_instance_->InitAsDefaultInstance();
  E_TaskdynamicTaskcomcond::default_instance_->InitAsDefaultInstance();
  Sheet_TaskdynamicTaskcomcond::default_instance_->InitAsDefaultInstance();
  E_TaskdynamicTasktext::default_instance_->InitAsDefaultInstance();
  Sheet_TaskdynamicTasktext::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fTaskdynamic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fTaskdynamic_2eproto {
  StaticDescriptorInitializer_E_5fTaskdynamic_2eproto() {
    protobuf_AddDesc_E_5fTaskdynamic_2eproto();
  }
} static_descriptor_initializer_E_5fTaskdynamic_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_TaskdynamicTaskdynamic::kMTaskIDFieldNumber;
const int E_TaskdynamicTaskdynamic::kMRemarkFieldNumber;
const int E_TaskdynamicTaskdynamic::kMTaskTypeFieldNumber;
const int E_TaskdynamicTaskdynamic::kMWeightsFieldNumber;
const int E_TaskdynamicTaskdynamic::kMMinlvFieldNumber;
const int E_TaskdynamicTaskdynamic::kMMaxlvFieldNumber;
const int E_TaskdynamicTaskdynamic::kMReceCountFieldNumber;
const int E_TaskdynamicTaskdynamic::kMIdListFieldNumber;
#endif  // !_MSC_VER

E_TaskdynamicTaskdynamic::E_TaskdynamicTaskdynamic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_TaskdynamicTaskdynamic::InitAsDefaultInstance() {
}

E_TaskdynamicTaskdynamic::E_TaskdynamicTaskdynamic(const E_TaskdynamicTaskdynamic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_TaskdynamicTaskdynamic::SharedCtor() {
  _cached_size_ = 0;
  m_taskid_ = GOOGLE_LONGLONG(0);
  m_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_tasktype_ = 0;
  m_weights_ = 0;
  m_minlv_ = 0;
  m_maxlv_ = 0;
  m_rececount_ = 0;
  m_idlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_TaskdynamicTaskdynamic::~E_TaskdynamicTaskdynamic() {
  SharedDtor();
}

void E_TaskdynamicTaskdynamic::SharedDtor() {
  if (m_remark_ != &::google::protobuf::internal::kEmptyString) {
    delete m_remark_;
  }
  if (m_idlist_ != &::google::protobuf::internal::kEmptyString) {
    delete m_idlist_;
  }
  if (this != default_instance_) {
  }
}

void E_TaskdynamicTaskdynamic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_TaskdynamicTaskdynamic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_TaskdynamicTaskdynamic_descriptor_;
}

const E_TaskdynamicTaskdynamic& E_TaskdynamicTaskdynamic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fTaskdynamic_2eproto();
  return *default_instance_;
}

E_TaskdynamicTaskdynamic* E_TaskdynamicTaskdynamic::default_instance_ = NULL;

E_TaskdynamicTaskdynamic* E_TaskdynamicTaskdynamic::New() const {
  return new E_TaskdynamicTaskdynamic;
}

void E_TaskdynamicTaskdynamic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_taskid_ = GOOGLE_LONGLONG(0);
    if (has_m_remark()) {
      if (m_remark_ != &::google::protobuf::internal::kEmptyString) {
        m_remark_->clear();
      }
    }
    m_tasktype_ = 0;
    m_weights_ = 0;
    m_minlv_ = 0;
    m_maxlv_ = 0;
    m_rececount_ = 0;
    if (has_m_idlist()) {
      if (m_idlist_ != &::google::protobuf::internal::kEmptyString) {
        m_idlist_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_TaskdynamicTaskdynamic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_taskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_taskid_)));
          set_has_m_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_remark;
        break;
      }

      // optional string m_remark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_remark().data(), this->m_remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_taskType;
        break;
      }

      // optional int32 m_taskType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tasktype_)));
          set_has_m_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_weights;
        break;
      }

      // optional int32 m_weights = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_weights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_weights_)));
          set_has_m_weights();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_minlv;
        break;
      }

      // optional int32 m_minlv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_minlv_)));
          set_has_m_minlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_maxlv;
        break;
      }

      // optional int32 m_maxlv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxlv_)));
          set_has_m_maxlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_receCount;
        break;
      }

      // optional int32 m_receCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_receCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rececount_)));
          set_has_m_rececount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_idList;
        break;
      }

      // optional string m_idList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_idList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_idlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_idlist().data(), this->m_idlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_TaskdynamicTaskdynamic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_taskID = 1;
  if (has_m_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_taskid(), output);
  }

  // optional string m_remark = 2;
  if (has_m_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_remark().data(), this->m_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_remark(), output);
  }

  // optional int32 m_taskType = 3;
  if (has_m_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_tasktype(), output);
  }

  // optional int32 m_weights = 4;
  if (has_m_weights()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_weights(), output);
  }

  // optional int32 m_minlv = 5;
  if (has_m_minlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_minlv(), output);
  }

  // optional int32 m_maxlv = 6;
  if (has_m_maxlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_maxlv(), output);
  }

  // optional int32 m_receCount = 7;
  if (has_m_rececount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_rececount(), output);
  }

  // optional string m_idList = 8;
  if (has_m_idlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_idlist().data(), this->m_idlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_idlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_TaskdynamicTaskdynamic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_taskID = 1;
  if (has_m_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_taskid(), target);
  }

  // optional string m_remark = 2;
  if (has_m_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_remark().data(), this->m_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_remark(), target);
  }

  // optional int32 m_taskType = 3;
  if (has_m_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_tasktype(), target);
  }

  // optional int32 m_weights = 4;
  if (has_m_weights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_weights(), target);
  }

  // optional int32 m_minlv = 5;
  if (has_m_minlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_minlv(), target);
  }

  // optional int32 m_maxlv = 6;
  if (has_m_maxlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_maxlv(), target);
  }

  // optional int32 m_receCount = 7;
  if (has_m_rececount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_rececount(), target);
  }

  // optional string m_idList = 8;
  if (has_m_idlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_idlist().data(), this->m_idlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_idlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_TaskdynamicTaskdynamic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_taskID = 1;
    if (has_m_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_taskid());
    }

    // optional string m_remark = 2;
    if (has_m_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_remark());
    }

    // optional int32 m_taskType = 3;
    if (has_m_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tasktype());
    }

    // optional int32 m_weights = 4;
    if (has_m_weights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_weights());
    }

    // optional int32 m_minlv = 5;
    if (has_m_minlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_minlv());
    }

    // optional int32 m_maxlv = 6;
    if (has_m_maxlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxlv());
    }

    // optional int32 m_receCount = 7;
    if (has_m_rececount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rececount());
    }

    // optional string m_idList = 8;
    if (has_m_idlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_idlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_TaskdynamicTaskdynamic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_TaskdynamicTaskdynamic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_TaskdynamicTaskdynamic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_TaskdynamicTaskdynamic::MergeFrom(const E_TaskdynamicTaskdynamic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_taskid()) {
      set_m_taskid(from.m_taskid());
    }
    if (from.has_m_remark()) {
      set_m_remark(from.m_remark());
    }
    if (from.has_m_tasktype()) {
      set_m_tasktype(from.m_tasktype());
    }
    if (from.has_m_weights()) {
      set_m_weights(from.m_weights());
    }
    if (from.has_m_minlv()) {
      set_m_minlv(from.m_minlv());
    }
    if (from.has_m_maxlv()) {
      set_m_maxlv(from.m_maxlv());
    }
    if (from.has_m_rececount()) {
      set_m_rececount(from.m_rececount());
    }
    if (from.has_m_idlist()) {
      set_m_idlist(from.m_idlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_TaskdynamicTaskdynamic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_TaskdynamicTaskdynamic::CopyFrom(const E_TaskdynamicTaskdynamic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_TaskdynamicTaskdynamic::IsInitialized() const {

  return true;
}

void E_TaskdynamicTaskdynamic::Swap(E_TaskdynamicTaskdynamic* other) {
  if (other != this) {
    std::swap(m_taskid_, other->m_taskid_);
    std::swap(m_remark_, other->m_remark_);
    std::swap(m_tasktype_, other->m_tasktype_);
    std::swap(m_weights_, other->m_weights_);
    std::swap(m_minlv_, other->m_minlv_);
    std::swap(m_maxlv_, other->m_maxlv_);
    std::swap(m_rececount_, other->m_rececount_);
    std::swap(m_idlist_, other->m_idlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_TaskdynamicTaskdynamic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_TaskdynamicTaskdynamic_descriptor_;
  metadata.reflection = E_TaskdynamicTaskdynamic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_TaskdynamicTaskdynamic::kETaskdynamicTaskdynamicListFieldNumber;
#endif  // !_MSC_VER

Sheet_TaskdynamicTaskdynamic::Sheet_TaskdynamicTaskdynamic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_TaskdynamicTaskdynamic::InitAsDefaultInstance() {
}

Sheet_TaskdynamicTaskdynamic::Sheet_TaskdynamicTaskdynamic(const Sheet_TaskdynamicTaskdynamic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_TaskdynamicTaskdynamic::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_TaskdynamicTaskdynamic::~Sheet_TaskdynamicTaskdynamic() {
  SharedDtor();
}

void Sheet_TaskdynamicTaskdynamic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_TaskdynamicTaskdynamic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_TaskdynamicTaskdynamic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_TaskdynamicTaskdynamic_descriptor_;
}

const Sheet_TaskdynamicTaskdynamic& Sheet_TaskdynamicTaskdynamic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fTaskdynamic_2eproto();
  return *default_instance_;
}

Sheet_TaskdynamicTaskdynamic* Sheet_TaskdynamicTaskdynamic::default_instance_ = NULL;

Sheet_TaskdynamicTaskdynamic* Sheet_TaskdynamicTaskdynamic::New() const {
  return new Sheet_TaskdynamicTaskdynamic;
}

void Sheet_TaskdynamicTaskdynamic::Clear() {
  e_taskdynamictaskdynamic_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_TaskdynamicTaskdynamic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_TaskdynamicTaskdynamic E_TaskdynamicTaskdynamic_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_TaskdynamicTaskdynamic_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_taskdynamictaskdynamic_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_TaskdynamicTaskdynamic_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_TaskdynamicTaskdynamic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_TaskdynamicTaskdynamic E_TaskdynamicTaskdynamic_List = 1;
  for (int i = 0; i < this->e_taskdynamictaskdynamic_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_taskdynamictaskdynamic_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_TaskdynamicTaskdynamic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_TaskdynamicTaskdynamic E_TaskdynamicTaskdynamic_List = 1;
  for (int i = 0; i < this->e_taskdynamictaskdynamic_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_taskdynamictaskdynamic_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_TaskdynamicTaskdynamic::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_TaskdynamicTaskdynamic E_TaskdynamicTaskdynamic_List = 1;
  total_size += 1 * this->e_taskdynamictaskdynamic_list_size();
  for (int i = 0; i < this->e_taskdynamictaskdynamic_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_taskdynamictaskdynamic_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_TaskdynamicTaskdynamic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_TaskdynamicTaskdynamic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_TaskdynamicTaskdynamic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_TaskdynamicTaskdynamic::MergeFrom(const Sheet_TaskdynamicTaskdynamic& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_taskdynamictaskdynamic_list_.MergeFrom(from.e_taskdynamictaskdynamic_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_TaskdynamicTaskdynamic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_TaskdynamicTaskdynamic::CopyFrom(const Sheet_TaskdynamicTaskdynamic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_TaskdynamicTaskdynamic::IsInitialized() const {

  return true;
}

void Sheet_TaskdynamicTaskdynamic::Swap(Sheet_TaskdynamicTaskdynamic* other) {
  if (other != this) {
    e_taskdynamictaskdynamic_list_.Swap(&other->e_taskdynamictaskdynamic_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_TaskdynamicTaskdynamic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_TaskdynamicTaskdynamic_descriptor_;
  metadata.reflection = Sheet_TaskdynamicTaskdynamic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_TaskdynamicTaskcomcond::kMComcondIDFieldNumber;
const int E_TaskdynamicTaskcomcond::kMComcondTypeFieldNumber;
const int E_TaskdynamicTaskcomcond::kMParam1FieldNumber;
const int E_TaskdynamicTaskcomcond::kMParam2FieldNumber;
const int E_TaskdynamicTaskcomcond::kMParam3FieldNumber;
const int E_TaskdynamicTaskcomcond::kMParam4FieldNumber;
const int E_TaskdynamicTaskcomcond::kMParam5FieldNumber;
const int E_TaskdynamicTaskcomcond::kMComcondRandomValueFieldNumber;
#endif  // !_MSC_VER

E_TaskdynamicTaskcomcond::E_TaskdynamicTaskcomcond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_TaskdynamicTaskcomcond::InitAsDefaultInstance() {
}

E_TaskdynamicTaskcomcond::E_TaskdynamicTaskcomcond(const E_TaskdynamicTaskcomcond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_TaskdynamicTaskcomcond::SharedCtor() {
  _cached_size_ = 0;
  m_comcondid_ = GOOGLE_LONGLONG(0);
  m_comcondtype_ = 0;
  m_param1_ = GOOGLE_LONGLONG(0);
  m_param2_ = GOOGLE_LONGLONG(0);
  m_param3_ = GOOGLE_LONGLONG(0);
  m_param4_ = GOOGLE_LONGLONG(0);
  m_param5_ = GOOGLE_LONGLONG(0);
  m_comcondrandomvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_TaskdynamicTaskcomcond::~E_TaskdynamicTaskcomcond() {
  SharedDtor();
}

void E_TaskdynamicTaskcomcond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_TaskdynamicTaskcomcond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_TaskdynamicTaskcomcond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_TaskdynamicTaskcomcond_descriptor_;
}

const E_TaskdynamicTaskcomcond& E_TaskdynamicTaskcomcond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fTaskdynamic_2eproto();
  return *default_instance_;
}

E_TaskdynamicTaskcomcond* E_TaskdynamicTaskcomcond::default_instance_ = NULL;

E_TaskdynamicTaskcomcond* E_TaskdynamicTaskcomcond::New() const {
  return new E_TaskdynamicTaskcomcond;
}

void E_TaskdynamicTaskcomcond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_comcondid_ = GOOGLE_LONGLONG(0);
    m_comcondtype_ = 0;
    m_param1_ = GOOGLE_LONGLONG(0);
    m_param2_ = GOOGLE_LONGLONG(0);
    m_param3_ = GOOGLE_LONGLONG(0);
    m_param4_ = GOOGLE_LONGLONG(0);
    m_param5_ = GOOGLE_LONGLONG(0);
    m_comcondrandomvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_TaskdynamicTaskcomcond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_comcondID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_comcondid_)));
          set_has_m_comcondid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_comcondType;
        break;
      }

      // optional int32 m_comcondType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_comcondType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_comcondtype_)));
          set_has_m_comcondtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_param1;
        break;
      }

      // optional int64 m_param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_param1_)));
          set_has_m_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_param2;
        break;
      }

      // optional int64 m_param2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_param2_)));
          set_has_m_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_param3;
        break;
      }

      // optional int64 m_param3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_param3_)));
          set_has_m_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_param4;
        break;
      }

      // optional int64 m_param4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_param4_)));
          set_has_m_param4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_param5;
        break;
      }

      // optional int64 m_param5 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_param5_)));
          set_has_m_param5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_comcondRandomValue;
        break;
      }

      // optional int32 m_comcondRandomValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_comcondRandomValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_comcondrandomvalue_)));
          set_has_m_comcondrandomvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_TaskdynamicTaskcomcond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_comcondID = 1;
  if (has_m_comcondid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_comcondid(), output);
  }

  // optional int32 m_comcondType = 2;
  if (has_m_comcondtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_comcondtype(), output);
  }

  // optional int64 m_param1 = 3;
  if (has_m_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_param1(), output);
  }

  // optional int64 m_param2 = 4;
  if (has_m_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_param2(), output);
  }

  // optional int64 m_param3 = 5;
  if (has_m_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->m_param3(), output);
  }

  // optional int64 m_param4 = 6;
  if (has_m_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->m_param4(), output);
  }

  // optional int64 m_param5 = 7;
  if (has_m_param5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->m_param5(), output);
  }

  // optional int32 m_comcondRandomValue = 8;
  if (has_m_comcondrandomvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_comcondrandomvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_TaskdynamicTaskcomcond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_comcondID = 1;
  if (has_m_comcondid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_comcondid(), target);
  }

  // optional int32 m_comcondType = 2;
  if (has_m_comcondtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_comcondtype(), target);
  }

  // optional int64 m_param1 = 3;
  if (has_m_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_param1(), target);
  }

  // optional int64 m_param2 = 4;
  if (has_m_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_param2(), target);
  }

  // optional int64 m_param3 = 5;
  if (has_m_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->m_param3(), target);
  }

  // optional int64 m_param4 = 6;
  if (has_m_param4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->m_param4(), target);
  }

  // optional int64 m_param5 = 7;
  if (has_m_param5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->m_param5(), target);
  }

  // optional int32 m_comcondRandomValue = 8;
  if (has_m_comcondrandomvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_comcondrandomvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_TaskdynamicTaskcomcond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_comcondID = 1;
    if (has_m_comcondid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_comcondid());
    }

    // optional int32 m_comcondType = 2;
    if (has_m_comcondtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_comcondtype());
    }

    // optional int64 m_param1 = 3;
    if (has_m_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_param1());
    }

    // optional int64 m_param2 = 4;
    if (has_m_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_param2());
    }

    // optional int64 m_param3 = 5;
    if (has_m_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_param3());
    }

    // optional int64 m_param4 = 6;
    if (has_m_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_param4());
    }

    // optional int64 m_param5 = 7;
    if (has_m_param5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_param5());
    }

    // optional int32 m_comcondRandomValue = 8;
    if (has_m_comcondrandomvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_comcondrandomvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_TaskdynamicTaskcomcond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_TaskdynamicTaskcomcond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_TaskdynamicTaskcomcond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_TaskdynamicTaskcomcond::MergeFrom(const E_TaskdynamicTaskcomcond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_comcondid()) {
      set_m_comcondid(from.m_comcondid());
    }
    if (from.has_m_comcondtype()) {
      set_m_comcondtype(from.m_comcondtype());
    }
    if (from.has_m_param1()) {
      set_m_param1(from.m_param1());
    }
    if (from.has_m_param2()) {
      set_m_param2(from.m_param2());
    }
    if (from.has_m_param3()) {
      set_m_param3(from.m_param3());
    }
    if (from.has_m_param4()) {
      set_m_param4(from.m_param4());
    }
    if (from.has_m_param5()) {
      set_m_param5(from.m_param5());
    }
    if (from.has_m_comcondrandomvalue()) {
      set_m_comcondrandomvalue(from.m_comcondrandomvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_TaskdynamicTaskcomcond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_TaskdynamicTaskcomcond::CopyFrom(const E_TaskdynamicTaskcomcond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_TaskdynamicTaskcomcond::IsInitialized() const {

  return true;
}

void E_TaskdynamicTaskcomcond::Swap(E_TaskdynamicTaskcomcond* other) {
  if (other != this) {
    std::swap(m_comcondid_, other->m_comcondid_);
    std::swap(m_comcondtype_, other->m_comcondtype_);
    std::swap(m_param1_, other->m_param1_);
    std::swap(m_param2_, other->m_param2_);
    std::swap(m_param3_, other->m_param3_);
    std::swap(m_param4_, other->m_param4_);
    std::swap(m_param5_, other->m_param5_);
    std::swap(m_comcondrandomvalue_, other->m_comcondrandomvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_TaskdynamicTaskcomcond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_TaskdynamicTaskcomcond_descriptor_;
  metadata.reflection = E_TaskdynamicTaskcomcond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_TaskdynamicTaskcomcond::kETaskdynamicTaskcomcondListFieldNumber;
#endif  // !_MSC_VER

Sheet_TaskdynamicTaskcomcond::Sheet_TaskdynamicTaskcomcond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_TaskdynamicTaskcomcond::InitAsDefaultInstance() {
}

Sheet_TaskdynamicTaskcomcond::Sheet_TaskdynamicTaskcomcond(const Sheet_TaskdynamicTaskcomcond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_TaskdynamicTaskcomcond::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_TaskdynamicTaskcomcond::~Sheet_TaskdynamicTaskcomcond() {
  SharedDtor();
}

void Sheet_TaskdynamicTaskcomcond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_TaskdynamicTaskcomcond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_TaskdynamicTaskcomcond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_TaskdynamicTaskcomcond_descriptor_;
}

const Sheet_TaskdynamicTaskcomcond& Sheet_TaskdynamicTaskcomcond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fTaskdynamic_2eproto();
  return *default_instance_;
}

Sheet_TaskdynamicTaskcomcond* Sheet_TaskdynamicTaskcomcond::default_instance_ = NULL;

Sheet_TaskdynamicTaskcomcond* Sheet_TaskdynamicTaskcomcond::New() const {
  return new Sheet_TaskdynamicTaskcomcond;
}

void Sheet_TaskdynamicTaskcomcond::Clear() {
  e_taskdynamictaskcomcond_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_TaskdynamicTaskcomcond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_TaskdynamicTaskcomcond E_TaskdynamicTaskcomcond_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_TaskdynamicTaskcomcond_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_taskdynamictaskcomcond_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_TaskdynamicTaskcomcond_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_TaskdynamicTaskcomcond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_TaskdynamicTaskcomcond E_TaskdynamicTaskcomcond_List = 1;
  for (int i = 0; i < this->e_taskdynamictaskcomcond_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_taskdynamictaskcomcond_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_TaskdynamicTaskcomcond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_TaskdynamicTaskcomcond E_TaskdynamicTaskcomcond_List = 1;
  for (int i = 0; i < this->e_taskdynamictaskcomcond_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_taskdynamictaskcomcond_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_TaskdynamicTaskcomcond::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_TaskdynamicTaskcomcond E_TaskdynamicTaskcomcond_List = 1;
  total_size += 1 * this->e_taskdynamictaskcomcond_list_size();
  for (int i = 0; i < this->e_taskdynamictaskcomcond_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_taskdynamictaskcomcond_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_TaskdynamicTaskcomcond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_TaskdynamicTaskcomcond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_TaskdynamicTaskcomcond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_TaskdynamicTaskcomcond::MergeFrom(const Sheet_TaskdynamicTaskcomcond& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_taskdynamictaskcomcond_list_.MergeFrom(from.e_taskdynamictaskcomcond_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_TaskdynamicTaskcomcond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_TaskdynamicTaskcomcond::CopyFrom(const Sheet_TaskdynamicTaskcomcond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_TaskdynamicTaskcomcond::IsInitialized() const {

  return true;
}

void Sheet_TaskdynamicTaskcomcond::Swap(Sheet_TaskdynamicTaskcomcond* other) {
  if (other != this) {
    e_taskdynamictaskcomcond_list_.Swap(&other->e_taskdynamictaskcomcond_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_TaskdynamicTaskcomcond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_TaskdynamicTaskcomcond_descriptor_;
  metadata.reflection = Sheet_TaskdynamicTaskcomcond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_TaskdynamicTasktext::kMTextIDFieldNumber;
const int E_TaskdynamicTasktext::kMTaskTypeFieldNumber;
const int E_TaskdynamicTasktext::kMComcondTypeFieldNumber;
#endif  // !_MSC_VER

E_TaskdynamicTasktext::E_TaskdynamicTasktext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_TaskdynamicTasktext::InitAsDefaultInstance() {
}

E_TaskdynamicTasktext::E_TaskdynamicTasktext(const E_TaskdynamicTasktext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_TaskdynamicTasktext::SharedCtor() {
  _cached_size_ = 0;
  m_textid_ = GOOGLE_LONGLONG(0);
  m_tasktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_comcondtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_TaskdynamicTasktext::~E_TaskdynamicTasktext() {
  SharedDtor();
}

void E_TaskdynamicTasktext::SharedDtor() {
  if (m_tasktype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_tasktype_;
  }
  if (this != default_instance_) {
  }
}

void E_TaskdynamicTasktext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_TaskdynamicTasktext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_TaskdynamicTasktext_descriptor_;
}

const E_TaskdynamicTasktext& E_TaskdynamicTasktext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fTaskdynamic_2eproto();
  return *default_instance_;
}

E_TaskdynamicTasktext* E_TaskdynamicTasktext::default_instance_ = NULL;

E_TaskdynamicTasktext* E_TaskdynamicTasktext::New() const {
  return new E_TaskdynamicTasktext;
}

void E_TaskdynamicTasktext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_textid_ = GOOGLE_LONGLONG(0);
    if (has_m_tasktype()) {
      if (m_tasktype_ != &::google::protobuf::internal::kEmptyString) {
        m_tasktype_->clear();
      }
    }
    m_comcondtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_TaskdynamicTasktext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_textID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_textid_)));
          set_has_m_textid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_taskType;
        break;
      }

      // optional string m_taskType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_taskType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_tasktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_tasktype().data(), this->m_tasktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_comcondType;
        break;
      }

      // optional int32 m_comcondType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_comcondType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_comcondtype_)));
          set_has_m_comcondtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_TaskdynamicTasktext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_textID = 1;
  if (has_m_textid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_textid(), output);
  }

  // optional string m_taskType = 2;
  if (has_m_tasktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_tasktype().data(), this->m_tasktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_tasktype(), output);
  }

  // optional int32 m_comcondType = 3;
  if (has_m_comcondtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_comcondtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_TaskdynamicTasktext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_textID = 1;
  if (has_m_textid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_textid(), target);
  }

  // optional string m_taskType = 2;
  if (has_m_tasktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_tasktype().data(), this->m_tasktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_tasktype(), target);
  }

  // optional int32 m_comcondType = 3;
  if (has_m_comcondtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_comcondtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_TaskdynamicTasktext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_textID = 1;
    if (has_m_textid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_textid());
    }

    // optional string m_taskType = 2;
    if (has_m_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_tasktype());
    }

    // optional int32 m_comcondType = 3;
    if (has_m_comcondtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_comcondtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_TaskdynamicTasktext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_TaskdynamicTasktext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_TaskdynamicTasktext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_TaskdynamicTasktext::MergeFrom(const E_TaskdynamicTasktext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_textid()) {
      set_m_textid(from.m_textid());
    }
    if (from.has_m_tasktype()) {
      set_m_tasktype(from.m_tasktype());
    }
    if (from.has_m_comcondtype()) {
      set_m_comcondtype(from.m_comcondtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_TaskdynamicTasktext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_TaskdynamicTasktext::CopyFrom(const E_TaskdynamicTasktext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_TaskdynamicTasktext::IsInitialized() const {

  return true;
}

void E_TaskdynamicTasktext::Swap(E_TaskdynamicTasktext* other) {
  if (other != this) {
    std::swap(m_textid_, other->m_textid_);
    std::swap(m_tasktype_, other->m_tasktype_);
    std::swap(m_comcondtype_, other->m_comcondtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_TaskdynamicTasktext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_TaskdynamicTasktext_descriptor_;
  metadata.reflection = E_TaskdynamicTasktext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_TaskdynamicTasktext::kETaskdynamicTasktextListFieldNumber;
#endif  // !_MSC_VER

Sheet_TaskdynamicTasktext::Sheet_TaskdynamicTasktext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_TaskdynamicTasktext::InitAsDefaultInstance() {
}

Sheet_TaskdynamicTasktext::Sheet_TaskdynamicTasktext(const Sheet_TaskdynamicTasktext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_TaskdynamicTasktext::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_TaskdynamicTasktext::~Sheet_TaskdynamicTasktext() {
  SharedDtor();
}

void Sheet_TaskdynamicTasktext::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_TaskdynamicTasktext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_TaskdynamicTasktext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_TaskdynamicTasktext_descriptor_;
}

const Sheet_TaskdynamicTasktext& Sheet_TaskdynamicTasktext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fTaskdynamic_2eproto();
  return *default_instance_;
}

Sheet_TaskdynamicTasktext* Sheet_TaskdynamicTasktext::default_instance_ = NULL;

Sheet_TaskdynamicTasktext* Sheet_TaskdynamicTasktext::New() const {
  return new Sheet_TaskdynamicTasktext;
}

void Sheet_TaskdynamicTasktext::Clear() {
  e_taskdynamictasktext_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_TaskdynamicTasktext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_TaskdynamicTasktext E_TaskdynamicTasktext_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_TaskdynamicTasktext_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_taskdynamictasktext_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_TaskdynamicTasktext_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_TaskdynamicTasktext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_TaskdynamicTasktext E_TaskdynamicTasktext_List = 1;
  for (int i = 0; i < this->e_taskdynamictasktext_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_taskdynamictasktext_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_TaskdynamicTasktext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_TaskdynamicTasktext E_TaskdynamicTasktext_List = 1;
  for (int i = 0; i < this->e_taskdynamictasktext_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_taskdynamictasktext_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_TaskdynamicTasktext::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_TaskdynamicTasktext E_TaskdynamicTasktext_List = 1;
  total_size += 1 * this->e_taskdynamictasktext_list_size();
  for (int i = 0; i < this->e_taskdynamictasktext_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_taskdynamictasktext_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_TaskdynamicTasktext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_TaskdynamicTasktext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_TaskdynamicTasktext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_TaskdynamicTasktext::MergeFrom(const Sheet_TaskdynamicTasktext& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_taskdynamictasktext_list_.MergeFrom(from.e_taskdynamictasktext_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_TaskdynamicTasktext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_TaskdynamicTasktext::CopyFrom(const Sheet_TaskdynamicTasktext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_TaskdynamicTasktext::IsInitialized() const {

  return true;
}

void Sheet_TaskdynamicTasktext::Swap(Sheet_TaskdynamicTasktext* other) {
  if (other != this) {
    e_taskdynamictasktext_list_.Swap(&other->e_taskdynamictasktext_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_TaskdynamicTasktext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_TaskdynamicTasktext_descriptor_;
  metadata.reflection = Sheet_TaskdynamicTasktext_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
