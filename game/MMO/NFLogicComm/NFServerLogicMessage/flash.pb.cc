// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flash.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "flash.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_FlashFlashMonsterDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FlashFlashMonsterDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FlashFlash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FlashFlash_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FlashFlash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FlashFlash_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FlashItemflashMonsterDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FlashItemflashMonsterDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FlashItemflash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FlashItemflash_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FlashItemflash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FlashItemflash_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_flash_2eproto() {
  protobuf_AddDesc_flash_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "flash.proto");
  GOOGLE_CHECK(file != NULL);
  E_FlashFlashMonsterDesc_descriptor_ = file->message_type(0);
  static const int E_FlashFlashMonsterDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashFlashMonsterDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashFlashMonsterDesc, m_id_),
  };
  E_FlashFlashMonsterDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FlashFlashMonsterDesc_descriptor_,
      E_FlashFlashMonsterDesc::default_instance_,
      E_FlashFlashMonsterDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashFlashMonsterDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashFlashMonsterDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FlashFlashMonsterDesc));
  E_FlashFlash_descriptor_ = file->message_type(1);
  static const int E_FlashFlash_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashFlash, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashFlash, m_isleveldynamic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashFlash, m_minilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashFlash, m_levelcheck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashFlash, m_pointid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashFlash, m_monster_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashFlash, m_monsterrefreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashFlash, m_monster_),
  };
  E_FlashFlash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FlashFlash_descriptor_,
      E_FlashFlash::default_instance_,
      E_FlashFlash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashFlash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashFlash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FlashFlash));
  Sheet_FlashFlash_descriptor_ = file->message_type(2);
  static const int Sheet_FlashFlash_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FlashFlash, e_flashflash_list_),
  };
  Sheet_FlashFlash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FlashFlash_descriptor_,
      Sheet_FlashFlash::default_instance_,
      Sheet_FlashFlash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FlashFlash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FlashFlash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FlashFlash));
  E_FlashItemflashMonsterDesc_descriptor_ = file->message_type(3);
  static const int E_FlashItemflashMonsterDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashItemflashMonsterDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashItemflashMonsterDesc, m_weight_),
  };
  E_FlashItemflashMonsterDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FlashItemflashMonsterDesc_descriptor_,
      E_FlashItemflashMonsterDesc::default_instance_,
      E_FlashItemflashMonsterDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashItemflashMonsterDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashItemflashMonsterDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FlashItemflashMonsterDesc));
  E_FlashItemflash_descriptor_ = file->message_type(4);
  static const int E_FlashItemflash_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashItemflash, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashItemflash, m_usemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashItemflash, m_live_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashItemflash, m_levelwave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashItemflash, m_flashnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashItemflash, m_monster_),
  };
  E_FlashItemflash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FlashItemflash_descriptor_,
      E_FlashItemflash::default_instance_,
      E_FlashItemflash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashItemflash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FlashItemflash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FlashItemflash));
  Sheet_FlashItemflash_descriptor_ = file->message_type(5);
  static const int Sheet_FlashItemflash_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FlashItemflash, e_flashitemflash_list_),
  };
  Sheet_FlashItemflash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FlashItemflash_descriptor_,
      Sheet_FlashItemflash::default_instance_,
      Sheet_FlashItemflash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FlashItemflash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FlashItemflash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FlashItemflash));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_flash_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FlashFlashMonsterDesc_descriptor_, &E_FlashFlashMonsterDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FlashFlash_descriptor_, &E_FlashFlash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FlashFlash_descriptor_, &Sheet_FlashFlash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FlashItemflashMonsterDesc_descriptor_, &E_FlashItemflashMonsterDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FlashItemflash_descriptor_, &E_FlashItemflash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FlashItemflash_descriptor_, &Sheet_FlashItemflash::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_flash_2eproto() {
  delete E_FlashFlashMonsterDesc::default_instance_;
  delete E_FlashFlashMonsterDesc_reflection_;
  delete E_FlashFlash::default_instance_;
  delete E_FlashFlash_reflection_;
  delete Sheet_FlashFlash::default_instance_;
  delete Sheet_FlashFlash_reflection_;
  delete E_FlashItemflashMonsterDesc::default_instance_;
  delete E_FlashItemflashMonsterDesc_reflection_;
  delete E_FlashItemflash::default_instance_;
  delete E_FlashItemflash_reflection_;
  delete Sheet_FlashItemflash::default_instance_;
  delete Sheet_FlashItemflash_reflection_;
}

void protobuf_AddDesc_flash_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013flash.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"J\n\027E_FlashFlashMonsterDesc\022\031\n\005m_n"
    "um\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_id\030\002 \001(\003B\006\302\377\024\002"
    "ID\"\201\003\n\014E_FlashFlash\022\032\n\004m_id\030\001 \001(\003B\014\302\377\024\010\345"
    "\210\267\346\226\260ID\0220\n\020m_isleveldynamic\030\002 \001(\005B\026\302\377\024\022\346"
    "\230\257\345\220\246\345\212\250\346\200\201\347\255\211\347\272\247\022+\n\013m_minilevel\030\003 \001(\005B\026"
    "\302\377\024\022\345\212\250\346\200\201\345\210\235\345\247\213\347\255\211\347\272\247\022,\n\014m_levelcheck\030\004"
    " \001(\005B\026\302\377\024\022\345\212\250\346\200\201\347\255\211\347\272\247\346\240\241\346\255\243\022\"\n\tm_pointi"
    "d\030\005 \001(\003B\017\302\377\024\013\345\235\220\346\240\207\347\202\271ID\022(\n\016m_monster_ty"
    "pe\030\006 \001(\005B\020\302\377\024\014\346\200\252\347\211\251\347\261\273\345\236\213\0224\n\024m_monsterr"
    "efreshtime\030\007 \001(\005B\026\302\377\024\022\346\200\252\347\211\251\345\210\267\346\226\260\346\227\266\351\227\264"
    "\022D\n\tm_monster\030\010 \003(\0132!.proto_ff.E_FlashFl"
    "ashMonsterDescB\016\302\377\024\006\347\224\237\347\211\251\210\301\024\005\"K\n\020Sheet_"
    "FlashFlash\0227\n\021E_FlashFlash_List\030\001 \003(\0132\026."
    "proto_ff.E_FlashFlashB\004\210\301\024(\"Q\n\033E_FlashIt"
    "emflashMonsterDesc\022\024\n\004m_id\030\001 \001(\003B\006\302\377\024\002ID"
    "\022\034\n\010m_weight\030\002 \001(\005B\n\302\377\024\006\346\235\203\351\207\215\"\244\002\n\020E_Fla"
    "shItemflash\022\032\n\004m_id\030\001 \001(\003B\014\302\377\024\010\345\210\267\346\226\260ID\022"
    ")\n\010m_usemap\030\002 \001(\tB\027\302\377\024\017\345\217\257\344\275\277\347\224\250\345\234\260\345\233\276\220\301"
    "\024<\022&\n\006m_live\030\003 \001(\005B\026\302\377\024\022\346\200\252\347\211\251\345\255\230\345\234\250\346\227\266\351"
    "\227\264\022+\n\013m_levelwave\030\004 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\345\212\250\346\200"
    "\201\347\255\211\347\272\247\022*\n\nm_flashnum\030\005 \001(\005B\026\302\377\024\022\345\210\267\346\226\260\346"
    "\200\252\347\211\251\346\225\260\351\207\217\022H\n\tm_monster\030\006 \003(\0132%.proto_f"
    "f.E_FlashItemflashMonsterDescB\016\302\377\024\006\346\200\252\347\211"
    "\251\210\301\024\n\"W\n\024Sheet_FlashItemflash\022\?\n\025E_Flash"
    "Itemflash_List\030\001 \003(\0132\032.proto_ff.E_FlashI"
    "temflashB\004\210\301\024\024", 1054);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flash.proto", &protobuf_RegisterTypes);
  E_FlashFlashMonsterDesc::default_instance_ = new E_FlashFlashMonsterDesc();
  E_FlashFlash::default_instance_ = new E_FlashFlash();
  Sheet_FlashFlash::default_instance_ = new Sheet_FlashFlash();
  E_FlashItemflashMonsterDesc::default_instance_ = new E_FlashItemflashMonsterDesc();
  E_FlashItemflash::default_instance_ = new E_FlashItemflash();
  Sheet_FlashItemflash::default_instance_ = new Sheet_FlashItemflash();
  E_FlashFlashMonsterDesc::default_instance_->InitAsDefaultInstance();
  E_FlashFlash::default_instance_->InitAsDefaultInstance();
  Sheet_FlashFlash::default_instance_->InitAsDefaultInstance();
  E_FlashItemflashMonsterDesc::default_instance_->InitAsDefaultInstance();
  E_FlashItemflash::default_instance_->InitAsDefaultInstance();
  Sheet_FlashItemflash::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_flash_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_flash_2eproto {
  StaticDescriptorInitializer_flash_2eproto() {
    protobuf_AddDesc_flash_2eproto();
  }
} static_descriptor_initializer_flash_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_FlashFlashMonsterDesc::kMNumFieldNumber;
const int E_FlashFlashMonsterDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_FlashFlashMonsterDesc::E_FlashFlashMonsterDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FlashFlashMonsterDesc::InitAsDefaultInstance() {
}

E_FlashFlashMonsterDesc::E_FlashFlashMonsterDesc(const E_FlashFlashMonsterDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FlashFlashMonsterDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FlashFlashMonsterDesc::~E_FlashFlashMonsterDesc() {
  SharedDtor();
}

void E_FlashFlashMonsterDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FlashFlashMonsterDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FlashFlashMonsterDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FlashFlashMonsterDesc_descriptor_;
}

const E_FlashFlashMonsterDesc& E_FlashFlashMonsterDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flash_2eproto();
  return *default_instance_;
}

E_FlashFlashMonsterDesc* E_FlashFlashMonsterDesc::default_instance_ = NULL;

E_FlashFlashMonsterDesc* E_FlashFlashMonsterDesc::New() const {
  return new E_FlashFlashMonsterDesc;
}

void E_FlashFlashMonsterDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FlashFlashMonsterDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int64 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FlashFlashMonsterDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int64 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FlashFlashMonsterDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int64 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FlashFlashMonsterDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int64 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FlashFlashMonsterDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FlashFlashMonsterDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FlashFlashMonsterDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FlashFlashMonsterDesc::MergeFrom(const E_FlashFlashMonsterDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FlashFlashMonsterDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FlashFlashMonsterDesc::CopyFrom(const E_FlashFlashMonsterDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FlashFlashMonsterDesc::IsInitialized() const {

  return true;
}

void E_FlashFlashMonsterDesc::Swap(E_FlashFlashMonsterDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FlashFlashMonsterDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FlashFlashMonsterDesc_descriptor_;
  metadata.reflection = E_FlashFlashMonsterDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FlashFlash::kMIdFieldNumber;
const int E_FlashFlash::kMIsleveldynamicFieldNumber;
const int E_FlashFlash::kMMinilevelFieldNumber;
const int E_FlashFlash::kMLevelcheckFieldNumber;
const int E_FlashFlash::kMPointidFieldNumber;
const int E_FlashFlash::kMMonsterTypeFieldNumber;
const int E_FlashFlash::kMMonsterrefreshtimeFieldNumber;
const int E_FlashFlash::kMMonsterFieldNumber;
#endif  // !_MSC_VER

E_FlashFlash::E_FlashFlash()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FlashFlash::InitAsDefaultInstance() {
}

E_FlashFlash::E_FlashFlash(const E_FlashFlash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FlashFlash::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_isleveldynamic_ = 0;
  m_minilevel_ = 0;
  m_levelcheck_ = 0;
  m_pointid_ = GOOGLE_LONGLONG(0);
  m_monster_type_ = 0;
  m_monsterrefreshtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FlashFlash::~E_FlashFlash() {
  SharedDtor();
}

void E_FlashFlash::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FlashFlash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FlashFlash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FlashFlash_descriptor_;
}

const E_FlashFlash& E_FlashFlash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flash_2eproto();
  return *default_instance_;
}

E_FlashFlash* E_FlashFlash::default_instance_ = NULL;

E_FlashFlash* E_FlashFlash::New() const {
  return new E_FlashFlash;
}

void E_FlashFlash::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_isleveldynamic_ = 0;
    m_minilevel_ = 0;
    m_levelcheck_ = 0;
    m_pointid_ = GOOGLE_LONGLONG(0);
    m_monster_type_ = 0;
    m_monsterrefreshtime_ = 0;
  }
  m_monster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FlashFlash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_isleveldynamic;
        break;
      }

      // optional int32 m_isleveldynamic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isleveldynamic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isleveldynamic_)));
          set_has_m_isleveldynamic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_minilevel;
        break;
      }

      // optional int32 m_minilevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minilevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_minilevel_)));
          set_has_m_minilevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_levelcheck;
        break;
      }

      // optional int32 m_levelcheck = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_levelcheck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_levelcheck_)));
          set_has_m_levelcheck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_pointid;
        break;
      }

      // optional int64 m_pointid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pointid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_pointid_)));
          set_has_m_pointid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_monster_type;
        break;
      }

      // optional int32 m_monster_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monster_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monster_type_)));
          set_has_m_monster_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_monsterrefreshtime;
        break;
      }

      // optional int32 m_monsterrefreshtime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monsterrefreshtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monsterrefreshtime_)));
          set_has_m_monsterrefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_monster;
        break;
      }

      // repeated .proto_ff.E_FlashFlashMonsterDesc m_monster = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_monster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_monster;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FlashFlash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_isleveldynamic = 2;
  if (has_m_isleveldynamic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_isleveldynamic(), output);
  }

  // optional int32 m_minilevel = 3;
  if (has_m_minilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_minilevel(), output);
  }

  // optional int32 m_levelcheck = 4;
  if (has_m_levelcheck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_levelcheck(), output);
  }

  // optional int64 m_pointid = 5;
  if (has_m_pointid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->m_pointid(), output);
  }

  // optional int32 m_monster_type = 6;
  if (has_m_monster_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_monster_type(), output);
  }

  // optional int32 m_monsterrefreshtime = 7;
  if (has_m_monsterrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_monsterrefreshtime(), output);
  }

  // repeated .proto_ff.E_FlashFlashMonsterDesc m_monster = 8;
  for (int i = 0; i < this->m_monster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_monster(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FlashFlash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_isleveldynamic = 2;
  if (has_m_isleveldynamic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_isleveldynamic(), target);
  }

  // optional int32 m_minilevel = 3;
  if (has_m_minilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_minilevel(), target);
  }

  // optional int32 m_levelcheck = 4;
  if (has_m_levelcheck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_levelcheck(), target);
  }

  // optional int64 m_pointid = 5;
  if (has_m_pointid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->m_pointid(), target);
  }

  // optional int32 m_monster_type = 6;
  if (has_m_monster_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_monster_type(), target);
  }

  // optional int32 m_monsterrefreshtime = 7;
  if (has_m_monsterrefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_monsterrefreshtime(), target);
  }

  // repeated .proto_ff.E_FlashFlashMonsterDesc m_monster = 8;
  for (int i = 0; i < this->m_monster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_monster(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FlashFlash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_isleveldynamic = 2;
    if (has_m_isleveldynamic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isleveldynamic());
    }

    // optional int32 m_minilevel = 3;
    if (has_m_minilevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_minilevel());
    }

    // optional int32 m_levelcheck = 4;
    if (has_m_levelcheck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_levelcheck());
    }

    // optional int64 m_pointid = 5;
    if (has_m_pointid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_pointid());
    }

    // optional int32 m_monster_type = 6;
    if (has_m_monster_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monster_type());
    }

    // optional int32 m_monsterrefreshtime = 7;
    if (has_m_monsterrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monsterrefreshtime());
    }

  }
  // repeated .proto_ff.E_FlashFlashMonsterDesc m_monster = 8;
  total_size += 1 * this->m_monster_size();
  for (int i = 0; i < this->m_monster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_monster(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FlashFlash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FlashFlash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FlashFlash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FlashFlash::MergeFrom(const E_FlashFlash& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_monster_.MergeFrom(from.m_monster_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_isleveldynamic()) {
      set_m_isleveldynamic(from.m_isleveldynamic());
    }
    if (from.has_m_minilevel()) {
      set_m_minilevel(from.m_minilevel());
    }
    if (from.has_m_levelcheck()) {
      set_m_levelcheck(from.m_levelcheck());
    }
    if (from.has_m_pointid()) {
      set_m_pointid(from.m_pointid());
    }
    if (from.has_m_monster_type()) {
      set_m_monster_type(from.m_monster_type());
    }
    if (from.has_m_monsterrefreshtime()) {
      set_m_monsterrefreshtime(from.m_monsterrefreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FlashFlash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FlashFlash::CopyFrom(const E_FlashFlash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FlashFlash::IsInitialized() const {

  return true;
}

void E_FlashFlash::Swap(E_FlashFlash* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_isleveldynamic_, other->m_isleveldynamic_);
    std::swap(m_minilevel_, other->m_minilevel_);
    std::swap(m_levelcheck_, other->m_levelcheck_);
    std::swap(m_pointid_, other->m_pointid_);
    std::swap(m_monster_type_, other->m_monster_type_);
    std::swap(m_monsterrefreshtime_, other->m_monsterrefreshtime_);
    m_monster_.Swap(&other->m_monster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FlashFlash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FlashFlash_descriptor_;
  metadata.reflection = E_FlashFlash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FlashFlash::kEFlashFlashListFieldNumber;
#endif  // !_MSC_VER

Sheet_FlashFlash::Sheet_FlashFlash()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FlashFlash::InitAsDefaultInstance() {
}

Sheet_FlashFlash::Sheet_FlashFlash(const Sheet_FlashFlash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FlashFlash::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FlashFlash::~Sheet_FlashFlash() {
  SharedDtor();
}

void Sheet_FlashFlash::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FlashFlash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FlashFlash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FlashFlash_descriptor_;
}

const Sheet_FlashFlash& Sheet_FlashFlash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flash_2eproto();
  return *default_instance_;
}

Sheet_FlashFlash* Sheet_FlashFlash::default_instance_ = NULL;

Sheet_FlashFlash* Sheet_FlashFlash::New() const {
  return new Sheet_FlashFlash;
}

void Sheet_FlashFlash::Clear() {
  e_flashflash_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FlashFlash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FlashFlash E_FlashFlash_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FlashFlash_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_flashflash_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FlashFlash_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FlashFlash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FlashFlash E_FlashFlash_List = 1;
  for (int i = 0; i < this->e_flashflash_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_flashflash_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FlashFlash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FlashFlash E_FlashFlash_List = 1;
  for (int i = 0; i < this->e_flashflash_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_flashflash_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FlashFlash::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FlashFlash E_FlashFlash_List = 1;
  total_size += 1 * this->e_flashflash_list_size();
  for (int i = 0; i < this->e_flashflash_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_flashflash_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FlashFlash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FlashFlash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FlashFlash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FlashFlash::MergeFrom(const Sheet_FlashFlash& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_flashflash_list_.MergeFrom(from.e_flashflash_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FlashFlash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FlashFlash::CopyFrom(const Sheet_FlashFlash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FlashFlash::IsInitialized() const {

  return true;
}

void Sheet_FlashFlash::Swap(Sheet_FlashFlash* other) {
  if (other != this) {
    e_flashflash_list_.Swap(&other->e_flashflash_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FlashFlash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FlashFlash_descriptor_;
  metadata.reflection = Sheet_FlashFlash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FlashItemflashMonsterDesc::kMIdFieldNumber;
const int E_FlashItemflashMonsterDesc::kMWeightFieldNumber;
#endif  // !_MSC_VER

E_FlashItemflashMonsterDesc::E_FlashItemflashMonsterDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FlashItemflashMonsterDesc::InitAsDefaultInstance() {
}

E_FlashItemflashMonsterDesc::E_FlashItemflashMonsterDesc(const E_FlashItemflashMonsterDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FlashItemflashMonsterDesc::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FlashItemflashMonsterDesc::~E_FlashItemflashMonsterDesc() {
  SharedDtor();
}

void E_FlashItemflashMonsterDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FlashItemflashMonsterDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FlashItemflashMonsterDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FlashItemflashMonsterDesc_descriptor_;
}

const E_FlashItemflashMonsterDesc& E_FlashItemflashMonsterDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flash_2eproto();
  return *default_instance_;
}

E_FlashItemflashMonsterDesc* E_FlashItemflashMonsterDesc::default_instance_ = NULL;

E_FlashItemflashMonsterDesc* E_FlashItemflashMonsterDesc::New() const {
  return new E_FlashItemflashMonsterDesc;
}

void E_FlashItemflashMonsterDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FlashItemflashMonsterDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_weight;
        break;
      }

      // optional int32 m_weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_weight_)));
          set_has_m_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FlashItemflashMonsterDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_weight = 2;
  if (has_m_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FlashItemflashMonsterDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_weight = 2;
  if (has_m_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FlashItemflashMonsterDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_weight = 2;
    if (has_m_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FlashItemflashMonsterDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FlashItemflashMonsterDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FlashItemflashMonsterDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FlashItemflashMonsterDesc::MergeFrom(const E_FlashItemflashMonsterDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_weight()) {
      set_m_weight(from.m_weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FlashItemflashMonsterDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FlashItemflashMonsterDesc::CopyFrom(const E_FlashItemflashMonsterDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FlashItemflashMonsterDesc::IsInitialized() const {

  return true;
}

void E_FlashItemflashMonsterDesc::Swap(E_FlashItemflashMonsterDesc* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_weight_, other->m_weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FlashItemflashMonsterDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FlashItemflashMonsterDesc_descriptor_;
  metadata.reflection = E_FlashItemflashMonsterDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FlashItemflash::kMIdFieldNumber;
const int E_FlashItemflash::kMUsemapFieldNumber;
const int E_FlashItemflash::kMLiveFieldNumber;
const int E_FlashItemflash::kMLevelwaveFieldNumber;
const int E_FlashItemflash::kMFlashnumFieldNumber;
const int E_FlashItemflash::kMMonsterFieldNumber;
#endif  // !_MSC_VER

E_FlashItemflash::E_FlashItemflash()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FlashItemflash::InitAsDefaultInstance() {
}

E_FlashItemflash::E_FlashItemflash(const E_FlashItemflash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FlashItemflash::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_usemap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_live_ = 0;
  m_levelwave_ = 0;
  m_flashnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FlashItemflash::~E_FlashItemflash() {
  SharedDtor();
}

void E_FlashItemflash::SharedDtor() {
  if (m_usemap_ != &::google::protobuf::internal::kEmptyString) {
    delete m_usemap_;
  }
  if (this != default_instance_) {
  }
}

void E_FlashItemflash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FlashItemflash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FlashItemflash_descriptor_;
}

const E_FlashItemflash& E_FlashItemflash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flash_2eproto();
  return *default_instance_;
}

E_FlashItemflash* E_FlashItemflash::default_instance_ = NULL;

E_FlashItemflash* E_FlashItemflash::New() const {
  return new E_FlashItemflash;
}

void E_FlashItemflash::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    if (has_m_usemap()) {
      if (m_usemap_ != &::google::protobuf::internal::kEmptyString) {
        m_usemap_->clear();
      }
    }
    m_live_ = 0;
    m_levelwave_ = 0;
    m_flashnum_ = 0;
  }
  m_monster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FlashItemflash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_usemap;
        break;
      }

      // optional string m_usemap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_usemap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_usemap()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_usemap().data(), this->m_usemap().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_live;
        break;
      }

      // optional int32 m_live = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_live:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_live_)));
          set_has_m_live();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_levelwave;
        break;
      }

      // optional int32 m_levelwave = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_levelwave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_levelwave_)));
          set_has_m_levelwave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_flashnum;
        break;
      }

      // optional int32 m_flashnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_flashnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_flashnum_)));
          set_has_m_flashnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_monster;
        break;
      }

      // repeated .proto_ff.E_FlashItemflashMonsterDesc m_monster = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_monster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_monster;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FlashItemflash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional string m_usemap = 2;
  if (has_m_usemap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_usemap().data(), this->m_usemap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_usemap(), output);
  }

  // optional int32 m_live = 3;
  if (has_m_live()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_live(), output);
  }

  // optional int32 m_levelwave = 4;
  if (has_m_levelwave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_levelwave(), output);
  }

  // optional int32 m_flashnum = 5;
  if (has_m_flashnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_flashnum(), output);
  }

  // repeated .proto_ff.E_FlashItemflashMonsterDesc m_monster = 6;
  for (int i = 0; i < this->m_monster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_monster(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FlashItemflash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional string m_usemap = 2;
  if (has_m_usemap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_usemap().data(), this->m_usemap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_usemap(), target);
  }

  // optional int32 m_live = 3;
  if (has_m_live()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_live(), target);
  }

  // optional int32 m_levelwave = 4;
  if (has_m_levelwave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_levelwave(), target);
  }

  // optional int32 m_flashnum = 5;
  if (has_m_flashnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_flashnum(), target);
  }

  // repeated .proto_ff.E_FlashItemflashMonsterDesc m_monster = 6;
  for (int i = 0; i < this->m_monster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_monster(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FlashItemflash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional string m_usemap = 2;
    if (has_m_usemap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_usemap());
    }

    // optional int32 m_live = 3;
    if (has_m_live()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_live());
    }

    // optional int32 m_levelwave = 4;
    if (has_m_levelwave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_levelwave());
    }

    // optional int32 m_flashnum = 5;
    if (has_m_flashnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_flashnum());
    }

  }
  // repeated .proto_ff.E_FlashItemflashMonsterDesc m_monster = 6;
  total_size += 1 * this->m_monster_size();
  for (int i = 0; i < this->m_monster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_monster(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FlashItemflash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FlashItemflash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FlashItemflash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FlashItemflash::MergeFrom(const E_FlashItemflash& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_monster_.MergeFrom(from.m_monster_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_usemap()) {
      set_m_usemap(from.m_usemap());
    }
    if (from.has_m_live()) {
      set_m_live(from.m_live());
    }
    if (from.has_m_levelwave()) {
      set_m_levelwave(from.m_levelwave());
    }
    if (from.has_m_flashnum()) {
      set_m_flashnum(from.m_flashnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FlashItemflash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FlashItemflash::CopyFrom(const E_FlashItemflash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FlashItemflash::IsInitialized() const {

  return true;
}

void E_FlashItemflash::Swap(E_FlashItemflash* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_usemap_, other->m_usemap_);
    std::swap(m_live_, other->m_live_);
    std::swap(m_levelwave_, other->m_levelwave_);
    std::swap(m_flashnum_, other->m_flashnum_);
    m_monster_.Swap(&other->m_monster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FlashItemflash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FlashItemflash_descriptor_;
  metadata.reflection = E_FlashItemflash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FlashItemflash::kEFlashItemflashListFieldNumber;
#endif  // !_MSC_VER

Sheet_FlashItemflash::Sheet_FlashItemflash()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FlashItemflash::InitAsDefaultInstance() {
}

Sheet_FlashItemflash::Sheet_FlashItemflash(const Sheet_FlashItemflash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FlashItemflash::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FlashItemflash::~Sheet_FlashItemflash() {
  SharedDtor();
}

void Sheet_FlashItemflash::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FlashItemflash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FlashItemflash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FlashItemflash_descriptor_;
}

const Sheet_FlashItemflash& Sheet_FlashItemflash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flash_2eproto();
  return *default_instance_;
}

Sheet_FlashItemflash* Sheet_FlashItemflash::default_instance_ = NULL;

Sheet_FlashItemflash* Sheet_FlashItemflash::New() const {
  return new Sheet_FlashItemflash;
}

void Sheet_FlashItemflash::Clear() {
  e_flashitemflash_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FlashItemflash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FlashItemflash E_FlashItemflash_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FlashItemflash_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_flashitemflash_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FlashItemflash_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FlashItemflash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FlashItemflash E_FlashItemflash_List = 1;
  for (int i = 0; i < this->e_flashitemflash_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_flashitemflash_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FlashItemflash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FlashItemflash E_FlashItemflash_List = 1;
  for (int i = 0; i < this->e_flashitemflash_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_flashitemflash_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FlashItemflash::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FlashItemflash E_FlashItemflash_List = 1;
  total_size += 1 * this->e_flashitemflash_list_size();
  for (int i = 0; i < this->e_flashitemflash_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_flashitemflash_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FlashItemflash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FlashItemflash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FlashItemflash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FlashItemflash::MergeFrom(const Sheet_FlashItemflash& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_flashitemflash_list_.MergeFrom(from.e_flashitemflash_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FlashItemflash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FlashItemflash::CopyFrom(const Sheet_FlashItemflash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FlashItemflash::IsInitialized() const {

  return true;
}

void Sheet_FlashItemflash::Swap(Sheet_FlashItemflash* other) {
  if (other != this) {
    e_flashitemflash_list_.Swap(&other->e_flashitemflash_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FlashItemflash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FlashItemflash_descriptor_;
  metadata.reflection = Sheet_FlashItemflash_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
