// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flash.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "flash.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* flashflashmonsterDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flashflashmonsterDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* flashflash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flashflash_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_flashflash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_flashflash_reflection_ = NULL;
const ::google::protobuf::Descriptor* flashitemFlashmonsterDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flashitemFlashmonsterDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* flashitemFlash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flashitemFlash_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_flashitemFlash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_flashitemFlash_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_flash_2eproto() {
  protobuf_AddDesc_flash_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "flash.proto");
  GOOGLE_CHECK(file != NULL);
  flashflashmonsterDesc_descriptor_ = file->message_type(0);
  static const int flashflashmonsterDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashflashmonsterDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashflashmonsterDesc, id_),
  };
  flashflashmonsterDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flashflashmonsterDesc_descriptor_,
      flashflashmonsterDesc::default_instance_,
      flashflashmonsterDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashflashmonsterDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashflashmonsterDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flashflashmonsterDesc));
  flashflash_descriptor_ = file->message_type(1);
  static const int flashflash_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashflash, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashflash, isleveldynamic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashflash, minilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashflash, levelcheck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashflash, pointid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashflash, monster_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashflash, monsterrefreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashflash, monster_),
  };
  flashflash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flashflash_descriptor_,
      flashflash::default_instance_,
      flashflash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashflash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashflash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flashflash));
  Sheet_flashflash_descriptor_ = file->message_type(2);
  static const int Sheet_flashflash_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_flashflash, flashflash_list_),
  };
  Sheet_flashflash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_flashflash_descriptor_,
      Sheet_flashflash::default_instance_,
      Sheet_flashflash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_flashflash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_flashflash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_flashflash));
  flashitemFlashmonsterDesc_descriptor_ = file->message_type(3);
  static const int flashitemFlashmonsterDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashitemFlashmonsterDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashitemFlashmonsterDesc, weight_),
  };
  flashitemFlashmonsterDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flashitemFlashmonsterDesc_descriptor_,
      flashitemFlashmonsterDesc::default_instance_,
      flashitemFlashmonsterDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashitemFlashmonsterDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashitemFlashmonsterDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flashitemFlashmonsterDesc));
  flashitemFlash_descriptor_ = file->message_type(4);
  static const int flashitemFlash_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashitemFlash, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashitemFlash, usemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashitemFlash, live_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashitemFlash, levelwave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashitemFlash, flashnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashitemFlash, monster_),
  };
  flashitemFlash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flashitemFlash_descriptor_,
      flashitemFlash::default_instance_,
      flashitemFlash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashitemFlash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flashitemFlash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flashitemFlash));
  Sheet_flashitemFlash_descriptor_ = file->message_type(5);
  static const int Sheet_flashitemFlash_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_flashitemFlash, flashitemflash_list_),
  };
  Sheet_flashitemFlash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_flashitemFlash_descriptor_,
      Sheet_flashitemFlash::default_instance_,
      Sheet_flashitemFlash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_flashitemFlash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_flashitemFlash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_flashitemFlash));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_flash_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flashflashmonsterDesc_descriptor_, &flashflashmonsterDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flashflash_descriptor_, &flashflash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_flashflash_descriptor_, &Sheet_flashflash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flashitemFlashmonsterDesc_descriptor_, &flashitemFlashmonsterDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flashitemFlash_descriptor_, &flashitemFlash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_flashitemFlash_descriptor_, &Sheet_flashitemFlash::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_flash_2eproto() {
  delete flashflashmonsterDesc::default_instance_;
  delete flashflashmonsterDesc_reflection_;
  delete flashflash::default_instance_;
  delete flashflash_reflection_;
  delete Sheet_flashflash::default_instance_;
  delete Sheet_flashflash_reflection_;
  delete flashitemFlashmonsterDesc::default_instance_;
  delete flashitemFlashmonsterDesc_reflection_;
  delete flashitemFlash::default_instance_;
  delete flashitemFlash_reflection_;
  delete Sheet_flashitemFlash::default_instance_;
  delete Sheet_flashitemFlash_reflection_;
}

void protobuf_AddDesc_flash_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013flash.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"D\n\025flashflashmonsterDesc\022\027\n\003Num\030\001"
    " \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\022\n\002ID\030\002 \001(\003B\006\302\377\024\002ID\"\355\002\n"
    "\nflashflash\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\345\210\267\346\226\260ID\022.\n"
    "\016isLevelDynamic\030\002 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\345\212\250\346\200\201\347"
    "\255\211\347\272\247\022)\n\tminiLevel\030\003 \001(\005B\026\302\377\024\022\345\212\250\346\200\201\345\210\235\345"
    "\247\213\347\255\211\347\272\247\022*\n\nlevelCheck\030\004 \001(\005B\026\302\377\024\022\345\212\250\346\200\201"
    "\347\255\211\347\272\247\346\240\241\346\255\243\022 \n\007pointID\030\005 \001(\003B\017\302\377\024\013\345\235\220\346\240"
    "\207\347\202\271ID\022&\n\014monster_Type\030\006 \001(\005B\020\302\377\024\014\346\200\252\347\211\251"
    "\347\261\273\345\236\213\0222\n\022monsterRefreshTime\030\007 \001(\005B\026\302\377\024\022"
    "\346\200\252\347\211\251\345\210\267\346\226\260\346\227\266\351\227\264\022@\n\007monster\030\010 \003(\0132\037.pr"
    "oto_ff.flashflashmonsterDescB\016\302\377\024\006\347\224\237\347\211\251"
    "\210\301\024\005\"G\n\020Sheet_flashflash\0223\n\017flashflash_L"
    "ist\030\001 \003(\0132\024.proto_ff.flashflashB\004\210\301\024\024\"K\n"
    "\031flashitemFlashmonsterDesc\022\022\n\002Id\030\001 \001(\003B\006"
    "\302\377\024\002ID\022\032\n\006weight\030\002 \001(\005B\n\302\377\024\006\346\235\203\351\207\215\"\224\002\n\016f"
    "lashitemFlash\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\345\210\267\346\226\260ID\022"
    "\'\n\006useMap\030\002 \001(\tB\027\302\377\024\017\345\217\257\344\275\277\347\224\250\345\234\260\345\233\276\220\301\024<"
    "\022$\n\004live\030\003 \001(\005B\026\302\377\024\022\346\200\252\347\211\251\345\255\230\345\234\250\346\227\266\351\227\264\022)"
    "\n\tlevelwave\030\004 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\345\212\250\346\200\201\347\255\211\347\272"
    "\247\022(\n\010flashNum\030\005 \001(\005B\026\302\377\024\022\345\210\267\346\226\260\346\200\252\347\211\251\346\225\260"
    "\351\207\217\022D\n\007monster\030\006 \003(\0132#.proto_ff.flashite"
    "mFlashmonsterDescB\016\302\377\024\006\346\200\252\347\211\251\210\301\024\n\"S\n\024She"
    "et_flashitemFlash\022;\n\023flashitemFlash_List"
    "\030\001 \003(\0132\030.proto_ff.flashitemFlashB\004\210\301\024\024", 998);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flash.proto", &protobuf_RegisterTypes);
  flashflashmonsterDesc::default_instance_ = new flashflashmonsterDesc();
  flashflash::default_instance_ = new flashflash();
  Sheet_flashflash::default_instance_ = new Sheet_flashflash();
  flashitemFlashmonsterDesc::default_instance_ = new flashitemFlashmonsterDesc();
  flashitemFlash::default_instance_ = new flashitemFlash();
  Sheet_flashitemFlash::default_instance_ = new Sheet_flashitemFlash();
  flashflashmonsterDesc::default_instance_->InitAsDefaultInstance();
  flashflash::default_instance_->InitAsDefaultInstance();
  Sheet_flashflash::default_instance_->InitAsDefaultInstance();
  flashitemFlashmonsterDesc::default_instance_->InitAsDefaultInstance();
  flashitemFlash::default_instance_->InitAsDefaultInstance();
  Sheet_flashitemFlash::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_flash_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_flash_2eproto {
  StaticDescriptorInitializer_flash_2eproto() {
    protobuf_AddDesc_flash_2eproto();
  }
} static_descriptor_initializer_flash_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int flashflashmonsterDesc::kNumFieldNumber;
const int flashflashmonsterDesc::kIDFieldNumber;
#endif  // !_MSC_VER

flashflashmonsterDesc::flashflashmonsterDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void flashflashmonsterDesc::InitAsDefaultInstance() {
}

flashflashmonsterDesc::flashflashmonsterDesc(const flashflashmonsterDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void flashflashmonsterDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flashflashmonsterDesc::~flashflashmonsterDesc() {
  SharedDtor();
}

void flashflashmonsterDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void flashflashmonsterDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flashflashmonsterDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flashflashmonsterDesc_descriptor_;
}

const flashflashmonsterDesc& flashflashmonsterDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flash_2eproto();
  return *default_instance_;
}

flashflashmonsterDesc* flashflashmonsterDesc::default_instance_ = NULL;

flashflashmonsterDesc* flashflashmonsterDesc::New() const {
  return new flashflashmonsterDesc;
}

void flashflashmonsterDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flashflashmonsterDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional int64 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void flashflashmonsterDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* flashflashmonsterDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int flashflashmonsterDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flashflashmonsterDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flashflashmonsterDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flashflashmonsterDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flashflashmonsterDesc::MergeFrom(const flashflashmonsterDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flashflashmonsterDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flashflashmonsterDesc::CopyFrom(const flashflashmonsterDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flashflashmonsterDesc::IsInitialized() const {

  return true;
}

void flashflashmonsterDesc::Swap(flashflashmonsterDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flashflashmonsterDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flashflashmonsterDesc_descriptor_;
  metadata.reflection = flashflashmonsterDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flashflash::kIdFieldNumber;
const int flashflash::kIsLevelDynamicFieldNumber;
const int flashflash::kMiniLevelFieldNumber;
const int flashflash::kLevelCheckFieldNumber;
const int flashflash::kPointIDFieldNumber;
const int flashflash::kMonsterTypeFieldNumber;
const int flashflash::kMonsterRefreshTimeFieldNumber;
const int flashflash::kMonsterFieldNumber;
#endif  // !_MSC_VER

flashflash::flashflash()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void flashflash::InitAsDefaultInstance() {
}

flashflash::flashflash(const flashflash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void flashflash::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  isleveldynamic_ = 0;
  minilevel_ = 0;
  levelcheck_ = 0;
  pointid_ = GOOGLE_LONGLONG(0);
  monster_type_ = 0;
  monsterrefreshtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flashflash::~flashflash() {
  SharedDtor();
}

void flashflash::SharedDtor() {
  if (this != default_instance_) {
  }
}

void flashflash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flashflash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flashflash_descriptor_;
}

const flashflash& flashflash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flash_2eproto();
  return *default_instance_;
}

flashflash* flashflash::default_instance_ = NULL;

flashflash* flashflash::New() const {
  return new flashflash;
}

void flashflash::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    isleveldynamic_ = 0;
    minilevel_ = 0;
    levelcheck_ = 0;
    pointid_ = GOOGLE_LONGLONG(0);
    monster_type_ = 0;
    monsterrefreshtime_ = 0;
  }
  monster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flashflash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isLevelDynamic;
        break;
      }

      // optional int32 isLevelDynamic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isLevelDynamic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isleveldynamic_)));
          set_has_isleveldynamic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_miniLevel;
        break;
      }

      // optional int32 miniLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_miniLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minilevel_)));
          set_has_minilevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_levelCheck;
        break;
      }

      // optional int32 levelCheck = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelCheck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelcheck_)));
          set_has_levelcheck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pointID;
        break;
      }

      // optional int64 pointID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pointid_)));
          set_has_pointid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_monster_Type;
        break;
      }

      // optional int32 monster_Type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_type_)));
          set_has_monster_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_monsterRefreshTime;
        break;
      }

      // optional int32 monsterRefreshTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterrefreshtime_)));
          set_has_monsterrefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_monster;
        break;
      }

      // repeated .proto_ff.flashflashmonsterDesc monster = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_monster;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void flashflash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 isLevelDynamic = 2;
  if (has_isleveldynamic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isleveldynamic(), output);
  }

  // optional int32 miniLevel = 3;
  if (has_minilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minilevel(), output);
  }

  // optional int32 levelCheck = 4;
  if (has_levelcheck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->levelcheck(), output);
  }

  // optional int64 pointID = 5;
  if (has_pointid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->pointid(), output);
  }

  // optional int32 monster_Type = 6;
  if (has_monster_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->monster_type(), output);
  }

  // optional int32 monsterRefreshTime = 7;
  if (has_monsterrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->monsterrefreshtime(), output);
  }

  // repeated .proto_ff.flashflashmonsterDesc monster = 8;
  for (int i = 0; i < this->monster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->monster(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* flashflash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 isLevelDynamic = 2;
  if (has_isleveldynamic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isleveldynamic(), target);
  }

  // optional int32 miniLevel = 3;
  if (has_minilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minilevel(), target);
  }

  // optional int32 levelCheck = 4;
  if (has_levelcheck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->levelcheck(), target);
  }

  // optional int64 pointID = 5;
  if (has_pointid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->pointid(), target);
  }

  // optional int32 monster_Type = 6;
  if (has_monster_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->monster_type(), target);
  }

  // optional int32 monsterRefreshTime = 7;
  if (has_monsterrefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->monsterrefreshtime(), target);
  }

  // repeated .proto_ff.flashflashmonsterDesc monster = 8;
  for (int i = 0; i < this->monster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->monster(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int flashflash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 isLevelDynamic = 2;
    if (has_isleveldynamic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isleveldynamic());
    }

    // optional int32 miniLevel = 3;
    if (has_minilevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minilevel());
    }

    // optional int32 levelCheck = 4;
    if (has_levelcheck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelcheck());
    }

    // optional int64 pointID = 5;
    if (has_pointid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pointid());
    }

    // optional int32 monster_Type = 6;
    if (has_monster_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_type());
    }

    // optional int32 monsterRefreshTime = 7;
    if (has_monsterrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterrefreshtime());
    }

  }
  // repeated .proto_ff.flashflashmonsterDesc monster = 8;
  total_size += 1 * this->monster_size();
  for (int i = 0; i < this->monster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flashflash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flashflash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flashflash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flashflash::MergeFrom(const flashflash& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_.MergeFrom(from.monster_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isleveldynamic()) {
      set_isleveldynamic(from.isleveldynamic());
    }
    if (from.has_minilevel()) {
      set_minilevel(from.minilevel());
    }
    if (from.has_levelcheck()) {
      set_levelcheck(from.levelcheck());
    }
    if (from.has_pointid()) {
      set_pointid(from.pointid());
    }
    if (from.has_monster_type()) {
      set_monster_type(from.monster_type());
    }
    if (from.has_monsterrefreshtime()) {
      set_monsterrefreshtime(from.monsterrefreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flashflash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flashflash::CopyFrom(const flashflash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flashflash::IsInitialized() const {

  return true;
}

void flashflash::Swap(flashflash* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(isleveldynamic_, other->isleveldynamic_);
    std::swap(minilevel_, other->minilevel_);
    std::swap(levelcheck_, other->levelcheck_);
    std::swap(pointid_, other->pointid_);
    std::swap(monster_type_, other->monster_type_);
    std::swap(monsterrefreshtime_, other->monsterrefreshtime_);
    monster_.Swap(&other->monster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flashflash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flashflash_descriptor_;
  metadata.reflection = flashflash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_flashflash::kFlashflashListFieldNumber;
#endif  // !_MSC_VER

Sheet_flashflash::Sheet_flashflash()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_flashflash::InitAsDefaultInstance() {
}

Sheet_flashflash::Sheet_flashflash(const Sheet_flashflash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_flashflash::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_flashflash::~Sheet_flashflash() {
  SharedDtor();
}

void Sheet_flashflash::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_flashflash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_flashflash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_flashflash_descriptor_;
}

const Sheet_flashflash& Sheet_flashflash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flash_2eproto();
  return *default_instance_;
}

Sheet_flashflash* Sheet_flashflash::default_instance_ = NULL;

Sheet_flashflash* Sheet_flashflash::New() const {
  return new Sheet_flashflash;
}

void Sheet_flashflash::Clear() {
  flashflash_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_flashflash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.flashflash flashflash_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flashflash_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flashflash_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_flashflash_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_flashflash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.flashflash flashflash_List = 1;
  for (int i = 0; i < this->flashflash_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flashflash_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_flashflash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.flashflash flashflash_List = 1;
  for (int i = 0; i < this->flashflash_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->flashflash_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_flashflash::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.flashflash flashflash_List = 1;
  total_size += 1 * this->flashflash_list_size();
  for (int i = 0; i < this->flashflash_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flashflash_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_flashflash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_flashflash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_flashflash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_flashflash::MergeFrom(const Sheet_flashflash& from) {
  GOOGLE_CHECK_NE(&from, this);
  flashflash_list_.MergeFrom(from.flashflash_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_flashflash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_flashflash::CopyFrom(const Sheet_flashflash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_flashflash::IsInitialized() const {

  return true;
}

void Sheet_flashflash::Swap(Sheet_flashflash* other) {
  if (other != this) {
    flashflash_list_.Swap(&other->flashflash_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_flashflash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_flashflash_descriptor_;
  metadata.reflection = Sheet_flashflash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flashitemFlashmonsterDesc::kIdFieldNumber;
const int flashitemFlashmonsterDesc::kWeightFieldNumber;
#endif  // !_MSC_VER

flashitemFlashmonsterDesc::flashitemFlashmonsterDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void flashitemFlashmonsterDesc::InitAsDefaultInstance() {
}

flashitemFlashmonsterDesc::flashitemFlashmonsterDesc(const flashitemFlashmonsterDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void flashitemFlashmonsterDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flashitemFlashmonsterDesc::~flashitemFlashmonsterDesc() {
  SharedDtor();
}

void flashitemFlashmonsterDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void flashitemFlashmonsterDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flashitemFlashmonsterDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flashitemFlashmonsterDesc_descriptor_;
}

const flashitemFlashmonsterDesc& flashitemFlashmonsterDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flash_2eproto();
  return *default_instance_;
}

flashitemFlashmonsterDesc* flashitemFlashmonsterDesc::default_instance_ = NULL;

flashitemFlashmonsterDesc* flashitemFlashmonsterDesc::New() const {
  return new flashitemFlashmonsterDesc;
}

void flashitemFlashmonsterDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flashitemFlashmonsterDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // optional int32 weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void flashitemFlashmonsterDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* flashitemFlashmonsterDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int flashitemFlashmonsterDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flashitemFlashmonsterDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flashitemFlashmonsterDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flashitemFlashmonsterDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flashitemFlashmonsterDesc::MergeFrom(const flashitemFlashmonsterDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flashitemFlashmonsterDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flashitemFlashmonsterDesc::CopyFrom(const flashitemFlashmonsterDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flashitemFlashmonsterDesc::IsInitialized() const {

  return true;
}

void flashitemFlashmonsterDesc::Swap(flashitemFlashmonsterDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flashitemFlashmonsterDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flashitemFlashmonsterDesc_descriptor_;
  metadata.reflection = flashitemFlashmonsterDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flashitemFlash::kIdFieldNumber;
const int flashitemFlash::kUseMapFieldNumber;
const int flashitemFlash::kLiveFieldNumber;
const int flashitemFlash::kLevelwaveFieldNumber;
const int flashitemFlash::kFlashNumFieldNumber;
const int flashitemFlash::kMonsterFieldNumber;
#endif  // !_MSC_VER

flashitemFlash::flashitemFlash()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void flashitemFlash::InitAsDefaultInstance() {
}

flashitemFlash::flashitemFlash(const flashitemFlash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void flashitemFlash::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  usemap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  live_ = 0;
  levelwave_ = 0;
  flashnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flashitemFlash::~flashitemFlash() {
  SharedDtor();
}

void flashitemFlash::SharedDtor() {
  if (usemap_ != &::google::protobuf::internal::kEmptyString) {
    delete usemap_;
  }
  if (this != default_instance_) {
  }
}

void flashitemFlash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flashitemFlash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flashitemFlash_descriptor_;
}

const flashitemFlash& flashitemFlash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flash_2eproto();
  return *default_instance_;
}

flashitemFlash* flashitemFlash::default_instance_ = NULL;

flashitemFlash* flashitemFlash::New() const {
  return new flashitemFlash;
}

void flashitemFlash::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_usemap()) {
      if (usemap_ != &::google::protobuf::internal::kEmptyString) {
        usemap_->clear();
      }
    }
    live_ = 0;
    levelwave_ = 0;
    flashnum_ = 0;
  }
  monster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flashitemFlash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_useMap;
        break;
      }

      // optional string useMap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usemap()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usemap().data(), this->usemap().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_live;
        break;
      }

      // optional int32 live = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_live:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &live_)));
          set_has_live();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_levelwave;
        break;
      }

      // optional int32 levelwave = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelwave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelwave_)));
          set_has_levelwave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flashNum;
        break;
      }

      // optional int32 flashNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flashNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flashnum_)));
          set_has_flashnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_monster;
        break;
      }

      // repeated .proto_ff.flashitemFlashmonsterDesc monster = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_monster;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void flashitemFlash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string useMap = 2;
  if (has_usemap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usemap().data(), this->usemap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->usemap(), output);
  }

  // optional int32 live = 3;
  if (has_live()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->live(), output);
  }

  // optional int32 levelwave = 4;
  if (has_levelwave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->levelwave(), output);
  }

  // optional int32 flashNum = 5;
  if (has_flashnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flashnum(), output);
  }

  // repeated .proto_ff.flashitemFlashmonsterDesc monster = 6;
  for (int i = 0; i < this->monster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->monster(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* flashitemFlash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string useMap = 2;
  if (has_usemap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usemap().data(), this->usemap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->usemap(), target);
  }

  // optional int32 live = 3;
  if (has_live()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->live(), target);
  }

  // optional int32 levelwave = 4;
  if (has_levelwave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->levelwave(), target);
  }

  // optional int32 flashNum = 5;
  if (has_flashnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flashnum(), target);
  }

  // repeated .proto_ff.flashitemFlashmonsterDesc monster = 6;
  for (int i = 0; i < this->monster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->monster(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int flashitemFlash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string useMap = 2;
    if (has_usemap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usemap());
    }

    // optional int32 live = 3;
    if (has_live()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->live());
    }

    // optional int32 levelwave = 4;
    if (has_levelwave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelwave());
    }

    // optional int32 flashNum = 5;
    if (has_flashnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flashnum());
    }

  }
  // repeated .proto_ff.flashitemFlashmonsterDesc monster = 6;
  total_size += 1 * this->monster_size();
  for (int i = 0; i < this->monster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flashitemFlash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flashitemFlash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flashitemFlash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flashitemFlash::MergeFrom(const flashitemFlash& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_.MergeFrom(from.monster_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_usemap()) {
      set_usemap(from.usemap());
    }
    if (from.has_live()) {
      set_live(from.live());
    }
    if (from.has_levelwave()) {
      set_levelwave(from.levelwave());
    }
    if (from.has_flashnum()) {
      set_flashnum(from.flashnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flashitemFlash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flashitemFlash::CopyFrom(const flashitemFlash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flashitemFlash::IsInitialized() const {

  return true;
}

void flashitemFlash::Swap(flashitemFlash* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(usemap_, other->usemap_);
    std::swap(live_, other->live_);
    std::swap(levelwave_, other->levelwave_);
    std::swap(flashnum_, other->flashnum_);
    monster_.Swap(&other->monster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flashitemFlash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flashitemFlash_descriptor_;
  metadata.reflection = flashitemFlash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_flashitemFlash::kFlashitemFlashListFieldNumber;
#endif  // !_MSC_VER

Sheet_flashitemFlash::Sheet_flashitemFlash()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_flashitemFlash::InitAsDefaultInstance() {
}

Sheet_flashitemFlash::Sheet_flashitemFlash(const Sheet_flashitemFlash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_flashitemFlash::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_flashitemFlash::~Sheet_flashitemFlash() {
  SharedDtor();
}

void Sheet_flashitemFlash::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_flashitemFlash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_flashitemFlash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_flashitemFlash_descriptor_;
}

const Sheet_flashitemFlash& Sheet_flashitemFlash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flash_2eproto();
  return *default_instance_;
}

Sheet_flashitemFlash* Sheet_flashitemFlash::default_instance_ = NULL;

Sheet_flashitemFlash* Sheet_flashitemFlash::New() const {
  return new Sheet_flashitemFlash;
}

void Sheet_flashitemFlash::Clear() {
  flashitemflash_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_flashitemFlash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.flashitemFlash flashitemFlash_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flashitemFlash_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flashitemflash_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_flashitemFlash_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_flashitemFlash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.flashitemFlash flashitemFlash_List = 1;
  for (int i = 0; i < this->flashitemflash_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flashitemflash_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_flashitemFlash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.flashitemFlash flashitemFlash_List = 1;
  for (int i = 0; i < this->flashitemflash_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->flashitemflash_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_flashitemFlash::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.flashitemFlash flashitemFlash_List = 1;
  total_size += 1 * this->flashitemflash_list_size();
  for (int i = 0; i < this->flashitemflash_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flashitemflash_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_flashitemFlash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_flashitemFlash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_flashitemFlash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_flashitemFlash::MergeFrom(const Sheet_flashitemFlash& from) {
  GOOGLE_CHECK_NE(&from, this);
  flashitemflash_list_.MergeFrom(from.flashitemflash_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_flashitemFlash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_flashitemFlash::CopyFrom(const Sheet_flashitemFlash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_flashitemFlash::IsInitialized() const {

  return true;
}

void Sheet_flashitemFlash::Swap(Sheet_flashitemFlash* other) {
  if (other != this) {
    flashitemflash_list_.Swap(&other->flashitemflash_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_flashitemFlash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_flashitemFlash_descriptor_;
  metadata.reflection = Sheet_flashitemFlash_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
