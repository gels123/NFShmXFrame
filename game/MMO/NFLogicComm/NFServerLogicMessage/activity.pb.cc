// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: activity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "activity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* activitydaily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitydaily_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activitydaily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activitydaily_reflection_ = NULL;
const ::google::protobuf::Descriptor* activityactivitynotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activityactivitynotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activityactivitynotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activityactivitynotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* activityscufflerewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activityscufflerewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* activityscuffle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activityscuffle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activityscuffle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activityscuffle_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitychaosDragonsrewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitychaosDragonsrewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitychaosDragons_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitychaosDragons_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activitychaosDragons_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activitychaosDragons_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitycircus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitycircus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activitycircus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activitycircus_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitycircusNumitemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitycircusNumitemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitycircusNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitycircusNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activitycircusNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activitycircusNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitycircusDanitemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitycircusDanitemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitycircusDancircusDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitycircusDancircusDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitycircusDan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitycircusDan_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activitycircusDan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activitycircusDan_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitymathrule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitymathrule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activitymathrule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activitymathrule_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitymathrewardrewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitymathrewardrewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitymathreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitymathreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activitymathreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activitymathreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitygvgConst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitygvgConst_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activitygvgConst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activitygvgConst_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitygvgRankRewardgMemberrewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitygvgRankRewardgMemberrewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitygvgRankRewardgLeaderrewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitygvgRankRewardgLeaderrewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitygvgRankReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitygvgRankReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activitygvgRankReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activitygvgRankReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitygvgRewardrewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitygvgRewardrewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitygvgRewardfinalityDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitygvgRewardfinalityDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitygvgReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitygvgReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activitygvgReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activitygvgReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* activityworldTreasureConst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activityworldTreasureConst_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activityworldTreasureConst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activityworldTreasureConst_reflection_ = NULL;
const ::google::protobuf::Descriptor* activityworldTreasureMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activityworldTreasureMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activityworldTreasureMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activityworldTreasureMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* activityworldTreasureMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activityworldTreasureMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activityworldTreasureMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activityworldTreasureMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* activitylosttempleConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activitylosttempleConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_activitylosttempleConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_activitylosttempleConstant_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_activity_2eproto() {
  protobuf_AddDesc_activity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "activity.proto");
  GOOGLE_CHECK(file != NULL);
  activitydaily_descriptor_ = file->message_type(0);
  static const int activitydaily_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, activename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, descriptiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, typeargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, involvemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, opencycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, pushtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, openingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, advancetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, intervaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, opeday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, closeday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, iscross_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, serverdelaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, forwordentertime_),
  };
  activitydaily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitydaily_descriptor_,
      activitydaily::default_instance_,
      activitydaily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitydaily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitydaily));
  Sheet_activitydaily_descriptor_ = file->message_type(1);
  static const int Sheet_activitydaily_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitydaily, activitydaily_list_),
  };
  Sheet_activitydaily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activitydaily_descriptor_,
      Sheet_activitydaily::default_instance_,
      Sheet_activitydaily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitydaily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitydaily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activitydaily));
  activityactivitynotice_descriptor_ = file->message_type(2);
  static const int activityactivitynotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityactivitynotice, activeid_),
  };
  activityactivitynotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activityactivitynotice_descriptor_,
      activityactivitynotice::default_instance_,
      activityactivitynotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityactivitynotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityactivitynotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activityactivitynotice));
  Sheet_activityactivitynotice_descriptor_ = file->message_type(3);
  static const int Sheet_activityactivitynotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityactivitynotice, activityactivitynotice_list_),
  };
  Sheet_activityactivitynotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activityactivitynotice_descriptor_,
      Sheet_activityactivitynotice::default_instance_,
      Sheet_activityactivitynotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityactivitynotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityactivitynotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activityactivitynotice));
  activityscufflerewardDesc_descriptor_ = file->message_type(4);
  static const int activityscufflerewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscufflerewardDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscufflerewardDesc, id_),
  };
  activityscufflerewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activityscufflerewardDesc_descriptor_,
      activityscufflerewardDesc::default_instance_,
      activityscufflerewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscufflerewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscufflerewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activityscufflerewardDesc));
  activityscuffle_descriptor_ = file->message_type(5);
  static const int activityscuffle_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscuffle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscuffle, typeargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscuffle, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscuffle, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscuffle, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscuffle, nextid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscuffle, maxpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscuffle, pvepoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscuffle, pvppoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscuffle, pvphelppoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscuffle, reward_),
  };
  activityscuffle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activityscuffle_descriptor_,
      activityscuffle::default_instance_,
      activityscuffle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscuffle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityscuffle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activityscuffle));
  Sheet_activityscuffle_descriptor_ = file->message_type(6);
  static const int Sheet_activityscuffle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityscuffle, activityscuffle_list_),
  };
  Sheet_activityscuffle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activityscuffle_descriptor_,
      Sheet_activityscuffle::default_instance_,
      Sheet_activityscuffle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityscuffle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityscuffle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activityscuffle));
  activitychaosDragonsrewardDesc_descriptor_ = file->message_type(7);
  static const int activitychaosDragonsrewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitychaosDragonsrewardDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitychaosDragonsrewardDesc, id_),
  };
  activitychaosDragonsrewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitychaosDragonsrewardDesc_descriptor_,
      activitychaosDragonsrewardDesc::default_instance_,
      activitychaosDragonsrewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitychaosDragonsrewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitychaosDragonsrewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitychaosDragonsrewardDesc));
  activitychaosDragons_descriptor_ = file->message_type(8);
  static const int activitychaosDragons_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitychaosDragons, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitychaosDragons, reward_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitychaosDragons, reward_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitychaosDragons, rankmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitychaosDragons, rankmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitychaosDragons, getpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitychaosDragons, reward_),
  };
  activitychaosDragons_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitychaosDragons_descriptor_,
      activitychaosDragons::default_instance_,
      activitychaosDragons_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitychaosDragons, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitychaosDragons, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitychaosDragons));
  Sheet_activitychaosDragons_descriptor_ = file->message_type(9);
  static const int Sheet_activitychaosDragons_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitychaosDragons, activitychaosdragons_list_),
  };
  Sheet_activitychaosDragons_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activitychaosDragons_descriptor_,
      Sheet_activitychaosDragons::default_instance_,
      Sheet_activitychaosDragons_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitychaosDragons, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitychaosDragons, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activitychaosDragons));
  activitycircus_descriptor_ = file->message_type(10);
  static const int activitycircus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircus, circusid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircus, powerlow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircus, powerup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircus, circus_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircus, circus_b_),
  };
  activitycircus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitycircus_descriptor_,
      activitycircus::default_instance_,
      activitycircus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitycircus));
  Sheet_activitycircus_descriptor_ = file->message_type(11);
  static const int Sheet_activitycircus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitycircus, activitycircus_list_),
  };
  Sheet_activitycircus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activitycircus_descriptor_,
      Sheet_activitycircus::default_instance_,
      Sheet_activitycircus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitycircus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitycircus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activitycircus));
  activitycircusNumitemDesc_descriptor_ = file->message_type(12);
  static const int activitycircusNumitemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusNumitemDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusNumitemDesc, id_),
  };
  activitycircusNumitemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitycircusNumitemDesc_descriptor_,
      activitycircusNumitemDesc::default_instance_,
      activitycircusNumitemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusNumitemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusNumitemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitycircusNumitemDesc));
  activitycircusNum_descriptor_ = file->message_type(13);
  static const int activitycircusNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusNum, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusNum, item_),
  };
  activitycircusNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitycircusNum_descriptor_,
      activitycircusNum::default_instance_,
      activitycircusNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitycircusNum));
  Sheet_activitycircusNum_descriptor_ = file->message_type(14);
  static const int Sheet_activitycircusNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitycircusNum, activitycircusnum_list_),
  };
  Sheet_activitycircusNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activitycircusNum_descriptor_,
      Sheet_activitycircusNum::default_instance_,
      Sheet_activitycircusNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitycircusNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitycircusNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activitycircusNum));
  activitycircusDanitemDesc_descriptor_ = file->message_type(15);
  static const int activitycircusDanitemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusDanitemDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusDanitemDesc, id_),
  };
  activitycircusDanitemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitycircusDanitemDesc_descriptor_,
      activitycircusDanitemDesc::default_instance_,
      activitycircusDanitemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusDanitemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusDanitemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitycircusDanitemDesc));
  activitycircusDancircusDesc_descriptor_ = file->message_type(16);
  static const int activitycircusDancircusDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusDancircusDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusDancircusDesc, id_),
  };
  activitycircusDancircusDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitycircusDancircusDesc_descriptor_,
      activitycircusDancircusDesc::default_instance_,
      activitycircusDancircusDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusDancircusDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusDancircusDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitycircusDancircusDesc));
  activitycircusDan_descriptor_ = file->message_type(17);
  static const int activitycircusDan_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusDan, changciid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusDan, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusDan, circus_),
  };
  activitycircusDan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitycircusDan_descriptor_,
      activitycircusDan::default_instance_,
      activitycircusDan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusDan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitycircusDan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitycircusDan));
  Sheet_activitycircusDan_descriptor_ = file->message_type(18);
  static const int Sheet_activitycircusDan_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitycircusDan, activitycircusdan_list_),
  };
  Sheet_activitycircusDan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activitycircusDan_descriptor_,
      Sheet_activitycircusDan::default_instance_,
      Sheet_activitycircusDan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitycircusDan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitycircusDan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activitycircusDan));
  activitymathrule_descriptor_ = file->message_type(19);
  static const int activitymathrule_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathrule, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathrule, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathrule, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathrule, duplicateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathrule, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathrule, winnerpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathrule, loserpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathrule, drawpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathrule, rewardtype_),
  };
  activitymathrule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitymathrule_descriptor_,
      activitymathrule::default_instance_,
      activitymathrule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathrule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathrule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitymathrule));
  Sheet_activitymathrule_descriptor_ = file->message_type(20);
  static const int Sheet_activitymathrule_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitymathrule, activitymathrule_list_),
  };
  Sheet_activitymathrule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activitymathrule_descriptor_,
      Sheet_activitymathrule::default_instance_,
      Sheet_activitymathrule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitymathrule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitymathrule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activitymathrule));
  activitymathrewardrewardDesc_descriptor_ = file->message_type(21);
  static const int activitymathrewardrewardDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathrewardrewardDesc, num_),
  };
  activitymathrewardrewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitymathrewardrewardDesc_descriptor_,
      activitymathrewardrewardDesc::default_instance_,
      activitymathrewardrewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathrewardrewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathrewardrewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitymathrewardrewardDesc));
  activitymathreward_descriptor_ = file->message_type(22);
  static const int activitymathreward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathreward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathreward, rewardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathreward, rewardlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathreward, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathreward, reward_id_),
  };
  activitymathreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitymathreward_descriptor_,
      activitymathreward::default_instance_,
      activitymathreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitymathreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitymathreward));
  Sheet_activitymathreward_descriptor_ = file->message_type(23);
  static const int Sheet_activitymathreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitymathreward, activitymathreward_list_),
  };
  Sheet_activitymathreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activitymathreward_descriptor_,
      Sheet_activitymathreward::default_instance_,
      Sheet_activitymathreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitymathreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitymathreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activitymathreward));
  activitygvgConst_descriptor_ = file->message_type(24);
  static const int activitygvgConst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgConst, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgConst, constantdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgConst, stringdata_),
  };
  activitygvgConst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitygvgConst_descriptor_,
      activitygvgConst::default_instance_,
      activitygvgConst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgConst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgConst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitygvgConst));
  Sheet_activitygvgConst_descriptor_ = file->message_type(25);
  static const int Sheet_activitygvgConst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitygvgConst, activitygvgconst_list_),
  };
  Sheet_activitygvgConst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activitygvgConst_descriptor_,
      Sheet_activitygvgConst::default_instance_,
      Sheet_activitygvgConst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitygvgConst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitygvgConst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activitygvgConst));
  activitygvgRankRewardgMemberrewardDesc_descriptor_ = file->message_type(26);
  static const int activitygvgRankRewardgMemberrewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRankRewardgMemberrewardDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRankRewardgMemberrewardDesc, id_),
  };
  activitygvgRankRewardgMemberrewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitygvgRankRewardgMemberrewardDesc_descriptor_,
      activitygvgRankRewardgMemberrewardDesc::default_instance_,
      activitygvgRankRewardgMemberrewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRankRewardgMemberrewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRankRewardgMemberrewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitygvgRankRewardgMemberrewardDesc));
  activitygvgRankRewardgLeaderrewardDesc_descriptor_ = file->message_type(27);
  static const int activitygvgRankRewardgLeaderrewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRankRewardgLeaderrewardDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRankRewardgLeaderrewardDesc, id_),
  };
  activitygvgRankRewardgLeaderrewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitygvgRankRewardgLeaderrewardDesc_descriptor_,
      activitygvgRankRewardgLeaderrewardDesc::default_instance_,
      activitygvgRankRewardgLeaderrewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRankRewardgLeaderrewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRankRewardgLeaderrewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitygvgRankRewardgLeaderrewardDesc));
  activitygvgRankReward_descriptor_ = file->message_type(28);
  static const int activitygvgRankReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRankReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRankReward, gleaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRankReward, gmemberreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRankReward, gleaderreward_),
  };
  activitygvgRankReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitygvgRankReward_descriptor_,
      activitygvgRankReward::default_instance_,
      activitygvgRankReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRankReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRankReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitygvgRankReward));
  Sheet_activitygvgRankReward_descriptor_ = file->message_type(29);
  static const int Sheet_activitygvgRankReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitygvgRankReward, activitygvgrankreward_list_),
  };
  Sheet_activitygvgRankReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activitygvgRankReward_descriptor_,
      Sheet_activitygvgRankReward::default_instance_,
      Sheet_activitygvgRankReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitygvgRankReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitygvgRankReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activitygvgRankReward));
  activitygvgRewardrewardDesc_descriptor_ = file->message_type(30);
  static const int activitygvgRewardrewardDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRewardrewardDesc, num_),
  };
  activitygvgRewardrewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitygvgRewardrewardDesc_descriptor_,
      activitygvgRewardrewardDesc::default_instance_,
      activitygvgRewardrewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRewardrewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRewardrewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitygvgRewardrewardDesc));
  activitygvgRewardfinalityDesc_descriptor_ = file->message_type(31);
  static const int activitygvgRewardfinalityDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRewardfinalityDesc, num_),
  };
  activitygvgRewardfinalityDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitygvgRewardfinalityDesc_descriptor_,
      activitygvgRewardfinalityDesc::default_instance_,
      activitygvgRewardfinalityDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRewardfinalityDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgRewardfinalityDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitygvgRewardfinalityDesc));
  activitygvgReward_descriptor_ = file->message_type(32);
  static const int activitygvgReward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgReward, finalityskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgReward, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgReward, finality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgReward, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgReward, finality_id_),
  };
  activitygvgReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitygvgReward_descriptor_,
      activitygvgReward::default_instance_,
      activitygvgReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitygvgReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitygvgReward));
  Sheet_activitygvgReward_descriptor_ = file->message_type(33);
  static const int Sheet_activitygvgReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitygvgReward, activitygvgreward_list_),
  };
  Sheet_activitygvgReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activitygvgReward_descriptor_,
      Sheet_activitygvgReward::default_instance_,
      Sheet_activitygvgReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitygvgReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitygvgReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activitygvgReward));
  activityworldTreasureConst_descriptor_ = file->message_type(34);
  static const int activityworldTreasureConst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityworldTreasureConst, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityworldTreasureConst, constantdata_),
  };
  activityworldTreasureConst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activityworldTreasureConst_descriptor_,
      activityworldTreasureConst::default_instance_,
      activityworldTreasureConst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityworldTreasureConst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityworldTreasureConst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activityworldTreasureConst));
  Sheet_activityworldTreasureConst_descriptor_ = file->message_type(35);
  static const int Sheet_activityworldTreasureConst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityworldTreasureConst, activityworldtreasureconst_list_),
  };
  Sheet_activityworldTreasureConst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activityworldTreasureConst_descriptor_,
      Sheet_activityworldTreasureConst::default_instance_,
      Sheet_activityworldTreasureConst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityworldTreasureConst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityworldTreasureConst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activityworldTreasureConst));
  activityworldTreasureMap_descriptor_ = file->message_type(36);
  static const int activityworldTreasureMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityworldTreasureMap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityworldTreasureMap, pathid_),
  };
  activityworldTreasureMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activityworldTreasureMap_descriptor_,
      activityworldTreasureMap::default_instance_,
      activityworldTreasureMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityworldTreasureMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityworldTreasureMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activityworldTreasureMap));
  Sheet_activityworldTreasureMap_descriptor_ = file->message_type(37);
  static const int Sheet_activityworldTreasureMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityworldTreasureMap, activityworldtreasuremap_list_),
  };
  Sheet_activityworldTreasureMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activityworldTreasureMap_descriptor_,
      Sheet_activityworldTreasureMap::default_instance_,
      Sheet_activityworldTreasureMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityworldTreasureMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityworldTreasureMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activityworldTreasureMap));
  activityworldTreasureMonster_descriptor_ = file->message_type(38);
  static const int activityworldTreasureMonster_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityworldTreasureMonster, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityworldTreasureMonster, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityworldTreasureMonster, appearweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityworldTreasureMonster, skillid_),
  };
  activityworldTreasureMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activityworldTreasureMonster_descriptor_,
      activityworldTreasureMonster::default_instance_,
      activityworldTreasureMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityworldTreasureMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activityworldTreasureMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activityworldTreasureMonster));
  Sheet_activityworldTreasureMonster_descriptor_ = file->message_type(39);
  static const int Sheet_activityworldTreasureMonster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityworldTreasureMonster, activityworldtreasuremonster_list_),
  };
  Sheet_activityworldTreasureMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activityworldTreasureMonster_descriptor_,
      Sheet_activityworldTreasureMonster::default_instance_,
      Sheet_activityworldTreasureMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityworldTreasureMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activityworldTreasureMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activityworldTreasureMonster));
  activitylosttempleConstant_descriptor_ = file->message_type(40);
  static const int activitylosttempleConstant_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitylosttempleConstant, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitylosttempleConstant, constantdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitylosttempleConstant, stringdata_),
  };
  activitylosttempleConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activitylosttempleConstant_descriptor_,
      activitylosttempleConstant::default_instance_,
      activitylosttempleConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitylosttempleConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activitylosttempleConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activitylosttempleConstant));
  Sheet_activitylosttempleConstant_descriptor_ = file->message_type(41);
  static const int Sheet_activitylosttempleConstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitylosttempleConstant, activitylosttempleconstant_list_),
  };
  Sheet_activitylosttempleConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_activitylosttempleConstant_descriptor_,
      Sheet_activitylosttempleConstant::default_instance_,
      Sheet_activitylosttempleConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitylosttempleConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_activitylosttempleConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_activitylosttempleConstant));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_activity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitydaily_descriptor_, &activitydaily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activitydaily_descriptor_, &Sheet_activitydaily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activityactivitynotice_descriptor_, &activityactivitynotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activityactivitynotice_descriptor_, &Sheet_activityactivitynotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activityscufflerewardDesc_descriptor_, &activityscufflerewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activityscuffle_descriptor_, &activityscuffle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activityscuffle_descriptor_, &Sheet_activityscuffle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitychaosDragonsrewardDesc_descriptor_, &activitychaosDragonsrewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitychaosDragons_descriptor_, &activitychaosDragons::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activitychaosDragons_descriptor_, &Sheet_activitychaosDragons::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitycircus_descriptor_, &activitycircus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activitycircus_descriptor_, &Sheet_activitycircus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitycircusNumitemDesc_descriptor_, &activitycircusNumitemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitycircusNum_descriptor_, &activitycircusNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activitycircusNum_descriptor_, &Sheet_activitycircusNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitycircusDanitemDesc_descriptor_, &activitycircusDanitemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitycircusDancircusDesc_descriptor_, &activitycircusDancircusDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitycircusDan_descriptor_, &activitycircusDan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activitycircusDan_descriptor_, &Sheet_activitycircusDan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitymathrule_descriptor_, &activitymathrule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activitymathrule_descriptor_, &Sheet_activitymathrule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitymathrewardrewardDesc_descriptor_, &activitymathrewardrewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitymathreward_descriptor_, &activitymathreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activitymathreward_descriptor_, &Sheet_activitymathreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitygvgConst_descriptor_, &activitygvgConst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activitygvgConst_descriptor_, &Sheet_activitygvgConst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitygvgRankRewardgMemberrewardDesc_descriptor_, &activitygvgRankRewardgMemberrewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitygvgRankRewardgLeaderrewardDesc_descriptor_, &activitygvgRankRewardgLeaderrewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitygvgRankReward_descriptor_, &activitygvgRankReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activitygvgRankReward_descriptor_, &Sheet_activitygvgRankReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitygvgRewardrewardDesc_descriptor_, &activitygvgRewardrewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitygvgRewardfinalityDesc_descriptor_, &activitygvgRewardfinalityDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitygvgReward_descriptor_, &activitygvgReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activitygvgReward_descriptor_, &Sheet_activitygvgReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activityworldTreasureConst_descriptor_, &activityworldTreasureConst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activityworldTreasureConst_descriptor_, &Sheet_activityworldTreasureConst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activityworldTreasureMap_descriptor_, &activityworldTreasureMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activityworldTreasureMap_descriptor_, &Sheet_activityworldTreasureMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activityworldTreasureMonster_descriptor_, &activityworldTreasureMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activityworldTreasureMonster_descriptor_, &Sheet_activityworldTreasureMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activitylosttempleConstant_descriptor_, &activitylosttempleConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_activitylosttempleConstant_descriptor_, &Sheet_activitylosttempleConstant::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_activity_2eproto() {
  delete activitydaily::default_instance_;
  delete activitydaily_reflection_;
  delete Sheet_activitydaily::default_instance_;
  delete Sheet_activitydaily_reflection_;
  delete activityactivitynotice::default_instance_;
  delete activityactivitynotice_reflection_;
  delete Sheet_activityactivitynotice::default_instance_;
  delete Sheet_activityactivitynotice_reflection_;
  delete activityscufflerewardDesc::default_instance_;
  delete activityscufflerewardDesc_reflection_;
  delete activityscuffle::default_instance_;
  delete activityscuffle_reflection_;
  delete Sheet_activityscuffle::default_instance_;
  delete Sheet_activityscuffle_reflection_;
  delete activitychaosDragonsrewardDesc::default_instance_;
  delete activitychaosDragonsrewardDesc_reflection_;
  delete activitychaosDragons::default_instance_;
  delete activitychaosDragons_reflection_;
  delete Sheet_activitychaosDragons::default_instance_;
  delete Sheet_activitychaosDragons_reflection_;
  delete activitycircus::default_instance_;
  delete activitycircus_reflection_;
  delete Sheet_activitycircus::default_instance_;
  delete Sheet_activitycircus_reflection_;
  delete activitycircusNumitemDesc::default_instance_;
  delete activitycircusNumitemDesc_reflection_;
  delete activitycircusNum::default_instance_;
  delete activitycircusNum_reflection_;
  delete Sheet_activitycircusNum::default_instance_;
  delete Sheet_activitycircusNum_reflection_;
  delete activitycircusDanitemDesc::default_instance_;
  delete activitycircusDanitemDesc_reflection_;
  delete activitycircusDancircusDesc::default_instance_;
  delete activitycircusDancircusDesc_reflection_;
  delete activitycircusDan::default_instance_;
  delete activitycircusDan_reflection_;
  delete Sheet_activitycircusDan::default_instance_;
  delete Sheet_activitycircusDan_reflection_;
  delete activitymathrule::default_instance_;
  delete activitymathrule_reflection_;
  delete Sheet_activitymathrule::default_instance_;
  delete Sheet_activitymathrule_reflection_;
  delete activitymathrewardrewardDesc::default_instance_;
  delete activitymathrewardrewardDesc_reflection_;
  delete activitymathreward::default_instance_;
  delete activitymathreward_reflection_;
  delete Sheet_activitymathreward::default_instance_;
  delete Sheet_activitymathreward_reflection_;
  delete activitygvgConst::default_instance_;
  delete activitygvgConst_reflection_;
  delete Sheet_activitygvgConst::default_instance_;
  delete Sheet_activitygvgConst_reflection_;
  delete activitygvgRankRewardgMemberrewardDesc::default_instance_;
  delete activitygvgRankRewardgMemberrewardDesc_reflection_;
  delete activitygvgRankRewardgLeaderrewardDesc::default_instance_;
  delete activitygvgRankRewardgLeaderrewardDesc_reflection_;
  delete activitygvgRankReward::default_instance_;
  delete activitygvgRankReward_reflection_;
  delete Sheet_activitygvgRankReward::default_instance_;
  delete Sheet_activitygvgRankReward_reflection_;
  delete activitygvgRewardrewardDesc::default_instance_;
  delete activitygvgRewardrewardDesc_reflection_;
  delete activitygvgRewardfinalityDesc::default_instance_;
  delete activitygvgRewardfinalityDesc_reflection_;
  delete activitygvgReward::default_instance_;
  delete activitygvgReward_reflection_;
  delete Sheet_activitygvgReward::default_instance_;
  delete Sheet_activitygvgReward_reflection_;
  delete activityworldTreasureConst::default_instance_;
  delete activityworldTreasureConst_reflection_;
  delete Sheet_activityworldTreasureConst::default_instance_;
  delete Sheet_activityworldTreasureConst_reflection_;
  delete activityworldTreasureMap::default_instance_;
  delete activityworldTreasureMap_reflection_;
  delete Sheet_activityworldTreasureMap::default_instance_;
  delete Sheet_activityworldTreasureMap_reflection_;
  delete activityworldTreasureMonster::default_instance_;
  delete activityworldTreasureMonster_reflection_;
  delete Sheet_activityworldTreasureMonster::default_instance_;
  delete Sheet_activityworldTreasureMonster_reflection_;
  delete activitylosttempleConstant::default_instance_;
  delete activitylosttempleConstant_reflection_;
  delete Sheet_activitylosttempleConstant::default_instance_;
  delete Sheet_activitylosttempleConstant_reflection_;
}

void protobuf_AddDesc_activity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016activity.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\"\253\006\n\ractivitydaily\022\036\n\010activeId\030"
    "\001 \001(\003B\014\302\377\024\010\346\264\273\345\212\250ID\022(\n\nactiveName\030\002 \001(\tB"
    "\024\302\377\024\014\346\264\273\345\212\250\345\220\215\347\247\260\220\301\024<\022\034\n\006typeId\030\003 \001(\005B\014\302"
    "\377\024\010\347\261\273\345\236\213ID\022)\n\017Descriptiontype\030\004 \001(\005B\020\302\377"
    "\024\014\345\274\200\345\220\257\346\235\241\344\273\266\022\"\n\010typeArgs\030\005 \001(\003B\020\302\377\024\014\347\261"
    "\273\345\236\213\345\217\202\346\225\260\022)\n\ninvolveMap\030\006 \001(\tB\025\302\377\024\014\346\266\211\345"
    "\217\212\345\234\260\345\233\276\220\301\024\214\001\022.\n\010minlevel\030\007 \001(\005B\034\302\377\024\030\345\217\202"
    "\344\270\216\346\264\273\345\212\250\347\255\211\347\272\247\344\270\213\351\231\220\022\'\n\topenCycle\030\010 \001(\t"
    "B\024\302\377\024\014\345\274\200\345\220\257\346\227\245\346\234\237\220\301\024<\022&\n\010openTime\030\t \001(\t"
    "B\024\302\377\024\014\345\274\200\345\220\257\346\227\266\351\227\264\220\301\024<\022&\n\010pushTime\030\n \001(\t"
    "B\024\302\377\024\014\346\216\250\351\200\201\346\227\266\351\227\264\220\301\024<\022%\n\013openingTime\030\013 "
    "\001(\005B\020\302\377\024\014\345\274\200\345\220\257\346\227\266\351\225\277\022+\n\013advanceTime\030\014 \001"
    "(\005B\026\302\377\024\022\346\217\220\345\211\215\345\271\277\346\222\255\346\227\266\351\227\264\022&\n\014intervalTi"
    "me\030\r \001(\005B\020\302\377\024\014\345\271\277\346\222\255\351\227\264\351\232\224\022$\n\006opeDay\030\016 \001"
    "(\tB\024\302\377\024\014\345\274\200\346\224\276\346\227\245\346\234\237\220\301\024<\022&\n\010closeDay\030\017 \001"
    "(\tB\024\302\377\024\014\345\205\263\351\227\255\346\227\245\346\234\237\220\301\024<\022!\n\007isCross\030\020 \001("
    "\005B\020\302\377\024\014\346\230\257\345\220\246\350\267\250\346\234\215\0223\n\nserverTime\030\021 \001(\005B"
    "\037\302\377\024\033\345\274\200\346\234\215\345\220\216\345\244\232\345\260\221\346\264\273\345\212\250\347\273\223\346\235\237\022;\n\017serv"
    "erdelayTime\030\022 \001(\005B\"\302\377\024\036\345\274\200\346\234\215\345\220\216\345\244\232\345\260\221\345\244"
    "\251\346\264\273\345\212\250\345\274\200\345\220\257\0220\n\020forwordEnterTime\030\023 \001(\005B"
    "\026\302\377\024\022\346\217\220\345\211\215\345\205\245\345\234\272\346\227\266\351\227\264\"P\n\023Sheet_activit"
    "ydaily\0229\n\022activitydaily_List\030\001 \003(\0132\027.pro"
    "to_ff.activitydailyB\004\210\301\024\024\"8\n\026activityact"
    "ivitynotice\022\036\n\010activeId\030\001 \001(\003B\014\302\377\024\010\346\264\273\345\212"
    "\250ID\"k\n\034Sheet_activityactivitynotice\022K\n\033a"
    "ctivityactivitynotice_List\030\001 \003(\0132 .proto"
    "_ff.activityactivitynoticeB\004\210\301\024\024\"H\n\031acti"
    "vityscufflerewardDesc\022\027\n\003Num\030\001 \001(\003B\n\302\377\024\006"
    "\346\225\260\351\207\217\022\022\n\002ID\030\002 \001(\003B\006\302\377\024\002ID\"\221\003\n\017activitys"
    "cuffle\022\022\n\002id\030\001 \001(\003B\006\302\377\024\002id\022\"\n\010typeArgs\030\002"
    " \001(\005B\020\302\377\024\014\347\261\273\345\236\213\345\217\202\346\225\260\022\031\n\005level\030\003 \001(\005B\n\302"
    "\377\024\006\345\261\202\346\225\260\022\031\n\005stage\030\004 \001(\005B\n\302\377\024\006\351\230\266\346\225\260\022\033\n\005"
    "mapID\030\005 \001(\003B\014\302\377\024\010\345\234\272\346\231\257ID\022\034\n\006nextID\030\006 \001("
    "\003B\014\302\377\024\010\344\270\213\344\270\200ID\022\035\n\tmaxPoints\030\007 \001(\005B\n\302\377\024\006"
    "\347\247\257\345\210\206\022#\n\tpvePoints\030\010 \001(\005B\020\302\377\024\014\346\235\200\346\200\252\347\247\257"
    "\345\210\206\022#\n\tpvpPoints\030\t \001(\005B\020\302\377\024\014\346\235\200\344\272\272\347\247\257\345\210\206"
    "\022\'\n\rpvpHelpPoints\030\n \001(\005B\020\302\377\024\014\345\212\251\346\224\273\347\247\257\345\210"
    "\206\022C\n\006reward\030\013 \003(\0132#.proto_ff.activityscu"
    "fflerewardDescB\016\302\377\024\006\345\245\226\345\212\261\210\301\024\003\"V\n\025Sheet_"
    "activityscuffle\022=\n\024activityscuffle_List\030"
    "\001 \003(\0132\031.proto_ff.activityscuffleB\004\210\301\024\024\"M"
    "\n\036activitychaosDragonsrewardDesc\022\027\n\003Num\030"
    "\001 \001(\003B\n\302\377\024\006\346\225\260\351\207\217\022\022\n\002ID\030\002 \001(\003B\006\302\377\024\002ID\"\271\002"
    "\n\024activitychaosDragons\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002"
    "id\022%\n\013reward_type\030\002 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\347\261\273\345\236"
    "\213\022,\n\014reward_param\030\003 \001(\005B\026\302\377\024\022\345\245\226\345\212\261\347\261\273\345\236"
    "\213\345\217\202\346\225\260\022$\n\007rankmin\030\004 \001(\005B\023\302\377\024\017\346\216\222\345\220\215\346\234\200\345"
    "\260\217\345\200\274\022$\n\007rankmax\030\005 \001(\005B\023\302\377\024\017\346\216\222\345\220\215\346\234\200\345\244\247"
    "\345\200\274\022\"\n\010getPoint\030\006 \001(\003B\020\302\377\024\014\350\216\267\345\276\227\347\247\257\345\210\206\022"
    "H\n\006reward\030\007 \003(\0132(.proto_ff.activitychaos"
    "DragonsrewardDescB\016\302\377\024\006\345\245\226\345\212\261\210\301\024\003\"e\n\032She"
    "et_activitychaosDragons\022G\n\031activitychaos"
    "Dragons_List\030\001 \003(\0132\036.proto_ff.activitych"
    "aosDragonsB\004\210\301\024\024\"\307\001\n\016activitycircus\022\036\n\010c"
    "ircusID\030\001 \001(\003B\014\302\377\024\010\345\214\272\351\227\264ID\022\"\n\010powerLow\030"
    "\002 \001(\003B\020\302\377\024\014\346\210\230\345\212\233\344\270\213\351\231\220\022!\n\007powerUp\030\003 \001(\003"
    "B\020\302\377\024\014\346\210\230\345\212\233\344\270\212\351\231\220\022&\n\010circus_a\030\004 \003(\005B\024\302\377"
    "\024\014\345\234\272\346\254\241\344\272\272\346\225\260\210\301\024 \022&\n\010circus_b\030\005 \003(\003B\024\302\377"
    "\024\014\346\210\230\345\212\233\347\274\251\346\224\276\210\301\024 \"S\n\024Sheet_activitycirc"
    "us\022;\n\023activitycircus_List\030\001 \003(\0132\030.proto_"
    "ff.activitycircusB\004\210\301\024(\"H\n\031activitycircu"
    "sNumitemDesc\022\027\n\003Num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\022\n"
    "\002Id\030\002 \001(\003B\006\302\377\024\002ID\"t\n\021activitycircusNum\022\034"
    "\n\006RankID\030\001 \001(\005B\014\302\377\024\010\346\216\222\345\220\215id\022A\n\004item\030\002 \003"
    "(\0132#.proto_ff.activitycircusNumitemDescB"
    "\016\302\377\024\006\345\245\226\345\212\261\210\301\024\003\"]\n\027Sheet_activitycircusN"
    "um\022B\n\026activitycircusNum_List\030\001 \003(\0132\033.pro"
    "to_ff.activitycircusNumB\005\210\301\024\310\001\"H\n\031activi"
    "tycircusDanitemDesc\022\027\n\003Num\030\001 \001(\005B\n\302\377\024\006\346\225"
    "\260\351\207\217\022\022\n\002Id\030\002 \001(\003B\006\302\377\024\002ID\"J\n\033activitycirc"
    "usDancircusDesc\022\027\n\003Num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217"
    "\022\022\n\002Id\030\002 \001(\003B\006\302\377\024\002ID\"\312\001\n\021activitycircusD"
    "an\022\037\n\tchangCiID\030\001 \001(\005B\014\302\377\024\010\345\234\272\346\254\241id\022G\n\004i"
    "tem\030\002 \003(\0132#.proto_ff.activitycircusDanit"
    "emDescB\024\302\377\024\014\350\203\234\345\210\251\345\245\226\345\212\261\210\301\024\003\022K\n\006circus\030\003"
    " \003(\0132%.proto_ff.activitycircusDancircusD"
    "escB\024\302\377\024\014\345\244\261\350\264\245\345\245\226\345\212\261\210\301\024\003\"\\\n\027Sheet_activ"
    "itycircusDan\022A\n\026activitycircusDan_List\030\001"
    " \003(\0132\033.proto_ff.activitycircusDanB\004\210\301\024<\""
    "\315\002\n\020activitymathrule\022\036\n\010activeId\030\001 \001(\003B\014"
    "\302\377\024\010\347\264\242\345\274\225ID\022\036\n\004type\030\002 \001(\005B\020\302\377\024\014\351\230\266\346\256\265\347\261"
    "\273\345\236\213\022\033\n\005mapId\030\003 \001(\003B\014\302\377\024\010\345\234\260\345\233\276ID\022!\n\013dup"
    "licateId\030\004 \001(\003B\014\302\377\024\010\345\211\257\346\234\254ID\022\036\n\004time\030\005 \001"
    "(\005B\020\302\377\024\014\346\214\201\347\273\255\346\227\266\351\227\264\022&\n\014winnerPoints\030\006 \001"
    "(\005B\020\302\377\024\014\350\203\234\345\210\251\347\247\257\345\210\206\022%\n\013loserPoints\030\007 \001("
    "\005B\020\302\377\024\014\345\244\261\350\264\245\347\247\257\345\210\206\022$\n\ndrawPoints\030\010 \001(\005B"
    "\020\302\377\024\014\345\271\263\345\261\200\347\247\257\345\210\206\022$\n\nrewardtype\030\t \001(\005B\020\302"
    "\377\024\014\345\245\226\345\212\261\347\261\273\345\210\253\"Y\n\026Sheet_activitymathrul"
    "e\022\?\n\025activitymathrule_List\030\001 \003(\0132\032.proto"
    "_ff.activitymathruleB\004\210\301\024(\"7\n\034activityma"
    "threwardrewardDesc\022\027\n\003Num\030\001 \001(\005B\n\302\377\024\006\346\225\260"
    "\351\207\217\"\360\001\n\022activitymathreward\022\034\n\002ID\030\001 \001(\005B\020"
    "\302\377\024\014\347\264\242\345\274\225\347\274\226\345\217\267\022$\n\nrewardtype\030\002 \001(\005B\020\302\377"
    "\024\014\345\245\226\345\212\261\347\261\273\345\210\253\022+\n\013rewardlevel\030\003 \001(\005B\026\302\377\024"
    "\022\345\245\226\345\212\261\347\247\257\345\210\206\346\241\243\346\254\241\022F\n\006reward\030\004 \003(\0132&.pr"
    "oto_ff.activitymathrewardrewardDescB\016\302\377\024"
    "\006\345\245\226\345\212\261\210\301\024\005\022!\n\treward_ID\030\005 \003(\003B\016\302\377\024\006\345\245\226\345"
    "\212\261\210\301\024\005\"_\n\030Sheet_activitymathreward\022C\n\027ac"
    "tivitymathreward_List\030\001 \003(\0132\034.proto_ff.a"
    "ctivitymathrewardB\004\210\301\024\024\"u\n\020activitygvgCo"
    "nst\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022 \n\014constantdata\030"
    "\002 \001(\003B\n\302\377\024\006\346\225\260\346\215\256\022+\n\nstringdata\030\003 \001(\tB\027\302"
    "\377\024\017\345\255\227\347\254\246\344\270\262\346\225\260\346\215\256\220\301\024d\"Z\n\026Sheet_activity"
    "gvgConst\022@\n\025activitygvgConst_List\030\001 \003(\0132"
    "\032.proto_ff.activitygvgConstB\005\210\301\024\240\001\"U\n&ac"
    "tivitygvgRankRewardgMemberrewardDesc\022\027\n\003"
    "Num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\022\n\002id\030\002 \001(\003B\006\302\377\024\002I"
    "D\"U\n&activitygvgRankRewardgLeaderrewardD"
    "esc\022\027\n\003Num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\022\n\002id\030\002 \001(\003"
    "B\006\302\377\024\002ID\"\224\002\n\025activitygvgRankReward\022\022\n\002id"
    "\030\001 \001(\005B\006\302\377\024\002id\022)\n\tgLeaderId\030\002 \001(\003B\026\302\377\024\022\344"
    "\274\232\351\225\277\345\245\226\345\212\261\347\247\260\345\217\267\022]\n\rgMemberreward\030\003 \003(\013"
    "20.proto_ff.activitygvgRankRewardgMember"
    "rewardDescB\024\302\377\024\014\347\211\251\345\223\201\345\245\226\345\212\261\210\301\024\004\022]\n\rgLea"
    "derreward\030\004 \003(\01320.proto_ff.activitygvgRa"
    "nkRewardgLeaderrewardDescB\024\302\377\024\014\347\211\251\345\223\201\345\245\226"
    "\345\212\261\210\301\024\002\"h\n\033Sheet_activitygvgRankReward\022I"
    "\n\032activitygvgRankReward_List\030\001 \003(\0132\037.pro"
    "to_ff.activitygvgRankRewardB\004\210\301\024\024\"6\n\033act"
    "ivitygvgRewardrewardDesc\022\027\n\003Num\030\001 \001(\005B\n\302"
    "\377\024\006\346\225\260\351\207\217\"8\n\035activitygvgRewardfinalityDe"
    "sc\022\027\n\003Num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\"\264\002\n\021activity"
    "gvgReward\022\034\n\002id\030\001 \001(\005B\020\302\377\024\014\350\277\236\350\203\234\346\254\241\346\225\260\022"
    "\'\n\rfinalityskill\030\002 \001(\003B\020\302\377\024\014\347\273\210\347\273\223\346\212\200\350\203\275"
    "\022E\n\006reward\030\003 \003(\0132%.proto_ff.activitygvgR"
    "ewardrewardDescB\016\302\377\024\006\347\211\251\345\223\201\210\301\024\005\022I\n\010final"
    "ity\030\004 \003(\0132\'.proto_ff.activitygvgRewardfi"
    "nalityDescB\016\302\377\024\006\347\211\251\345\223\201\210\301\024\005\022!\n\treward_id\030"
    "\005 \003(\003B\016\302\377\024\006\347\211\251\345\223\201\210\301\024\005\022#\n\013finality_id\030\006 \003"
    "(\003B\016\302\377\024\006\347\211\251\345\223\201\210\301\024\005\"]\n\027Sheet_activitygvgR"
    "eward\022B\n\026activitygvgReward_List\030\001 \003(\0132\033."
    "proto_ff.activitygvgRewardB\005\210\301\024\264\001\"R\n\032act"
    "ivityworldTreasureConst\022\022\n\002id\030\001 \001(\005B\006\302\377\024"
    "\002id\022 \n\014constantdata\030\002 \001(\003B\n\302\377\024\006\346\225\260\346\215\256\"w\n"
    " Sheet_activityworldTreasureConst\022S\n\037act"
    "ivityworldTreasureConst_List\030\001 \003(\0132$.pro"
    "to_ff.activityworldTreasureConstB\004\210\301\024\024\"["
    "\n\030activityworldTreasureMap\022\033\n\005mapID\030\001 \001("
    "\003B\014\302\377\024\010\345\234\260\345\233\276ID\022\"\n\006pathID\030\002 \001(\tB\022\302\377\024\t\345\210\267"
    "\346\200\252\347\202\271\220\301\024\330\004\"q\n\036Sheet_activityworldTreasu"
    "reMap\022O\n\035activityworldTreasureMap_List\030\001"
    " \003(\0132\".proto_ff.activityworldTreasureMap"
    "B\004\210\301\024\024\"\234\001\n\034activityworldTreasureMonster\022"
    "\022\n\002ID\030\001 \001(\005B\006\302\377\024\002ID\022\037\n\tmonsterID\030\002 \001(\003B\014"
    "\302\377\024\010\346\200\252\347\211\251ID\022&\n\014appearWeight\030\003 \001(\005B\020\302\377\024\014"
    "\345\210\267\346\226\260\346\235\203\351\207\215\022\037\n\007skillId\030\004 \001(\003B\016\302\377\024\n\351\231\204\345\270"
    "\246BUFF\"}\n\"Sheet_activityworldTreasureMons"
    "ter\022W\n!activityworldTreasureMonster_List"
    "\030\001 \003(\0132&.proto_ff.activityworldTreasureM"
    "onsterB\004\210\301\024\024\"\177\n\032activitylosttempleConsta"
    "nt\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002ID\022 \n\014constantdata\030\002"
    " \001(\003B\n\302\377\024\006\346\225\260\346\215\256\022+\n\nstringdata\030\003 \001(\tB\027\302\377"
    "\024\017\345\255\227\347\254\246\344\270\262\346\225\260\346\215\256\220\301\024<\"w\n Sheet_activityl"
    "osttempleConstant\022S\n\037activitylosttempleC"
    "onstant_List\030\001 \003(\0132$.proto_ff.activitylo"
    "sttempleConstantB\004\210\301\024\024", 6262);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "activity.proto", &protobuf_RegisterTypes);
  activitydaily::default_instance_ = new activitydaily();
  Sheet_activitydaily::default_instance_ = new Sheet_activitydaily();
  activityactivitynotice::default_instance_ = new activityactivitynotice();
  Sheet_activityactivitynotice::default_instance_ = new Sheet_activityactivitynotice();
  activityscufflerewardDesc::default_instance_ = new activityscufflerewardDesc();
  activityscuffle::default_instance_ = new activityscuffle();
  Sheet_activityscuffle::default_instance_ = new Sheet_activityscuffle();
  activitychaosDragonsrewardDesc::default_instance_ = new activitychaosDragonsrewardDesc();
  activitychaosDragons::default_instance_ = new activitychaosDragons();
  Sheet_activitychaosDragons::default_instance_ = new Sheet_activitychaosDragons();
  activitycircus::default_instance_ = new activitycircus();
  Sheet_activitycircus::default_instance_ = new Sheet_activitycircus();
  activitycircusNumitemDesc::default_instance_ = new activitycircusNumitemDesc();
  activitycircusNum::default_instance_ = new activitycircusNum();
  Sheet_activitycircusNum::default_instance_ = new Sheet_activitycircusNum();
  activitycircusDanitemDesc::default_instance_ = new activitycircusDanitemDesc();
  activitycircusDancircusDesc::default_instance_ = new activitycircusDancircusDesc();
  activitycircusDan::default_instance_ = new activitycircusDan();
  Sheet_activitycircusDan::default_instance_ = new Sheet_activitycircusDan();
  activitymathrule::default_instance_ = new activitymathrule();
  Sheet_activitymathrule::default_instance_ = new Sheet_activitymathrule();
  activitymathrewardrewardDesc::default_instance_ = new activitymathrewardrewardDesc();
  activitymathreward::default_instance_ = new activitymathreward();
  Sheet_activitymathreward::default_instance_ = new Sheet_activitymathreward();
  activitygvgConst::default_instance_ = new activitygvgConst();
  Sheet_activitygvgConst::default_instance_ = new Sheet_activitygvgConst();
  activitygvgRankRewardgMemberrewardDesc::default_instance_ = new activitygvgRankRewardgMemberrewardDesc();
  activitygvgRankRewardgLeaderrewardDesc::default_instance_ = new activitygvgRankRewardgLeaderrewardDesc();
  activitygvgRankReward::default_instance_ = new activitygvgRankReward();
  Sheet_activitygvgRankReward::default_instance_ = new Sheet_activitygvgRankReward();
  activitygvgRewardrewardDesc::default_instance_ = new activitygvgRewardrewardDesc();
  activitygvgRewardfinalityDesc::default_instance_ = new activitygvgRewardfinalityDesc();
  activitygvgReward::default_instance_ = new activitygvgReward();
  Sheet_activitygvgReward::default_instance_ = new Sheet_activitygvgReward();
  activityworldTreasureConst::default_instance_ = new activityworldTreasureConst();
  Sheet_activityworldTreasureConst::default_instance_ = new Sheet_activityworldTreasureConst();
  activityworldTreasureMap::default_instance_ = new activityworldTreasureMap();
  Sheet_activityworldTreasureMap::default_instance_ = new Sheet_activityworldTreasureMap();
  activityworldTreasureMonster::default_instance_ = new activityworldTreasureMonster();
  Sheet_activityworldTreasureMonster::default_instance_ = new Sheet_activityworldTreasureMonster();
  activitylosttempleConstant::default_instance_ = new activitylosttempleConstant();
  Sheet_activitylosttempleConstant::default_instance_ = new Sheet_activitylosttempleConstant();
  activitydaily::default_instance_->InitAsDefaultInstance();
  Sheet_activitydaily::default_instance_->InitAsDefaultInstance();
  activityactivitynotice::default_instance_->InitAsDefaultInstance();
  Sheet_activityactivitynotice::default_instance_->InitAsDefaultInstance();
  activityscufflerewardDesc::default_instance_->InitAsDefaultInstance();
  activityscuffle::default_instance_->InitAsDefaultInstance();
  Sheet_activityscuffle::default_instance_->InitAsDefaultInstance();
  activitychaosDragonsrewardDesc::default_instance_->InitAsDefaultInstance();
  activitychaosDragons::default_instance_->InitAsDefaultInstance();
  Sheet_activitychaosDragons::default_instance_->InitAsDefaultInstance();
  activitycircus::default_instance_->InitAsDefaultInstance();
  Sheet_activitycircus::default_instance_->InitAsDefaultInstance();
  activitycircusNumitemDesc::default_instance_->InitAsDefaultInstance();
  activitycircusNum::default_instance_->InitAsDefaultInstance();
  Sheet_activitycircusNum::default_instance_->InitAsDefaultInstance();
  activitycircusDanitemDesc::default_instance_->InitAsDefaultInstance();
  activitycircusDancircusDesc::default_instance_->InitAsDefaultInstance();
  activitycircusDan::default_instance_->InitAsDefaultInstance();
  Sheet_activitycircusDan::default_instance_->InitAsDefaultInstance();
  activitymathrule::default_instance_->InitAsDefaultInstance();
  Sheet_activitymathrule::default_instance_->InitAsDefaultInstance();
  activitymathrewardrewardDesc::default_instance_->InitAsDefaultInstance();
  activitymathreward::default_instance_->InitAsDefaultInstance();
  Sheet_activitymathreward::default_instance_->InitAsDefaultInstance();
  activitygvgConst::default_instance_->InitAsDefaultInstance();
  Sheet_activitygvgConst::default_instance_->InitAsDefaultInstance();
  activitygvgRankRewardgMemberrewardDesc::default_instance_->InitAsDefaultInstance();
  activitygvgRankRewardgLeaderrewardDesc::default_instance_->InitAsDefaultInstance();
  activitygvgRankReward::default_instance_->InitAsDefaultInstance();
  Sheet_activitygvgRankReward::default_instance_->InitAsDefaultInstance();
  activitygvgRewardrewardDesc::default_instance_->InitAsDefaultInstance();
  activitygvgRewardfinalityDesc::default_instance_->InitAsDefaultInstance();
  activitygvgReward::default_instance_->InitAsDefaultInstance();
  Sheet_activitygvgReward::default_instance_->InitAsDefaultInstance();
  activityworldTreasureConst::default_instance_->InitAsDefaultInstance();
  Sheet_activityworldTreasureConst::default_instance_->InitAsDefaultInstance();
  activityworldTreasureMap::default_instance_->InitAsDefaultInstance();
  Sheet_activityworldTreasureMap::default_instance_->InitAsDefaultInstance();
  activityworldTreasureMonster::default_instance_->InitAsDefaultInstance();
  Sheet_activityworldTreasureMonster::default_instance_->InitAsDefaultInstance();
  activitylosttempleConstant::default_instance_->InitAsDefaultInstance();
  Sheet_activitylosttempleConstant::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_activity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_activity_2eproto {
  StaticDescriptorInitializer_activity_2eproto() {
    protobuf_AddDesc_activity_2eproto();
  }
} static_descriptor_initializer_activity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int activitydaily::kActiveIdFieldNumber;
const int activitydaily::kActiveNameFieldNumber;
const int activitydaily::kTypeIdFieldNumber;
const int activitydaily::kDescriptiontypeFieldNumber;
const int activitydaily::kTypeArgsFieldNumber;
const int activitydaily::kInvolveMapFieldNumber;
const int activitydaily::kMinlevelFieldNumber;
const int activitydaily::kOpenCycleFieldNumber;
const int activitydaily::kOpenTimeFieldNumber;
const int activitydaily::kPushTimeFieldNumber;
const int activitydaily::kOpeningTimeFieldNumber;
const int activitydaily::kAdvanceTimeFieldNumber;
const int activitydaily::kIntervalTimeFieldNumber;
const int activitydaily::kOpeDayFieldNumber;
const int activitydaily::kCloseDayFieldNumber;
const int activitydaily::kIsCrossFieldNumber;
const int activitydaily::kServerTimeFieldNumber;
const int activitydaily::kServerdelayTimeFieldNumber;
const int activitydaily::kForwordEnterTimeFieldNumber;
#endif  // !_MSC_VER

activitydaily::activitydaily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitydaily::InitAsDefaultInstance() {
}

activitydaily::activitydaily(const activitydaily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitydaily::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_LONGLONG(0);
  activename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  typeid__ = 0;
  descriptiontype_ = 0;
  typeargs_ = GOOGLE_LONGLONG(0);
  involvemap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minlevel_ = 0;
  opencycle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pushtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openingtime_ = 0;
  advancetime_ = 0;
  intervaltime_ = 0;
  opeday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  closeday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iscross_ = 0;
  servertime_ = 0;
  serverdelaytime_ = 0;
  forwordentertime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitydaily::~activitydaily() {
  SharedDtor();
}

void activitydaily::SharedDtor() {
  if (activename_ != &::google::protobuf::internal::kEmptyString) {
    delete activename_;
  }
  if (involvemap_ != &::google::protobuf::internal::kEmptyString) {
    delete involvemap_;
  }
  if (opencycle_ != &::google::protobuf::internal::kEmptyString) {
    delete opencycle_;
  }
  if (opentime_ != &::google::protobuf::internal::kEmptyString) {
    delete opentime_;
  }
  if (pushtime_ != &::google::protobuf::internal::kEmptyString) {
    delete pushtime_;
  }
  if (opeday_ != &::google::protobuf::internal::kEmptyString) {
    delete opeday_;
  }
  if (closeday_ != &::google::protobuf::internal::kEmptyString) {
    delete closeday_;
  }
  if (this != default_instance_) {
  }
}

void activitydaily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitydaily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitydaily_descriptor_;
}

const activitydaily& activitydaily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitydaily* activitydaily::default_instance_ = NULL;

activitydaily* activitydaily::New() const {
  return new activitydaily;
}

void activitydaily::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_LONGLONG(0);
    if (has_activename()) {
      if (activename_ != &::google::protobuf::internal::kEmptyString) {
        activename_->clear();
      }
    }
    typeid__ = 0;
    descriptiontype_ = 0;
    typeargs_ = GOOGLE_LONGLONG(0);
    if (has_involvemap()) {
      if (involvemap_ != &::google::protobuf::internal::kEmptyString) {
        involvemap_->clear();
      }
    }
    minlevel_ = 0;
    if (has_opencycle()) {
      if (opencycle_ != &::google::protobuf::internal::kEmptyString) {
        opencycle_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_opentime()) {
      if (opentime_ != &::google::protobuf::internal::kEmptyString) {
        opentime_->clear();
      }
    }
    if (has_pushtime()) {
      if (pushtime_ != &::google::protobuf::internal::kEmptyString) {
        pushtime_->clear();
      }
    }
    openingtime_ = 0;
    advancetime_ = 0;
    intervaltime_ = 0;
    if (has_opeday()) {
      if (opeday_ != &::google::protobuf::internal::kEmptyString) {
        opeday_->clear();
      }
    }
    if (has_closeday()) {
      if (closeday_ != &::google::protobuf::internal::kEmptyString) {
        closeday_->clear();
      }
    }
    iscross_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    servertime_ = 0;
    serverdelaytime_ = 0;
    forwordentertime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitydaily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_activeName;
        break;
      }

      // optional string activeName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activename().data(), this->activename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_typeId;
        break;
      }

      // optional int32 typeId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_typeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Descriptiontype;
        break;
      }

      // optional int32 Descriptiontype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Descriptiontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &descriptiontype_)));
          set_has_descriptiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_typeArgs;
        break;
      }

      // optional int64 typeArgs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_typeArgs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &typeargs_)));
          set_has_typeargs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_involveMap;
        break;
      }

      // optional string involveMap = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_involveMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_involvemap()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->involvemap().data(), this->involvemap().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_minlevel;
        break;
      }

      // optional int32 minlevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlevel_)));
          set_has_minlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_openCycle;
        break;
      }

      // optional string openCycle = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openCycle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opencycle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opencycle().data(), this->opencycle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_openTime;
        break;
      }

      // optional string openTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opentime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opentime().data(), this->opentime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_pushTime;
        break;
      }

      // optional string pushTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pushTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pushtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pushtime().data(), this->pushtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_openingTime;
        break;
      }

      // optional int32 openingTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openingtime_)));
          set_has_openingtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_advanceTime;
        break;
      }

      // optional int32 advanceTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advanceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advancetime_)));
          set_has_advancetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_intervalTime;
        break;
      }

      // optional int32 intervalTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intervalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intervaltime_)));
          set_has_intervaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_opeDay;
        break;
      }

      // optional string opeDay = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opeDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opeday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opeday().data(), this->opeday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_closeDay;
        break;
      }

      // optional string closeDay = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closeDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_closeday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->closeday().data(), this->closeday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_isCross;
        break;
      }

      // optional int32 isCross = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCross:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscross_)));
          set_has_iscross();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_serverTime;
        break;
      }

      // optional int32 serverTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_serverdelayTime;
        break;
      }

      // optional int32 serverdelayTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverdelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverdelaytime_)));
          set_has_serverdelaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_forwordEnterTime;
        break;
      }

      // optional int32 forwordEnterTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forwordEnterTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forwordentertime_)));
          set_has_forwordentertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitydaily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->activeid(), output);
  }

  // optional string activeName = 2;
  if (has_activename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activename().data(), this->activename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->activename(), output);
  }

  // optional int32 typeId = 3;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typeid_(), output);
  }

  // optional int32 Descriptiontype = 4;
  if (has_descriptiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->descriptiontype(), output);
  }

  // optional int64 typeArgs = 5;
  if (has_typeargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->typeargs(), output);
  }

  // optional string involveMap = 6;
  if (has_involvemap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->involvemap().data(), this->involvemap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->involvemap(), output);
  }

  // optional int32 minlevel = 7;
  if (has_minlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->minlevel(), output);
  }

  // optional string openCycle = 8;
  if (has_opencycle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opencycle().data(), this->opencycle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->opencycle(), output);
  }

  // optional string openTime = 9;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opentime().data(), this->opentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->opentime(), output);
  }

  // optional string pushTime = 10;
  if (has_pushtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pushtime().data(), this->pushtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->pushtime(), output);
  }

  // optional int32 openingTime = 11;
  if (has_openingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->openingtime(), output);
  }

  // optional int32 advanceTime = 12;
  if (has_advancetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->advancetime(), output);
  }

  // optional int32 intervalTime = 13;
  if (has_intervaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->intervaltime(), output);
  }

  // optional string opeDay = 14;
  if (has_opeday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opeday().data(), this->opeday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->opeday(), output);
  }

  // optional string closeDay = 15;
  if (has_closeday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->closeday().data(), this->closeday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->closeday(), output);
  }

  // optional int32 isCross = 16;
  if (has_iscross()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->iscross(), output);
  }

  // optional int32 serverTime = 17;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->servertime(), output);
  }

  // optional int32 serverdelayTime = 18;
  if (has_serverdelaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->serverdelaytime(), output);
  }

  // optional int32 forwordEnterTime = 19;
  if (has_forwordentertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->forwordentertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitydaily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->activeid(), target);
  }

  // optional string activeName = 2;
  if (has_activename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activename().data(), this->activename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->activename(), target);
  }

  // optional int32 typeId = 3;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->typeid_(), target);
  }

  // optional int32 Descriptiontype = 4;
  if (has_descriptiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->descriptiontype(), target);
  }

  // optional int64 typeArgs = 5;
  if (has_typeargs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->typeargs(), target);
  }

  // optional string involveMap = 6;
  if (has_involvemap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->involvemap().data(), this->involvemap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->involvemap(), target);
  }

  // optional int32 minlevel = 7;
  if (has_minlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->minlevel(), target);
  }

  // optional string openCycle = 8;
  if (has_opencycle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opencycle().data(), this->opencycle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->opencycle(), target);
  }

  // optional string openTime = 9;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opentime().data(), this->opentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->opentime(), target);
  }

  // optional string pushTime = 10;
  if (has_pushtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pushtime().data(), this->pushtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pushtime(), target);
  }

  // optional int32 openingTime = 11;
  if (has_openingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->openingtime(), target);
  }

  // optional int32 advanceTime = 12;
  if (has_advancetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->advancetime(), target);
  }

  // optional int32 intervalTime = 13;
  if (has_intervaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->intervaltime(), target);
  }

  // optional string opeDay = 14;
  if (has_opeday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opeday().data(), this->opeday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->opeday(), target);
  }

  // optional string closeDay = 15;
  if (has_closeday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->closeday().data(), this->closeday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->closeday(), target);
  }

  // optional int32 isCross = 16;
  if (has_iscross()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->iscross(), target);
  }

  // optional int32 serverTime = 17;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->servertime(), target);
  }

  // optional int32 serverdelayTime = 18;
  if (has_serverdelaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->serverdelaytime(), target);
  }

  // optional int32 forwordEnterTime = 19;
  if (has_forwordentertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->forwordentertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitydaily::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->activeid());
    }

    // optional string activeName = 2;
    if (has_activename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activename());
    }

    // optional int32 typeId = 3;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // optional int32 Descriptiontype = 4;
    if (has_descriptiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->descriptiontype());
    }

    // optional int64 typeArgs = 5;
    if (has_typeargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->typeargs());
    }

    // optional string involveMap = 6;
    if (has_involvemap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->involvemap());
    }

    // optional int32 minlevel = 7;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minlevel());
    }

    // optional string openCycle = 8;
    if (has_opencycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opencycle());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string openTime = 9;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opentime());
    }

    // optional string pushTime = 10;
    if (has_pushtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pushtime());
    }

    // optional int32 openingTime = 11;
    if (has_openingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openingtime());
    }

    // optional int32 advanceTime = 12;
    if (has_advancetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advancetime());
    }

    // optional int32 intervalTime = 13;
    if (has_intervaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intervaltime());
    }

    // optional string opeDay = 14;
    if (has_opeday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opeday());
    }

    // optional string closeDay = 15;
    if (has_closeday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->closeday());
    }

    // optional int32 isCross = 16;
    if (has_iscross()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscross());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 serverTime = 17;
    if (has_servertime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertime());
    }

    // optional int32 serverdelayTime = 18;
    if (has_serverdelaytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverdelaytime());
    }

    // optional int32 forwordEnterTime = 19;
    if (has_forwordentertime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forwordentertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitydaily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitydaily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitydaily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitydaily::MergeFrom(const activitydaily& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_activename()) {
      set_activename(from.activename());
    }
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_descriptiontype()) {
      set_descriptiontype(from.descriptiontype());
    }
    if (from.has_typeargs()) {
      set_typeargs(from.typeargs());
    }
    if (from.has_involvemap()) {
      set_involvemap(from.involvemap());
    }
    if (from.has_minlevel()) {
      set_minlevel(from.minlevel());
    }
    if (from.has_opencycle()) {
      set_opencycle(from.opencycle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_pushtime()) {
      set_pushtime(from.pushtime());
    }
    if (from.has_openingtime()) {
      set_openingtime(from.openingtime());
    }
    if (from.has_advancetime()) {
      set_advancetime(from.advancetime());
    }
    if (from.has_intervaltime()) {
      set_intervaltime(from.intervaltime());
    }
    if (from.has_opeday()) {
      set_opeday(from.opeday());
    }
    if (from.has_closeday()) {
      set_closeday(from.closeday());
    }
    if (from.has_iscross()) {
      set_iscross(from.iscross());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_serverdelaytime()) {
      set_serverdelaytime(from.serverdelaytime());
    }
    if (from.has_forwordentertime()) {
      set_forwordentertime(from.forwordentertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitydaily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitydaily::CopyFrom(const activitydaily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitydaily::IsInitialized() const {

  return true;
}

void activitydaily::Swap(activitydaily* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(activename_, other->activename_);
    std::swap(typeid__, other->typeid__);
    std::swap(descriptiontype_, other->descriptiontype_);
    std::swap(typeargs_, other->typeargs_);
    std::swap(involvemap_, other->involvemap_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(opencycle_, other->opencycle_);
    std::swap(opentime_, other->opentime_);
    std::swap(pushtime_, other->pushtime_);
    std::swap(openingtime_, other->openingtime_);
    std::swap(advancetime_, other->advancetime_);
    std::swap(intervaltime_, other->intervaltime_);
    std::swap(opeday_, other->opeday_);
    std::swap(closeday_, other->closeday_);
    std::swap(iscross_, other->iscross_);
    std::swap(servertime_, other->servertime_);
    std::swap(serverdelaytime_, other->serverdelaytime_);
    std::swap(forwordentertime_, other->forwordentertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitydaily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitydaily_descriptor_;
  metadata.reflection = activitydaily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activitydaily::kActivitydailyListFieldNumber;
#endif  // !_MSC_VER

Sheet_activitydaily::Sheet_activitydaily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activitydaily::InitAsDefaultInstance() {
}

Sheet_activitydaily::Sheet_activitydaily(const Sheet_activitydaily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activitydaily::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activitydaily::~Sheet_activitydaily() {
  SharedDtor();
}

void Sheet_activitydaily::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activitydaily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activitydaily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activitydaily_descriptor_;
}

const Sheet_activitydaily& Sheet_activitydaily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activitydaily* Sheet_activitydaily::default_instance_ = NULL;

Sheet_activitydaily* Sheet_activitydaily::New() const {
  return new Sheet_activitydaily;
}

void Sheet_activitydaily::Clear() {
  activitydaily_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activitydaily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activitydaily activitydaily_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitydaily_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitydaily_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activitydaily_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activitydaily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activitydaily activitydaily_List = 1;
  for (int i = 0; i < this->activitydaily_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activitydaily_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activitydaily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activitydaily activitydaily_List = 1;
  for (int i = 0; i < this->activitydaily_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activitydaily_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activitydaily::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activitydaily activitydaily_List = 1;
  total_size += 1 * this->activitydaily_list_size();
  for (int i = 0; i < this->activitydaily_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitydaily_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activitydaily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activitydaily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activitydaily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activitydaily::MergeFrom(const Sheet_activitydaily& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitydaily_list_.MergeFrom(from.activitydaily_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activitydaily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activitydaily::CopyFrom(const Sheet_activitydaily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activitydaily::IsInitialized() const {

  return true;
}

void Sheet_activitydaily::Swap(Sheet_activitydaily* other) {
  if (other != this) {
    activitydaily_list_.Swap(&other->activitydaily_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activitydaily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activitydaily_descriptor_;
  metadata.reflection = Sheet_activitydaily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activityactivitynotice::kActiveIdFieldNumber;
#endif  // !_MSC_VER

activityactivitynotice::activityactivitynotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activityactivitynotice::InitAsDefaultInstance() {
}

activityactivitynotice::activityactivitynotice(const activityactivitynotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activityactivitynotice::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activityactivitynotice::~activityactivitynotice() {
  SharedDtor();
}

void activityactivitynotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activityactivitynotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activityactivitynotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activityactivitynotice_descriptor_;
}

const activityactivitynotice& activityactivitynotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activityactivitynotice* activityactivitynotice::default_instance_ = NULL;

activityactivitynotice* activityactivitynotice::New() const {
  return new activityactivitynotice;
}

void activityactivitynotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activityactivitynotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activityactivitynotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->activeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activityactivitynotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->activeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activityactivitynotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->activeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activityactivitynotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activityactivitynotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activityactivitynotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activityactivitynotice::MergeFrom(const activityactivitynotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activityactivitynotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activityactivitynotice::CopyFrom(const activityactivitynotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activityactivitynotice::IsInitialized() const {

  return true;
}

void activityactivitynotice::Swap(activityactivitynotice* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activityactivitynotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activityactivitynotice_descriptor_;
  metadata.reflection = activityactivitynotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activityactivitynotice::kActivityactivitynoticeListFieldNumber;
#endif  // !_MSC_VER

Sheet_activityactivitynotice::Sheet_activityactivitynotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activityactivitynotice::InitAsDefaultInstance() {
}

Sheet_activityactivitynotice::Sheet_activityactivitynotice(const Sheet_activityactivitynotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activityactivitynotice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activityactivitynotice::~Sheet_activityactivitynotice() {
  SharedDtor();
}

void Sheet_activityactivitynotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activityactivitynotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activityactivitynotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activityactivitynotice_descriptor_;
}

const Sheet_activityactivitynotice& Sheet_activityactivitynotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activityactivitynotice* Sheet_activityactivitynotice::default_instance_ = NULL;

Sheet_activityactivitynotice* Sheet_activityactivitynotice::New() const {
  return new Sheet_activityactivitynotice;
}

void Sheet_activityactivitynotice::Clear() {
  activityactivitynotice_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activityactivitynotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activityactivitynotice activityactivitynotice_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activityactivitynotice_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activityactivitynotice_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activityactivitynotice_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activityactivitynotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activityactivitynotice activityactivitynotice_List = 1;
  for (int i = 0; i < this->activityactivitynotice_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activityactivitynotice_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activityactivitynotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activityactivitynotice activityactivitynotice_List = 1;
  for (int i = 0; i < this->activityactivitynotice_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activityactivitynotice_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activityactivitynotice::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activityactivitynotice activityactivitynotice_List = 1;
  total_size += 1 * this->activityactivitynotice_list_size();
  for (int i = 0; i < this->activityactivitynotice_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activityactivitynotice_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activityactivitynotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activityactivitynotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activityactivitynotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activityactivitynotice::MergeFrom(const Sheet_activityactivitynotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  activityactivitynotice_list_.MergeFrom(from.activityactivitynotice_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activityactivitynotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activityactivitynotice::CopyFrom(const Sheet_activityactivitynotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activityactivitynotice::IsInitialized() const {

  return true;
}

void Sheet_activityactivitynotice::Swap(Sheet_activityactivitynotice* other) {
  if (other != this) {
    activityactivitynotice_list_.Swap(&other->activityactivitynotice_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activityactivitynotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activityactivitynotice_descriptor_;
  metadata.reflection = Sheet_activityactivitynotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activityscufflerewardDesc::kNumFieldNumber;
const int activityscufflerewardDesc::kIDFieldNumber;
#endif  // !_MSC_VER

activityscufflerewardDesc::activityscufflerewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activityscufflerewardDesc::InitAsDefaultInstance() {
}

activityscufflerewardDesc::activityscufflerewardDesc(const activityscufflerewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activityscufflerewardDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = GOOGLE_LONGLONG(0);
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activityscufflerewardDesc::~activityscufflerewardDesc() {
  SharedDtor();
}

void activityscufflerewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activityscufflerewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activityscufflerewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activityscufflerewardDesc_descriptor_;
}

const activityscufflerewardDesc& activityscufflerewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activityscufflerewardDesc* activityscufflerewardDesc::default_instance_ = NULL;

activityscufflerewardDesc* activityscufflerewardDesc::New() const {
  return new activityscufflerewardDesc;
}

void activityscufflerewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = GOOGLE_LONGLONG(0);
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activityscufflerewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional int64 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activityscufflerewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num(), output);
  }

  // optional int64 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activityscufflerewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->num(), target);
  }

  // optional int64 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activityscufflerewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }

    // optional int64 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activityscufflerewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activityscufflerewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activityscufflerewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activityscufflerewardDesc::MergeFrom(const activityscufflerewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activityscufflerewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activityscufflerewardDesc::CopyFrom(const activityscufflerewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activityscufflerewardDesc::IsInitialized() const {

  return true;
}

void activityscufflerewardDesc::Swap(activityscufflerewardDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activityscufflerewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activityscufflerewardDesc_descriptor_;
  metadata.reflection = activityscufflerewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activityscuffle::kIdFieldNumber;
const int activityscuffle::kTypeArgsFieldNumber;
const int activityscuffle::kLevelFieldNumber;
const int activityscuffle::kStageFieldNumber;
const int activityscuffle::kMapIDFieldNumber;
const int activityscuffle::kNextIDFieldNumber;
const int activityscuffle::kMaxPointsFieldNumber;
const int activityscuffle::kPvePointsFieldNumber;
const int activityscuffle::kPvpPointsFieldNumber;
const int activityscuffle::kPvpHelpPointsFieldNumber;
const int activityscuffle::kRewardFieldNumber;
#endif  // !_MSC_VER

activityscuffle::activityscuffle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activityscuffle::InitAsDefaultInstance() {
}

activityscuffle::activityscuffle(const activityscuffle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activityscuffle::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  typeargs_ = 0;
  level_ = 0;
  stage_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  nextid_ = GOOGLE_LONGLONG(0);
  maxpoints_ = 0;
  pvepoints_ = 0;
  pvppoints_ = 0;
  pvphelppoints_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activityscuffle::~activityscuffle() {
  SharedDtor();
}

void activityscuffle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activityscuffle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activityscuffle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activityscuffle_descriptor_;
}

const activityscuffle& activityscuffle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activityscuffle* activityscuffle::default_instance_ = NULL;

activityscuffle* activityscuffle::New() const {
  return new activityscuffle;
}

void activityscuffle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    typeargs_ = 0;
    level_ = 0;
    stage_ = 0;
    mapid_ = GOOGLE_LONGLONG(0);
    nextid_ = GOOGLE_LONGLONG(0);
    maxpoints_ = 0;
    pvepoints_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pvppoints_ = 0;
    pvphelppoints_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activityscuffle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_typeArgs;
        break;
      }

      // optional int32 typeArgs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_typeArgs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeargs_)));
          set_has_typeargs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stage;
        break;
      }

      // optional int32 stage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mapID;
        break;
      }

      // optional int64 mapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nextID;
        break;
      }

      // optional int64 nextID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nextid_)));
          set_has_nextid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_maxPoints;
        break;
      }

      // optional int32 maxPoints = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpoints_)));
          set_has_maxpoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pvePoints;
        break;
      }

      // optional int32 pvePoints = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvePoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvepoints_)));
          set_has_pvepoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pvpPoints;
        break;
      }

      // optional int32 pvpPoints = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvpPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvppoints_)));
          set_has_pvppoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pvpHelpPoints;
        break;
      }

      // optional int32 pvpHelpPoints = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvpHelpPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvphelppoints_)));
          set_has_pvphelppoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.activityscufflerewardDesc reward = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activityscuffle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 typeArgs = 2;
  if (has_typeargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeargs(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 stage = 4;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stage(), output);
  }

  // optional int64 mapID = 5;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->mapid(), output);
  }

  // optional int64 nextID = 6;
  if (has_nextid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->nextid(), output);
  }

  // optional int32 maxPoints = 7;
  if (has_maxpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxpoints(), output);
  }

  // optional int32 pvePoints = 8;
  if (has_pvepoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pvepoints(), output);
  }

  // optional int32 pvpPoints = 9;
  if (has_pvppoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pvppoints(), output);
  }

  // optional int32 pvpHelpPoints = 10;
  if (has_pvphelppoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pvphelppoints(), output);
  }

  // repeated .proto_ff.activityscufflerewardDesc reward = 11;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activityscuffle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 typeArgs = 2;
  if (has_typeargs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeargs(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 stage = 4;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stage(), target);
  }

  // optional int64 mapID = 5;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->mapid(), target);
  }

  // optional int64 nextID = 6;
  if (has_nextid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->nextid(), target);
  }

  // optional int32 maxPoints = 7;
  if (has_maxpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxpoints(), target);
  }

  // optional int32 pvePoints = 8;
  if (has_pvepoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pvepoints(), target);
  }

  // optional int32 pvpPoints = 9;
  if (has_pvppoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pvppoints(), target);
  }

  // optional int32 pvpHelpPoints = 10;
  if (has_pvphelppoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pvphelppoints(), target);
  }

  // repeated .proto_ff.activityscufflerewardDesc reward = 11;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activityscuffle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 typeArgs = 2;
    if (has_typeargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeargs());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 stage = 4;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional int64 mapID = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int64 nextID = 6;
    if (has_nextid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nextid());
    }

    // optional int32 maxPoints = 7;
    if (has_maxpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxpoints());
    }

    // optional int32 pvePoints = 8;
    if (has_pvepoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvepoints());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pvpPoints = 9;
    if (has_pvppoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvppoints());
    }

    // optional int32 pvpHelpPoints = 10;
    if (has_pvphelppoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvphelppoints());
    }

  }
  // repeated .proto_ff.activityscufflerewardDesc reward = 11;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activityscuffle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activityscuffle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activityscuffle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activityscuffle::MergeFrom(const activityscuffle& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_typeargs()) {
      set_typeargs(from.typeargs());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_nextid()) {
      set_nextid(from.nextid());
    }
    if (from.has_maxpoints()) {
      set_maxpoints(from.maxpoints());
    }
    if (from.has_pvepoints()) {
      set_pvepoints(from.pvepoints());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pvppoints()) {
      set_pvppoints(from.pvppoints());
    }
    if (from.has_pvphelppoints()) {
      set_pvphelppoints(from.pvphelppoints());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activityscuffle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activityscuffle::CopyFrom(const activityscuffle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activityscuffle::IsInitialized() const {

  return true;
}

void activityscuffle::Swap(activityscuffle* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(typeargs_, other->typeargs_);
    std::swap(level_, other->level_);
    std::swap(stage_, other->stage_);
    std::swap(mapid_, other->mapid_);
    std::swap(nextid_, other->nextid_);
    std::swap(maxpoints_, other->maxpoints_);
    std::swap(pvepoints_, other->pvepoints_);
    std::swap(pvppoints_, other->pvppoints_);
    std::swap(pvphelppoints_, other->pvphelppoints_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activityscuffle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activityscuffle_descriptor_;
  metadata.reflection = activityscuffle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activityscuffle::kActivityscuffleListFieldNumber;
#endif  // !_MSC_VER

Sheet_activityscuffle::Sheet_activityscuffle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activityscuffle::InitAsDefaultInstance() {
}

Sheet_activityscuffle::Sheet_activityscuffle(const Sheet_activityscuffle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activityscuffle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activityscuffle::~Sheet_activityscuffle() {
  SharedDtor();
}

void Sheet_activityscuffle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activityscuffle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activityscuffle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activityscuffle_descriptor_;
}

const Sheet_activityscuffle& Sheet_activityscuffle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activityscuffle* Sheet_activityscuffle::default_instance_ = NULL;

Sheet_activityscuffle* Sheet_activityscuffle::New() const {
  return new Sheet_activityscuffle;
}

void Sheet_activityscuffle::Clear() {
  activityscuffle_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activityscuffle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activityscuffle activityscuffle_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activityscuffle_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activityscuffle_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activityscuffle_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activityscuffle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activityscuffle activityscuffle_List = 1;
  for (int i = 0; i < this->activityscuffle_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activityscuffle_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activityscuffle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activityscuffle activityscuffle_List = 1;
  for (int i = 0; i < this->activityscuffle_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activityscuffle_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activityscuffle::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activityscuffle activityscuffle_List = 1;
  total_size += 1 * this->activityscuffle_list_size();
  for (int i = 0; i < this->activityscuffle_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activityscuffle_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activityscuffle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activityscuffle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activityscuffle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activityscuffle::MergeFrom(const Sheet_activityscuffle& from) {
  GOOGLE_CHECK_NE(&from, this);
  activityscuffle_list_.MergeFrom(from.activityscuffle_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activityscuffle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activityscuffle::CopyFrom(const Sheet_activityscuffle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activityscuffle::IsInitialized() const {

  return true;
}

void Sheet_activityscuffle::Swap(Sheet_activityscuffle* other) {
  if (other != this) {
    activityscuffle_list_.Swap(&other->activityscuffle_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activityscuffle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activityscuffle_descriptor_;
  metadata.reflection = Sheet_activityscuffle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitychaosDragonsrewardDesc::kNumFieldNumber;
const int activitychaosDragonsrewardDesc::kIDFieldNumber;
#endif  // !_MSC_VER

activitychaosDragonsrewardDesc::activitychaosDragonsrewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitychaosDragonsrewardDesc::InitAsDefaultInstance() {
}

activitychaosDragonsrewardDesc::activitychaosDragonsrewardDesc(const activitychaosDragonsrewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitychaosDragonsrewardDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = GOOGLE_LONGLONG(0);
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitychaosDragonsrewardDesc::~activitychaosDragonsrewardDesc() {
  SharedDtor();
}

void activitychaosDragonsrewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitychaosDragonsrewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitychaosDragonsrewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitychaosDragonsrewardDesc_descriptor_;
}

const activitychaosDragonsrewardDesc& activitychaosDragonsrewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitychaosDragonsrewardDesc* activitychaosDragonsrewardDesc::default_instance_ = NULL;

activitychaosDragonsrewardDesc* activitychaosDragonsrewardDesc::New() const {
  return new activitychaosDragonsrewardDesc;
}

void activitychaosDragonsrewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = GOOGLE_LONGLONG(0);
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitychaosDragonsrewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional int64 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitychaosDragonsrewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num(), output);
  }

  // optional int64 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitychaosDragonsrewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->num(), target);
  }

  // optional int64 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitychaosDragonsrewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }

    // optional int64 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitychaosDragonsrewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitychaosDragonsrewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitychaosDragonsrewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitychaosDragonsrewardDesc::MergeFrom(const activitychaosDragonsrewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitychaosDragonsrewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitychaosDragonsrewardDesc::CopyFrom(const activitychaosDragonsrewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitychaosDragonsrewardDesc::IsInitialized() const {

  return true;
}

void activitychaosDragonsrewardDesc::Swap(activitychaosDragonsrewardDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitychaosDragonsrewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitychaosDragonsrewardDesc_descriptor_;
  metadata.reflection = activitychaosDragonsrewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitychaosDragons::kIdFieldNumber;
const int activitychaosDragons::kRewardTypeFieldNumber;
const int activitychaosDragons::kRewardParamFieldNumber;
const int activitychaosDragons::kRankminFieldNumber;
const int activitychaosDragons::kRankmaxFieldNumber;
const int activitychaosDragons::kGetPointFieldNumber;
const int activitychaosDragons::kRewardFieldNumber;
#endif  // !_MSC_VER

activitychaosDragons::activitychaosDragons()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitychaosDragons::InitAsDefaultInstance() {
}

activitychaosDragons::activitychaosDragons(const activitychaosDragons& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitychaosDragons::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  reward_type_ = 0;
  reward_param_ = 0;
  rankmin_ = 0;
  rankmax_ = 0;
  getpoint_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitychaosDragons::~activitychaosDragons() {
  SharedDtor();
}

void activitychaosDragons::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitychaosDragons::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitychaosDragons::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitychaosDragons_descriptor_;
}

const activitychaosDragons& activitychaosDragons::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitychaosDragons* activitychaosDragons::default_instance_ = NULL;

activitychaosDragons* activitychaosDragons::New() const {
  return new activitychaosDragons;
}

void activitychaosDragons::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    reward_type_ = 0;
    reward_param_ = 0;
    rankmin_ = 0;
    rankmax_ = 0;
    getpoint_ = GOOGLE_LONGLONG(0);
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitychaosDragons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_type;
        break;
      }

      // optional int32 reward_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_type_)));
          set_has_reward_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_param;
        break;
      }

      // optional int32 reward_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_param_)));
          set_has_reward_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rankmin;
        break;
      }

      // optional int32 rankmin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankmin_)));
          set_has_rankmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rankmax;
        break;
      }

      // optional int32 rankmax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankmax_)));
          set_has_rankmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_getPoint;
        break;
      }

      // optional int64 getPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &getpoint_)));
          set_has_getpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.activitychaosDragonsrewardDesc reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitychaosDragons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 reward_type = 2;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_type(), output);
  }

  // optional int32 reward_param = 3;
  if (has_reward_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_param(), output);
  }

  // optional int32 rankmin = 4;
  if (has_rankmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rankmin(), output);
  }

  // optional int32 rankmax = 5;
  if (has_rankmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rankmax(), output);
  }

  // optional int64 getPoint = 6;
  if (has_getpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->getpoint(), output);
  }

  // repeated .proto_ff.activitychaosDragonsrewardDesc reward = 7;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitychaosDragons::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 reward_type = 2;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_type(), target);
  }

  // optional int32 reward_param = 3;
  if (has_reward_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_param(), target);
  }

  // optional int32 rankmin = 4;
  if (has_rankmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rankmin(), target);
  }

  // optional int32 rankmax = 5;
  if (has_rankmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rankmax(), target);
  }

  // optional int64 getPoint = 6;
  if (has_getpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->getpoint(), target);
  }

  // repeated .proto_ff.activitychaosDragonsrewardDesc reward = 7;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitychaosDragons::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 reward_type = 2;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_type());
    }

    // optional int32 reward_param = 3;
    if (has_reward_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_param());
    }

    // optional int32 rankmin = 4;
    if (has_rankmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankmin());
    }

    // optional int32 rankmax = 5;
    if (has_rankmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankmax());
    }

    // optional int64 getPoint = 6;
    if (has_getpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->getpoint());
    }

  }
  // repeated .proto_ff.activitychaosDragonsrewardDesc reward = 7;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitychaosDragons::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitychaosDragons* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitychaosDragons*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitychaosDragons::MergeFrom(const activitychaosDragons& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
    if (from.has_reward_param()) {
      set_reward_param(from.reward_param());
    }
    if (from.has_rankmin()) {
      set_rankmin(from.rankmin());
    }
    if (from.has_rankmax()) {
      set_rankmax(from.rankmax());
    }
    if (from.has_getpoint()) {
      set_getpoint(from.getpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitychaosDragons::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitychaosDragons::CopyFrom(const activitychaosDragons& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitychaosDragons::IsInitialized() const {

  return true;
}

void activitychaosDragons::Swap(activitychaosDragons* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reward_type_, other->reward_type_);
    std::swap(reward_param_, other->reward_param_);
    std::swap(rankmin_, other->rankmin_);
    std::swap(rankmax_, other->rankmax_);
    std::swap(getpoint_, other->getpoint_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitychaosDragons::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitychaosDragons_descriptor_;
  metadata.reflection = activitychaosDragons_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activitychaosDragons::kActivitychaosDragonsListFieldNumber;
#endif  // !_MSC_VER

Sheet_activitychaosDragons::Sheet_activitychaosDragons()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activitychaosDragons::InitAsDefaultInstance() {
}

Sheet_activitychaosDragons::Sheet_activitychaosDragons(const Sheet_activitychaosDragons& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activitychaosDragons::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activitychaosDragons::~Sheet_activitychaosDragons() {
  SharedDtor();
}

void Sheet_activitychaosDragons::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activitychaosDragons::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activitychaosDragons::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activitychaosDragons_descriptor_;
}

const Sheet_activitychaosDragons& Sheet_activitychaosDragons::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activitychaosDragons* Sheet_activitychaosDragons::default_instance_ = NULL;

Sheet_activitychaosDragons* Sheet_activitychaosDragons::New() const {
  return new Sheet_activitychaosDragons;
}

void Sheet_activitychaosDragons::Clear() {
  activitychaosdragons_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activitychaosDragons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activitychaosDragons activitychaosDragons_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitychaosDragons_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitychaosdragons_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activitychaosDragons_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activitychaosDragons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activitychaosDragons activitychaosDragons_List = 1;
  for (int i = 0; i < this->activitychaosdragons_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activitychaosdragons_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activitychaosDragons::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activitychaosDragons activitychaosDragons_List = 1;
  for (int i = 0; i < this->activitychaosdragons_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activitychaosdragons_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activitychaosDragons::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activitychaosDragons activitychaosDragons_List = 1;
  total_size += 1 * this->activitychaosdragons_list_size();
  for (int i = 0; i < this->activitychaosdragons_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitychaosdragons_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activitychaosDragons::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activitychaosDragons* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activitychaosDragons*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activitychaosDragons::MergeFrom(const Sheet_activitychaosDragons& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitychaosdragons_list_.MergeFrom(from.activitychaosdragons_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activitychaosDragons::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activitychaosDragons::CopyFrom(const Sheet_activitychaosDragons& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activitychaosDragons::IsInitialized() const {

  return true;
}

void Sheet_activitychaosDragons::Swap(Sheet_activitychaosDragons* other) {
  if (other != this) {
    activitychaosdragons_list_.Swap(&other->activitychaosdragons_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activitychaosDragons::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activitychaosDragons_descriptor_;
  metadata.reflection = Sheet_activitychaosDragons_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitycircus::kCircusIDFieldNumber;
const int activitycircus::kPowerLowFieldNumber;
const int activitycircus::kPowerUpFieldNumber;
const int activitycircus::kCircusAFieldNumber;
const int activitycircus::kCircusBFieldNumber;
#endif  // !_MSC_VER

activitycircus::activitycircus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitycircus::InitAsDefaultInstance() {
}

activitycircus::activitycircus(const activitycircus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitycircus::SharedCtor() {
  _cached_size_ = 0;
  circusid_ = GOOGLE_LONGLONG(0);
  powerlow_ = GOOGLE_LONGLONG(0);
  powerup_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitycircus::~activitycircus() {
  SharedDtor();
}

void activitycircus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitycircus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitycircus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitycircus_descriptor_;
}

const activitycircus& activitycircus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitycircus* activitycircus::default_instance_ = NULL;

activitycircus* activitycircus::New() const {
  return new activitycircus;
}

void activitycircus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    circusid_ = GOOGLE_LONGLONG(0);
    powerlow_ = GOOGLE_LONGLONG(0);
    powerup_ = GOOGLE_LONGLONG(0);
  }
  circus_a_.Clear();
  circus_b_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitycircus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 circusID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &circusid_)));
          set_has_circusid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_powerLow;
        break;
      }

      // optional int64 powerLow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powerLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &powerlow_)));
          set_has_powerlow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_powerUp;
        break;
      }

      // optional int64 powerUp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powerUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &powerup_)));
          set_has_powerup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_circus_a;
        break;
      }

      // repeated int32 circus_a = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_circus_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_circus_a())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_circus_a())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_circus_a;
        if (input->ExpectTag(40)) goto parse_circus_b;
        break;
      }

      // repeated int64 circus_b = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_circus_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_circus_b())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_circus_b())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_circus_b;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitycircus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 circusID = 1;
  if (has_circusid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->circusid(), output);
  }

  // optional int64 powerLow = 2;
  if (has_powerlow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->powerlow(), output);
  }

  // optional int64 powerUp = 3;
  if (has_powerup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->powerup(), output);
  }

  // repeated int32 circus_a = 4;
  for (int i = 0; i < this->circus_a_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->circus_a(i), output);
  }

  // repeated int64 circus_b = 5;
  for (int i = 0; i < this->circus_b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->circus_b(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitycircus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 circusID = 1;
  if (has_circusid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->circusid(), target);
  }

  // optional int64 powerLow = 2;
  if (has_powerlow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->powerlow(), target);
  }

  // optional int64 powerUp = 3;
  if (has_powerup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->powerup(), target);
  }

  // repeated int32 circus_a = 4;
  for (int i = 0; i < this->circus_a_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->circus_a(i), target);
  }

  // repeated int64 circus_b = 5;
  for (int i = 0; i < this->circus_b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->circus_b(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitycircus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 circusID = 1;
    if (has_circusid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->circusid());
    }

    // optional int64 powerLow = 2;
    if (has_powerlow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->powerlow());
    }

    // optional int64 powerUp = 3;
    if (has_powerup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->powerup());
    }

  }
  // repeated int32 circus_a = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->circus_a_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->circus_a(i));
    }
    total_size += 1 * this->circus_a_size() + data_size;
  }

  // repeated int64 circus_b = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->circus_b_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->circus_b(i));
    }
    total_size += 1 * this->circus_b_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitycircus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitycircus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitycircus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitycircus::MergeFrom(const activitycircus& from) {
  GOOGLE_CHECK_NE(&from, this);
  circus_a_.MergeFrom(from.circus_a_);
  circus_b_.MergeFrom(from.circus_b_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_circusid()) {
      set_circusid(from.circusid());
    }
    if (from.has_powerlow()) {
      set_powerlow(from.powerlow());
    }
    if (from.has_powerup()) {
      set_powerup(from.powerup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitycircus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitycircus::CopyFrom(const activitycircus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitycircus::IsInitialized() const {

  return true;
}

void activitycircus::Swap(activitycircus* other) {
  if (other != this) {
    std::swap(circusid_, other->circusid_);
    std::swap(powerlow_, other->powerlow_);
    std::swap(powerup_, other->powerup_);
    circus_a_.Swap(&other->circus_a_);
    circus_b_.Swap(&other->circus_b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitycircus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitycircus_descriptor_;
  metadata.reflection = activitycircus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activitycircus::kActivitycircusListFieldNumber;
#endif  // !_MSC_VER

Sheet_activitycircus::Sheet_activitycircus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activitycircus::InitAsDefaultInstance() {
}

Sheet_activitycircus::Sheet_activitycircus(const Sheet_activitycircus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activitycircus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activitycircus::~Sheet_activitycircus() {
  SharedDtor();
}

void Sheet_activitycircus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activitycircus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activitycircus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activitycircus_descriptor_;
}

const Sheet_activitycircus& Sheet_activitycircus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activitycircus* Sheet_activitycircus::default_instance_ = NULL;

Sheet_activitycircus* Sheet_activitycircus::New() const {
  return new Sheet_activitycircus;
}

void Sheet_activitycircus::Clear() {
  activitycircus_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activitycircus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activitycircus activitycircus_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitycircus_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitycircus_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activitycircus_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activitycircus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activitycircus activitycircus_List = 1;
  for (int i = 0; i < this->activitycircus_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activitycircus_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activitycircus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activitycircus activitycircus_List = 1;
  for (int i = 0; i < this->activitycircus_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activitycircus_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activitycircus::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activitycircus activitycircus_List = 1;
  total_size += 1 * this->activitycircus_list_size();
  for (int i = 0; i < this->activitycircus_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitycircus_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activitycircus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activitycircus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activitycircus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activitycircus::MergeFrom(const Sheet_activitycircus& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitycircus_list_.MergeFrom(from.activitycircus_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activitycircus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activitycircus::CopyFrom(const Sheet_activitycircus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activitycircus::IsInitialized() const {

  return true;
}

void Sheet_activitycircus::Swap(Sheet_activitycircus* other) {
  if (other != this) {
    activitycircus_list_.Swap(&other->activitycircus_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activitycircus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activitycircus_descriptor_;
  metadata.reflection = Sheet_activitycircus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitycircusNumitemDesc::kNumFieldNumber;
const int activitycircusNumitemDesc::kIdFieldNumber;
#endif  // !_MSC_VER

activitycircusNumitemDesc::activitycircusNumitemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitycircusNumitemDesc::InitAsDefaultInstance() {
}

activitycircusNumitemDesc::activitycircusNumitemDesc(const activitycircusNumitemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitycircusNumitemDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitycircusNumitemDesc::~activitycircusNumitemDesc() {
  SharedDtor();
}

void activitycircusNumitemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitycircusNumitemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitycircusNumitemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitycircusNumitemDesc_descriptor_;
}

const activitycircusNumitemDesc& activitycircusNumitemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitycircusNumitemDesc* activitycircusNumitemDesc::default_instance_ = NULL;

activitycircusNumitemDesc* activitycircusNumitemDesc::New() const {
  return new activitycircusNumitemDesc;
}

void activitycircusNumitemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitycircusNumitemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Id;
        break;
      }

      // optional int64 Id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitycircusNumitemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 Id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitycircusNumitemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 Id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitycircusNumitemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 Id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitycircusNumitemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitycircusNumitemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitycircusNumitemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitycircusNumitemDesc::MergeFrom(const activitycircusNumitemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitycircusNumitemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitycircusNumitemDesc::CopyFrom(const activitycircusNumitemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitycircusNumitemDesc::IsInitialized() const {

  return true;
}

void activitycircusNumitemDesc::Swap(activitycircusNumitemDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitycircusNumitemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitycircusNumitemDesc_descriptor_;
  metadata.reflection = activitycircusNumitemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitycircusNum::kRankIDFieldNumber;
const int activitycircusNum::kItemFieldNumber;
#endif  // !_MSC_VER

activitycircusNum::activitycircusNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitycircusNum::InitAsDefaultInstance() {
}

activitycircusNum::activitycircusNum(const activitycircusNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitycircusNum::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitycircusNum::~activitycircusNum() {
  SharedDtor();
}

void activitycircusNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitycircusNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitycircusNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitycircusNum_descriptor_;
}

const activitycircusNum& activitycircusNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitycircusNum* activitycircusNum::default_instance_ = NULL;

activitycircusNum* activitycircusNum::New() const {
  return new activitycircusNum;
}

void activitycircusNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rankid_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitycircusNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RankID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .proto_ff.activitycircusNumitemDesc item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitycircusNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 RankID = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rankid(), output);
  }

  // repeated .proto_ff.activitycircusNumitemDesc item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitycircusNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RankID = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rankid(), target);
  }

  // repeated .proto_ff.activitycircusNumitemDesc item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitycircusNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RankID = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankid());
    }

  }
  // repeated .proto_ff.activitycircusNumitemDesc item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitycircusNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitycircusNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitycircusNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitycircusNum::MergeFrom(const activitycircusNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitycircusNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitycircusNum::CopyFrom(const activitycircusNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitycircusNum::IsInitialized() const {

  return true;
}

void activitycircusNum::Swap(activitycircusNum* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitycircusNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitycircusNum_descriptor_;
  metadata.reflection = activitycircusNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activitycircusNum::kActivitycircusNumListFieldNumber;
#endif  // !_MSC_VER

Sheet_activitycircusNum::Sheet_activitycircusNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activitycircusNum::InitAsDefaultInstance() {
}

Sheet_activitycircusNum::Sheet_activitycircusNum(const Sheet_activitycircusNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activitycircusNum::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activitycircusNum::~Sheet_activitycircusNum() {
  SharedDtor();
}

void Sheet_activitycircusNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activitycircusNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activitycircusNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activitycircusNum_descriptor_;
}

const Sheet_activitycircusNum& Sheet_activitycircusNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activitycircusNum* Sheet_activitycircusNum::default_instance_ = NULL;

Sheet_activitycircusNum* Sheet_activitycircusNum::New() const {
  return new Sheet_activitycircusNum;
}

void Sheet_activitycircusNum::Clear() {
  activitycircusnum_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activitycircusNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activitycircusNum activitycircusNum_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitycircusNum_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitycircusnum_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activitycircusNum_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activitycircusNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activitycircusNum activitycircusNum_List = 1;
  for (int i = 0; i < this->activitycircusnum_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activitycircusnum_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activitycircusNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activitycircusNum activitycircusNum_List = 1;
  for (int i = 0; i < this->activitycircusnum_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activitycircusnum_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activitycircusNum::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activitycircusNum activitycircusNum_List = 1;
  total_size += 1 * this->activitycircusnum_list_size();
  for (int i = 0; i < this->activitycircusnum_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitycircusnum_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activitycircusNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activitycircusNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activitycircusNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activitycircusNum::MergeFrom(const Sheet_activitycircusNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitycircusnum_list_.MergeFrom(from.activitycircusnum_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activitycircusNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activitycircusNum::CopyFrom(const Sheet_activitycircusNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activitycircusNum::IsInitialized() const {

  return true;
}

void Sheet_activitycircusNum::Swap(Sheet_activitycircusNum* other) {
  if (other != this) {
    activitycircusnum_list_.Swap(&other->activitycircusnum_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activitycircusNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activitycircusNum_descriptor_;
  metadata.reflection = Sheet_activitycircusNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitycircusDanitemDesc::kNumFieldNumber;
const int activitycircusDanitemDesc::kIdFieldNumber;
#endif  // !_MSC_VER

activitycircusDanitemDesc::activitycircusDanitemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitycircusDanitemDesc::InitAsDefaultInstance() {
}

activitycircusDanitemDesc::activitycircusDanitemDesc(const activitycircusDanitemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitycircusDanitemDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitycircusDanitemDesc::~activitycircusDanitemDesc() {
  SharedDtor();
}

void activitycircusDanitemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitycircusDanitemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitycircusDanitemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitycircusDanitemDesc_descriptor_;
}

const activitycircusDanitemDesc& activitycircusDanitemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitycircusDanitemDesc* activitycircusDanitemDesc::default_instance_ = NULL;

activitycircusDanitemDesc* activitycircusDanitemDesc::New() const {
  return new activitycircusDanitemDesc;
}

void activitycircusDanitemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitycircusDanitemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Id;
        break;
      }

      // optional int64 Id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitycircusDanitemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 Id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitycircusDanitemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 Id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitycircusDanitemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 Id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitycircusDanitemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitycircusDanitemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitycircusDanitemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitycircusDanitemDesc::MergeFrom(const activitycircusDanitemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitycircusDanitemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitycircusDanitemDesc::CopyFrom(const activitycircusDanitemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitycircusDanitemDesc::IsInitialized() const {

  return true;
}

void activitycircusDanitemDesc::Swap(activitycircusDanitemDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitycircusDanitemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitycircusDanitemDesc_descriptor_;
  metadata.reflection = activitycircusDanitemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitycircusDancircusDesc::kNumFieldNumber;
const int activitycircusDancircusDesc::kIdFieldNumber;
#endif  // !_MSC_VER

activitycircusDancircusDesc::activitycircusDancircusDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitycircusDancircusDesc::InitAsDefaultInstance() {
}

activitycircusDancircusDesc::activitycircusDancircusDesc(const activitycircusDancircusDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitycircusDancircusDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitycircusDancircusDesc::~activitycircusDancircusDesc() {
  SharedDtor();
}

void activitycircusDancircusDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitycircusDancircusDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitycircusDancircusDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitycircusDancircusDesc_descriptor_;
}

const activitycircusDancircusDesc& activitycircusDancircusDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitycircusDancircusDesc* activitycircusDancircusDesc::default_instance_ = NULL;

activitycircusDancircusDesc* activitycircusDancircusDesc::New() const {
  return new activitycircusDancircusDesc;
}

void activitycircusDancircusDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitycircusDancircusDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Id;
        break;
      }

      // optional int64 Id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitycircusDancircusDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 Id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitycircusDancircusDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 Id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitycircusDancircusDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 Id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitycircusDancircusDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitycircusDancircusDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitycircusDancircusDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitycircusDancircusDesc::MergeFrom(const activitycircusDancircusDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitycircusDancircusDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitycircusDancircusDesc::CopyFrom(const activitycircusDancircusDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitycircusDancircusDesc::IsInitialized() const {

  return true;
}

void activitycircusDancircusDesc::Swap(activitycircusDancircusDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitycircusDancircusDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitycircusDancircusDesc_descriptor_;
  metadata.reflection = activitycircusDancircusDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitycircusDan::kChangCiIDFieldNumber;
const int activitycircusDan::kItemFieldNumber;
const int activitycircusDan::kCircusFieldNumber;
#endif  // !_MSC_VER

activitycircusDan::activitycircusDan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitycircusDan::InitAsDefaultInstance() {
}

activitycircusDan::activitycircusDan(const activitycircusDan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitycircusDan::SharedCtor() {
  _cached_size_ = 0;
  changciid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitycircusDan::~activitycircusDan() {
  SharedDtor();
}

void activitycircusDan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitycircusDan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitycircusDan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitycircusDan_descriptor_;
}

const activitycircusDan& activitycircusDan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitycircusDan* activitycircusDan::default_instance_ = NULL;

activitycircusDan* activitycircusDan::New() const {
  return new activitycircusDan;
}

void activitycircusDan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    changciid_ = 0;
  }
  item_.Clear();
  circus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitycircusDan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 changCiID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changciid_)));
          set_has_changciid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .proto_ff.activitycircusDanitemDesc item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(26)) goto parse_circus;
        break;
      }

      // repeated .proto_ff.activitycircusDancircusDesc circus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_circus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_circus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_circus;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitycircusDan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 changCiID = 1;
  if (has_changciid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->changciid(), output);
  }

  // repeated .proto_ff.activitycircusDanitemDesc item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // repeated .proto_ff.activitycircusDancircusDesc circus = 3;
  for (int i = 0; i < this->circus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->circus(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitycircusDan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 changCiID = 1;
  if (has_changciid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->changciid(), target);
  }

  // repeated .proto_ff.activitycircusDanitemDesc item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  // repeated .proto_ff.activitycircusDancircusDesc circus = 3;
  for (int i = 0; i < this->circus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->circus(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitycircusDan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 changCiID = 1;
    if (has_changciid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changciid());
    }

  }
  // repeated .proto_ff.activitycircusDanitemDesc item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .proto_ff.activitycircusDancircusDesc circus = 3;
  total_size += 1 * this->circus_size();
  for (int i = 0; i < this->circus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->circus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitycircusDan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitycircusDan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitycircusDan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitycircusDan::MergeFrom(const activitycircusDan& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  circus_.MergeFrom(from.circus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changciid()) {
      set_changciid(from.changciid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitycircusDan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitycircusDan::CopyFrom(const activitycircusDan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitycircusDan::IsInitialized() const {

  return true;
}

void activitycircusDan::Swap(activitycircusDan* other) {
  if (other != this) {
    std::swap(changciid_, other->changciid_);
    item_.Swap(&other->item_);
    circus_.Swap(&other->circus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitycircusDan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitycircusDan_descriptor_;
  metadata.reflection = activitycircusDan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activitycircusDan::kActivitycircusDanListFieldNumber;
#endif  // !_MSC_VER

Sheet_activitycircusDan::Sheet_activitycircusDan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activitycircusDan::InitAsDefaultInstance() {
}

Sheet_activitycircusDan::Sheet_activitycircusDan(const Sheet_activitycircusDan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activitycircusDan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activitycircusDan::~Sheet_activitycircusDan() {
  SharedDtor();
}

void Sheet_activitycircusDan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activitycircusDan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activitycircusDan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activitycircusDan_descriptor_;
}

const Sheet_activitycircusDan& Sheet_activitycircusDan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activitycircusDan* Sheet_activitycircusDan::default_instance_ = NULL;

Sheet_activitycircusDan* Sheet_activitycircusDan::New() const {
  return new Sheet_activitycircusDan;
}

void Sheet_activitycircusDan::Clear() {
  activitycircusdan_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activitycircusDan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activitycircusDan activitycircusDan_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitycircusDan_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitycircusdan_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activitycircusDan_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activitycircusDan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activitycircusDan activitycircusDan_List = 1;
  for (int i = 0; i < this->activitycircusdan_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activitycircusdan_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activitycircusDan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activitycircusDan activitycircusDan_List = 1;
  for (int i = 0; i < this->activitycircusdan_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activitycircusdan_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activitycircusDan::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activitycircusDan activitycircusDan_List = 1;
  total_size += 1 * this->activitycircusdan_list_size();
  for (int i = 0; i < this->activitycircusdan_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitycircusdan_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activitycircusDan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activitycircusDan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activitycircusDan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activitycircusDan::MergeFrom(const Sheet_activitycircusDan& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitycircusdan_list_.MergeFrom(from.activitycircusdan_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activitycircusDan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activitycircusDan::CopyFrom(const Sheet_activitycircusDan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activitycircusDan::IsInitialized() const {

  return true;
}

void Sheet_activitycircusDan::Swap(Sheet_activitycircusDan* other) {
  if (other != this) {
    activitycircusdan_list_.Swap(&other->activitycircusdan_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activitycircusDan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activitycircusDan_descriptor_;
  metadata.reflection = Sheet_activitycircusDan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitymathrule::kActiveIdFieldNumber;
const int activitymathrule::kTypeFieldNumber;
const int activitymathrule::kMapIdFieldNumber;
const int activitymathrule::kDuplicateIdFieldNumber;
const int activitymathrule::kTimeFieldNumber;
const int activitymathrule::kWinnerPointsFieldNumber;
const int activitymathrule::kLoserPointsFieldNumber;
const int activitymathrule::kDrawPointsFieldNumber;
const int activitymathrule::kRewardtypeFieldNumber;
#endif  // !_MSC_VER

activitymathrule::activitymathrule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitymathrule::InitAsDefaultInstance() {
}

activitymathrule::activitymathrule(const activitymathrule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitymathrule::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  duplicateid_ = GOOGLE_LONGLONG(0);
  time_ = 0;
  winnerpoints_ = 0;
  loserpoints_ = 0;
  drawpoints_ = 0;
  rewardtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitymathrule::~activitymathrule() {
  SharedDtor();
}

void activitymathrule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitymathrule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitymathrule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitymathrule_descriptor_;
}

const activitymathrule& activitymathrule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitymathrule* activitymathrule::default_instance_ = NULL;

activitymathrule* activitymathrule::New() const {
  return new activitymathrule;
}

void activitymathrule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    mapid_ = GOOGLE_LONGLONG(0);
    duplicateid_ = GOOGLE_LONGLONG(0);
    time_ = 0;
    winnerpoints_ = 0;
    loserpoints_ = 0;
    drawpoints_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rewardtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitymathrule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mapId;
        break;
      }

      // optional int64 mapId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duplicateId;
        break;
      }

      // optional int64 duplicateId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duplicateid_)));
          set_has_duplicateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_winnerPoints;
        break;
      }

      // optional int32 winnerPoints = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnerPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnerpoints_)));
          set_has_winnerpoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_loserPoints;
        break;
      }

      // optional int32 loserPoints = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loserPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loserpoints_)));
          set_has_loserpoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_drawPoints;
        break;
      }

      // optional int32 drawPoints = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drawpoints_)));
          set_has_drawpoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rewardtype;
        break;
      }

      // optional int32 rewardtype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardtype_)));
          set_has_rewardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitymathrule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->activeid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int64 mapId = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mapid(), output);
  }

  // optional int64 duplicateId = 4;
  if (has_duplicateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->duplicateid(), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // optional int32 winnerPoints = 6;
  if (has_winnerpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->winnerpoints(), output);
  }

  // optional int32 loserPoints = 7;
  if (has_loserpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->loserpoints(), output);
  }

  // optional int32 drawPoints = 8;
  if (has_drawpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->drawpoints(), output);
  }

  // optional int32 rewardtype = 9;
  if (has_rewardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rewardtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitymathrule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->activeid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int64 mapId = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mapid(), target);
  }

  // optional int64 duplicateId = 4;
  if (has_duplicateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->duplicateid(), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // optional int32 winnerPoints = 6;
  if (has_winnerpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->winnerpoints(), target);
  }

  // optional int32 loserPoints = 7;
  if (has_loserpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->loserpoints(), target);
  }

  // optional int32 drawPoints = 8;
  if (has_drawpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->drawpoints(), target);
  }

  // optional int32 rewardtype = 9;
  if (has_rewardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rewardtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitymathrule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->activeid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 mapId = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int64 duplicateId = 4;
    if (has_duplicateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duplicateid());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 winnerPoints = 6;
    if (has_winnerpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnerpoints());
    }

    // optional int32 loserPoints = 7;
    if (has_loserpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loserpoints());
    }

    // optional int32 drawPoints = 8;
    if (has_drawpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drawpoints());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 rewardtype = 9;
    if (has_rewardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitymathrule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitymathrule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitymathrule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitymathrule::MergeFrom(const activitymathrule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_duplicateid()) {
      set_duplicateid(from.duplicateid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_winnerpoints()) {
      set_winnerpoints(from.winnerpoints());
    }
    if (from.has_loserpoints()) {
      set_loserpoints(from.loserpoints());
    }
    if (from.has_drawpoints()) {
      set_drawpoints(from.drawpoints());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rewardtype()) {
      set_rewardtype(from.rewardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitymathrule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitymathrule::CopyFrom(const activitymathrule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitymathrule::IsInitialized() const {

  return true;
}

void activitymathrule::Swap(activitymathrule* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(type_, other->type_);
    std::swap(mapid_, other->mapid_);
    std::swap(duplicateid_, other->duplicateid_);
    std::swap(time_, other->time_);
    std::swap(winnerpoints_, other->winnerpoints_);
    std::swap(loserpoints_, other->loserpoints_);
    std::swap(drawpoints_, other->drawpoints_);
    std::swap(rewardtype_, other->rewardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitymathrule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitymathrule_descriptor_;
  metadata.reflection = activitymathrule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activitymathrule::kActivitymathruleListFieldNumber;
#endif  // !_MSC_VER

Sheet_activitymathrule::Sheet_activitymathrule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activitymathrule::InitAsDefaultInstance() {
}

Sheet_activitymathrule::Sheet_activitymathrule(const Sheet_activitymathrule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activitymathrule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activitymathrule::~Sheet_activitymathrule() {
  SharedDtor();
}

void Sheet_activitymathrule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activitymathrule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activitymathrule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activitymathrule_descriptor_;
}

const Sheet_activitymathrule& Sheet_activitymathrule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activitymathrule* Sheet_activitymathrule::default_instance_ = NULL;

Sheet_activitymathrule* Sheet_activitymathrule::New() const {
  return new Sheet_activitymathrule;
}

void Sheet_activitymathrule::Clear() {
  activitymathrule_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activitymathrule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activitymathrule activitymathrule_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitymathrule_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitymathrule_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activitymathrule_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activitymathrule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activitymathrule activitymathrule_List = 1;
  for (int i = 0; i < this->activitymathrule_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activitymathrule_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activitymathrule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activitymathrule activitymathrule_List = 1;
  for (int i = 0; i < this->activitymathrule_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activitymathrule_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activitymathrule::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activitymathrule activitymathrule_List = 1;
  total_size += 1 * this->activitymathrule_list_size();
  for (int i = 0; i < this->activitymathrule_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitymathrule_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activitymathrule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activitymathrule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activitymathrule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activitymathrule::MergeFrom(const Sheet_activitymathrule& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitymathrule_list_.MergeFrom(from.activitymathrule_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activitymathrule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activitymathrule::CopyFrom(const Sheet_activitymathrule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activitymathrule::IsInitialized() const {

  return true;
}

void Sheet_activitymathrule::Swap(Sheet_activitymathrule* other) {
  if (other != this) {
    activitymathrule_list_.Swap(&other->activitymathrule_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activitymathrule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activitymathrule_descriptor_;
  metadata.reflection = Sheet_activitymathrule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitymathrewardrewardDesc::kNumFieldNumber;
#endif  // !_MSC_VER

activitymathrewardrewardDesc::activitymathrewardrewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitymathrewardrewardDesc::InitAsDefaultInstance() {
}

activitymathrewardrewardDesc::activitymathrewardrewardDesc(const activitymathrewardrewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitymathrewardrewardDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitymathrewardrewardDesc::~activitymathrewardrewardDesc() {
  SharedDtor();
}

void activitymathrewardrewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitymathrewardrewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitymathrewardrewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitymathrewardrewardDesc_descriptor_;
}

const activitymathrewardrewardDesc& activitymathrewardrewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitymathrewardrewardDesc* activitymathrewardrewardDesc::default_instance_ = NULL;

activitymathrewardrewardDesc* activitymathrewardrewardDesc::New() const {
  return new activitymathrewardrewardDesc;
}

void activitymathrewardrewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitymathrewardrewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitymathrewardrewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitymathrewardrewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitymathrewardrewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitymathrewardrewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitymathrewardrewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitymathrewardrewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitymathrewardrewardDesc::MergeFrom(const activitymathrewardrewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitymathrewardrewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitymathrewardrewardDesc::CopyFrom(const activitymathrewardrewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitymathrewardrewardDesc::IsInitialized() const {

  return true;
}

void activitymathrewardrewardDesc::Swap(activitymathrewardrewardDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitymathrewardrewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitymathrewardrewardDesc_descriptor_;
  metadata.reflection = activitymathrewardrewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitymathreward::kIDFieldNumber;
const int activitymathreward::kRewardtypeFieldNumber;
const int activitymathreward::kRewardlevelFieldNumber;
const int activitymathreward::kRewardFieldNumber;
const int activitymathreward::kRewardIDFieldNumber;
#endif  // !_MSC_VER

activitymathreward::activitymathreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitymathreward::InitAsDefaultInstance() {
}

activitymathreward::activitymathreward(const activitymathreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitymathreward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  rewardtype_ = 0;
  rewardlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitymathreward::~activitymathreward() {
  SharedDtor();
}

void activitymathreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitymathreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitymathreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitymathreward_descriptor_;
}

const activitymathreward& activitymathreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitymathreward* activitymathreward::default_instance_ = NULL;

activitymathreward* activitymathreward::New() const {
  return new activitymathreward;
}

void activitymathreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    rewardtype_ = 0;
    rewardlevel_ = 0;
  }
  reward_.Clear();
  reward_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitymathreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardtype;
        break;
      }

      // optional int32 rewardtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardtype_)));
          set_has_rewardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardlevel;
        break;
      }

      // optional int32 rewardlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardlevel_)));
          set_has_rewardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.activitymathrewardrewardDesc reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        if (input->ExpectTag(40)) goto parse_reward_ID;
        break;
      }

      // repeated int64 reward_ID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_reward_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_reward_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward_ID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitymathreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 rewardtype = 2;
  if (has_rewardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rewardtype(), output);
  }

  // optional int32 rewardlevel = 3;
  if (has_rewardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rewardlevel(), output);
  }

  // repeated .proto_ff.activitymathrewardrewardDesc reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(i), output);
  }

  // repeated int64 reward_ID = 5;
  for (int i = 0; i < this->reward_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->reward_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitymathreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 rewardtype = 2;
  if (has_rewardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rewardtype(), target);
  }

  // optional int32 rewardlevel = 3;
  if (has_rewardlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rewardlevel(), target);
  }

  // repeated .proto_ff.activitymathrewardrewardDesc reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(i), target);
  }

  // repeated int64 reward_ID = 5;
  for (int i = 0; i < this->reward_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->reward_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitymathreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 rewardtype = 2;
    if (has_rewardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardtype());
    }

    // optional int32 rewardlevel = 3;
    if (has_rewardlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardlevel());
    }

  }
  // repeated .proto_ff.activitymathrewardrewardDesc reward = 4;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  // repeated int64 reward_ID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->reward_id(i));
    }
    total_size += 1 * this->reward_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitymathreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitymathreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitymathreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitymathreward::MergeFrom(const activitymathreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  reward_id_.MergeFrom(from.reward_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rewardtype()) {
      set_rewardtype(from.rewardtype());
    }
    if (from.has_rewardlevel()) {
      set_rewardlevel(from.rewardlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitymathreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitymathreward::CopyFrom(const activitymathreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitymathreward::IsInitialized() const {

  return true;
}

void activitymathreward::Swap(activitymathreward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rewardtype_, other->rewardtype_);
    std::swap(rewardlevel_, other->rewardlevel_);
    reward_.Swap(&other->reward_);
    reward_id_.Swap(&other->reward_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitymathreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitymathreward_descriptor_;
  metadata.reflection = activitymathreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activitymathreward::kActivitymathrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_activitymathreward::Sheet_activitymathreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activitymathreward::InitAsDefaultInstance() {
}

Sheet_activitymathreward::Sheet_activitymathreward(const Sheet_activitymathreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activitymathreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activitymathreward::~Sheet_activitymathreward() {
  SharedDtor();
}

void Sheet_activitymathreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activitymathreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activitymathreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activitymathreward_descriptor_;
}

const Sheet_activitymathreward& Sheet_activitymathreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activitymathreward* Sheet_activitymathreward::default_instance_ = NULL;

Sheet_activitymathreward* Sheet_activitymathreward::New() const {
  return new Sheet_activitymathreward;
}

void Sheet_activitymathreward::Clear() {
  activitymathreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activitymathreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activitymathreward activitymathreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitymathreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitymathreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activitymathreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activitymathreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activitymathreward activitymathreward_List = 1;
  for (int i = 0; i < this->activitymathreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activitymathreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activitymathreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activitymathreward activitymathreward_List = 1;
  for (int i = 0; i < this->activitymathreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activitymathreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activitymathreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activitymathreward activitymathreward_List = 1;
  total_size += 1 * this->activitymathreward_list_size();
  for (int i = 0; i < this->activitymathreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitymathreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activitymathreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activitymathreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activitymathreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activitymathreward::MergeFrom(const Sheet_activitymathreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitymathreward_list_.MergeFrom(from.activitymathreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activitymathreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activitymathreward::CopyFrom(const Sheet_activitymathreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activitymathreward::IsInitialized() const {

  return true;
}

void Sheet_activitymathreward::Swap(Sheet_activitymathreward* other) {
  if (other != this) {
    activitymathreward_list_.Swap(&other->activitymathreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activitymathreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activitymathreward_descriptor_;
  metadata.reflection = Sheet_activitymathreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitygvgConst::kIdFieldNumber;
const int activitygvgConst::kConstantdataFieldNumber;
const int activitygvgConst::kStringdataFieldNumber;
#endif  // !_MSC_VER

activitygvgConst::activitygvgConst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitygvgConst::InitAsDefaultInstance() {
}

activitygvgConst::activitygvgConst(const activitygvgConst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitygvgConst::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  constantdata_ = GOOGLE_LONGLONG(0);
  stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitygvgConst::~activitygvgConst() {
  SharedDtor();
}

void activitygvgConst::SharedDtor() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (this != default_instance_) {
  }
}

void activitygvgConst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitygvgConst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitygvgConst_descriptor_;
}

const activitygvgConst& activitygvgConst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitygvgConst* activitygvgConst::default_instance_ = NULL;

activitygvgConst* activitygvgConst::New() const {
  return new activitygvgConst;
}

void activitygvgConst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    constantdata_ = GOOGLE_LONGLONG(0);
    if (has_stringdata()) {
      if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
        stringdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitygvgConst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_constantdata;
        break;
      }

      // optional int64 constantdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_constantdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &constantdata_)));
          set_has_constantdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stringdata;
        break;
      }

      // optional string stringdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringdata().data(), this->stringdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitygvgConst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 constantdata = 2;
  if (has_constantdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->constantdata(), output);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stringdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitygvgConst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 constantdata = 2;
  if (has_constantdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->constantdata(), target);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stringdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitygvgConst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 constantdata = 2;
    if (has_constantdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->constantdata());
    }

    // optional string stringdata = 3;
    if (has_stringdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitygvgConst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitygvgConst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitygvgConst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitygvgConst::MergeFrom(const activitygvgConst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_constantdata()) {
      set_constantdata(from.constantdata());
    }
    if (from.has_stringdata()) {
      set_stringdata(from.stringdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitygvgConst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitygvgConst::CopyFrom(const activitygvgConst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitygvgConst::IsInitialized() const {

  return true;
}

void activitygvgConst::Swap(activitygvgConst* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(constantdata_, other->constantdata_);
    std::swap(stringdata_, other->stringdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitygvgConst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitygvgConst_descriptor_;
  metadata.reflection = activitygvgConst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activitygvgConst::kActivitygvgConstListFieldNumber;
#endif  // !_MSC_VER

Sheet_activitygvgConst::Sheet_activitygvgConst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activitygvgConst::InitAsDefaultInstance() {
}

Sheet_activitygvgConst::Sheet_activitygvgConst(const Sheet_activitygvgConst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activitygvgConst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activitygvgConst::~Sheet_activitygvgConst() {
  SharedDtor();
}

void Sheet_activitygvgConst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activitygvgConst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activitygvgConst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activitygvgConst_descriptor_;
}

const Sheet_activitygvgConst& Sheet_activitygvgConst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activitygvgConst* Sheet_activitygvgConst::default_instance_ = NULL;

Sheet_activitygvgConst* Sheet_activitygvgConst::New() const {
  return new Sheet_activitygvgConst;
}

void Sheet_activitygvgConst::Clear() {
  activitygvgconst_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activitygvgConst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activitygvgConst activitygvgConst_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitygvgConst_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitygvgconst_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activitygvgConst_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activitygvgConst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activitygvgConst activitygvgConst_List = 1;
  for (int i = 0; i < this->activitygvgconst_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activitygvgconst_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activitygvgConst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activitygvgConst activitygvgConst_List = 1;
  for (int i = 0; i < this->activitygvgconst_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activitygvgconst_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activitygvgConst::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activitygvgConst activitygvgConst_List = 1;
  total_size += 1 * this->activitygvgconst_list_size();
  for (int i = 0; i < this->activitygvgconst_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitygvgconst_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activitygvgConst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activitygvgConst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activitygvgConst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activitygvgConst::MergeFrom(const Sheet_activitygvgConst& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitygvgconst_list_.MergeFrom(from.activitygvgconst_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activitygvgConst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activitygvgConst::CopyFrom(const Sheet_activitygvgConst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activitygvgConst::IsInitialized() const {

  return true;
}

void Sheet_activitygvgConst::Swap(Sheet_activitygvgConst* other) {
  if (other != this) {
    activitygvgconst_list_.Swap(&other->activitygvgconst_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activitygvgConst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activitygvgConst_descriptor_;
  metadata.reflection = Sheet_activitygvgConst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitygvgRankRewardgMemberrewardDesc::kNumFieldNumber;
const int activitygvgRankRewardgMemberrewardDesc::kIdFieldNumber;
#endif  // !_MSC_VER

activitygvgRankRewardgMemberrewardDesc::activitygvgRankRewardgMemberrewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitygvgRankRewardgMemberrewardDesc::InitAsDefaultInstance() {
}

activitygvgRankRewardgMemberrewardDesc::activitygvgRankRewardgMemberrewardDesc(const activitygvgRankRewardgMemberrewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitygvgRankRewardgMemberrewardDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitygvgRankRewardgMemberrewardDesc::~activitygvgRankRewardgMemberrewardDesc() {
  SharedDtor();
}

void activitygvgRankRewardgMemberrewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitygvgRankRewardgMemberrewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitygvgRankRewardgMemberrewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitygvgRankRewardgMemberrewardDesc_descriptor_;
}

const activitygvgRankRewardgMemberrewardDesc& activitygvgRankRewardgMemberrewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitygvgRankRewardgMemberrewardDesc* activitygvgRankRewardgMemberrewardDesc::default_instance_ = NULL;

activitygvgRankRewardgMemberrewardDesc* activitygvgRankRewardgMemberrewardDesc::New() const {
  return new activitygvgRankRewardgMemberrewardDesc;
}

void activitygvgRankRewardgMemberrewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitygvgRankRewardgMemberrewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitygvgRankRewardgMemberrewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitygvgRankRewardgMemberrewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitygvgRankRewardgMemberrewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitygvgRankRewardgMemberrewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitygvgRankRewardgMemberrewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitygvgRankRewardgMemberrewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitygvgRankRewardgMemberrewardDesc::MergeFrom(const activitygvgRankRewardgMemberrewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitygvgRankRewardgMemberrewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitygvgRankRewardgMemberrewardDesc::CopyFrom(const activitygvgRankRewardgMemberrewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitygvgRankRewardgMemberrewardDesc::IsInitialized() const {

  return true;
}

void activitygvgRankRewardgMemberrewardDesc::Swap(activitygvgRankRewardgMemberrewardDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitygvgRankRewardgMemberrewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitygvgRankRewardgMemberrewardDesc_descriptor_;
  metadata.reflection = activitygvgRankRewardgMemberrewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitygvgRankRewardgLeaderrewardDesc::kNumFieldNumber;
const int activitygvgRankRewardgLeaderrewardDesc::kIdFieldNumber;
#endif  // !_MSC_VER

activitygvgRankRewardgLeaderrewardDesc::activitygvgRankRewardgLeaderrewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitygvgRankRewardgLeaderrewardDesc::InitAsDefaultInstance() {
}

activitygvgRankRewardgLeaderrewardDesc::activitygvgRankRewardgLeaderrewardDesc(const activitygvgRankRewardgLeaderrewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitygvgRankRewardgLeaderrewardDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitygvgRankRewardgLeaderrewardDesc::~activitygvgRankRewardgLeaderrewardDesc() {
  SharedDtor();
}

void activitygvgRankRewardgLeaderrewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitygvgRankRewardgLeaderrewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitygvgRankRewardgLeaderrewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitygvgRankRewardgLeaderrewardDesc_descriptor_;
}

const activitygvgRankRewardgLeaderrewardDesc& activitygvgRankRewardgLeaderrewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitygvgRankRewardgLeaderrewardDesc* activitygvgRankRewardgLeaderrewardDesc::default_instance_ = NULL;

activitygvgRankRewardgLeaderrewardDesc* activitygvgRankRewardgLeaderrewardDesc::New() const {
  return new activitygvgRankRewardgLeaderrewardDesc;
}

void activitygvgRankRewardgLeaderrewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitygvgRankRewardgLeaderrewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitygvgRankRewardgLeaderrewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitygvgRankRewardgLeaderrewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitygvgRankRewardgLeaderrewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitygvgRankRewardgLeaderrewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitygvgRankRewardgLeaderrewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitygvgRankRewardgLeaderrewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitygvgRankRewardgLeaderrewardDesc::MergeFrom(const activitygvgRankRewardgLeaderrewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitygvgRankRewardgLeaderrewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitygvgRankRewardgLeaderrewardDesc::CopyFrom(const activitygvgRankRewardgLeaderrewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitygvgRankRewardgLeaderrewardDesc::IsInitialized() const {

  return true;
}

void activitygvgRankRewardgLeaderrewardDesc::Swap(activitygvgRankRewardgLeaderrewardDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitygvgRankRewardgLeaderrewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitygvgRankRewardgLeaderrewardDesc_descriptor_;
  metadata.reflection = activitygvgRankRewardgLeaderrewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitygvgRankReward::kIdFieldNumber;
const int activitygvgRankReward::kGLeaderIdFieldNumber;
const int activitygvgRankReward::kGMemberrewardFieldNumber;
const int activitygvgRankReward::kGLeaderrewardFieldNumber;
#endif  // !_MSC_VER

activitygvgRankReward::activitygvgRankReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitygvgRankReward::InitAsDefaultInstance() {
}

activitygvgRankReward::activitygvgRankReward(const activitygvgRankReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitygvgRankReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  gleaderid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitygvgRankReward::~activitygvgRankReward() {
  SharedDtor();
}

void activitygvgRankReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitygvgRankReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitygvgRankReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitygvgRankReward_descriptor_;
}

const activitygvgRankReward& activitygvgRankReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitygvgRankReward* activitygvgRankReward::default_instance_ = NULL;

activitygvgRankReward* activitygvgRankReward::New() const {
  return new activitygvgRankReward;
}

void activitygvgRankReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    gleaderid_ = GOOGLE_LONGLONG(0);
  }
  gmemberreward_.Clear();
  gleaderreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitygvgRankReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gLeaderId;
        break;
      }

      // optional int64 gLeaderId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gLeaderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gleaderid_)));
          set_has_gleaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gMemberreward;
        break;
      }

      // repeated .proto_ff.activitygvgRankRewardgMemberrewardDesc gMemberreward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gMemberreward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gmemberreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gMemberreward;
        if (input->ExpectTag(34)) goto parse_gLeaderreward;
        break;
      }

      // repeated .proto_ff.activitygvgRankRewardgLeaderrewardDesc gLeaderreward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gLeaderreward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gleaderreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gLeaderreward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitygvgRankReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 gLeaderId = 2;
  if (has_gleaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gleaderid(), output);
  }

  // repeated .proto_ff.activitygvgRankRewardgMemberrewardDesc gMemberreward = 3;
  for (int i = 0; i < this->gmemberreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gmemberreward(i), output);
  }

  // repeated .proto_ff.activitygvgRankRewardgLeaderrewardDesc gLeaderreward = 4;
  for (int i = 0; i < this->gleaderreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gleaderreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitygvgRankReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 gLeaderId = 2;
  if (has_gleaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gleaderid(), target);
  }

  // repeated .proto_ff.activitygvgRankRewardgMemberrewardDesc gMemberreward = 3;
  for (int i = 0; i < this->gmemberreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gmemberreward(i), target);
  }

  // repeated .proto_ff.activitygvgRankRewardgLeaderrewardDesc gLeaderreward = 4;
  for (int i = 0; i < this->gleaderreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gleaderreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitygvgRankReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 gLeaderId = 2;
    if (has_gleaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gleaderid());
    }

  }
  // repeated .proto_ff.activitygvgRankRewardgMemberrewardDesc gMemberreward = 3;
  total_size += 1 * this->gmemberreward_size();
  for (int i = 0; i < this->gmemberreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gmemberreward(i));
  }

  // repeated .proto_ff.activitygvgRankRewardgLeaderrewardDesc gLeaderreward = 4;
  total_size += 1 * this->gleaderreward_size();
  for (int i = 0; i < this->gleaderreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gleaderreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitygvgRankReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitygvgRankReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitygvgRankReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitygvgRankReward::MergeFrom(const activitygvgRankReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  gmemberreward_.MergeFrom(from.gmemberreward_);
  gleaderreward_.MergeFrom(from.gleaderreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gleaderid()) {
      set_gleaderid(from.gleaderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitygvgRankReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitygvgRankReward::CopyFrom(const activitygvgRankReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitygvgRankReward::IsInitialized() const {

  return true;
}

void activitygvgRankReward::Swap(activitygvgRankReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gleaderid_, other->gleaderid_);
    gmemberreward_.Swap(&other->gmemberreward_);
    gleaderreward_.Swap(&other->gleaderreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitygvgRankReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitygvgRankReward_descriptor_;
  metadata.reflection = activitygvgRankReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activitygvgRankReward::kActivitygvgRankRewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_activitygvgRankReward::Sheet_activitygvgRankReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activitygvgRankReward::InitAsDefaultInstance() {
}

Sheet_activitygvgRankReward::Sheet_activitygvgRankReward(const Sheet_activitygvgRankReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activitygvgRankReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activitygvgRankReward::~Sheet_activitygvgRankReward() {
  SharedDtor();
}

void Sheet_activitygvgRankReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activitygvgRankReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activitygvgRankReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activitygvgRankReward_descriptor_;
}

const Sheet_activitygvgRankReward& Sheet_activitygvgRankReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activitygvgRankReward* Sheet_activitygvgRankReward::default_instance_ = NULL;

Sheet_activitygvgRankReward* Sheet_activitygvgRankReward::New() const {
  return new Sheet_activitygvgRankReward;
}

void Sheet_activitygvgRankReward::Clear() {
  activitygvgrankreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activitygvgRankReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activitygvgRankReward activitygvgRankReward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitygvgRankReward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitygvgrankreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activitygvgRankReward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activitygvgRankReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activitygvgRankReward activitygvgRankReward_List = 1;
  for (int i = 0; i < this->activitygvgrankreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activitygvgrankreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activitygvgRankReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activitygvgRankReward activitygvgRankReward_List = 1;
  for (int i = 0; i < this->activitygvgrankreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activitygvgrankreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activitygvgRankReward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activitygvgRankReward activitygvgRankReward_List = 1;
  total_size += 1 * this->activitygvgrankreward_list_size();
  for (int i = 0; i < this->activitygvgrankreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitygvgrankreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activitygvgRankReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activitygvgRankReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activitygvgRankReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activitygvgRankReward::MergeFrom(const Sheet_activitygvgRankReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitygvgrankreward_list_.MergeFrom(from.activitygvgrankreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activitygvgRankReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activitygvgRankReward::CopyFrom(const Sheet_activitygvgRankReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activitygvgRankReward::IsInitialized() const {

  return true;
}

void Sheet_activitygvgRankReward::Swap(Sheet_activitygvgRankReward* other) {
  if (other != this) {
    activitygvgrankreward_list_.Swap(&other->activitygvgrankreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activitygvgRankReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activitygvgRankReward_descriptor_;
  metadata.reflection = Sheet_activitygvgRankReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitygvgRewardrewardDesc::kNumFieldNumber;
#endif  // !_MSC_VER

activitygvgRewardrewardDesc::activitygvgRewardrewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitygvgRewardrewardDesc::InitAsDefaultInstance() {
}

activitygvgRewardrewardDesc::activitygvgRewardrewardDesc(const activitygvgRewardrewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitygvgRewardrewardDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitygvgRewardrewardDesc::~activitygvgRewardrewardDesc() {
  SharedDtor();
}

void activitygvgRewardrewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitygvgRewardrewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitygvgRewardrewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitygvgRewardrewardDesc_descriptor_;
}

const activitygvgRewardrewardDesc& activitygvgRewardrewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitygvgRewardrewardDesc* activitygvgRewardrewardDesc::default_instance_ = NULL;

activitygvgRewardrewardDesc* activitygvgRewardrewardDesc::New() const {
  return new activitygvgRewardrewardDesc;
}

void activitygvgRewardrewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitygvgRewardrewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitygvgRewardrewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitygvgRewardrewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitygvgRewardrewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitygvgRewardrewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitygvgRewardrewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitygvgRewardrewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitygvgRewardrewardDesc::MergeFrom(const activitygvgRewardrewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitygvgRewardrewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitygvgRewardrewardDesc::CopyFrom(const activitygvgRewardrewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitygvgRewardrewardDesc::IsInitialized() const {

  return true;
}

void activitygvgRewardrewardDesc::Swap(activitygvgRewardrewardDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitygvgRewardrewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitygvgRewardrewardDesc_descriptor_;
  metadata.reflection = activitygvgRewardrewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitygvgRewardfinalityDesc::kNumFieldNumber;
#endif  // !_MSC_VER

activitygvgRewardfinalityDesc::activitygvgRewardfinalityDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitygvgRewardfinalityDesc::InitAsDefaultInstance() {
}

activitygvgRewardfinalityDesc::activitygvgRewardfinalityDesc(const activitygvgRewardfinalityDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitygvgRewardfinalityDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitygvgRewardfinalityDesc::~activitygvgRewardfinalityDesc() {
  SharedDtor();
}

void activitygvgRewardfinalityDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitygvgRewardfinalityDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitygvgRewardfinalityDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitygvgRewardfinalityDesc_descriptor_;
}

const activitygvgRewardfinalityDesc& activitygvgRewardfinalityDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitygvgRewardfinalityDesc* activitygvgRewardfinalityDesc::default_instance_ = NULL;

activitygvgRewardfinalityDesc* activitygvgRewardfinalityDesc::New() const {
  return new activitygvgRewardfinalityDesc;
}

void activitygvgRewardfinalityDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitygvgRewardfinalityDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitygvgRewardfinalityDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitygvgRewardfinalityDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitygvgRewardfinalityDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitygvgRewardfinalityDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitygvgRewardfinalityDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitygvgRewardfinalityDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitygvgRewardfinalityDesc::MergeFrom(const activitygvgRewardfinalityDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitygvgRewardfinalityDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitygvgRewardfinalityDesc::CopyFrom(const activitygvgRewardfinalityDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitygvgRewardfinalityDesc::IsInitialized() const {

  return true;
}

void activitygvgRewardfinalityDesc::Swap(activitygvgRewardfinalityDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitygvgRewardfinalityDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitygvgRewardfinalityDesc_descriptor_;
  metadata.reflection = activitygvgRewardfinalityDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitygvgReward::kIdFieldNumber;
const int activitygvgReward::kFinalityskillFieldNumber;
const int activitygvgReward::kRewardFieldNumber;
const int activitygvgReward::kFinalityFieldNumber;
const int activitygvgReward::kRewardIdFieldNumber;
const int activitygvgReward::kFinalityIdFieldNumber;
#endif  // !_MSC_VER

activitygvgReward::activitygvgReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitygvgReward::InitAsDefaultInstance() {
}

activitygvgReward::activitygvgReward(const activitygvgReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitygvgReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  finalityskill_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitygvgReward::~activitygvgReward() {
  SharedDtor();
}

void activitygvgReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activitygvgReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitygvgReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitygvgReward_descriptor_;
}

const activitygvgReward& activitygvgReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitygvgReward* activitygvgReward::default_instance_ = NULL;

activitygvgReward* activitygvgReward::New() const {
  return new activitygvgReward;
}

void activitygvgReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    finalityskill_ = GOOGLE_LONGLONG(0);
  }
  reward_.Clear();
  finality_.Clear();
  reward_id_.Clear();
  finality_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitygvgReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finalityskill;
        break;
      }

      // optional int64 finalityskill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finalityskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finalityskill_)));
          set_has_finalityskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.activitygvgRewardrewardDesc reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectTag(34)) goto parse_finality;
        break;
      }

      // repeated .proto_ff.activitygvgRewardfinalityDesc finality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_finality()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_finality;
        if (input->ExpectTag(40)) goto parse_reward_id;
        break;
      }

      // repeated int64 reward_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_reward_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_reward_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward_id;
        if (input->ExpectTag(48)) goto parse_finality_id;
        break;
      }

      // repeated int64 finality_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finality_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_finality_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_finality_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_finality_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitygvgReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 finalityskill = 2;
  if (has_finalityskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->finalityskill(), output);
  }

  // repeated .proto_ff.activitygvgRewardrewardDesc reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  // repeated .proto_ff.activitygvgRewardfinalityDesc finality = 4;
  for (int i = 0; i < this->finality_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->finality(i), output);
  }

  // repeated int64 reward_id = 5;
  for (int i = 0; i < this->reward_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->reward_id(i), output);
  }

  // repeated int64 finality_id = 6;
  for (int i = 0; i < this->finality_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->finality_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitygvgReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 finalityskill = 2;
  if (has_finalityskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->finalityskill(), target);
  }

  // repeated .proto_ff.activitygvgRewardrewardDesc reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  // repeated .proto_ff.activitygvgRewardfinalityDesc finality = 4;
  for (int i = 0; i < this->finality_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->finality(i), target);
  }

  // repeated int64 reward_id = 5;
  for (int i = 0; i < this->reward_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->reward_id(i), target);
  }

  // repeated int64 finality_id = 6;
  for (int i = 0; i < this->finality_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->finality_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitygvgReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 finalityskill = 2;
    if (has_finalityskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finalityskill());
    }

  }
  // repeated .proto_ff.activitygvgRewardrewardDesc reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  // repeated .proto_ff.activitygvgRewardfinalityDesc finality = 4;
  total_size += 1 * this->finality_size();
  for (int i = 0; i < this->finality_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->finality(i));
  }

  // repeated int64 reward_id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->reward_id(i));
    }
    total_size += 1 * this->reward_id_size() + data_size;
  }

  // repeated int64 finality_id = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->finality_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->finality_id(i));
    }
    total_size += 1 * this->finality_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitygvgReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitygvgReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitygvgReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitygvgReward::MergeFrom(const activitygvgReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  finality_.MergeFrom(from.finality_);
  reward_id_.MergeFrom(from.reward_id_);
  finality_id_.MergeFrom(from.finality_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_finalityskill()) {
      set_finalityskill(from.finalityskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitygvgReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitygvgReward::CopyFrom(const activitygvgReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitygvgReward::IsInitialized() const {

  return true;
}

void activitygvgReward::Swap(activitygvgReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(finalityskill_, other->finalityskill_);
    reward_.Swap(&other->reward_);
    finality_.Swap(&other->finality_);
    reward_id_.Swap(&other->reward_id_);
    finality_id_.Swap(&other->finality_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitygvgReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitygvgReward_descriptor_;
  metadata.reflection = activitygvgReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activitygvgReward::kActivitygvgRewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_activitygvgReward::Sheet_activitygvgReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activitygvgReward::InitAsDefaultInstance() {
}

Sheet_activitygvgReward::Sheet_activitygvgReward(const Sheet_activitygvgReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activitygvgReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activitygvgReward::~Sheet_activitygvgReward() {
  SharedDtor();
}

void Sheet_activitygvgReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activitygvgReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activitygvgReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activitygvgReward_descriptor_;
}

const Sheet_activitygvgReward& Sheet_activitygvgReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activitygvgReward* Sheet_activitygvgReward::default_instance_ = NULL;

Sheet_activitygvgReward* Sheet_activitygvgReward::New() const {
  return new Sheet_activitygvgReward;
}

void Sheet_activitygvgReward::Clear() {
  activitygvgreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activitygvgReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activitygvgReward activitygvgReward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitygvgReward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitygvgreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activitygvgReward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activitygvgReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activitygvgReward activitygvgReward_List = 1;
  for (int i = 0; i < this->activitygvgreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activitygvgreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activitygvgReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activitygvgReward activitygvgReward_List = 1;
  for (int i = 0; i < this->activitygvgreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activitygvgreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activitygvgReward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activitygvgReward activitygvgReward_List = 1;
  total_size += 1 * this->activitygvgreward_list_size();
  for (int i = 0; i < this->activitygvgreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitygvgreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activitygvgReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activitygvgReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activitygvgReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activitygvgReward::MergeFrom(const Sheet_activitygvgReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitygvgreward_list_.MergeFrom(from.activitygvgreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activitygvgReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activitygvgReward::CopyFrom(const Sheet_activitygvgReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activitygvgReward::IsInitialized() const {

  return true;
}

void Sheet_activitygvgReward::Swap(Sheet_activitygvgReward* other) {
  if (other != this) {
    activitygvgreward_list_.Swap(&other->activitygvgreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activitygvgReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activitygvgReward_descriptor_;
  metadata.reflection = Sheet_activitygvgReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activityworldTreasureConst::kIdFieldNumber;
const int activityworldTreasureConst::kConstantdataFieldNumber;
#endif  // !_MSC_VER

activityworldTreasureConst::activityworldTreasureConst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activityworldTreasureConst::InitAsDefaultInstance() {
}

activityworldTreasureConst::activityworldTreasureConst(const activityworldTreasureConst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activityworldTreasureConst::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  constantdata_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activityworldTreasureConst::~activityworldTreasureConst() {
  SharedDtor();
}

void activityworldTreasureConst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activityworldTreasureConst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activityworldTreasureConst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activityworldTreasureConst_descriptor_;
}

const activityworldTreasureConst& activityworldTreasureConst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activityworldTreasureConst* activityworldTreasureConst::default_instance_ = NULL;

activityworldTreasureConst* activityworldTreasureConst::New() const {
  return new activityworldTreasureConst;
}

void activityworldTreasureConst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    constantdata_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activityworldTreasureConst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_constantdata;
        break;
      }

      // optional int64 constantdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_constantdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &constantdata_)));
          set_has_constantdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activityworldTreasureConst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 constantdata = 2;
  if (has_constantdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->constantdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activityworldTreasureConst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 constantdata = 2;
  if (has_constantdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->constantdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activityworldTreasureConst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 constantdata = 2;
    if (has_constantdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->constantdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activityworldTreasureConst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activityworldTreasureConst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activityworldTreasureConst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activityworldTreasureConst::MergeFrom(const activityworldTreasureConst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_constantdata()) {
      set_constantdata(from.constantdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activityworldTreasureConst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activityworldTreasureConst::CopyFrom(const activityworldTreasureConst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activityworldTreasureConst::IsInitialized() const {

  return true;
}

void activityworldTreasureConst::Swap(activityworldTreasureConst* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(constantdata_, other->constantdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activityworldTreasureConst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activityworldTreasureConst_descriptor_;
  metadata.reflection = activityworldTreasureConst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activityworldTreasureConst::kActivityworldTreasureConstListFieldNumber;
#endif  // !_MSC_VER

Sheet_activityworldTreasureConst::Sheet_activityworldTreasureConst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activityworldTreasureConst::InitAsDefaultInstance() {
}

Sheet_activityworldTreasureConst::Sheet_activityworldTreasureConst(const Sheet_activityworldTreasureConst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activityworldTreasureConst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activityworldTreasureConst::~Sheet_activityworldTreasureConst() {
  SharedDtor();
}

void Sheet_activityworldTreasureConst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activityworldTreasureConst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activityworldTreasureConst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activityworldTreasureConst_descriptor_;
}

const Sheet_activityworldTreasureConst& Sheet_activityworldTreasureConst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activityworldTreasureConst* Sheet_activityworldTreasureConst::default_instance_ = NULL;

Sheet_activityworldTreasureConst* Sheet_activityworldTreasureConst::New() const {
  return new Sheet_activityworldTreasureConst;
}

void Sheet_activityworldTreasureConst::Clear() {
  activityworldtreasureconst_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activityworldTreasureConst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activityworldTreasureConst activityworldTreasureConst_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activityworldTreasureConst_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activityworldtreasureconst_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activityworldTreasureConst_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activityworldTreasureConst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activityworldTreasureConst activityworldTreasureConst_List = 1;
  for (int i = 0; i < this->activityworldtreasureconst_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activityworldtreasureconst_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activityworldTreasureConst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activityworldTreasureConst activityworldTreasureConst_List = 1;
  for (int i = 0; i < this->activityworldtreasureconst_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activityworldtreasureconst_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activityworldTreasureConst::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activityworldTreasureConst activityworldTreasureConst_List = 1;
  total_size += 1 * this->activityworldtreasureconst_list_size();
  for (int i = 0; i < this->activityworldtreasureconst_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activityworldtreasureconst_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activityworldTreasureConst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activityworldTreasureConst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activityworldTreasureConst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activityworldTreasureConst::MergeFrom(const Sheet_activityworldTreasureConst& from) {
  GOOGLE_CHECK_NE(&from, this);
  activityworldtreasureconst_list_.MergeFrom(from.activityworldtreasureconst_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activityworldTreasureConst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activityworldTreasureConst::CopyFrom(const Sheet_activityworldTreasureConst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activityworldTreasureConst::IsInitialized() const {

  return true;
}

void Sheet_activityworldTreasureConst::Swap(Sheet_activityworldTreasureConst* other) {
  if (other != this) {
    activityworldtreasureconst_list_.Swap(&other->activityworldtreasureconst_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activityworldTreasureConst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activityworldTreasureConst_descriptor_;
  metadata.reflection = Sheet_activityworldTreasureConst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activityworldTreasureMap::kMapIDFieldNumber;
const int activityworldTreasureMap::kPathIDFieldNumber;
#endif  // !_MSC_VER

activityworldTreasureMap::activityworldTreasureMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activityworldTreasureMap::InitAsDefaultInstance() {
}

activityworldTreasureMap::activityworldTreasureMap(const activityworldTreasureMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activityworldTreasureMap::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  pathid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activityworldTreasureMap::~activityworldTreasureMap() {
  SharedDtor();
}

void activityworldTreasureMap::SharedDtor() {
  if (pathid_ != &::google::protobuf::internal::kEmptyString) {
    delete pathid_;
  }
  if (this != default_instance_) {
  }
}

void activityworldTreasureMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activityworldTreasureMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activityworldTreasureMap_descriptor_;
}

const activityworldTreasureMap& activityworldTreasureMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activityworldTreasureMap* activityworldTreasureMap::default_instance_ = NULL;

activityworldTreasureMap* activityworldTreasureMap::New() const {
  return new activityworldTreasureMap;
}

void activityworldTreasureMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = GOOGLE_LONGLONG(0);
    if (has_pathid()) {
      if (pathid_ != &::google::protobuf::internal::kEmptyString) {
        pathid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activityworldTreasureMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pathID;
        break;
      }

      // optional string pathID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pathID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pathid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pathid().data(), this->pathid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activityworldTreasureMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 mapID = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mapid(), output);
  }

  // optional string pathID = 2;
  if (has_pathid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pathid().data(), this->pathid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pathid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activityworldTreasureMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 mapID = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mapid(), target);
  }

  // optional string pathID = 2;
  if (has_pathid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pathid().data(), this->pathid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pathid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activityworldTreasureMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional string pathID = 2;
    if (has_pathid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pathid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activityworldTreasureMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activityworldTreasureMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activityworldTreasureMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activityworldTreasureMap::MergeFrom(const activityworldTreasureMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pathid()) {
      set_pathid(from.pathid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activityworldTreasureMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activityworldTreasureMap::CopyFrom(const activityworldTreasureMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activityworldTreasureMap::IsInitialized() const {

  return true;
}

void activityworldTreasureMap::Swap(activityworldTreasureMap* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pathid_, other->pathid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activityworldTreasureMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activityworldTreasureMap_descriptor_;
  metadata.reflection = activityworldTreasureMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activityworldTreasureMap::kActivityworldTreasureMapListFieldNumber;
#endif  // !_MSC_VER

Sheet_activityworldTreasureMap::Sheet_activityworldTreasureMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activityworldTreasureMap::InitAsDefaultInstance() {
}

Sheet_activityworldTreasureMap::Sheet_activityworldTreasureMap(const Sheet_activityworldTreasureMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activityworldTreasureMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activityworldTreasureMap::~Sheet_activityworldTreasureMap() {
  SharedDtor();
}

void Sheet_activityworldTreasureMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activityworldTreasureMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activityworldTreasureMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activityworldTreasureMap_descriptor_;
}

const Sheet_activityworldTreasureMap& Sheet_activityworldTreasureMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activityworldTreasureMap* Sheet_activityworldTreasureMap::default_instance_ = NULL;

Sheet_activityworldTreasureMap* Sheet_activityworldTreasureMap::New() const {
  return new Sheet_activityworldTreasureMap;
}

void Sheet_activityworldTreasureMap::Clear() {
  activityworldtreasuremap_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activityworldTreasureMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activityworldTreasureMap activityworldTreasureMap_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activityworldTreasureMap_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activityworldtreasuremap_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activityworldTreasureMap_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activityworldTreasureMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activityworldTreasureMap activityworldTreasureMap_List = 1;
  for (int i = 0; i < this->activityworldtreasuremap_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activityworldtreasuremap_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activityworldTreasureMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activityworldTreasureMap activityworldTreasureMap_List = 1;
  for (int i = 0; i < this->activityworldtreasuremap_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activityworldtreasuremap_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activityworldTreasureMap::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activityworldTreasureMap activityworldTreasureMap_List = 1;
  total_size += 1 * this->activityworldtreasuremap_list_size();
  for (int i = 0; i < this->activityworldtreasuremap_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activityworldtreasuremap_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activityworldTreasureMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activityworldTreasureMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activityworldTreasureMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activityworldTreasureMap::MergeFrom(const Sheet_activityworldTreasureMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  activityworldtreasuremap_list_.MergeFrom(from.activityworldtreasuremap_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activityworldTreasureMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activityworldTreasureMap::CopyFrom(const Sheet_activityworldTreasureMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activityworldTreasureMap::IsInitialized() const {

  return true;
}

void Sheet_activityworldTreasureMap::Swap(Sheet_activityworldTreasureMap* other) {
  if (other != this) {
    activityworldtreasuremap_list_.Swap(&other->activityworldtreasuremap_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activityworldTreasureMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activityworldTreasureMap_descriptor_;
  metadata.reflection = Sheet_activityworldTreasureMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activityworldTreasureMonster::kIDFieldNumber;
const int activityworldTreasureMonster::kMonsterIDFieldNumber;
const int activityworldTreasureMonster::kAppearWeightFieldNumber;
const int activityworldTreasureMonster::kSkillIdFieldNumber;
#endif  // !_MSC_VER

activityworldTreasureMonster::activityworldTreasureMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activityworldTreasureMonster::InitAsDefaultInstance() {
}

activityworldTreasureMonster::activityworldTreasureMonster(const activityworldTreasureMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activityworldTreasureMonster::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  monsterid_ = GOOGLE_LONGLONG(0);
  appearweight_ = 0;
  skillid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activityworldTreasureMonster::~activityworldTreasureMonster() {
  SharedDtor();
}

void activityworldTreasureMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activityworldTreasureMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activityworldTreasureMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activityworldTreasureMonster_descriptor_;
}

const activityworldTreasureMonster& activityworldTreasureMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activityworldTreasureMonster* activityworldTreasureMonster::default_instance_ = NULL;

activityworldTreasureMonster* activityworldTreasureMonster::New() const {
  return new activityworldTreasureMonster;
}

void activityworldTreasureMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    monsterid_ = GOOGLE_LONGLONG(0);
    appearweight_ = 0;
    skillid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activityworldTreasureMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monsterID;
        break;
      }

      // optional int64 monsterID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appearWeight;
        break;
      }

      // optional int32 appearWeight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appearWeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appearweight_)));
          set_has_appearweight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillId;
        break;
      }

      // optional int64 skillId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activityworldTreasureMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 monsterID = 2;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->monsterid(), output);
  }

  // optional int32 appearWeight = 3;
  if (has_appearweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appearweight(), output);
  }

  // optional int64 skillId = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activityworldTreasureMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 monsterID = 2;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->monsterid(), target);
  }

  // optional int32 appearWeight = 3;
  if (has_appearweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appearweight(), target);
  }

  // optional int64 skillId = 4;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activityworldTreasureMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 monsterID = 2;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->monsterid());
    }

    // optional int32 appearWeight = 3;
    if (has_appearweight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appearweight());
    }

    // optional int64 skillId = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activityworldTreasureMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activityworldTreasureMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activityworldTreasureMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activityworldTreasureMonster::MergeFrom(const activityworldTreasureMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_appearweight()) {
      set_appearweight(from.appearweight());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activityworldTreasureMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activityworldTreasureMonster::CopyFrom(const activityworldTreasureMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activityworldTreasureMonster::IsInitialized() const {

  return true;
}

void activityworldTreasureMonster::Swap(activityworldTreasureMonster* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(appearweight_, other->appearweight_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activityworldTreasureMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activityworldTreasureMonster_descriptor_;
  metadata.reflection = activityworldTreasureMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activityworldTreasureMonster::kActivityworldTreasureMonsterListFieldNumber;
#endif  // !_MSC_VER

Sheet_activityworldTreasureMonster::Sheet_activityworldTreasureMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activityworldTreasureMonster::InitAsDefaultInstance() {
}

Sheet_activityworldTreasureMonster::Sheet_activityworldTreasureMonster(const Sheet_activityworldTreasureMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activityworldTreasureMonster::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activityworldTreasureMonster::~Sheet_activityworldTreasureMonster() {
  SharedDtor();
}

void Sheet_activityworldTreasureMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activityworldTreasureMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activityworldTreasureMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activityworldTreasureMonster_descriptor_;
}

const Sheet_activityworldTreasureMonster& Sheet_activityworldTreasureMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activityworldTreasureMonster* Sheet_activityworldTreasureMonster::default_instance_ = NULL;

Sheet_activityworldTreasureMonster* Sheet_activityworldTreasureMonster::New() const {
  return new Sheet_activityworldTreasureMonster;
}

void Sheet_activityworldTreasureMonster::Clear() {
  activityworldtreasuremonster_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activityworldTreasureMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activityworldTreasureMonster activityworldTreasureMonster_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activityworldTreasureMonster_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activityworldtreasuremonster_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activityworldTreasureMonster_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activityworldTreasureMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activityworldTreasureMonster activityworldTreasureMonster_List = 1;
  for (int i = 0; i < this->activityworldtreasuremonster_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activityworldtreasuremonster_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activityworldTreasureMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activityworldTreasureMonster activityworldTreasureMonster_List = 1;
  for (int i = 0; i < this->activityworldtreasuremonster_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activityworldtreasuremonster_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activityworldTreasureMonster::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activityworldTreasureMonster activityworldTreasureMonster_List = 1;
  total_size += 1 * this->activityworldtreasuremonster_list_size();
  for (int i = 0; i < this->activityworldtreasuremonster_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activityworldtreasuremonster_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activityworldTreasureMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activityworldTreasureMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activityworldTreasureMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activityworldTreasureMonster::MergeFrom(const Sheet_activityworldTreasureMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  activityworldtreasuremonster_list_.MergeFrom(from.activityworldtreasuremonster_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activityworldTreasureMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activityworldTreasureMonster::CopyFrom(const Sheet_activityworldTreasureMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activityworldTreasureMonster::IsInitialized() const {

  return true;
}

void Sheet_activityworldTreasureMonster::Swap(Sheet_activityworldTreasureMonster* other) {
  if (other != this) {
    activityworldtreasuremonster_list_.Swap(&other->activityworldtreasuremonster_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activityworldTreasureMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activityworldTreasureMonster_descriptor_;
  metadata.reflection = Sheet_activityworldTreasureMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activitylosttempleConstant::kIdFieldNumber;
const int activitylosttempleConstant::kConstantdataFieldNumber;
const int activitylosttempleConstant::kStringdataFieldNumber;
#endif  // !_MSC_VER

activitylosttempleConstant::activitylosttempleConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activitylosttempleConstant::InitAsDefaultInstance() {
}

activitylosttempleConstant::activitylosttempleConstant(const activitylosttempleConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activitylosttempleConstant::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  constantdata_ = GOOGLE_LONGLONG(0);
  stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activitylosttempleConstant::~activitylosttempleConstant() {
  SharedDtor();
}

void activitylosttempleConstant::SharedDtor() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (this != default_instance_) {
  }
}

void activitylosttempleConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activitylosttempleConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activitylosttempleConstant_descriptor_;
}

const activitylosttempleConstant& activitylosttempleConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

activitylosttempleConstant* activitylosttempleConstant::default_instance_ = NULL;

activitylosttempleConstant* activitylosttempleConstant::New() const {
  return new activitylosttempleConstant;
}

void activitylosttempleConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    constantdata_ = GOOGLE_LONGLONG(0);
    if (has_stringdata()) {
      if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
        stringdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activitylosttempleConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_constantdata;
        break;
      }

      // optional int64 constantdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_constantdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &constantdata_)));
          set_has_constantdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stringdata;
        break;
      }

      // optional string stringdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringdata().data(), this->stringdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activitylosttempleConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 constantdata = 2;
  if (has_constantdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->constantdata(), output);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stringdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activitylosttempleConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 constantdata = 2;
  if (has_constantdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->constantdata(), target);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stringdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activitylosttempleConstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 constantdata = 2;
    if (has_constantdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->constantdata());
    }

    // optional string stringdata = 3;
    if (has_stringdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activitylosttempleConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activitylosttempleConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activitylosttempleConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activitylosttempleConstant::MergeFrom(const activitylosttempleConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_constantdata()) {
      set_constantdata(from.constantdata());
    }
    if (from.has_stringdata()) {
      set_stringdata(from.stringdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activitylosttempleConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activitylosttempleConstant::CopyFrom(const activitylosttempleConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activitylosttempleConstant::IsInitialized() const {

  return true;
}

void activitylosttempleConstant::Swap(activitylosttempleConstant* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(constantdata_, other->constantdata_);
    std::swap(stringdata_, other->stringdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activitylosttempleConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activitylosttempleConstant_descriptor_;
  metadata.reflection = activitylosttempleConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_activitylosttempleConstant::kActivitylosttempleConstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_activitylosttempleConstant::Sheet_activitylosttempleConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_activitylosttempleConstant::InitAsDefaultInstance() {
}

Sheet_activitylosttempleConstant::Sheet_activitylosttempleConstant(const Sheet_activitylosttempleConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_activitylosttempleConstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_activitylosttempleConstant::~Sheet_activitylosttempleConstant() {
  SharedDtor();
}

void Sheet_activitylosttempleConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_activitylosttempleConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_activitylosttempleConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_activitylosttempleConstant_descriptor_;
}

const Sheet_activitylosttempleConstant& Sheet_activitylosttempleConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();
  return *default_instance_;
}

Sheet_activitylosttempleConstant* Sheet_activitylosttempleConstant::default_instance_ = NULL;

Sheet_activitylosttempleConstant* Sheet_activitylosttempleConstant::New() const {
  return new Sheet_activitylosttempleConstant;
}

void Sheet_activitylosttempleConstant::Clear() {
  activitylosttempleconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_activitylosttempleConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.activitylosttempleConstant activitylosttempleConstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitylosttempleConstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitylosttempleconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activitylosttempleConstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_activitylosttempleConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.activitylosttempleConstant activitylosttempleConstant_List = 1;
  for (int i = 0; i < this->activitylosttempleconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activitylosttempleconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_activitylosttempleConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.activitylosttempleConstant activitylosttempleConstant_List = 1;
  for (int i = 0; i < this->activitylosttempleconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activitylosttempleconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_activitylosttempleConstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.activitylosttempleConstant activitylosttempleConstant_List = 1;
  total_size += 1 * this->activitylosttempleconstant_list_size();
  for (int i = 0; i < this->activitylosttempleconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitylosttempleconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_activitylosttempleConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_activitylosttempleConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_activitylosttempleConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_activitylosttempleConstant::MergeFrom(const Sheet_activitylosttempleConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitylosttempleconstant_list_.MergeFrom(from.activitylosttempleconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_activitylosttempleConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_activitylosttempleConstant::CopyFrom(const Sheet_activitylosttempleConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_activitylosttempleConstant::IsInitialized() const {

  return true;
}

void Sheet_activitylosttempleConstant::Swap(Sheet_activitylosttempleConstant* other) {
  if (other != this) {
    activitylosttempleconstant_list_.Swap(&other->activitylosttempleconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_activitylosttempleConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_activitylosttempleConstant_descriptor_;
  metadata.reflection = Sheet_activitylosttempleConstant_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
