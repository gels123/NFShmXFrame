// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "boss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* bossrareItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bossrareItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_bossrareItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_bossrareItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* bossboss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bossboss_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_bossboss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_bossboss_reflection_ = NULL;
const ::google::protobuf::Descriptor* bossbosstypegroupDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bossbosstypegroupDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* bossbosstype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bossbosstype_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_bossbosstype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_bossbosstype_reflection_ = NULL;
const ::google::protobuf::Descriptor* bosslayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bosslayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_bosslayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_bosslayer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_boss_2eproto() {
  protobuf_AddDesc_boss_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "boss.proto");
  GOOGLE_CHECK(file != NULL);
  bossrareItem_descriptor_ = file->message_type(0);
  static const int bossrareItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossrareItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossrareItem, top_),
  };
  bossrareItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bossrareItem_descriptor_,
      bossrareItem::default_instance_,
      bossrareItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossrareItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossrareItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bossrareItem));
  Sheet_bossrareItem_descriptor_ = file->message_type(1);
  static const int Sheet_bossrareItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_bossrareItem, bossrareitem_list_),
  };
  Sheet_bossrareItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_bossrareItem_descriptor_,
      Sheet_bossrareItem::default_instance_,
      Sheet_bossrareItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_bossrareItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_bossrareItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_bossrareItem));
  bossboss_descriptor_ = file->message_type(2);
  static const int bossboss_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossboss, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossboss, bosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossboss, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossboss, classorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossboss, sceneorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossboss, duplicateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossboss, peacemask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossboss, pointid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossboss, group_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossboss, flashtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossboss, retrievegiftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossboss, notimes_),
  };
  bossboss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bossboss_descriptor_,
      bossboss::default_instance_,
      bossboss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossboss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossboss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bossboss));
  Sheet_bossboss_descriptor_ = file->message_type(3);
  static const int Sheet_bossboss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_bossboss, bossboss_list_),
  };
  Sheet_bossboss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_bossboss_descriptor_,
      Sheet_bossboss::default_instance_,
      Sheet_bossboss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_bossboss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_bossboss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_bossboss));
  bossbosstypegroupDesc_descriptor_ = file->message_type(4);
  static const int bossbosstypegroupDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstypegroupDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstypegroupDesc, times_),
  };
  bossbosstypegroupDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bossbosstypegroupDesc_descriptor_,
      bossbosstypegroupDesc::default_instance_,
      bossbosstypegroupDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstypegroupDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstypegroupDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bossbosstypegroupDesc));
  bossbosstype_descriptor_ = file->message_type(5);
  static const int bossbosstype_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, bosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, maptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, duplicategroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, privilegetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, callingcardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, entertimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, costnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, bosstimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, additemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, canhelp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, qkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, retrieveddays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, group_),
  };
  bossbosstype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bossbosstype_descriptor_,
      bossbosstype::default_instance_,
      bossbosstype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossbosstype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bossbosstype));
  Sheet_bossbosstype_descriptor_ = file->message_type(6);
  static const int Sheet_bossbosstype_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_bossbosstype, bossbosstype_list_),
  };
  Sheet_bossbosstype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_bossbosstype_descriptor_,
      Sheet_bossbosstype::default_instance_,
      Sheet_bossbosstype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_bossbosstype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_bossbosstype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_bossbosstype));
  bosslayer_descriptor_ = file->message_type(7);
  static const int bosslayer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bosslayer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bosslayer, bosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bosslayer, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bosslayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bosslayer, entercondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bosslayer, unlockcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bosslayer, mapid_),
  };
  bosslayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bosslayer_descriptor_,
      bosslayer::default_instance_,
      bosslayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bosslayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bosslayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bosslayer));
  Sheet_bosslayer_descriptor_ = file->message_type(8);
  static const int Sheet_bosslayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_bosslayer, bosslayer_list_),
  };
  Sheet_bosslayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_bosslayer_descriptor_,
      Sheet_bosslayer::default_instance_,
      Sheet_bosslayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_bosslayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_bosslayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_bosslayer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_boss_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bossrareItem_descriptor_, &bossrareItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_bossrareItem_descriptor_, &Sheet_bossrareItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bossboss_descriptor_, &bossboss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_bossboss_descriptor_, &Sheet_bossboss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bossbosstypegroupDesc_descriptor_, &bossbosstypegroupDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bossbosstype_descriptor_, &bossbosstype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_bossbosstype_descriptor_, &Sheet_bossbosstype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bosslayer_descriptor_, &bosslayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_bosslayer_descriptor_, &Sheet_bosslayer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_boss_2eproto() {
  delete bossrareItem::default_instance_;
  delete bossrareItem_reflection_;
  delete Sheet_bossrareItem::default_instance_;
  delete Sheet_bossrareItem_reflection_;
  delete bossboss::default_instance_;
  delete bossboss_reflection_;
  delete Sheet_bossboss::default_instance_;
  delete Sheet_bossboss_reflection_;
  delete bossbosstypegroupDesc::default_instance_;
  delete bossbosstypegroupDesc_reflection_;
  delete bossbosstype::default_instance_;
  delete bossbosstype_reflection_;
  delete Sheet_bossbosstype::default_instance_;
  delete Sheet_bossbosstype_reflection_;
  delete bosslayer::default_instance_;
  delete bosslayer_reflection_;
  delete Sheet_bosslayer::default_instance_;
  delete Sheet_bosslayer_reflection_;
}

void protobuf_AddDesc_boss_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nboss.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"K\n\014bossrareItem\022\034\n\006itemID\030\001 \001(\003B\014\302"
    "\377\024\010\347\211\251\345\223\201ID\022\035\n\003top\030\002 \001(\005B\020\302\377\024\014\346\230\257\345\220\246\347\275\256\351"
    "\241\266\"N\n\022Sheet_bossrareItem\0228\n\021bossrareItem"
    "_List\030\001 \003(\0132\026.proto_ff.bossrareItemB\005\210\301\024"
    "\330\004\"\263\003\n\010bossboss\022\026\n\002id\030\001 \001(\005B\n\302\377\024\006bossID\022"
    " \n\010bossType\030\002 \001(\005B\016\302\377\024\nBOSS\347\261\273\345\236\213\022\037\n\tmon"
    "sterID\030\003 \001(\005B\014\302\377\024\010\346\200\252\347\211\251ID\022\036\n\nclassOrder"
    "\030\004 \001(\005B\n\302\377\024\006\351\230\266\346\254\241\022$\n\nsceneOrder\030\005 \001(\005B\020"
    "\302\377\024\014\346\211\200\345\261\236\345\261\202\347\272\247\022!\n\013duplicateID\030\006 \001(\005B\014\302"
    "\377\024\010\345\211\257\346\234\254ID\022#\n\tpeaceMask\030\007 \001(\005B\020\302\377\024\014\345\222\214\345"
    "\271\263\346\240\207\350\256\260\022\036\n\007pointID\030\010 \001(\005B\r\302\377\024\t\344\275\215\347\275\256\347\202\271"
    "\022!\n\ngroup_type\030\t \001(\005B\r\302\377\024\t\347\273\204\347\261\273\345\236\213\022#\n\tf"
    "lashTime\030\n \001(\005B\020\302\377\024\014\345\210\267\346\226\260\351\227\264\351\232\224\022*\n\016retr"
    "ieveGiftID\030\013 \001(\005B\022\302\377\024\016\346\211\276\345\233\236\347\244\274\345\214\205id\022*\n\007"
    "noTimes\030\014 \001(\005B\031\302\377\024\025\346\230\257\345\220\246\344\270\215\346\266\210\350\200\227\346\254\241\346\225\260"
    "\"A\n\016Sheet_bossboss\022/\n\rbossboss_List\030\001 \003("
    "\0132\022.proto_ff.bossbossB\004\210\301\024P\"L\n\025bossbosst"
    "ypegroupDesc\022\030\n\004type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\031"
    "\n\005times\030\002 \001(\005B\n\302\377\024\006\346\254\241\346\225\260\"\260\005\n\014bossbossty"
    "pe\022\037\n\010bossType\030\001 \001(\005B\r\302\377\024\t\346\200\273\347\261\273\345\236\213\022!\n\007m"
    "apType\030\002 \001(\005B\020\302\377\024\014\345\234\260\345\233\276\347\261\273\345\236\213\022&\n\nfuncti"
    "onId\030\003 \001(\005B\022\302\377\024\016\345\212\237\350\203\275\350\247\243\351\224\201ID\022)\n\020duplic"
    "ateGroupID\030\004 \001(\005B\017\302\377\024\013\345\211\257\346\234\254\347\273\204ID\022\'\n\rpri"
    "vilegeType\030\005 \001(\005B\020\302\377\024\014\347\211\271\346\235\203\347\261\273\345\236\213\022&\n\rca"
    "llingCardId\030\006 \001(\003B\017\302\377\024\013\345\217\254\345\224\244\345\215\241id\022$\n\nen"
    "terTimes\030\007 \001(\005B\020\302\377\024\014\350\277\233\345\205\245\346\254\241\346\225\260\022(\n\010cost"
    "item\030\010 \001(\005B\026\302\377\024\022\350\277\233\345\205\245\346\266\210\350\200\227\347\211\251\345\223\201\0221\n\007co"
    "stnum\030\t \001(\tB \302\377\024\030\350\277\233\345\205\245\346\266\210\350\200\227\347\211\251\345\223\201\346\225\260\351\207"
    "\217\220\301\024<\022!\n\tbossTimes\030\n \001(\005B\016\302\377\024\nboss\346\254\241\346\225\260"
    "\022+\n\taddItemID\030\013 \001(\005B\030\302\377\024\024\345\242\236\345\212\240\346\254\241\346\225\260\347\211\251"
    "\345\223\201ID\022\'\n\007canhelp\030\014 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\345\217\257\344\273\245"
    "\346\217\264\345\212\251\022+\n\005qkill\030\r \001(\005B\034\302\377\024\030\346\230\257\345\220\246\346\224\257\346\214\201\345"
    "\277\253\351\200\237\345\207\273\346\235\200\022\'\n\rretrievedDays\030\016 \001(\005B\020\302\377\024\014"
    "\346\211\276\345\233\236\345\244\251\346\225\260\022%\n\005skill\030\017 \001(\005B\026\302\377\024\022\347\272\263\345\205\245\345"
    "\205\250\346\234\215\351\246\226\346\235\200\022\?\n\005group\030\020 \003(\0132\037.proto_ff.bo"
    "ssbosstypegroupDescB\017\302\377\024\007Boss\347\273\204\210\301\024\003\"M\n\022"
    "Sheet_bossbosstype\0227\n\021bossbosstype_List\030"
    "\001 \003(\0132\026.proto_ff.bossbosstypeB\004\210\301\024\024\"\360\001\n\t"
    "bosslayer\022\022\n\002ID\030\001 \001(\005B\006\302\377\024\002id\022\034\n\010bossTyp"
    "e\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\031\n\005order\030\003 \001(\005B\n\302\377\024\006"
    "\346\216\222\345\272\217\022\034\n\004name\030\004 \001(\tB\016\302\377\024\006\345\221\275\345\220\215\220\301\024<\022,\n\016"
    "enterCondition\030\005 \001(\tB\024\302\377\024\014\350\277\233\345\205\245\346\235\241\344\273\266\220\301"
    "\024<\022-\n\017unlockCondition\030\006 \001(\tB\024\302\377\024\014\350\247\243\351\224\201\346"
    "\235\241\344\273\266\220\301\024<\022\033\n\005mapID\030\007 \001(\005B\014\302\377\024\010\345\234\260\345\233\276ID\"D"
    "\n\017Sheet_bosslayer\0221\n\016bosslayer_List\030\001 \003("
    "\0132\023.proto_ff.bosslayerB\004\210\301\024\024", 1868);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "boss.proto", &protobuf_RegisterTypes);
  bossrareItem::default_instance_ = new bossrareItem();
  Sheet_bossrareItem::default_instance_ = new Sheet_bossrareItem();
  bossboss::default_instance_ = new bossboss();
  Sheet_bossboss::default_instance_ = new Sheet_bossboss();
  bossbosstypegroupDesc::default_instance_ = new bossbosstypegroupDesc();
  bossbosstype::default_instance_ = new bossbosstype();
  Sheet_bossbosstype::default_instance_ = new Sheet_bossbosstype();
  bosslayer::default_instance_ = new bosslayer();
  Sheet_bosslayer::default_instance_ = new Sheet_bosslayer();
  bossrareItem::default_instance_->InitAsDefaultInstance();
  Sheet_bossrareItem::default_instance_->InitAsDefaultInstance();
  bossboss::default_instance_->InitAsDefaultInstance();
  Sheet_bossboss::default_instance_->InitAsDefaultInstance();
  bossbosstypegroupDesc::default_instance_->InitAsDefaultInstance();
  bossbosstype::default_instance_->InitAsDefaultInstance();
  Sheet_bossbosstype::default_instance_->InitAsDefaultInstance();
  bosslayer::default_instance_->InitAsDefaultInstance();
  Sheet_bosslayer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_boss_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_boss_2eproto {
  StaticDescriptorInitializer_boss_2eproto() {
    protobuf_AddDesc_boss_2eproto();
  }
} static_descriptor_initializer_boss_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int bossrareItem::kItemIDFieldNumber;
const int bossrareItem::kTopFieldNumber;
#endif  // !_MSC_VER

bossrareItem::bossrareItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bossrareItem::InitAsDefaultInstance() {
}

bossrareItem::bossrareItem(const bossrareItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bossrareItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  top_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bossrareItem::~bossrareItem() {
  SharedDtor();
}

void bossrareItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bossrareItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bossrareItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bossrareItem_descriptor_;
}

const bossrareItem& bossrareItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_2eproto();
  return *default_instance_;
}

bossrareItem* bossrareItem::default_instance_ = NULL;

bossrareItem* bossrareItem::New() const {
  return new bossrareItem;
}

void bossrareItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_LONGLONG(0);
    top_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bossrareItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_top;
        break;
      }

      // optional int32 top = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bossrareItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->itemid(), output);
  }

  // optional int32 top = 2;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->top(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bossrareItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->itemid(), target);
  }

  // optional int32 top = 2;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->top(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bossrareItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 top = 2;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bossrareItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bossrareItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bossrareItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bossrareItem::MergeFrom(const bossrareItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bossrareItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bossrareItem::CopyFrom(const bossrareItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bossrareItem::IsInitialized() const {

  return true;
}

void bossrareItem::Swap(bossrareItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(top_, other->top_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bossrareItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bossrareItem_descriptor_;
  metadata.reflection = bossrareItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_bossrareItem::kBossrareItemListFieldNumber;
#endif  // !_MSC_VER

Sheet_bossrareItem::Sheet_bossrareItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_bossrareItem::InitAsDefaultInstance() {
}

Sheet_bossrareItem::Sheet_bossrareItem(const Sheet_bossrareItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_bossrareItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_bossrareItem::~Sheet_bossrareItem() {
  SharedDtor();
}

void Sheet_bossrareItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_bossrareItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_bossrareItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_bossrareItem_descriptor_;
}

const Sheet_bossrareItem& Sheet_bossrareItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_2eproto();
  return *default_instance_;
}

Sheet_bossrareItem* Sheet_bossrareItem::default_instance_ = NULL;

Sheet_bossrareItem* Sheet_bossrareItem::New() const {
  return new Sheet_bossrareItem;
}

void Sheet_bossrareItem::Clear() {
  bossrareitem_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_bossrareItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.bossrareItem bossrareItem_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossrareItem_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossrareitem_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bossrareItem_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_bossrareItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.bossrareItem bossrareItem_List = 1;
  for (int i = 0; i < this->bossrareitem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bossrareitem_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_bossrareItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.bossrareItem bossrareItem_List = 1;
  for (int i = 0; i < this->bossrareitem_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bossrareitem_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_bossrareItem::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.bossrareItem bossrareItem_List = 1;
  total_size += 1 * this->bossrareitem_list_size();
  for (int i = 0; i < this->bossrareitem_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossrareitem_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_bossrareItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_bossrareItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_bossrareItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_bossrareItem::MergeFrom(const Sheet_bossrareItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossrareitem_list_.MergeFrom(from.bossrareitem_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_bossrareItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_bossrareItem::CopyFrom(const Sheet_bossrareItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_bossrareItem::IsInitialized() const {

  return true;
}

void Sheet_bossrareItem::Swap(Sheet_bossrareItem* other) {
  if (other != this) {
    bossrareitem_list_.Swap(&other->bossrareitem_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_bossrareItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_bossrareItem_descriptor_;
  metadata.reflection = Sheet_bossrareItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bossboss::kIdFieldNumber;
const int bossboss::kBossTypeFieldNumber;
const int bossboss::kMonsterIDFieldNumber;
const int bossboss::kClassOrderFieldNumber;
const int bossboss::kSceneOrderFieldNumber;
const int bossboss::kDuplicateIDFieldNumber;
const int bossboss::kPeaceMaskFieldNumber;
const int bossboss::kPointIDFieldNumber;
const int bossboss::kGroupTypeFieldNumber;
const int bossboss::kFlashTimeFieldNumber;
const int bossboss::kRetrieveGiftIDFieldNumber;
const int bossboss::kNoTimesFieldNumber;
#endif  // !_MSC_VER

bossboss::bossboss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bossboss::InitAsDefaultInstance() {
}

bossboss::bossboss(const bossboss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bossboss::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  bosstype_ = 0;
  monsterid_ = 0;
  classorder_ = 0;
  sceneorder_ = 0;
  duplicateid_ = 0;
  peacemask_ = 0;
  pointid_ = 0;
  group_type_ = 0;
  flashtime_ = 0;
  retrievegiftid_ = 0;
  notimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bossboss::~bossboss() {
  SharedDtor();
}

void bossboss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bossboss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bossboss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bossboss_descriptor_;
}

const bossboss& bossboss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_2eproto();
  return *default_instance_;
}

bossboss* bossboss::default_instance_ = NULL;

bossboss* bossboss::New() const {
  return new bossboss;
}

void bossboss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    bosstype_ = 0;
    monsterid_ = 0;
    classorder_ = 0;
    sceneorder_ = 0;
    duplicateid_ = 0;
    peacemask_ = 0;
    pointid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    group_type_ = 0;
    flashtime_ = 0;
    retrievegiftid_ = 0;
    notimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bossboss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossType;
        break;
      }

      // optional int32 bossType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosstype_)));
          set_has_bosstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monsterID;
        break;
      }

      // optional int32 monsterID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_classOrder;
        break;
      }

      // optional int32 classOrder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_classOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classorder_)));
          set_has_classorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sceneOrder;
        break;
      }

      // optional int32 sceneOrder = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneorder_)));
          set_has_sceneorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_duplicateID;
        break;
      }

      // optional int32 duplicateID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duplicateid_)));
          set_has_duplicateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_peaceMask;
        break;
      }

      // optional int32 peaceMask = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peaceMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peacemask_)));
          set_has_peacemask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pointID;
        break;
      }

      // optional int32 pointID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointid_)));
          set_has_pointid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_group_type;
        break;
      }

      // optional int32 group_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_type_)));
          set_has_group_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_flashTime;
        break;
      }

      // optional int32 flashTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flashTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flashtime_)));
          set_has_flashtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_retrieveGiftID;
        break;
      }

      // optional int32 retrieveGiftID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retrieveGiftID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retrievegiftid_)));
          set_has_retrievegiftid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_noTimes;
        break;
      }

      // optional int32 noTimes = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notimes_)));
          set_has_notimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bossboss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 bossType = 2;
  if (has_bosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bosstype(), output);
  }

  // optional int32 monsterID = 3;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->monsterid(), output);
  }

  // optional int32 classOrder = 4;
  if (has_classorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->classorder(), output);
  }

  // optional int32 sceneOrder = 5;
  if (has_sceneorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sceneorder(), output);
  }

  // optional int32 duplicateID = 6;
  if (has_duplicateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->duplicateid(), output);
  }

  // optional int32 peaceMask = 7;
  if (has_peacemask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->peacemask(), output);
  }

  // optional int32 pointID = 8;
  if (has_pointid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pointid(), output);
  }

  // optional int32 group_type = 9;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->group_type(), output);
  }

  // optional int32 flashTime = 10;
  if (has_flashtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->flashtime(), output);
  }

  // optional int32 retrieveGiftID = 11;
  if (has_retrievegiftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->retrievegiftid(), output);
  }

  // optional int32 noTimes = 12;
  if (has_notimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->notimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bossboss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 bossType = 2;
  if (has_bosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bosstype(), target);
  }

  // optional int32 monsterID = 3;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->monsterid(), target);
  }

  // optional int32 classOrder = 4;
  if (has_classorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->classorder(), target);
  }

  // optional int32 sceneOrder = 5;
  if (has_sceneorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sceneorder(), target);
  }

  // optional int32 duplicateID = 6;
  if (has_duplicateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->duplicateid(), target);
  }

  // optional int32 peaceMask = 7;
  if (has_peacemask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->peacemask(), target);
  }

  // optional int32 pointID = 8;
  if (has_pointid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pointid(), target);
  }

  // optional int32 group_type = 9;
  if (has_group_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->group_type(), target);
  }

  // optional int32 flashTime = 10;
  if (has_flashtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->flashtime(), target);
  }

  // optional int32 retrieveGiftID = 11;
  if (has_retrievegiftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->retrievegiftid(), target);
  }

  // optional int32 noTimes = 12;
  if (has_notimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->notimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bossboss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 bossType = 2;
    if (has_bosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosstype());
    }

    // optional int32 monsterID = 3;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterid());
    }

    // optional int32 classOrder = 4;
    if (has_classorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classorder());
    }

    // optional int32 sceneOrder = 5;
    if (has_sceneorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneorder());
    }

    // optional int32 duplicateID = 6;
    if (has_duplicateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duplicateid());
    }

    // optional int32 peaceMask = 7;
    if (has_peacemask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peacemask());
    }

    // optional int32 pointID = 8;
    if (has_pointid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 group_type = 9;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_type());
    }

    // optional int32 flashTime = 10;
    if (has_flashtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flashtime());
    }

    // optional int32 retrieveGiftID = 11;
    if (has_retrievegiftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retrievegiftid());
    }

    // optional int32 noTimes = 12;
    if (has_notimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bossboss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bossboss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bossboss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bossboss::MergeFrom(const bossboss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bosstype()) {
      set_bosstype(from.bosstype());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_classorder()) {
      set_classorder(from.classorder());
    }
    if (from.has_sceneorder()) {
      set_sceneorder(from.sceneorder());
    }
    if (from.has_duplicateid()) {
      set_duplicateid(from.duplicateid());
    }
    if (from.has_peacemask()) {
      set_peacemask(from.peacemask());
    }
    if (from.has_pointid()) {
      set_pointid(from.pointid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_flashtime()) {
      set_flashtime(from.flashtime());
    }
    if (from.has_retrievegiftid()) {
      set_retrievegiftid(from.retrievegiftid());
    }
    if (from.has_notimes()) {
      set_notimes(from.notimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bossboss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bossboss::CopyFrom(const bossboss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bossboss::IsInitialized() const {

  return true;
}

void bossboss::Swap(bossboss* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bosstype_, other->bosstype_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(classorder_, other->classorder_);
    std::swap(sceneorder_, other->sceneorder_);
    std::swap(duplicateid_, other->duplicateid_);
    std::swap(peacemask_, other->peacemask_);
    std::swap(pointid_, other->pointid_);
    std::swap(group_type_, other->group_type_);
    std::swap(flashtime_, other->flashtime_);
    std::swap(retrievegiftid_, other->retrievegiftid_);
    std::swap(notimes_, other->notimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bossboss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bossboss_descriptor_;
  metadata.reflection = bossboss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_bossboss::kBossbossListFieldNumber;
#endif  // !_MSC_VER

Sheet_bossboss::Sheet_bossboss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_bossboss::InitAsDefaultInstance() {
}

Sheet_bossboss::Sheet_bossboss(const Sheet_bossboss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_bossboss::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_bossboss::~Sheet_bossboss() {
  SharedDtor();
}

void Sheet_bossboss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_bossboss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_bossboss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_bossboss_descriptor_;
}

const Sheet_bossboss& Sheet_bossboss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_2eproto();
  return *default_instance_;
}

Sheet_bossboss* Sheet_bossboss::default_instance_ = NULL;

Sheet_bossboss* Sheet_bossboss::New() const {
  return new Sheet_bossboss;
}

void Sheet_bossboss::Clear() {
  bossboss_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_bossboss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.bossboss bossboss_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossboss_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossboss_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bossboss_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_bossboss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.bossboss bossboss_List = 1;
  for (int i = 0; i < this->bossboss_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bossboss_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_bossboss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.bossboss bossboss_List = 1;
  for (int i = 0; i < this->bossboss_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bossboss_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_bossboss::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.bossboss bossboss_List = 1;
  total_size += 1 * this->bossboss_list_size();
  for (int i = 0; i < this->bossboss_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossboss_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_bossboss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_bossboss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_bossboss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_bossboss::MergeFrom(const Sheet_bossboss& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossboss_list_.MergeFrom(from.bossboss_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_bossboss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_bossboss::CopyFrom(const Sheet_bossboss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_bossboss::IsInitialized() const {

  return true;
}

void Sheet_bossboss::Swap(Sheet_bossboss* other) {
  if (other != this) {
    bossboss_list_.Swap(&other->bossboss_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_bossboss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_bossboss_descriptor_;
  metadata.reflection = Sheet_bossboss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bossbosstypegroupDesc::kTypeFieldNumber;
const int bossbosstypegroupDesc::kTimesFieldNumber;
#endif  // !_MSC_VER

bossbosstypegroupDesc::bossbosstypegroupDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bossbosstypegroupDesc::InitAsDefaultInstance() {
}

bossbosstypegroupDesc::bossbosstypegroupDesc(const bossbosstypegroupDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bossbosstypegroupDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bossbosstypegroupDesc::~bossbosstypegroupDesc() {
  SharedDtor();
}

void bossbosstypegroupDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bossbosstypegroupDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bossbosstypegroupDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bossbosstypegroupDesc_descriptor_;
}

const bossbosstypegroupDesc& bossbosstypegroupDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_2eproto();
  return *default_instance_;
}

bossbosstypegroupDesc* bossbosstypegroupDesc::default_instance_ = NULL;

bossbosstypegroupDesc* bossbosstypegroupDesc::New() const {
  return new bossbosstypegroupDesc;
}

void bossbosstypegroupDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bossbosstypegroupDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bossbosstypegroupDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bossbosstypegroupDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bossbosstypegroupDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bossbosstypegroupDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bossbosstypegroupDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bossbosstypegroupDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bossbosstypegroupDesc::MergeFrom(const bossbosstypegroupDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bossbosstypegroupDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bossbosstypegroupDesc::CopyFrom(const bossbosstypegroupDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bossbosstypegroupDesc::IsInitialized() const {

  return true;
}

void bossbosstypegroupDesc::Swap(bossbosstypegroupDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bossbosstypegroupDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bossbosstypegroupDesc_descriptor_;
  metadata.reflection = bossbosstypegroupDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bossbosstype::kBossTypeFieldNumber;
const int bossbosstype::kMapTypeFieldNumber;
const int bossbosstype::kFunctionIdFieldNumber;
const int bossbosstype::kDuplicateGroupIDFieldNumber;
const int bossbosstype::kPrivilegeTypeFieldNumber;
const int bossbosstype::kCallingCardIdFieldNumber;
const int bossbosstype::kEnterTimesFieldNumber;
const int bossbosstype::kCostitemFieldNumber;
const int bossbosstype::kCostnumFieldNumber;
const int bossbosstype::kBossTimesFieldNumber;
const int bossbosstype::kAddItemIDFieldNumber;
const int bossbosstype::kCanhelpFieldNumber;
const int bossbosstype::kQkillFieldNumber;
const int bossbosstype::kRetrievedDaysFieldNumber;
const int bossbosstype::kSkillFieldNumber;
const int bossbosstype::kGroupFieldNumber;
#endif  // !_MSC_VER

bossbosstype::bossbosstype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bossbosstype::InitAsDefaultInstance() {
}

bossbosstype::bossbosstype(const bossbosstype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bossbosstype::SharedCtor() {
  _cached_size_ = 0;
  bosstype_ = 0;
  maptype_ = 0;
  functionid_ = 0;
  duplicategroupid_ = 0;
  privilegetype_ = 0;
  callingcardid_ = GOOGLE_LONGLONG(0);
  entertimes_ = 0;
  costitem_ = 0;
  costnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bosstimes_ = 0;
  additemid_ = 0;
  canhelp_ = 0;
  qkill_ = 0;
  retrieveddays_ = 0;
  skill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bossbosstype::~bossbosstype() {
  SharedDtor();
}

void bossbosstype::SharedDtor() {
  if (costnum_ != &::google::protobuf::internal::kEmptyString) {
    delete costnum_;
  }
  if (this != default_instance_) {
  }
}

void bossbosstype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bossbosstype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bossbosstype_descriptor_;
}

const bossbosstype& bossbosstype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_2eproto();
  return *default_instance_;
}

bossbosstype* bossbosstype::default_instance_ = NULL;

bossbosstype* bossbosstype::New() const {
  return new bossbosstype;
}

void bossbosstype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bosstype_ = 0;
    maptype_ = 0;
    functionid_ = 0;
    duplicategroupid_ = 0;
    privilegetype_ = 0;
    callingcardid_ = GOOGLE_LONGLONG(0);
    entertimes_ = 0;
    costitem_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_costnum()) {
      if (costnum_ != &::google::protobuf::internal::kEmptyString) {
        costnum_->clear();
      }
    }
    bosstimes_ = 0;
    additemid_ = 0;
    canhelp_ = 0;
    qkill_ = 0;
    retrieveddays_ = 0;
    skill_ = 0;
  }
  group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bossbosstype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bossType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosstype_)));
          set_has_bosstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapType;
        break;
      }

      // optional int32 mapType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maptype_)));
          set_has_maptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_functionId;
        break;
      }

      // optional int32 functionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functionid_)));
          set_has_functionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duplicateGroupID;
        break;
      }

      // optional int32 duplicateGroupID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicateGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duplicategroupid_)));
          set_has_duplicategroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_privilegeType;
        break;
      }

      // optional int32 privilegeType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privilegeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &privilegetype_)));
          set_has_privilegetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_callingCardId;
        break;
      }

      // optional int64 callingCardId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callingCardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &callingcardid_)));
          set_has_callingcardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_enterTimes;
        break;
      }

      // optional int32 enterTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entertimes_)));
          set_has_entertimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_costitem;
        break;
      }

      // optional int32 costitem = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costitem_)));
          set_has_costitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_costnum;
        break;
      }

      // optional string costnum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_costnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_costnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->costnum().data(), this->costnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bossTimes;
        break;
      }

      // optional int32 bossTimes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosstimes_)));
          set_has_bosstimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_addItemID;
        break;
      }

      // optional int32 addItemID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &additemid_)));
          set_has_additemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_canhelp;
        break;
      }

      // optional int32 canhelp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canhelp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canhelp_)));
          set_has_canhelp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_qkill;
        break;
      }

      // optional int32 qkill = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qkill_)));
          set_has_qkill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_retrievedDays;
        break;
      }

      // optional int32 retrievedDays = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retrievedDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retrieveddays_)));
          set_has_retrieveddays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_skill;
        break;
      }

      // optional int32 skill = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_group;
        break;
      }

      // repeated .proto_ff.bossbosstypegroupDesc group = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_group;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bossbosstype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bossType = 1;
  if (has_bosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bosstype(), output);
  }

  // optional int32 mapType = 2;
  if (has_maptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maptype(), output);
  }

  // optional int32 functionId = 3;
  if (has_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->functionid(), output);
  }

  // optional int32 duplicateGroupID = 4;
  if (has_duplicategroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->duplicategroupid(), output);
  }

  // optional int32 privilegeType = 5;
  if (has_privilegetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->privilegetype(), output);
  }

  // optional int64 callingCardId = 6;
  if (has_callingcardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->callingcardid(), output);
  }

  // optional int32 enterTimes = 7;
  if (has_entertimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->entertimes(), output);
  }

  // optional int32 costitem = 8;
  if (has_costitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->costitem(), output);
  }

  // optional string costnum = 9;
  if (has_costnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->costnum().data(), this->costnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->costnum(), output);
  }

  // optional int32 bossTimes = 10;
  if (has_bosstimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bosstimes(), output);
  }

  // optional int32 addItemID = 11;
  if (has_additemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->additemid(), output);
  }

  // optional int32 canhelp = 12;
  if (has_canhelp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->canhelp(), output);
  }

  // optional int32 qkill = 13;
  if (has_qkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->qkill(), output);
  }

  // optional int32 retrievedDays = 14;
  if (has_retrieveddays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->retrieveddays(), output);
  }

  // optional int32 skill = 15;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->skill(), output);
  }

  // repeated .proto_ff.bossbosstypegroupDesc group = 16;
  for (int i = 0; i < this->group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->group(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bossbosstype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bossType = 1;
  if (has_bosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bosstype(), target);
  }

  // optional int32 mapType = 2;
  if (has_maptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maptype(), target);
  }

  // optional int32 functionId = 3;
  if (has_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->functionid(), target);
  }

  // optional int32 duplicateGroupID = 4;
  if (has_duplicategroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->duplicategroupid(), target);
  }

  // optional int32 privilegeType = 5;
  if (has_privilegetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->privilegetype(), target);
  }

  // optional int64 callingCardId = 6;
  if (has_callingcardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->callingcardid(), target);
  }

  // optional int32 enterTimes = 7;
  if (has_entertimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->entertimes(), target);
  }

  // optional int32 costitem = 8;
  if (has_costitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->costitem(), target);
  }

  // optional string costnum = 9;
  if (has_costnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->costnum().data(), this->costnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->costnum(), target);
  }

  // optional int32 bossTimes = 10;
  if (has_bosstimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bosstimes(), target);
  }

  // optional int32 addItemID = 11;
  if (has_additemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->additemid(), target);
  }

  // optional int32 canhelp = 12;
  if (has_canhelp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->canhelp(), target);
  }

  // optional int32 qkill = 13;
  if (has_qkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->qkill(), target);
  }

  // optional int32 retrievedDays = 14;
  if (has_retrieveddays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->retrieveddays(), target);
  }

  // optional int32 skill = 15;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->skill(), target);
  }

  // repeated .proto_ff.bossbosstypegroupDesc group = 16;
  for (int i = 0; i < this->group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->group(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bossbosstype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bossType = 1;
    if (has_bosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosstype());
    }

    // optional int32 mapType = 2;
    if (has_maptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maptype());
    }

    // optional int32 functionId = 3;
    if (has_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functionid());
    }

    // optional int32 duplicateGroupID = 4;
    if (has_duplicategroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duplicategroupid());
    }

    // optional int32 privilegeType = 5;
    if (has_privilegetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->privilegetype());
    }

    // optional int64 callingCardId = 6;
    if (has_callingcardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->callingcardid());
    }

    // optional int32 enterTimes = 7;
    if (has_entertimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entertimes());
    }

    // optional int32 costitem = 8;
    if (has_costitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costitem());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string costnum = 9;
    if (has_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->costnum());
    }

    // optional int32 bossTimes = 10;
    if (has_bosstimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosstimes());
    }

    // optional int32 addItemID = 11;
    if (has_additemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->additemid());
    }

    // optional int32 canhelp = 12;
    if (has_canhelp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canhelp());
    }

    // optional int32 qkill = 13;
    if (has_qkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qkill());
    }

    // optional int32 retrievedDays = 14;
    if (has_retrieveddays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retrieveddays());
    }

    // optional int32 skill = 15;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill());
    }

  }
  // repeated .proto_ff.bossbosstypegroupDesc group = 16;
  total_size += 2 * this->group_size();
  for (int i = 0; i < this->group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bossbosstype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bossbosstype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bossbosstype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bossbosstype::MergeFrom(const bossbosstype& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_.MergeFrom(from.group_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bosstype()) {
      set_bosstype(from.bosstype());
    }
    if (from.has_maptype()) {
      set_maptype(from.maptype());
    }
    if (from.has_functionid()) {
      set_functionid(from.functionid());
    }
    if (from.has_duplicategroupid()) {
      set_duplicategroupid(from.duplicategroupid());
    }
    if (from.has_privilegetype()) {
      set_privilegetype(from.privilegetype());
    }
    if (from.has_callingcardid()) {
      set_callingcardid(from.callingcardid());
    }
    if (from.has_entertimes()) {
      set_entertimes(from.entertimes());
    }
    if (from.has_costitem()) {
      set_costitem(from.costitem());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_costnum()) {
      set_costnum(from.costnum());
    }
    if (from.has_bosstimes()) {
      set_bosstimes(from.bosstimes());
    }
    if (from.has_additemid()) {
      set_additemid(from.additemid());
    }
    if (from.has_canhelp()) {
      set_canhelp(from.canhelp());
    }
    if (from.has_qkill()) {
      set_qkill(from.qkill());
    }
    if (from.has_retrieveddays()) {
      set_retrieveddays(from.retrieveddays());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bossbosstype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bossbosstype::CopyFrom(const bossbosstype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bossbosstype::IsInitialized() const {

  return true;
}

void bossbosstype::Swap(bossbosstype* other) {
  if (other != this) {
    std::swap(bosstype_, other->bosstype_);
    std::swap(maptype_, other->maptype_);
    std::swap(functionid_, other->functionid_);
    std::swap(duplicategroupid_, other->duplicategroupid_);
    std::swap(privilegetype_, other->privilegetype_);
    std::swap(callingcardid_, other->callingcardid_);
    std::swap(entertimes_, other->entertimes_);
    std::swap(costitem_, other->costitem_);
    std::swap(costnum_, other->costnum_);
    std::swap(bosstimes_, other->bosstimes_);
    std::swap(additemid_, other->additemid_);
    std::swap(canhelp_, other->canhelp_);
    std::swap(qkill_, other->qkill_);
    std::swap(retrieveddays_, other->retrieveddays_);
    std::swap(skill_, other->skill_);
    group_.Swap(&other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bossbosstype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bossbosstype_descriptor_;
  metadata.reflection = bossbosstype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_bossbosstype::kBossbosstypeListFieldNumber;
#endif  // !_MSC_VER

Sheet_bossbosstype::Sheet_bossbosstype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_bossbosstype::InitAsDefaultInstance() {
}

Sheet_bossbosstype::Sheet_bossbosstype(const Sheet_bossbosstype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_bossbosstype::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_bossbosstype::~Sheet_bossbosstype() {
  SharedDtor();
}

void Sheet_bossbosstype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_bossbosstype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_bossbosstype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_bossbosstype_descriptor_;
}

const Sheet_bossbosstype& Sheet_bossbosstype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_2eproto();
  return *default_instance_;
}

Sheet_bossbosstype* Sheet_bossbosstype::default_instance_ = NULL;

Sheet_bossbosstype* Sheet_bossbosstype::New() const {
  return new Sheet_bossbosstype;
}

void Sheet_bossbosstype::Clear() {
  bossbosstype_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_bossbosstype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.bossbosstype bossbosstype_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossbosstype_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossbosstype_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bossbosstype_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_bossbosstype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.bossbosstype bossbosstype_List = 1;
  for (int i = 0; i < this->bossbosstype_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bossbosstype_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_bossbosstype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.bossbosstype bossbosstype_List = 1;
  for (int i = 0; i < this->bossbosstype_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bossbosstype_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_bossbosstype::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.bossbosstype bossbosstype_List = 1;
  total_size += 1 * this->bossbosstype_list_size();
  for (int i = 0; i < this->bossbosstype_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossbosstype_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_bossbosstype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_bossbosstype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_bossbosstype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_bossbosstype::MergeFrom(const Sheet_bossbosstype& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossbosstype_list_.MergeFrom(from.bossbosstype_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_bossbosstype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_bossbosstype::CopyFrom(const Sheet_bossbosstype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_bossbosstype::IsInitialized() const {

  return true;
}

void Sheet_bossbosstype::Swap(Sheet_bossbosstype* other) {
  if (other != this) {
    bossbosstype_list_.Swap(&other->bossbosstype_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_bossbosstype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_bossbosstype_descriptor_;
  metadata.reflection = Sheet_bossbosstype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bosslayer::kIDFieldNumber;
const int bosslayer::kBossTypeFieldNumber;
const int bosslayer::kOrderFieldNumber;
const int bosslayer::kNameFieldNumber;
const int bosslayer::kEnterConditionFieldNumber;
const int bosslayer::kUnlockConditionFieldNumber;
const int bosslayer::kMapIDFieldNumber;
#endif  // !_MSC_VER

bosslayer::bosslayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bosslayer::InitAsDefaultInstance() {
}

bosslayer::bosslayer(const bosslayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bosslayer::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  bosstype_ = 0;
  order_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entercondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unlockcondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bosslayer::~bosslayer() {
  SharedDtor();
}

void bosslayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (entercondition_ != &::google::protobuf::internal::kEmptyString) {
    delete entercondition_;
  }
  if (unlockcondition_ != &::google::protobuf::internal::kEmptyString) {
    delete unlockcondition_;
  }
  if (this != default_instance_) {
  }
}

void bosslayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bosslayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bosslayer_descriptor_;
}

const bosslayer& bosslayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_2eproto();
  return *default_instance_;
}

bosslayer* bosslayer::default_instance_ = NULL;

bosslayer* bosslayer::New() const {
  return new bosslayer;
}

void bosslayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    bosstype_ = 0;
    order_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_entercondition()) {
      if (entercondition_ != &::google::protobuf::internal::kEmptyString) {
        entercondition_->clear();
      }
    }
    if (has_unlockcondition()) {
      if (unlockcondition_ != &::google::protobuf::internal::kEmptyString) {
        unlockcondition_->clear();
      }
    }
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bosslayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossType;
        break;
      }

      // optional int32 bossType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosstype_)));
          set_has_bosstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }

      // optional int32 order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_enterCondition;
        break;
      }

      // optional string enterCondition = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enterCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entercondition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entercondition().data(), this->entercondition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_unlockCondition;
        break;
      }

      // optional string unlockCondition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unlockCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unlockcondition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unlockcondition().data(), this->unlockcondition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mapID;
        break;
      }

      // optional int32 mapID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bosslayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 bossType = 2;
  if (has_bosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bosstype(), output);
  }

  // optional int32 order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string enterCondition = 5;
  if (has_entercondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entercondition().data(), this->entercondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->entercondition(), output);
  }

  // optional string unlockCondition = 6;
  if (has_unlockcondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unlockcondition().data(), this->unlockcondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->unlockcondition(), output);
  }

  // optional int32 mapID = 7;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bosslayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 bossType = 2;
  if (has_bosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bosstype(), target);
  }

  // optional int32 order = 3;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->order(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string enterCondition = 5;
  if (has_entercondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entercondition().data(), this->entercondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->entercondition(), target);
  }

  // optional string unlockCondition = 6;
  if (has_unlockcondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unlockcondition().data(), this->unlockcondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->unlockcondition(), target);
  }

  // optional int32 mapID = 7;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bosslayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 bossType = 2;
    if (has_bosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosstype());
    }

    // optional int32 order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string enterCondition = 5;
    if (has_entercondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entercondition());
    }

    // optional string unlockCondition = 6;
    if (has_unlockcondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unlockcondition());
    }

    // optional int32 mapID = 7;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bosslayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bosslayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bosslayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bosslayer::MergeFrom(const bosslayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bosstype()) {
      set_bosstype(from.bosstype());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_entercondition()) {
      set_entercondition(from.entercondition());
    }
    if (from.has_unlockcondition()) {
      set_unlockcondition(from.unlockcondition());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bosslayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bosslayer::CopyFrom(const bosslayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bosslayer::IsInitialized() const {

  return true;
}

void bosslayer::Swap(bosslayer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bosstype_, other->bosstype_);
    std::swap(order_, other->order_);
    std::swap(name_, other->name_);
    std::swap(entercondition_, other->entercondition_);
    std::swap(unlockcondition_, other->unlockcondition_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bosslayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bosslayer_descriptor_;
  metadata.reflection = bosslayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_bosslayer::kBosslayerListFieldNumber;
#endif  // !_MSC_VER

Sheet_bosslayer::Sheet_bosslayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_bosslayer::InitAsDefaultInstance() {
}

Sheet_bosslayer::Sheet_bosslayer(const Sheet_bosslayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_bosslayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_bosslayer::~Sheet_bosslayer() {
  SharedDtor();
}

void Sheet_bosslayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_bosslayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_bosslayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_bosslayer_descriptor_;
}

const Sheet_bosslayer& Sheet_bosslayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_2eproto();
  return *default_instance_;
}

Sheet_bosslayer* Sheet_bosslayer::default_instance_ = NULL;

Sheet_bosslayer* Sheet_bosslayer::New() const {
  return new Sheet_bosslayer;
}

void Sheet_bosslayer::Clear() {
  bosslayer_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_bosslayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.bosslayer bosslayer_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bosslayer_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bosslayer_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bosslayer_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_bosslayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.bosslayer bosslayer_List = 1;
  for (int i = 0; i < this->bosslayer_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bosslayer_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_bosslayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.bosslayer bosslayer_List = 1;
  for (int i = 0; i < this->bosslayer_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bosslayer_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_bosslayer::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.bosslayer bosslayer_List = 1;
  total_size += 1 * this->bosslayer_list_size();
  for (int i = 0; i < this->bosslayer_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bosslayer_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_bosslayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_bosslayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_bosslayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_bosslayer::MergeFrom(const Sheet_bosslayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  bosslayer_list_.MergeFrom(from.bosslayer_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_bosslayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_bosslayer::CopyFrom(const Sheet_bosslayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_bosslayer::IsInitialized() const {

  return true;
}

void Sheet_bosslayer::Swap(Sheet_bosslayer* other) {
  if (other != this) {
    bosslayer_list_.Swap(&other->bosslayer_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_bosslayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_bosslayer_descriptor_;
  metadata.reflection = Sheet_bosslayer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
