// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Battlepass.proto

#ifndef PROTOBUF_E_5fBattlepass_2eproto__INCLUDED
#define PROTOBUF_E_5fBattlepass_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_E_5fBattlepass_2eproto();
void protobuf_AssignDesc_E_5fBattlepass_2eproto();
void protobuf_ShutdownFile_E_5fBattlepass_2eproto();

class E_BattlepassBattlepass;
class Sheet_BattlepassBattlepass;
class E_BattlepassRewardItemDesc;
class E_BattlepassRewardProitemDesc;
class E_BattlepassReward;
class Sheet_BattlepassReward;
class E_BattlepassTask;
class Sheet_BattlepassTask;
class E_BattlepassShop;
class Sheet_BattlepassShop;

// ===================================================================

class E_BattlepassBattlepass : public ::google::protobuf::Message {
 public:
  E_BattlepassBattlepass();
  virtual ~E_BattlepassBattlepass();

  E_BattlepassBattlepass(const E_BattlepassBattlepass& from);

  inline E_BattlepassBattlepass& operator=(const E_BattlepassBattlepass& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_BattlepassBattlepass& default_instance();

  void Swap(E_BattlepassBattlepass* other);

  // implements Message ----------------------------------------------

  E_BattlepassBattlepass* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_BattlepassBattlepass& from);
  void MergeFrom(const E_BattlepassBattlepass& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_reward = 2;
  inline bool has_m_reward() const;
  inline void clear_m_reward();
  static const int kMRewardFieldNumber = 2;
  inline ::google::protobuf::int32 m_reward() const;
  inline void set_m_reward(::google::protobuf::int32 value);

  // optional int32 m_task = 3;
  inline bool has_m_task() const;
  inline void clear_m_task();
  static const int kMTaskFieldNumber = 3;
  inline ::google::protobuf::int32 m_task() const;
  inline void set_m_task(::google::protobuf::int32 value);

  // optional string m_taskNum = 4;
  inline bool has_m_tasknum() const;
  inline void clear_m_tasknum();
  static const int kMTaskNumFieldNumber = 4;
  inline const ::std::string& m_tasknum() const;
  inline void set_m_tasknum(const ::std::string& value);
  inline void set_m_tasknum(const char* value);
  inline void set_m_tasknum(const char* value, size_t size);
  inline ::std::string* mutable_m_tasknum();
  inline ::std::string* release_m_tasknum();
  inline void set_allocated_m_tasknum(::std::string* m_tasknum);

  // optional int32 m_freshCost = 5;
  inline bool has_m_freshcost() const;
  inline void clear_m_freshcost();
  static const int kMFreshCostFieldNumber = 5;
  inline ::google::protobuf::int32 m_freshcost() const;
  inline void set_m_freshcost(::google::protobuf::int32 value);

  // optional int32 m_shop = 6;
  inline bool has_m_shop() const;
  inline void clear_m_shop();
  static const int kMShopFieldNumber = 6;
  inline ::google::protobuf::int32 m_shop() const;
  inline void set_m_shop(::google::protobuf::int32 value);

  // optional int32 m_shopCurrency = 7;
  inline bool has_m_shopcurrency() const;
  inline void clear_m_shopcurrency();
  static const int kMShopCurrencyFieldNumber = 7;
  inline ::google::protobuf::int32 m_shopcurrency() const;
  inline void set_m_shopcurrency(::google::protobuf::int32 value);

  // optional int32 m_severOpenType = 8;
  inline bool has_m_severopentype() const;
  inline void clear_m_severopentype();
  static const int kMSeverOpenTypeFieldNumber = 8;
  inline ::google::protobuf::int32 m_severopentype() const;
  inline void set_m_severopentype(::google::protobuf::int32 value);

  // optional int32 m_openSeverDay = 9;
  inline bool has_m_openseverday() const;
  inline void clear_m_openseverday();
  static const int kMOpenSeverDayFieldNumber = 9;
  inline ::google::protobuf::int32 m_openseverday() const;
  inline void set_m_openseverday(::google::protobuf::int32 value);

  // optional int32 m_closeSeverDay = 10;
  inline bool has_m_closeseverday() const;
  inline void clear_m_closeseverday();
  static const int kMCloseSeverDayFieldNumber = 10;
  inline ::google::protobuf::int32 m_closeseverday() const;
  inline void set_m_closeseverday(::google::protobuf::int32 value);

  // optional int32 m_priceType = 11;
  inline bool has_m_pricetype() const;
  inline void clear_m_pricetype();
  static const int kMPriceTypeFieldNumber = 11;
  inline ::google::protobuf::int32 m_pricetype() const;
  inline void set_m_pricetype(::google::protobuf::int32 value);

  // optional int32 m_price = 12;
  inline bool has_m_price() const;
  inline void clear_m_price();
  static const int kMPriceFieldNumber = 12;
  inline ::google::protobuf::int32 m_price() const;
  inline void set_m_price(::google::protobuf::int32 value);

  // optional int32 m_priceP = 13;
  inline bool has_m_pricep() const;
  inline void clear_m_pricep();
  static const int kMPricePFieldNumber = 13;
  inline ::google::protobuf::int32 m_pricep() const;
  inline void set_m_pricep(::google::protobuf::int32 value);

  // optional int32 m_presentExp = 14;
  inline bool has_m_presentexp() const;
  inline void clear_m_presentexp();
  static const int kMPresentExpFieldNumber = 14;
  inline ::google::protobuf::int32 m_presentexp() const;
  inline void set_m_presentexp(::google::protobuf::int32 value);

  // optional int32 m_expCost = 15;
  inline bool has_m_expcost() const;
  inline void clear_m_expcost();
  static const int kMExpCostFieldNumber = 15;
  inline ::google::protobuf::int32 m_expcost() const;
  inline void set_m_expcost(::google::protobuf::int32 value);

  // optional int32 m_expPrice = 16;
  inline bool has_m_expprice() const;
  inline void clear_m_expprice();
  static const int kMExpPriceFieldNumber = 16;
  inline ::google::protobuf::int32 m_expprice() const;
  inline void set_m_expprice(::google::protobuf::int32 value);

  // optional int32 m_expItem = 17;
  inline bool has_m_expitem() const;
  inline void clear_m_expitem();
  static const int kMExpItemFieldNumber = 17;
  inline ::google::protobuf::int32 m_expitem() const;
  inline void set_m_expitem(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_BattlepassBattlepass)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_reward();
  inline void clear_has_m_reward();
  inline void set_has_m_task();
  inline void clear_has_m_task();
  inline void set_has_m_tasknum();
  inline void clear_has_m_tasknum();
  inline void set_has_m_freshcost();
  inline void clear_has_m_freshcost();
  inline void set_has_m_shop();
  inline void clear_has_m_shop();
  inline void set_has_m_shopcurrency();
  inline void clear_has_m_shopcurrency();
  inline void set_has_m_severopentype();
  inline void clear_has_m_severopentype();
  inline void set_has_m_openseverday();
  inline void clear_has_m_openseverday();
  inline void set_has_m_closeseverday();
  inline void clear_has_m_closeseverday();
  inline void set_has_m_pricetype();
  inline void clear_has_m_pricetype();
  inline void set_has_m_price();
  inline void clear_has_m_price();
  inline void set_has_m_pricep();
  inline void clear_has_m_pricep();
  inline void set_has_m_presentexp();
  inline void clear_has_m_presentexp();
  inline void set_has_m_expcost();
  inline void clear_has_m_expcost();
  inline void set_has_m_expprice();
  inline void clear_has_m_expprice();
  inline void set_has_m_expitem();
  inline void clear_has_m_expitem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_reward_;
  ::std::string* m_tasknum_;
  ::google::protobuf::int32 m_task_;
  ::google::protobuf::int32 m_freshcost_;
  ::google::protobuf::int32 m_shop_;
  ::google::protobuf::int32 m_shopcurrency_;
  ::google::protobuf::int32 m_severopentype_;
  ::google::protobuf::int32 m_openseverday_;
  ::google::protobuf::int32 m_closeseverday_;
  ::google::protobuf::int32 m_pricetype_;
  ::google::protobuf::int32 m_price_;
  ::google::protobuf::int32 m_pricep_;
  ::google::protobuf::int32 m_presentexp_;
  ::google::protobuf::int32 m_expcost_;
  ::google::protobuf::int32 m_expprice_;
  ::google::protobuf::int32 m_expitem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBattlepass_2eproto();
  friend void protobuf_AssignDesc_E_5fBattlepass_2eproto();
  friend void protobuf_ShutdownFile_E_5fBattlepass_2eproto();

  void InitAsDefaultInstance();
  static E_BattlepassBattlepass* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_BattlepassBattlepass : public ::google::protobuf::Message {
 public:
  Sheet_BattlepassBattlepass();
  virtual ~Sheet_BattlepassBattlepass();

  Sheet_BattlepassBattlepass(const Sheet_BattlepassBattlepass& from);

  inline Sheet_BattlepassBattlepass& operator=(const Sheet_BattlepassBattlepass& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_BattlepassBattlepass& default_instance();

  void Swap(Sheet_BattlepassBattlepass* other);

  // implements Message ----------------------------------------------

  Sheet_BattlepassBattlepass* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_BattlepassBattlepass& from);
  void MergeFrom(const Sheet_BattlepassBattlepass& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_BattlepassBattlepass E_BattlepassBattlepass_List = 1;
  inline int e_battlepassbattlepass_list_size() const;
  inline void clear_e_battlepassbattlepass_list();
  static const int kEBattlepassBattlepassListFieldNumber = 1;
  inline const ::proto_ff::E_BattlepassBattlepass& e_battlepassbattlepass_list(int index) const;
  inline ::proto_ff::E_BattlepassBattlepass* mutable_e_battlepassbattlepass_list(int index);
  inline ::proto_ff::E_BattlepassBattlepass* add_e_battlepassbattlepass_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassBattlepass >&
      e_battlepassbattlepass_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassBattlepass >*
      mutable_e_battlepassbattlepass_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_BattlepassBattlepass)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassBattlepass > e_battlepassbattlepass_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBattlepass_2eproto();
  friend void protobuf_AssignDesc_E_5fBattlepass_2eproto();
  friend void protobuf_ShutdownFile_E_5fBattlepass_2eproto();

  void InitAsDefaultInstance();
  static Sheet_BattlepassBattlepass* default_instance_;
};
// -------------------------------------------------------------------

class E_BattlepassRewardItemDesc : public ::google::protobuf::Message {
 public:
  E_BattlepassRewardItemDesc();
  virtual ~E_BattlepassRewardItemDesc();

  E_BattlepassRewardItemDesc(const E_BattlepassRewardItemDesc& from);

  inline E_BattlepassRewardItemDesc& operator=(const E_BattlepassRewardItemDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_BattlepassRewardItemDesc& default_instance();

  void Swap(E_BattlepassRewardItemDesc* other);

  // implements Message ----------------------------------------------

  E_BattlepassRewardItemDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_BattlepassRewardItemDesc& from);
  void MergeFrom(const E_BattlepassRewardItemDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_num = 1;
  inline bool has_m_num() const;
  inline void clear_m_num();
  static const int kMNumFieldNumber = 1;
  inline ::google::protobuf::int32 m_num() const;
  inline void set_m_num(::google::protobuf::int32 value);

  // optional int32 m_id = 2;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 2;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_BattlepassRewardItemDesc)
 private:
  inline void set_has_m_num();
  inline void clear_has_m_num();
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_num_;
  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBattlepass_2eproto();
  friend void protobuf_AssignDesc_E_5fBattlepass_2eproto();
  friend void protobuf_ShutdownFile_E_5fBattlepass_2eproto();

  void InitAsDefaultInstance();
  static E_BattlepassRewardItemDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_BattlepassRewardProitemDesc : public ::google::protobuf::Message {
 public:
  E_BattlepassRewardProitemDesc();
  virtual ~E_BattlepassRewardProitemDesc();

  E_BattlepassRewardProitemDesc(const E_BattlepassRewardProitemDesc& from);

  inline E_BattlepassRewardProitemDesc& operator=(const E_BattlepassRewardProitemDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_BattlepassRewardProitemDesc& default_instance();

  void Swap(E_BattlepassRewardProitemDesc* other);

  // implements Message ----------------------------------------------

  E_BattlepassRewardProitemDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_BattlepassRewardProitemDesc& from);
  void MergeFrom(const E_BattlepassRewardProitemDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_num = 1;
  inline bool has_m_num() const;
  inline void clear_m_num();
  static const int kMNumFieldNumber = 1;
  inline ::google::protobuf::int32 m_num() const;
  inline void set_m_num(::google::protobuf::int32 value);

  // optional int32 m_id = 2;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 2;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_BattlepassRewardProitemDesc)
 private:
  inline void set_has_m_num();
  inline void clear_has_m_num();
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_num_;
  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBattlepass_2eproto();
  friend void protobuf_AssignDesc_E_5fBattlepass_2eproto();
  friend void protobuf_ShutdownFile_E_5fBattlepass_2eproto();

  void InitAsDefaultInstance();
  static E_BattlepassRewardProitemDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_BattlepassReward : public ::google::protobuf::Message {
 public:
  E_BattlepassReward();
  virtual ~E_BattlepassReward();

  E_BattlepassReward(const E_BattlepassReward& from);

  inline E_BattlepassReward& operator=(const E_BattlepassReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_BattlepassReward& default_instance();

  void Swap(E_BattlepassReward* other);

  // implements Message ----------------------------------------------

  E_BattlepassReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_BattlepassReward& from);
  void MergeFrom(const E_BattlepassReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupid = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupidFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_lv = 3;
  inline bool has_m_lv() const;
  inline void clear_m_lv();
  static const int kMLvFieldNumber = 3;
  inline ::google::protobuf::int32 m_lv() const;
  inline void set_m_lv(::google::protobuf::int32 value);

  // optional int32 m_exp = 4;
  inline bool has_m_exp() const;
  inline void clear_m_exp();
  static const int kMExpFieldNumber = 4;
  inline ::google::protobuf::int32 m_exp() const;
  inline void set_m_exp(::google::protobuf::int32 value);

  // optional int32 m_Core = 5;
  inline bool has_m_core() const;
  inline void clear_m_core();
  static const int kMCoreFieldNumber = 5;
  inline ::google::protobuf::int32 m_core() const;
  inline void set_m_core(::google::protobuf::int32 value);

  // optional int32 m_buyLevel = 6;
  inline bool has_m_buylevel() const;
  inline void clear_m_buylevel();
  static const int kMBuyLevelFieldNumber = 6;
  inline ::google::protobuf::int32 m_buylevel() const;
  inline void set_m_buylevel(::google::protobuf::int32 value);

  // optional int32 m_showItem = 7;
  inline bool has_m_showitem() const;
  inline void clear_m_showitem();
  static const int kMShowItemFieldNumber = 7;
  inline ::google::protobuf::int32 m_showitem() const;
  inline void set_m_showitem(::google::protobuf::int32 value);

  // repeated .proto_ff.E_BattlepassRewardItemDesc m_item = 8;
  inline int m_item_size() const;
  inline void clear_m_item();
  static const int kMItemFieldNumber = 8;
  inline const ::proto_ff::E_BattlepassRewardItemDesc& m_item(int index) const;
  inline ::proto_ff::E_BattlepassRewardItemDesc* mutable_m_item(int index);
  inline ::proto_ff::E_BattlepassRewardItemDesc* add_m_item();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassRewardItemDesc >&
      m_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassRewardItemDesc >*
      mutable_m_item();

  // repeated .proto_ff.E_BattlepassRewardProitemDesc m_proItem = 9;
  inline int m_proitem_size() const;
  inline void clear_m_proitem();
  static const int kMProItemFieldNumber = 9;
  inline const ::proto_ff::E_BattlepassRewardProitemDesc& m_proitem(int index) const;
  inline ::proto_ff::E_BattlepassRewardProitemDesc* mutable_m_proitem(int index);
  inline ::proto_ff::E_BattlepassRewardProitemDesc* add_m_proitem();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassRewardProitemDesc >&
      m_proitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassRewardProitemDesc >*
      mutable_m_proitem();

  // @@protoc_insertion_point(class_scope:proto_ff.E_BattlepassReward)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_lv();
  inline void clear_has_m_lv();
  inline void set_has_m_exp();
  inline void clear_has_m_exp();
  inline void set_has_m_core();
  inline void clear_has_m_core();
  inline void set_has_m_buylevel();
  inline void clear_has_m_buylevel();
  inline void set_has_m_showitem();
  inline void clear_has_m_showitem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_lv_;
  ::google::protobuf::int32 m_exp_;
  ::google::protobuf::int32 m_core_;
  ::google::protobuf::int32 m_buylevel_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassRewardItemDesc > m_item_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassRewardProitemDesc > m_proitem_;
  ::google::protobuf::int32 m_showitem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBattlepass_2eproto();
  friend void protobuf_AssignDesc_E_5fBattlepass_2eproto();
  friend void protobuf_ShutdownFile_E_5fBattlepass_2eproto();

  void InitAsDefaultInstance();
  static E_BattlepassReward* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_BattlepassReward : public ::google::protobuf::Message {
 public:
  Sheet_BattlepassReward();
  virtual ~Sheet_BattlepassReward();

  Sheet_BattlepassReward(const Sheet_BattlepassReward& from);

  inline Sheet_BattlepassReward& operator=(const Sheet_BattlepassReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_BattlepassReward& default_instance();

  void Swap(Sheet_BattlepassReward* other);

  // implements Message ----------------------------------------------

  Sheet_BattlepassReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_BattlepassReward& from);
  void MergeFrom(const Sheet_BattlepassReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_BattlepassReward E_BattlepassReward_List = 1;
  inline int e_battlepassreward_list_size() const;
  inline void clear_e_battlepassreward_list();
  static const int kEBattlepassRewardListFieldNumber = 1;
  inline const ::proto_ff::E_BattlepassReward& e_battlepassreward_list(int index) const;
  inline ::proto_ff::E_BattlepassReward* mutable_e_battlepassreward_list(int index);
  inline ::proto_ff::E_BattlepassReward* add_e_battlepassreward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassReward >&
      e_battlepassreward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassReward >*
      mutable_e_battlepassreward_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_BattlepassReward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassReward > e_battlepassreward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBattlepass_2eproto();
  friend void protobuf_AssignDesc_E_5fBattlepass_2eproto();
  friend void protobuf_ShutdownFile_E_5fBattlepass_2eproto();

  void InitAsDefaultInstance();
  static Sheet_BattlepassReward* default_instance_;
};
// -------------------------------------------------------------------

class E_BattlepassTask : public ::google::protobuf::Message {
 public:
  E_BattlepassTask();
  virtual ~E_BattlepassTask();

  E_BattlepassTask(const E_BattlepassTask& from);

  inline E_BattlepassTask& operator=(const E_BattlepassTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_BattlepassTask& default_instance();

  void Swap(E_BattlepassTask* other);

  // implements Message ----------------------------------------------

  E_BattlepassTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_BattlepassTask& from);
  void MergeFrom(const E_BattlepassTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_group = 2;
  inline bool has_m_group() const;
  inline void clear_m_group();
  static const int kMGroupFieldNumber = 2;
  inline ::google::protobuf::int32 m_group() const;
  inline void set_m_group(::google::protobuf::int32 value);

  // optional int32 m_taskRefresh = 3;
  inline bool has_m_taskrefresh() const;
  inline void clear_m_taskrefresh();
  static const int kMTaskRefreshFieldNumber = 3;
  inline ::google::protobuf::int32 m_taskrefresh() const;
  inline void set_m_taskrefresh(::google::protobuf::int32 value);

  // optional int32 m_lv = 4;
  inline bool has_m_lv() const;
  inline void clear_m_lv();
  static const int kMLvFieldNumber = 4;
  inline ::google::protobuf::int32 m_lv() const;
  inline void set_m_lv(::google::protobuf::int32 value);

  // optional int32 m_tag = 5;
  inline bool has_m_tag() const;
  inline void clear_m_tag();
  static const int kMTagFieldNumber = 5;
  inline ::google::protobuf::int32 m_tag() const;
  inline void set_m_tag(::google::protobuf::int32 value);

  // optional int32 m_eventType = 6;
  inline bool has_m_eventtype() const;
  inline void clear_m_eventtype();
  static const int kMEventTypeFieldNumber = 6;
  inline ::google::protobuf::int32 m_eventtype() const;
  inline void set_m_eventtype(::google::protobuf::int32 value);

  // optional int32 m_reachPrice = 7;
  inline bool has_m_reachprice() const;
  inline void clear_m_reachprice();
  static const int kMReachPriceFieldNumber = 7;
  inline ::google::protobuf::int32 m_reachprice() const;
  inline void set_m_reachprice(::google::protobuf::int32 value);

  // optional int32 m_link = 8;
  inline bool has_m_link() const;
  inline void clear_m_link();
  static const int kMLinkFieldNumber = 8;
  inline ::google::protobuf::int32 m_link() const;
  inline void set_m_link(::google::protobuf::int32 value);

  // optional int32 m_exp = 9;
  inline bool has_m_exp() const;
  inline void clear_m_exp();
  static const int kMExpFieldNumber = 9;
  inline ::google::protobuf::int32 m_exp() const;
  inline void set_m_exp(::google::protobuf::int32 value);

  // repeated int32 m_param = 10;
  inline int m_param_size() const;
  inline void clear_m_param();
  static const int kMParamFieldNumber = 10;
  inline ::google::protobuf::int32 m_param(int index) const;
  inline void set_m_param(int index, ::google::protobuf::int32 value);
  inline void add_m_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_param();

  // @@protoc_insertion_point(class_scope:proto_ff.E_BattlepassTask)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_group();
  inline void clear_has_m_group();
  inline void set_has_m_taskrefresh();
  inline void clear_has_m_taskrefresh();
  inline void set_has_m_lv();
  inline void clear_has_m_lv();
  inline void set_has_m_tag();
  inline void clear_has_m_tag();
  inline void set_has_m_eventtype();
  inline void clear_has_m_eventtype();
  inline void set_has_m_reachprice();
  inline void clear_has_m_reachprice();
  inline void set_has_m_link();
  inline void clear_has_m_link();
  inline void set_has_m_exp();
  inline void clear_has_m_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_group_;
  ::google::protobuf::int32 m_taskrefresh_;
  ::google::protobuf::int32 m_lv_;
  ::google::protobuf::int32 m_tag_;
  ::google::protobuf::int32 m_eventtype_;
  ::google::protobuf::int32 m_reachprice_;
  ::google::protobuf::int32 m_link_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_param_;
  ::google::protobuf::int32 m_exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBattlepass_2eproto();
  friend void protobuf_AssignDesc_E_5fBattlepass_2eproto();
  friend void protobuf_ShutdownFile_E_5fBattlepass_2eproto();

  void InitAsDefaultInstance();
  static E_BattlepassTask* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_BattlepassTask : public ::google::protobuf::Message {
 public:
  Sheet_BattlepassTask();
  virtual ~Sheet_BattlepassTask();

  Sheet_BattlepassTask(const Sheet_BattlepassTask& from);

  inline Sheet_BattlepassTask& operator=(const Sheet_BattlepassTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_BattlepassTask& default_instance();

  void Swap(Sheet_BattlepassTask* other);

  // implements Message ----------------------------------------------

  Sheet_BattlepassTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_BattlepassTask& from);
  void MergeFrom(const Sheet_BattlepassTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_BattlepassTask E_BattlepassTask_List = 1;
  inline int e_battlepasstask_list_size() const;
  inline void clear_e_battlepasstask_list();
  static const int kEBattlepassTaskListFieldNumber = 1;
  inline const ::proto_ff::E_BattlepassTask& e_battlepasstask_list(int index) const;
  inline ::proto_ff::E_BattlepassTask* mutable_e_battlepasstask_list(int index);
  inline ::proto_ff::E_BattlepassTask* add_e_battlepasstask_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassTask >&
      e_battlepasstask_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassTask >*
      mutable_e_battlepasstask_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_BattlepassTask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassTask > e_battlepasstask_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBattlepass_2eproto();
  friend void protobuf_AssignDesc_E_5fBattlepass_2eproto();
  friend void protobuf_ShutdownFile_E_5fBattlepass_2eproto();

  void InitAsDefaultInstance();
  static Sheet_BattlepassTask* default_instance_;
};
// -------------------------------------------------------------------

class E_BattlepassShop : public ::google::protobuf::Message {
 public:
  E_BattlepassShop();
  virtual ~E_BattlepassShop();

  E_BattlepassShop(const E_BattlepassShop& from);

  inline E_BattlepassShop& operator=(const E_BattlepassShop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_BattlepassShop& default_instance();

  void Swap(E_BattlepassShop* other);

  // implements Message ----------------------------------------------

  E_BattlepassShop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_BattlepassShop& from);
  void MergeFrom(const E_BattlepassShop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_group = 2;
  inline bool has_m_group() const;
  inline void clear_m_group();
  static const int kMGroupFieldNumber = 2;
  inline ::google::protobuf::int32 m_group() const;
  inline void set_m_group(::google::protobuf::int32 value);

  // optional int32 m_itemID = 3;
  inline bool has_m_itemid() const;
  inline void clear_m_itemid();
  static const int kMItemIDFieldNumber = 3;
  inline ::google::protobuf::int32 m_itemid() const;
  inline void set_m_itemid(::google::protobuf::int32 value);

  // optional int32 m_itemNum = 4;
  inline bool has_m_itemnum() const;
  inline void clear_m_itemnum();
  static const int kMItemNumFieldNumber = 4;
  inline ::google::protobuf::int32 m_itemnum() const;
  inline void set_m_itemnum(::google::protobuf::int32 value);

  // optional int32 m_costItem = 5;
  inline bool has_m_costitem() const;
  inline void clear_m_costitem();
  static const int kMCostItemFieldNumber = 5;
  inline ::google::protobuf::int32 m_costitem() const;
  inline void set_m_costitem(::google::protobuf::int32 value);

  // optional int32 m_costNum = 6;
  inline bool has_m_costnum() const;
  inline void clear_m_costnum();
  static const int kMCostNumFieldNumber = 6;
  inline ::google::protobuf::int32 m_costnum() const;
  inline void set_m_costnum(::google::protobuf::int32 value);

  // optional int32 m_numLimit = 7;
  inline bool has_m_numlimit() const;
  inline void clear_m_numlimit();
  static const int kMNumLimitFieldNumber = 7;
  inline ::google::protobuf::int32 m_numlimit() const;
  inline void set_m_numlimit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_BattlepassShop)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_group();
  inline void clear_has_m_group();
  inline void set_has_m_itemid();
  inline void clear_has_m_itemid();
  inline void set_has_m_itemnum();
  inline void clear_has_m_itemnum();
  inline void set_has_m_costitem();
  inline void clear_has_m_costitem();
  inline void set_has_m_costnum();
  inline void clear_has_m_costnum();
  inline void set_has_m_numlimit();
  inline void clear_has_m_numlimit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_group_;
  ::google::protobuf::int32 m_itemid_;
  ::google::protobuf::int32 m_itemnum_;
  ::google::protobuf::int32 m_costitem_;
  ::google::protobuf::int32 m_costnum_;
  ::google::protobuf::int32 m_numlimit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBattlepass_2eproto();
  friend void protobuf_AssignDesc_E_5fBattlepass_2eproto();
  friend void protobuf_ShutdownFile_E_5fBattlepass_2eproto();

  void InitAsDefaultInstance();
  static E_BattlepassShop* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_BattlepassShop : public ::google::protobuf::Message {
 public:
  Sheet_BattlepassShop();
  virtual ~Sheet_BattlepassShop();

  Sheet_BattlepassShop(const Sheet_BattlepassShop& from);

  inline Sheet_BattlepassShop& operator=(const Sheet_BattlepassShop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_BattlepassShop& default_instance();

  void Swap(Sheet_BattlepassShop* other);

  // implements Message ----------------------------------------------

  Sheet_BattlepassShop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_BattlepassShop& from);
  void MergeFrom(const Sheet_BattlepassShop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_BattlepassShop E_BattlepassShop_List = 1;
  inline int e_battlepassshop_list_size() const;
  inline void clear_e_battlepassshop_list();
  static const int kEBattlepassShopListFieldNumber = 1;
  inline const ::proto_ff::E_BattlepassShop& e_battlepassshop_list(int index) const;
  inline ::proto_ff::E_BattlepassShop* mutable_e_battlepassshop_list(int index);
  inline ::proto_ff::E_BattlepassShop* add_e_battlepassshop_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassShop >&
      e_battlepassshop_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassShop >*
      mutable_e_battlepassshop_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_BattlepassShop)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassShop > e_battlepassshop_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBattlepass_2eproto();
  friend void protobuf_AssignDesc_E_5fBattlepass_2eproto();
  friend void protobuf_ShutdownFile_E_5fBattlepass_2eproto();

  void InitAsDefaultInstance();
  static Sheet_BattlepassShop* default_instance_;
};
// ===================================================================


// ===================================================================

// E_BattlepassBattlepass

// optional int32 m_id = 1;
inline bool E_BattlepassBattlepass::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_BattlepassBattlepass::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_BattlepassBattlepass::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_id() const {
  return m_id_;
}
inline void E_BattlepassBattlepass::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_reward = 2;
inline bool E_BattlepassBattlepass::has_m_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_BattlepassBattlepass::clear_has_m_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_BattlepassBattlepass::clear_m_reward() {
  m_reward_ = 0;
  clear_has_m_reward();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_reward() const {
  return m_reward_;
}
inline void E_BattlepassBattlepass::set_m_reward(::google::protobuf::int32 value) {
  set_has_m_reward();
  m_reward_ = value;
}

// optional int32 m_task = 3;
inline bool E_BattlepassBattlepass::has_m_task() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_task() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_BattlepassBattlepass::clear_has_m_task() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_BattlepassBattlepass::clear_m_task() {
  m_task_ = 0;
  clear_has_m_task();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_task() const {
  return m_task_;
}
inline void E_BattlepassBattlepass::set_m_task(::google::protobuf::int32 value) {
  set_has_m_task();
  m_task_ = value;
}

// optional string m_taskNum = 4;
inline bool E_BattlepassBattlepass::has_m_tasknum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_tasknum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_BattlepassBattlepass::clear_has_m_tasknum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_BattlepassBattlepass::clear_m_tasknum() {
  if (m_tasknum_ != &::google::protobuf::internal::kEmptyString) {
    m_tasknum_->clear();
  }
  clear_has_m_tasknum();
}
inline const ::std::string& E_BattlepassBattlepass::m_tasknum() const {
  return *m_tasknum_;
}
inline void E_BattlepassBattlepass::set_m_tasknum(const ::std::string& value) {
  set_has_m_tasknum();
  if (m_tasknum_ == &::google::protobuf::internal::kEmptyString) {
    m_tasknum_ = new ::std::string;
  }
  m_tasknum_->assign(value);
}
inline void E_BattlepassBattlepass::set_m_tasknum(const char* value) {
  set_has_m_tasknum();
  if (m_tasknum_ == &::google::protobuf::internal::kEmptyString) {
    m_tasknum_ = new ::std::string;
  }
  m_tasknum_->assign(value);
}
inline void E_BattlepassBattlepass::set_m_tasknum(const char* value, size_t size) {
  set_has_m_tasknum();
  if (m_tasknum_ == &::google::protobuf::internal::kEmptyString) {
    m_tasknum_ = new ::std::string;
  }
  m_tasknum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_BattlepassBattlepass::mutable_m_tasknum() {
  set_has_m_tasknum();
  if (m_tasknum_ == &::google::protobuf::internal::kEmptyString) {
    m_tasknum_ = new ::std::string;
  }
  return m_tasknum_;
}
inline ::std::string* E_BattlepassBattlepass::release_m_tasknum() {
  clear_has_m_tasknum();
  if (m_tasknum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_tasknum_;
    m_tasknum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_BattlepassBattlepass::set_allocated_m_tasknum(::std::string* m_tasknum) {
  if (m_tasknum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_tasknum_;
  }
  if (m_tasknum) {
    set_has_m_tasknum();
    m_tasknum_ = m_tasknum;
  } else {
    clear_has_m_tasknum();
    m_tasknum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_freshCost = 5;
inline bool E_BattlepassBattlepass::has_m_freshcost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_freshcost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_BattlepassBattlepass::clear_has_m_freshcost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_BattlepassBattlepass::clear_m_freshcost() {
  m_freshcost_ = 0;
  clear_has_m_freshcost();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_freshcost() const {
  return m_freshcost_;
}
inline void E_BattlepassBattlepass::set_m_freshcost(::google::protobuf::int32 value) {
  set_has_m_freshcost();
  m_freshcost_ = value;
}

// optional int32 m_shop = 6;
inline bool E_BattlepassBattlepass::has_m_shop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_shop() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_BattlepassBattlepass::clear_has_m_shop() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_BattlepassBattlepass::clear_m_shop() {
  m_shop_ = 0;
  clear_has_m_shop();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_shop() const {
  return m_shop_;
}
inline void E_BattlepassBattlepass::set_m_shop(::google::protobuf::int32 value) {
  set_has_m_shop();
  m_shop_ = value;
}

// optional int32 m_shopCurrency = 7;
inline bool E_BattlepassBattlepass::has_m_shopcurrency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_shopcurrency() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_BattlepassBattlepass::clear_has_m_shopcurrency() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_BattlepassBattlepass::clear_m_shopcurrency() {
  m_shopcurrency_ = 0;
  clear_has_m_shopcurrency();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_shopcurrency() const {
  return m_shopcurrency_;
}
inline void E_BattlepassBattlepass::set_m_shopcurrency(::google::protobuf::int32 value) {
  set_has_m_shopcurrency();
  m_shopcurrency_ = value;
}

// optional int32 m_severOpenType = 8;
inline bool E_BattlepassBattlepass::has_m_severopentype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_severopentype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_BattlepassBattlepass::clear_has_m_severopentype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_BattlepassBattlepass::clear_m_severopentype() {
  m_severopentype_ = 0;
  clear_has_m_severopentype();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_severopentype() const {
  return m_severopentype_;
}
inline void E_BattlepassBattlepass::set_m_severopentype(::google::protobuf::int32 value) {
  set_has_m_severopentype();
  m_severopentype_ = value;
}

// optional int32 m_openSeverDay = 9;
inline bool E_BattlepassBattlepass::has_m_openseverday() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_openseverday() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_BattlepassBattlepass::clear_has_m_openseverday() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_BattlepassBattlepass::clear_m_openseverday() {
  m_openseverday_ = 0;
  clear_has_m_openseverday();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_openseverday() const {
  return m_openseverday_;
}
inline void E_BattlepassBattlepass::set_m_openseverday(::google::protobuf::int32 value) {
  set_has_m_openseverday();
  m_openseverday_ = value;
}

// optional int32 m_closeSeverDay = 10;
inline bool E_BattlepassBattlepass::has_m_closeseverday() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_closeseverday() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_BattlepassBattlepass::clear_has_m_closeseverday() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_BattlepassBattlepass::clear_m_closeseverday() {
  m_closeseverday_ = 0;
  clear_has_m_closeseverday();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_closeseverday() const {
  return m_closeseverday_;
}
inline void E_BattlepassBattlepass::set_m_closeseverday(::google::protobuf::int32 value) {
  set_has_m_closeseverday();
  m_closeseverday_ = value;
}

// optional int32 m_priceType = 11;
inline bool E_BattlepassBattlepass::has_m_pricetype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_pricetype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_BattlepassBattlepass::clear_has_m_pricetype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_BattlepassBattlepass::clear_m_pricetype() {
  m_pricetype_ = 0;
  clear_has_m_pricetype();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_pricetype() const {
  return m_pricetype_;
}
inline void E_BattlepassBattlepass::set_m_pricetype(::google::protobuf::int32 value) {
  set_has_m_pricetype();
  m_pricetype_ = value;
}

// optional int32 m_price = 12;
inline bool E_BattlepassBattlepass::has_m_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_BattlepassBattlepass::clear_has_m_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_BattlepassBattlepass::clear_m_price() {
  m_price_ = 0;
  clear_has_m_price();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_price() const {
  return m_price_;
}
inline void E_BattlepassBattlepass::set_m_price(::google::protobuf::int32 value) {
  set_has_m_price();
  m_price_ = value;
}

// optional int32 m_priceP = 13;
inline bool E_BattlepassBattlepass::has_m_pricep() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_pricep() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_BattlepassBattlepass::clear_has_m_pricep() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_BattlepassBattlepass::clear_m_pricep() {
  m_pricep_ = 0;
  clear_has_m_pricep();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_pricep() const {
  return m_pricep_;
}
inline void E_BattlepassBattlepass::set_m_pricep(::google::protobuf::int32 value) {
  set_has_m_pricep();
  m_pricep_ = value;
}

// optional int32 m_presentExp = 14;
inline bool E_BattlepassBattlepass::has_m_presentexp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_presentexp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_BattlepassBattlepass::clear_has_m_presentexp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_BattlepassBattlepass::clear_m_presentexp() {
  m_presentexp_ = 0;
  clear_has_m_presentexp();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_presentexp() const {
  return m_presentexp_;
}
inline void E_BattlepassBattlepass::set_m_presentexp(::google::protobuf::int32 value) {
  set_has_m_presentexp();
  m_presentexp_ = value;
}

// optional int32 m_expCost = 15;
inline bool E_BattlepassBattlepass::has_m_expcost() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_expcost() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_BattlepassBattlepass::clear_has_m_expcost() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_BattlepassBattlepass::clear_m_expcost() {
  m_expcost_ = 0;
  clear_has_m_expcost();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_expcost() const {
  return m_expcost_;
}
inline void E_BattlepassBattlepass::set_m_expcost(::google::protobuf::int32 value) {
  set_has_m_expcost();
  m_expcost_ = value;
}

// optional int32 m_expPrice = 16;
inline bool E_BattlepassBattlepass::has_m_expprice() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_expprice() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_BattlepassBattlepass::clear_has_m_expprice() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_BattlepassBattlepass::clear_m_expprice() {
  m_expprice_ = 0;
  clear_has_m_expprice();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_expprice() const {
  return m_expprice_;
}
inline void E_BattlepassBattlepass::set_m_expprice(::google::protobuf::int32 value) {
  set_has_m_expprice();
  m_expprice_ = value;
}

// optional int32 m_expItem = 17;
inline bool E_BattlepassBattlepass::has_m_expitem() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void E_BattlepassBattlepass::set_has_m_expitem() {
  _has_bits_[0] |= 0x00010000u;
}
inline void E_BattlepassBattlepass::clear_has_m_expitem() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void E_BattlepassBattlepass::clear_m_expitem() {
  m_expitem_ = 0;
  clear_has_m_expitem();
}
inline ::google::protobuf::int32 E_BattlepassBattlepass::m_expitem() const {
  return m_expitem_;
}
inline void E_BattlepassBattlepass::set_m_expitem(::google::protobuf::int32 value) {
  set_has_m_expitem();
  m_expitem_ = value;
}

// -------------------------------------------------------------------

// Sheet_BattlepassBattlepass

// repeated .proto_ff.E_BattlepassBattlepass E_BattlepassBattlepass_List = 1;
inline int Sheet_BattlepassBattlepass::e_battlepassbattlepass_list_size() const {
  return e_battlepassbattlepass_list_.size();
}
inline void Sheet_BattlepassBattlepass::clear_e_battlepassbattlepass_list() {
  e_battlepassbattlepass_list_.Clear();
}
inline const ::proto_ff::E_BattlepassBattlepass& Sheet_BattlepassBattlepass::e_battlepassbattlepass_list(int index) const {
  return e_battlepassbattlepass_list_.Get(index);
}
inline ::proto_ff::E_BattlepassBattlepass* Sheet_BattlepassBattlepass::mutable_e_battlepassbattlepass_list(int index) {
  return e_battlepassbattlepass_list_.Mutable(index);
}
inline ::proto_ff::E_BattlepassBattlepass* Sheet_BattlepassBattlepass::add_e_battlepassbattlepass_list() {
  return e_battlepassbattlepass_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassBattlepass >&
Sheet_BattlepassBattlepass::e_battlepassbattlepass_list() const {
  return e_battlepassbattlepass_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassBattlepass >*
Sheet_BattlepassBattlepass::mutable_e_battlepassbattlepass_list() {
  return &e_battlepassbattlepass_list_;
}

// -------------------------------------------------------------------

// E_BattlepassRewardItemDesc

// optional int32 m_num = 1;
inline bool E_BattlepassRewardItemDesc::has_m_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_BattlepassRewardItemDesc::set_has_m_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_BattlepassRewardItemDesc::clear_has_m_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_BattlepassRewardItemDesc::clear_m_num() {
  m_num_ = 0;
  clear_has_m_num();
}
inline ::google::protobuf::int32 E_BattlepassRewardItemDesc::m_num() const {
  return m_num_;
}
inline void E_BattlepassRewardItemDesc::set_m_num(::google::protobuf::int32 value) {
  set_has_m_num();
  m_num_ = value;
}

// optional int32 m_id = 2;
inline bool E_BattlepassRewardItemDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_BattlepassRewardItemDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_BattlepassRewardItemDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_BattlepassRewardItemDesc::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_BattlepassRewardItemDesc::m_id() const {
  return m_id_;
}
inline void E_BattlepassRewardItemDesc::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_BattlepassRewardProitemDesc

// optional int32 m_num = 1;
inline bool E_BattlepassRewardProitemDesc::has_m_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_BattlepassRewardProitemDesc::set_has_m_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_BattlepassRewardProitemDesc::clear_has_m_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_BattlepassRewardProitemDesc::clear_m_num() {
  m_num_ = 0;
  clear_has_m_num();
}
inline ::google::protobuf::int32 E_BattlepassRewardProitemDesc::m_num() const {
  return m_num_;
}
inline void E_BattlepassRewardProitemDesc::set_m_num(::google::protobuf::int32 value) {
  set_has_m_num();
  m_num_ = value;
}

// optional int32 m_id = 2;
inline bool E_BattlepassRewardProitemDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_BattlepassRewardProitemDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_BattlepassRewardProitemDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_BattlepassRewardProitemDesc::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_BattlepassRewardProitemDesc::m_id() const {
  return m_id_;
}
inline void E_BattlepassRewardProitemDesc::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_BattlepassReward

// optional int32 m_id = 1;
inline bool E_BattlepassReward::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_BattlepassReward::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_BattlepassReward::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_BattlepassReward::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_BattlepassReward::m_id() const {
  return m_id_;
}
inline void E_BattlepassReward::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupid = 2;
inline bool E_BattlepassReward::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_BattlepassReward::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_BattlepassReward::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_BattlepassReward::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_BattlepassReward::m_groupid() const {
  return m_groupid_;
}
inline void E_BattlepassReward::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_lv = 3;
inline bool E_BattlepassReward::has_m_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_BattlepassReward::set_has_m_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_BattlepassReward::clear_has_m_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_BattlepassReward::clear_m_lv() {
  m_lv_ = 0;
  clear_has_m_lv();
}
inline ::google::protobuf::int32 E_BattlepassReward::m_lv() const {
  return m_lv_;
}
inline void E_BattlepassReward::set_m_lv(::google::protobuf::int32 value) {
  set_has_m_lv();
  m_lv_ = value;
}

// optional int32 m_exp = 4;
inline bool E_BattlepassReward::has_m_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_BattlepassReward::set_has_m_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_BattlepassReward::clear_has_m_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_BattlepassReward::clear_m_exp() {
  m_exp_ = 0;
  clear_has_m_exp();
}
inline ::google::protobuf::int32 E_BattlepassReward::m_exp() const {
  return m_exp_;
}
inline void E_BattlepassReward::set_m_exp(::google::protobuf::int32 value) {
  set_has_m_exp();
  m_exp_ = value;
}

// optional int32 m_Core = 5;
inline bool E_BattlepassReward::has_m_core() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_BattlepassReward::set_has_m_core() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_BattlepassReward::clear_has_m_core() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_BattlepassReward::clear_m_core() {
  m_core_ = 0;
  clear_has_m_core();
}
inline ::google::protobuf::int32 E_BattlepassReward::m_core() const {
  return m_core_;
}
inline void E_BattlepassReward::set_m_core(::google::protobuf::int32 value) {
  set_has_m_core();
  m_core_ = value;
}

// optional int32 m_buyLevel = 6;
inline bool E_BattlepassReward::has_m_buylevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_BattlepassReward::set_has_m_buylevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_BattlepassReward::clear_has_m_buylevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_BattlepassReward::clear_m_buylevel() {
  m_buylevel_ = 0;
  clear_has_m_buylevel();
}
inline ::google::protobuf::int32 E_BattlepassReward::m_buylevel() const {
  return m_buylevel_;
}
inline void E_BattlepassReward::set_m_buylevel(::google::protobuf::int32 value) {
  set_has_m_buylevel();
  m_buylevel_ = value;
}

// optional int32 m_showItem = 7;
inline bool E_BattlepassReward::has_m_showitem() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_BattlepassReward::set_has_m_showitem() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_BattlepassReward::clear_has_m_showitem() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_BattlepassReward::clear_m_showitem() {
  m_showitem_ = 0;
  clear_has_m_showitem();
}
inline ::google::protobuf::int32 E_BattlepassReward::m_showitem() const {
  return m_showitem_;
}
inline void E_BattlepassReward::set_m_showitem(::google::protobuf::int32 value) {
  set_has_m_showitem();
  m_showitem_ = value;
}

// repeated .proto_ff.E_BattlepassRewardItemDesc m_item = 8;
inline int E_BattlepassReward::m_item_size() const {
  return m_item_.size();
}
inline void E_BattlepassReward::clear_m_item() {
  m_item_.Clear();
}
inline const ::proto_ff::E_BattlepassRewardItemDesc& E_BattlepassReward::m_item(int index) const {
  return m_item_.Get(index);
}
inline ::proto_ff::E_BattlepassRewardItemDesc* E_BattlepassReward::mutable_m_item(int index) {
  return m_item_.Mutable(index);
}
inline ::proto_ff::E_BattlepassRewardItemDesc* E_BattlepassReward::add_m_item() {
  return m_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassRewardItemDesc >&
E_BattlepassReward::m_item() const {
  return m_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassRewardItemDesc >*
E_BattlepassReward::mutable_m_item() {
  return &m_item_;
}

// repeated .proto_ff.E_BattlepassRewardProitemDesc m_proItem = 9;
inline int E_BattlepassReward::m_proitem_size() const {
  return m_proitem_.size();
}
inline void E_BattlepassReward::clear_m_proitem() {
  m_proitem_.Clear();
}
inline const ::proto_ff::E_BattlepassRewardProitemDesc& E_BattlepassReward::m_proitem(int index) const {
  return m_proitem_.Get(index);
}
inline ::proto_ff::E_BattlepassRewardProitemDesc* E_BattlepassReward::mutable_m_proitem(int index) {
  return m_proitem_.Mutable(index);
}
inline ::proto_ff::E_BattlepassRewardProitemDesc* E_BattlepassReward::add_m_proitem() {
  return m_proitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassRewardProitemDesc >&
E_BattlepassReward::m_proitem() const {
  return m_proitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassRewardProitemDesc >*
E_BattlepassReward::mutable_m_proitem() {
  return &m_proitem_;
}

// -------------------------------------------------------------------

// Sheet_BattlepassReward

// repeated .proto_ff.E_BattlepassReward E_BattlepassReward_List = 1;
inline int Sheet_BattlepassReward::e_battlepassreward_list_size() const {
  return e_battlepassreward_list_.size();
}
inline void Sheet_BattlepassReward::clear_e_battlepassreward_list() {
  e_battlepassreward_list_.Clear();
}
inline const ::proto_ff::E_BattlepassReward& Sheet_BattlepassReward::e_battlepassreward_list(int index) const {
  return e_battlepassreward_list_.Get(index);
}
inline ::proto_ff::E_BattlepassReward* Sheet_BattlepassReward::mutable_e_battlepassreward_list(int index) {
  return e_battlepassreward_list_.Mutable(index);
}
inline ::proto_ff::E_BattlepassReward* Sheet_BattlepassReward::add_e_battlepassreward_list() {
  return e_battlepassreward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassReward >&
Sheet_BattlepassReward::e_battlepassreward_list() const {
  return e_battlepassreward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassReward >*
Sheet_BattlepassReward::mutable_e_battlepassreward_list() {
  return &e_battlepassreward_list_;
}

// -------------------------------------------------------------------

// E_BattlepassTask

// optional int32 m_id = 1;
inline bool E_BattlepassTask::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_BattlepassTask::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_BattlepassTask::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_BattlepassTask::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_BattlepassTask::m_id() const {
  return m_id_;
}
inline void E_BattlepassTask::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_group = 2;
inline bool E_BattlepassTask::has_m_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_BattlepassTask::set_has_m_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_BattlepassTask::clear_has_m_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_BattlepassTask::clear_m_group() {
  m_group_ = 0;
  clear_has_m_group();
}
inline ::google::protobuf::int32 E_BattlepassTask::m_group() const {
  return m_group_;
}
inline void E_BattlepassTask::set_m_group(::google::protobuf::int32 value) {
  set_has_m_group();
  m_group_ = value;
}

// optional int32 m_taskRefresh = 3;
inline bool E_BattlepassTask::has_m_taskrefresh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_BattlepassTask::set_has_m_taskrefresh() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_BattlepassTask::clear_has_m_taskrefresh() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_BattlepassTask::clear_m_taskrefresh() {
  m_taskrefresh_ = 0;
  clear_has_m_taskrefresh();
}
inline ::google::protobuf::int32 E_BattlepassTask::m_taskrefresh() const {
  return m_taskrefresh_;
}
inline void E_BattlepassTask::set_m_taskrefresh(::google::protobuf::int32 value) {
  set_has_m_taskrefresh();
  m_taskrefresh_ = value;
}

// optional int32 m_lv = 4;
inline bool E_BattlepassTask::has_m_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_BattlepassTask::set_has_m_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_BattlepassTask::clear_has_m_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_BattlepassTask::clear_m_lv() {
  m_lv_ = 0;
  clear_has_m_lv();
}
inline ::google::protobuf::int32 E_BattlepassTask::m_lv() const {
  return m_lv_;
}
inline void E_BattlepassTask::set_m_lv(::google::protobuf::int32 value) {
  set_has_m_lv();
  m_lv_ = value;
}

// optional int32 m_tag = 5;
inline bool E_BattlepassTask::has_m_tag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_BattlepassTask::set_has_m_tag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_BattlepassTask::clear_has_m_tag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_BattlepassTask::clear_m_tag() {
  m_tag_ = 0;
  clear_has_m_tag();
}
inline ::google::protobuf::int32 E_BattlepassTask::m_tag() const {
  return m_tag_;
}
inline void E_BattlepassTask::set_m_tag(::google::protobuf::int32 value) {
  set_has_m_tag();
  m_tag_ = value;
}

// optional int32 m_eventType = 6;
inline bool E_BattlepassTask::has_m_eventtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_BattlepassTask::set_has_m_eventtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_BattlepassTask::clear_has_m_eventtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_BattlepassTask::clear_m_eventtype() {
  m_eventtype_ = 0;
  clear_has_m_eventtype();
}
inline ::google::protobuf::int32 E_BattlepassTask::m_eventtype() const {
  return m_eventtype_;
}
inline void E_BattlepassTask::set_m_eventtype(::google::protobuf::int32 value) {
  set_has_m_eventtype();
  m_eventtype_ = value;
}

// optional int32 m_reachPrice = 7;
inline bool E_BattlepassTask::has_m_reachprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_BattlepassTask::set_has_m_reachprice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_BattlepassTask::clear_has_m_reachprice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_BattlepassTask::clear_m_reachprice() {
  m_reachprice_ = 0;
  clear_has_m_reachprice();
}
inline ::google::protobuf::int32 E_BattlepassTask::m_reachprice() const {
  return m_reachprice_;
}
inline void E_BattlepassTask::set_m_reachprice(::google::protobuf::int32 value) {
  set_has_m_reachprice();
  m_reachprice_ = value;
}

// optional int32 m_link = 8;
inline bool E_BattlepassTask::has_m_link() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_BattlepassTask::set_has_m_link() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_BattlepassTask::clear_has_m_link() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_BattlepassTask::clear_m_link() {
  m_link_ = 0;
  clear_has_m_link();
}
inline ::google::protobuf::int32 E_BattlepassTask::m_link() const {
  return m_link_;
}
inline void E_BattlepassTask::set_m_link(::google::protobuf::int32 value) {
  set_has_m_link();
  m_link_ = value;
}

// optional int32 m_exp = 9;
inline bool E_BattlepassTask::has_m_exp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_BattlepassTask::set_has_m_exp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_BattlepassTask::clear_has_m_exp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_BattlepassTask::clear_m_exp() {
  m_exp_ = 0;
  clear_has_m_exp();
}
inline ::google::protobuf::int32 E_BattlepassTask::m_exp() const {
  return m_exp_;
}
inline void E_BattlepassTask::set_m_exp(::google::protobuf::int32 value) {
  set_has_m_exp();
  m_exp_ = value;
}

// repeated int32 m_param = 10;
inline int E_BattlepassTask::m_param_size() const {
  return m_param_.size();
}
inline void E_BattlepassTask::clear_m_param() {
  m_param_.Clear();
}
inline ::google::protobuf::int32 E_BattlepassTask::m_param(int index) const {
  return m_param_.Get(index);
}
inline void E_BattlepassTask::set_m_param(int index, ::google::protobuf::int32 value) {
  m_param_.Set(index, value);
}
inline void E_BattlepassTask::add_m_param(::google::protobuf::int32 value) {
  m_param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
E_BattlepassTask::m_param() const {
  return m_param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
E_BattlepassTask::mutable_m_param() {
  return &m_param_;
}

// -------------------------------------------------------------------

// Sheet_BattlepassTask

// repeated .proto_ff.E_BattlepassTask E_BattlepassTask_List = 1;
inline int Sheet_BattlepassTask::e_battlepasstask_list_size() const {
  return e_battlepasstask_list_.size();
}
inline void Sheet_BattlepassTask::clear_e_battlepasstask_list() {
  e_battlepasstask_list_.Clear();
}
inline const ::proto_ff::E_BattlepassTask& Sheet_BattlepassTask::e_battlepasstask_list(int index) const {
  return e_battlepasstask_list_.Get(index);
}
inline ::proto_ff::E_BattlepassTask* Sheet_BattlepassTask::mutable_e_battlepasstask_list(int index) {
  return e_battlepasstask_list_.Mutable(index);
}
inline ::proto_ff::E_BattlepassTask* Sheet_BattlepassTask::add_e_battlepasstask_list() {
  return e_battlepasstask_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassTask >&
Sheet_BattlepassTask::e_battlepasstask_list() const {
  return e_battlepasstask_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassTask >*
Sheet_BattlepassTask::mutable_e_battlepasstask_list() {
  return &e_battlepasstask_list_;
}

// -------------------------------------------------------------------

// E_BattlepassShop

// optional int32 m_id = 1;
inline bool E_BattlepassShop::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_BattlepassShop::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_BattlepassShop::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_BattlepassShop::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_BattlepassShop::m_id() const {
  return m_id_;
}
inline void E_BattlepassShop::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_group = 2;
inline bool E_BattlepassShop::has_m_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_BattlepassShop::set_has_m_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_BattlepassShop::clear_has_m_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_BattlepassShop::clear_m_group() {
  m_group_ = 0;
  clear_has_m_group();
}
inline ::google::protobuf::int32 E_BattlepassShop::m_group() const {
  return m_group_;
}
inline void E_BattlepassShop::set_m_group(::google::protobuf::int32 value) {
  set_has_m_group();
  m_group_ = value;
}

// optional int32 m_itemID = 3;
inline bool E_BattlepassShop::has_m_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_BattlepassShop::set_has_m_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_BattlepassShop::clear_has_m_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_BattlepassShop::clear_m_itemid() {
  m_itemid_ = 0;
  clear_has_m_itemid();
}
inline ::google::protobuf::int32 E_BattlepassShop::m_itemid() const {
  return m_itemid_;
}
inline void E_BattlepassShop::set_m_itemid(::google::protobuf::int32 value) {
  set_has_m_itemid();
  m_itemid_ = value;
}

// optional int32 m_itemNum = 4;
inline bool E_BattlepassShop::has_m_itemnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_BattlepassShop::set_has_m_itemnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_BattlepassShop::clear_has_m_itemnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_BattlepassShop::clear_m_itemnum() {
  m_itemnum_ = 0;
  clear_has_m_itemnum();
}
inline ::google::protobuf::int32 E_BattlepassShop::m_itemnum() const {
  return m_itemnum_;
}
inline void E_BattlepassShop::set_m_itemnum(::google::protobuf::int32 value) {
  set_has_m_itemnum();
  m_itemnum_ = value;
}

// optional int32 m_costItem = 5;
inline bool E_BattlepassShop::has_m_costitem() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_BattlepassShop::set_has_m_costitem() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_BattlepassShop::clear_has_m_costitem() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_BattlepassShop::clear_m_costitem() {
  m_costitem_ = 0;
  clear_has_m_costitem();
}
inline ::google::protobuf::int32 E_BattlepassShop::m_costitem() const {
  return m_costitem_;
}
inline void E_BattlepassShop::set_m_costitem(::google::protobuf::int32 value) {
  set_has_m_costitem();
  m_costitem_ = value;
}

// optional int32 m_costNum = 6;
inline bool E_BattlepassShop::has_m_costnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_BattlepassShop::set_has_m_costnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_BattlepassShop::clear_has_m_costnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_BattlepassShop::clear_m_costnum() {
  m_costnum_ = 0;
  clear_has_m_costnum();
}
inline ::google::protobuf::int32 E_BattlepassShop::m_costnum() const {
  return m_costnum_;
}
inline void E_BattlepassShop::set_m_costnum(::google::protobuf::int32 value) {
  set_has_m_costnum();
  m_costnum_ = value;
}

// optional int32 m_numLimit = 7;
inline bool E_BattlepassShop::has_m_numlimit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_BattlepassShop::set_has_m_numlimit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_BattlepassShop::clear_has_m_numlimit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_BattlepassShop::clear_m_numlimit() {
  m_numlimit_ = 0;
  clear_has_m_numlimit();
}
inline ::google::protobuf::int32 E_BattlepassShop::m_numlimit() const {
  return m_numlimit_;
}
inline void E_BattlepassShop::set_m_numlimit(::google::protobuf::int32 value) {
  set_has_m_numlimit();
  m_numlimit_ = value;
}

// -------------------------------------------------------------------

// Sheet_BattlepassShop

// repeated .proto_ff.E_BattlepassShop E_BattlepassShop_List = 1;
inline int Sheet_BattlepassShop::e_battlepassshop_list_size() const {
  return e_battlepassshop_list_.size();
}
inline void Sheet_BattlepassShop::clear_e_battlepassshop_list() {
  e_battlepassshop_list_.Clear();
}
inline const ::proto_ff::E_BattlepassShop& Sheet_BattlepassShop::e_battlepassshop_list(int index) const {
  return e_battlepassshop_list_.Get(index);
}
inline ::proto_ff::E_BattlepassShop* Sheet_BattlepassShop::mutable_e_battlepassshop_list(int index) {
  return e_battlepassshop_list_.Mutable(index);
}
inline ::proto_ff::E_BattlepassShop* Sheet_BattlepassShop::add_e_battlepassshop_list() {
  return e_battlepassshop_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassShop >&
Sheet_BattlepassShop::e_battlepassshop_list() const {
  return e_battlepassshop_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BattlepassShop >*
Sheet_BattlepassShop::mutable_e_battlepassshop_list() {
  return &e_battlepassshop_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_E_5fBattlepass_2eproto__INCLUDED
