// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Peakbattle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Peakbattle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_PeakbattleConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PeakbattleConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PeakbattleConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PeakbattleConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PeakbattleAwardAwardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PeakbattleAwardAwardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PeakbattleAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PeakbattleAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PeakbattleAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PeakbattleAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PeakbattleGuess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PeakbattleGuess_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PeakbattleGuess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PeakbattleGuess_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fPeakbattle_2eproto() {
  protobuf_AddDesc_E_5fPeakbattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Peakbattle.proto");
  GOOGLE_CHECK(file != NULL);
  E_PeakbattleConstant_descriptor_ = file->message_type(0);
  static const int E_PeakbattleConstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleConstant, m_id_),
  };
  E_PeakbattleConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PeakbattleConstant_descriptor_,
      E_PeakbattleConstant::default_instance_,
      E_PeakbattleConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PeakbattleConstant));
  Sheet_PeakbattleConstant_descriptor_ = file->message_type(1);
  static const int Sheet_PeakbattleConstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeakbattleConstant, e_peakbattleconstant_list_),
  };
  Sheet_PeakbattleConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PeakbattleConstant_descriptor_,
      Sheet_PeakbattleConstant::default_instance_,
      Sheet_PeakbattleConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeakbattleConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeakbattleConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PeakbattleConstant));
  E_PeakbattleAwardAwardDesc_descriptor_ = file->message_type(2);
  static const int E_PeakbattleAwardAwardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleAwardAwardDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleAwardAwardDesc, m_time_),
  };
  E_PeakbattleAwardAwardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PeakbattleAwardAwardDesc_descriptor_,
      E_PeakbattleAwardAwardDesc::default_instance_,
      E_PeakbattleAwardAwardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleAwardAwardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleAwardAwardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PeakbattleAwardAwardDesc));
  E_PeakbattleAward_descriptor_ = file->message_type(3);
  static const int E_PeakbattleAward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleAward, m_awardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleAward, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleAward, m_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleAward, m_award_),
  };
  E_PeakbattleAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PeakbattleAward_descriptor_,
      E_PeakbattleAward::default_instance_,
      E_PeakbattleAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PeakbattleAward));
  Sheet_PeakbattleAward_descriptor_ = file->message_type(4);
  static const int Sheet_PeakbattleAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeakbattleAward, e_peakbattleaward_list_),
  };
  Sheet_PeakbattleAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PeakbattleAward_descriptor_,
      Sheet_PeakbattleAward::default_instance_,
      Sheet_PeakbattleAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeakbattleAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeakbattleAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PeakbattleAward));
  E_PeakbattleGuess_descriptor_ = file->message_type(5);
  static const int E_PeakbattleGuess_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleGuess, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleGuess, m_clock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleGuess, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleGuess, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleGuess, m_max_),
  };
  E_PeakbattleGuess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PeakbattleGuess_descriptor_,
      E_PeakbattleGuess::default_instance_,
      E_PeakbattleGuess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleGuess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PeakbattleGuess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PeakbattleGuess));
  Sheet_PeakbattleGuess_descriptor_ = file->message_type(6);
  static const int Sheet_PeakbattleGuess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeakbattleGuess, e_peakbattleguess_list_),
  };
  Sheet_PeakbattleGuess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PeakbattleGuess_descriptor_,
      Sheet_PeakbattleGuess::default_instance_,
      Sheet_PeakbattleGuess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeakbattleGuess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PeakbattleGuess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PeakbattleGuess));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fPeakbattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PeakbattleConstant_descriptor_, &E_PeakbattleConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PeakbattleConstant_descriptor_, &Sheet_PeakbattleConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PeakbattleAwardAwardDesc_descriptor_, &E_PeakbattleAwardAwardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PeakbattleAward_descriptor_, &E_PeakbattleAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PeakbattleAward_descriptor_, &Sheet_PeakbattleAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PeakbattleGuess_descriptor_, &E_PeakbattleGuess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PeakbattleGuess_descriptor_, &Sheet_PeakbattleGuess::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fPeakbattle_2eproto() {
  delete E_PeakbattleConstant::default_instance_;
  delete E_PeakbattleConstant_reflection_;
  delete Sheet_PeakbattleConstant::default_instance_;
  delete Sheet_PeakbattleConstant_reflection_;
  delete E_PeakbattleAwardAwardDesc::default_instance_;
  delete E_PeakbattleAwardAwardDesc_reflection_;
  delete E_PeakbattleAward::default_instance_;
  delete E_PeakbattleAward_reflection_;
  delete Sheet_PeakbattleAward::default_instance_;
  delete Sheet_PeakbattleAward_reflection_;
  delete E_PeakbattleGuess::default_instance_;
  delete E_PeakbattleGuess_reflection_;
  delete Sheet_PeakbattleGuess::default_instance_;
  delete Sheet_PeakbattleGuess_reflection_;
}

void protobuf_AddDesc_E_5fPeakbattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022E_Peakbattle.proto\022\010proto_ff\032\025yd_field"
    "options.proto\"2\n\024E_PeakbattleConstant\022\032\n"
    "\004m_id\030\001 \001(\005B\014\302\377\024\010\345\224\257\344\270\200ID\"c\n\030Sheet_Peakb"
    "attleConstant\022G\n\031E_PeakbattleConstant_Li"
    "st\030\001 \003(\0132\036.proto_ff.E_PeakbattleConstant"
    "B\004\210\301\024\002\"S\n\032E_PeakbattleAwardAwardDesc\022\031\n\005"
    "m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\032\n\006m_time\030\002 \001(\005B"
    "\n\302\377\024\006\351\201\223\345\205\267\"\304\001\n\021E_PeakbattleAward\022\037\n\tm_a"
    "wardId\030\001 \001(\005B\014\302\377\024\010\345\245\226\345\212\261id\022 \n\006m_type\030\002 \001"
    "(\005B\020\302\377\024\014\345\245\226\345\212\261\347\261\273\345\236\213\022%\n\013m_condition\030\003 \001("
    "\005B\020\302\377\024\014\345\245\226\345\212\261\346\235\241\344\273\266\022E\n\007m_award\030\004 \003(\0132$.p"
    "roto_ff.E_PeakbattleAwardAwardDescB\016\302\377\024\006"
    "\345\245\226\345\212\261\210\301\024\006\"Z\n\025Sheet_PeakbattleAward\022A\n\026E"
    "_PeakbattleAward_List\030\001 \003(\0132\033.proto_ff.E"
    "_PeakbattleAwardB\004\210\301\024 \"\267\001\n\021E_PeakbattleG"
    "uess\022\030\n\004m_id\030\001 \001(\005B\n\302\377\024\006\350\265\233\347\250\213\022$\n\007m_cloc"
    "k\030\002 \001(\005B\023\302\377\024\017\347\253\236\347\214\234\345\200\222\350\256\241\346\227\266\022 \n\006m_item\030\003"
    " \001(\005B\020\302\377\024\014\345\217\221\346\224\276\351\201\223\345\205\267\022\031\n\005m_num\030\004 \001(\005B\n\302"
    "\377\024\006\346\225\260\351\207\217\022%\n\005m_max\030\005 \001(\005B\026\302\377\024\022\347\253\236\347\214\234\346\234\200\345"
    "\244\247\344\270\212\351\231\220\"Z\n\025Sheet_PeakbattleGuess\022A\n\026E_P"
    "eakbattleGuess_List\030\001 \003(\0132\033.proto_ff.E_P"
    "eakbattleGuessB\004\210\301\024\004", 860);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Peakbattle.proto", &protobuf_RegisterTypes);
  E_PeakbattleConstant::default_instance_ = new E_PeakbattleConstant();
  Sheet_PeakbattleConstant::default_instance_ = new Sheet_PeakbattleConstant();
  E_PeakbattleAwardAwardDesc::default_instance_ = new E_PeakbattleAwardAwardDesc();
  E_PeakbattleAward::default_instance_ = new E_PeakbattleAward();
  Sheet_PeakbattleAward::default_instance_ = new Sheet_PeakbattleAward();
  E_PeakbattleGuess::default_instance_ = new E_PeakbattleGuess();
  Sheet_PeakbattleGuess::default_instance_ = new Sheet_PeakbattleGuess();
  E_PeakbattleConstant::default_instance_->InitAsDefaultInstance();
  Sheet_PeakbattleConstant::default_instance_->InitAsDefaultInstance();
  E_PeakbattleAwardAwardDesc::default_instance_->InitAsDefaultInstance();
  E_PeakbattleAward::default_instance_->InitAsDefaultInstance();
  Sheet_PeakbattleAward::default_instance_->InitAsDefaultInstance();
  E_PeakbattleGuess::default_instance_->InitAsDefaultInstance();
  Sheet_PeakbattleGuess::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fPeakbattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fPeakbattle_2eproto {
  StaticDescriptorInitializer_E_5fPeakbattle_2eproto() {
    protobuf_AddDesc_E_5fPeakbattle_2eproto();
  }
} static_descriptor_initializer_E_5fPeakbattle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_PeakbattleConstant::kMIdFieldNumber;
#endif  // !_MSC_VER

E_PeakbattleConstant::E_PeakbattleConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PeakbattleConstant::InitAsDefaultInstance() {
}

E_PeakbattleConstant::E_PeakbattleConstant(const E_PeakbattleConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PeakbattleConstant::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PeakbattleConstant::~E_PeakbattleConstant() {
  SharedDtor();
}

void E_PeakbattleConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PeakbattleConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PeakbattleConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PeakbattleConstant_descriptor_;
}

const E_PeakbattleConstant& E_PeakbattleConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPeakbattle_2eproto();
  return *default_instance_;
}

E_PeakbattleConstant* E_PeakbattleConstant::default_instance_ = NULL;

E_PeakbattleConstant* E_PeakbattleConstant::New() const {
  return new E_PeakbattleConstant;
}

void E_PeakbattleConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PeakbattleConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PeakbattleConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PeakbattleConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PeakbattleConstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PeakbattleConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PeakbattleConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PeakbattleConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PeakbattleConstant::MergeFrom(const E_PeakbattleConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PeakbattleConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PeakbattleConstant::CopyFrom(const E_PeakbattleConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PeakbattleConstant::IsInitialized() const {

  return true;
}

void E_PeakbattleConstant::Swap(E_PeakbattleConstant* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PeakbattleConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PeakbattleConstant_descriptor_;
  metadata.reflection = E_PeakbattleConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PeakbattleConstant::kEPeakbattleConstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_PeakbattleConstant::Sheet_PeakbattleConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PeakbattleConstant::InitAsDefaultInstance() {
}

Sheet_PeakbattleConstant::Sheet_PeakbattleConstant(const Sheet_PeakbattleConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PeakbattleConstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PeakbattleConstant::~Sheet_PeakbattleConstant() {
  SharedDtor();
}

void Sheet_PeakbattleConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PeakbattleConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PeakbattleConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PeakbattleConstant_descriptor_;
}

const Sheet_PeakbattleConstant& Sheet_PeakbattleConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPeakbattle_2eproto();
  return *default_instance_;
}

Sheet_PeakbattleConstant* Sheet_PeakbattleConstant::default_instance_ = NULL;

Sheet_PeakbattleConstant* Sheet_PeakbattleConstant::New() const {
  return new Sheet_PeakbattleConstant;
}

void Sheet_PeakbattleConstant::Clear() {
  e_peakbattleconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PeakbattleConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PeakbattleConstant E_PeakbattleConstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PeakbattleConstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_peakbattleconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PeakbattleConstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PeakbattleConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PeakbattleConstant E_PeakbattleConstant_List = 1;
  for (int i = 0; i < this->e_peakbattleconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_peakbattleconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PeakbattleConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PeakbattleConstant E_PeakbattleConstant_List = 1;
  for (int i = 0; i < this->e_peakbattleconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_peakbattleconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PeakbattleConstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PeakbattleConstant E_PeakbattleConstant_List = 1;
  total_size += 1 * this->e_peakbattleconstant_list_size();
  for (int i = 0; i < this->e_peakbattleconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_peakbattleconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PeakbattleConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PeakbattleConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PeakbattleConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PeakbattleConstant::MergeFrom(const Sheet_PeakbattleConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_peakbattleconstant_list_.MergeFrom(from.e_peakbattleconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PeakbattleConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PeakbattleConstant::CopyFrom(const Sheet_PeakbattleConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PeakbattleConstant::IsInitialized() const {

  return true;
}

void Sheet_PeakbattleConstant::Swap(Sheet_PeakbattleConstant* other) {
  if (other != this) {
    e_peakbattleconstant_list_.Swap(&other->e_peakbattleconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PeakbattleConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PeakbattleConstant_descriptor_;
  metadata.reflection = Sheet_PeakbattleConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PeakbattleAwardAwardDesc::kMNumFieldNumber;
const int E_PeakbattleAwardAwardDesc::kMTimeFieldNumber;
#endif  // !_MSC_VER

E_PeakbattleAwardAwardDesc::E_PeakbattleAwardAwardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PeakbattleAwardAwardDesc::InitAsDefaultInstance() {
}

E_PeakbattleAwardAwardDesc::E_PeakbattleAwardAwardDesc(const E_PeakbattleAwardAwardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PeakbattleAwardAwardDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PeakbattleAwardAwardDesc::~E_PeakbattleAwardAwardDesc() {
  SharedDtor();
}

void E_PeakbattleAwardAwardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PeakbattleAwardAwardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PeakbattleAwardAwardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PeakbattleAwardAwardDesc_descriptor_;
}

const E_PeakbattleAwardAwardDesc& E_PeakbattleAwardAwardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPeakbattle_2eproto();
  return *default_instance_;
}

E_PeakbattleAwardAwardDesc* E_PeakbattleAwardAwardDesc::default_instance_ = NULL;

E_PeakbattleAwardAwardDesc* E_PeakbattleAwardAwardDesc::New() const {
  return new E_PeakbattleAwardAwardDesc;
}

void E_PeakbattleAwardAwardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PeakbattleAwardAwardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_time;
        break;
      }

      // optional int32 m_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PeakbattleAwardAwardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_time = 2;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PeakbattleAwardAwardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_time = 2;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PeakbattleAwardAwardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_time = 2;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PeakbattleAwardAwardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PeakbattleAwardAwardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PeakbattleAwardAwardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PeakbattleAwardAwardDesc::MergeFrom(const E_PeakbattleAwardAwardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PeakbattleAwardAwardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PeakbattleAwardAwardDesc::CopyFrom(const E_PeakbattleAwardAwardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PeakbattleAwardAwardDesc::IsInitialized() const {

  return true;
}

void E_PeakbattleAwardAwardDesc::Swap(E_PeakbattleAwardAwardDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_time_, other->m_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PeakbattleAwardAwardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PeakbattleAwardAwardDesc_descriptor_;
  metadata.reflection = E_PeakbattleAwardAwardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PeakbattleAward::kMAwardIdFieldNumber;
const int E_PeakbattleAward::kMTypeFieldNumber;
const int E_PeakbattleAward::kMConditionFieldNumber;
const int E_PeakbattleAward::kMAwardFieldNumber;
#endif  // !_MSC_VER

E_PeakbattleAward::E_PeakbattleAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PeakbattleAward::InitAsDefaultInstance() {
}

E_PeakbattleAward::E_PeakbattleAward(const E_PeakbattleAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PeakbattleAward::SharedCtor() {
  _cached_size_ = 0;
  m_awardid_ = 0;
  m_type_ = 0;
  m_condition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PeakbattleAward::~E_PeakbattleAward() {
  SharedDtor();
}

void E_PeakbattleAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PeakbattleAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PeakbattleAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PeakbattleAward_descriptor_;
}

const E_PeakbattleAward& E_PeakbattleAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPeakbattle_2eproto();
  return *default_instance_;
}

E_PeakbattleAward* E_PeakbattleAward::default_instance_ = NULL;

E_PeakbattleAward* E_PeakbattleAward::New() const {
  return new E_PeakbattleAward;
}

void E_PeakbattleAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_awardid_ = 0;
    m_type_ = 0;
    m_condition_ = 0;
  }
  m_award_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PeakbattleAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_awardId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_awardid_)));
          set_has_m_awardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_condition;
        break;
      }

      // optional int32 m_condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_condition_)));
          set_has_m_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_award;
        break;
      }

      // repeated .proto_ff.E_PeakbattleAwardAwardDesc m_award = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_award;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PeakbattleAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_awardId = 1;
  if (has_m_awardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_awardid(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_condition = 3;
  if (has_m_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_condition(), output);
  }

  // repeated .proto_ff.E_PeakbattleAwardAwardDesc m_award = 4;
  for (int i = 0; i < this->m_award_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_award(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PeakbattleAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_awardId = 1;
  if (has_m_awardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_awardid(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_condition = 3;
  if (has_m_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_condition(), target);
  }

  // repeated .proto_ff.E_PeakbattleAwardAwardDesc m_award = 4;
  for (int i = 0; i < this->m_award_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_award(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PeakbattleAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_awardId = 1;
    if (has_m_awardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_awardid());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_condition = 3;
    if (has_m_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_condition());
    }

  }
  // repeated .proto_ff.E_PeakbattleAwardAwardDesc m_award = 4;
  total_size += 1 * this->m_award_size();
  for (int i = 0; i < this->m_award_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_award(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PeakbattleAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PeakbattleAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PeakbattleAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PeakbattleAward::MergeFrom(const E_PeakbattleAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_award_.MergeFrom(from.m_award_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_awardid()) {
      set_m_awardid(from.m_awardid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_condition()) {
      set_m_condition(from.m_condition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PeakbattleAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PeakbattleAward::CopyFrom(const E_PeakbattleAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PeakbattleAward::IsInitialized() const {

  return true;
}

void E_PeakbattleAward::Swap(E_PeakbattleAward* other) {
  if (other != this) {
    std::swap(m_awardid_, other->m_awardid_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_condition_, other->m_condition_);
    m_award_.Swap(&other->m_award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PeakbattleAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PeakbattleAward_descriptor_;
  metadata.reflection = E_PeakbattleAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PeakbattleAward::kEPeakbattleAwardListFieldNumber;
#endif  // !_MSC_VER

Sheet_PeakbattleAward::Sheet_PeakbattleAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PeakbattleAward::InitAsDefaultInstance() {
}

Sheet_PeakbattleAward::Sheet_PeakbattleAward(const Sheet_PeakbattleAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PeakbattleAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PeakbattleAward::~Sheet_PeakbattleAward() {
  SharedDtor();
}

void Sheet_PeakbattleAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PeakbattleAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PeakbattleAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PeakbattleAward_descriptor_;
}

const Sheet_PeakbattleAward& Sheet_PeakbattleAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPeakbattle_2eproto();
  return *default_instance_;
}

Sheet_PeakbattleAward* Sheet_PeakbattleAward::default_instance_ = NULL;

Sheet_PeakbattleAward* Sheet_PeakbattleAward::New() const {
  return new Sheet_PeakbattleAward;
}

void Sheet_PeakbattleAward::Clear() {
  e_peakbattleaward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PeakbattleAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PeakbattleAward E_PeakbattleAward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PeakbattleAward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_peakbattleaward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PeakbattleAward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PeakbattleAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PeakbattleAward E_PeakbattleAward_List = 1;
  for (int i = 0; i < this->e_peakbattleaward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_peakbattleaward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PeakbattleAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PeakbattleAward E_PeakbattleAward_List = 1;
  for (int i = 0; i < this->e_peakbattleaward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_peakbattleaward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PeakbattleAward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PeakbattleAward E_PeakbattleAward_List = 1;
  total_size += 1 * this->e_peakbattleaward_list_size();
  for (int i = 0; i < this->e_peakbattleaward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_peakbattleaward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PeakbattleAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PeakbattleAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PeakbattleAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PeakbattleAward::MergeFrom(const Sheet_PeakbattleAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_peakbattleaward_list_.MergeFrom(from.e_peakbattleaward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PeakbattleAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PeakbattleAward::CopyFrom(const Sheet_PeakbattleAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PeakbattleAward::IsInitialized() const {

  return true;
}

void Sheet_PeakbattleAward::Swap(Sheet_PeakbattleAward* other) {
  if (other != this) {
    e_peakbattleaward_list_.Swap(&other->e_peakbattleaward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PeakbattleAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PeakbattleAward_descriptor_;
  metadata.reflection = Sheet_PeakbattleAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PeakbattleGuess::kMIdFieldNumber;
const int E_PeakbattleGuess::kMClockFieldNumber;
const int E_PeakbattleGuess::kMItemFieldNumber;
const int E_PeakbattleGuess::kMNumFieldNumber;
const int E_PeakbattleGuess::kMMaxFieldNumber;
#endif  // !_MSC_VER

E_PeakbattleGuess::E_PeakbattleGuess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PeakbattleGuess::InitAsDefaultInstance() {
}

E_PeakbattleGuess::E_PeakbattleGuess(const E_PeakbattleGuess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PeakbattleGuess::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_clock_ = 0;
  m_item_ = 0;
  m_num_ = 0;
  m_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PeakbattleGuess::~E_PeakbattleGuess() {
  SharedDtor();
}

void E_PeakbattleGuess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PeakbattleGuess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PeakbattleGuess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PeakbattleGuess_descriptor_;
}

const E_PeakbattleGuess& E_PeakbattleGuess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPeakbattle_2eproto();
  return *default_instance_;
}

E_PeakbattleGuess* E_PeakbattleGuess::default_instance_ = NULL;

E_PeakbattleGuess* E_PeakbattleGuess::New() const {
  return new E_PeakbattleGuess;
}

void E_PeakbattleGuess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_clock_ = 0;
    m_item_ = 0;
    m_num_ = 0;
    m_max_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PeakbattleGuess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_clock;
        break;
      }

      // optional int32 m_clock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_clock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_clock_)));
          set_has_m_clock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_item;
        break;
      }

      // optional int32 m_item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_max;
        break;
      }

      // optional int32 m_max = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_max_)));
          set_has_m_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PeakbattleGuess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_clock = 2;
  if (has_m_clock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_clock(), output);
  }

  // optional int32 m_item = 3;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_item(), output);
  }

  // optional int32 m_num = 4;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_num(), output);
  }

  // optional int32 m_max = 5;
  if (has_m_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PeakbattleGuess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_clock = 2;
  if (has_m_clock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_clock(), target);
  }

  // optional int32 m_item = 3;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_item(), target);
  }

  // optional int32 m_num = 4;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_num(), target);
  }

  // optional int32 m_max = 5;
  if (has_m_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PeakbattleGuess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_clock = 2;
    if (has_m_clock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_clock());
    }

    // optional int32 m_item = 3;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_item());
    }

    // optional int32 m_num = 4;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_max = 5;
    if (has_m_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PeakbattleGuess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PeakbattleGuess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PeakbattleGuess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PeakbattleGuess::MergeFrom(const E_PeakbattleGuess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_clock()) {
      set_m_clock(from.m_clock());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_max()) {
      set_m_max(from.m_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PeakbattleGuess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PeakbattleGuess::CopyFrom(const E_PeakbattleGuess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PeakbattleGuess::IsInitialized() const {

  return true;
}

void E_PeakbattleGuess::Swap(E_PeakbattleGuess* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_clock_, other->m_clock_);
    std::swap(m_item_, other->m_item_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_max_, other->m_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PeakbattleGuess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PeakbattleGuess_descriptor_;
  metadata.reflection = E_PeakbattleGuess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PeakbattleGuess::kEPeakbattleGuessListFieldNumber;
#endif  // !_MSC_VER

Sheet_PeakbattleGuess::Sheet_PeakbattleGuess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PeakbattleGuess::InitAsDefaultInstance() {
}

Sheet_PeakbattleGuess::Sheet_PeakbattleGuess(const Sheet_PeakbattleGuess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PeakbattleGuess::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PeakbattleGuess::~Sheet_PeakbattleGuess() {
  SharedDtor();
}

void Sheet_PeakbattleGuess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PeakbattleGuess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PeakbattleGuess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PeakbattleGuess_descriptor_;
}

const Sheet_PeakbattleGuess& Sheet_PeakbattleGuess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPeakbattle_2eproto();
  return *default_instance_;
}

Sheet_PeakbattleGuess* Sheet_PeakbattleGuess::default_instance_ = NULL;

Sheet_PeakbattleGuess* Sheet_PeakbattleGuess::New() const {
  return new Sheet_PeakbattleGuess;
}

void Sheet_PeakbattleGuess::Clear() {
  e_peakbattleguess_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PeakbattleGuess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PeakbattleGuess E_PeakbattleGuess_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PeakbattleGuess_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_peakbattleguess_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PeakbattleGuess_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PeakbattleGuess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PeakbattleGuess E_PeakbattleGuess_List = 1;
  for (int i = 0; i < this->e_peakbattleguess_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_peakbattleguess_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PeakbattleGuess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PeakbattleGuess E_PeakbattleGuess_List = 1;
  for (int i = 0; i < this->e_peakbattleguess_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_peakbattleguess_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PeakbattleGuess::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PeakbattleGuess E_PeakbattleGuess_List = 1;
  total_size += 1 * this->e_peakbattleguess_list_size();
  for (int i = 0; i < this->e_peakbattleguess_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_peakbattleguess_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PeakbattleGuess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PeakbattleGuess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PeakbattleGuess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PeakbattleGuess::MergeFrom(const Sheet_PeakbattleGuess& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_peakbattleguess_list_.MergeFrom(from.e_peakbattleguess_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PeakbattleGuess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PeakbattleGuess::CopyFrom(const Sheet_PeakbattleGuess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PeakbattleGuess::IsInitialized() const {

  return true;
}

void Sheet_PeakbattleGuess::Swap(Sheet_PeakbattleGuess* other) {
  if (other != this) {
    e_peakbattleguess_list_.Swap(&other->e_peakbattleguess_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PeakbattleGuess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PeakbattleGuess_descriptor_;
  metadata.reflection = Sheet_PeakbattleGuess_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
