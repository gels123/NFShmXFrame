// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taskreward.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "taskreward.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* taskrewardtaskrewarditemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taskrewardtaskrewarditemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* taskrewardtaskrewardattrDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taskrewardtaskrewardattrDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* taskrewardtaskreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taskrewardtaskreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_taskrewardtaskreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_taskrewardtaskreward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_taskreward_2eproto() {
  protobuf_AddDesc_taskreward_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "taskreward.proto");
  GOOGLE_CHECK(file != NULL);
  taskrewardtaskrewarditemDesc_descriptor_ = file->message_type(0);
  static const int taskrewardtaskrewarditemDesc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskrewarditemDesc, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskrewarditemDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskrewarditemDesc, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskrewarditemDesc, prof_),
  };
  taskrewardtaskrewarditemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taskrewardtaskrewarditemDesc_descriptor_,
      taskrewardtaskrewarditemDesc::default_instance_,
      taskrewardtaskrewarditemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskrewarditemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskrewarditemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taskrewardtaskrewarditemDesc));
  taskrewardtaskrewardattrDesc_descriptor_ = file->message_type(1);
  static const int taskrewardtaskrewardattrDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskrewardattrDesc, id_),
  };
  taskrewardtaskrewardattrDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taskrewardtaskrewardattrDesc_descriptor_,
      taskrewardtaskrewardattrDesc::default_instance_,
      taskrewardtaskrewardattrDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskrewardattrDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskrewardattrDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taskrewardtaskrewardattrDesc));
  taskrewardtaskreward_descriptor_ = file->message_type(2);
  static const int taskrewardtaskreward_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskreward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskreward, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskreward, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskreward, guildexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskreward, guildpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskreward, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskreward, attr_),
  };
  taskrewardtaskreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taskrewardtaskreward_descriptor_,
      taskrewardtaskreward::default_instance_,
      taskrewardtaskreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskrewardtaskreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taskrewardtaskreward));
  Sheet_taskrewardtaskreward_descriptor_ = file->message_type(3);
  static const int Sheet_taskrewardtaskreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_taskrewardtaskreward, taskrewardtaskreward_list_),
  };
  Sheet_taskrewardtaskreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_taskrewardtaskreward_descriptor_,
      Sheet_taskrewardtaskreward::default_instance_,
      Sheet_taskrewardtaskreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_taskrewardtaskreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_taskrewardtaskreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_taskrewardtaskreward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_taskreward_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taskrewardtaskrewarditemDesc_descriptor_, &taskrewardtaskrewarditemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taskrewardtaskrewardattrDesc_descriptor_, &taskrewardtaskrewardattrDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taskrewardtaskreward_descriptor_, &taskrewardtaskreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_taskrewardtaskreward_descriptor_, &Sheet_taskrewardtaskreward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_taskreward_2eproto() {
  delete taskrewardtaskrewarditemDesc::default_instance_;
  delete taskrewardtaskrewarditemDesc_reflection_;
  delete taskrewardtaskrewardattrDesc::default_instance_;
  delete taskrewardtaskrewardattrDesc_reflection_;
  delete taskrewardtaskreward::default_instance_;
  delete taskrewardtaskreward_reflection_;
  delete Sheet_taskrewardtaskreward::default_instance_;
  delete Sheet_taskrewardtaskreward_reflection_;
}

void protobuf_AddDesc_taskreward_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020taskreward.proto\022\010proto_ff\032\025yd_fieldop"
    "tions.proto\"\177\n\034taskrewardtaskrewarditemD"
    "esc\022\030\n\004bind\030\001 \001(\005B\n\302\377\024\006\347\273\221\345\256\232\022\022\n\002id\030\002 \001("
    "\003B\006\302\377\024\002id\022\027\n\003val\030\003 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\030\n\004pr"
    "of\030\004 \001(\005B\n\302\377\024\006\350\201\214\344\270\232\"2\n\034taskrewardtaskre"
    "wardattrDesc\022\022\n\002id\030\001 \001(\003B\006\302\377\024\002id\"\302\002\n\024tas"
    "krewardtaskreward\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\345\245\226\345\212"
    "\261id\022\"\n\010taskType\030\002 \001(\005B\020\302\377\024\014\344\273\273\345\212\241\347\261\273\345\236\213\022"
    "\026\n\002lv\030\003 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\"\n\010guildExp\030\004 \001("
    "\005B\020\302\377\024\014\345\205\254\344\274\232\347\273\217\351\252\214\022$\n\nguildPoint\030\005 \001(\005B"
    "\020\302\377\024\014\345\205\254\344\274\232\350\264\241\347\214\256\022D\n\004item\030\006 \003(\0132&.proto_"
    "ff.taskrewardtaskrewarditemDescB\016\302\377\024\006\347\211\251"
    "\345\223\201\210\301\024\005\022D\n\004attr\030\007 \003(\0132&.proto_ff.taskrew"
    "ardtaskrewardattrDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\005\"f\n"
    "\032Sheet_taskrewardtaskreward\022H\n\031taskrewar"
    "dtaskreward_List\030\001 \003(\0132\036.proto_ff.taskre"
    "wardtaskrewardB\005\210\301\024\240\037", 661);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "taskreward.proto", &protobuf_RegisterTypes);
  taskrewardtaskrewarditemDesc::default_instance_ = new taskrewardtaskrewarditemDesc();
  taskrewardtaskrewardattrDesc::default_instance_ = new taskrewardtaskrewardattrDesc();
  taskrewardtaskreward::default_instance_ = new taskrewardtaskreward();
  Sheet_taskrewardtaskreward::default_instance_ = new Sheet_taskrewardtaskreward();
  taskrewardtaskrewarditemDesc::default_instance_->InitAsDefaultInstance();
  taskrewardtaskrewardattrDesc::default_instance_->InitAsDefaultInstance();
  taskrewardtaskreward::default_instance_->InitAsDefaultInstance();
  Sheet_taskrewardtaskreward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_taskreward_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_taskreward_2eproto {
  StaticDescriptorInitializer_taskreward_2eproto() {
    protobuf_AddDesc_taskreward_2eproto();
  }
} static_descriptor_initializer_taskreward_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int taskrewardtaskrewarditemDesc::kBindFieldNumber;
const int taskrewardtaskrewarditemDesc::kIdFieldNumber;
const int taskrewardtaskrewarditemDesc::kValFieldNumber;
const int taskrewardtaskrewarditemDesc::kProfFieldNumber;
#endif  // !_MSC_VER

taskrewardtaskrewarditemDesc::taskrewardtaskrewarditemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taskrewardtaskrewarditemDesc::InitAsDefaultInstance() {
}

taskrewardtaskrewarditemDesc::taskrewardtaskrewarditemDesc(const taskrewardtaskrewarditemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taskrewardtaskrewarditemDesc::SharedCtor() {
  _cached_size_ = 0;
  bind_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  val_ = 0;
  prof_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taskrewardtaskrewarditemDesc::~taskrewardtaskrewarditemDesc() {
  SharedDtor();
}

void taskrewardtaskrewarditemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void taskrewardtaskrewarditemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taskrewardtaskrewarditemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taskrewardtaskrewarditemDesc_descriptor_;
}

const taskrewardtaskrewarditemDesc& taskrewardtaskrewarditemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskreward_2eproto();
  return *default_instance_;
}

taskrewardtaskrewarditemDesc* taskrewardtaskrewarditemDesc::default_instance_ = NULL;

taskrewardtaskrewarditemDesc* taskrewardtaskrewarditemDesc::New() const {
  return new taskrewardtaskrewarditemDesc;
}

void taskrewardtaskrewarditemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bind_ = 0;
    id_ = GOOGLE_LONGLONG(0);
    val_ = 0;
    prof_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taskrewardtaskrewarditemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_val;
        break;
      }

      // optional int32 val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional int32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taskrewardtaskrewarditemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bind = 1;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bind(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional int32 val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->val(), output);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prof(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taskrewardtaskrewarditemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bind = 1;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bind(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional int32 val = 3;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->val(), target);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prof(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taskrewardtaskrewarditemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bind = 1;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val());
    }

    // optional int32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taskrewardtaskrewarditemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taskrewardtaskrewarditemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taskrewardtaskrewarditemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taskrewardtaskrewarditemDesc::MergeFrom(const taskrewardtaskrewarditemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taskrewardtaskrewarditemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taskrewardtaskrewarditemDesc::CopyFrom(const taskrewardtaskrewarditemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taskrewardtaskrewarditemDesc::IsInitialized() const {

  return true;
}

void taskrewardtaskrewarditemDesc::Swap(taskrewardtaskrewarditemDesc* other) {
  if (other != this) {
    std::swap(bind_, other->bind_);
    std::swap(id_, other->id_);
    std::swap(val_, other->val_);
    std::swap(prof_, other->prof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taskrewardtaskrewarditemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taskrewardtaskrewarditemDesc_descriptor_;
  metadata.reflection = taskrewardtaskrewarditemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int taskrewardtaskrewardattrDesc::kIdFieldNumber;
#endif  // !_MSC_VER

taskrewardtaskrewardattrDesc::taskrewardtaskrewardattrDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taskrewardtaskrewardattrDesc::InitAsDefaultInstance() {
}

taskrewardtaskrewardattrDesc::taskrewardtaskrewardattrDesc(const taskrewardtaskrewardattrDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taskrewardtaskrewardattrDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taskrewardtaskrewardattrDesc::~taskrewardtaskrewardattrDesc() {
  SharedDtor();
}

void taskrewardtaskrewardattrDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void taskrewardtaskrewardattrDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taskrewardtaskrewardattrDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taskrewardtaskrewardattrDesc_descriptor_;
}

const taskrewardtaskrewardattrDesc& taskrewardtaskrewardattrDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskreward_2eproto();
  return *default_instance_;
}

taskrewardtaskrewardattrDesc* taskrewardtaskrewardattrDesc::default_instance_ = NULL;

taskrewardtaskrewardattrDesc* taskrewardtaskrewardattrDesc::New() const {
  return new taskrewardtaskrewardattrDesc;
}

void taskrewardtaskrewardattrDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taskrewardtaskrewardattrDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taskrewardtaskrewardattrDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taskrewardtaskrewardattrDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taskrewardtaskrewardattrDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taskrewardtaskrewardattrDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taskrewardtaskrewardattrDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taskrewardtaskrewardattrDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taskrewardtaskrewardattrDesc::MergeFrom(const taskrewardtaskrewardattrDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taskrewardtaskrewardattrDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taskrewardtaskrewardattrDesc::CopyFrom(const taskrewardtaskrewardattrDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taskrewardtaskrewardattrDesc::IsInitialized() const {

  return true;
}

void taskrewardtaskrewardattrDesc::Swap(taskrewardtaskrewardattrDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taskrewardtaskrewardattrDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taskrewardtaskrewardattrDesc_descriptor_;
  metadata.reflection = taskrewardtaskrewardattrDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int taskrewardtaskreward::kIdFieldNumber;
const int taskrewardtaskreward::kTaskTypeFieldNumber;
const int taskrewardtaskreward::kLvFieldNumber;
const int taskrewardtaskreward::kGuildExpFieldNumber;
const int taskrewardtaskreward::kGuildPointFieldNumber;
const int taskrewardtaskreward::kItemFieldNumber;
const int taskrewardtaskreward::kAttrFieldNumber;
#endif  // !_MSC_VER

taskrewardtaskreward::taskrewardtaskreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taskrewardtaskreward::InitAsDefaultInstance() {
}

taskrewardtaskreward::taskrewardtaskreward(const taskrewardtaskreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taskrewardtaskreward::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  tasktype_ = 0;
  lv_ = 0;
  guildexp_ = 0;
  guildpoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taskrewardtaskreward::~taskrewardtaskreward() {
  SharedDtor();
}

void taskrewardtaskreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void taskrewardtaskreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taskrewardtaskreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taskrewardtaskreward_descriptor_;
}

const taskrewardtaskreward& taskrewardtaskreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskreward_2eproto();
  return *default_instance_;
}

taskrewardtaskreward* taskrewardtaskreward::default_instance_ = NULL;

taskrewardtaskreward* taskrewardtaskreward::New() const {
  return new taskrewardtaskreward;
}

void taskrewardtaskreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    tasktype_ = 0;
    lv_ = 0;
    guildexp_ = 0;
    guildpoint_ = 0;
  }
  item_.Clear();
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taskrewardtaskreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taskType;
        break;
      }

      // optional int32 taskType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guildExp;
        break;
      }

      // optional int32 guildExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildexp_)));
          set_has_guildexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guildPoint;
        break;
      }

      // optional int32 guildPoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildpoint_)));
          set_has_guildpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item;
        break;
      }

      // repeated .proto_ff.taskrewardtaskrewarditemDesc item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item;
        if (input->ExpectTag(58)) goto parse_attr;
        break;
      }

      // repeated .proto_ff.taskrewardtaskrewardattrDesc attr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taskrewardtaskreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 taskType = 2;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tasktype(), output);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // optional int32 guildExp = 4;
  if (has_guildexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guildexp(), output);
  }

  // optional int32 guildPoint = 5;
  if (has_guildpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->guildpoint(), output);
  }

  // repeated .proto_ff.taskrewardtaskrewarditemDesc item = 6;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->item(i), output);
  }

  // repeated .proto_ff.taskrewardtaskrewardattrDesc attr = 7;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taskrewardtaskreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 taskType = 2;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tasktype(), target);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // optional int32 guildExp = 4;
  if (has_guildexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guildexp(), target);
  }

  // optional int32 guildPoint = 5;
  if (has_guildpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->guildpoint(), target);
  }

  // repeated .proto_ff.taskrewardtaskrewarditemDesc item = 6;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->item(i), target);
  }

  // repeated .proto_ff.taskrewardtaskrewardattrDesc attr = 7;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taskrewardtaskreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 taskType = 2;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasktype());
    }

    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 guildExp = 4;
    if (has_guildexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildexp());
    }

    // optional int32 guildPoint = 5;
    if (has_guildpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildpoint());
    }

  }
  // repeated .proto_ff.taskrewardtaskrewarditemDesc item = 6;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .proto_ff.taskrewardtaskrewardattrDesc attr = 7;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taskrewardtaskreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taskrewardtaskreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taskrewardtaskreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taskrewardtaskreward::MergeFrom(const taskrewardtaskreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_guildexp()) {
      set_guildexp(from.guildexp());
    }
    if (from.has_guildpoint()) {
      set_guildpoint(from.guildpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taskrewardtaskreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taskrewardtaskreward::CopyFrom(const taskrewardtaskreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taskrewardtaskreward::IsInitialized() const {

  return true;
}

void taskrewardtaskreward::Swap(taskrewardtaskreward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(lv_, other->lv_);
    std::swap(guildexp_, other->guildexp_);
    std::swap(guildpoint_, other->guildpoint_);
    item_.Swap(&other->item_);
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taskrewardtaskreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taskrewardtaskreward_descriptor_;
  metadata.reflection = taskrewardtaskreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_taskrewardtaskreward::kTaskrewardtaskrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_taskrewardtaskreward::Sheet_taskrewardtaskreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_taskrewardtaskreward::InitAsDefaultInstance() {
}

Sheet_taskrewardtaskreward::Sheet_taskrewardtaskreward(const Sheet_taskrewardtaskreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_taskrewardtaskreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_taskrewardtaskreward::~Sheet_taskrewardtaskreward() {
  SharedDtor();
}

void Sheet_taskrewardtaskreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_taskrewardtaskreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_taskrewardtaskreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_taskrewardtaskreward_descriptor_;
}

const Sheet_taskrewardtaskreward& Sheet_taskrewardtaskreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskreward_2eproto();
  return *default_instance_;
}

Sheet_taskrewardtaskreward* Sheet_taskrewardtaskreward::default_instance_ = NULL;

Sheet_taskrewardtaskreward* Sheet_taskrewardtaskreward::New() const {
  return new Sheet_taskrewardtaskreward;
}

void Sheet_taskrewardtaskreward::Clear() {
  taskrewardtaskreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_taskrewardtaskreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.taskrewardtaskreward taskrewardtaskreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskrewardtaskreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskrewardtaskreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_taskrewardtaskreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_taskrewardtaskreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.taskrewardtaskreward taskrewardtaskreward_List = 1;
  for (int i = 0; i < this->taskrewardtaskreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskrewardtaskreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_taskrewardtaskreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.taskrewardtaskreward taskrewardtaskreward_List = 1;
  for (int i = 0; i < this->taskrewardtaskreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskrewardtaskreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_taskrewardtaskreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.taskrewardtaskreward taskrewardtaskreward_List = 1;
  total_size += 1 * this->taskrewardtaskreward_list_size();
  for (int i = 0; i < this->taskrewardtaskreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskrewardtaskreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_taskrewardtaskreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_taskrewardtaskreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_taskrewardtaskreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_taskrewardtaskreward::MergeFrom(const Sheet_taskrewardtaskreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskrewardtaskreward_list_.MergeFrom(from.taskrewardtaskreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_taskrewardtaskreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_taskrewardtaskreward::CopyFrom(const Sheet_taskrewardtaskreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_taskrewardtaskreward::IsInitialized() const {

  return true;
}

void Sheet_taskrewardtaskreward::Swap(Sheet_taskrewardtaskreward* other) {
  if (other != this) {
    taskrewardtaskreward_list_.Swap(&other->taskrewardtaskreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_taskrewardtaskreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_taskrewardtaskreward_descriptor_;
  metadata.reflection = Sheet_taskrewardtaskreward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
