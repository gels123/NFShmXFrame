// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taskreward.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "taskreward.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_TaskrewardTaskrewardItemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_TaskrewardTaskrewardItemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_TaskrewardTaskrewardAttrDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_TaskrewardTaskrewardAttrDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_TaskrewardTaskreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_TaskrewardTaskreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_TaskrewardTaskreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_TaskrewardTaskreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_TaskrewardTasktype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_TaskrewardTasktype_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_TaskrewardTasktype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_TaskrewardTasktype_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_taskreward_2eproto() {
  protobuf_AddDesc_taskreward_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "taskreward.proto");
  GOOGLE_CHECK(file != NULL);
  E_TaskrewardTaskrewardItemDesc_descriptor_ = file->message_type(0);
  static const int E_TaskrewardTaskrewardItemDesc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskrewardItemDesc, m_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskrewardItemDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskrewardItemDesc, m_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskrewardItemDesc, m_prof_),
  };
  E_TaskrewardTaskrewardItemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_TaskrewardTaskrewardItemDesc_descriptor_,
      E_TaskrewardTaskrewardItemDesc::default_instance_,
      E_TaskrewardTaskrewardItemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskrewardItemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskrewardItemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_TaskrewardTaskrewardItemDesc));
  E_TaskrewardTaskrewardAttrDesc_descriptor_ = file->message_type(1);
  static const int E_TaskrewardTaskrewardAttrDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskrewardAttrDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskrewardAttrDesc, m_val_),
  };
  E_TaskrewardTaskrewardAttrDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_TaskrewardTaskrewardAttrDesc_descriptor_,
      E_TaskrewardTaskrewardAttrDesc::default_instance_,
      E_TaskrewardTaskrewardAttrDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskrewardAttrDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskrewardAttrDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_TaskrewardTaskrewardAttrDesc));
  E_TaskrewardTaskreward_descriptor_ = file->message_type(2);
  static const int E_TaskrewardTaskreward_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskreward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskreward, m_tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskreward, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskreward, m_guildexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskreward, m_guildpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskreward, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskreward, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskreward, m_attr_),
  };
  E_TaskrewardTaskreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_TaskrewardTaskreward_descriptor_,
      E_TaskrewardTaskreward::default_instance_,
      E_TaskrewardTaskreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTaskreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_TaskrewardTaskreward));
  Sheet_TaskrewardTaskreward_descriptor_ = file->message_type(3);
  static const int Sheet_TaskrewardTaskreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskrewardTaskreward, e_taskrewardtaskreward_list_),
  };
  Sheet_TaskrewardTaskreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_TaskrewardTaskreward_descriptor_,
      Sheet_TaskrewardTaskreward::default_instance_,
      Sheet_TaskrewardTaskreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskrewardTaskreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskrewardTaskreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_TaskrewardTaskreward));
  E_TaskrewardTasktype_descriptor_ = file->message_type(4);
  static const int E_TaskrewardTasktype_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTasktype, m_tasktype_),
  };
  E_TaskrewardTasktype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_TaskrewardTasktype_descriptor_,
      E_TaskrewardTasktype::default_instance_,
      E_TaskrewardTasktype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTasktype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskrewardTasktype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_TaskrewardTasktype));
  Sheet_TaskrewardTasktype_descriptor_ = file->message_type(5);
  static const int Sheet_TaskrewardTasktype_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskrewardTasktype, e_taskrewardtasktype_list_),
  };
  Sheet_TaskrewardTasktype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_TaskrewardTasktype_descriptor_,
      Sheet_TaskrewardTasktype::default_instance_,
      Sheet_TaskrewardTasktype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskrewardTasktype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskrewardTasktype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_TaskrewardTasktype));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_taskreward_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_TaskrewardTaskrewardItemDesc_descriptor_, &E_TaskrewardTaskrewardItemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_TaskrewardTaskrewardAttrDesc_descriptor_, &E_TaskrewardTaskrewardAttrDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_TaskrewardTaskreward_descriptor_, &E_TaskrewardTaskreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_TaskrewardTaskreward_descriptor_, &Sheet_TaskrewardTaskreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_TaskrewardTasktype_descriptor_, &E_TaskrewardTasktype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_TaskrewardTasktype_descriptor_, &Sheet_TaskrewardTasktype::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_taskreward_2eproto() {
  delete E_TaskrewardTaskrewardItemDesc::default_instance_;
  delete E_TaskrewardTaskrewardItemDesc_reflection_;
  delete E_TaskrewardTaskrewardAttrDesc::default_instance_;
  delete E_TaskrewardTaskrewardAttrDesc_reflection_;
  delete E_TaskrewardTaskreward::default_instance_;
  delete E_TaskrewardTaskreward_reflection_;
  delete Sheet_TaskrewardTaskreward::default_instance_;
  delete Sheet_TaskrewardTaskreward_reflection_;
  delete E_TaskrewardTasktype::default_instance_;
  delete E_TaskrewardTasktype_reflection_;
  delete Sheet_TaskrewardTasktype::default_instance_;
  delete Sheet_TaskrewardTasktype_reflection_;
}

void protobuf_AddDesc_taskreward_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020taskreward.proto\022\010proto_ff\032\025yd_fieldop"
    "tions.proto\"\211\001\n\036E_TaskrewardTaskrewardIt"
    "emDesc\022\032\n\006m_bind\030\001 \001(\005B\n\302\377\024\006\347\273\221\345\256\232\022\024\n\004m_"
    "id\030\002 \001(\003B\006\302\377\024\002id\022\031\n\005m_val\030\003 \001(\005B\n\302\377\024\006\346\225\260"
    "\351\207\217\022\032\n\006m_prof\030\004 \001(\005B\n\302\377\024\006\350\201\214\344\270\232\"N\n\036E_Tas"
    "krewardTaskrewardAttrDesc\022\024\n\004m_id\030\001 \001(\003B"
    "\006\302\377\024\002id\022\026\n\005m_val\030\002 \001(\003B\007\302\377\024\003\345\200\274\"\367\002\n\026E_Ta"
    "skrewardTaskreward\022\032\n\004m_id\030\001 \001(\003B\014\302\377\024\010\345\245"
    "\226\345\212\261id\022$\n\nm_tasktype\030\002 \001(\005B\020\302\377\024\014\344\273\273\345\212\241\347\261"
    "\273\345\236\213\022\030\n\004m_lv\030\003 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022$\n\nm_guil"
    "dexp\030\004 \001(\005B\020\302\377\024\014\345\205\254\344\274\232\347\273\217\351\252\214\022&\n\014m_guildp"
    "oint\030\005 \001(\005B\020\302\377\024\014\345\205\254\344\274\232\350\264\241\347\214\256\022\037\n\tm_skilli"
    "d\030\006 \001(\005B\014\302\377\024\010\346\212\200\350\203\275ID\022H\n\006m_item\030\007 \003(\0132(."
    "proto_ff.E_TaskrewardTaskrewardItemDescB"
    "\016\302\377\024\006\347\211\251\345\223\201\210\301\024\005\022H\n\006m_attr\030\010 \003(\0132(.proto_"
    "ff.E_TaskrewardTaskrewardAttrDescB\016\302\377\024\006\345"
    "\261\236\346\200\247\210\301\024\005\"j\n\032Sheet_TaskrewardTaskreward\022"
    "L\n\033E_TaskrewardTaskreward_List\030\001 \003(\0132 .p"
    "roto_ff.E_TaskrewardTaskrewardB\005\210\301\024\310\001\"<\n"
    "\024E_TaskrewardTasktype\022$\n\nm_tasktype\030\001 \001("
    "\005B\020\302\377\024\014\344\273\273\345\212\241\347\261\273\345\236\213\"c\n\030Sheet_TaskrewardT"
    "asktype\022G\n\031E_TaskrewardTasktype_List\030\001 \003"
    "(\0132\036.proto_ff.E_TaskrewardTasktypeB\004\210\301\024\024", 920);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "taskreward.proto", &protobuf_RegisterTypes);
  E_TaskrewardTaskrewardItemDesc::default_instance_ = new E_TaskrewardTaskrewardItemDesc();
  E_TaskrewardTaskrewardAttrDesc::default_instance_ = new E_TaskrewardTaskrewardAttrDesc();
  E_TaskrewardTaskreward::default_instance_ = new E_TaskrewardTaskreward();
  Sheet_TaskrewardTaskreward::default_instance_ = new Sheet_TaskrewardTaskreward();
  E_TaskrewardTasktype::default_instance_ = new E_TaskrewardTasktype();
  Sheet_TaskrewardTasktype::default_instance_ = new Sheet_TaskrewardTasktype();
  E_TaskrewardTaskrewardItemDesc::default_instance_->InitAsDefaultInstance();
  E_TaskrewardTaskrewardAttrDesc::default_instance_->InitAsDefaultInstance();
  E_TaskrewardTaskreward::default_instance_->InitAsDefaultInstance();
  Sheet_TaskrewardTaskreward::default_instance_->InitAsDefaultInstance();
  E_TaskrewardTasktype::default_instance_->InitAsDefaultInstance();
  Sheet_TaskrewardTasktype::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_taskreward_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_taskreward_2eproto {
  StaticDescriptorInitializer_taskreward_2eproto() {
    protobuf_AddDesc_taskreward_2eproto();
  }
} static_descriptor_initializer_taskreward_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_TaskrewardTaskrewardItemDesc::kMBindFieldNumber;
const int E_TaskrewardTaskrewardItemDesc::kMIdFieldNumber;
const int E_TaskrewardTaskrewardItemDesc::kMValFieldNumber;
const int E_TaskrewardTaskrewardItemDesc::kMProfFieldNumber;
#endif  // !_MSC_VER

E_TaskrewardTaskrewardItemDesc::E_TaskrewardTaskrewardItemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_TaskrewardTaskrewardItemDesc::InitAsDefaultInstance() {
}

E_TaskrewardTaskrewardItemDesc::E_TaskrewardTaskrewardItemDesc(const E_TaskrewardTaskrewardItemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_TaskrewardTaskrewardItemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_bind_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_val_ = 0;
  m_prof_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_TaskrewardTaskrewardItemDesc::~E_TaskrewardTaskrewardItemDesc() {
  SharedDtor();
}

void E_TaskrewardTaskrewardItemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_TaskrewardTaskrewardItemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_TaskrewardTaskrewardItemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_TaskrewardTaskrewardItemDesc_descriptor_;
}

const E_TaskrewardTaskrewardItemDesc& E_TaskrewardTaskrewardItemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskreward_2eproto();
  return *default_instance_;
}

E_TaskrewardTaskrewardItemDesc* E_TaskrewardTaskrewardItemDesc::default_instance_ = NULL;

E_TaskrewardTaskrewardItemDesc* E_TaskrewardTaskrewardItemDesc::New() const {
  return new E_TaskrewardTaskrewardItemDesc;
}

void E_TaskrewardTaskrewardItemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_bind_ = 0;
    m_id_ = GOOGLE_LONGLONG(0);
    m_val_ = 0;
    m_prof_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_TaskrewardTaskrewardItemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_bind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bind_)));
          set_has_m_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int64 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_val;
        break;
      }

      // optional int32 m_val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_val_)));
          set_has_m_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_prof;
        break;
      }

      // optional int32 m_prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_prof_)));
          set_has_m_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_TaskrewardTaskrewardItemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_bind = 1;
  if (has_m_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_bind(), output);
  }

  // optional int64 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_id(), output);
  }

  // optional int32 m_val = 3;
  if (has_m_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_val(), output);
  }

  // optional int32 m_prof = 4;
  if (has_m_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_prof(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_TaskrewardTaskrewardItemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_bind = 1;
  if (has_m_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_bind(), target);
  }

  // optional int64 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_id(), target);
  }

  // optional int32 m_val = 3;
  if (has_m_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_val(), target);
  }

  // optional int32 m_prof = 4;
  if (has_m_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_prof(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_TaskrewardTaskrewardItemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_bind = 1;
    if (has_m_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bind());
    }

    // optional int64 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_val = 3;
    if (has_m_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_val());
    }

    // optional int32 m_prof = 4;
    if (has_m_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_prof());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_TaskrewardTaskrewardItemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_TaskrewardTaskrewardItemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_TaskrewardTaskrewardItemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_TaskrewardTaskrewardItemDesc::MergeFrom(const E_TaskrewardTaskrewardItemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bind()) {
      set_m_bind(from.m_bind());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_val()) {
      set_m_val(from.m_val());
    }
    if (from.has_m_prof()) {
      set_m_prof(from.m_prof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_TaskrewardTaskrewardItemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_TaskrewardTaskrewardItemDesc::CopyFrom(const E_TaskrewardTaskrewardItemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_TaskrewardTaskrewardItemDesc::IsInitialized() const {

  return true;
}

void E_TaskrewardTaskrewardItemDesc::Swap(E_TaskrewardTaskrewardItemDesc* other) {
  if (other != this) {
    std::swap(m_bind_, other->m_bind_);
    std::swap(m_id_, other->m_id_);
    std::swap(m_val_, other->m_val_);
    std::swap(m_prof_, other->m_prof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_TaskrewardTaskrewardItemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_TaskrewardTaskrewardItemDesc_descriptor_;
  metadata.reflection = E_TaskrewardTaskrewardItemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_TaskrewardTaskrewardAttrDesc::kMIdFieldNumber;
const int E_TaskrewardTaskrewardAttrDesc::kMValFieldNumber;
#endif  // !_MSC_VER

E_TaskrewardTaskrewardAttrDesc::E_TaskrewardTaskrewardAttrDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_TaskrewardTaskrewardAttrDesc::InitAsDefaultInstance() {
}

E_TaskrewardTaskrewardAttrDesc::E_TaskrewardTaskrewardAttrDesc(const E_TaskrewardTaskrewardAttrDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_TaskrewardTaskrewardAttrDesc::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_val_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_TaskrewardTaskrewardAttrDesc::~E_TaskrewardTaskrewardAttrDesc() {
  SharedDtor();
}

void E_TaskrewardTaskrewardAttrDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_TaskrewardTaskrewardAttrDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_TaskrewardTaskrewardAttrDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_TaskrewardTaskrewardAttrDesc_descriptor_;
}

const E_TaskrewardTaskrewardAttrDesc& E_TaskrewardTaskrewardAttrDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskreward_2eproto();
  return *default_instance_;
}

E_TaskrewardTaskrewardAttrDesc* E_TaskrewardTaskrewardAttrDesc::default_instance_ = NULL;

E_TaskrewardTaskrewardAttrDesc* E_TaskrewardTaskrewardAttrDesc::New() const {
  return new E_TaskrewardTaskrewardAttrDesc;
}

void E_TaskrewardTaskrewardAttrDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_val_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_TaskrewardTaskrewardAttrDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_val;
        break;
      }

      // optional int64 m_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_val_)));
          set_has_m_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_TaskrewardTaskrewardAttrDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int64 m_val = 2;
  if (has_m_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_TaskrewardTaskrewardAttrDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int64 m_val = 2;
  if (has_m_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_TaskrewardTaskrewardAttrDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int64 m_val = 2;
    if (has_m_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_TaskrewardTaskrewardAttrDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_TaskrewardTaskrewardAttrDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_TaskrewardTaskrewardAttrDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_TaskrewardTaskrewardAttrDesc::MergeFrom(const E_TaskrewardTaskrewardAttrDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_val()) {
      set_m_val(from.m_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_TaskrewardTaskrewardAttrDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_TaskrewardTaskrewardAttrDesc::CopyFrom(const E_TaskrewardTaskrewardAttrDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_TaskrewardTaskrewardAttrDesc::IsInitialized() const {

  return true;
}

void E_TaskrewardTaskrewardAttrDesc::Swap(E_TaskrewardTaskrewardAttrDesc* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_val_, other->m_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_TaskrewardTaskrewardAttrDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_TaskrewardTaskrewardAttrDesc_descriptor_;
  metadata.reflection = E_TaskrewardTaskrewardAttrDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_TaskrewardTaskreward::kMIdFieldNumber;
const int E_TaskrewardTaskreward::kMTasktypeFieldNumber;
const int E_TaskrewardTaskreward::kMLvFieldNumber;
const int E_TaskrewardTaskreward::kMGuildexpFieldNumber;
const int E_TaskrewardTaskreward::kMGuildpointFieldNumber;
const int E_TaskrewardTaskreward::kMSkillidFieldNumber;
const int E_TaskrewardTaskreward::kMItemFieldNumber;
const int E_TaskrewardTaskreward::kMAttrFieldNumber;
#endif  // !_MSC_VER

E_TaskrewardTaskreward::E_TaskrewardTaskreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_TaskrewardTaskreward::InitAsDefaultInstance() {
}

E_TaskrewardTaskreward::E_TaskrewardTaskreward(const E_TaskrewardTaskreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_TaskrewardTaskreward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_tasktype_ = 0;
  m_lv_ = 0;
  m_guildexp_ = 0;
  m_guildpoint_ = 0;
  m_skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_TaskrewardTaskreward::~E_TaskrewardTaskreward() {
  SharedDtor();
}

void E_TaskrewardTaskreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_TaskrewardTaskreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_TaskrewardTaskreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_TaskrewardTaskreward_descriptor_;
}

const E_TaskrewardTaskreward& E_TaskrewardTaskreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskreward_2eproto();
  return *default_instance_;
}

E_TaskrewardTaskreward* E_TaskrewardTaskreward::default_instance_ = NULL;

E_TaskrewardTaskreward* E_TaskrewardTaskreward::New() const {
  return new E_TaskrewardTaskreward;
}

void E_TaskrewardTaskreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_tasktype_ = 0;
    m_lv_ = 0;
    m_guildexp_ = 0;
    m_guildpoint_ = 0;
    m_skillid_ = 0;
  }
  m_item_.Clear();
  m_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_TaskrewardTaskreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_tasktype;
        break;
      }

      // optional int32 m_tasktype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tasktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tasktype_)));
          set_has_m_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_guildexp;
        break;
      }

      // optional int32 m_guildexp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guildexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guildexp_)));
          set_has_m_guildexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_guildpoint;
        break;
      }

      // optional int32 m_guildpoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guildpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guildpoint_)));
          set_has_m_guildpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_skillid;
        break;
      }

      // optional int32 m_skillid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_item;
        break;
      }

      // repeated .proto_ff.E_TaskrewardTaskrewardItemDesc m_item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_item;
        if (input->ExpectTag(66)) goto parse_m_attr;
        break;
      }

      // repeated .proto_ff.E_TaskrewardTaskrewardAttrDesc m_attr = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_TaskrewardTaskreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_tasktype = 2;
  if (has_m_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_tasktype(), output);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lv(), output);
  }

  // optional int32 m_guildexp = 4;
  if (has_m_guildexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_guildexp(), output);
  }

  // optional int32 m_guildpoint = 5;
  if (has_m_guildpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_guildpoint(), output);
  }

  // optional int32 m_skillid = 6;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_skillid(), output);
  }

  // repeated .proto_ff.E_TaskrewardTaskrewardItemDesc m_item = 7;
  for (int i = 0; i < this->m_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_item(i), output);
  }

  // repeated .proto_ff.E_TaskrewardTaskrewardAttrDesc m_attr = 8;
  for (int i = 0; i < this->m_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_TaskrewardTaskreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_tasktype = 2;
  if (has_m_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_tasktype(), target);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lv(), target);
  }

  // optional int32 m_guildexp = 4;
  if (has_m_guildexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_guildexp(), target);
  }

  // optional int32 m_guildpoint = 5;
  if (has_m_guildpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_guildpoint(), target);
  }

  // optional int32 m_skillid = 6;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_skillid(), target);
  }

  // repeated .proto_ff.E_TaskrewardTaskrewardItemDesc m_item = 7;
  for (int i = 0; i < this->m_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_item(i), target);
  }

  // repeated .proto_ff.E_TaskrewardTaskrewardAttrDesc m_attr = 8;
  for (int i = 0; i < this->m_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_TaskrewardTaskreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_tasktype = 2;
    if (has_m_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tasktype());
    }

    // optional int32 m_lv = 3;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_guildexp = 4;
    if (has_m_guildexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guildexp());
    }

    // optional int32 m_guildpoint = 5;
    if (has_m_guildpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guildpoint());
    }

    // optional int32 m_skillid = 6;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

  }
  // repeated .proto_ff.E_TaskrewardTaskrewardItemDesc m_item = 7;
  total_size += 1 * this->m_item_size();
  for (int i = 0; i < this->m_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_item(i));
  }

  // repeated .proto_ff.E_TaskrewardTaskrewardAttrDesc m_attr = 8;
  total_size += 1 * this->m_attr_size();
  for (int i = 0; i < this->m_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_TaskrewardTaskreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_TaskrewardTaskreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_TaskrewardTaskreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_TaskrewardTaskreward::MergeFrom(const E_TaskrewardTaskreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_item_.MergeFrom(from.m_item_);
  m_attr_.MergeFrom(from.m_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_tasktype()) {
      set_m_tasktype(from.m_tasktype());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_guildexp()) {
      set_m_guildexp(from.m_guildexp());
    }
    if (from.has_m_guildpoint()) {
      set_m_guildpoint(from.m_guildpoint());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_TaskrewardTaskreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_TaskrewardTaskreward::CopyFrom(const E_TaskrewardTaskreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_TaskrewardTaskreward::IsInitialized() const {

  return true;
}

void E_TaskrewardTaskreward::Swap(E_TaskrewardTaskreward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_tasktype_, other->m_tasktype_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_guildexp_, other->m_guildexp_);
    std::swap(m_guildpoint_, other->m_guildpoint_);
    std::swap(m_skillid_, other->m_skillid_);
    m_item_.Swap(&other->m_item_);
    m_attr_.Swap(&other->m_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_TaskrewardTaskreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_TaskrewardTaskreward_descriptor_;
  metadata.reflection = E_TaskrewardTaskreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_TaskrewardTaskreward::kETaskrewardTaskrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_TaskrewardTaskreward::Sheet_TaskrewardTaskreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_TaskrewardTaskreward::InitAsDefaultInstance() {
}

Sheet_TaskrewardTaskreward::Sheet_TaskrewardTaskreward(const Sheet_TaskrewardTaskreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_TaskrewardTaskreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_TaskrewardTaskreward::~Sheet_TaskrewardTaskreward() {
  SharedDtor();
}

void Sheet_TaskrewardTaskreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_TaskrewardTaskreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_TaskrewardTaskreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_TaskrewardTaskreward_descriptor_;
}

const Sheet_TaskrewardTaskreward& Sheet_TaskrewardTaskreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskreward_2eproto();
  return *default_instance_;
}

Sheet_TaskrewardTaskreward* Sheet_TaskrewardTaskreward::default_instance_ = NULL;

Sheet_TaskrewardTaskreward* Sheet_TaskrewardTaskreward::New() const {
  return new Sheet_TaskrewardTaskreward;
}

void Sheet_TaskrewardTaskreward::Clear() {
  e_taskrewardtaskreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_TaskrewardTaskreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_TaskrewardTaskreward E_TaskrewardTaskreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_TaskrewardTaskreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_taskrewardtaskreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_TaskrewardTaskreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_TaskrewardTaskreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_TaskrewardTaskreward E_TaskrewardTaskreward_List = 1;
  for (int i = 0; i < this->e_taskrewardtaskreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_taskrewardtaskreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_TaskrewardTaskreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_TaskrewardTaskreward E_TaskrewardTaskreward_List = 1;
  for (int i = 0; i < this->e_taskrewardtaskreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_taskrewardtaskreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_TaskrewardTaskreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_TaskrewardTaskreward E_TaskrewardTaskreward_List = 1;
  total_size += 1 * this->e_taskrewardtaskreward_list_size();
  for (int i = 0; i < this->e_taskrewardtaskreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_taskrewardtaskreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_TaskrewardTaskreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_TaskrewardTaskreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_TaskrewardTaskreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_TaskrewardTaskreward::MergeFrom(const Sheet_TaskrewardTaskreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_taskrewardtaskreward_list_.MergeFrom(from.e_taskrewardtaskreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_TaskrewardTaskreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_TaskrewardTaskreward::CopyFrom(const Sheet_TaskrewardTaskreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_TaskrewardTaskreward::IsInitialized() const {

  return true;
}

void Sheet_TaskrewardTaskreward::Swap(Sheet_TaskrewardTaskreward* other) {
  if (other != this) {
    e_taskrewardtaskreward_list_.Swap(&other->e_taskrewardtaskreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_TaskrewardTaskreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_TaskrewardTaskreward_descriptor_;
  metadata.reflection = Sheet_TaskrewardTaskreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_TaskrewardTasktype::kMTasktypeFieldNumber;
#endif  // !_MSC_VER

E_TaskrewardTasktype::E_TaskrewardTasktype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_TaskrewardTasktype::InitAsDefaultInstance() {
}

E_TaskrewardTasktype::E_TaskrewardTasktype(const E_TaskrewardTasktype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_TaskrewardTasktype::SharedCtor() {
  _cached_size_ = 0;
  m_tasktype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_TaskrewardTasktype::~E_TaskrewardTasktype() {
  SharedDtor();
}

void E_TaskrewardTasktype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_TaskrewardTasktype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_TaskrewardTasktype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_TaskrewardTasktype_descriptor_;
}

const E_TaskrewardTasktype& E_TaskrewardTasktype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskreward_2eproto();
  return *default_instance_;
}

E_TaskrewardTasktype* E_TaskrewardTasktype::default_instance_ = NULL;

E_TaskrewardTasktype* E_TaskrewardTasktype::New() const {
  return new E_TaskrewardTasktype;
}

void E_TaskrewardTasktype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_tasktype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_TaskrewardTasktype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_tasktype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tasktype_)));
          set_has_m_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_TaskrewardTasktype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_tasktype = 1;
  if (has_m_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_tasktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_TaskrewardTasktype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_tasktype = 1;
  if (has_m_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_tasktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_TaskrewardTasktype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_tasktype = 1;
    if (has_m_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tasktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_TaskrewardTasktype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_TaskrewardTasktype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_TaskrewardTasktype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_TaskrewardTasktype::MergeFrom(const E_TaskrewardTasktype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_tasktype()) {
      set_m_tasktype(from.m_tasktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_TaskrewardTasktype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_TaskrewardTasktype::CopyFrom(const E_TaskrewardTasktype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_TaskrewardTasktype::IsInitialized() const {

  return true;
}

void E_TaskrewardTasktype::Swap(E_TaskrewardTasktype* other) {
  if (other != this) {
    std::swap(m_tasktype_, other->m_tasktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_TaskrewardTasktype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_TaskrewardTasktype_descriptor_;
  metadata.reflection = E_TaskrewardTasktype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_TaskrewardTasktype::kETaskrewardTasktypeListFieldNumber;
#endif  // !_MSC_VER

Sheet_TaskrewardTasktype::Sheet_TaskrewardTasktype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_TaskrewardTasktype::InitAsDefaultInstance() {
}

Sheet_TaskrewardTasktype::Sheet_TaskrewardTasktype(const Sheet_TaskrewardTasktype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_TaskrewardTasktype::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_TaskrewardTasktype::~Sheet_TaskrewardTasktype() {
  SharedDtor();
}

void Sheet_TaskrewardTasktype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_TaskrewardTasktype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_TaskrewardTasktype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_TaskrewardTasktype_descriptor_;
}

const Sheet_TaskrewardTasktype& Sheet_TaskrewardTasktype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskreward_2eproto();
  return *default_instance_;
}

Sheet_TaskrewardTasktype* Sheet_TaskrewardTasktype::default_instance_ = NULL;

Sheet_TaskrewardTasktype* Sheet_TaskrewardTasktype::New() const {
  return new Sheet_TaskrewardTasktype;
}

void Sheet_TaskrewardTasktype::Clear() {
  e_taskrewardtasktype_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_TaskrewardTasktype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_TaskrewardTasktype E_TaskrewardTasktype_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_TaskrewardTasktype_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_taskrewardtasktype_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_TaskrewardTasktype_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_TaskrewardTasktype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_TaskrewardTasktype E_TaskrewardTasktype_List = 1;
  for (int i = 0; i < this->e_taskrewardtasktype_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_taskrewardtasktype_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_TaskrewardTasktype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_TaskrewardTasktype E_TaskrewardTasktype_List = 1;
  for (int i = 0; i < this->e_taskrewardtasktype_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_taskrewardtasktype_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_TaskrewardTasktype::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_TaskrewardTasktype E_TaskrewardTasktype_List = 1;
  total_size += 1 * this->e_taskrewardtasktype_list_size();
  for (int i = 0; i < this->e_taskrewardtasktype_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_taskrewardtasktype_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_TaskrewardTasktype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_TaskrewardTasktype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_TaskrewardTasktype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_TaskrewardTasktype::MergeFrom(const Sheet_TaskrewardTasktype& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_taskrewardtasktype_list_.MergeFrom(from.e_taskrewardtasktype_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_TaskrewardTasktype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_TaskrewardTasktype::CopyFrom(const Sheet_TaskrewardTasktype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_TaskrewardTasktype::IsInitialized() const {

  return true;
}

void Sheet_TaskrewardTasktype::Swap(Sheet_TaskrewardTasktype* other) {
  if (other != this) {
    e_taskrewardtasktype_list_.Swap(&other->e_taskrewardtasktype_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_TaskrewardTasktype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_TaskrewardTasktype_descriptor_;
  metadata.reflection = Sheet_TaskrewardTasktype_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
