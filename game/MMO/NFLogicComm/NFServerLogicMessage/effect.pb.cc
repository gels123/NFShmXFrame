// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: effect.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "effect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* effecteffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  effecteffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_effecteffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_effecteffect_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_effect_2eproto() {
  protobuf_AddDesc_effect_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "effect.proto");
  GOOGLE_CHECK(file != NULL);
  effecteffect_descriptor_ = file->message_type(0);
  static const int effecteffect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(effecteffect, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(effecteffect, effecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(effecteffect, econtent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(effecteffect, effectaudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(effecteffect, eparam_),
  };
  effecteffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      effecteffect_descriptor_,
      effecteffect::default_instance_,
      effecteffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(effecteffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(effecteffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(effecteffect));
  Sheet_effecteffect_descriptor_ = file->message_type(1);
  static const int Sheet_effecteffect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_effecteffect, effecteffect_list_),
  };
  Sheet_effecteffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_effecteffect_descriptor_,
      Sheet_effecteffect::default_instance_,
      Sheet_effecteffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_effecteffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_effecteffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_effecteffect));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_effect_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    effecteffect_descriptor_, &effecteffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_effecteffect_descriptor_, &Sheet_effecteffect::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_effect_2eproto() {
  delete effecteffect::default_instance_;
  delete effecteffect_reflection_;
  delete Sheet_effecteffect::default_instance_;
  delete Sheet_effecteffect_reflection_;
}

void protobuf_AddDesc_effect_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014effect.proto\022\010proto_ff\032\025yd_fieldoption"
    "s.proto\"\313\001\n\014effecteffect\022\036\n\010effectId\030\001 \001"
    "(\005B\014\302\377\024\010\346\225\210\346\236\234id\022$\n\neffectType\030\002 \001(\005B\020\302\377"
    "\024\014\346\225\210\346\236\234\347\261\273\345\236\213\022&\n\010eContent\030\003 \001(\tB\024\302\377\024\014\346\225"
    "\210\346\236\234\345\206\205\345\256\271\220\301\024 \022+\n\013effectAudio\030\004 \001(\005B\026\302\377\024"
    "\022\351\237\263\346\225\210\346\225\210\346\236\234\345\217\202\346\225\260\022 \n\006eparam\030\005 \003(\005B\020\302\377\024"
    "\014\346\225\210\346\236\234\345\217\202\346\225\260\"N\n\022Sheet_effecteffect\0228\n\021e"
    "ffecteffect_List\030\001 \003(\0132\026.proto_ff.effect"
    "effectB\005\210\301\024\340\014", 333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "effect.proto", &protobuf_RegisterTypes);
  effecteffect::default_instance_ = new effecteffect();
  Sheet_effecteffect::default_instance_ = new Sheet_effecteffect();
  effecteffect::default_instance_->InitAsDefaultInstance();
  Sheet_effecteffect::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_effect_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_effect_2eproto {
  StaticDescriptorInitializer_effect_2eproto() {
    protobuf_AddDesc_effect_2eproto();
  }
} static_descriptor_initializer_effect_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int effecteffect::kEffectIdFieldNumber;
const int effecteffect::kEffectTypeFieldNumber;
const int effecteffect::kEContentFieldNumber;
const int effecteffect::kEffectAudioFieldNumber;
const int effecteffect::kEparamFieldNumber;
#endif  // !_MSC_VER

effecteffect::effecteffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void effecteffect::InitAsDefaultInstance() {
}

effecteffect::effecteffect(const effecteffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void effecteffect::SharedCtor() {
  _cached_size_ = 0;
  effectid_ = 0;
  effecttype_ = 0;
  econtent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effectaudio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

effecteffect::~effecteffect() {
  SharedDtor();
}

void effecteffect::SharedDtor() {
  if (econtent_ != &::google::protobuf::internal::kEmptyString) {
    delete econtent_;
  }
  if (this != default_instance_) {
  }
}

void effecteffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* effecteffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return effecteffect_descriptor_;
}

const effecteffect& effecteffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_effect_2eproto();
  return *default_instance_;
}

effecteffect* effecteffect::default_instance_ = NULL;

effecteffect* effecteffect::New() const {
  return new effecteffect;
}

void effecteffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    effectid_ = 0;
    effecttype_ = 0;
    if (has_econtent()) {
      if (econtent_ != &::google::protobuf::internal::kEmptyString) {
        econtent_->clear();
      }
    }
    effectaudio_ = 0;
  }
  eparam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool effecteffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 effectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effectType;
        break;
      }

      // optional int32 effectType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effecttype_)));
          set_has_effecttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_eContent;
        break;
      }

      // optional string eContent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_econtent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->econtent().data(), this->econtent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_effectAudio;
        break;
      }

      // optional int32 effectAudio = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectAudio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectaudio_)));
          set_has_effectaudio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_eparam;
        break;
      }

      // repeated int32 eparam = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eparam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_eparam())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_eparam())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_eparam;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void effecteffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 effectId = 1;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->effectid(), output);
  }

  // optional int32 effectType = 2;
  if (has_effecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effecttype(), output);
  }

  // optional string eContent = 3;
  if (has_econtent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->econtent().data(), this->econtent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->econtent(), output);
  }

  // optional int32 effectAudio = 4;
  if (has_effectaudio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->effectaudio(), output);
  }

  // repeated int32 eparam = 5;
  for (int i = 0; i < this->eparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->eparam(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* effecteffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 effectId = 1;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->effectid(), target);
  }

  // optional int32 effectType = 2;
  if (has_effecttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effecttype(), target);
  }

  // optional string eContent = 3;
  if (has_econtent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->econtent().data(), this->econtent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->econtent(), target);
  }

  // optional int32 effectAudio = 4;
  if (has_effectaudio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->effectaudio(), target);
  }

  // repeated int32 eparam = 5;
  for (int i = 0; i < this->eparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->eparam(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int effecteffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 effectId = 1;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectid());
    }

    // optional int32 effectType = 2;
    if (has_effecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effecttype());
    }

    // optional string eContent = 3;
    if (has_econtent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->econtent());
    }

    // optional int32 effectAudio = 4;
    if (has_effectaudio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectaudio());
    }

  }
  // repeated int32 eparam = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->eparam_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->eparam(i));
    }
    total_size += 1 * this->eparam_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void effecteffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const effecteffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const effecteffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void effecteffect::MergeFrom(const effecteffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  eparam_.MergeFrom(from.eparam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_effecttype()) {
      set_effecttype(from.effecttype());
    }
    if (from.has_econtent()) {
      set_econtent(from.econtent());
    }
    if (from.has_effectaudio()) {
      set_effectaudio(from.effectaudio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void effecteffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void effecteffect::CopyFrom(const effecteffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool effecteffect::IsInitialized() const {

  return true;
}

void effecteffect::Swap(effecteffect* other) {
  if (other != this) {
    std::swap(effectid_, other->effectid_);
    std::swap(effecttype_, other->effecttype_);
    std::swap(econtent_, other->econtent_);
    std::swap(effectaudio_, other->effectaudio_);
    eparam_.Swap(&other->eparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata effecteffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = effecteffect_descriptor_;
  metadata.reflection = effecteffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_effecteffect::kEffecteffectListFieldNumber;
#endif  // !_MSC_VER

Sheet_effecteffect::Sheet_effecteffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_effecteffect::InitAsDefaultInstance() {
}

Sheet_effecteffect::Sheet_effecteffect(const Sheet_effecteffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_effecteffect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_effecteffect::~Sheet_effecteffect() {
  SharedDtor();
}

void Sheet_effecteffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_effecteffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_effecteffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_effecteffect_descriptor_;
}

const Sheet_effecteffect& Sheet_effecteffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_effect_2eproto();
  return *default_instance_;
}

Sheet_effecteffect* Sheet_effecteffect::default_instance_ = NULL;

Sheet_effecteffect* Sheet_effecteffect::New() const {
  return new Sheet_effecteffect;
}

void Sheet_effecteffect::Clear() {
  effecteffect_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_effecteffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.effecteffect effecteffect_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effecteffect_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effecteffect_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_effecteffect_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_effecteffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.effecteffect effecteffect_List = 1;
  for (int i = 0; i < this->effecteffect_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->effecteffect_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_effecteffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.effecteffect effecteffect_List = 1;
  for (int i = 0; i < this->effecteffect_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->effecteffect_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_effecteffect::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.effecteffect effecteffect_List = 1;
  total_size += 1 * this->effecteffect_list_size();
  for (int i = 0; i < this->effecteffect_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effecteffect_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_effecteffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_effecteffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_effecteffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_effecteffect::MergeFrom(const Sheet_effecteffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  effecteffect_list_.MergeFrom(from.effecteffect_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_effecteffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_effecteffect::CopyFrom(const Sheet_effecteffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_effecteffect::IsInitialized() const {

  return true;
}

void Sheet_effecteffect::Swap(Sheet_effecteffect* other) {
  if (other != this) {
    effecteffect_list_.Swap(&other->effecteffect_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_effecteffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_effecteffect_descriptor_;
  metadata.reflection = Sheet_effecteffect_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
