// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Sensitiveword.proto

#ifndef PROTOBUF_E_5fSensitiveword_2eproto__INCLUDED
#define PROTOBUF_E_5fSensitiveword_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_E_5fSensitiveword_2eproto();
void protobuf_AssignDesc_E_5fSensitiveword_2eproto();
void protobuf_ShutdownFile_E_5fSensitiveword_2eproto();

class E_SensitivewordWord1;
class Sheet_SensitivewordWord1;
class E_SensitivewordWord2;
class Sheet_SensitivewordWord2;
class E_SensitivewordWord3;
class Sheet_SensitivewordWord3;

// ===================================================================

class E_SensitivewordWord1 : public ::google::protobuf::Message {
 public:
  E_SensitivewordWord1();
  virtual ~E_SensitivewordWord1();

  E_SensitivewordWord1(const E_SensitivewordWord1& from);

  inline E_SensitivewordWord1& operator=(const E_SensitivewordWord1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SensitivewordWord1& default_instance();

  void Swap(E_SensitivewordWord1* other);

  // implements Message ----------------------------------------------

  E_SensitivewordWord1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SensitivewordWord1& from);
  void MergeFrom(const E_SensitivewordWord1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional string m_sensitiveWord = 2;
  inline bool has_m_sensitiveword() const;
  inline void clear_m_sensitiveword();
  static const int kMSensitiveWordFieldNumber = 2;
  inline const ::std::string& m_sensitiveword() const;
  inline void set_m_sensitiveword(const ::std::string& value);
  inline void set_m_sensitiveword(const char* value);
  inline void set_m_sensitiveword(const char* value, size_t size);
  inline ::std::string* mutable_m_sensitiveword();
  inline ::std::string* release_m_sensitiveword();
  inline void set_allocated_m_sensitiveword(::std::string* m_sensitiveword);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SensitivewordWord1)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_sensitiveword();
  inline void clear_has_m_sensitiveword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_sensitiveword_;
  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSensitiveword_2eproto();
  friend void protobuf_AssignDesc_E_5fSensitiveword_2eproto();
  friend void protobuf_ShutdownFile_E_5fSensitiveword_2eproto();

  void InitAsDefaultInstance();
  static E_SensitivewordWord1* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_SensitivewordWord1 : public ::google::protobuf::Message {
 public:
  Sheet_SensitivewordWord1();
  virtual ~Sheet_SensitivewordWord1();

  Sheet_SensitivewordWord1(const Sheet_SensitivewordWord1& from);

  inline Sheet_SensitivewordWord1& operator=(const Sheet_SensitivewordWord1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_SensitivewordWord1& default_instance();

  void Swap(Sheet_SensitivewordWord1* other);

  // implements Message ----------------------------------------------

  Sheet_SensitivewordWord1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_SensitivewordWord1& from);
  void MergeFrom(const Sheet_SensitivewordWord1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_SensitivewordWord1 E_SensitivewordWord1_List = 1;
  inline int e_sensitivewordword1_list_size() const;
  inline void clear_e_sensitivewordword1_list();
  static const int kESensitivewordWord1ListFieldNumber = 1;
  inline const ::proto_ff::E_SensitivewordWord1& e_sensitivewordword1_list(int index) const;
  inline ::proto_ff::E_SensitivewordWord1* mutable_e_sensitivewordword1_list(int index);
  inline ::proto_ff::E_SensitivewordWord1* add_e_sensitivewordword1_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord1 >&
      e_sensitivewordword1_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord1 >*
      mutable_e_sensitivewordword1_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_SensitivewordWord1)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord1 > e_sensitivewordword1_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSensitiveword_2eproto();
  friend void protobuf_AssignDesc_E_5fSensitiveword_2eproto();
  friend void protobuf_ShutdownFile_E_5fSensitiveword_2eproto();

  void InitAsDefaultInstance();
  static Sheet_SensitivewordWord1* default_instance_;
};
// -------------------------------------------------------------------

class E_SensitivewordWord2 : public ::google::protobuf::Message {
 public:
  E_SensitivewordWord2();
  virtual ~E_SensitivewordWord2();

  E_SensitivewordWord2(const E_SensitivewordWord2& from);

  inline E_SensitivewordWord2& operator=(const E_SensitivewordWord2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SensitivewordWord2& default_instance();

  void Swap(E_SensitivewordWord2* other);

  // implements Message ----------------------------------------------

  E_SensitivewordWord2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SensitivewordWord2& from);
  void MergeFrom(const E_SensitivewordWord2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional string m_sensitiveWord = 2;
  inline bool has_m_sensitiveword() const;
  inline void clear_m_sensitiveword();
  static const int kMSensitiveWordFieldNumber = 2;
  inline const ::std::string& m_sensitiveword() const;
  inline void set_m_sensitiveword(const ::std::string& value);
  inline void set_m_sensitiveword(const char* value);
  inline void set_m_sensitiveword(const char* value, size_t size);
  inline ::std::string* mutable_m_sensitiveword();
  inline ::std::string* release_m_sensitiveword();
  inline void set_allocated_m_sensitiveword(::std::string* m_sensitiveword);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SensitivewordWord2)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_sensitiveword();
  inline void clear_has_m_sensitiveword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_sensitiveword_;
  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSensitiveword_2eproto();
  friend void protobuf_AssignDesc_E_5fSensitiveword_2eproto();
  friend void protobuf_ShutdownFile_E_5fSensitiveword_2eproto();

  void InitAsDefaultInstance();
  static E_SensitivewordWord2* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_SensitivewordWord2 : public ::google::protobuf::Message {
 public:
  Sheet_SensitivewordWord2();
  virtual ~Sheet_SensitivewordWord2();

  Sheet_SensitivewordWord2(const Sheet_SensitivewordWord2& from);

  inline Sheet_SensitivewordWord2& operator=(const Sheet_SensitivewordWord2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_SensitivewordWord2& default_instance();

  void Swap(Sheet_SensitivewordWord2* other);

  // implements Message ----------------------------------------------

  Sheet_SensitivewordWord2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_SensitivewordWord2& from);
  void MergeFrom(const Sheet_SensitivewordWord2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_SensitivewordWord2 E_SensitivewordWord2_List = 1;
  inline int e_sensitivewordword2_list_size() const;
  inline void clear_e_sensitivewordword2_list();
  static const int kESensitivewordWord2ListFieldNumber = 1;
  inline const ::proto_ff::E_SensitivewordWord2& e_sensitivewordword2_list(int index) const;
  inline ::proto_ff::E_SensitivewordWord2* mutable_e_sensitivewordword2_list(int index);
  inline ::proto_ff::E_SensitivewordWord2* add_e_sensitivewordword2_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord2 >&
      e_sensitivewordword2_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord2 >*
      mutable_e_sensitivewordword2_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_SensitivewordWord2)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord2 > e_sensitivewordword2_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSensitiveword_2eproto();
  friend void protobuf_AssignDesc_E_5fSensitiveword_2eproto();
  friend void protobuf_ShutdownFile_E_5fSensitiveword_2eproto();

  void InitAsDefaultInstance();
  static Sheet_SensitivewordWord2* default_instance_;
};
// -------------------------------------------------------------------

class E_SensitivewordWord3 : public ::google::protobuf::Message {
 public:
  E_SensitivewordWord3();
  virtual ~E_SensitivewordWord3();

  E_SensitivewordWord3(const E_SensitivewordWord3& from);

  inline E_SensitivewordWord3& operator=(const E_SensitivewordWord3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_SensitivewordWord3& default_instance();

  void Swap(E_SensitivewordWord3* other);

  // implements Message ----------------------------------------------

  E_SensitivewordWord3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_SensitivewordWord3& from);
  void MergeFrom(const E_SensitivewordWord3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional string m_sensitiveWord = 2;
  inline bool has_m_sensitiveword() const;
  inline void clear_m_sensitiveword();
  static const int kMSensitiveWordFieldNumber = 2;
  inline const ::std::string& m_sensitiveword() const;
  inline void set_m_sensitiveword(const ::std::string& value);
  inline void set_m_sensitiveword(const char* value);
  inline void set_m_sensitiveword(const char* value, size_t size);
  inline ::std::string* mutable_m_sensitiveword();
  inline ::std::string* release_m_sensitiveword();
  inline void set_allocated_m_sensitiveword(::std::string* m_sensitiveword);

  // @@protoc_insertion_point(class_scope:proto_ff.E_SensitivewordWord3)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_sensitiveword();
  inline void clear_has_m_sensitiveword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_sensitiveword_;
  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSensitiveword_2eproto();
  friend void protobuf_AssignDesc_E_5fSensitiveword_2eproto();
  friend void protobuf_ShutdownFile_E_5fSensitiveword_2eproto();

  void InitAsDefaultInstance();
  static E_SensitivewordWord3* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_SensitivewordWord3 : public ::google::protobuf::Message {
 public:
  Sheet_SensitivewordWord3();
  virtual ~Sheet_SensitivewordWord3();

  Sheet_SensitivewordWord3(const Sheet_SensitivewordWord3& from);

  inline Sheet_SensitivewordWord3& operator=(const Sheet_SensitivewordWord3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_SensitivewordWord3& default_instance();

  void Swap(Sheet_SensitivewordWord3* other);

  // implements Message ----------------------------------------------

  Sheet_SensitivewordWord3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_SensitivewordWord3& from);
  void MergeFrom(const Sheet_SensitivewordWord3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_SensitivewordWord3 E_SensitivewordWord3_List = 1;
  inline int e_sensitivewordword3_list_size() const;
  inline void clear_e_sensitivewordword3_list();
  static const int kESensitivewordWord3ListFieldNumber = 1;
  inline const ::proto_ff::E_SensitivewordWord3& e_sensitivewordword3_list(int index) const;
  inline ::proto_ff::E_SensitivewordWord3* mutable_e_sensitivewordword3_list(int index);
  inline ::proto_ff::E_SensitivewordWord3* add_e_sensitivewordword3_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord3 >&
      e_sensitivewordword3_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord3 >*
      mutable_e_sensitivewordword3_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_SensitivewordWord3)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord3 > e_sensitivewordword3_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fSensitiveword_2eproto();
  friend void protobuf_AssignDesc_E_5fSensitiveword_2eproto();
  friend void protobuf_ShutdownFile_E_5fSensitiveword_2eproto();

  void InitAsDefaultInstance();
  static Sheet_SensitivewordWord3* default_instance_;
};
// ===================================================================


// ===================================================================

// E_SensitivewordWord1

// optional int32 m_id = 1;
inline bool E_SensitivewordWord1::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SensitivewordWord1::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SensitivewordWord1::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SensitivewordWord1::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_SensitivewordWord1::m_id() const {
  return m_id_;
}
inline void E_SensitivewordWord1::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_sensitiveWord = 2;
inline bool E_SensitivewordWord1::has_m_sensitiveword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_SensitivewordWord1::set_has_m_sensitiveword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_SensitivewordWord1::clear_has_m_sensitiveword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_SensitivewordWord1::clear_m_sensitiveword() {
  if (m_sensitiveword_ != &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_->clear();
  }
  clear_has_m_sensitiveword();
}
inline const ::std::string& E_SensitivewordWord1::m_sensitiveword() const {
  return *m_sensitiveword_;
}
inline void E_SensitivewordWord1::set_m_sensitiveword(const ::std::string& value) {
  set_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_ = new ::std::string;
  }
  m_sensitiveword_->assign(value);
}
inline void E_SensitivewordWord1::set_m_sensitiveword(const char* value) {
  set_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_ = new ::std::string;
  }
  m_sensitiveword_->assign(value);
}
inline void E_SensitivewordWord1::set_m_sensitiveword(const char* value, size_t size) {
  set_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_ = new ::std::string;
  }
  m_sensitiveword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SensitivewordWord1::mutable_m_sensitiveword() {
  set_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_ = new ::std::string;
  }
  return m_sensitiveword_;
}
inline ::std::string* E_SensitivewordWord1::release_m_sensitiveword() {
  clear_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sensitiveword_;
    m_sensitiveword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SensitivewordWord1::set_allocated_m_sensitiveword(::std::string* m_sensitiveword) {
  if (m_sensitiveword_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sensitiveword_;
  }
  if (m_sensitiveword) {
    set_has_m_sensitiveword();
    m_sensitiveword_ = m_sensitiveword;
  } else {
    clear_has_m_sensitiveword();
    m_sensitiveword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_SensitivewordWord1

// repeated .proto_ff.E_SensitivewordWord1 E_SensitivewordWord1_List = 1;
inline int Sheet_SensitivewordWord1::e_sensitivewordword1_list_size() const {
  return e_sensitivewordword1_list_.size();
}
inline void Sheet_SensitivewordWord1::clear_e_sensitivewordword1_list() {
  e_sensitivewordword1_list_.Clear();
}
inline const ::proto_ff::E_SensitivewordWord1& Sheet_SensitivewordWord1::e_sensitivewordword1_list(int index) const {
  return e_sensitivewordword1_list_.Get(index);
}
inline ::proto_ff::E_SensitivewordWord1* Sheet_SensitivewordWord1::mutable_e_sensitivewordword1_list(int index) {
  return e_sensitivewordword1_list_.Mutable(index);
}
inline ::proto_ff::E_SensitivewordWord1* Sheet_SensitivewordWord1::add_e_sensitivewordword1_list() {
  return e_sensitivewordword1_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord1 >&
Sheet_SensitivewordWord1::e_sensitivewordword1_list() const {
  return e_sensitivewordword1_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord1 >*
Sheet_SensitivewordWord1::mutable_e_sensitivewordword1_list() {
  return &e_sensitivewordword1_list_;
}

// -------------------------------------------------------------------

// E_SensitivewordWord2

// optional int32 m_id = 1;
inline bool E_SensitivewordWord2::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SensitivewordWord2::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SensitivewordWord2::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SensitivewordWord2::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_SensitivewordWord2::m_id() const {
  return m_id_;
}
inline void E_SensitivewordWord2::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_sensitiveWord = 2;
inline bool E_SensitivewordWord2::has_m_sensitiveword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_SensitivewordWord2::set_has_m_sensitiveword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_SensitivewordWord2::clear_has_m_sensitiveword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_SensitivewordWord2::clear_m_sensitiveword() {
  if (m_sensitiveword_ != &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_->clear();
  }
  clear_has_m_sensitiveword();
}
inline const ::std::string& E_SensitivewordWord2::m_sensitiveword() const {
  return *m_sensitiveword_;
}
inline void E_SensitivewordWord2::set_m_sensitiveword(const ::std::string& value) {
  set_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_ = new ::std::string;
  }
  m_sensitiveword_->assign(value);
}
inline void E_SensitivewordWord2::set_m_sensitiveword(const char* value) {
  set_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_ = new ::std::string;
  }
  m_sensitiveword_->assign(value);
}
inline void E_SensitivewordWord2::set_m_sensitiveword(const char* value, size_t size) {
  set_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_ = new ::std::string;
  }
  m_sensitiveword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SensitivewordWord2::mutable_m_sensitiveword() {
  set_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_ = new ::std::string;
  }
  return m_sensitiveword_;
}
inline ::std::string* E_SensitivewordWord2::release_m_sensitiveword() {
  clear_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sensitiveword_;
    m_sensitiveword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SensitivewordWord2::set_allocated_m_sensitiveword(::std::string* m_sensitiveword) {
  if (m_sensitiveword_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sensitiveword_;
  }
  if (m_sensitiveword) {
    set_has_m_sensitiveword();
    m_sensitiveword_ = m_sensitiveword;
  } else {
    clear_has_m_sensitiveword();
    m_sensitiveword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_SensitivewordWord2

// repeated .proto_ff.E_SensitivewordWord2 E_SensitivewordWord2_List = 1;
inline int Sheet_SensitivewordWord2::e_sensitivewordword2_list_size() const {
  return e_sensitivewordword2_list_.size();
}
inline void Sheet_SensitivewordWord2::clear_e_sensitivewordword2_list() {
  e_sensitivewordword2_list_.Clear();
}
inline const ::proto_ff::E_SensitivewordWord2& Sheet_SensitivewordWord2::e_sensitivewordword2_list(int index) const {
  return e_sensitivewordword2_list_.Get(index);
}
inline ::proto_ff::E_SensitivewordWord2* Sheet_SensitivewordWord2::mutable_e_sensitivewordword2_list(int index) {
  return e_sensitivewordword2_list_.Mutable(index);
}
inline ::proto_ff::E_SensitivewordWord2* Sheet_SensitivewordWord2::add_e_sensitivewordword2_list() {
  return e_sensitivewordword2_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord2 >&
Sheet_SensitivewordWord2::e_sensitivewordword2_list() const {
  return e_sensitivewordword2_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord2 >*
Sheet_SensitivewordWord2::mutable_e_sensitivewordword2_list() {
  return &e_sensitivewordword2_list_;
}

// -------------------------------------------------------------------

// E_SensitivewordWord3

// optional int32 m_id = 1;
inline bool E_SensitivewordWord3::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_SensitivewordWord3::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_SensitivewordWord3::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_SensitivewordWord3::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_SensitivewordWord3::m_id() const {
  return m_id_;
}
inline void E_SensitivewordWord3::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_sensitiveWord = 2;
inline bool E_SensitivewordWord3::has_m_sensitiveword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_SensitivewordWord3::set_has_m_sensitiveword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_SensitivewordWord3::clear_has_m_sensitiveword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_SensitivewordWord3::clear_m_sensitiveword() {
  if (m_sensitiveword_ != &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_->clear();
  }
  clear_has_m_sensitiveword();
}
inline const ::std::string& E_SensitivewordWord3::m_sensitiveword() const {
  return *m_sensitiveword_;
}
inline void E_SensitivewordWord3::set_m_sensitiveword(const ::std::string& value) {
  set_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_ = new ::std::string;
  }
  m_sensitiveword_->assign(value);
}
inline void E_SensitivewordWord3::set_m_sensitiveword(const char* value) {
  set_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_ = new ::std::string;
  }
  m_sensitiveword_->assign(value);
}
inline void E_SensitivewordWord3::set_m_sensitiveword(const char* value, size_t size) {
  set_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_ = new ::std::string;
  }
  m_sensitiveword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_SensitivewordWord3::mutable_m_sensitiveword() {
  set_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    m_sensitiveword_ = new ::std::string;
  }
  return m_sensitiveword_;
}
inline ::std::string* E_SensitivewordWord3::release_m_sensitiveword() {
  clear_has_m_sensitiveword();
  if (m_sensitiveword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_sensitiveword_;
    m_sensitiveword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_SensitivewordWord3::set_allocated_m_sensitiveword(::std::string* m_sensitiveword) {
  if (m_sensitiveword_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sensitiveword_;
  }
  if (m_sensitiveword) {
    set_has_m_sensitiveword();
    m_sensitiveword_ = m_sensitiveword;
  } else {
    clear_has_m_sensitiveword();
    m_sensitiveword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_SensitivewordWord3

// repeated .proto_ff.E_SensitivewordWord3 E_SensitivewordWord3_List = 1;
inline int Sheet_SensitivewordWord3::e_sensitivewordword3_list_size() const {
  return e_sensitivewordword3_list_.size();
}
inline void Sheet_SensitivewordWord3::clear_e_sensitivewordword3_list() {
  e_sensitivewordword3_list_.Clear();
}
inline const ::proto_ff::E_SensitivewordWord3& Sheet_SensitivewordWord3::e_sensitivewordword3_list(int index) const {
  return e_sensitivewordword3_list_.Get(index);
}
inline ::proto_ff::E_SensitivewordWord3* Sheet_SensitivewordWord3::mutable_e_sensitivewordword3_list(int index) {
  return e_sensitivewordword3_list_.Mutable(index);
}
inline ::proto_ff::E_SensitivewordWord3* Sheet_SensitivewordWord3::add_e_sensitivewordword3_list() {
  return e_sensitivewordword3_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord3 >&
Sheet_SensitivewordWord3::e_sensitivewordword3_list() const {
  return e_sensitivewordword3_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_SensitivewordWord3 >*
Sheet_SensitivewordWord3::mutable_e_sensitivewordword3_list() {
  return &e_sensitivewordword3_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_E_5fSensitiveword_2eproto__INCLUDED
