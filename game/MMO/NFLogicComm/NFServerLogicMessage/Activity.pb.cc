// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Activity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Activity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* ActBaseDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActBaseDataProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Activity_2eproto() {
  protobuf_AddDesc_Activity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Activity.proto");
  GOOGLE_CHECK(file != NULL);
  ActBaseDataProto_descriptor_ = file->message_type(0);
  static const int ActBaseDataProto_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActBaseDataProto, activity_inst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActBaseDataProto, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActBaseDataProto, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActBaseDataProto, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActBaseDataProto, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActBaseDataProto, forward_finish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActBaseDataProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActBaseDataProto, see_zid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActBaseDataProto, forward_finish_zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActBaseDataProto, ext_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActBaseDataProto, ext_data2_),
  };
  ActBaseDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActBaseDataProto_descriptor_,
      ActBaseDataProto::default_instance_,
      ActBaseDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActBaseDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActBaseDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActBaseDataProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Activity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActBaseDataProto_descriptor_, &ActBaseDataProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Activity_2eproto() {
  delete ActBaseDataProto::default_instance_;
  delete ActBaseDataProto_reflection_;
}

void protobuf_AddDesc_Activity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Activity.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\032\022common_logic.proto\032\tCom.proto"
    "\"\367\001\n\020ActBaseDataProto\022\030\n\020activity_inst_i"
    "d\030\001 \001(\r\022\023\n\013activity_id\030\002 \001(\004\022\r\n\005state\030\003 "
    "\001(\005\022\022\n\nbegin_time\030\004 \001(\004\022\020\n\010end_time\030\005 \001("
    "\004\022\033\n\023forward_finish_time\030\006 \001(\004\022\013\n\003zid\030\007 "
    "\001(\005\022\024\n\014see_zid_list\030\010 \003(\005\022\032\n\022forward_fin"
    "ish_zid\030\t \003(\005\022\020\n\010ext_data\030\n \001(\003\022\021\n\text_d"
    "ata2\030\013 \001(\003", 330);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Activity.proto", &protobuf_RegisterTypes);
  ActBaseDataProto::default_instance_ = new ActBaseDataProto();
  ActBaseDataProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Activity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Activity_2eproto {
  StaticDescriptorInitializer_Activity_2eproto() {
    protobuf_AddDesc_Activity_2eproto();
  }
} static_descriptor_initializer_Activity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ActBaseDataProto::kActivityInstIdFieldNumber;
const int ActBaseDataProto::kActivityIdFieldNumber;
const int ActBaseDataProto::kStateFieldNumber;
const int ActBaseDataProto::kBeginTimeFieldNumber;
const int ActBaseDataProto::kEndTimeFieldNumber;
const int ActBaseDataProto::kForwardFinishTimeFieldNumber;
const int ActBaseDataProto::kZidFieldNumber;
const int ActBaseDataProto::kSeeZidListFieldNumber;
const int ActBaseDataProto::kForwardFinishZidFieldNumber;
const int ActBaseDataProto::kExtDataFieldNumber;
const int ActBaseDataProto::kExtData2FieldNumber;
#endif  // !_MSC_VER

ActBaseDataProto::ActBaseDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActBaseDataProto::InitAsDefaultInstance() {
}

ActBaseDataProto::ActBaseDataProto(const ActBaseDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActBaseDataProto::SharedCtor() {
  _cached_size_ = 0;
  activity_inst_id_ = 0u;
  activity_id_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  begin_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  forward_finish_time_ = GOOGLE_ULONGLONG(0);
  zid_ = 0;
  ext_data_ = GOOGLE_LONGLONG(0);
  ext_data2_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActBaseDataProto::~ActBaseDataProto() {
  SharedDtor();
}

void ActBaseDataProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActBaseDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActBaseDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActBaseDataProto_descriptor_;
}

const ActBaseDataProto& ActBaseDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

ActBaseDataProto* ActBaseDataProto::default_instance_ = NULL;

ActBaseDataProto* ActBaseDataProto::New() const {
  return new ActBaseDataProto;
}

void ActBaseDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_inst_id_ = 0u;
    activity_id_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
    begin_time_ = GOOGLE_ULONGLONG(0);
    end_time_ = GOOGLE_ULONGLONG(0);
    forward_finish_time_ = GOOGLE_ULONGLONG(0);
    zid_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    ext_data_ = GOOGLE_LONGLONG(0);
    ext_data2_ = GOOGLE_LONGLONG(0);
  }
  see_zid_list_.Clear();
  forward_finish_zid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActBaseDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activity_inst_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_inst_id_)));
          set_has_activity_inst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_id;
        break;
      }

      // optional uint64 activity_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_begin_time;
        break;
      }

      // optional uint64 begin_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_forward_finish_time;
        break;
      }

      // optional uint64 forward_finish_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forward_finish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &forward_finish_time_)));
          set_has_forward_finish_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_zid;
        break;
      }

      // optional int32 zid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_see_zid_list;
        break;
      }

      // repeated int32 see_zid_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_see_zid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_see_zid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_see_zid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_see_zid_list;
        if (input->ExpectTag(72)) goto parse_forward_finish_zid;
        break;
      }

      // repeated int32 forward_finish_zid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forward_finish_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_forward_finish_zid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_forward_finish_zid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_forward_finish_zid;
        if (input->ExpectTag(80)) goto parse_ext_data;
        break;
      }

      // optional int64 ext_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ext_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ext_data_)));
          set_has_ext_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ext_data2;
        break;
      }

      // optional int64 ext_data2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ext_data2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ext_data2_)));
          set_has_ext_data2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActBaseDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activity_inst_id = 1;
  if (has_activity_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_inst_id(), output);
  }

  // optional uint64 activity_id = 2;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->activity_id(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional uint64 begin_time = 4;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->begin_time(), output);
  }

  // optional uint64 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->end_time(), output);
  }

  // optional uint64 forward_finish_time = 6;
  if (has_forward_finish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->forward_finish_time(), output);
  }

  // optional int32 zid = 7;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->zid(), output);
  }

  // repeated int32 see_zid_list = 8;
  for (int i = 0; i < this->see_zid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->see_zid_list(i), output);
  }

  // repeated int32 forward_finish_zid = 9;
  for (int i = 0; i < this->forward_finish_zid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->forward_finish_zid(i), output);
  }

  // optional int64 ext_data = 10;
  if (has_ext_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->ext_data(), output);
  }

  // optional int64 ext_data2 = 11;
  if (has_ext_data2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->ext_data2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActBaseDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activity_inst_id = 1;
  if (has_activity_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_inst_id(), target);
  }

  // optional uint64 activity_id = 2;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->activity_id(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional uint64 begin_time = 4;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->begin_time(), target);
  }

  // optional uint64 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->end_time(), target);
  }

  // optional uint64 forward_finish_time = 6;
  if (has_forward_finish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->forward_finish_time(), target);
  }

  // optional int32 zid = 7;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->zid(), target);
  }

  // repeated int32 see_zid_list = 8;
  for (int i = 0; i < this->see_zid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->see_zid_list(i), target);
  }

  // repeated int32 forward_finish_zid = 9;
  for (int i = 0; i < this->forward_finish_zid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->forward_finish_zid(i), target);
  }

  // optional int64 ext_data = 10;
  if (has_ext_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->ext_data(), target);
  }

  // optional int64 ext_data2 = 11;
  if (has_ext_data2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->ext_data2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActBaseDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activity_inst_id = 1;
    if (has_activity_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_inst_id());
    }

    // optional uint64 activity_id = 2;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activity_id());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional uint64 begin_time = 4;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin_time());
    }

    // optional uint64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint64 forward_finish_time = 6;
    if (has_forward_finish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->forward_finish_time());
    }

    // optional int32 zid = 7;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int64 ext_data = 10;
    if (has_ext_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ext_data());
    }

    // optional int64 ext_data2 = 11;
    if (has_ext_data2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ext_data2());
    }

  }
  // repeated int32 see_zid_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->see_zid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->see_zid_list(i));
    }
    total_size += 1 * this->see_zid_list_size() + data_size;
  }

  // repeated int32 forward_finish_zid = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->forward_finish_zid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->forward_finish_zid(i));
    }
    total_size += 1 * this->forward_finish_zid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActBaseDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActBaseDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActBaseDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActBaseDataProto::MergeFrom(const ActBaseDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  see_zid_list_.MergeFrom(from.see_zid_list_);
  forward_finish_zid_.MergeFrom(from.forward_finish_zid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_inst_id()) {
      set_activity_inst_id(from.activity_inst_id());
    }
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_forward_finish_time()) {
      set_forward_finish_time(from.forward_finish_time());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_ext_data()) {
      set_ext_data(from.ext_data());
    }
    if (from.has_ext_data2()) {
      set_ext_data2(from.ext_data2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActBaseDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActBaseDataProto::CopyFrom(const ActBaseDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActBaseDataProto::IsInitialized() const {

  return true;
}

void ActBaseDataProto::Swap(ActBaseDataProto* other) {
  if (other != this) {
    std::swap(activity_inst_id_, other->activity_inst_id_);
    std::swap(activity_id_, other->activity_id_);
    std::swap(state_, other->state_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(forward_finish_time_, other->forward_finish_time_);
    std::swap(zid_, other->zid_);
    see_zid_list_.Swap(&other->see_zid_list_);
    forward_finish_zid_.Swap(&other->forward_finish_zid_);
    std::swap(ext_data_, other->ext_data_);
    std::swap(ext_data2_, other->ext_data2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActBaseDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActBaseDataProto_descriptor_;
  metadata.reflection = ActBaseDataProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
