// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Moneyreward.proto

#ifndef PROTOBUF_E_5fMoneyreward_2eproto__INCLUDED
#define PROTOBUF_E_5fMoneyreward_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_E_5fMoneyreward_2eproto();
void protobuf_AssignDesc_E_5fMoneyreward_2eproto();
void protobuf_ShutdownFile_E_5fMoneyreward_2eproto();

class E_MoneyrewardMoneyreward;
class Sheet_MoneyrewardMoneyreward;

// ===================================================================

class E_MoneyrewardMoneyreward : public ::google::protobuf::Message {
 public:
  E_MoneyrewardMoneyreward();
  virtual ~E_MoneyrewardMoneyreward();

  E_MoneyrewardMoneyreward(const E_MoneyrewardMoneyreward& from);

  inline E_MoneyrewardMoneyreward& operator=(const E_MoneyrewardMoneyreward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MoneyrewardMoneyreward& default_instance();

  void Swap(E_MoneyrewardMoneyreward* other);

  // implements Message ----------------------------------------------

  E_MoneyrewardMoneyreward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MoneyrewardMoneyreward& from);
  void MergeFrom(const E_MoneyrewardMoneyreward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_taskreward = 1;
  inline bool has_m_taskreward() const;
  inline void clear_m_taskreward();
  static const int kMTaskrewardFieldNumber = 1;
  inline ::google::protobuf::int32 m_taskreward() const;
  inline void set_m_taskreward(::google::protobuf::int32 value);

  // optional string m_boxtaskreward = 2;
  inline bool has_m_boxtaskreward() const;
  inline void clear_m_boxtaskreward();
  static const int kMBoxtaskrewardFieldNumber = 2;
  inline const ::std::string& m_boxtaskreward() const;
  inline void set_m_boxtaskreward(const ::std::string& value);
  inline void set_m_boxtaskreward(const char* value);
  inline void set_m_boxtaskreward(const char* value, size_t size);
  inline ::std::string* mutable_m_boxtaskreward();
  inline ::std::string* release_m_boxtaskreward();
  inline void set_allocated_m_boxtaskreward(::std::string* m_boxtaskreward);

  // optional string m_boxnum = 3;
  inline bool has_m_boxnum() const;
  inline void clear_m_boxnum();
  static const int kMBoxnumFieldNumber = 3;
  inline const ::std::string& m_boxnum() const;
  inline void set_m_boxnum(const ::std::string& value);
  inline void set_m_boxnum(const char* value);
  inline void set_m_boxnum(const char* value, size_t size);
  inline ::std::string* mutable_m_boxnum();
  inline ::std::string* release_m_boxnum();
  inline void set_allocated_m_boxnum(::std::string* m_boxnum);

  // optional int32 m_task = 4;
  inline bool has_m_task() const;
  inline void clear_m_task();
  static const int kMTaskFieldNumber = 4;
  inline ::google::protobuf::int32 m_task() const;
  inline void set_m_task(::google::protobuf::int32 value);

  // optional int32 m_taskmax = 5;
  inline bool has_m_taskmax() const;
  inline void clear_m_taskmax();
  static const int kMTaskmaxFieldNumber = 5;
  inline ::google::protobuf::int32 m_taskmax() const;
  inline void set_m_taskmax(::google::protobuf::int32 value);

  // optional string m_oneprice = 6;
  inline bool has_m_oneprice() const;
  inline void clear_m_oneprice();
  static const int kMOnepriceFieldNumber = 6;
  inline const ::std::string& m_oneprice() const;
  inline void set_m_oneprice(const ::std::string& value);
  inline void set_m_oneprice(const char* value);
  inline void set_m_oneprice(const char* value, size_t size);
  inline ::std::string* mutable_m_oneprice();
  inline ::std::string* release_m_oneprice();
  inline void set_allocated_m_oneprice(::std::string* m_oneprice);

  // optional string m_freeunlocklv = 7;
  inline bool has_m_freeunlocklv() const;
  inline void clear_m_freeunlocklv();
  static const int kMFreeunlocklvFieldNumber = 7;
  inline const ::std::string& m_freeunlocklv() const;
  inline void set_m_freeunlocklv(const ::std::string& value);
  inline void set_m_freeunlocklv(const char* value);
  inline void set_m_freeunlocklv(const char* value, size_t size);
  inline ::std::string* mutable_m_freeunlocklv();
  inline ::std::string* release_m_freeunlocklv();
  inline void set_allocated_m_freeunlocklv(::std::string* m_freeunlocklv);

  // optional int32 m_viplv = 8;
  inline bool has_m_viplv() const;
  inline void clear_m_viplv();
  static const int kMViplvFieldNumber = 8;
  inline ::google::protobuf::int32 m_viplv() const;
  inline void set_m_viplv(::google::protobuf::int32 value);

  // optional int32 m_timeget = 9;
  inline bool has_m_timeget() const;
  inline void clear_m_timeget();
  static const int kMTimegetFieldNumber = 9;
  inline ::google::protobuf::int32 m_timeget() const;
  inline void set_m_timeget(::google::protobuf::int32 value);

  // optional int32 m_timegetmoney = 10;
  inline bool has_m_timegetmoney() const;
  inline void clear_m_timegetmoney();
  static const int kMTimegetmoneyFieldNumber = 10;
  inline ::google::protobuf::int32 m_timegetmoney() const;
  inline void set_m_timegetmoney(::google::protobuf::int32 value);

  // optional int32 m_timego = 11;
  inline bool has_m_timego() const;
  inline void clear_m_timego();
  static const int kMTimegoFieldNumber = 11;
  inline ::google::protobuf::int32 m_timego() const;
  inline void set_m_timego(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MoneyrewardMoneyreward)
 private:
  inline void set_has_m_taskreward();
  inline void clear_has_m_taskreward();
  inline void set_has_m_boxtaskreward();
  inline void clear_has_m_boxtaskreward();
  inline void set_has_m_boxnum();
  inline void clear_has_m_boxnum();
  inline void set_has_m_task();
  inline void clear_has_m_task();
  inline void set_has_m_taskmax();
  inline void clear_has_m_taskmax();
  inline void set_has_m_oneprice();
  inline void clear_has_m_oneprice();
  inline void set_has_m_freeunlocklv();
  inline void clear_has_m_freeunlocklv();
  inline void set_has_m_viplv();
  inline void clear_has_m_viplv();
  inline void set_has_m_timeget();
  inline void clear_has_m_timeget();
  inline void set_has_m_timegetmoney();
  inline void clear_has_m_timegetmoney();
  inline void set_has_m_timego();
  inline void clear_has_m_timego();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_boxtaskreward_;
  ::google::protobuf::int32 m_taskreward_;
  ::google::protobuf::int32 m_task_;
  ::std::string* m_boxnum_;
  ::std::string* m_oneprice_;
  ::google::protobuf::int32 m_taskmax_;
  ::google::protobuf::int32 m_viplv_;
  ::std::string* m_freeunlocklv_;
  ::google::protobuf::int32 m_timeget_;
  ::google::protobuf::int32 m_timegetmoney_;
  ::google::protobuf::int32 m_timego_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMoneyreward_2eproto();
  friend void protobuf_AssignDesc_E_5fMoneyreward_2eproto();
  friend void protobuf_ShutdownFile_E_5fMoneyreward_2eproto();

  void InitAsDefaultInstance();
  static E_MoneyrewardMoneyreward* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MoneyrewardMoneyreward : public ::google::protobuf::Message {
 public:
  Sheet_MoneyrewardMoneyreward();
  virtual ~Sheet_MoneyrewardMoneyreward();

  Sheet_MoneyrewardMoneyreward(const Sheet_MoneyrewardMoneyreward& from);

  inline Sheet_MoneyrewardMoneyreward& operator=(const Sheet_MoneyrewardMoneyreward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MoneyrewardMoneyreward& default_instance();

  void Swap(Sheet_MoneyrewardMoneyreward* other);

  // implements Message ----------------------------------------------

  Sheet_MoneyrewardMoneyreward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MoneyrewardMoneyreward& from);
  void MergeFrom(const Sheet_MoneyrewardMoneyreward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MoneyrewardMoneyreward E_MoneyrewardMoneyreward_List = 1;
  inline int e_moneyrewardmoneyreward_list_size() const;
  inline void clear_e_moneyrewardmoneyreward_list();
  static const int kEMoneyrewardMoneyrewardListFieldNumber = 1;
  inline const ::proto_ff::E_MoneyrewardMoneyreward& e_moneyrewardmoneyreward_list(int index) const;
  inline ::proto_ff::E_MoneyrewardMoneyreward* mutable_e_moneyrewardmoneyreward_list(int index);
  inline ::proto_ff::E_MoneyrewardMoneyreward* add_e_moneyrewardmoneyreward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MoneyrewardMoneyreward >&
      e_moneyrewardmoneyreward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MoneyrewardMoneyreward >*
      mutable_e_moneyrewardmoneyreward_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MoneyrewardMoneyreward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MoneyrewardMoneyreward > e_moneyrewardmoneyreward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMoneyreward_2eproto();
  friend void protobuf_AssignDesc_E_5fMoneyreward_2eproto();
  friend void protobuf_ShutdownFile_E_5fMoneyreward_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MoneyrewardMoneyreward* default_instance_;
};
// ===================================================================


// ===================================================================

// E_MoneyrewardMoneyreward

// optional int32 m_taskreward = 1;
inline bool E_MoneyrewardMoneyreward::has_m_taskreward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MoneyrewardMoneyreward::set_has_m_taskreward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MoneyrewardMoneyreward::clear_has_m_taskreward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MoneyrewardMoneyreward::clear_m_taskreward() {
  m_taskreward_ = 0;
  clear_has_m_taskreward();
}
inline ::google::protobuf::int32 E_MoneyrewardMoneyreward::m_taskreward() const {
  return m_taskreward_;
}
inline void E_MoneyrewardMoneyreward::set_m_taskreward(::google::protobuf::int32 value) {
  set_has_m_taskreward();
  m_taskreward_ = value;
}

// optional string m_boxtaskreward = 2;
inline bool E_MoneyrewardMoneyreward::has_m_boxtaskreward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MoneyrewardMoneyreward::set_has_m_boxtaskreward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MoneyrewardMoneyreward::clear_has_m_boxtaskreward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MoneyrewardMoneyreward::clear_m_boxtaskreward() {
  if (m_boxtaskreward_ != &::google::protobuf::internal::kEmptyString) {
    m_boxtaskreward_->clear();
  }
  clear_has_m_boxtaskreward();
}
inline const ::std::string& E_MoneyrewardMoneyreward::m_boxtaskreward() const {
  return *m_boxtaskreward_;
}
inline void E_MoneyrewardMoneyreward::set_m_boxtaskreward(const ::std::string& value) {
  set_has_m_boxtaskreward();
  if (m_boxtaskreward_ == &::google::protobuf::internal::kEmptyString) {
    m_boxtaskreward_ = new ::std::string;
  }
  m_boxtaskreward_->assign(value);
}
inline void E_MoneyrewardMoneyreward::set_m_boxtaskreward(const char* value) {
  set_has_m_boxtaskreward();
  if (m_boxtaskreward_ == &::google::protobuf::internal::kEmptyString) {
    m_boxtaskreward_ = new ::std::string;
  }
  m_boxtaskreward_->assign(value);
}
inline void E_MoneyrewardMoneyreward::set_m_boxtaskreward(const char* value, size_t size) {
  set_has_m_boxtaskreward();
  if (m_boxtaskreward_ == &::google::protobuf::internal::kEmptyString) {
    m_boxtaskreward_ = new ::std::string;
  }
  m_boxtaskreward_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MoneyrewardMoneyreward::mutable_m_boxtaskreward() {
  set_has_m_boxtaskreward();
  if (m_boxtaskreward_ == &::google::protobuf::internal::kEmptyString) {
    m_boxtaskreward_ = new ::std::string;
  }
  return m_boxtaskreward_;
}
inline ::std::string* E_MoneyrewardMoneyreward::release_m_boxtaskreward() {
  clear_has_m_boxtaskreward();
  if (m_boxtaskreward_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_boxtaskreward_;
    m_boxtaskreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MoneyrewardMoneyreward::set_allocated_m_boxtaskreward(::std::string* m_boxtaskreward) {
  if (m_boxtaskreward_ != &::google::protobuf::internal::kEmptyString) {
    delete m_boxtaskreward_;
  }
  if (m_boxtaskreward) {
    set_has_m_boxtaskreward();
    m_boxtaskreward_ = m_boxtaskreward;
  } else {
    clear_has_m_boxtaskreward();
    m_boxtaskreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_boxnum = 3;
inline bool E_MoneyrewardMoneyreward::has_m_boxnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MoneyrewardMoneyreward::set_has_m_boxnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MoneyrewardMoneyreward::clear_has_m_boxnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MoneyrewardMoneyreward::clear_m_boxnum() {
  if (m_boxnum_ != &::google::protobuf::internal::kEmptyString) {
    m_boxnum_->clear();
  }
  clear_has_m_boxnum();
}
inline const ::std::string& E_MoneyrewardMoneyreward::m_boxnum() const {
  return *m_boxnum_;
}
inline void E_MoneyrewardMoneyreward::set_m_boxnum(const ::std::string& value) {
  set_has_m_boxnum();
  if (m_boxnum_ == &::google::protobuf::internal::kEmptyString) {
    m_boxnum_ = new ::std::string;
  }
  m_boxnum_->assign(value);
}
inline void E_MoneyrewardMoneyreward::set_m_boxnum(const char* value) {
  set_has_m_boxnum();
  if (m_boxnum_ == &::google::protobuf::internal::kEmptyString) {
    m_boxnum_ = new ::std::string;
  }
  m_boxnum_->assign(value);
}
inline void E_MoneyrewardMoneyreward::set_m_boxnum(const char* value, size_t size) {
  set_has_m_boxnum();
  if (m_boxnum_ == &::google::protobuf::internal::kEmptyString) {
    m_boxnum_ = new ::std::string;
  }
  m_boxnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MoneyrewardMoneyreward::mutable_m_boxnum() {
  set_has_m_boxnum();
  if (m_boxnum_ == &::google::protobuf::internal::kEmptyString) {
    m_boxnum_ = new ::std::string;
  }
  return m_boxnum_;
}
inline ::std::string* E_MoneyrewardMoneyreward::release_m_boxnum() {
  clear_has_m_boxnum();
  if (m_boxnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_boxnum_;
    m_boxnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MoneyrewardMoneyreward::set_allocated_m_boxnum(::std::string* m_boxnum) {
  if (m_boxnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_boxnum_;
  }
  if (m_boxnum) {
    set_has_m_boxnum();
    m_boxnum_ = m_boxnum;
  } else {
    clear_has_m_boxnum();
    m_boxnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_task = 4;
inline bool E_MoneyrewardMoneyreward::has_m_task() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MoneyrewardMoneyreward::set_has_m_task() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MoneyrewardMoneyreward::clear_has_m_task() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MoneyrewardMoneyreward::clear_m_task() {
  m_task_ = 0;
  clear_has_m_task();
}
inline ::google::protobuf::int32 E_MoneyrewardMoneyreward::m_task() const {
  return m_task_;
}
inline void E_MoneyrewardMoneyreward::set_m_task(::google::protobuf::int32 value) {
  set_has_m_task();
  m_task_ = value;
}

// optional int32 m_taskmax = 5;
inline bool E_MoneyrewardMoneyreward::has_m_taskmax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MoneyrewardMoneyreward::set_has_m_taskmax() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MoneyrewardMoneyreward::clear_has_m_taskmax() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MoneyrewardMoneyreward::clear_m_taskmax() {
  m_taskmax_ = 0;
  clear_has_m_taskmax();
}
inline ::google::protobuf::int32 E_MoneyrewardMoneyreward::m_taskmax() const {
  return m_taskmax_;
}
inline void E_MoneyrewardMoneyreward::set_m_taskmax(::google::protobuf::int32 value) {
  set_has_m_taskmax();
  m_taskmax_ = value;
}

// optional string m_oneprice = 6;
inline bool E_MoneyrewardMoneyreward::has_m_oneprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MoneyrewardMoneyreward::set_has_m_oneprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MoneyrewardMoneyreward::clear_has_m_oneprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MoneyrewardMoneyreward::clear_m_oneprice() {
  if (m_oneprice_ != &::google::protobuf::internal::kEmptyString) {
    m_oneprice_->clear();
  }
  clear_has_m_oneprice();
}
inline const ::std::string& E_MoneyrewardMoneyreward::m_oneprice() const {
  return *m_oneprice_;
}
inline void E_MoneyrewardMoneyreward::set_m_oneprice(const ::std::string& value) {
  set_has_m_oneprice();
  if (m_oneprice_ == &::google::protobuf::internal::kEmptyString) {
    m_oneprice_ = new ::std::string;
  }
  m_oneprice_->assign(value);
}
inline void E_MoneyrewardMoneyreward::set_m_oneprice(const char* value) {
  set_has_m_oneprice();
  if (m_oneprice_ == &::google::protobuf::internal::kEmptyString) {
    m_oneprice_ = new ::std::string;
  }
  m_oneprice_->assign(value);
}
inline void E_MoneyrewardMoneyreward::set_m_oneprice(const char* value, size_t size) {
  set_has_m_oneprice();
  if (m_oneprice_ == &::google::protobuf::internal::kEmptyString) {
    m_oneprice_ = new ::std::string;
  }
  m_oneprice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MoneyrewardMoneyreward::mutable_m_oneprice() {
  set_has_m_oneprice();
  if (m_oneprice_ == &::google::protobuf::internal::kEmptyString) {
    m_oneprice_ = new ::std::string;
  }
  return m_oneprice_;
}
inline ::std::string* E_MoneyrewardMoneyreward::release_m_oneprice() {
  clear_has_m_oneprice();
  if (m_oneprice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_oneprice_;
    m_oneprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MoneyrewardMoneyreward::set_allocated_m_oneprice(::std::string* m_oneprice) {
  if (m_oneprice_ != &::google::protobuf::internal::kEmptyString) {
    delete m_oneprice_;
  }
  if (m_oneprice) {
    set_has_m_oneprice();
    m_oneprice_ = m_oneprice;
  } else {
    clear_has_m_oneprice();
    m_oneprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_freeunlocklv = 7;
inline bool E_MoneyrewardMoneyreward::has_m_freeunlocklv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_MoneyrewardMoneyreward::set_has_m_freeunlocklv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_MoneyrewardMoneyreward::clear_has_m_freeunlocklv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_MoneyrewardMoneyreward::clear_m_freeunlocklv() {
  if (m_freeunlocklv_ != &::google::protobuf::internal::kEmptyString) {
    m_freeunlocklv_->clear();
  }
  clear_has_m_freeunlocklv();
}
inline const ::std::string& E_MoneyrewardMoneyreward::m_freeunlocklv() const {
  return *m_freeunlocklv_;
}
inline void E_MoneyrewardMoneyreward::set_m_freeunlocklv(const ::std::string& value) {
  set_has_m_freeunlocklv();
  if (m_freeunlocklv_ == &::google::protobuf::internal::kEmptyString) {
    m_freeunlocklv_ = new ::std::string;
  }
  m_freeunlocklv_->assign(value);
}
inline void E_MoneyrewardMoneyreward::set_m_freeunlocklv(const char* value) {
  set_has_m_freeunlocklv();
  if (m_freeunlocklv_ == &::google::protobuf::internal::kEmptyString) {
    m_freeunlocklv_ = new ::std::string;
  }
  m_freeunlocklv_->assign(value);
}
inline void E_MoneyrewardMoneyreward::set_m_freeunlocklv(const char* value, size_t size) {
  set_has_m_freeunlocklv();
  if (m_freeunlocklv_ == &::google::protobuf::internal::kEmptyString) {
    m_freeunlocklv_ = new ::std::string;
  }
  m_freeunlocklv_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MoneyrewardMoneyreward::mutable_m_freeunlocklv() {
  set_has_m_freeunlocklv();
  if (m_freeunlocklv_ == &::google::protobuf::internal::kEmptyString) {
    m_freeunlocklv_ = new ::std::string;
  }
  return m_freeunlocklv_;
}
inline ::std::string* E_MoneyrewardMoneyreward::release_m_freeunlocklv() {
  clear_has_m_freeunlocklv();
  if (m_freeunlocklv_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_freeunlocklv_;
    m_freeunlocklv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MoneyrewardMoneyreward::set_allocated_m_freeunlocklv(::std::string* m_freeunlocklv) {
  if (m_freeunlocklv_ != &::google::protobuf::internal::kEmptyString) {
    delete m_freeunlocklv_;
  }
  if (m_freeunlocklv) {
    set_has_m_freeunlocklv();
    m_freeunlocklv_ = m_freeunlocklv;
  } else {
    clear_has_m_freeunlocklv();
    m_freeunlocklv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_viplv = 8;
inline bool E_MoneyrewardMoneyreward::has_m_viplv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_MoneyrewardMoneyreward::set_has_m_viplv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_MoneyrewardMoneyreward::clear_has_m_viplv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_MoneyrewardMoneyreward::clear_m_viplv() {
  m_viplv_ = 0;
  clear_has_m_viplv();
}
inline ::google::protobuf::int32 E_MoneyrewardMoneyreward::m_viplv() const {
  return m_viplv_;
}
inline void E_MoneyrewardMoneyreward::set_m_viplv(::google::protobuf::int32 value) {
  set_has_m_viplv();
  m_viplv_ = value;
}

// optional int32 m_timeget = 9;
inline bool E_MoneyrewardMoneyreward::has_m_timeget() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_MoneyrewardMoneyreward::set_has_m_timeget() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_MoneyrewardMoneyreward::clear_has_m_timeget() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_MoneyrewardMoneyreward::clear_m_timeget() {
  m_timeget_ = 0;
  clear_has_m_timeget();
}
inline ::google::protobuf::int32 E_MoneyrewardMoneyreward::m_timeget() const {
  return m_timeget_;
}
inline void E_MoneyrewardMoneyreward::set_m_timeget(::google::protobuf::int32 value) {
  set_has_m_timeget();
  m_timeget_ = value;
}

// optional int32 m_timegetmoney = 10;
inline bool E_MoneyrewardMoneyreward::has_m_timegetmoney() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_MoneyrewardMoneyreward::set_has_m_timegetmoney() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_MoneyrewardMoneyreward::clear_has_m_timegetmoney() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_MoneyrewardMoneyreward::clear_m_timegetmoney() {
  m_timegetmoney_ = 0;
  clear_has_m_timegetmoney();
}
inline ::google::protobuf::int32 E_MoneyrewardMoneyreward::m_timegetmoney() const {
  return m_timegetmoney_;
}
inline void E_MoneyrewardMoneyreward::set_m_timegetmoney(::google::protobuf::int32 value) {
  set_has_m_timegetmoney();
  m_timegetmoney_ = value;
}

// optional int32 m_timego = 11;
inline bool E_MoneyrewardMoneyreward::has_m_timego() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_MoneyrewardMoneyreward::set_has_m_timego() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_MoneyrewardMoneyreward::clear_has_m_timego() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_MoneyrewardMoneyreward::clear_m_timego() {
  m_timego_ = 0;
  clear_has_m_timego();
}
inline ::google::protobuf::int32 E_MoneyrewardMoneyreward::m_timego() const {
  return m_timego_;
}
inline void E_MoneyrewardMoneyreward::set_m_timego(::google::protobuf::int32 value) {
  set_has_m_timego();
  m_timego_ = value;
}

// -------------------------------------------------------------------

// Sheet_MoneyrewardMoneyreward

// repeated .proto_ff.E_MoneyrewardMoneyreward E_MoneyrewardMoneyreward_List = 1;
inline int Sheet_MoneyrewardMoneyreward::e_moneyrewardmoneyreward_list_size() const {
  return e_moneyrewardmoneyreward_list_.size();
}
inline void Sheet_MoneyrewardMoneyreward::clear_e_moneyrewardmoneyreward_list() {
  e_moneyrewardmoneyreward_list_.Clear();
}
inline const ::proto_ff::E_MoneyrewardMoneyreward& Sheet_MoneyrewardMoneyreward::e_moneyrewardmoneyreward_list(int index) const {
  return e_moneyrewardmoneyreward_list_.Get(index);
}
inline ::proto_ff::E_MoneyrewardMoneyreward* Sheet_MoneyrewardMoneyreward::mutable_e_moneyrewardmoneyreward_list(int index) {
  return e_moneyrewardmoneyreward_list_.Mutable(index);
}
inline ::proto_ff::E_MoneyrewardMoneyreward* Sheet_MoneyrewardMoneyreward::add_e_moneyrewardmoneyreward_list() {
  return e_moneyrewardmoneyreward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MoneyrewardMoneyreward >&
Sheet_MoneyrewardMoneyreward::e_moneyrewardmoneyreward_list() const {
  return e_moneyrewardmoneyreward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MoneyrewardMoneyreward >*
Sheet_MoneyrewardMoneyreward::mutable_e_moneyrewardmoneyreward_list() {
  return &e_moneyrewardmoneyreward_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_E_5fMoneyreward_2eproto__INCLUDED
