// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Pk3v3.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Pk3v3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_Pk3v3Level_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_Pk3v3Level_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_Pk3v3Level_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_Pk3v3Level_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_Pk3v3Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_Pk3v3Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_Pk3v3Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_Pk3v3Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_Pk3v3Badge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_Pk3v3Badge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_Pk3v3Badge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_Pk3v3Badge_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_Pk3v3Constant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_Pk3v3Constant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_Pk3v3Constant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_Pk3v3Constant_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_Pk3v3Exp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_Pk3v3Exp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_Pk3v3Exp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_Pk3v3Exp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fPk3v3_2eproto() {
  protobuf_AddDesc_E_5fPk3v3_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Pk3v3.proto");
  GOOGLE_CHECK(file != NULL);
  E_Pk3v3Level_descriptor_ = file->message_type(0);
  static const int E_Pk3v3Level_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Level, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Level, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Level, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Level, m_starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Level, m_scoring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Level, m_badge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Level, m_showbadge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Level, m_scoringadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Level, m_scoringcut_),
  };
  E_Pk3v3Level_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_Pk3v3Level_descriptor_,
      E_Pk3v3Level::default_instance_,
      E_Pk3v3Level_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Level, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Level, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_Pk3v3Level));
  Sheet_Pk3v3Level_descriptor_ = file->message_type(1);
  static const int Sheet_Pk3v3Level_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Level, e_pk3v3level_list_),
  };
  Sheet_Pk3v3Level_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_Pk3v3Level_descriptor_,
      Sheet_Pk3v3Level::default_instance_,
      Sheet_Pk3v3Level_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Level, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Level, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_Pk3v3Level));
  E_Pk3v3Reward_descriptor_ = file->message_type(2);
  static const int E_Pk3v3Reward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Reward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Reward, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Reward, m_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Reward, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Reward, m_param_),
  };
  E_Pk3v3Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_Pk3v3Reward_descriptor_,
      E_Pk3v3Reward::default_instance_,
      E_Pk3v3Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_Pk3v3Reward));
  Sheet_Pk3v3Reward_descriptor_ = file->message_type(3);
  static const int Sheet_Pk3v3Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Reward, e_pk3v3reward_list_),
  };
  Sheet_Pk3v3Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_Pk3v3Reward_descriptor_,
      Sheet_Pk3v3Reward::default_instance_,
      Sheet_Pk3v3Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_Pk3v3Reward));
  E_Pk3v3Badge_descriptor_ = file->message_type(4);
  static const int E_Pk3v3Badge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Badge, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Badge, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Badge, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Badge, m_param_),
  };
  E_Pk3v3Badge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_Pk3v3Badge_descriptor_,
      E_Pk3v3Badge::default_instance_,
      E_Pk3v3Badge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Badge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Badge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_Pk3v3Badge));
  Sheet_Pk3v3Badge_descriptor_ = file->message_type(5);
  static const int Sheet_Pk3v3Badge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Badge, e_pk3v3badge_list_),
  };
  Sheet_Pk3v3Badge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_Pk3v3Badge_descriptor_,
      Sheet_Pk3v3Badge::default_instance_,
      Sheet_Pk3v3Badge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Badge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Badge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_Pk3v3Badge));
  E_Pk3v3Constant_descriptor_ = file->message_type(6);
  static const int E_Pk3v3Constant_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_teammember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_teamtoplimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_cedetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_punishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_breaktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_entryreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_entrtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_mvpreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_mvptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_matchtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_unitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_unitcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_initialzlid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_initialzlname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_robotname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_matetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_addtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_initialnotice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, m_showreward_),
  };
  E_Pk3v3Constant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_Pk3v3Constant_descriptor_,
      E_Pk3v3Constant::default_instance_,
      E_Pk3v3Constant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Constant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_Pk3v3Constant));
  Sheet_Pk3v3Constant_descriptor_ = file->message_type(7);
  static const int Sheet_Pk3v3Constant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Constant, e_pk3v3constant_list_),
  };
  Sheet_Pk3v3Constant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_Pk3v3Constant_descriptor_,
      Sheet_Pk3v3Constant::default_instance_,
      Sheet_Pk3v3Constant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Constant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Constant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_Pk3v3Constant));
  E_Pk3v3Exp_descriptor_ = file->message_type(8);
  static const int E_Pk3v3Exp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Exp, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Exp, m_mateexp_),
  };
  E_Pk3v3Exp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_Pk3v3Exp_descriptor_,
      E_Pk3v3Exp::default_instance_,
      E_Pk3v3Exp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Exp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk3v3Exp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_Pk3v3Exp));
  Sheet_Pk3v3Exp_descriptor_ = file->message_type(9);
  static const int Sheet_Pk3v3Exp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Exp, e_pk3v3exp_list_),
  };
  Sheet_Pk3v3Exp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_Pk3v3Exp_descriptor_,
      Sheet_Pk3v3Exp::default_instance_,
      Sheet_Pk3v3Exp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Exp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk3v3Exp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_Pk3v3Exp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fPk3v3_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_Pk3v3Level_descriptor_, &E_Pk3v3Level::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_Pk3v3Level_descriptor_, &Sheet_Pk3v3Level::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_Pk3v3Reward_descriptor_, &E_Pk3v3Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_Pk3v3Reward_descriptor_, &Sheet_Pk3v3Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_Pk3v3Badge_descriptor_, &E_Pk3v3Badge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_Pk3v3Badge_descriptor_, &Sheet_Pk3v3Badge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_Pk3v3Constant_descriptor_, &E_Pk3v3Constant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_Pk3v3Constant_descriptor_, &Sheet_Pk3v3Constant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_Pk3v3Exp_descriptor_, &E_Pk3v3Exp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_Pk3v3Exp_descriptor_, &Sheet_Pk3v3Exp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fPk3v3_2eproto() {
  delete E_Pk3v3Level::default_instance_;
  delete E_Pk3v3Level_reflection_;
  delete Sheet_Pk3v3Level::default_instance_;
  delete Sheet_Pk3v3Level_reflection_;
  delete E_Pk3v3Reward::default_instance_;
  delete E_Pk3v3Reward_reflection_;
  delete Sheet_Pk3v3Reward::default_instance_;
  delete Sheet_Pk3v3Reward_reflection_;
  delete E_Pk3v3Badge::default_instance_;
  delete E_Pk3v3Badge_reflection_;
  delete Sheet_Pk3v3Badge::default_instance_;
  delete Sheet_Pk3v3Badge_reflection_;
  delete E_Pk3v3Constant::default_instance_;
  delete E_Pk3v3Constant_reflection_;
  delete Sheet_Pk3v3Constant::default_instance_;
  delete Sheet_Pk3v3Constant_reflection_;
  delete E_Pk3v3Exp::default_instance_;
  delete E_Pk3v3Exp_reflection_;
  delete Sheet_Pk3v3Exp::default_instance_;
  delete Sheet_Pk3v3Exp_reflection_;
}

void protobuf_AddDesc_E_5fPk3v3_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rE_Pk3v3.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"\355\002\n\014E_Pk3v3Level\022\032\n\004m_id\030\001 \001(\005B"
    "\014\302\377\024\010\345\224\257\344\270\200id\022 \n\006m_type\030\002 \001(\005B\020\302\377\024\014\346\256\265\344\275"
    "\215\347\261\273\345\236\213\022$\n\006m_name\030\003 \001(\tB\024\302\377\024\014\346\256\265\344\275\215\345\220\215\347\247"
    "\260\220\301\024@\022#\n\tm_starNum\030\004 \001(\005B\020\302\377\024\014\346\230\237\346\230\237\346\225\260\351"
    "\207\217\022 \n\tm_scoring\030\005 \001(\005B\r\302\377\024\t\347\247\257\345\210\206\345\200\274\022%\n\007"
    "m_badge\030\006 \001(\tB\024\302\377\024\014\346\256\265\344\275\215\345\276\275\347\253\240\220\301\024@\022/\n\013m"
    "_showBadge\030\007 \001(\tB\032\302\377\024\022\345\261\225\347\244\272\346\256\265\344\275\215\345\276\275\347\253\240"
    "\220\301\024@\022,\n\014m_scoringAdd\030\010 \001(\005B\026\302\377\024\022\350\203\234\345\234\272\347\247"
    "\257\345\210\206\345\245\226\345\212\261\022,\n\014m_scoringCut\030\t \001(\005B\026\302\377\024\022\350\264"
    "\237\345\234\272\347\247\257\345\210\206\346\211\243\351\231\244\"K\n\020Sheet_Pk3v3Level\0227\n\021"
    "E_Pk3v3Level_List\030\001 \003(\0132\026.proto_ff.E_Pk3"
    "v3LevelB\004\210\301\024 \"\263\001\n\rE_Pk3v3Reward\022\030\n\004m_id\030"
    "\001 \001(\005B\n\302\377\024\006\345\272\217\345\217\267\022 \n\006m_type\030\002 \001(\005B\020\302\377\024\014\345"
    "\245\226\345\212\261\347\261\273\345\236\213\022%\n\013m_condition\030\003 \001(\005B\020\302\377\024\014\351\242"
    "\206\345\245\226\346\235\241\344\273\266\022\036\n\010m_reward\030\004 \001(\003B\014\302\377\024\010\345\245\226\345\212\261"
    "ID\022\037\n\007m_param\030\005 \003(\005B\016\302\377\024\006\345\217\202\346\225\260\210\301\024\002\"N\n\021S"
    "heet_Pk3v3Reward\0229\n\022E_Pk3v3Reward_List\030\001"
    " \003(\0132\027.proto_ff.E_Pk3v3RewardB\004\210\301\024 \"\213\001\n\014"
    "E_Pk3v3Badge\022\030\n\004m_id\030\001 \001(\005B\n\302\377\024\006\345\272\217\345\217\267\022\036"
    "\n\006m_name\030\002 \001(\tB\016\302\377\024\006\345\220\215\347\247\260\220\301\024@\022 \n\006m_type"
    "\030\003 \001(\005B\020\302\377\024\014\346\235\241\344\273\266\347\261\273\345\236\213\022\037\n\007m_param\030\004 \003("
    "\005B\016\302\377\024\006\345\217\202\346\225\260\210\301\024\002\"K\n\020Sheet_Pk3v3Badge\0227\n"
    "\021E_Pk3v3Badge_List\030\001 \003(\0132\026.proto_ff.E_Pk"
    "3v3BadgeB\004\210\301\024\020\"\355\006\n\017E_Pk3v3Constant\022\030\n\004m_"
    "id\030\001 \001(\005B\n\302\377\024\006\345\272\217\345\217\267\022,\n\014m_teamMember\030\002 \001"
    "(\005B\026\302\377\024\022\346\210\230\351\230\237\344\272\272\346\225\260\344\270\212\351\231\220\022(\n\016m_teamTopl"
    "imit\030\003 \001(\005B\020\302\377\024\014\346\210\230\351\230\237\344\270\212\351\231\220\022*\n\nm_cedeTi"
    "me\030\004 \001(\005B\026\302\377\024\022\350\275\254\350\256\251\351\230\237\351\225\277\346\227\266\351\227\264\022,\n\014m_pu"
    "nishTime\030\005 \001(\005B\026\302\377\024\022\347\246\273\351\230\237\346\203\251\347\275\232\346\227\266\351\227\264\022+"
    "\n\013m_breakTime\030\006 \001(\005B\026\302\377\024\022\346\210\230\351\230\237\350\247\243\346\225\243\346\227\266"
    "\351\227\264\022\'\n\rm_entryReward\030\007 \001(\005B\020\302\377\024\014\345\217\202\350\265\233\345\245"
    "\226\345\212\261\022+\n\013m_entrTimes\030\010 \001(\005B\026\302\377\024\022\345\217\202\350\265\233\350\216\267"
    "\345\245\226\346\254\241\346\225\260\022\"\n\013m_mvpReward\030\t \001(\005B\r\302\377\024\tmvp\345"
    "\245\226\345\212\261\022\'\n\nm_mvpTimes\030\n \001(\005B\023\302\377\024\017mvp\345\245\226\345\212\261"
    "\346\254\241\346\225\260\022%\n\013m_matchTime\030\013 \001(\005B\020\302\377\024\014\345\215\225\345\234\272\346"
    "\227\266\351\227\264\022*\n\nm_unitName\030\014 \001(\005B\026\302\377\024\022\344\277\256\346\224\271\346\210\230"
    "\351\230\237\345\220\215\347\247\260\022*\n\nm_unitCost\030\r \001(\005B\026\302\377\024\022\344\277\256\346\224"
    "\271\350\212\261\350\264\271\346\225\260\351\207\217\022)\n\rm_initialZLid\030\016 \001(\005B\022\302\377"
    "\024\016\345\210\235\345\247\213\346\210\230\344\273\244id\0223\n\017m_initialZLName\030\017 \001("
    "\tB\032\302\377\024\022\345\210\235\345\247\213\346\210\230\344\273\244\345\220\215\347\247\260\220\301\024@\022,\n\013m_robot"
    "Name\030\020 \001(\tB\027\302\377\024\017\346\234\272\345\231\250\344\272\272\345\220\215\347\247\260\220\301\024@\022*\n\nm"
    "_mateTime\030\021 \001(\005B\026\302\377\024\022\345\214\271\351\205\215\351\242\204\350\256\241\346\227\266\351\227\264\022"
    ")\n\tm_addTime\030\022 \001(\005B\026\302\377\024\022\345\214\271\351\205\215\345\242\236\351\207\217\346\227\266\351"
    "\227\264\022.\n\017m_initialNotice\030\023 \001(\tB\025\302\377\024\014\345\210\235\345\247\213\345"
    "\205\254\345\221\212\220\301\024\200\002\022*\n\014m_showReward\030\024 \003(\005B\024\302\377\024\014\345\261"
    "\225\347\244\272\345\245\226\345\212\261\210\301\024\003\"T\n\023Sheet_Pk3v3Constant\022=\n"
    "\024E_Pk3v3Constant_List\030\001 \003(\0132\031.proto_ff.E"
    "_Pk3v3ConstantB\004\210\301\024\002\"K\n\nE_Pk3v3Exp\022\030\n\004m_"
    "lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022#\n\tm_mateExp\030\002 \001(\005B"
    "\020\302\377\024\014\345\214\271\351\205\215\347\273\217\351\252\214\"F\n\016Sheet_Pk3v3Exp\0224\n\017E"
    "_Pk3v3Exp_List\030\001 \003(\0132\024.proto_ff.E_Pk3v3E"
    "xpB\005\210\301\024\200\010", 2089);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Pk3v3.proto", &protobuf_RegisterTypes);
  E_Pk3v3Level::default_instance_ = new E_Pk3v3Level();
  Sheet_Pk3v3Level::default_instance_ = new Sheet_Pk3v3Level();
  E_Pk3v3Reward::default_instance_ = new E_Pk3v3Reward();
  Sheet_Pk3v3Reward::default_instance_ = new Sheet_Pk3v3Reward();
  E_Pk3v3Badge::default_instance_ = new E_Pk3v3Badge();
  Sheet_Pk3v3Badge::default_instance_ = new Sheet_Pk3v3Badge();
  E_Pk3v3Constant::default_instance_ = new E_Pk3v3Constant();
  Sheet_Pk3v3Constant::default_instance_ = new Sheet_Pk3v3Constant();
  E_Pk3v3Exp::default_instance_ = new E_Pk3v3Exp();
  Sheet_Pk3v3Exp::default_instance_ = new Sheet_Pk3v3Exp();
  E_Pk3v3Level::default_instance_->InitAsDefaultInstance();
  Sheet_Pk3v3Level::default_instance_->InitAsDefaultInstance();
  E_Pk3v3Reward::default_instance_->InitAsDefaultInstance();
  Sheet_Pk3v3Reward::default_instance_->InitAsDefaultInstance();
  E_Pk3v3Badge::default_instance_->InitAsDefaultInstance();
  Sheet_Pk3v3Badge::default_instance_->InitAsDefaultInstance();
  E_Pk3v3Constant::default_instance_->InitAsDefaultInstance();
  Sheet_Pk3v3Constant::default_instance_->InitAsDefaultInstance();
  E_Pk3v3Exp::default_instance_->InitAsDefaultInstance();
  Sheet_Pk3v3Exp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fPk3v3_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fPk3v3_2eproto {
  StaticDescriptorInitializer_E_5fPk3v3_2eproto() {
    protobuf_AddDesc_E_5fPk3v3_2eproto();
  }
} static_descriptor_initializer_E_5fPk3v3_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_Pk3v3Level::kMIdFieldNumber;
const int E_Pk3v3Level::kMTypeFieldNumber;
const int E_Pk3v3Level::kMNameFieldNumber;
const int E_Pk3v3Level::kMStarNumFieldNumber;
const int E_Pk3v3Level::kMScoringFieldNumber;
const int E_Pk3v3Level::kMBadgeFieldNumber;
const int E_Pk3v3Level::kMShowBadgeFieldNumber;
const int E_Pk3v3Level::kMScoringAddFieldNumber;
const int E_Pk3v3Level::kMScoringCutFieldNumber;
#endif  // !_MSC_VER

E_Pk3v3Level::E_Pk3v3Level()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_Pk3v3Level::InitAsDefaultInstance() {
}

E_Pk3v3Level::E_Pk3v3Level(const E_Pk3v3Level& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_Pk3v3Level::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starnum_ = 0;
  m_scoring_ = 0;
  m_badge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_showbadge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_scoringadd_ = 0;
  m_scoringcut_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_Pk3v3Level::~E_Pk3v3Level() {
  SharedDtor();
}

void E_Pk3v3Level::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_badge_ != &::google::protobuf::internal::kEmptyString) {
    delete m_badge_;
  }
  if (m_showbadge_ != &::google::protobuf::internal::kEmptyString) {
    delete m_showbadge_;
  }
  if (this != default_instance_) {
  }
}

void E_Pk3v3Level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_Pk3v3Level::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_Pk3v3Level_descriptor_;
}

const E_Pk3v3Level& E_Pk3v3Level::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk3v3_2eproto();
  return *default_instance_;
}

E_Pk3v3Level* E_Pk3v3Level::default_instance_ = NULL;

E_Pk3v3Level* E_Pk3v3Level::New() const {
  return new E_Pk3v3Level;
}

void E_Pk3v3Level::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_starnum_ = 0;
    m_scoring_ = 0;
    if (has_m_badge()) {
      if (m_badge_ != &::google::protobuf::internal::kEmptyString) {
        m_badge_->clear();
      }
    }
    if (has_m_showbadge()) {
      if (m_showbadge_ != &::google::protobuf::internal::kEmptyString) {
        m_showbadge_->clear();
      }
    }
    m_scoringadd_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_scoringcut_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_Pk3v3Level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_name;
        break;
      }

      // optional string m_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_starNum;
        break;
      }

      // optional int32 m_starNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starnum_)));
          set_has_m_starnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_scoring;
        break;
      }

      // optional int32 m_scoring = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scoring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scoring_)));
          set_has_m_scoring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_badge;
        break;
      }

      // optional string m_badge = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_badge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_badge()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_badge().data(), this->m_badge().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_showBadge;
        break;
      }

      // optional string m_showBadge = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_showBadge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_showbadge()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_showbadge().data(), this->m_showbadge().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_scoringAdd;
        break;
      }

      // optional int32 m_scoringAdd = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scoringAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scoringadd_)));
          set_has_m_scoringadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_scoringCut;
        break;
      }

      // optional int32 m_scoringCut = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scoringCut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scoringcut_)));
          set_has_m_scoringcut();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_Pk3v3Level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional string m_name = 3;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_name(), output);
  }

  // optional int32 m_starNum = 4;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_starnum(), output);
  }

  // optional int32 m_scoring = 5;
  if (has_m_scoring()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_scoring(), output);
  }

  // optional string m_badge = 6;
  if (has_m_badge()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_badge().data(), this->m_badge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_badge(), output);
  }

  // optional string m_showBadge = 7;
  if (has_m_showbadge()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_showbadge().data(), this->m_showbadge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_showbadge(), output);
  }

  // optional int32 m_scoringAdd = 8;
  if (has_m_scoringadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_scoringadd(), output);
  }

  // optional int32 m_scoringCut = 9;
  if (has_m_scoringcut()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_scoringcut(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_Pk3v3Level::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional string m_name = 3;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_name(), target);
  }

  // optional int32 m_starNum = 4;
  if (has_m_starnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_starnum(), target);
  }

  // optional int32 m_scoring = 5;
  if (has_m_scoring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_scoring(), target);
  }

  // optional string m_badge = 6;
  if (has_m_badge()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_badge().data(), this->m_badge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_badge(), target);
  }

  // optional string m_showBadge = 7;
  if (has_m_showbadge()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_showbadge().data(), this->m_showbadge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_showbadge(), target);
  }

  // optional int32 m_scoringAdd = 8;
  if (has_m_scoringadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_scoringadd(), target);
  }

  // optional int32 m_scoringCut = 9;
  if (has_m_scoringcut()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_scoringcut(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_Pk3v3Level::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional string m_name = 3;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_starNum = 4;
    if (has_m_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starnum());
    }

    // optional int32 m_scoring = 5;
    if (has_m_scoring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scoring());
    }

    // optional string m_badge = 6;
    if (has_m_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_badge());
    }

    // optional string m_showBadge = 7;
    if (has_m_showbadge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_showbadge());
    }

    // optional int32 m_scoringAdd = 8;
    if (has_m_scoringadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scoringadd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_scoringCut = 9;
    if (has_m_scoringcut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scoringcut());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_Pk3v3Level::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_Pk3v3Level* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_Pk3v3Level*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_Pk3v3Level::MergeFrom(const E_Pk3v3Level& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_starnum()) {
      set_m_starnum(from.m_starnum());
    }
    if (from.has_m_scoring()) {
      set_m_scoring(from.m_scoring());
    }
    if (from.has_m_badge()) {
      set_m_badge(from.m_badge());
    }
    if (from.has_m_showbadge()) {
      set_m_showbadge(from.m_showbadge());
    }
    if (from.has_m_scoringadd()) {
      set_m_scoringadd(from.m_scoringadd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_scoringcut()) {
      set_m_scoringcut(from.m_scoringcut());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_Pk3v3Level::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_Pk3v3Level::CopyFrom(const E_Pk3v3Level& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_Pk3v3Level::IsInitialized() const {

  return true;
}

void E_Pk3v3Level::Swap(E_Pk3v3Level* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_starnum_, other->m_starnum_);
    std::swap(m_scoring_, other->m_scoring_);
    std::swap(m_badge_, other->m_badge_);
    std::swap(m_showbadge_, other->m_showbadge_);
    std::swap(m_scoringadd_, other->m_scoringadd_);
    std::swap(m_scoringcut_, other->m_scoringcut_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_Pk3v3Level::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_Pk3v3Level_descriptor_;
  metadata.reflection = E_Pk3v3Level_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_Pk3v3Level::kEPk3V3LevelListFieldNumber;
#endif  // !_MSC_VER

Sheet_Pk3v3Level::Sheet_Pk3v3Level()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_Pk3v3Level::InitAsDefaultInstance() {
}

Sheet_Pk3v3Level::Sheet_Pk3v3Level(const Sheet_Pk3v3Level& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_Pk3v3Level::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_Pk3v3Level::~Sheet_Pk3v3Level() {
  SharedDtor();
}

void Sheet_Pk3v3Level::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_Pk3v3Level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_Pk3v3Level::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_Pk3v3Level_descriptor_;
}

const Sheet_Pk3v3Level& Sheet_Pk3v3Level::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk3v3_2eproto();
  return *default_instance_;
}

Sheet_Pk3v3Level* Sheet_Pk3v3Level::default_instance_ = NULL;

Sheet_Pk3v3Level* Sheet_Pk3v3Level::New() const {
  return new Sheet_Pk3v3Level;
}

void Sheet_Pk3v3Level::Clear() {
  e_pk3v3level_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_Pk3v3Level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_Pk3v3Level E_Pk3v3Level_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_Pk3v3Level_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_pk3v3level_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_Pk3v3Level_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_Pk3v3Level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_Pk3v3Level E_Pk3v3Level_List = 1;
  for (int i = 0; i < this->e_pk3v3level_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_pk3v3level_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_Pk3v3Level::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_Pk3v3Level E_Pk3v3Level_List = 1;
  for (int i = 0; i < this->e_pk3v3level_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_pk3v3level_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_Pk3v3Level::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_Pk3v3Level E_Pk3v3Level_List = 1;
  total_size += 1 * this->e_pk3v3level_list_size();
  for (int i = 0; i < this->e_pk3v3level_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_pk3v3level_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_Pk3v3Level::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_Pk3v3Level* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_Pk3v3Level*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_Pk3v3Level::MergeFrom(const Sheet_Pk3v3Level& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_pk3v3level_list_.MergeFrom(from.e_pk3v3level_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_Pk3v3Level::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_Pk3v3Level::CopyFrom(const Sheet_Pk3v3Level& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_Pk3v3Level::IsInitialized() const {

  return true;
}

void Sheet_Pk3v3Level::Swap(Sheet_Pk3v3Level* other) {
  if (other != this) {
    e_pk3v3level_list_.Swap(&other->e_pk3v3level_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_Pk3v3Level::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_Pk3v3Level_descriptor_;
  metadata.reflection = Sheet_Pk3v3Level_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_Pk3v3Reward::kMIdFieldNumber;
const int E_Pk3v3Reward::kMTypeFieldNumber;
const int E_Pk3v3Reward::kMConditionFieldNumber;
const int E_Pk3v3Reward::kMRewardFieldNumber;
const int E_Pk3v3Reward::kMParamFieldNumber;
#endif  // !_MSC_VER

E_Pk3v3Reward::E_Pk3v3Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_Pk3v3Reward::InitAsDefaultInstance() {
}

E_Pk3v3Reward::E_Pk3v3Reward(const E_Pk3v3Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_Pk3v3Reward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_condition_ = 0;
  m_reward_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_Pk3v3Reward::~E_Pk3v3Reward() {
  SharedDtor();
}

void E_Pk3v3Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_Pk3v3Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_Pk3v3Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_Pk3v3Reward_descriptor_;
}

const E_Pk3v3Reward& E_Pk3v3Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk3v3_2eproto();
  return *default_instance_;
}

E_Pk3v3Reward* E_Pk3v3Reward::default_instance_ = NULL;

E_Pk3v3Reward* E_Pk3v3Reward::New() const {
  return new E_Pk3v3Reward;
}

void E_Pk3v3Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_condition_ = 0;
    m_reward_ = GOOGLE_LONGLONG(0);
  }
  m_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_Pk3v3Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_condition;
        break;
      }

      // optional int32 m_condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_condition_)));
          set_has_m_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_reward;
        break;
      }

      // optional int64 m_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_param;
        break;
      }

      // repeated int32 m_param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_m_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_Pk3v3Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_condition = 3;
  if (has_m_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_condition(), output);
  }

  // optional int64 m_reward = 4;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_reward(), output);
  }

  // repeated int32 m_param = 5;
  for (int i = 0; i < this->m_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->m_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_Pk3v3Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_condition = 3;
  if (has_m_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_condition(), target);
  }

  // optional int64 m_reward = 4;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_reward(), target);
  }

  // repeated int32 m_param = 5;
  for (int i = 0; i < this->m_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->m_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_Pk3v3Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_condition = 3;
    if (has_m_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_condition());
    }

    // optional int64 m_reward = 4;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_reward());
    }

  }
  // repeated int32 m_param = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_param(i));
    }
    total_size += 1 * this->m_param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_Pk3v3Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_Pk3v3Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_Pk3v3Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_Pk3v3Reward::MergeFrom(const E_Pk3v3Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_param_.MergeFrom(from.m_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_condition()) {
      set_m_condition(from.m_condition());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_Pk3v3Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_Pk3v3Reward::CopyFrom(const E_Pk3v3Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_Pk3v3Reward::IsInitialized() const {

  return true;
}

void E_Pk3v3Reward::Swap(E_Pk3v3Reward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_condition_, other->m_condition_);
    std::swap(m_reward_, other->m_reward_);
    m_param_.Swap(&other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_Pk3v3Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_Pk3v3Reward_descriptor_;
  metadata.reflection = E_Pk3v3Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_Pk3v3Reward::kEPk3V3RewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_Pk3v3Reward::Sheet_Pk3v3Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_Pk3v3Reward::InitAsDefaultInstance() {
}

Sheet_Pk3v3Reward::Sheet_Pk3v3Reward(const Sheet_Pk3v3Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_Pk3v3Reward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_Pk3v3Reward::~Sheet_Pk3v3Reward() {
  SharedDtor();
}

void Sheet_Pk3v3Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_Pk3v3Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_Pk3v3Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_Pk3v3Reward_descriptor_;
}

const Sheet_Pk3v3Reward& Sheet_Pk3v3Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk3v3_2eproto();
  return *default_instance_;
}

Sheet_Pk3v3Reward* Sheet_Pk3v3Reward::default_instance_ = NULL;

Sheet_Pk3v3Reward* Sheet_Pk3v3Reward::New() const {
  return new Sheet_Pk3v3Reward;
}

void Sheet_Pk3v3Reward::Clear() {
  e_pk3v3reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_Pk3v3Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_Pk3v3Reward E_Pk3v3Reward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_Pk3v3Reward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_pk3v3reward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_Pk3v3Reward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_Pk3v3Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_Pk3v3Reward E_Pk3v3Reward_List = 1;
  for (int i = 0; i < this->e_pk3v3reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_pk3v3reward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_Pk3v3Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_Pk3v3Reward E_Pk3v3Reward_List = 1;
  for (int i = 0; i < this->e_pk3v3reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_pk3v3reward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_Pk3v3Reward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_Pk3v3Reward E_Pk3v3Reward_List = 1;
  total_size += 1 * this->e_pk3v3reward_list_size();
  for (int i = 0; i < this->e_pk3v3reward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_pk3v3reward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_Pk3v3Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_Pk3v3Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_Pk3v3Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_Pk3v3Reward::MergeFrom(const Sheet_Pk3v3Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_pk3v3reward_list_.MergeFrom(from.e_pk3v3reward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_Pk3v3Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_Pk3v3Reward::CopyFrom(const Sheet_Pk3v3Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_Pk3v3Reward::IsInitialized() const {

  return true;
}

void Sheet_Pk3v3Reward::Swap(Sheet_Pk3v3Reward* other) {
  if (other != this) {
    e_pk3v3reward_list_.Swap(&other->e_pk3v3reward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_Pk3v3Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_Pk3v3Reward_descriptor_;
  metadata.reflection = Sheet_Pk3v3Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_Pk3v3Badge::kMIdFieldNumber;
const int E_Pk3v3Badge::kMNameFieldNumber;
const int E_Pk3v3Badge::kMTypeFieldNumber;
const int E_Pk3v3Badge::kMParamFieldNumber;
#endif  // !_MSC_VER

E_Pk3v3Badge::E_Pk3v3Badge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_Pk3v3Badge::InitAsDefaultInstance() {
}

E_Pk3v3Badge::E_Pk3v3Badge(const E_Pk3v3Badge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_Pk3v3Badge::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_Pk3v3Badge::~E_Pk3v3Badge() {
  SharedDtor();
}

void E_Pk3v3Badge::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_Pk3v3Badge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_Pk3v3Badge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_Pk3v3Badge_descriptor_;
}

const E_Pk3v3Badge& E_Pk3v3Badge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk3v3_2eproto();
  return *default_instance_;
}

E_Pk3v3Badge* E_Pk3v3Badge::default_instance_ = NULL;

E_Pk3v3Badge* E_Pk3v3Badge::New() const {
  return new E_Pk3v3Badge;
}

void E_Pk3v3Badge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_type_ = 0;
  }
  m_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_Pk3v3Badge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_param;
        break;
      }

      // repeated int32 m_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_m_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_Pk3v3Badge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // repeated int32 m_param = 4;
  for (int i = 0; i < this->m_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->m_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_Pk3v3Badge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // repeated int32 m_param = 4;
  for (int i = 0; i < this->m_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->m_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_Pk3v3Badge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  // repeated int32 m_param = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_param(i));
    }
    total_size += 1 * this->m_param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_Pk3v3Badge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_Pk3v3Badge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_Pk3v3Badge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_Pk3v3Badge::MergeFrom(const E_Pk3v3Badge& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_param_.MergeFrom(from.m_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_Pk3v3Badge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_Pk3v3Badge::CopyFrom(const E_Pk3v3Badge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_Pk3v3Badge::IsInitialized() const {

  return true;
}

void E_Pk3v3Badge::Swap(E_Pk3v3Badge* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_type_, other->m_type_);
    m_param_.Swap(&other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_Pk3v3Badge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_Pk3v3Badge_descriptor_;
  metadata.reflection = E_Pk3v3Badge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_Pk3v3Badge::kEPk3V3BadgeListFieldNumber;
#endif  // !_MSC_VER

Sheet_Pk3v3Badge::Sheet_Pk3v3Badge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_Pk3v3Badge::InitAsDefaultInstance() {
}

Sheet_Pk3v3Badge::Sheet_Pk3v3Badge(const Sheet_Pk3v3Badge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_Pk3v3Badge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_Pk3v3Badge::~Sheet_Pk3v3Badge() {
  SharedDtor();
}

void Sheet_Pk3v3Badge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_Pk3v3Badge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_Pk3v3Badge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_Pk3v3Badge_descriptor_;
}

const Sheet_Pk3v3Badge& Sheet_Pk3v3Badge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk3v3_2eproto();
  return *default_instance_;
}

Sheet_Pk3v3Badge* Sheet_Pk3v3Badge::default_instance_ = NULL;

Sheet_Pk3v3Badge* Sheet_Pk3v3Badge::New() const {
  return new Sheet_Pk3v3Badge;
}

void Sheet_Pk3v3Badge::Clear() {
  e_pk3v3badge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_Pk3v3Badge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_Pk3v3Badge E_Pk3v3Badge_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_Pk3v3Badge_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_pk3v3badge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_Pk3v3Badge_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_Pk3v3Badge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_Pk3v3Badge E_Pk3v3Badge_List = 1;
  for (int i = 0; i < this->e_pk3v3badge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_pk3v3badge_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_Pk3v3Badge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_Pk3v3Badge E_Pk3v3Badge_List = 1;
  for (int i = 0; i < this->e_pk3v3badge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_pk3v3badge_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_Pk3v3Badge::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_Pk3v3Badge E_Pk3v3Badge_List = 1;
  total_size += 1 * this->e_pk3v3badge_list_size();
  for (int i = 0; i < this->e_pk3v3badge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_pk3v3badge_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_Pk3v3Badge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_Pk3v3Badge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_Pk3v3Badge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_Pk3v3Badge::MergeFrom(const Sheet_Pk3v3Badge& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_pk3v3badge_list_.MergeFrom(from.e_pk3v3badge_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_Pk3v3Badge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_Pk3v3Badge::CopyFrom(const Sheet_Pk3v3Badge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_Pk3v3Badge::IsInitialized() const {

  return true;
}

void Sheet_Pk3v3Badge::Swap(Sheet_Pk3v3Badge* other) {
  if (other != this) {
    e_pk3v3badge_list_.Swap(&other->e_pk3v3badge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_Pk3v3Badge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_Pk3v3Badge_descriptor_;
  metadata.reflection = Sheet_Pk3v3Badge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_Pk3v3Constant::kMIdFieldNumber;
const int E_Pk3v3Constant::kMTeamMemberFieldNumber;
const int E_Pk3v3Constant::kMTeamToplimitFieldNumber;
const int E_Pk3v3Constant::kMCedeTimeFieldNumber;
const int E_Pk3v3Constant::kMPunishTimeFieldNumber;
const int E_Pk3v3Constant::kMBreakTimeFieldNumber;
const int E_Pk3v3Constant::kMEntryRewardFieldNumber;
const int E_Pk3v3Constant::kMEntrTimesFieldNumber;
const int E_Pk3v3Constant::kMMvpRewardFieldNumber;
const int E_Pk3v3Constant::kMMvpTimesFieldNumber;
const int E_Pk3v3Constant::kMMatchTimeFieldNumber;
const int E_Pk3v3Constant::kMUnitNameFieldNumber;
const int E_Pk3v3Constant::kMUnitCostFieldNumber;
const int E_Pk3v3Constant::kMInitialZLidFieldNumber;
const int E_Pk3v3Constant::kMInitialZLNameFieldNumber;
const int E_Pk3v3Constant::kMRobotNameFieldNumber;
const int E_Pk3v3Constant::kMMateTimeFieldNumber;
const int E_Pk3v3Constant::kMAddTimeFieldNumber;
const int E_Pk3v3Constant::kMInitialNoticeFieldNumber;
const int E_Pk3v3Constant::kMShowRewardFieldNumber;
#endif  // !_MSC_VER

E_Pk3v3Constant::E_Pk3v3Constant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_Pk3v3Constant::InitAsDefaultInstance() {
}

E_Pk3v3Constant::E_Pk3v3Constant(const E_Pk3v3Constant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_Pk3v3Constant::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_teammember_ = 0;
  m_teamtoplimit_ = 0;
  m_cedetime_ = 0;
  m_punishtime_ = 0;
  m_breaktime_ = 0;
  m_entryreward_ = 0;
  m_entrtimes_ = 0;
  m_mvpreward_ = 0;
  m_mvptimes_ = 0;
  m_matchtime_ = 0;
  m_unitname_ = 0;
  m_unitcost_ = 0;
  m_initialzlid_ = 0;
  m_initialzlname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_robotname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_matetime_ = 0;
  m_addtime_ = 0;
  m_initialnotice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_Pk3v3Constant::~E_Pk3v3Constant() {
  SharedDtor();
}

void E_Pk3v3Constant::SharedDtor() {
  if (m_initialzlname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_initialzlname_;
  }
  if (m_robotname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_robotname_;
  }
  if (m_initialnotice_ != &::google::protobuf::internal::kEmptyString) {
    delete m_initialnotice_;
  }
  if (this != default_instance_) {
  }
}

void E_Pk3v3Constant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_Pk3v3Constant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_Pk3v3Constant_descriptor_;
}

const E_Pk3v3Constant& E_Pk3v3Constant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk3v3_2eproto();
  return *default_instance_;
}

E_Pk3v3Constant* E_Pk3v3Constant::default_instance_ = NULL;

E_Pk3v3Constant* E_Pk3v3Constant::New() const {
  return new E_Pk3v3Constant;
}

void E_Pk3v3Constant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_teammember_ = 0;
    m_teamtoplimit_ = 0;
    m_cedetime_ = 0;
    m_punishtime_ = 0;
    m_breaktime_ = 0;
    m_entryreward_ = 0;
    m_entrtimes_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_mvpreward_ = 0;
    m_mvptimes_ = 0;
    m_matchtime_ = 0;
    m_unitname_ = 0;
    m_unitcost_ = 0;
    m_initialzlid_ = 0;
    if (has_m_initialzlname()) {
      if (m_initialzlname_ != &::google::protobuf::internal::kEmptyString) {
        m_initialzlname_->clear();
      }
    }
    if (has_m_robotname()) {
      if (m_robotname_ != &::google::protobuf::internal::kEmptyString) {
        m_robotname_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_matetime_ = 0;
    m_addtime_ = 0;
    if (has_m_initialnotice()) {
      if (m_initialnotice_ != &::google::protobuf::internal::kEmptyString) {
        m_initialnotice_->clear();
      }
    }
  }
  m_showreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_Pk3v3Constant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_teamMember;
        break;
      }

      // optional int32 m_teamMember = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_teamMember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_teammember_)));
          set_has_m_teammember();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_teamToplimit;
        break;
      }

      // optional int32 m_teamToplimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_teamToplimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_teamtoplimit_)));
          set_has_m_teamtoplimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_cedeTime;
        break;
      }

      // optional int32 m_cedeTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cedeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cedetime_)));
          set_has_m_cedetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_punishTime;
        break;
      }

      // optional int32 m_punishTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_punishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_punishtime_)));
          set_has_m_punishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_breakTime;
        break;
      }

      // optional int32 m_breakTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_breakTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_breaktime_)));
          set_has_m_breaktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_entryReward;
        break;
      }

      // optional int32 m_entryReward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_entryReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_entryreward_)));
          set_has_m_entryreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_entrTimes;
        break;
      }

      // optional int32 m_entrTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_entrTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_entrtimes_)));
          set_has_m_entrtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_mvpReward;
        break;
      }

      // optional int32 m_mvpReward = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mvpReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mvpreward_)));
          set_has_m_mvpreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_mvpTimes;
        break;
      }

      // optional int32 m_mvpTimes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mvpTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mvptimes_)));
          set_has_m_mvptimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_matchTime;
        break;
      }

      // optional int32 m_matchTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_matchTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_matchtime_)));
          set_has_m_matchtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_unitName;
        break;
      }

      // optional int32 m_unitName = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_unitName:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_unitname_)));
          set_has_m_unitname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_unitCost;
        break;
      }

      // optional int32 m_unitCost = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_unitCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_unitcost_)));
          set_has_m_unitcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_initialZLid;
        break;
      }

      // optional int32 m_initialZLid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_initialZLid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_initialzlid_)));
          set_has_m_initialzlid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_initialZLName;
        break;
      }

      // optional string m_initialZLName = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_initialZLName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_initialzlname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_initialzlname().data(), this->m_initialzlname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_robotName;
        break;
      }

      // optional string m_robotName = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_robotName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_robotname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_robotname().data(), this->m_robotname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_mateTime;
        break;
      }

      // optional int32 m_mateTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_matetime_)));
          set_has_m_matetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_addTime;
        break;
      }

      // optional int32 m_addTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_addTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_addtime_)));
          set_has_m_addtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_m_initialNotice;
        break;
      }

      // optional string m_initialNotice = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_initialNotice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_initialnotice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_initialnotice().data(), this->m_initialnotice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_showReward;
        break;
      }

      // repeated int32 m_showReward = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_showReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_m_showreward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_showreward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_showReward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_Pk3v3Constant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_teamMember = 2;
  if (has_m_teammember()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_teammember(), output);
  }

  // optional int32 m_teamToplimit = 3;
  if (has_m_teamtoplimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_teamtoplimit(), output);
  }

  // optional int32 m_cedeTime = 4;
  if (has_m_cedetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_cedetime(), output);
  }

  // optional int32 m_punishTime = 5;
  if (has_m_punishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_punishtime(), output);
  }

  // optional int32 m_breakTime = 6;
  if (has_m_breaktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_breaktime(), output);
  }

  // optional int32 m_entryReward = 7;
  if (has_m_entryreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_entryreward(), output);
  }

  // optional int32 m_entrTimes = 8;
  if (has_m_entrtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_entrtimes(), output);
  }

  // optional int32 m_mvpReward = 9;
  if (has_m_mvpreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_mvpreward(), output);
  }

  // optional int32 m_mvpTimes = 10;
  if (has_m_mvptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_mvptimes(), output);
  }

  // optional int32 m_matchTime = 11;
  if (has_m_matchtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_matchtime(), output);
  }

  // optional int32 m_unitName = 12;
  if (has_m_unitname()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_unitname(), output);
  }

  // optional int32 m_unitCost = 13;
  if (has_m_unitcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_unitcost(), output);
  }

  // optional int32 m_initialZLid = 14;
  if (has_m_initialzlid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_initialzlid(), output);
  }

  // optional string m_initialZLName = 15;
  if (has_m_initialzlname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_initialzlname().data(), this->m_initialzlname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->m_initialzlname(), output);
  }

  // optional string m_robotName = 16;
  if (has_m_robotname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_robotname().data(), this->m_robotname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->m_robotname(), output);
  }

  // optional int32 m_mateTime = 17;
  if (has_m_matetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_matetime(), output);
  }

  // optional int32 m_addTime = 18;
  if (has_m_addtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_addtime(), output);
  }

  // optional string m_initialNotice = 19;
  if (has_m_initialnotice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_initialnotice().data(), this->m_initialnotice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->m_initialnotice(), output);
  }

  // repeated int32 m_showReward = 20;
  for (int i = 0; i < this->m_showreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->m_showreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_Pk3v3Constant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_teamMember = 2;
  if (has_m_teammember()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_teammember(), target);
  }

  // optional int32 m_teamToplimit = 3;
  if (has_m_teamtoplimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_teamtoplimit(), target);
  }

  // optional int32 m_cedeTime = 4;
  if (has_m_cedetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_cedetime(), target);
  }

  // optional int32 m_punishTime = 5;
  if (has_m_punishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_punishtime(), target);
  }

  // optional int32 m_breakTime = 6;
  if (has_m_breaktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_breaktime(), target);
  }

  // optional int32 m_entryReward = 7;
  if (has_m_entryreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_entryreward(), target);
  }

  // optional int32 m_entrTimes = 8;
  if (has_m_entrtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_entrtimes(), target);
  }

  // optional int32 m_mvpReward = 9;
  if (has_m_mvpreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_mvpreward(), target);
  }

  // optional int32 m_mvpTimes = 10;
  if (has_m_mvptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_mvptimes(), target);
  }

  // optional int32 m_matchTime = 11;
  if (has_m_matchtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_matchtime(), target);
  }

  // optional int32 m_unitName = 12;
  if (has_m_unitname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_unitname(), target);
  }

  // optional int32 m_unitCost = 13;
  if (has_m_unitcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_unitcost(), target);
  }

  // optional int32 m_initialZLid = 14;
  if (has_m_initialzlid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_initialzlid(), target);
  }

  // optional string m_initialZLName = 15;
  if (has_m_initialzlname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_initialzlname().data(), this->m_initialzlname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->m_initialzlname(), target);
  }

  // optional string m_robotName = 16;
  if (has_m_robotname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_robotname().data(), this->m_robotname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->m_robotname(), target);
  }

  // optional int32 m_mateTime = 17;
  if (has_m_matetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_matetime(), target);
  }

  // optional int32 m_addTime = 18;
  if (has_m_addtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_addtime(), target);
  }

  // optional string m_initialNotice = 19;
  if (has_m_initialnotice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_initialnotice().data(), this->m_initialnotice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->m_initialnotice(), target);
  }

  // repeated int32 m_showReward = 20;
  for (int i = 0; i < this->m_showreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->m_showreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_Pk3v3Constant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_teamMember = 2;
    if (has_m_teammember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_teammember());
    }

    // optional int32 m_teamToplimit = 3;
    if (has_m_teamtoplimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_teamtoplimit());
    }

    // optional int32 m_cedeTime = 4;
    if (has_m_cedetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cedetime());
    }

    // optional int32 m_punishTime = 5;
    if (has_m_punishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_punishtime());
    }

    // optional int32 m_breakTime = 6;
    if (has_m_breaktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_breaktime());
    }

    // optional int32 m_entryReward = 7;
    if (has_m_entryreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_entryreward());
    }

    // optional int32 m_entrTimes = 8;
    if (has_m_entrtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_entrtimes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_mvpReward = 9;
    if (has_m_mvpreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mvpreward());
    }

    // optional int32 m_mvpTimes = 10;
    if (has_m_mvptimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mvptimes());
    }

    // optional int32 m_matchTime = 11;
    if (has_m_matchtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_matchtime());
    }

    // optional int32 m_unitName = 12;
    if (has_m_unitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_unitname());
    }

    // optional int32 m_unitCost = 13;
    if (has_m_unitcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_unitcost());
    }

    // optional int32 m_initialZLid = 14;
    if (has_m_initialzlid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_initialzlid());
    }

    // optional string m_initialZLName = 15;
    if (has_m_initialzlname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_initialzlname());
    }

    // optional string m_robotName = 16;
    if (has_m_robotname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_robotname());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_mateTime = 17;
    if (has_m_matetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_matetime());
    }

    // optional int32 m_addTime = 18;
    if (has_m_addtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_addtime());
    }

    // optional string m_initialNotice = 19;
    if (has_m_initialnotice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_initialnotice());
    }

  }
  // repeated int32 m_showReward = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_showreward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_showreward(i));
    }
    total_size += 2 * this->m_showreward_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_Pk3v3Constant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_Pk3v3Constant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_Pk3v3Constant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_Pk3v3Constant::MergeFrom(const E_Pk3v3Constant& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_showreward_.MergeFrom(from.m_showreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_teammember()) {
      set_m_teammember(from.m_teammember());
    }
    if (from.has_m_teamtoplimit()) {
      set_m_teamtoplimit(from.m_teamtoplimit());
    }
    if (from.has_m_cedetime()) {
      set_m_cedetime(from.m_cedetime());
    }
    if (from.has_m_punishtime()) {
      set_m_punishtime(from.m_punishtime());
    }
    if (from.has_m_breaktime()) {
      set_m_breaktime(from.m_breaktime());
    }
    if (from.has_m_entryreward()) {
      set_m_entryreward(from.m_entryreward());
    }
    if (from.has_m_entrtimes()) {
      set_m_entrtimes(from.m_entrtimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_mvpreward()) {
      set_m_mvpreward(from.m_mvpreward());
    }
    if (from.has_m_mvptimes()) {
      set_m_mvptimes(from.m_mvptimes());
    }
    if (from.has_m_matchtime()) {
      set_m_matchtime(from.m_matchtime());
    }
    if (from.has_m_unitname()) {
      set_m_unitname(from.m_unitname());
    }
    if (from.has_m_unitcost()) {
      set_m_unitcost(from.m_unitcost());
    }
    if (from.has_m_initialzlid()) {
      set_m_initialzlid(from.m_initialzlid());
    }
    if (from.has_m_initialzlname()) {
      set_m_initialzlname(from.m_initialzlname());
    }
    if (from.has_m_robotname()) {
      set_m_robotname(from.m_robotname());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_matetime()) {
      set_m_matetime(from.m_matetime());
    }
    if (from.has_m_addtime()) {
      set_m_addtime(from.m_addtime());
    }
    if (from.has_m_initialnotice()) {
      set_m_initialnotice(from.m_initialnotice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_Pk3v3Constant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_Pk3v3Constant::CopyFrom(const E_Pk3v3Constant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_Pk3v3Constant::IsInitialized() const {

  return true;
}

void E_Pk3v3Constant::Swap(E_Pk3v3Constant* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_teammember_, other->m_teammember_);
    std::swap(m_teamtoplimit_, other->m_teamtoplimit_);
    std::swap(m_cedetime_, other->m_cedetime_);
    std::swap(m_punishtime_, other->m_punishtime_);
    std::swap(m_breaktime_, other->m_breaktime_);
    std::swap(m_entryreward_, other->m_entryreward_);
    std::swap(m_entrtimes_, other->m_entrtimes_);
    std::swap(m_mvpreward_, other->m_mvpreward_);
    std::swap(m_mvptimes_, other->m_mvptimes_);
    std::swap(m_matchtime_, other->m_matchtime_);
    std::swap(m_unitname_, other->m_unitname_);
    std::swap(m_unitcost_, other->m_unitcost_);
    std::swap(m_initialzlid_, other->m_initialzlid_);
    std::swap(m_initialzlname_, other->m_initialzlname_);
    std::swap(m_robotname_, other->m_robotname_);
    std::swap(m_matetime_, other->m_matetime_);
    std::swap(m_addtime_, other->m_addtime_);
    std::swap(m_initialnotice_, other->m_initialnotice_);
    m_showreward_.Swap(&other->m_showreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_Pk3v3Constant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_Pk3v3Constant_descriptor_;
  metadata.reflection = E_Pk3v3Constant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_Pk3v3Constant::kEPk3V3ConstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_Pk3v3Constant::Sheet_Pk3v3Constant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_Pk3v3Constant::InitAsDefaultInstance() {
}

Sheet_Pk3v3Constant::Sheet_Pk3v3Constant(const Sheet_Pk3v3Constant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_Pk3v3Constant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_Pk3v3Constant::~Sheet_Pk3v3Constant() {
  SharedDtor();
}

void Sheet_Pk3v3Constant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_Pk3v3Constant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_Pk3v3Constant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_Pk3v3Constant_descriptor_;
}

const Sheet_Pk3v3Constant& Sheet_Pk3v3Constant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk3v3_2eproto();
  return *default_instance_;
}

Sheet_Pk3v3Constant* Sheet_Pk3v3Constant::default_instance_ = NULL;

Sheet_Pk3v3Constant* Sheet_Pk3v3Constant::New() const {
  return new Sheet_Pk3v3Constant;
}

void Sheet_Pk3v3Constant::Clear() {
  e_pk3v3constant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_Pk3v3Constant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_Pk3v3Constant E_Pk3v3Constant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_Pk3v3Constant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_pk3v3constant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_Pk3v3Constant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_Pk3v3Constant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_Pk3v3Constant E_Pk3v3Constant_List = 1;
  for (int i = 0; i < this->e_pk3v3constant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_pk3v3constant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_Pk3v3Constant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_Pk3v3Constant E_Pk3v3Constant_List = 1;
  for (int i = 0; i < this->e_pk3v3constant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_pk3v3constant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_Pk3v3Constant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_Pk3v3Constant E_Pk3v3Constant_List = 1;
  total_size += 1 * this->e_pk3v3constant_list_size();
  for (int i = 0; i < this->e_pk3v3constant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_pk3v3constant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_Pk3v3Constant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_Pk3v3Constant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_Pk3v3Constant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_Pk3v3Constant::MergeFrom(const Sheet_Pk3v3Constant& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_pk3v3constant_list_.MergeFrom(from.e_pk3v3constant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_Pk3v3Constant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_Pk3v3Constant::CopyFrom(const Sheet_Pk3v3Constant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_Pk3v3Constant::IsInitialized() const {

  return true;
}

void Sheet_Pk3v3Constant::Swap(Sheet_Pk3v3Constant* other) {
  if (other != this) {
    e_pk3v3constant_list_.Swap(&other->e_pk3v3constant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_Pk3v3Constant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_Pk3v3Constant_descriptor_;
  metadata.reflection = Sheet_Pk3v3Constant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_Pk3v3Exp::kMLvFieldNumber;
const int E_Pk3v3Exp::kMMateExpFieldNumber;
#endif  // !_MSC_VER

E_Pk3v3Exp::E_Pk3v3Exp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_Pk3v3Exp::InitAsDefaultInstance() {
}

E_Pk3v3Exp::E_Pk3v3Exp(const E_Pk3v3Exp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_Pk3v3Exp::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_mateexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_Pk3v3Exp::~E_Pk3v3Exp() {
  SharedDtor();
}

void E_Pk3v3Exp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_Pk3v3Exp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_Pk3v3Exp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_Pk3v3Exp_descriptor_;
}

const E_Pk3v3Exp& E_Pk3v3Exp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk3v3_2eproto();
  return *default_instance_;
}

E_Pk3v3Exp* E_Pk3v3Exp::default_instance_ = NULL;

E_Pk3v3Exp* E_Pk3v3Exp::New() const {
  return new E_Pk3v3Exp;
}

void E_Pk3v3Exp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_mateexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_Pk3v3Exp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_mateExp;
        break;
      }

      // optional int32 m_mateExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mateExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mateexp_)));
          set_has_m_mateexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_Pk3v3Exp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_mateExp = 2;
  if (has_m_mateexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_mateexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_Pk3v3Exp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_mateExp = 2;
  if (has_m_mateexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_mateexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_Pk3v3Exp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_mateExp = 2;
    if (has_m_mateexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mateexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_Pk3v3Exp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_Pk3v3Exp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_Pk3v3Exp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_Pk3v3Exp::MergeFrom(const E_Pk3v3Exp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_mateexp()) {
      set_m_mateexp(from.m_mateexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_Pk3v3Exp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_Pk3v3Exp::CopyFrom(const E_Pk3v3Exp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_Pk3v3Exp::IsInitialized() const {

  return true;
}

void E_Pk3v3Exp::Swap(E_Pk3v3Exp* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_mateexp_, other->m_mateexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_Pk3v3Exp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_Pk3v3Exp_descriptor_;
  metadata.reflection = E_Pk3v3Exp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_Pk3v3Exp::kEPk3V3ExpListFieldNumber;
#endif  // !_MSC_VER

Sheet_Pk3v3Exp::Sheet_Pk3v3Exp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_Pk3v3Exp::InitAsDefaultInstance() {
}

Sheet_Pk3v3Exp::Sheet_Pk3v3Exp(const Sheet_Pk3v3Exp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_Pk3v3Exp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_Pk3v3Exp::~Sheet_Pk3v3Exp() {
  SharedDtor();
}

void Sheet_Pk3v3Exp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_Pk3v3Exp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_Pk3v3Exp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_Pk3v3Exp_descriptor_;
}

const Sheet_Pk3v3Exp& Sheet_Pk3v3Exp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk3v3_2eproto();
  return *default_instance_;
}

Sheet_Pk3v3Exp* Sheet_Pk3v3Exp::default_instance_ = NULL;

Sheet_Pk3v3Exp* Sheet_Pk3v3Exp::New() const {
  return new Sheet_Pk3v3Exp;
}

void Sheet_Pk3v3Exp::Clear() {
  e_pk3v3exp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_Pk3v3Exp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_Pk3v3Exp E_Pk3v3Exp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_Pk3v3Exp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_pk3v3exp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_Pk3v3Exp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_Pk3v3Exp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_Pk3v3Exp E_Pk3v3Exp_List = 1;
  for (int i = 0; i < this->e_pk3v3exp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_pk3v3exp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_Pk3v3Exp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_Pk3v3Exp E_Pk3v3Exp_List = 1;
  for (int i = 0; i < this->e_pk3v3exp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_pk3v3exp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_Pk3v3Exp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_Pk3v3Exp E_Pk3v3Exp_List = 1;
  total_size += 1 * this->e_pk3v3exp_list_size();
  for (int i = 0; i < this->e_pk3v3exp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_pk3v3exp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_Pk3v3Exp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_Pk3v3Exp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_Pk3v3Exp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_Pk3v3Exp::MergeFrom(const Sheet_Pk3v3Exp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_pk3v3exp_list_.MergeFrom(from.e_pk3v3exp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_Pk3v3Exp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_Pk3v3Exp::CopyFrom(const Sheet_Pk3v3Exp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_Pk3v3Exp::IsInitialized() const {

  return true;
}

void Sheet_Pk3v3Exp::Swap(Sheet_Pk3v3Exp* other) {
  if (other != this) {
    e_pk3v3exp_list_.Swap(&other->e_pk3v3exp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_Pk3v3Exp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_Pk3v3Exp_descriptor_;
  metadata.reflection = Sheet_Pk3v3Exp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
