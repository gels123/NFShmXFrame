// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: equip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "equip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* equipequipattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipequipattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipequip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipequip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipequip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipequip_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipstrongtypeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipstrongtypeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipstrong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipstrong_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipstrong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipstrong_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipgemfinedateDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipgemfinedateDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipgemfine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipgemfine_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipgemfine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipgemfine_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipgem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipgem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipgem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipgem_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipatt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipatt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipatt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipatt_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipsuitattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipsuitattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipsuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipsuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipsuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipsuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipclear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipclear_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipclear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipclear_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipstrongexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipstrongexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipstrongexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipstrongexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipgemfineexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipgemfineexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipgemfineexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipgemfineexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipclearteamSectionDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipclearteamSectionDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipclearteam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipclearteam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipclearteam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipclearteam_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipawakeningawakenDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipawakeningawakenDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipawakening_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipawakening_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipawakening_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipawakening_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipenchantingtypeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipenchantingtypeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipenchantingenchantDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipenchantingenchantDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipenchanting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipenchanting_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipenchanting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipenchanting_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipmarryattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipmarryattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipmarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipmarry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipmarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipmarry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_equip_2eproto() {
  protobuf_AddDesc_equip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "equip.proto");
  GOOGLE_CHECK(file != NULL);
  equipequipattributeDesc_descriptor_ = file->message_type(0);
  static const int equipequipattributeDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, valuemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, valuemax_),
  };
  equipequipattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipequipattributeDesc_descriptor_,
      equipequipattributeDesc::default_instance_,
      equipequipattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipequipattributeDesc));
  equipequip_descriptor_ = file->message_type(1);
  static const int equipequip_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, professionlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattributedown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattributeup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattribute_typelibrary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattribute_valuemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattribute_valuemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, bluestarnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, bluestar_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, bluestar_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, bluestar_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, iscanbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, istradebind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, sellprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, combat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, meltingresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, attribute_),
  };
  equipequip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipequip_descriptor_,
      equipequip::default_instance_,
      equipequip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipequip));
  Sheet_equipequip_descriptor_ = file->message_type(2);
  static const int Sheet_equipequip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipequip, equipequip_list_),
  };
  Sheet_equipequip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipequip_descriptor_,
      Sheet_equipequip::default_instance_,
      Sheet_equipequip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipequip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipequip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipequip));
  equipstrongtypeDesc_descriptor_ = file->message_type(3);
  static const int equipstrongtypeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtypeDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtypeDesc, id_),
  };
  equipstrongtypeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipstrongtypeDesc_descriptor_,
      equipstrongtypeDesc::default_instance_,
      equipstrongtypeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtypeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtypeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipstrongtypeDesc));
  equipstrong_descriptor_ = file->message_type(4);
  static const int equipstrong_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrong, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrong, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrong, wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrong, srtongup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrong, type_),
  };
  equipstrong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipstrong_descriptor_,
      equipstrong::default_instance_,
      equipstrong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipstrong));
  Sheet_equipstrong_descriptor_ = file->message_type(5);
  static const int Sheet_equipstrong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrong, equipstrong_list_),
  };
  Sheet_equipstrong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipstrong_descriptor_,
      Sheet_equipstrong::default_instance_,
      Sheet_equipstrong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipstrong));
  equipgemfinedateDesc_descriptor_ = file->message_type(6);
  static const int equipgemfinedateDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfinedateDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfinedateDesc, id_),
  };
  equipgemfinedateDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipgemfinedateDesc_descriptor_,
      equipgemfinedateDesc::default_instance_,
      equipgemfinedateDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfinedateDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfinedateDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipgemfinedateDesc));
  equipgemfine_descriptor_ = file->message_type(7);
  static const int equipgemfine_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfine, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfine, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfine, wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfine, gemup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfine, gemnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfine, date_),
  };
  equipgemfine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipgemfine_descriptor_,
      equipgemfine::default_instance_,
      equipgemfine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipgemfine));
  Sheet_equipgemfine_descriptor_ = file->message_type(8);
  static const int Sheet_equipgemfine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgemfine, equipgemfine_list_),
  };
  Sheet_equipgemfine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipgemfine_descriptor_,
      Sheet_equipgemfine::default_instance_,
      Sheet_equipgemfine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgemfine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgemfine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipgemfine));
  equipgem_descriptor_ = file->message_type(9);
  static const int equipgem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgem, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgem, gemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgem, vipunlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgem, gemunlock_),
  };
  equipgem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipgem_descriptor_,
      equipgem::default_instance_,
      equipgem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipgem));
  Sheet_equipgem_descriptor_ = file->message_type(10);
  static const int Sheet_equipgem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgem, equipgem_list_),
  };
  Sheet_equipgem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipgem_descriptor_,
      Sheet_equipgem::default_instance_,
      Sheet_equipgem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipgem));
  equipatt_descriptor_ = file->message_type(11);
  static const int equipatt_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipatt, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipatt, idtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipatt, idnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipatt, att_),
  };
  equipatt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipatt_descriptor_,
      equipatt::default_instance_,
      equipatt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipatt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipatt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipatt));
  Sheet_equipatt_descriptor_ = file->message_type(12);
  static const int Sheet_equipatt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipatt, equipatt_list_),
  };
  Sheet_equipatt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipatt_descriptor_,
      Sheet_equipatt::default_instance_,
      Sheet_equipatt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipatt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipatt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipatt));
  equipsuitattributeDesc_descriptor_ = file->message_type(13);
  static const int equipsuitattributeDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipsuitattributeDesc, sctivation_),
  };
  equipsuitattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipsuitattributeDesc_descriptor_,
      equipsuitattributeDesc::default_instance_,
      equipsuitattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipsuitattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipsuitattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipsuitattributeDesc));
  equipsuit_descriptor_ = file->message_type(14);
  static const int equipsuit_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipsuit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipsuit, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipsuit, suitlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipsuit, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipsuit, colour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipsuit, aftername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipsuit, suitevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipsuit, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipsuit, position_),
  };
  equipsuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipsuit_descriptor_,
      equipsuit::default_instance_,
      equipsuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipsuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipsuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipsuit));
  Sheet_equipsuit_descriptor_ = file->message_type(15);
  static const int Sheet_equipsuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipsuit, equipsuit_list_),
  };
  Sheet_equipsuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipsuit_descriptor_,
      Sheet_equipsuit::default_instance_,
      Sheet_equipsuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipsuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipsuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipsuit));
  equipclear_descriptor_ = file->message_type(16);
  static const int equipclear_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclear, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclear, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclear, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclear, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclear, teamid_),
  };
  equipclear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipclear_descriptor_,
      equipclear::default_instance_,
      equipclear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipclear));
  Sheet_equipclear_descriptor_ = file->message_type(17);
  static const int Sheet_equipclear_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipclear, equipclear_list_),
  };
  Sheet_equipclear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipclear_descriptor_,
      Sheet_equipclear::default_instance_,
      Sheet_equipclear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipclear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipclear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipclear));
  equipstrongexp_descriptor_ = file->message_type(18);
  static const int equipstrongexp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongexp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongexp, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongexp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongexp, expup_),
  };
  equipstrongexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipstrongexp_descriptor_,
      equipstrongexp::default_instance_,
      equipstrongexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipstrongexp));
  Sheet_equipstrongexp_descriptor_ = file->message_type(19);
  static const int Sheet_equipstrongexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrongexp, equipstrongexp_list_),
  };
  Sheet_equipstrongexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipstrongexp_descriptor_,
      Sheet_equipstrongexp::default_instance_,
      Sheet_equipstrongexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrongexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrongexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipstrongexp));
  equipgemfineexp_descriptor_ = file->message_type(20);
  static const int equipgemfineexp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfineexp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfineexp, expup_),
  };
  equipgemfineexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipgemfineexp_descriptor_,
      equipgemfineexp::default_instance_,
      equipgemfineexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfineexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgemfineexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipgemfineexp));
  Sheet_equipgemfineexp_descriptor_ = file->message_type(21);
  static const int Sheet_equipgemfineexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgemfineexp, equipgemfineexp_list_),
  };
  Sheet_equipgemfineexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipgemfineexp_descriptor_,
      Sheet_equipgemfineexp::default_instance_,
      Sheet_equipgemfineexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgemfineexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgemfineexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipgemfineexp));
  equipclearteamSectionDesc_descriptor_ = file->message_type(22);
  static const int equipclearteamSectionDesc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteamSectionDesc, down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteamSectionDesc, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteamSectionDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteamSectionDesc, up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteamSectionDesc, g_),
  };
  equipclearteamSectionDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipclearteamSectionDesc_descriptor_,
      equipclearteamSectionDesc::default_instance_,
      equipclearteamSectionDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteamSectionDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteamSectionDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipclearteamSectionDesc));
  equipclearteam_descriptor_ = file->message_type(23);
  static const int equipclearteam_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteam, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteam, combat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteam, shengid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteam, shengnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteam, consumeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteam, consumenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteam, lockingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteam, lockingnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteam, section_),
  };
  equipclearteam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipclearteam_descriptor_,
      equipclearteam::default_instance_,
      equipclearteam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipclearteam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipclearteam));
  Sheet_equipclearteam_descriptor_ = file->message_type(24);
  static const int Sheet_equipclearteam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipclearteam, equipclearteam_list_),
  };
  Sheet_equipclearteam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipclearteam_descriptor_,
      Sheet_equipclearteam::default_instance_,
      Sheet_equipclearteam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipclearteam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipclearteam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipclearteam));
  equipawakeningawakenDesc_descriptor_ = file->message_type(25);
  static const int equipawakeningawakenDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipawakeningawakenDesc, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipawakeningawakenDesc, num_),
  };
  equipawakeningawakenDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipawakeningawakenDesc_descriptor_,
      equipawakeningawakenDesc::default_instance_,
      equipawakeningawakenDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipawakeningawakenDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipawakeningawakenDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipawakeningawakenDesc));
  equipawakening_descriptor_ = file->message_type(26);
  static const int equipawakening_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipawakening, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipawakening, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipawakening, awakenlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipawakening, needwearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipawakening, strong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipawakening, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipawakening, awaken_),
  };
  equipawakening_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipawakening_descriptor_,
      equipawakening::default_instance_,
      equipawakening_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipawakening, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipawakening, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipawakening));
  Sheet_equipawakening_descriptor_ = file->message_type(27);
  static const int Sheet_equipawakening_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipawakening, equipawakening_list_),
  };
  Sheet_equipawakening_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipawakening_descriptor_,
      Sheet_equipawakening::default_instance_,
      Sheet_equipawakening_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipawakening, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipawakening, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipawakening));
  equipenchantingtypeDesc_descriptor_ = file->message_type(28);
  static const int equipenchantingtypeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchantingtypeDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchantingtypeDesc, id_),
  };
  equipenchantingtypeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipenchantingtypeDesc_descriptor_,
      equipenchantingtypeDesc::default_instance_,
      equipenchantingtypeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchantingtypeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchantingtypeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipenchantingtypeDesc));
  equipenchantingenchantDesc_descriptor_ = file->message_type(29);
  static const int equipenchantingenchantDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchantingenchantDesc, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchantingenchantDesc, num_),
  };
  equipenchantingenchantDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipenchantingenchantDesc_descriptor_,
      equipenchantingenchantDesc::default_instance_,
      equipenchantingenchantDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchantingenchantDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchantingenchantDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipenchantingenchantDesc));
  equipenchanting_descriptor_ = file->message_type(30);
  static const int equipenchanting_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchanting, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchanting, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchanting, enchantlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchanting, needwearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchanting, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchanting, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchanting, enchant_),
  };
  equipenchanting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipenchanting_descriptor_,
      equipenchanting::default_instance_,
      equipenchanting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchanting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipenchanting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipenchanting));
  Sheet_equipenchanting_descriptor_ = file->message_type(31);
  static const int Sheet_equipenchanting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipenchanting, equipenchanting_list_),
  };
  Sheet_equipenchanting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipenchanting_descriptor_,
      Sheet_equipenchanting::default_instance_,
      Sheet_equipenchanting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipenchanting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipenchanting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipenchanting));
  equipmarryattributeDesc_descriptor_ = file->message_type(32);
  static const int equipmarryattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipmarryattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipmarryattributeDesc, value_),
  };
  equipmarryattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipmarryattributeDesc_descriptor_,
      equipmarryattributeDesc::default_instance_,
      equipmarryattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipmarryattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipmarryattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipmarryattributeDesc));
  equipmarry_descriptor_ = file->message_type(33);
  static const int equipmarry_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipmarry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipmarry, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipmarry, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipmarry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipmarry, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipmarry, materialexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipmarry, need_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipmarry, attribute_),
  };
  equipmarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipmarry_descriptor_,
      equipmarry::default_instance_,
      equipmarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipmarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipmarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipmarry));
  Sheet_equipmarry_descriptor_ = file->message_type(34);
  static const int Sheet_equipmarry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipmarry, equipmarry_list_),
  };
  Sheet_equipmarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipmarry_descriptor_,
      Sheet_equipmarry::default_instance_,
      Sheet_equipmarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipmarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipmarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipmarry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_equip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipequipattributeDesc_descriptor_, &equipequipattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipequip_descriptor_, &equipequip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipequip_descriptor_, &Sheet_equipequip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipstrongtypeDesc_descriptor_, &equipstrongtypeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipstrong_descriptor_, &equipstrong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipstrong_descriptor_, &Sheet_equipstrong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipgemfinedateDesc_descriptor_, &equipgemfinedateDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipgemfine_descriptor_, &equipgemfine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipgemfine_descriptor_, &Sheet_equipgemfine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipgem_descriptor_, &equipgem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipgem_descriptor_, &Sheet_equipgem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipatt_descriptor_, &equipatt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipatt_descriptor_, &Sheet_equipatt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipsuitattributeDesc_descriptor_, &equipsuitattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipsuit_descriptor_, &equipsuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipsuit_descriptor_, &Sheet_equipsuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipclear_descriptor_, &equipclear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipclear_descriptor_, &Sheet_equipclear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipstrongexp_descriptor_, &equipstrongexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipstrongexp_descriptor_, &Sheet_equipstrongexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipgemfineexp_descriptor_, &equipgemfineexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipgemfineexp_descriptor_, &Sheet_equipgemfineexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipclearteamSectionDesc_descriptor_, &equipclearteamSectionDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipclearteam_descriptor_, &equipclearteam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipclearteam_descriptor_, &Sheet_equipclearteam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipawakeningawakenDesc_descriptor_, &equipawakeningawakenDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipawakening_descriptor_, &equipawakening::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipawakening_descriptor_, &Sheet_equipawakening::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipenchantingtypeDesc_descriptor_, &equipenchantingtypeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipenchantingenchantDesc_descriptor_, &equipenchantingenchantDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipenchanting_descriptor_, &equipenchanting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipenchanting_descriptor_, &Sheet_equipenchanting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipmarryattributeDesc_descriptor_, &equipmarryattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipmarry_descriptor_, &equipmarry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipmarry_descriptor_, &Sheet_equipmarry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_equip_2eproto() {
  delete equipequipattributeDesc::default_instance_;
  delete equipequipattributeDesc_reflection_;
  delete equipequip::default_instance_;
  delete equipequip_reflection_;
  delete Sheet_equipequip::default_instance_;
  delete Sheet_equipequip_reflection_;
  delete equipstrongtypeDesc::default_instance_;
  delete equipstrongtypeDesc_reflection_;
  delete equipstrong::default_instance_;
  delete equipstrong_reflection_;
  delete Sheet_equipstrong::default_instance_;
  delete Sheet_equipstrong_reflection_;
  delete equipgemfinedateDesc::default_instance_;
  delete equipgemfinedateDesc_reflection_;
  delete equipgemfine::default_instance_;
  delete equipgemfine_reflection_;
  delete Sheet_equipgemfine::default_instance_;
  delete Sheet_equipgemfine_reflection_;
  delete equipgem::default_instance_;
  delete equipgem_reflection_;
  delete Sheet_equipgem::default_instance_;
  delete Sheet_equipgem_reflection_;
  delete equipatt::default_instance_;
  delete equipatt_reflection_;
  delete Sheet_equipatt::default_instance_;
  delete Sheet_equipatt_reflection_;
  delete equipsuitattributeDesc::default_instance_;
  delete equipsuitattributeDesc_reflection_;
  delete equipsuit::default_instance_;
  delete equipsuit_reflection_;
  delete Sheet_equipsuit::default_instance_;
  delete Sheet_equipsuit_reflection_;
  delete equipclear::default_instance_;
  delete equipclear_reflection_;
  delete Sheet_equipclear::default_instance_;
  delete Sheet_equipclear_reflection_;
  delete equipstrongexp::default_instance_;
  delete equipstrongexp_reflection_;
  delete Sheet_equipstrongexp::default_instance_;
  delete Sheet_equipstrongexp_reflection_;
  delete equipgemfineexp::default_instance_;
  delete equipgemfineexp_reflection_;
  delete Sheet_equipgemfineexp::default_instance_;
  delete Sheet_equipgemfineexp_reflection_;
  delete equipclearteamSectionDesc::default_instance_;
  delete equipclearteamSectionDesc_reflection_;
  delete equipclearteam::default_instance_;
  delete equipclearteam_reflection_;
  delete Sheet_equipclearteam::default_instance_;
  delete Sheet_equipclearteam_reflection_;
  delete equipawakeningawakenDesc::default_instance_;
  delete equipawakeningawakenDesc_reflection_;
  delete equipawakening::default_instance_;
  delete equipawakening_reflection_;
  delete Sheet_equipawakening::default_instance_;
  delete Sheet_equipawakening_reflection_;
  delete equipenchantingtypeDesc::default_instance_;
  delete equipenchantingtypeDesc_reflection_;
  delete equipenchantingenchantDesc::default_instance_;
  delete equipenchantingenchantDesc_reflection_;
  delete equipenchanting::default_instance_;
  delete equipenchanting_reflection_;
  delete Sheet_equipenchanting::default_instance_;
  delete Sheet_equipenchanting_reflection_;
  delete equipmarryattributeDesc::default_instance_;
  delete equipmarryattributeDesc_reflection_;
  delete equipmarry::default_instance_;
  delete equipmarry_reflection_;
  delete Sheet_equipmarry::default_instance_;
  delete Sheet_equipmarry_reflection_;
}

void protobuf_AddDesc_equip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013equip.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"u\n\027equipequipattributeDesc\022\"\n\010val"
    "ueMin\030\001 \001(\005B\020\302\377\024\014\346\234\200\345\260\217\346\225\260\345\200\274\022\022\n\004type\030\002 "
    "\001(\005B\004\302\377\024\000\022\"\n\010valueMax\030\003 \001(\005B\020\302\377\024\014\346\234\200\345\244\247\346"
    "\225\260\345\200\274\"\216\n\n\nequipequip\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\350\243"
    "\205\345\244\207ID\022\"\n\004name\030\002 \001(\tB\024\302\377\024\014\350\243\205\345\244\207\345\220\215\347\247\260\220\301"
    "\024 \022%\n\013wearQuality\030\003 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\351\230"
    "\266\022\"\n\010position\030\004 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\344\275\215\347\275\256\022(\n"
    "\nprofession\030\005 \001(\tB\024\302\377\024\014\350\201\214\344\270\232\351\231\220\345\210\266\220\301\024 \022"
    "&\n\014professionLv\030\006 \001(\005B\020\302\377\024\014\350\275\254\350\201\214\347\255\211\347\272\247\022"
    "%\n\005level\030\007 \001(\005B\026\302\377\024\022\347\251\277\346\210\264\347\255\211\347\272\247\351\231\220\345\210\266\022!"
    "\n\007quality\030\010 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\350\264\250\022\036\n\004sta"
    "r\030\t \001(\005B\020\302\377\024\014\350\243\205\345\244\207\346\230\237\347\272\247\0229\n\023refineAttri"
    "buteDown\030\n \001(\005B\034\302\377\024\030\346\230\237\347\272\247\345\261\236\346\200\247\346\225\260\351\207\217\344\270"
    "\213\351\231\220\0227\n\021refineAttributeUp\030\013 \001(\005B\034\302\377\024\030\346\230\237"
    "\347\272\247\345\261\236\346\200\247\346\225\260\351\207\217\344\270\212\351\231\220\022B\n\033refineAttribute"
    "_typeLibrary\030\014 \001(\tB\035\302\377\024\025\351\232\217\346\234\272\346\230\237\347\272\247\345\261\236\346"
    "\200\247\345\272\223\220\301\024 \022\?\n\030refineAttribute_valueMin\030\r "
    "\001(\tB\035\302\377\024\025\346\230\237\347\272\247\345\261\236\346\200\247\346\234\200\345\260\217\345\200\274\220\301\024 \022\?\n\030re"
    "fineAttribute_valueMax\030\016 \001(\tB\035\302\377\024\025\346\230\237\347\272\247"
    "\345\261\236\346\200\247\346\234\200\345\244\247\345\200\274\220\301\024 \0221\n\013blueStarNum\030\017 \001(\005"
    "B\034\302\377\024\030\350\223\235\350\211\262\346\230\237\347\272\247\345\261\236\346\200\247\346\235\241\346\225\260\022:\n\rblueSt"
    "ar_type\030\020 \001(\tB#\302\377\024\033\350\223\235\350\211\262\346\230\237\347\272\247\345\261\236\346\200\247\347\261\273"
    "\345\236\213\345\272\223\220\301\024 \0228\n\013blueStar_lv\030\021 \001(\tB#\302\377\024\033\350\223\235"
    "\350\211\262\346\230\237\347\272\247\347\255\211\347\272\247\351\227\264\351\232\224\345\267\256\220\301\024 \022<\n\017blueStar"
    "_number\030\022 \001(\tB#\302\377\024\033\350\223\235\350\211\262\346\230\237\347\272\247\346\257\217\347\272\247\345\242\236"
    "\345\212\240\345\200\274\220\301\024 \022#\n\tisCanbind\030\023 \001(\005B\020\302\377\024\014\346\230\257\345\220"
    "\246\347\273\221\345\256\232\022+\n\013isTradeBind\030\024 \001(\005B\026\302\377\024\022\346\230\257\345\220\246"
    "\344\272\244\346\230\223\347\273\221\345\256\232\022#\n\tsellPrice\030\025 \001(\005B\020\302\377\024\014\345\207\272"
    "\345\224\256\344\273\267\346\240\274\022%\n\004icon\030\026 \001(\tB\027\302\377\024\017\350\243\205\345\244\207\345\233\276\346\240"
    "\207\345\220\215\220\301\024 \022\036\n\004time\030\027 \001(\005B\020\302\377\024\014\351\231\220\346\227\266\350\243\205\345\244\207"
    "\0225\n\006Combat\030\030 \001(\005B%\302\377\024!\346\210\230\346\226\227\345\212\233\357\274\210\344\270\215\345\220\253"
    "\350\223\235\346\230\237\345\261\236\346\200\247\357\274\211\022,\n\tbroadcast\030\031 \001(\005B\031\302\377\024\025"
    "\346\230\257\345\220\246\346\222\255\346\224\276\350\267\221\351\251\254\347\201\257\022+\n\rmeltingResult\030\032"
    " \001(\tB\024\302\377\024\014\347\206\224\347\202\274\344\272\247\345\207\272\220\301\024 \022J\n\tattribute\030"
    "\033 \003(\0132!.proto_ff.equipequipattributeDesc"
    "B\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\002\"H\n\020Sheet_equipequ"
    "ip\0224\n\017equipequip_List\030\001 \003(\0132\024.proto_ff.e"
    "quipequipB\005\210\301\024\317\034\"C\n\023equipstrongtypeDesc\022"
    "\030\n\003num\030\001 \001(\tB\013\302\377\024\003\345\200\274\220\301\024 \022\022\n\002id\030\002 \001(\005B\006\302"
    "\377\024\002ID\"\323\001\n\013equipstrong\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\351"
    "\203\250\344\275\215ID\022\"\n\010position\030\002 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\351\203\250"
    "\344\275\215\022%\n\013wearQuality\030\003 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\351"
    "\230\266\022\"\n\010srtongUp\030\004 \001(\005B\020\302\377\024\014\345\274\272\345\214\226\344\270\212\351\231\220\022;"
    "\n\004type\030\005 \003(\0132\035.proto_ff.equipstrongtypeD"
    "escB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\002\"K\n\021Sheet_equipstrong"
    "\0226\n\020equipstrong_List\030\001 \003(\0132\025.proto_ff.eq"
    "uipstrongB\005\210\301\024\376\001\"I\n\024equipgemfinedateDesc"
    "\022\035\n\003Num\030\001 \001(\005B\020\302\377\024\014\346\217\220\344\276\233\347\273\217\351\252\214\022\022\n\002Id\030\002 "
    "\001(\003B\006\302\377\024\002id\"\206\002\n\014equipgemfine\022\030\n\002id\030\001 \001(\003"
    "B\014\302\377\024\010\351\203\250\344\275\215ID\022\"\n\010position\030\002 \001(\005B\020\302\377\024\014\350\243"
    "\205\345\244\207\351\203\250\344\275\215\022%\n\013wearQuality\030\003 \001(\005B\020\302\377\024\014\350\243\205"
    "\345\244\207\345\223\201\351\230\266\022\037\n\005gemUp\030\004 \001(\005B\020\302\377\024\014\347\262\276\347\202\274\344\270\212\351"
    "\231\220\022,\n\tgemNumber\030\005 \001(\005B\031\302\377\024\025\346\257\217\347\272\247\347\262\276\347\202\274\347"
    "\231\276\345\210\206\346\257\224\022B\n\004date\030\006 \003(\0132\036.proto_ff.equipg"
    "emfinedateDescB\024\302\377\024\014\346\266\210\350\200\227\346\235\220\346\226\231\210\301\024\003\"N\n\022"
    "Sheet_equipgemfine\0228\n\021equipgemfine_List\030"
    "\001 \003(\0132\026.proto_ff.equipgemfineB\005\210\301\024\376\001\"\247\001\n"
    "\010equipgem\022\"\n\010position\030\001 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\351"
    "\203\250\344\275\215\022!\n\007gemType\030\002 \001(\005B\020\302\377\024\014\345\256\235\347\237\263\347\261\273\345\236\213"
    "\022&\n\tVipUnlock\030\003 \001(\005B\023\302\377\024\017Vip\350\247\243\351\224\201\347\255\211\347\272\247"
    "\022,\n\tgemUnlock\030\004 \003(\005B\031\302\377\024\025\350\243\205\345\244\207\346\247\275\350\247\243\351\224\201"
    "\345\223\201\351\230\266\"A\n\016Sheet_equipgem\022/\n\requipgem_Lis"
    "t\030\001 \003(\0132\022.proto_ff.equipgemB\004\210\301\024r\"\212\001\n\010eq"
    "uipatt\022\033\n\002id\030\001 \001(\003B\017\302\377\024\013\346\200\273\347\255\211\347\272\247ID\022#\n\006i"
    "dType\030\002 \001(\005B\023\302\377\024\017\346\200\273\347\255\211\347\272\247\347\261\273\345\236\213\022\034\n\005idNu"
    "m\030\003 \001(\005B\r\302\377\024\t\346\200\273\347\255\211\347\272\247\022\036\n\003att\030\004 \001(\tB\021\302\377\024"
    "\t\345\261\236\346\200\247\345\200\274\220\301\024 \"B\n\016Sheet_equipatt\0220\n\requi"
    "patt_List\030\001 \003(\0132\022.proto_ff.equipattB\005\210\301\024"
    "\331\001\">\n\026equipsuitattributeDesc\022$\n\nsctivati"
    "on\030\001 \001(\005B\020\302\377\024\014\347\251\277\346\210\264\346\225\260\351\207\217\"\205\003\n\tequipsuit"
    "\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\345\245\227\350\243\205ID\022\"\n\nprofession"
    "\030\002 \001(\tB\016\302\377\024\006\350\201\214\344\270\232\220\301\024 \022 \n\006suitLv\030\003 \001(\005B\020"
    "\302\377\024\014\345\245\227\350\243\205\347\255\211\347\272\247\022%\n\005level\030\004 \001(\005B\026\302\377\024\022\345\245\227"
    "\350\243\205\346\211\223\351\200\240\347\255\211\347\272\247\022&\n\006colour\030\005 \001(\005B\026\302\377\024\022\345\245\227"
    "\350\243\205\346\211\223\351\200\240\345\223\201\350\264\250\022*\n\tafterName\030\006 \001(\tB\027\302\377\024\017"
    "\345\245\227\350\243\205\345\221\275\345\211\215\347\274\200\220\301\024 \022*\n\nsuiteValue\030\007 \001(\005B"
    "\026\302\377\024\022\345\245\227\350\243\205\345\245\227\344\273\266\346\225\260\351\207\217\022O\n\tattribute\030\010 \003"
    "(\0132 .proto_ff.equipsuitattributeDescB\032\302\377"
    "\024\022\345\245\227\344\273\266\346\277\200\346\264\273\345\261\236\346\200\247\210\301\024\003\022 \n\010position\030\t \003"
    "(\tB\016\302\377\024\006\351\203\250\344\275\215\210\301\024 \"E\n\017Sheet_equipsuit\0222\n"
    "\016equipsuit_List\030\001 \003(\0132\023.proto_ff.equipsu"
    "itB\005\210\301\024\244\001\"\270\001\n\nequipclear\022\030\n\002id\030\001 \001(\003B\014\302\377"
    "\024\010\345\272\217\345\217\267id\022\"\n\010position\030\002 \001(\005B\020\302\377\024\014\350\243\205\345\244\207"
    "\351\203\250\344\275\215\022\034\n\002Lv\030\003 \001(\005B\020\302\377\024\014\345\274\200\345\220\257\347\255\211\347\272\247\022)\n\005"
    "value\030\004 \001(\tB\032\302\377\024\022\345\274\200\345\255\224\347\273\221\351\222\273\350\212\261\350\264\271\220\301\024 \022"
    "#\n\006teamId\030\005 \003(\003B\023\302\377\024\017\346\264\227\347\273\203\346\256\265\345\261\236\346\200\247\"G\n\020"
    "Sheet_equipclear\0223\n\017equipclear_List\030\001 \003("
    "\0132\024.proto_ff.equipclearB\004\210\301\024r\"\232\001\n\016equips"
    "trongexp\022\026\n\002Lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022$\n\004gold"
    "\030\002 \001(\005B\026\302\377\024\022\345\274\272\345\214\226\346\266\210\350\200\227\351\207\221\345\270\201\022#\n\003exp\030\003 "
    "\001(\005B\026\302\377\024\022\345\274\272\345\214\226\345\242\236\345\212\240\347\273\217\351\252\214\022%\n\005expUp\030\004 \001"
    "(\003B\026\302\377\024\022\345\274\272\345\214\226\345\215\207\347\272\247\347\273\217\351\252\214\"T\n\024Sheet_equi"
    "pstrongexp\022<\n\023equipstrongexp_List\030\001 \003(\0132"
    "\030.proto_ff.equipstrongexpB\005\210\301\024\326\006\"P\n\017equi"
    "pgemfineexp\022\026\n\002Lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022%\n\005e"
    "xpUp\030\002 \001(\003B\026\302\377\024\022\347\262\276\347\202\274\345\215\207\347\272\247\347\273\217\351\252\214\"W\n\025Sh"
    "eet_equipgemfineexp\022>\n\024equipgemfineexp_L"
    "ist\030\001 \003(\0132\031.proto_ff.equipgemfineexpB\005\210\301"
    "\024\342\002\"\264\001\n\031equipclearteamSectionDesc\022\037\n\004dow"
    "n\030\001 \001(\tB\021\302\377\024\t\346\234\200\345\260\217\345\200\274\220\301\024 \022\033\n\001p\030\002 \001(\005B\020\302"
    "\377\024\014\346\231\256\351\200\232\346\264\227\347\273\203\022\031\n\004type\030\003 \001(\tB\013\302\377\024\003\345\272\223\220\301"
    "\024 \022\035\n\002up\030\004 \001(\tB\021\302\377\024\t\346\234\200\345\244\247\345\200\274\220\301\024 \022\037\n\001g\030\005"
    " \001(\tB\024\302\377\024\014\351\253\230\347\272\247\346\264\227\347\273\203\220\301\024 \"\242\003\n\016equipclea"
    "rteam\022\036\n\002id\030\001 \001(\003B\022\302\377\024\016\346\264\227\347\273\203\346\225\260\346\215\256id\022#\n"
    "\006combat\030\002 \001(\003B\023\302\377\024\017\345\215\207\346\256\265\346\210\230\345\212\233\345\200\274\022#\n\007sh"
    "engId\030\003 \001(\003B\022\302\377\024\016\345\215\207\346\256\265\351\201\223\345\205\267ID\022(\n\010sheng"
    "Num\030\004 \001(\005B\026\302\377\024\022\345\215\207\346\256\265\351\201\223\345\205\267\346\225\260\351\207\217\022%\n\tcon"
    "sumeId\030\005 \001(\003B\022\302\377\024\016\346\266\210\350\200\227\351\201\223\345\205\267ID\022.\n\ncons"
    "umeNum\030\006 \001(\tB\032\302\377\024\022\346\266\210\350\200\227\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024 "
    "\022)\n\tlockingId\030\007 \001(\tB\026\302\377\024\016\351\253\230\347\272\247\351\201\223\345\205\267ID\220"
    "\301\024#\022.\n\nlockingNum\030\010 \001(\tB\032\302\377\024\022\351\253\230\347\272\247\351\201\223\345\205"
    "\267\346\225\260\351\207\217\220\301\024 \022J\n\007Section\030\t \003(\0132#.proto_ff."
    "equipclearteamSectionDescB\024\302\377\024\014\345\261\236\346\200\247\347\261\273"
    "\345\236\213\210\301\024\010\"T\n\024Sheet_equipclearteam\022<\n\023equip"
    "clearteam_List\030\001 \003(\0132\030.proto_ff.equipcle"
    "arteamB\005\210\301\024\376\001\"M\n\030equipawakeningawakenDes"
    "c\022\030\n\004Item\030\001 \001(\003B\n\302\377\024\006\346\235\220\346\226\231\022\027\n\003Num\030\002 \001(\005"
    "B\n\302\377\024\006\346\225\260\351\207\217\"\306\002\n\016equipawakening\022\030\n\002id\030\001 "
    "\001(\003B\014\302\377\024\010\345\272\217\345\217\267id\022\"\n\010position\030\002 \001(\005B\020\302\377\024"
    "\014\350\243\205\345\244\207\351\203\250\344\275\215\022\"\n\010awakenLv\030\003 \001(\005B\020\302\377\024\014\350\247\211"
    "\351\206\222\347\255\211\347\272\247\022/\n\017needWearQuality\030\004 \001(\005B\026\302\377\024\022"
    "\351\234\200\346\261\202\350\243\205\345\244\207\345\223\201\351\230\266\022)\n\006strong\030\005 \001(\005B\031\302\377\024\025"
    "\345\274\272\345\214\226\346\217\220\345\215\207\344\270\207\345\210\206\346\257\224\0222\n\tattribute\030\006 \001(\005"
    "B\037\302\377\024\033\345\245\227\350\243\205\345\261\236\346\200\247\346\217\220\345\215\207\344\270\207\345\210\206\346\257\224\022B\n\006awa"
    "ken\030\007 \003(\0132\".proto_ff.equipawakeningawake"
    "nDescB\016\302\377\024\006\350\247\211\351\206\222\210\301\024\002\"T\n\024Sheet_equipawak"
    "ening\022<\n\023equipawakening_List\030\001 \003(\0132\030.pro"
    "to_ff.equipawakeningB\005\210\301\024\300\005\"G\n\027equipench"
    "antingtypeDesc\022\024\n\003num\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\002"
    "id\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\"O\n\032equipenchantinge"
    "nchantDesc\022\030\n\004Item\030\001 \001(\003B\n\302\377\024\006\346\235\220\346\226\231\022\027\n\003"
    "Num\030\002 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\"\357\002\n\017equipenchantin"
    "g\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\345\272\217\345\217\267id\022\"\n\010position\030"
    "\002 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\351\203\250\344\275\215\022#\n\tenchantLv\030\003 \001"
    "(\005B\020\302\377\024\014\351\231\204\351\255\224\347\255\211\347\272\247\022/\n\017needWearQuality\030"
    "\004 \001(\005B\026\302\377\024\022\351\234\200\346\261\202\350\243\205\345\244\207\345\223\201\351\230\266\0224\n\005equip\030\005"
    " \001(\005B%\302\377\024!\350\243\205\345\244\207\345\237\272\347\241\200\345\261\236\346\200\247\346\217\220\345\215\207\344\270\207\345\210\206"
    "\346\257\224\022K\n\004type\030\006 \003(\0132!.proto_ff.equipenchan"
    "tingtypeDescB\032\302\377\024\022\351\242\235\345\244\226\346\217\220\345\215\207\345\261\236\346\200\247\210\301\024\003"
    "\022E\n\007enchant\030\007 \003(\0132$.proto_ff.equipenchan"
    "tingenchantDescB\016\302\377\024\006\351\231\204\351\255\224\210\301\024\002\"W\n\025Sheet"
    "_equipenchanting\022>\n\024equipenchanting_List"
    "\030\001 \003(\0132\031.proto_ff.equipenchantingB\005\210\301\024\300\005"
    "\"G\n\027equipmarryattributeDesc\022\024\n\004type\030\001 \001("
    "\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\265\002\n\neq"
    "uipmarry\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\026\n\002lv\030\002 \001(\005"
    "B\n\302\377\024\006\347\255\211\347\272\247\022\034\n\010position\030\003 \001(\005B\n\302\377\024\006\344\275\215\347"
    "\275\256\022\036\n\004type\030\004 \001(\005B\020\302\377\024\014\345\261\236\346\200\247\347\261\273\345\236\213\022 \n\nma"
    "terialID\030\005 \001(\003B\014\302\377\024\010\346\235\220\346\226\231ID\022(\n\013material"
    "EXP\030\006 \001(\005B\023\302\377\024\017\346\235\220\346\226\231\347\273\217\351\252\214\345\200\274\022%\n\004need\030\007"
    " \001(\005B\027\302\377\024\023\351\234\200\350\246\201\347\273\217\351\252\214/\346\225\260\351\207\217\022J\n\tattribu"
    "te\030\010 \003(\0132!.proto_ff.equipmarryattributeD"
    "escB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\006\"H\n\020Sheet_equip"
    "marry\0224\n\017equipmarry_List\030\001 \003(\0132\024.proto_f"
    "f.equipmarryB\005\210\301\024\354\007", 6219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "equip.proto", &protobuf_RegisterTypes);
  equipequipattributeDesc::default_instance_ = new equipequipattributeDesc();
  equipequip::default_instance_ = new equipequip();
  Sheet_equipequip::default_instance_ = new Sheet_equipequip();
  equipstrongtypeDesc::default_instance_ = new equipstrongtypeDesc();
  equipstrong::default_instance_ = new equipstrong();
  Sheet_equipstrong::default_instance_ = new Sheet_equipstrong();
  equipgemfinedateDesc::default_instance_ = new equipgemfinedateDesc();
  equipgemfine::default_instance_ = new equipgemfine();
  Sheet_equipgemfine::default_instance_ = new Sheet_equipgemfine();
  equipgem::default_instance_ = new equipgem();
  Sheet_equipgem::default_instance_ = new Sheet_equipgem();
  equipatt::default_instance_ = new equipatt();
  Sheet_equipatt::default_instance_ = new Sheet_equipatt();
  equipsuitattributeDesc::default_instance_ = new equipsuitattributeDesc();
  equipsuit::default_instance_ = new equipsuit();
  Sheet_equipsuit::default_instance_ = new Sheet_equipsuit();
  equipclear::default_instance_ = new equipclear();
  Sheet_equipclear::default_instance_ = new Sheet_equipclear();
  equipstrongexp::default_instance_ = new equipstrongexp();
  Sheet_equipstrongexp::default_instance_ = new Sheet_equipstrongexp();
  equipgemfineexp::default_instance_ = new equipgemfineexp();
  Sheet_equipgemfineexp::default_instance_ = new Sheet_equipgemfineexp();
  equipclearteamSectionDesc::default_instance_ = new equipclearteamSectionDesc();
  equipclearteam::default_instance_ = new equipclearteam();
  Sheet_equipclearteam::default_instance_ = new Sheet_equipclearteam();
  equipawakeningawakenDesc::default_instance_ = new equipawakeningawakenDesc();
  equipawakening::default_instance_ = new equipawakening();
  Sheet_equipawakening::default_instance_ = new Sheet_equipawakening();
  equipenchantingtypeDesc::default_instance_ = new equipenchantingtypeDesc();
  equipenchantingenchantDesc::default_instance_ = new equipenchantingenchantDesc();
  equipenchanting::default_instance_ = new equipenchanting();
  Sheet_equipenchanting::default_instance_ = new Sheet_equipenchanting();
  equipmarryattributeDesc::default_instance_ = new equipmarryattributeDesc();
  equipmarry::default_instance_ = new equipmarry();
  Sheet_equipmarry::default_instance_ = new Sheet_equipmarry();
  equipequipattributeDesc::default_instance_->InitAsDefaultInstance();
  equipequip::default_instance_->InitAsDefaultInstance();
  Sheet_equipequip::default_instance_->InitAsDefaultInstance();
  equipstrongtypeDesc::default_instance_->InitAsDefaultInstance();
  equipstrong::default_instance_->InitAsDefaultInstance();
  Sheet_equipstrong::default_instance_->InitAsDefaultInstance();
  equipgemfinedateDesc::default_instance_->InitAsDefaultInstance();
  equipgemfine::default_instance_->InitAsDefaultInstance();
  Sheet_equipgemfine::default_instance_->InitAsDefaultInstance();
  equipgem::default_instance_->InitAsDefaultInstance();
  Sheet_equipgem::default_instance_->InitAsDefaultInstance();
  equipatt::default_instance_->InitAsDefaultInstance();
  Sheet_equipatt::default_instance_->InitAsDefaultInstance();
  equipsuitattributeDesc::default_instance_->InitAsDefaultInstance();
  equipsuit::default_instance_->InitAsDefaultInstance();
  Sheet_equipsuit::default_instance_->InitAsDefaultInstance();
  equipclear::default_instance_->InitAsDefaultInstance();
  Sheet_equipclear::default_instance_->InitAsDefaultInstance();
  equipstrongexp::default_instance_->InitAsDefaultInstance();
  Sheet_equipstrongexp::default_instance_->InitAsDefaultInstance();
  equipgemfineexp::default_instance_->InitAsDefaultInstance();
  Sheet_equipgemfineexp::default_instance_->InitAsDefaultInstance();
  equipclearteamSectionDesc::default_instance_->InitAsDefaultInstance();
  equipclearteam::default_instance_->InitAsDefaultInstance();
  Sheet_equipclearteam::default_instance_->InitAsDefaultInstance();
  equipawakeningawakenDesc::default_instance_->InitAsDefaultInstance();
  equipawakening::default_instance_->InitAsDefaultInstance();
  Sheet_equipawakening::default_instance_->InitAsDefaultInstance();
  equipenchantingtypeDesc::default_instance_->InitAsDefaultInstance();
  equipenchantingenchantDesc::default_instance_->InitAsDefaultInstance();
  equipenchanting::default_instance_->InitAsDefaultInstance();
  Sheet_equipenchanting::default_instance_->InitAsDefaultInstance();
  equipmarryattributeDesc::default_instance_->InitAsDefaultInstance();
  equipmarry::default_instance_->InitAsDefaultInstance();
  Sheet_equipmarry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_equip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_equip_2eproto {
  StaticDescriptorInitializer_equip_2eproto() {
    protobuf_AddDesc_equip_2eproto();
  }
} static_descriptor_initializer_equip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int equipequipattributeDesc::kValueMinFieldNumber;
const int equipequipattributeDesc::kTypeFieldNumber;
const int equipequipattributeDesc::kValueMaxFieldNumber;
#endif  // !_MSC_VER

equipequipattributeDesc::equipequipattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipequipattributeDesc::InitAsDefaultInstance() {
}

equipequipattributeDesc::equipequipattributeDesc(const equipequipattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipequipattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  valuemin_ = 0;
  type_ = 0;
  valuemax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipequipattributeDesc::~equipequipattributeDesc() {
  SharedDtor();
}

void equipequipattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipequipattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipequipattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipequipattributeDesc_descriptor_;
}

const equipequipattributeDesc& equipequipattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipequipattributeDesc* equipequipattributeDesc::default_instance_ = NULL;

equipequipattributeDesc* equipequipattributeDesc::New() const {
  return new equipequipattributeDesc;
}

void equipequipattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    valuemin_ = 0;
    type_ = 0;
    valuemax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipequipattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 valueMin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuemin_)));
          set_has_valuemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueMax;
        break;
      }

      // optional int32 valueMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuemax_)));
          set_has_valuemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipequipattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 valueMin = 1;
  if (has_valuemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->valuemin(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 valueMax = 3;
  if (has_valuemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->valuemax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipequipattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 valueMin = 1;
  if (has_valuemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->valuemin(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 valueMax = 3;
  if (has_valuemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->valuemax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipequipattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 valueMin = 1;
    if (has_valuemin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuemin());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 valueMax = 3;
    if (has_valuemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuemax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipequipattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipequipattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipequipattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipequipattributeDesc::MergeFrom(const equipequipattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_valuemin()) {
      set_valuemin(from.valuemin());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_valuemax()) {
      set_valuemax(from.valuemax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipequipattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipequipattributeDesc::CopyFrom(const equipequipattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipequipattributeDesc::IsInitialized() const {

  return true;
}

void equipequipattributeDesc::Swap(equipequipattributeDesc* other) {
  if (other != this) {
    std::swap(valuemin_, other->valuemin_);
    std::swap(type_, other->type_);
    std::swap(valuemax_, other->valuemax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipequipattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipequipattributeDesc_descriptor_;
  metadata.reflection = equipequipattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipequip::kIdFieldNumber;
const int equipequip::kNameFieldNumber;
const int equipequip::kWearQualityFieldNumber;
const int equipequip::kPositionFieldNumber;
const int equipequip::kProfessionFieldNumber;
const int equipequip::kProfessionLvFieldNumber;
const int equipequip::kLevelFieldNumber;
const int equipequip::kQualityFieldNumber;
const int equipequip::kStarFieldNumber;
const int equipequip::kRefineAttributeDownFieldNumber;
const int equipequip::kRefineAttributeUpFieldNumber;
const int equipequip::kRefineAttributeTypeLibraryFieldNumber;
const int equipequip::kRefineAttributeValueMinFieldNumber;
const int equipequip::kRefineAttributeValueMaxFieldNumber;
const int equipequip::kBlueStarNumFieldNumber;
const int equipequip::kBlueStarTypeFieldNumber;
const int equipequip::kBlueStarLvFieldNumber;
const int equipequip::kBlueStarNumberFieldNumber;
const int equipequip::kIsCanbindFieldNumber;
const int equipequip::kIsTradeBindFieldNumber;
const int equipequip::kSellPriceFieldNumber;
const int equipequip::kIconFieldNumber;
const int equipequip::kTimeFieldNumber;
const int equipequip::kCombatFieldNumber;
const int equipequip::kBroadcastFieldNumber;
const int equipequip::kMeltingResultFieldNumber;
const int equipequip::kAttributeFieldNumber;
#endif  // !_MSC_VER

equipequip::equipequip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipequip::InitAsDefaultInstance() {
}

equipequip::equipequip(const equipequip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipequip::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wearquality_ = 0;
  position_ = 0;
  profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  professionlv_ = 0;
  level_ = 0;
  quality_ = 0;
  star_ = 0;
  refineattributedown_ = 0;
  refineattributeup_ = 0;
  refineattribute_typelibrary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refineattribute_valuemin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refineattribute_valuemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bluestarnum_ = 0;
  bluestar_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bluestar_lv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bluestar_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iscanbind_ = 0;
  istradebind_ = 0;
  sellprice_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  combat_ = 0;
  broadcast_ = 0;
  meltingresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipequip::~equipequip() {
  SharedDtor();
}

void equipequip::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    delete profession_;
  }
  if (refineattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_typelibrary_;
  }
  if (refineattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_valuemin_;
  }
  if (refineattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_valuemax_;
  }
  if (bluestar_type_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_type_;
  }
  if (bluestar_lv_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_lv_;
  }
  if (bluestar_number_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_number_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (meltingresult_ != &::google::protobuf::internal::kEmptyString) {
    delete meltingresult_;
  }
  if (this != default_instance_) {
  }
}

void equipequip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipequip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipequip_descriptor_;
}

const equipequip& equipequip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipequip* equipequip::default_instance_ = NULL;

equipequip* equipequip::New() const {
  return new equipequip;
}

void equipequip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    wearquality_ = 0;
    position_ = 0;
    if (has_profession()) {
      if (profession_ != &::google::protobuf::internal::kEmptyString) {
        profession_->clear();
      }
    }
    professionlv_ = 0;
    level_ = 0;
    quality_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    star_ = 0;
    refineattributedown_ = 0;
    refineattributeup_ = 0;
    if (has_refineattribute_typelibrary()) {
      if (refineattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
        refineattribute_typelibrary_->clear();
      }
    }
    if (has_refineattribute_valuemin()) {
      if (refineattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
        refineattribute_valuemin_->clear();
      }
    }
    if (has_refineattribute_valuemax()) {
      if (refineattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
        refineattribute_valuemax_->clear();
      }
    }
    bluestarnum_ = 0;
    if (has_bluestar_type()) {
      if (bluestar_type_ != &::google::protobuf::internal::kEmptyString) {
        bluestar_type_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_bluestar_lv()) {
      if (bluestar_lv_ != &::google::protobuf::internal::kEmptyString) {
        bluestar_lv_->clear();
      }
    }
    if (has_bluestar_number()) {
      if (bluestar_number_ != &::google::protobuf::internal::kEmptyString) {
        bluestar_number_->clear();
      }
    }
    iscanbind_ = 0;
    istradebind_ = 0;
    sellprice_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    time_ = 0;
    combat_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    broadcast_ = 0;
    if (has_meltingresult()) {
      if (meltingresult_ != &::google::protobuf::internal::kEmptyString) {
        meltingresult_->clear();
      }
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipequip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wearQuality;
        break;
      }

      // optional int32 wearQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wearquality_)));
          set_has_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_position;
        break;
      }

      // optional int32 position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_profession;
        break;
      }

      // optional string profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profession()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->profession().data(), this->profession().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_professionLv;
        break;
      }

      // optional int32 professionLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_professionLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionlv_)));
          set_has_professionlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_quality;
        break;
      }

      // optional int32 quality = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_star;
        break;
      }

      // optional int32 star = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_refineAttributeDown;
        break;
      }

      // optional int32 refineAttributeDown = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineAttributeDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refineattributedown_)));
          set_has_refineattributedown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_refineAttributeUp;
        break;
      }

      // optional int32 refineAttributeUp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineAttributeUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refineattributeup_)));
          set_has_refineattributeup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_refineAttribute_typeLibrary;
        break;
      }

      // optional string refineAttribute_typeLibrary = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refineAttribute_typeLibrary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refineattribute_typelibrary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refineattribute_typelibrary().data(), this->refineattribute_typelibrary().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_refineAttribute_valueMin;
        break;
      }

      // optional string refineAttribute_valueMin = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refineAttribute_valueMin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refineattribute_valuemin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refineattribute_valuemin().data(), this->refineattribute_valuemin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_refineAttribute_valueMax;
        break;
      }

      // optional string refineAttribute_valueMax = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refineAttribute_valueMax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refineattribute_valuemax()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refineattribute_valuemax().data(), this->refineattribute_valuemax().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_blueStarNum;
        break;
      }

      // optional int32 blueStarNum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blueStarNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bluestarnum_)));
          set_has_bluestarnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_blueStar_type;
        break;
      }

      // optional string blueStar_type = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueStar_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluestar_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bluestar_type().data(), this->bluestar_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_blueStar_lv;
        break;
      }

      // optional string blueStar_lv = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueStar_lv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluestar_lv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bluestar_lv().data(), this->bluestar_lv().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_blueStar_number;
        break;
      }

      // optional string blueStar_number = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueStar_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluestar_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bluestar_number().data(), this->bluestar_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_isCanbind;
        break;
      }

      // optional int32 isCanbind = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCanbind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscanbind_)));
          set_has_iscanbind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_isTradeBind;
        break;
      }

      // optional int32 isTradeBind = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTradeBind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istradebind_)));
          set_has_istradebind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_sellPrice;
        break;
      }

      // optional int32 sellPrice = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice_)));
          set_has_sellprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_icon;
        break;
      }

      // optional string icon = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_time;
        break;
      }

      // optional int32 time = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_Combat;
        break;
      }

      // optional int32 Combat = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Combat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combat_)));
          set_has_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_broadcast;
        break;
      }

      // optional int32 broadcast = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadcast_)));
          set_has_broadcast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_meltingResult;
        break;
      }

      // optional string meltingResult = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meltingResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meltingresult()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meltingresult().data(), this->meltingresult().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.equipequipattributeDesc attribute = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipequip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wearquality(), output);
  }

  // optional int32 position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->position(), output);
  }

  // optional string profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->profession(), output);
  }

  // optional int32 professionLv = 6;
  if (has_professionlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->professionlv(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional int32 quality = 8;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->quality(), output);
  }

  // optional int32 star = 9;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->star(), output);
  }

  // optional int32 refineAttributeDown = 10;
  if (has_refineattributedown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->refineattributedown(), output);
  }

  // optional int32 refineAttributeUp = 11;
  if (has_refineattributeup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->refineattributeup(), output);
  }

  // optional string refineAttribute_typeLibrary = 12;
  if (has_refineattribute_typelibrary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_typelibrary().data(), this->refineattribute_typelibrary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->refineattribute_typelibrary(), output);
  }

  // optional string refineAttribute_valueMin = 13;
  if (has_refineattribute_valuemin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_valuemin().data(), this->refineattribute_valuemin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->refineattribute_valuemin(), output);
  }

  // optional string refineAttribute_valueMax = 14;
  if (has_refineattribute_valuemax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_valuemax().data(), this->refineattribute_valuemax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->refineattribute_valuemax(), output);
  }

  // optional int32 blueStarNum = 15;
  if (has_bluestarnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->bluestarnum(), output);
  }

  // optional string blueStar_type = 16;
  if (has_bluestar_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_type().data(), this->bluestar_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->bluestar_type(), output);
  }

  // optional string blueStar_lv = 17;
  if (has_bluestar_lv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_lv().data(), this->bluestar_lv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->bluestar_lv(), output);
  }

  // optional string blueStar_number = 18;
  if (has_bluestar_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_number().data(), this->bluestar_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->bluestar_number(), output);
  }

  // optional int32 isCanbind = 19;
  if (has_iscanbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->iscanbind(), output);
  }

  // optional int32 isTradeBind = 20;
  if (has_istradebind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->istradebind(), output);
  }

  // optional int32 sellPrice = 21;
  if (has_sellprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->sellprice(), output);
  }

  // optional string icon = 22;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->icon(), output);
  }

  // optional int32 time = 23;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->time(), output);
  }

  // optional int32 Combat = 24;
  if (has_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->combat(), output);
  }

  // optional int32 broadcast = 25;
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->broadcast(), output);
  }

  // optional string meltingResult = 26;
  if (has_meltingresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meltingresult().data(), this->meltingresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->meltingresult(), output);
  }

  // repeated .proto_ff.equipequipattributeDesc attribute = 27;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipequip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wearquality(), target);
  }

  // optional int32 position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->position(), target);
  }

  // optional string profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->profession(), target);
  }

  // optional int32 professionLv = 6;
  if (has_professionlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->professionlv(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional int32 quality = 8;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->quality(), target);
  }

  // optional int32 star = 9;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->star(), target);
  }

  // optional int32 refineAttributeDown = 10;
  if (has_refineattributedown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->refineattributedown(), target);
  }

  // optional int32 refineAttributeUp = 11;
  if (has_refineattributeup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->refineattributeup(), target);
  }

  // optional string refineAttribute_typeLibrary = 12;
  if (has_refineattribute_typelibrary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_typelibrary().data(), this->refineattribute_typelibrary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->refineattribute_typelibrary(), target);
  }

  // optional string refineAttribute_valueMin = 13;
  if (has_refineattribute_valuemin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_valuemin().data(), this->refineattribute_valuemin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->refineattribute_valuemin(), target);
  }

  // optional string refineAttribute_valueMax = 14;
  if (has_refineattribute_valuemax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_valuemax().data(), this->refineattribute_valuemax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->refineattribute_valuemax(), target);
  }

  // optional int32 blueStarNum = 15;
  if (has_bluestarnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->bluestarnum(), target);
  }

  // optional string blueStar_type = 16;
  if (has_bluestar_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_type().data(), this->bluestar_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->bluestar_type(), target);
  }

  // optional string blueStar_lv = 17;
  if (has_bluestar_lv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_lv().data(), this->bluestar_lv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->bluestar_lv(), target);
  }

  // optional string blueStar_number = 18;
  if (has_bluestar_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_number().data(), this->bluestar_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->bluestar_number(), target);
  }

  // optional int32 isCanbind = 19;
  if (has_iscanbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->iscanbind(), target);
  }

  // optional int32 isTradeBind = 20;
  if (has_istradebind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->istradebind(), target);
  }

  // optional int32 sellPrice = 21;
  if (has_sellprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->sellprice(), target);
  }

  // optional string icon = 22;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->icon(), target);
  }

  // optional int32 time = 23;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->time(), target);
  }

  // optional int32 Combat = 24;
  if (has_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->combat(), target);
  }

  // optional int32 broadcast = 25;
  if (has_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->broadcast(), target);
  }

  // optional string meltingResult = 26;
  if (has_meltingresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meltingresult().data(), this->meltingresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->meltingresult(), target);
  }

  // repeated .proto_ff.equipequipattributeDesc attribute = 27;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipequip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 wearQuality = 3;
    if (has_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wearquality());
    }

    // optional int32 position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional string profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profession());
    }

    // optional int32 professionLv = 6;
    if (has_professionlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionlv());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 quality = 8;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 star = 9;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 refineAttributeDown = 10;
    if (has_refineattributedown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refineattributedown());
    }

    // optional int32 refineAttributeUp = 11;
    if (has_refineattributeup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refineattributeup());
    }

    // optional string refineAttribute_typeLibrary = 12;
    if (has_refineattribute_typelibrary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refineattribute_typelibrary());
    }

    // optional string refineAttribute_valueMin = 13;
    if (has_refineattribute_valuemin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refineattribute_valuemin());
    }

    // optional string refineAttribute_valueMax = 14;
    if (has_refineattribute_valuemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refineattribute_valuemax());
    }

    // optional int32 blueStarNum = 15;
    if (has_bluestarnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bluestarnum());
    }

    // optional string blueStar_type = 16;
    if (has_bluestar_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluestar_type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string blueStar_lv = 17;
    if (has_bluestar_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluestar_lv());
    }

    // optional string blueStar_number = 18;
    if (has_bluestar_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluestar_number());
    }

    // optional int32 isCanbind = 19;
    if (has_iscanbind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscanbind());
    }

    // optional int32 isTradeBind = 20;
    if (has_istradebind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istradebind());
    }

    // optional int32 sellPrice = 21;
    if (has_sellprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice());
    }

    // optional string icon = 22;
    if (has_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional int32 time = 23;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 Combat = 24;
    if (has_combat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combat());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 broadcast = 25;
    if (has_broadcast()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadcast());
    }

    // optional string meltingResult = 26;
    if (has_meltingresult()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meltingresult());
    }

  }
  // repeated .proto_ff.equipequipattributeDesc attribute = 27;
  total_size += 2 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipequip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipequip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipequip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipequip::MergeFrom(const equipequip& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_wearquality()) {
      set_wearquality(from.wearquality());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_professionlv()) {
      set_professionlv(from.professionlv());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_refineattributedown()) {
      set_refineattributedown(from.refineattributedown());
    }
    if (from.has_refineattributeup()) {
      set_refineattributeup(from.refineattributeup());
    }
    if (from.has_refineattribute_typelibrary()) {
      set_refineattribute_typelibrary(from.refineattribute_typelibrary());
    }
    if (from.has_refineattribute_valuemin()) {
      set_refineattribute_valuemin(from.refineattribute_valuemin());
    }
    if (from.has_refineattribute_valuemax()) {
      set_refineattribute_valuemax(from.refineattribute_valuemax());
    }
    if (from.has_bluestarnum()) {
      set_bluestarnum(from.bluestarnum());
    }
    if (from.has_bluestar_type()) {
      set_bluestar_type(from.bluestar_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bluestar_lv()) {
      set_bluestar_lv(from.bluestar_lv());
    }
    if (from.has_bluestar_number()) {
      set_bluestar_number(from.bluestar_number());
    }
    if (from.has_iscanbind()) {
      set_iscanbind(from.iscanbind());
    }
    if (from.has_istradebind()) {
      set_istradebind(from.istradebind());
    }
    if (from.has_sellprice()) {
      set_sellprice(from.sellprice());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_combat()) {
      set_combat(from.combat());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_broadcast()) {
      set_broadcast(from.broadcast());
    }
    if (from.has_meltingresult()) {
      set_meltingresult(from.meltingresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipequip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipequip::CopyFrom(const equipequip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipequip::IsInitialized() const {

  return true;
}

void equipequip::Swap(equipequip* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(wearquality_, other->wearquality_);
    std::swap(position_, other->position_);
    std::swap(profession_, other->profession_);
    std::swap(professionlv_, other->professionlv_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(star_, other->star_);
    std::swap(refineattributedown_, other->refineattributedown_);
    std::swap(refineattributeup_, other->refineattributeup_);
    std::swap(refineattribute_typelibrary_, other->refineattribute_typelibrary_);
    std::swap(refineattribute_valuemin_, other->refineattribute_valuemin_);
    std::swap(refineattribute_valuemax_, other->refineattribute_valuemax_);
    std::swap(bluestarnum_, other->bluestarnum_);
    std::swap(bluestar_type_, other->bluestar_type_);
    std::swap(bluestar_lv_, other->bluestar_lv_);
    std::swap(bluestar_number_, other->bluestar_number_);
    std::swap(iscanbind_, other->iscanbind_);
    std::swap(istradebind_, other->istradebind_);
    std::swap(sellprice_, other->sellprice_);
    std::swap(icon_, other->icon_);
    std::swap(time_, other->time_);
    std::swap(combat_, other->combat_);
    std::swap(broadcast_, other->broadcast_);
    std::swap(meltingresult_, other->meltingresult_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipequip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipequip_descriptor_;
  metadata.reflection = equipequip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipequip::kEquipequipListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipequip::Sheet_equipequip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipequip::InitAsDefaultInstance() {
}

Sheet_equipequip::Sheet_equipequip(const Sheet_equipequip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipequip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipequip::~Sheet_equipequip() {
  SharedDtor();
}

void Sheet_equipequip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipequip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipequip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipequip_descriptor_;
}

const Sheet_equipequip& Sheet_equipequip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipequip* Sheet_equipequip::default_instance_ = NULL;

Sheet_equipequip* Sheet_equipequip::New() const {
  return new Sheet_equipequip;
}

void Sheet_equipequip::Clear() {
  equipequip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipequip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipequip equipequip_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipequip_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipequip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipequip_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipequip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipequip equipequip_List = 1;
  for (int i = 0; i < this->equipequip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipequip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipequip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipequip equipequip_List = 1;
  for (int i = 0; i < this->equipequip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipequip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipequip::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipequip equipequip_List = 1;
  total_size += 1 * this->equipequip_list_size();
  for (int i = 0; i < this->equipequip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipequip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipequip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipequip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipequip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipequip::MergeFrom(const Sheet_equipequip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipequip_list_.MergeFrom(from.equipequip_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipequip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipequip::CopyFrom(const Sheet_equipequip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipequip::IsInitialized() const {

  return true;
}

void Sheet_equipequip::Swap(Sheet_equipequip* other) {
  if (other != this) {
    equipequip_list_.Swap(&other->equipequip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipequip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipequip_descriptor_;
  metadata.reflection = Sheet_equipequip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipstrongtypeDesc::kNumFieldNumber;
const int equipstrongtypeDesc::kIdFieldNumber;
#endif  // !_MSC_VER

equipstrongtypeDesc::equipstrongtypeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipstrongtypeDesc::InitAsDefaultInstance() {
}

equipstrongtypeDesc::equipstrongtypeDesc(const equipstrongtypeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipstrongtypeDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipstrongtypeDesc::~equipstrongtypeDesc() {
  SharedDtor();
}

void equipstrongtypeDesc::SharedDtor() {
  if (num_ != &::google::protobuf::internal::kEmptyString) {
    delete num_;
  }
  if (this != default_instance_) {
  }
}

void equipstrongtypeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipstrongtypeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipstrongtypeDesc_descriptor_;
}

const equipstrongtypeDesc& equipstrongtypeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipstrongtypeDesc* equipstrongtypeDesc::default_instance_ = NULL;

equipstrongtypeDesc* equipstrongtypeDesc::New() const {
  return new equipstrongtypeDesc;
}

void equipstrongtypeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_num()) {
      if (num_ != &::google::protobuf::internal::kEmptyString) {
        num_->clear();
      }
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipstrongtypeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->num().data(), this->num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipstrongtypeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->num(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipstrongtypeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->num(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipstrongtypeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->num());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipstrongtypeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipstrongtypeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipstrongtypeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipstrongtypeDesc::MergeFrom(const equipstrongtypeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipstrongtypeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipstrongtypeDesc::CopyFrom(const equipstrongtypeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipstrongtypeDesc::IsInitialized() const {

  return true;
}

void equipstrongtypeDesc::Swap(equipstrongtypeDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipstrongtypeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipstrongtypeDesc_descriptor_;
  metadata.reflection = equipstrongtypeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipstrong::kIdFieldNumber;
const int equipstrong::kPositionFieldNumber;
const int equipstrong::kWearQualityFieldNumber;
const int equipstrong::kSrtongUpFieldNumber;
const int equipstrong::kTypeFieldNumber;
#endif  // !_MSC_VER

equipstrong::equipstrong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipstrong::InitAsDefaultInstance() {
}

equipstrong::equipstrong(const equipstrong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipstrong::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  wearquality_ = 0;
  srtongup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipstrong::~equipstrong() {
  SharedDtor();
}

void equipstrong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipstrong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipstrong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipstrong_descriptor_;
}

const equipstrong& equipstrong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipstrong* equipstrong::default_instance_ = NULL;

equipstrong* equipstrong::New() const {
  return new equipstrong;
}

void equipstrong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    position_ = 0;
    wearquality_ = 0;
    srtongup_ = 0;
  }
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipstrong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional int32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wearQuality;
        break;
      }

      // optional int32 wearQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wearquality_)));
          set_has_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_srtongUp;
        break;
      }

      // optional int32 srtongUp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srtongUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srtongup_)));
          set_has_srtongup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }

      // repeated .proto_ff.equipstrongtypeDesc type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipstrong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wearquality(), output);
  }

  // optional int32 srtongUp = 4;
  if (has_srtongup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->srtongup(), output);
  }

  // repeated .proto_ff.equipstrongtypeDesc type = 5;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipstrong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wearquality(), target);
  }

  // optional int32 srtongUp = 4;
  if (has_srtongup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->srtongup(), target);
  }

  // repeated .proto_ff.equipstrongtypeDesc type = 5;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipstrong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 wearQuality = 3;
    if (has_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wearquality());
    }

    // optional int32 srtongUp = 4;
    if (has_srtongup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srtongup());
    }

  }
  // repeated .proto_ff.equipstrongtypeDesc type = 5;
  total_size += 1 * this->type_size();
  for (int i = 0; i < this->type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->type(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipstrong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipstrong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipstrong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipstrong::MergeFrom(const equipstrong& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_wearquality()) {
      set_wearquality(from.wearquality());
    }
    if (from.has_srtongup()) {
      set_srtongup(from.srtongup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipstrong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipstrong::CopyFrom(const equipstrong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipstrong::IsInitialized() const {

  return true;
}

void equipstrong::Swap(equipstrong* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(wearquality_, other->wearquality_);
    std::swap(srtongup_, other->srtongup_);
    type_.Swap(&other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipstrong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipstrong_descriptor_;
  metadata.reflection = equipstrong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipstrong::kEquipstrongListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipstrong::Sheet_equipstrong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipstrong::InitAsDefaultInstance() {
}

Sheet_equipstrong::Sheet_equipstrong(const Sheet_equipstrong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipstrong::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipstrong::~Sheet_equipstrong() {
  SharedDtor();
}

void Sheet_equipstrong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipstrong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipstrong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipstrong_descriptor_;
}

const Sheet_equipstrong& Sheet_equipstrong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipstrong* Sheet_equipstrong::default_instance_ = NULL;

Sheet_equipstrong* Sheet_equipstrong::New() const {
  return new Sheet_equipstrong;
}

void Sheet_equipstrong::Clear() {
  equipstrong_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipstrong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipstrong equipstrong_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipstrong_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipstrong_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipstrong_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipstrong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipstrong equipstrong_List = 1;
  for (int i = 0; i < this->equipstrong_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipstrong_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipstrong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipstrong equipstrong_List = 1;
  for (int i = 0; i < this->equipstrong_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipstrong_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipstrong::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipstrong equipstrong_List = 1;
  total_size += 1 * this->equipstrong_list_size();
  for (int i = 0; i < this->equipstrong_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipstrong_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipstrong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipstrong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipstrong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipstrong::MergeFrom(const Sheet_equipstrong& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipstrong_list_.MergeFrom(from.equipstrong_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipstrong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipstrong::CopyFrom(const Sheet_equipstrong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipstrong::IsInitialized() const {

  return true;
}

void Sheet_equipstrong::Swap(Sheet_equipstrong* other) {
  if (other != this) {
    equipstrong_list_.Swap(&other->equipstrong_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipstrong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipstrong_descriptor_;
  metadata.reflection = Sheet_equipstrong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipgemfinedateDesc::kNumFieldNumber;
const int equipgemfinedateDesc::kIdFieldNumber;
#endif  // !_MSC_VER

equipgemfinedateDesc::equipgemfinedateDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipgemfinedateDesc::InitAsDefaultInstance() {
}

equipgemfinedateDesc::equipgemfinedateDesc(const equipgemfinedateDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipgemfinedateDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipgemfinedateDesc::~equipgemfinedateDesc() {
  SharedDtor();
}

void equipgemfinedateDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipgemfinedateDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipgemfinedateDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipgemfinedateDesc_descriptor_;
}

const equipgemfinedateDesc& equipgemfinedateDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipgemfinedateDesc* equipgemfinedateDesc::default_instance_ = NULL;

equipgemfinedateDesc* equipgemfinedateDesc::New() const {
  return new equipgemfinedateDesc;
}

void equipgemfinedateDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipgemfinedateDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Id;
        break;
      }

      // optional int64 Id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipgemfinedateDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 Id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipgemfinedateDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 Id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipgemfinedateDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 Id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipgemfinedateDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipgemfinedateDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipgemfinedateDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipgemfinedateDesc::MergeFrom(const equipgemfinedateDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipgemfinedateDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipgemfinedateDesc::CopyFrom(const equipgemfinedateDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipgemfinedateDesc::IsInitialized() const {

  return true;
}

void equipgemfinedateDesc::Swap(equipgemfinedateDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipgemfinedateDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipgemfinedateDesc_descriptor_;
  metadata.reflection = equipgemfinedateDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipgemfine::kIdFieldNumber;
const int equipgemfine::kPositionFieldNumber;
const int equipgemfine::kWearQualityFieldNumber;
const int equipgemfine::kGemUpFieldNumber;
const int equipgemfine::kGemNumberFieldNumber;
const int equipgemfine::kDateFieldNumber;
#endif  // !_MSC_VER

equipgemfine::equipgemfine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipgemfine::InitAsDefaultInstance() {
}

equipgemfine::equipgemfine(const equipgemfine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipgemfine::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  wearquality_ = 0;
  gemup_ = 0;
  gemnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipgemfine::~equipgemfine() {
  SharedDtor();
}

void equipgemfine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipgemfine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipgemfine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipgemfine_descriptor_;
}

const equipgemfine& equipgemfine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipgemfine* equipgemfine::default_instance_ = NULL;

equipgemfine* equipgemfine::New() const {
  return new equipgemfine;
}

void equipgemfine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    position_ = 0;
    wearquality_ = 0;
    gemup_ = 0;
    gemnumber_ = 0;
  }
  date_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipgemfine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional int32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wearQuality;
        break;
      }

      // optional int32 wearQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wearquality_)));
          set_has_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gemUp;
        break;
      }

      // optional int32 gemUp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gemUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemup_)));
          set_has_gemup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gemNumber;
        break;
      }

      // optional int32 gemNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gemNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemnumber_)));
          set_has_gemnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_date;
        break;
      }

      // repeated .proto_ff.equipgemfinedateDesc date = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_date;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipgemfine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wearquality(), output);
  }

  // optional int32 gemUp = 4;
  if (has_gemup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gemup(), output);
  }

  // optional int32 gemNumber = 5;
  if (has_gemnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gemnumber(), output);
  }

  // repeated .proto_ff.equipgemfinedateDesc date = 6;
  for (int i = 0; i < this->date_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->date(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipgemfine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wearquality(), target);
  }

  // optional int32 gemUp = 4;
  if (has_gemup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gemup(), target);
  }

  // optional int32 gemNumber = 5;
  if (has_gemnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gemnumber(), target);
  }

  // repeated .proto_ff.equipgemfinedateDesc date = 6;
  for (int i = 0; i < this->date_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->date(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipgemfine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 wearQuality = 3;
    if (has_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wearquality());
    }

    // optional int32 gemUp = 4;
    if (has_gemup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemup());
    }

    // optional int32 gemNumber = 5;
    if (has_gemnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemnumber());
    }

  }
  // repeated .proto_ff.equipgemfinedateDesc date = 6;
  total_size += 1 * this->date_size();
  for (int i = 0; i < this->date_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->date(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipgemfine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipgemfine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipgemfine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipgemfine::MergeFrom(const equipgemfine& from) {
  GOOGLE_CHECK_NE(&from, this);
  date_.MergeFrom(from.date_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_wearquality()) {
      set_wearquality(from.wearquality());
    }
    if (from.has_gemup()) {
      set_gemup(from.gemup());
    }
    if (from.has_gemnumber()) {
      set_gemnumber(from.gemnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipgemfine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipgemfine::CopyFrom(const equipgemfine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipgemfine::IsInitialized() const {

  return true;
}

void equipgemfine::Swap(equipgemfine* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(wearquality_, other->wearquality_);
    std::swap(gemup_, other->gemup_);
    std::swap(gemnumber_, other->gemnumber_);
    date_.Swap(&other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipgemfine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipgemfine_descriptor_;
  metadata.reflection = equipgemfine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipgemfine::kEquipgemfineListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipgemfine::Sheet_equipgemfine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipgemfine::InitAsDefaultInstance() {
}

Sheet_equipgemfine::Sheet_equipgemfine(const Sheet_equipgemfine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipgemfine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipgemfine::~Sheet_equipgemfine() {
  SharedDtor();
}

void Sheet_equipgemfine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipgemfine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipgemfine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipgemfine_descriptor_;
}

const Sheet_equipgemfine& Sheet_equipgemfine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipgemfine* Sheet_equipgemfine::default_instance_ = NULL;

Sheet_equipgemfine* Sheet_equipgemfine::New() const {
  return new Sheet_equipgemfine;
}

void Sheet_equipgemfine::Clear() {
  equipgemfine_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipgemfine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipgemfine equipgemfine_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipgemfine_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipgemfine_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipgemfine_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipgemfine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipgemfine equipgemfine_List = 1;
  for (int i = 0; i < this->equipgemfine_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipgemfine_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipgemfine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipgemfine equipgemfine_List = 1;
  for (int i = 0; i < this->equipgemfine_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipgemfine_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipgemfine::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipgemfine equipgemfine_List = 1;
  total_size += 1 * this->equipgemfine_list_size();
  for (int i = 0; i < this->equipgemfine_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipgemfine_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipgemfine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipgemfine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipgemfine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipgemfine::MergeFrom(const Sheet_equipgemfine& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipgemfine_list_.MergeFrom(from.equipgemfine_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipgemfine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipgemfine::CopyFrom(const Sheet_equipgemfine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipgemfine::IsInitialized() const {

  return true;
}

void Sheet_equipgemfine::Swap(Sheet_equipgemfine* other) {
  if (other != this) {
    equipgemfine_list_.Swap(&other->equipgemfine_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipgemfine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipgemfine_descriptor_;
  metadata.reflection = Sheet_equipgemfine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipgem::kPositionFieldNumber;
const int equipgem::kGemTypeFieldNumber;
const int equipgem::kVipUnlockFieldNumber;
const int equipgem::kGemUnlockFieldNumber;
#endif  // !_MSC_VER

equipgem::equipgem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipgem::InitAsDefaultInstance() {
}

equipgem::equipgem(const equipgem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipgem::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  gemtype_ = 0;
  vipunlock_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipgem::~equipgem() {
  SharedDtor();
}

void equipgem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipgem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipgem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipgem_descriptor_;
}

const equipgem& equipgem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipgem* equipgem::default_instance_ = NULL;

equipgem* equipgem::New() const {
  return new equipgem;
}

void equipgem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    gemtype_ = 0;
    vipunlock_ = 0;
  }
  gemunlock_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipgem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gemType;
        break;
      }

      // optional int32 gemType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemtype_)));
          set_has_gemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_VipUnlock;
        break;
      }

      // optional int32 VipUnlock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VipUnlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipunlock_)));
          set_has_vipunlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gemUnlock;
        break;
      }

      // repeated int32 gemUnlock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gemUnlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_gemunlock())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gemunlock())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gemUnlock;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipgem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position(), output);
  }

  // optional int32 gemType = 2;
  if (has_gemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gemtype(), output);
  }

  // optional int32 VipUnlock = 3;
  if (has_vipunlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vipunlock(), output);
  }

  // repeated int32 gemUnlock = 4;
  for (int i = 0; i < this->gemunlock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->gemunlock(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipgem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position(), target);
  }

  // optional int32 gemType = 2;
  if (has_gemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gemtype(), target);
  }

  // optional int32 VipUnlock = 3;
  if (has_vipunlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vipunlock(), target);
  }

  // repeated int32 gemUnlock = 4;
  for (int i = 0; i < this->gemunlock_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->gemunlock(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipgem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 gemType = 2;
    if (has_gemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemtype());
    }

    // optional int32 VipUnlock = 3;
    if (has_vipunlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipunlock());
    }

  }
  // repeated int32 gemUnlock = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->gemunlock_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gemunlock(i));
    }
    total_size += 1 * this->gemunlock_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipgem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipgem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipgem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipgem::MergeFrom(const equipgem& from) {
  GOOGLE_CHECK_NE(&from, this);
  gemunlock_.MergeFrom(from.gemunlock_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_gemtype()) {
      set_gemtype(from.gemtype());
    }
    if (from.has_vipunlock()) {
      set_vipunlock(from.vipunlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipgem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipgem::CopyFrom(const equipgem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipgem::IsInitialized() const {

  return true;
}

void equipgem::Swap(equipgem* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(gemtype_, other->gemtype_);
    std::swap(vipunlock_, other->vipunlock_);
    gemunlock_.Swap(&other->gemunlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipgem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipgem_descriptor_;
  metadata.reflection = equipgem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipgem::kEquipgemListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipgem::Sheet_equipgem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipgem::InitAsDefaultInstance() {
}

Sheet_equipgem::Sheet_equipgem(const Sheet_equipgem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipgem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipgem::~Sheet_equipgem() {
  SharedDtor();
}

void Sheet_equipgem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipgem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipgem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipgem_descriptor_;
}

const Sheet_equipgem& Sheet_equipgem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipgem* Sheet_equipgem::default_instance_ = NULL;

Sheet_equipgem* Sheet_equipgem::New() const {
  return new Sheet_equipgem;
}

void Sheet_equipgem::Clear() {
  equipgem_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipgem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipgem equipgem_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipgem_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipgem_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipgem_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipgem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipgem equipgem_List = 1;
  for (int i = 0; i < this->equipgem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipgem_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipgem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipgem equipgem_List = 1;
  for (int i = 0; i < this->equipgem_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipgem_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipgem::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipgem equipgem_List = 1;
  total_size += 1 * this->equipgem_list_size();
  for (int i = 0; i < this->equipgem_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipgem_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipgem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipgem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipgem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipgem::MergeFrom(const Sheet_equipgem& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipgem_list_.MergeFrom(from.equipgem_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipgem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipgem::CopyFrom(const Sheet_equipgem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipgem::IsInitialized() const {

  return true;
}

void Sheet_equipgem::Swap(Sheet_equipgem* other) {
  if (other != this) {
    equipgem_list_.Swap(&other->equipgem_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipgem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipgem_descriptor_;
  metadata.reflection = Sheet_equipgem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipatt::kIdFieldNumber;
const int equipatt::kIdTypeFieldNumber;
const int equipatt::kIdNumFieldNumber;
const int equipatt::kAttFieldNumber;
#endif  // !_MSC_VER

equipatt::equipatt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipatt::InitAsDefaultInstance() {
}

equipatt::equipatt(const equipatt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipatt::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  idtype_ = 0;
  idnum_ = 0;
  att_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipatt::~equipatt() {
  SharedDtor();
}

void equipatt::SharedDtor() {
  if (att_ != &::google::protobuf::internal::kEmptyString) {
    delete att_;
  }
  if (this != default_instance_) {
  }
}

void equipatt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipatt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipatt_descriptor_;
}

const equipatt& equipatt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipatt* equipatt::default_instance_ = NULL;

equipatt* equipatt::New() const {
  return new equipatt;
}

void equipatt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    idtype_ = 0;
    idnum_ = 0;
    if (has_att()) {
      if (att_ != &::google::protobuf::internal::kEmptyString) {
        att_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipatt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idType;
        break;
      }

      // optional int32 idType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idtype_)));
          set_has_idtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_idNum;
        break;
      }

      // optional int32 idNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idnum_)));
          set_has_idnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_att;
        break;
      }

      // optional string att = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_att()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->att().data(), this->att().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipatt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 idType = 2;
  if (has_idtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->idtype(), output);
  }

  // optional int32 idNum = 3;
  if (has_idnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->idnum(), output);
  }

  // optional string att = 4;
  if (has_att()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->att().data(), this->att().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->att(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipatt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 idType = 2;
  if (has_idtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->idtype(), target);
  }

  // optional int32 idNum = 3;
  if (has_idnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->idnum(), target);
  }

  // optional string att = 4;
  if (has_att()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->att().data(), this->att().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->att(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipatt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 idType = 2;
    if (has_idtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idtype());
    }

    // optional int32 idNum = 3;
    if (has_idnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idnum());
    }

    // optional string att = 4;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->att());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipatt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipatt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipatt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipatt::MergeFrom(const equipatt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_idtype()) {
      set_idtype(from.idtype());
    }
    if (from.has_idnum()) {
      set_idnum(from.idnum());
    }
    if (from.has_att()) {
      set_att(from.att());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipatt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipatt::CopyFrom(const equipatt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipatt::IsInitialized() const {

  return true;
}

void equipatt::Swap(equipatt* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(idtype_, other->idtype_);
    std::swap(idnum_, other->idnum_);
    std::swap(att_, other->att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipatt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipatt_descriptor_;
  metadata.reflection = equipatt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipatt::kEquipattListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipatt::Sheet_equipatt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipatt::InitAsDefaultInstance() {
}

Sheet_equipatt::Sheet_equipatt(const Sheet_equipatt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipatt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipatt::~Sheet_equipatt() {
  SharedDtor();
}

void Sheet_equipatt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipatt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipatt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipatt_descriptor_;
}

const Sheet_equipatt& Sheet_equipatt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipatt* Sheet_equipatt::default_instance_ = NULL;

Sheet_equipatt* Sheet_equipatt::New() const {
  return new Sheet_equipatt;
}

void Sheet_equipatt::Clear() {
  equipatt_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipatt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipatt equipatt_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipatt_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipatt_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipatt_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipatt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipatt equipatt_List = 1;
  for (int i = 0; i < this->equipatt_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipatt_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipatt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipatt equipatt_List = 1;
  for (int i = 0; i < this->equipatt_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipatt_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipatt::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipatt equipatt_List = 1;
  total_size += 1 * this->equipatt_list_size();
  for (int i = 0; i < this->equipatt_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipatt_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipatt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipatt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipatt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipatt::MergeFrom(const Sheet_equipatt& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipatt_list_.MergeFrom(from.equipatt_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipatt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipatt::CopyFrom(const Sheet_equipatt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipatt::IsInitialized() const {

  return true;
}

void Sheet_equipatt::Swap(Sheet_equipatt* other) {
  if (other != this) {
    equipatt_list_.Swap(&other->equipatt_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipatt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipatt_descriptor_;
  metadata.reflection = Sheet_equipatt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipsuitattributeDesc::kSctivationFieldNumber;
#endif  // !_MSC_VER

equipsuitattributeDesc::equipsuitattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipsuitattributeDesc::InitAsDefaultInstance() {
}

equipsuitattributeDesc::equipsuitattributeDesc(const equipsuitattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipsuitattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  sctivation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipsuitattributeDesc::~equipsuitattributeDesc() {
  SharedDtor();
}

void equipsuitattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipsuitattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipsuitattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipsuitattributeDesc_descriptor_;
}

const equipsuitattributeDesc& equipsuitattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipsuitattributeDesc* equipsuitattributeDesc::default_instance_ = NULL;

equipsuitattributeDesc* equipsuitattributeDesc::New() const {
  return new equipsuitattributeDesc;
}

void equipsuitattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sctivation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipsuitattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sctivation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sctivation_)));
          set_has_sctivation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipsuitattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sctivation = 1;
  if (has_sctivation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sctivation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipsuitattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sctivation = 1;
  if (has_sctivation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sctivation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipsuitattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sctivation = 1;
    if (has_sctivation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sctivation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipsuitattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipsuitattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipsuitattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipsuitattributeDesc::MergeFrom(const equipsuitattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sctivation()) {
      set_sctivation(from.sctivation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipsuitattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipsuitattributeDesc::CopyFrom(const equipsuitattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipsuitattributeDesc::IsInitialized() const {

  return true;
}

void equipsuitattributeDesc::Swap(equipsuitattributeDesc* other) {
  if (other != this) {
    std::swap(sctivation_, other->sctivation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipsuitattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipsuitattributeDesc_descriptor_;
  metadata.reflection = equipsuitattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipsuit::kIdFieldNumber;
const int equipsuit::kProfessionFieldNumber;
const int equipsuit::kSuitLvFieldNumber;
const int equipsuit::kLevelFieldNumber;
const int equipsuit::kColourFieldNumber;
const int equipsuit::kAfterNameFieldNumber;
const int equipsuit::kSuiteValueFieldNumber;
const int equipsuit::kAttributeFieldNumber;
const int equipsuit::kPositionFieldNumber;
#endif  // !_MSC_VER

equipsuit::equipsuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipsuit::InitAsDefaultInstance() {
}

equipsuit::equipsuit(const equipsuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipsuit::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suitlv_ = 0;
  level_ = 0;
  colour_ = 0;
  aftername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suitevalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipsuit::~equipsuit() {
  SharedDtor();
}

void equipsuit::SharedDtor() {
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    delete profession_;
  }
  if (aftername_ != &::google::protobuf::internal::kEmptyString) {
    delete aftername_;
  }
  if (this != default_instance_) {
  }
}

void equipsuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipsuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipsuit_descriptor_;
}

const equipsuit& equipsuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipsuit* equipsuit::default_instance_ = NULL;

equipsuit* equipsuit::New() const {
  return new equipsuit;
}

void equipsuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_profession()) {
      if (profession_ != &::google::protobuf::internal::kEmptyString) {
        profession_->clear();
      }
    }
    suitlv_ = 0;
    level_ = 0;
    colour_ = 0;
    if (has_aftername()) {
      if (aftername_ != &::google::protobuf::internal::kEmptyString) {
        aftername_->clear();
      }
    }
    suitevalue_ = 0;
  }
  attribute_.Clear();
  position_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipsuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_profession;
        break;
      }

      // optional string profession = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profession()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->profession().data(), this->profession().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_suitLv;
        break;
      }

      // optional int32 suitLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suitLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suitlv_)));
          set_has_suitlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_colour;
        break;
      }

      // optional int32 colour = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colour_)));
          set_has_colour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_afterName;
        break;
      }

      // optional string afterName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_afterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aftername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aftername().data(), this->aftername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_suiteValue;
        break;
      }

      // optional int32 suiteValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suiteValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suitevalue_)));
          set_has_suitevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.equipsuitattributeDesc attribute = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attribute;
        if (input->ExpectTag(74)) goto parse_position;
        break;
      }

      // repeated string position = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->position(this->position_size() - 1).data(),
            this->position(this->position_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_position;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipsuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string profession = 2;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->profession(), output);
  }

  // optional int32 suitLv = 3;
  if (has_suitlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->suitlv(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 colour = 5;
  if (has_colour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->colour(), output);
  }

  // optional string afterName = 6;
  if (has_aftername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aftername().data(), this->aftername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->aftername(), output);
  }

  // optional int32 suiteValue = 7;
  if (has_suitevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->suitevalue(), output);
  }

  // repeated .proto_ff.equipsuitattributeDesc attribute = 8;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attribute(i), output);
  }

  // repeated string position = 9;
  for (int i = 0; i < this->position_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->position(i).data(), this->position(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->position(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipsuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string profession = 2;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->profession(), target);
  }

  // optional int32 suitLv = 3;
  if (has_suitlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->suitlv(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 colour = 5;
  if (has_colour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->colour(), target);
  }

  // optional string afterName = 6;
  if (has_aftername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aftername().data(), this->aftername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->aftername(), target);
  }

  // optional int32 suiteValue = 7;
  if (has_suitevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->suitevalue(), target);
  }

  // repeated .proto_ff.equipsuitattributeDesc attribute = 8;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attribute(i), target);
  }

  // repeated string position = 9;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position(i).data(), this->position(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->position(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipsuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string profession = 2;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profession());
    }

    // optional int32 suitLv = 3;
    if (has_suitlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suitlv());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 colour = 5;
    if (has_colour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colour());
    }

    // optional string afterName = 6;
    if (has_aftername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aftername());
    }

    // optional int32 suiteValue = 7;
    if (has_suitevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suitevalue());
    }

  }
  // repeated .proto_ff.equipsuitattributeDesc attribute = 8;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  // repeated string position = 9;
  total_size += 1 * this->position_size();
  for (int i = 0; i < this->position_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->position(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipsuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipsuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipsuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipsuit::MergeFrom(const equipsuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  position_.MergeFrom(from.position_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_suitlv()) {
      set_suitlv(from.suitlv());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_colour()) {
      set_colour(from.colour());
    }
    if (from.has_aftername()) {
      set_aftername(from.aftername());
    }
    if (from.has_suitevalue()) {
      set_suitevalue(from.suitevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipsuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipsuit::CopyFrom(const equipsuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipsuit::IsInitialized() const {

  return true;
}

void equipsuit::Swap(equipsuit* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(profession_, other->profession_);
    std::swap(suitlv_, other->suitlv_);
    std::swap(level_, other->level_);
    std::swap(colour_, other->colour_);
    std::swap(aftername_, other->aftername_);
    std::swap(suitevalue_, other->suitevalue_);
    attribute_.Swap(&other->attribute_);
    position_.Swap(&other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipsuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipsuit_descriptor_;
  metadata.reflection = equipsuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipsuit::kEquipsuitListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipsuit::Sheet_equipsuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipsuit::InitAsDefaultInstance() {
}

Sheet_equipsuit::Sheet_equipsuit(const Sheet_equipsuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipsuit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipsuit::~Sheet_equipsuit() {
  SharedDtor();
}

void Sheet_equipsuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipsuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipsuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipsuit_descriptor_;
}

const Sheet_equipsuit& Sheet_equipsuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipsuit* Sheet_equipsuit::default_instance_ = NULL;

Sheet_equipsuit* Sheet_equipsuit::New() const {
  return new Sheet_equipsuit;
}

void Sheet_equipsuit::Clear() {
  equipsuit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipsuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipsuit equipsuit_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipsuit_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipsuit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipsuit_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipsuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipsuit equipsuit_List = 1;
  for (int i = 0; i < this->equipsuit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipsuit_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipsuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipsuit equipsuit_List = 1;
  for (int i = 0; i < this->equipsuit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipsuit_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipsuit::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipsuit equipsuit_List = 1;
  total_size += 1 * this->equipsuit_list_size();
  for (int i = 0; i < this->equipsuit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipsuit_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipsuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipsuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipsuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipsuit::MergeFrom(const Sheet_equipsuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipsuit_list_.MergeFrom(from.equipsuit_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipsuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipsuit::CopyFrom(const Sheet_equipsuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipsuit::IsInitialized() const {

  return true;
}

void Sheet_equipsuit::Swap(Sheet_equipsuit* other) {
  if (other != this) {
    equipsuit_list_.Swap(&other->equipsuit_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipsuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipsuit_descriptor_;
  metadata.reflection = Sheet_equipsuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipclear::kIdFieldNumber;
const int equipclear::kPositionFieldNumber;
const int equipclear::kLvFieldNumber;
const int equipclear::kValueFieldNumber;
const int equipclear::kTeamIdFieldNumber;
#endif  // !_MSC_VER

equipclear::equipclear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipclear::InitAsDefaultInstance() {
}

equipclear::equipclear(const equipclear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipclear::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  lv_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipclear::~equipclear() {
  SharedDtor();
}

void equipclear::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void equipclear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipclear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipclear_descriptor_;
}

const equipclear& equipclear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipclear* equipclear::default_instance_ = NULL;

equipclear* equipclear::New() const {
  return new equipclear;
}

void equipclear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    position_ = 0;
    lv_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  teamid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipclear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional int32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Lv;
        break;
      }

      // optional int32 Lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional string value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_teamId;
        break;
      }

      // repeated int64 teamId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_teamid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_teamid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_teamId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipclear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  // optional int32 Lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->value(), output);
  }

  // repeated int64 teamId = 5;
  for (int i = 0; i < this->teamid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->teamid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipclear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  // optional int32 Lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  // repeated int64 teamId = 5;
  for (int i = 0; i < this->teamid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->teamid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipclear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 Lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional string value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  // repeated int64 teamId = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->teamid(i));
    }
    total_size += 1 * this->teamid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipclear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipclear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipclear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipclear::MergeFrom(const equipclear& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamid_.MergeFrom(from.teamid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipclear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipclear::CopyFrom(const equipclear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipclear::IsInitialized() const {

  return true;
}

void equipclear::Swap(equipclear* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(lv_, other->lv_);
    std::swap(value_, other->value_);
    teamid_.Swap(&other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipclear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipclear_descriptor_;
  metadata.reflection = equipclear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipclear::kEquipclearListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipclear::Sheet_equipclear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipclear::InitAsDefaultInstance() {
}

Sheet_equipclear::Sheet_equipclear(const Sheet_equipclear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipclear::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipclear::~Sheet_equipclear() {
  SharedDtor();
}

void Sheet_equipclear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipclear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipclear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipclear_descriptor_;
}

const Sheet_equipclear& Sheet_equipclear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipclear* Sheet_equipclear::default_instance_ = NULL;

Sheet_equipclear* Sheet_equipclear::New() const {
  return new Sheet_equipclear;
}

void Sheet_equipclear::Clear() {
  equipclear_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipclear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipclear equipclear_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipclear_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipclear_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipclear_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipclear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipclear equipclear_List = 1;
  for (int i = 0; i < this->equipclear_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipclear_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipclear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipclear equipclear_List = 1;
  for (int i = 0; i < this->equipclear_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipclear_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipclear::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipclear equipclear_List = 1;
  total_size += 1 * this->equipclear_list_size();
  for (int i = 0; i < this->equipclear_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipclear_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipclear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipclear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipclear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipclear::MergeFrom(const Sheet_equipclear& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipclear_list_.MergeFrom(from.equipclear_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipclear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipclear::CopyFrom(const Sheet_equipclear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipclear::IsInitialized() const {

  return true;
}

void Sheet_equipclear::Swap(Sheet_equipclear* other) {
  if (other != this) {
    equipclear_list_.Swap(&other->equipclear_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipclear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipclear_descriptor_;
  metadata.reflection = Sheet_equipclear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipstrongexp::kLvFieldNumber;
const int equipstrongexp::kGoldFieldNumber;
const int equipstrongexp::kExpFieldNumber;
const int equipstrongexp::kExpUpFieldNumber;
#endif  // !_MSC_VER

equipstrongexp::equipstrongexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipstrongexp::InitAsDefaultInstance() {
}

equipstrongexp::equipstrongexp(const equipstrongexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipstrongexp::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  gold_ = 0;
  exp_ = 0;
  expup_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipstrongexp::~equipstrongexp() {
  SharedDtor();
}

void equipstrongexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipstrongexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipstrongexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipstrongexp_descriptor_;
}

const equipstrongexp& equipstrongexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipstrongexp* equipstrongexp::default_instance_ = NULL;

equipstrongexp* equipstrongexp::New() const {
  return new equipstrongexp;
}

void equipstrongexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    gold_ = 0;
    exp_ = 0;
    expup_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipstrongexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int32 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expUp;
        break;
      }

      // optional int64 expUp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expup_)));
          set_has_expup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipstrongexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int64 expUp = 4;
  if (has_expup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipstrongexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // optional int64 expUp = 4;
  if (has_expup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipstrongexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int64 expUp = 4;
    if (has_expup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipstrongexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipstrongexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipstrongexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipstrongexp::MergeFrom(const equipstrongexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_expup()) {
      set_expup(from.expup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipstrongexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipstrongexp::CopyFrom(const equipstrongexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipstrongexp::IsInitialized() const {

  return true;
}

void equipstrongexp::Swap(equipstrongexp* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(gold_, other->gold_);
    std::swap(exp_, other->exp_);
    std::swap(expup_, other->expup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipstrongexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipstrongexp_descriptor_;
  metadata.reflection = equipstrongexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipstrongexp::kEquipstrongexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipstrongexp::Sheet_equipstrongexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipstrongexp::InitAsDefaultInstance() {
}

Sheet_equipstrongexp::Sheet_equipstrongexp(const Sheet_equipstrongexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipstrongexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipstrongexp::~Sheet_equipstrongexp() {
  SharedDtor();
}

void Sheet_equipstrongexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipstrongexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipstrongexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipstrongexp_descriptor_;
}

const Sheet_equipstrongexp& Sheet_equipstrongexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipstrongexp* Sheet_equipstrongexp::default_instance_ = NULL;

Sheet_equipstrongexp* Sheet_equipstrongexp::New() const {
  return new Sheet_equipstrongexp;
}

void Sheet_equipstrongexp::Clear() {
  equipstrongexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipstrongexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipstrongexp equipstrongexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipstrongexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipstrongexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipstrongexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipstrongexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipstrongexp equipstrongexp_List = 1;
  for (int i = 0; i < this->equipstrongexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipstrongexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipstrongexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipstrongexp equipstrongexp_List = 1;
  for (int i = 0; i < this->equipstrongexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipstrongexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipstrongexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipstrongexp equipstrongexp_List = 1;
  total_size += 1 * this->equipstrongexp_list_size();
  for (int i = 0; i < this->equipstrongexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipstrongexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipstrongexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipstrongexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipstrongexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipstrongexp::MergeFrom(const Sheet_equipstrongexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipstrongexp_list_.MergeFrom(from.equipstrongexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipstrongexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipstrongexp::CopyFrom(const Sheet_equipstrongexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipstrongexp::IsInitialized() const {

  return true;
}

void Sheet_equipstrongexp::Swap(Sheet_equipstrongexp* other) {
  if (other != this) {
    equipstrongexp_list_.Swap(&other->equipstrongexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipstrongexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipstrongexp_descriptor_;
  metadata.reflection = Sheet_equipstrongexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipgemfineexp::kLvFieldNumber;
const int equipgemfineexp::kExpUpFieldNumber;
#endif  // !_MSC_VER

equipgemfineexp::equipgemfineexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipgemfineexp::InitAsDefaultInstance() {
}

equipgemfineexp::equipgemfineexp(const equipgemfineexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipgemfineexp::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  expup_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipgemfineexp::~equipgemfineexp() {
  SharedDtor();
}

void equipgemfineexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipgemfineexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipgemfineexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipgemfineexp_descriptor_;
}

const equipgemfineexp& equipgemfineexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipgemfineexp* equipgemfineexp::default_instance_ = NULL;

equipgemfineexp* equipgemfineexp::New() const {
  return new equipgemfineexp;
}

void equipgemfineexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    expup_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipgemfineexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expUp;
        break;
      }

      // optional int64 expUp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expup_)));
          set_has_expup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipgemfineexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int64 expUp = 2;
  if (has_expup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->expup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipgemfineexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int64 expUp = 2;
  if (has_expup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->expup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipgemfineexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int64 expUp = 2;
    if (has_expup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipgemfineexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipgemfineexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipgemfineexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipgemfineexp::MergeFrom(const equipgemfineexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_expup()) {
      set_expup(from.expup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipgemfineexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipgemfineexp::CopyFrom(const equipgemfineexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipgemfineexp::IsInitialized() const {

  return true;
}

void equipgemfineexp::Swap(equipgemfineexp* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(expup_, other->expup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipgemfineexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipgemfineexp_descriptor_;
  metadata.reflection = equipgemfineexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipgemfineexp::kEquipgemfineexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipgemfineexp::Sheet_equipgemfineexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipgemfineexp::InitAsDefaultInstance() {
}

Sheet_equipgemfineexp::Sheet_equipgemfineexp(const Sheet_equipgemfineexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipgemfineexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipgemfineexp::~Sheet_equipgemfineexp() {
  SharedDtor();
}

void Sheet_equipgemfineexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipgemfineexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipgemfineexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipgemfineexp_descriptor_;
}

const Sheet_equipgemfineexp& Sheet_equipgemfineexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipgemfineexp* Sheet_equipgemfineexp::default_instance_ = NULL;

Sheet_equipgemfineexp* Sheet_equipgemfineexp::New() const {
  return new Sheet_equipgemfineexp;
}

void Sheet_equipgemfineexp::Clear() {
  equipgemfineexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipgemfineexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipgemfineexp equipgemfineexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipgemfineexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipgemfineexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipgemfineexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipgemfineexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipgemfineexp equipgemfineexp_List = 1;
  for (int i = 0; i < this->equipgemfineexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipgemfineexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipgemfineexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipgemfineexp equipgemfineexp_List = 1;
  for (int i = 0; i < this->equipgemfineexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipgemfineexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipgemfineexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipgemfineexp equipgemfineexp_List = 1;
  total_size += 1 * this->equipgemfineexp_list_size();
  for (int i = 0; i < this->equipgemfineexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipgemfineexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipgemfineexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipgemfineexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipgemfineexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipgemfineexp::MergeFrom(const Sheet_equipgemfineexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipgemfineexp_list_.MergeFrom(from.equipgemfineexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipgemfineexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipgemfineexp::CopyFrom(const Sheet_equipgemfineexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipgemfineexp::IsInitialized() const {

  return true;
}

void Sheet_equipgemfineexp::Swap(Sheet_equipgemfineexp* other) {
  if (other != this) {
    equipgemfineexp_list_.Swap(&other->equipgemfineexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipgemfineexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipgemfineexp_descriptor_;
  metadata.reflection = Sheet_equipgemfineexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipclearteamSectionDesc::kDownFieldNumber;
const int equipclearteamSectionDesc::kPFieldNumber;
const int equipclearteamSectionDesc::kTypeFieldNumber;
const int equipclearteamSectionDesc::kUpFieldNumber;
const int equipclearteamSectionDesc::kGFieldNumber;
#endif  // !_MSC_VER

equipclearteamSectionDesc::equipclearteamSectionDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipclearteamSectionDesc::InitAsDefaultInstance() {
}

equipclearteamSectionDesc::equipclearteamSectionDesc(const equipclearteamSectionDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipclearteamSectionDesc::SharedCtor() {
  _cached_size_ = 0;
  down_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  p_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  up_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  g_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipclearteamSectionDesc::~equipclearteamSectionDesc() {
  SharedDtor();
}

void equipclearteamSectionDesc::SharedDtor() {
  if (down_ != &::google::protobuf::internal::kEmptyString) {
    delete down_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (up_ != &::google::protobuf::internal::kEmptyString) {
    delete up_;
  }
  if (g_ != &::google::protobuf::internal::kEmptyString) {
    delete g_;
  }
  if (this != default_instance_) {
  }
}

void equipclearteamSectionDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipclearteamSectionDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipclearteamSectionDesc_descriptor_;
}

const equipclearteamSectionDesc& equipclearteamSectionDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipclearteamSectionDesc* equipclearteamSectionDesc::default_instance_ = NULL;

equipclearteamSectionDesc* equipclearteamSectionDesc::New() const {
  return new equipclearteamSectionDesc;
}

void equipclearteamSectionDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_down()) {
      if (down_ != &::google::protobuf::internal::kEmptyString) {
        down_->clear();
      }
    }
    p_ = 0;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_up()) {
      if (up_ != &::google::protobuf::internal::kEmptyString) {
        up_->clear();
      }
    }
    if (has_g()) {
      if (g_ != &::google::protobuf::internal::kEmptyString) {
        g_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipclearteamSectionDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string down = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_down()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->down().data(), this->down().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_p;
        break;
      }

      // optional int32 p = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_)));
          set_has_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_up;
        break;
      }

      // optional string up = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_up:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_up()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->up().data(), this->up().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_g;
        break;
      }

      // optional string g = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_g:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_g()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->g().data(), this->g().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipclearteamSectionDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string down = 1;
  if (has_down()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->down().data(), this->down().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->down(), output);
  }

  // optional int32 p = 2;
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->p(), output);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }

  // optional string up = 4;
  if (has_up()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->up().data(), this->up().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->up(), output);
  }

  // optional string g = 5;
  if (has_g()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->g().data(), this->g().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->g(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipclearteamSectionDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string down = 1;
  if (has_down()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->down().data(), this->down().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->down(), target);
  }

  // optional int32 p = 2;
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->p(), target);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional string up = 4;
  if (has_up()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->up().data(), this->up().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->up(), target);
  }

  // optional string g = 5;
  if (has_g()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->g().data(), this->g().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->g(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipclearteamSectionDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string down = 1;
    if (has_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->down());
    }

    // optional int32 p = 2;
    if (has_p()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p());
    }

    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string up = 4;
    if (has_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->up());
    }

    // optional string g = 5;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->g());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipclearteamSectionDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipclearteamSectionDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipclearteamSectionDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipclearteamSectionDesc::MergeFrom(const equipclearteamSectionDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_down()) {
      set_down(from.down());
    }
    if (from.has_p()) {
      set_p(from.p());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_up()) {
      set_up(from.up());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipclearteamSectionDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipclearteamSectionDesc::CopyFrom(const equipclearteamSectionDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipclearteamSectionDesc::IsInitialized() const {

  return true;
}

void equipclearteamSectionDesc::Swap(equipclearteamSectionDesc* other) {
  if (other != this) {
    std::swap(down_, other->down_);
    std::swap(p_, other->p_);
    std::swap(type_, other->type_);
    std::swap(up_, other->up_);
    std::swap(g_, other->g_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipclearteamSectionDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipclearteamSectionDesc_descriptor_;
  metadata.reflection = equipclearteamSectionDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipclearteam::kIdFieldNumber;
const int equipclearteam::kCombatFieldNumber;
const int equipclearteam::kShengIdFieldNumber;
const int equipclearteam::kShengNumFieldNumber;
const int equipclearteam::kConsumeIdFieldNumber;
const int equipclearteam::kConsumeNumFieldNumber;
const int equipclearteam::kLockingIdFieldNumber;
const int equipclearteam::kLockingNumFieldNumber;
const int equipclearteam::kSectionFieldNumber;
#endif  // !_MSC_VER

equipclearteam::equipclearteam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipclearteam::InitAsDefaultInstance() {
}

equipclearteam::equipclearteam(const equipclearteam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipclearteam::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  combat_ = GOOGLE_LONGLONG(0);
  shengid_ = GOOGLE_LONGLONG(0);
  shengnum_ = 0;
  consumeid_ = GOOGLE_LONGLONG(0);
  consumenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lockingid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lockingnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipclearteam::~equipclearteam() {
  SharedDtor();
}

void equipclearteam::SharedDtor() {
  if (consumenum_ != &::google::protobuf::internal::kEmptyString) {
    delete consumenum_;
  }
  if (lockingid_ != &::google::protobuf::internal::kEmptyString) {
    delete lockingid_;
  }
  if (lockingnum_ != &::google::protobuf::internal::kEmptyString) {
    delete lockingnum_;
  }
  if (this != default_instance_) {
  }
}

void equipclearteam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipclearteam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipclearteam_descriptor_;
}

const equipclearteam& equipclearteam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipclearteam* equipclearteam::default_instance_ = NULL;

equipclearteam* equipclearteam::New() const {
  return new equipclearteam;
}

void equipclearteam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    combat_ = GOOGLE_LONGLONG(0);
    shengid_ = GOOGLE_LONGLONG(0);
    shengnum_ = 0;
    consumeid_ = GOOGLE_LONGLONG(0);
    if (has_consumenum()) {
      if (consumenum_ != &::google::protobuf::internal::kEmptyString) {
        consumenum_->clear();
      }
    }
    if (has_lockingid()) {
      if (lockingid_ != &::google::protobuf::internal::kEmptyString) {
        lockingid_->clear();
      }
    }
    if (has_lockingnum()) {
      if (lockingnum_ != &::google::protobuf::internal::kEmptyString) {
        lockingnum_->clear();
      }
    }
  }
  section_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipclearteam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_combat;
        break;
      }

      // optional int64 combat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &combat_)));
          set_has_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shengId;
        break;
      }

      // optional int64 shengId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shengId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shengid_)));
          set_has_shengid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_shengNum;
        break;
      }

      // optional int32 shengNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shengNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shengnum_)));
          set_has_shengnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consumeId;
        break;
      }

      // optional int64 consumeId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consumeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &consumeid_)));
          set_has_consumeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_consumeNum;
        break;
      }

      // optional string consumeNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consumeNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consumenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->consumenum().data(), this->consumenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_lockingId;
        break;
      }

      // optional string lockingId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lockingId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lockingid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lockingid().data(), this->lockingid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lockingNum;
        break;
      }

      // optional string lockingNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lockingNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lockingnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lockingnum().data(), this->lockingnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Section;
        break;
      }

      // repeated .proto_ff.equipclearteamSectionDesc Section = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Section:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_section()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Section;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipclearteam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 combat = 2;
  if (has_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->combat(), output);
  }

  // optional int64 shengId = 3;
  if (has_shengid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->shengid(), output);
  }

  // optional int32 shengNum = 4;
  if (has_shengnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shengnum(), output);
  }

  // optional int64 consumeId = 5;
  if (has_consumeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->consumeid(), output);
  }

  // optional string consumeNum = 6;
  if (has_consumenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->consumenum().data(), this->consumenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->consumenum(), output);
  }

  // optional string lockingId = 7;
  if (has_lockingid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lockingid().data(), this->lockingid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->lockingid(), output);
  }

  // optional string lockingNum = 8;
  if (has_lockingnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lockingnum().data(), this->lockingnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lockingnum(), output);
  }

  // repeated .proto_ff.equipclearteamSectionDesc Section = 9;
  for (int i = 0; i < this->section_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->section(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipclearteam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 combat = 2;
  if (has_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->combat(), target);
  }

  // optional int64 shengId = 3;
  if (has_shengid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->shengid(), target);
  }

  // optional int32 shengNum = 4;
  if (has_shengnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shengnum(), target);
  }

  // optional int64 consumeId = 5;
  if (has_consumeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->consumeid(), target);
  }

  // optional string consumeNum = 6;
  if (has_consumenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->consumenum().data(), this->consumenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->consumenum(), target);
  }

  // optional string lockingId = 7;
  if (has_lockingid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lockingid().data(), this->lockingid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lockingid(), target);
  }

  // optional string lockingNum = 8;
  if (has_lockingnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lockingnum().data(), this->lockingnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lockingnum(), target);
  }

  // repeated .proto_ff.equipclearteamSectionDesc Section = 9;
  for (int i = 0; i < this->section_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->section(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipclearteam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 combat = 2;
    if (has_combat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->combat());
    }

    // optional int64 shengId = 3;
    if (has_shengid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shengid());
    }

    // optional int32 shengNum = 4;
    if (has_shengnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shengnum());
    }

    // optional int64 consumeId = 5;
    if (has_consumeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->consumeid());
    }

    // optional string consumeNum = 6;
    if (has_consumenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->consumenum());
    }

    // optional string lockingId = 7;
    if (has_lockingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lockingid());
    }

    // optional string lockingNum = 8;
    if (has_lockingnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lockingnum());
    }

  }
  // repeated .proto_ff.equipclearteamSectionDesc Section = 9;
  total_size += 1 * this->section_size();
  for (int i = 0; i < this->section_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->section(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipclearteam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipclearteam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipclearteam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipclearteam::MergeFrom(const equipclearteam& from) {
  GOOGLE_CHECK_NE(&from, this);
  section_.MergeFrom(from.section_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_combat()) {
      set_combat(from.combat());
    }
    if (from.has_shengid()) {
      set_shengid(from.shengid());
    }
    if (from.has_shengnum()) {
      set_shengnum(from.shengnum());
    }
    if (from.has_consumeid()) {
      set_consumeid(from.consumeid());
    }
    if (from.has_consumenum()) {
      set_consumenum(from.consumenum());
    }
    if (from.has_lockingid()) {
      set_lockingid(from.lockingid());
    }
    if (from.has_lockingnum()) {
      set_lockingnum(from.lockingnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipclearteam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipclearteam::CopyFrom(const equipclearteam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipclearteam::IsInitialized() const {

  return true;
}

void equipclearteam::Swap(equipclearteam* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(combat_, other->combat_);
    std::swap(shengid_, other->shengid_);
    std::swap(shengnum_, other->shengnum_);
    std::swap(consumeid_, other->consumeid_);
    std::swap(consumenum_, other->consumenum_);
    std::swap(lockingid_, other->lockingid_);
    std::swap(lockingnum_, other->lockingnum_);
    section_.Swap(&other->section_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipclearteam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipclearteam_descriptor_;
  metadata.reflection = equipclearteam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipclearteam::kEquipclearteamListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipclearteam::Sheet_equipclearteam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipclearteam::InitAsDefaultInstance() {
}

Sheet_equipclearteam::Sheet_equipclearteam(const Sheet_equipclearteam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipclearteam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipclearteam::~Sheet_equipclearteam() {
  SharedDtor();
}

void Sheet_equipclearteam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipclearteam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipclearteam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipclearteam_descriptor_;
}

const Sheet_equipclearteam& Sheet_equipclearteam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipclearteam* Sheet_equipclearteam::default_instance_ = NULL;

Sheet_equipclearteam* Sheet_equipclearteam::New() const {
  return new Sheet_equipclearteam;
}

void Sheet_equipclearteam::Clear() {
  equipclearteam_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipclearteam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipclearteam equipclearteam_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipclearteam_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipclearteam_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipclearteam_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipclearteam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipclearteam equipclearteam_List = 1;
  for (int i = 0; i < this->equipclearteam_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipclearteam_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipclearteam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipclearteam equipclearteam_List = 1;
  for (int i = 0; i < this->equipclearteam_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipclearteam_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipclearteam::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipclearteam equipclearteam_List = 1;
  total_size += 1 * this->equipclearteam_list_size();
  for (int i = 0; i < this->equipclearteam_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipclearteam_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipclearteam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipclearteam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipclearteam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipclearteam::MergeFrom(const Sheet_equipclearteam& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipclearteam_list_.MergeFrom(from.equipclearteam_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipclearteam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipclearteam::CopyFrom(const Sheet_equipclearteam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipclearteam::IsInitialized() const {

  return true;
}

void Sheet_equipclearteam::Swap(Sheet_equipclearteam* other) {
  if (other != this) {
    equipclearteam_list_.Swap(&other->equipclearteam_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipclearteam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipclearteam_descriptor_;
  metadata.reflection = Sheet_equipclearteam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipawakeningawakenDesc::kItemFieldNumber;
const int equipawakeningawakenDesc::kNumFieldNumber;
#endif  // !_MSC_VER

equipawakeningawakenDesc::equipawakeningawakenDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipawakeningawakenDesc::InitAsDefaultInstance() {
}

equipawakeningawakenDesc::equipawakeningawakenDesc(const equipawakeningawakenDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipawakeningawakenDesc::SharedCtor() {
  _cached_size_ = 0;
  item_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipawakeningawakenDesc::~equipawakeningawakenDesc() {
  SharedDtor();
}

void equipawakeningawakenDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipawakeningawakenDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipawakeningawakenDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipawakeningawakenDesc_descriptor_;
}

const equipawakeningawakenDesc& equipawakeningawakenDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipawakeningawakenDesc* equipawakeningawakenDesc::default_instance_ = NULL;

equipawakeningawakenDesc* equipawakeningawakenDesc::New() const {
  return new equipawakeningawakenDesc;
}

void equipawakeningawakenDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_ = GOOGLE_LONGLONG(0);
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipawakeningawakenDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional int32 Num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipawakeningawakenDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 Item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item(), output);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipawakeningawakenDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 Item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item(), target);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipawakeningawakenDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 Item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item());
    }

    // optional int32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipawakeningawakenDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipawakeningawakenDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipawakeningawakenDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipawakeningawakenDesc::MergeFrom(const equipawakeningawakenDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipawakeningawakenDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipawakeningawakenDesc::CopyFrom(const equipawakeningawakenDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipawakeningawakenDesc::IsInitialized() const {

  return true;
}

void equipawakeningawakenDesc::Swap(equipawakeningawakenDesc* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipawakeningawakenDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipawakeningawakenDesc_descriptor_;
  metadata.reflection = equipawakeningawakenDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipawakening::kIdFieldNumber;
const int equipawakening::kPositionFieldNumber;
const int equipawakening::kAwakenLvFieldNumber;
const int equipawakening::kNeedWearQualityFieldNumber;
const int equipawakening::kStrongFieldNumber;
const int equipawakening::kAttributeFieldNumber;
const int equipawakening::kAwakenFieldNumber;
#endif  // !_MSC_VER

equipawakening::equipawakening()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipawakening::InitAsDefaultInstance() {
}

equipawakening::equipawakening(const equipawakening& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipawakening::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  awakenlv_ = 0;
  needwearquality_ = 0;
  strong_ = 0;
  attribute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipawakening::~equipawakening() {
  SharedDtor();
}

void equipawakening::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipawakening::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipawakening::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipawakening_descriptor_;
}

const equipawakening& equipawakening::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipawakening* equipawakening::default_instance_ = NULL;

equipawakening* equipawakening::New() const {
  return new equipawakening;
}

void equipawakening::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    position_ = 0;
    awakenlv_ = 0;
    needwearquality_ = 0;
    strong_ = 0;
    attribute_ = 0;
  }
  awaken_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipawakening::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional int32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awakenLv;
        break;
      }

      // optional int32 awakenLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awakenLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awakenlv_)));
          set_has_awakenlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_needWearQuality;
        break;
      }

      // optional int32 needWearQuality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needWearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needwearquality_)));
          set_has_needwearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_strong;
        break;
      }

      // optional int32 strong = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strong_)));
          set_has_strong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attribute;
        break;
      }

      // optional int32 attribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attribute_)));
          set_has_attribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_awaken;
        break;
      }

      // repeated .proto_ff.equipawakeningawakenDesc awaken = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awaken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awaken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_awaken;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipawakening::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  // optional int32 awakenLv = 3;
  if (has_awakenlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awakenlv(), output);
  }

  // optional int32 needWearQuality = 4;
  if (has_needwearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->needwearquality(), output);
  }

  // optional int32 strong = 5;
  if (has_strong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->strong(), output);
  }

  // optional int32 attribute = 6;
  if (has_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attribute(), output);
  }

  // repeated .proto_ff.equipawakeningawakenDesc awaken = 7;
  for (int i = 0; i < this->awaken_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->awaken(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipawakening::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  // optional int32 awakenLv = 3;
  if (has_awakenlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awakenlv(), target);
  }

  // optional int32 needWearQuality = 4;
  if (has_needwearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->needwearquality(), target);
  }

  // optional int32 strong = 5;
  if (has_strong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->strong(), target);
  }

  // optional int32 attribute = 6;
  if (has_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->attribute(), target);
  }

  // repeated .proto_ff.equipawakeningawakenDesc awaken = 7;
  for (int i = 0; i < this->awaken_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->awaken(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipawakening::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 awakenLv = 3;
    if (has_awakenlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awakenlv());
    }

    // optional int32 needWearQuality = 4;
    if (has_needwearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needwearquality());
    }

    // optional int32 strong = 5;
    if (has_strong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strong());
    }

    // optional int32 attribute = 6;
    if (has_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attribute());
    }

  }
  // repeated .proto_ff.equipawakeningawakenDesc awaken = 7;
  total_size += 1 * this->awaken_size();
  for (int i = 0; i < this->awaken_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awaken(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipawakening::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipawakening* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipawakening*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipawakening::MergeFrom(const equipawakening& from) {
  GOOGLE_CHECK_NE(&from, this);
  awaken_.MergeFrom(from.awaken_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_awakenlv()) {
      set_awakenlv(from.awakenlv());
    }
    if (from.has_needwearquality()) {
      set_needwearquality(from.needwearquality());
    }
    if (from.has_strong()) {
      set_strong(from.strong());
    }
    if (from.has_attribute()) {
      set_attribute(from.attribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipawakening::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipawakening::CopyFrom(const equipawakening& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipawakening::IsInitialized() const {

  return true;
}

void equipawakening::Swap(equipawakening* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(awakenlv_, other->awakenlv_);
    std::swap(needwearquality_, other->needwearquality_);
    std::swap(strong_, other->strong_);
    std::swap(attribute_, other->attribute_);
    awaken_.Swap(&other->awaken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipawakening::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipawakening_descriptor_;
  metadata.reflection = equipawakening_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipawakening::kEquipawakeningListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipawakening::Sheet_equipawakening()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipawakening::InitAsDefaultInstance() {
}

Sheet_equipawakening::Sheet_equipawakening(const Sheet_equipawakening& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipawakening::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipawakening::~Sheet_equipawakening() {
  SharedDtor();
}

void Sheet_equipawakening::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipawakening::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipawakening::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipawakening_descriptor_;
}

const Sheet_equipawakening& Sheet_equipawakening::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipawakening* Sheet_equipawakening::default_instance_ = NULL;

Sheet_equipawakening* Sheet_equipawakening::New() const {
  return new Sheet_equipawakening;
}

void Sheet_equipawakening::Clear() {
  equipawakening_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipawakening::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipawakening equipawakening_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipawakening_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipawakening_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipawakening_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipawakening::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipawakening equipawakening_List = 1;
  for (int i = 0; i < this->equipawakening_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipawakening_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipawakening::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipawakening equipawakening_List = 1;
  for (int i = 0; i < this->equipawakening_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipawakening_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipawakening::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipawakening equipawakening_List = 1;
  total_size += 1 * this->equipawakening_list_size();
  for (int i = 0; i < this->equipawakening_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipawakening_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipawakening::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipawakening* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipawakening*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipawakening::MergeFrom(const Sheet_equipawakening& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipawakening_list_.MergeFrom(from.equipawakening_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipawakening::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipawakening::CopyFrom(const Sheet_equipawakening& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipawakening::IsInitialized() const {

  return true;
}

void Sheet_equipawakening::Swap(Sheet_equipawakening* other) {
  if (other != this) {
    equipawakening_list_.Swap(&other->equipawakening_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipawakening::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipawakening_descriptor_;
  metadata.reflection = Sheet_equipawakening_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipenchantingtypeDesc::kNumFieldNumber;
const int equipenchantingtypeDesc::kIdFieldNumber;
#endif  // !_MSC_VER

equipenchantingtypeDesc::equipenchantingtypeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipenchantingtypeDesc::InitAsDefaultInstance() {
}

equipenchantingtypeDesc::equipenchantingtypeDesc(const equipenchantingtypeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipenchantingtypeDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipenchantingtypeDesc::~equipenchantingtypeDesc() {
  SharedDtor();
}

void equipenchantingtypeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipenchantingtypeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipenchantingtypeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipenchantingtypeDesc_descriptor_;
}

const equipenchantingtypeDesc& equipenchantingtypeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipenchantingtypeDesc* equipenchantingtypeDesc::default_instance_ = NULL;

equipenchantingtypeDesc* equipenchantingtypeDesc::New() const {
  return new equipenchantingtypeDesc;
}

void equipenchantingtypeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipenchantingtypeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipenchantingtypeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipenchantingtypeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipenchantingtypeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipenchantingtypeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipenchantingtypeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipenchantingtypeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipenchantingtypeDesc::MergeFrom(const equipenchantingtypeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipenchantingtypeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipenchantingtypeDesc::CopyFrom(const equipenchantingtypeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipenchantingtypeDesc::IsInitialized() const {

  return true;
}

void equipenchantingtypeDesc::Swap(equipenchantingtypeDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipenchantingtypeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipenchantingtypeDesc_descriptor_;
  metadata.reflection = equipenchantingtypeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipenchantingenchantDesc::kItemFieldNumber;
const int equipenchantingenchantDesc::kNumFieldNumber;
#endif  // !_MSC_VER

equipenchantingenchantDesc::equipenchantingenchantDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipenchantingenchantDesc::InitAsDefaultInstance() {
}

equipenchantingenchantDesc::equipenchantingenchantDesc(const equipenchantingenchantDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipenchantingenchantDesc::SharedCtor() {
  _cached_size_ = 0;
  item_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipenchantingenchantDesc::~equipenchantingenchantDesc() {
  SharedDtor();
}

void equipenchantingenchantDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipenchantingenchantDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipenchantingenchantDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipenchantingenchantDesc_descriptor_;
}

const equipenchantingenchantDesc& equipenchantingenchantDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipenchantingenchantDesc* equipenchantingenchantDesc::default_instance_ = NULL;

equipenchantingenchantDesc* equipenchantingenchantDesc::New() const {
  return new equipenchantingenchantDesc;
}

void equipenchantingenchantDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_ = GOOGLE_LONGLONG(0);
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipenchantingenchantDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional int32 Num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipenchantingenchantDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 Item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item(), output);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipenchantingenchantDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 Item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item(), target);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipenchantingenchantDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 Item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item());
    }

    // optional int32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipenchantingenchantDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipenchantingenchantDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipenchantingenchantDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipenchantingenchantDesc::MergeFrom(const equipenchantingenchantDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipenchantingenchantDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipenchantingenchantDesc::CopyFrom(const equipenchantingenchantDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipenchantingenchantDesc::IsInitialized() const {

  return true;
}

void equipenchantingenchantDesc::Swap(equipenchantingenchantDesc* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipenchantingenchantDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipenchantingenchantDesc_descriptor_;
  metadata.reflection = equipenchantingenchantDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipenchanting::kIdFieldNumber;
const int equipenchanting::kPositionFieldNumber;
const int equipenchanting::kEnchantLvFieldNumber;
const int equipenchanting::kNeedWearQualityFieldNumber;
const int equipenchanting::kEquipFieldNumber;
const int equipenchanting::kTypeFieldNumber;
const int equipenchanting::kEnchantFieldNumber;
#endif  // !_MSC_VER

equipenchanting::equipenchanting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipenchanting::InitAsDefaultInstance() {
}

equipenchanting::equipenchanting(const equipenchanting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipenchanting::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  enchantlv_ = 0;
  needwearquality_ = 0;
  equip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipenchanting::~equipenchanting() {
  SharedDtor();
}

void equipenchanting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipenchanting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipenchanting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipenchanting_descriptor_;
}

const equipenchanting& equipenchanting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipenchanting* equipenchanting::default_instance_ = NULL;

equipenchanting* equipenchanting::New() const {
  return new equipenchanting;
}

void equipenchanting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    position_ = 0;
    enchantlv_ = 0;
    needwearquality_ = 0;
    equip_ = 0;
  }
  type_.Clear();
  enchant_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipenchanting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional int32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enchantLv;
        break;
      }

      // optional int32 enchantLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enchantLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enchantlv_)));
          set_has_enchantlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_needWearQuality;
        break;
      }

      // optional int32 needWearQuality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needWearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needwearquality_)));
          set_has_needwearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equip;
        break;
      }

      // optional int32 equip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_)));
          set_has_equip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_type;
        break;
      }

      // repeated .proto_ff.equipenchantingtypeDesc type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_type;
        if (input->ExpectTag(58)) goto parse_enchant;
        break;
      }

      // repeated .proto_ff.equipenchantingenchantDesc enchant = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enchant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enchant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_enchant;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipenchanting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  // optional int32 enchantLv = 3;
  if (has_enchantlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enchantlv(), output);
  }

  // optional int32 needWearQuality = 4;
  if (has_needwearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->needwearquality(), output);
  }

  // optional int32 equip = 5;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->equip(), output);
  }

  // repeated .proto_ff.equipenchantingtypeDesc type = 6;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->type(i), output);
  }

  // repeated .proto_ff.equipenchantingenchantDesc enchant = 7;
  for (int i = 0; i < this->enchant_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->enchant(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipenchanting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  // optional int32 enchantLv = 3;
  if (has_enchantlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enchantlv(), target);
  }

  // optional int32 needWearQuality = 4;
  if (has_needwearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->needwearquality(), target);
  }

  // optional int32 equip = 5;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->equip(), target);
  }

  // repeated .proto_ff.equipenchantingtypeDesc type = 6;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->type(i), target);
  }

  // repeated .proto_ff.equipenchantingenchantDesc enchant = 7;
  for (int i = 0; i < this->enchant_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->enchant(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipenchanting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 enchantLv = 3;
    if (has_enchantlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enchantlv());
    }

    // optional int32 needWearQuality = 4;
    if (has_needwearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needwearquality());
    }

    // optional int32 equip = 5;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip());
    }

  }
  // repeated .proto_ff.equipenchantingtypeDesc type = 6;
  total_size += 1 * this->type_size();
  for (int i = 0; i < this->type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->type(i));
  }

  // repeated .proto_ff.equipenchantingenchantDesc enchant = 7;
  total_size += 1 * this->enchant_size();
  for (int i = 0; i < this->enchant_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enchant(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipenchanting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipenchanting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipenchanting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipenchanting::MergeFrom(const equipenchanting& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  enchant_.MergeFrom(from.enchant_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_enchantlv()) {
      set_enchantlv(from.enchantlv());
    }
    if (from.has_needwearquality()) {
      set_needwearquality(from.needwearquality());
    }
    if (from.has_equip()) {
      set_equip(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipenchanting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipenchanting::CopyFrom(const equipenchanting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipenchanting::IsInitialized() const {

  return true;
}

void equipenchanting::Swap(equipenchanting* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(enchantlv_, other->enchantlv_);
    std::swap(needwearquality_, other->needwearquality_);
    std::swap(equip_, other->equip_);
    type_.Swap(&other->type_);
    enchant_.Swap(&other->enchant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipenchanting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipenchanting_descriptor_;
  metadata.reflection = equipenchanting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipenchanting::kEquipenchantingListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipenchanting::Sheet_equipenchanting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipenchanting::InitAsDefaultInstance() {
}

Sheet_equipenchanting::Sheet_equipenchanting(const Sheet_equipenchanting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipenchanting::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipenchanting::~Sheet_equipenchanting() {
  SharedDtor();
}

void Sheet_equipenchanting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipenchanting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipenchanting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipenchanting_descriptor_;
}

const Sheet_equipenchanting& Sheet_equipenchanting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipenchanting* Sheet_equipenchanting::default_instance_ = NULL;

Sheet_equipenchanting* Sheet_equipenchanting::New() const {
  return new Sheet_equipenchanting;
}

void Sheet_equipenchanting::Clear() {
  equipenchanting_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipenchanting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipenchanting equipenchanting_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipenchanting_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipenchanting_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipenchanting_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipenchanting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipenchanting equipenchanting_List = 1;
  for (int i = 0; i < this->equipenchanting_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipenchanting_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipenchanting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipenchanting equipenchanting_List = 1;
  for (int i = 0; i < this->equipenchanting_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipenchanting_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipenchanting::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipenchanting equipenchanting_List = 1;
  total_size += 1 * this->equipenchanting_list_size();
  for (int i = 0; i < this->equipenchanting_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipenchanting_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipenchanting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipenchanting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipenchanting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipenchanting::MergeFrom(const Sheet_equipenchanting& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipenchanting_list_.MergeFrom(from.equipenchanting_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipenchanting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipenchanting::CopyFrom(const Sheet_equipenchanting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipenchanting::IsInitialized() const {

  return true;
}

void Sheet_equipenchanting::Swap(Sheet_equipenchanting* other) {
  if (other != this) {
    equipenchanting_list_.Swap(&other->equipenchanting_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipenchanting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipenchanting_descriptor_;
  metadata.reflection = Sheet_equipenchanting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipmarryattributeDesc::kTypeFieldNumber;
const int equipmarryattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

equipmarryattributeDesc::equipmarryattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipmarryattributeDesc::InitAsDefaultInstance() {
}

equipmarryattributeDesc::equipmarryattributeDesc(const equipmarryattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipmarryattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipmarryattributeDesc::~equipmarryattributeDesc() {
  SharedDtor();
}

void equipmarryattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipmarryattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipmarryattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipmarryattributeDesc_descriptor_;
}

const equipmarryattributeDesc& equipmarryattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipmarryattributeDesc* equipmarryattributeDesc::default_instance_ = NULL;

equipmarryattributeDesc* equipmarryattributeDesc::New() const {
  return new equipmarryattributeDesc;
}

void equipmarryattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipmarryattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipmarryattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipmarryattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipmarryattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipmarryattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipmarryattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipmarryattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipmarryattributeDesc::MergeFrom(const equipmarryattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipmarryattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipmarryattributeDesc::CopyFrom(const equipmarryattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipmarryattributeDesc::IsInitialized() const {

  return true;
}

void equipmarryattributeDesc::Swap(equipmarryattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipmarryattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipmarryattributeDesc_descriptor_;
  metadata.reflection = equipmarryattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipmarry::kIdFieldNumber;
const int equipmarry::kLvFieldNumber;
const int equipmarry::kPositionFieldNumber;
const int equipmarry::kTypeFieldNumber;
const int equipmarry::kMaterialIDFieldNumber;
const int equipmarry::kMaterialEXPFieldNumber;
const int equipmarry::kNeedFieldNumber;
const int equipmarry::kAttributeFieldNumber;
#endif  // !_MSC_VER

equipmarry::equipmarry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipmarry::InitAsDefaultInstance() {
}

equipmarry::equipmarry(const equipmarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipmarry::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  lv_ = 0;
  position_ = 0;
  type_ = 0;
  materialid_ = GOOGLE_LONGLONG(0);
  materialexp_ = 0;
  need_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipmarry::~equipmarry() {
  SharedDtor();
}

void equipmarry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipmarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipmarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipmarry_descriptor_;
}

const equipmarry& equipmarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipmarry* equipmarry::default_instance_ = NULL;

equipmarry* equipmarry::New() const {
  return new equipmarry;
}

void equipmarry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    lv_ = 0;
    position_ = 0;
    type_ = 0;
    materialid_ = GOOGLE_LONGLONG(0);
    materialexp_ = 0;
    need_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipmarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional int32 position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_materialID;
        break;
      }

      // optional int64 materialID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_materialEXP;
        break;
      }

      // optional int32 materialEXP = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materialEXP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialexp_)));
          set_has_materialexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_need;
        break;
      }

      // optional int32 need = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_)));
          set_has_need();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.equipmarryattributeDesc attribute = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipmarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int32 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int64 materialID = 5;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->materialid(), output);
  }

  // optional int32 materialEXP = 6;
  if (has_materialexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->materialexp(), output);
  }

  // optional int32 need = 7;
  if (has_need()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->need(), output);
  }

  // repeated .proto_ff.equipmarryattributeDesc attribute = 8;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipmarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int32 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->position(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int64 materialID = 5;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->materialid(), target);
  }

  // optional int32 materialEXP = 6;
  if (has_materialexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->materialexp(), target);
  }

  // optional int32 need = 7;
  if (has_need()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->need(), target);
  }

  // repeated .proto_ff.equipmarryattributeDesc attribute = 8;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipmarry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 materialID = 5;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->materialid());
    }

    // optional int32 materialEXP = 6;
    if (has_materialexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialexp());
    }

    // optional int32 need = 7;
    if (has_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need());
    }

  }
  // repeated .proto_ff.equipmarryattributeDesc attribute = 8;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipmarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipmarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipmarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipmarry::MergeFrom(const equipmarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_materialexp()) {
      set_materialexp(from.materialexp());
    }
    if (from.has_need()) {
      set_need(from.need());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipmarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipmarry::CopyFrom(const equipmarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipmarry::IsInitialized() const {

  return true;
}

void equipmarry::Swap(equipmarry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(position_, other->position_);
    std::swap(type_, other->type_);
    std::swap(materialid_, other->materialid_);
    std::swap(materialexp_, other->materialexp_);
    std::swap(need_, other->need_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipmarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipmarry_descriptor_;
  metadata.reflection = equipmarry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipmarry::kEquipmarryListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipmarry::Sheet_equipmarry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipmarry::InitAsDefaultInstance() {
}

Sheet_equipmarry::Sheet_equipmarry(const Sheet_equipmarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipmarry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipmarry::~Sheet_equipmarry() {
  SharedDtor();
}

void Sheet_equipmarry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipmarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipmarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipmarry_descriptor_;
}

const Sheet_equipmarry& Sheet_equipmarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipmarry* Sheet_equipmarry::default_instance_ = NULL;

Sheet_equipmarry* Sheet_equipmarry::New() const {
  return new Sheet_equipmarry;
}

void Sheet_equipmarry::Clear() {
  equipmarry_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipmarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipmarry equipmarry_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmarry_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmarry_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipmarry_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipmarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipmarry equipmarry_List = 1;
  for (int i = 0; i < this->equipmarry_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipmarry_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipmarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipmarry equipmarry_List = 1;
  for (int i = 0; i < this->equipmarry_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipmarry_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipmarry::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipmarry equipmarry_List = 1;
  total_size += 1 * this->equipmarry_list_size();
  for (int i = 0; i < this->equipmarry_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmarry_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipmarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipmarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipmarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipmarry::MergeFrom(const Sheet_equipmarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipmarry_list_.MergeFrom(from.equipmarry_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipmarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipmarry::CopyFrom(const Sheet_equipmarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipmarry::IsInitialized() const {

  return true;
}

void Sheet_equipmarry::Swap(Sheet_equipmarry* other) {
  if (other != this) {
    equipmarry_list_.Swap(&other->equipmarry_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipmarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipmarry_descriptor_;
  metadata.reflection = Sheet_equipmarry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
