// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: equip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "equip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* equipequipattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipequipattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipequipgodAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipequipgodAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipequip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipequip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipequip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipequip_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipstrongtypeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipstrongtypeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipstrong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipstrong_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipstrong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipstrong_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipstrongexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipstrongexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipstrongexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipstrongexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipstrongtotalattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipstrongtotalattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipstrongtotal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipstrongtotal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipstrongtotal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipstrongtotal_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipgem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipgem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipgem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipgem_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipstoveattattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipstoveattattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipstoveatt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipstoveatt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipstoveatt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipstoveatt_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipstoveexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipstoveexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipstoveexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipstoveexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipgrade_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_equip_2eproto() {
  protobuf_AddDesc_equip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "equip.proto");
  GOOGLE_CHECK(file != NULL);
  equipequipattributeDesc_descriptor_ = file->message_type(0);
  static const int equipequipattributeDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, valuemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, valuemax_),
  };
  equipequipattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipequipattributeDesc_descriptor_,
      equipequipattributeDesc::default_instance_,
      equipequipattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipequipattributeDesc));
  equipequipgodAttributeDesc_descriptor_ = file->message_type(1);
  static const int equipequipgodAttributeDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipgodAttributeDesc, valuemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipgodAttributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipgodAttributeDesc, valuemax_),
  };
  equipequipgodAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipequipgodAttributeDesc_descriptor_,
      equipequipgodAttributeDesc::default_instance_,
      equipequipgodAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipgodAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipgodAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipequipgodAttributeDesc));
  equipequip_descriptor_ = file->message_type(2);
  static const int equipequip_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, professionlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattributedown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattributeup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattribute_typelibrary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattribute_valuemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattribute_valuemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, bluestarnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, bluestar_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, bluestar_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, bluestar_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, iscanbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, istradebind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, sellprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, meltingresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, specialattributedown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, specialattributeup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, specialattribute_typelibrary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, specialattribute_valuemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, specialattribute_valuemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, godattribute_),
  };
  equipequip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipequip_descriptor_,
      equipequip::default_instance_,
      equipequip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipequip));
  Sheet_equipequip_descriptor_ = file->message_type(3);
  static const int Sheet_equipequip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipequip, equipequip_list_),
  };
  Sheet_equipequip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipequip_descriptor_,
      Sheet_equipequip::default_instance_,
      Sheet_equipequip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipequip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipequip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipequip));
  equipstrongtypeDesc_descriptor_ = file->message_type(4);
  static const int equipstrongtypeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtypeDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtypeDesc, id_),
  };
  equipstrongtypeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipstrongtypeDesc_descriptor_,
      equipstrongtypeDesc::default_instance_,
      equipstrongtypeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtypeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtypeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipstrongtypeDesc));
  equipstrong_descriptor_ = file->message_type(5);
  static const int equipstrong_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrong, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrong, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrong, wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrong, srtongup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrong, type_),
  };
  equipstrong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipstrong_descriptor_,
      equipstrong::default_instance_,
      equipstrong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipstrong));
  Sheet_equipstrong_descriptor_ = file->message_type(6);
  static const int Sheet_equipstrong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrong, equipstrong_list_),
  };
  Sheet_equipstrong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipstrong_descriptor_,
      Sheet_equipstrong::default_instance_,
      Sheet_equipstrong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipstrong));
  equipstrongexp_descriptor_ = file->message_type(7);
  static const int equipstrongexp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongexp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongexp, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongexp, costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongexp, positiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongexp, costnum_),
  };
  equipstrongexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipstrongexp_descriptor_,
      equipstrongexp::default_instance_,
      equipstrongexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipstrongexp));
  Sheet_equipstrongexp_descriptor_ = file->message_type(8);
  static const int Sheet_equipstrongexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrongexp, equipstrongexp_list_),
  };
  Sheet_equipstrongexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipstrongexp_descriptor_,
      Sheet_equipstrongexp::default_instance_,
      Sheet_equipstrongexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrongexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrongexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipstrongexp));
  equipstrongtotalattributeDesc_descriptor_ = file->message_type(9);
  static const int equipstrongtotalattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtotalattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtotalattributeDesc, value_),
  };
  equipstrongtotalattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipstrongtotalattributeDesc_descriptor_,
      equipstrongtotalattributeDesc::default_instance_,
      equipstrongtotalattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtotalattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtotalattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipstrongtotalattributeDesc));
  equipstrongtotal_descriptor_ = file->message_type(10);
  static const int equipstrongtotal_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtotal, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtotal, idtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtotal, idnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtotal, attribute_),
  };
  equipstrongtotal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipstrongtotal_descriptor_,
      equipstrongtotal::default_instance_,
      equipstrongtotal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtotal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstrongtotal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipstrongtotal));
  Sheet_equipstrongtotal_descriptor_ = file->message_type(11);
  static const int Sheet_equipstrongtotal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrongtotal, equipstrongtotal_list_),
  };
  Sheet_equipstrongtotal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipstrongtotal_descriptor_,
      Sheet_equipstrongtotal::default_instance_,
      Sheet_equipstrongtotal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrongtotal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstrongtotal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipstrongtotal));
  equipgem_descriptor_ = file->message_type(12);
  static const int equipgem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgem, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgem, gemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgem, speciallygemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgem, payunlockitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgem, payunlocknnm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgem, gemunlock_),
  };
  equipgem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipgem_descriptor_,
      equipgem::default_instance_,
      equipgem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipgem));
  Sheet_equipgem_descriptor_ = file->message_type(13);
  static const int Sheet_equipgem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgem, equipgem_list_),
  };
  Sheet_equipgem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipgem_descriptor_,
      Sheet_equipgem::default_instance_,
      Sheet_equipgem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipgem));
  equipstoveattattributeDesc_descriptor_ = file->message_type(14);
  static const int equipstoveattattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveattattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveattattributeDesc, value_),
  };
  equipstoveattattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipstoveattattributeDesc_descriptor_,
      equipstoveattattributeDesc::default_instance_,
      equipstoveattattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveattattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveattattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipstoveattattributeDesc));
  equipstoveatt_descriptor_ = file->message_type(15);
  static const int equipstoveatt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveatt, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveatt, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveatt, attribute_),
  };
  equipstoveatt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipstoveatt_descriptor_,
      equipstoveatt::default_instance_,
      equipstoveatt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveatt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveatt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipstoveatt));
  Sheet_equipstoveatt_descriptor_ = file->message_type(16);
  static const int Sheet_equipstoveatt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstoveatt, equipstoveatt_list_),
  };
  Sheet_equipstoveatt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipstoveatt_descriptor_,
      Sheet_equipstoveatt::default_instance_,
      Sheet_equipstoveatt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstoveatt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstoveatt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipstoveatt));
  equipstoveexp_descriptor_ = file->message_type(17);
  static const int equipstoveexp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveexp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveexp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveexp, wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveexp, quality_),
  };
  equipstoveexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipstoveexp_descriptor_,
      equipstoveexp::default_instance_,
      equipstoveexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipstoveexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipstoveexp));
  Sheet_equipstoveexp_descriptor_ = file->message_type(18);
  static const int Sheet_equipstoveexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstoveexp, equipstoveexp_list_),
  };
  Sheet_equipstoveexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipstoveexp_descriptor_,
      Sheet_equipstoveexp::default_instance_,
      Sheet_equipstoveexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstoveexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipstoveexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipstoveexp));
  equipgrade_descriptor_ = file->message_type(19);
  static const int equipgrade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgrade, id_),
  };
  equipgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipgrade_descriptor_,
      equipgrade::default_instance_,
      equipgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipgrade));
  Sheet_equipgrade_descriptor_ = file->message_type(20);
  static const int Sheet_equipgrade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgrade, equipgrade_list_),
  };
  Sheet_equipgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipgrade_descriptor_,
      Sheet_equipgrade::default_instance_,
      Sheet_equipgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipgrade));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_equip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipequipattributeDesc_descriptor_, &equipequipattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipequipgodAttributeDesc_descriptor_, &equipequipgodAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipequip_descriptor_, &equipequip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipequip_descriptor_, &Sheet_equipequip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipstrongtypeDesc_descriptor_, &equipstrongtypeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipstrong_descriptor_, &equipstrong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipstrong_descriptor_, &Sheet_equipstrong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipstrongexp_descriptor_, &equipstrongexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipstrongexp_descriptor_, &Sheet_equipstrongexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipstrongtotalattributeDesc_descriptor_, &equipstrongtotalattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipstrongtotal_descriptor_, &equipstrongtotal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipstrongtotal_descriptor_, &Sheet_equipstrongtotal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipgem_descriptor_, &equipgem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipgem_descriptor_, &Sheet_equipgem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipstoveattattributeDesc_descriptor_, &equipstoveattattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipstoveatt_descriptor_, &equipstoveatt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipstoveatt_descriptor_, &Sheet_equipstoveatt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipstoveexp_descriptor_, &equipstoveexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipstoveexp_descriptor_, &Sheet_equipstoveexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipgrade_descriptor_, &equipgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipgrade_descriptor_, &Sheet_equipgrade::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_equip_2eproto() {
  delete equipequipattributeDesc::default_instance_;
  delete equipequipattributeDesc_reflection_;
  delete equipequipgodAttributeDesc::default_instance_;
  delete equipequipgodAttributeDesc_reflection_;
  delete equipequip::default_instance_;
  delete equipequip_reflection_;
  delete Sheet_equipequip::default_instance_;
  delete Sheet_equipequip_reflection_;
  delete equipstrongtypeDesc::default_instance_;
  delete equipstrongtypeDesc_reflection_;
  delete equipstrong::default_instance_;
  delete equipstrong_reflection_;
  delete Sheet_equipstrong::default_instance_;
  delete Sheet_equipstrong_reflection_;
  delete equipstrongexp::default_instance_;
  delete equipstrongexp_reflection_;
  delete Sheet_equipstrongexp::default_instance_;
  delete Sheet_equipstrongexp_reflection_;
  delete equipstrongtotalattributeDesc::default_instance_;
  delete equipstrongtotalattributeDesc_reflection_;
  delete equipstrongtotal::default_instance_;
  delete equipstrongtotal_reflection_;
  delete Sheet_equipstrongtotal::default_instance_;
  delete Sheet_equipstrongtotal_reflection_;
  delete equipgem::default_instance_;
  delete equipgem_reflection_;
  delete Sheet_equipgem::default_instance_;
  delete Sheet_equipgem_reflection_;
  delete equipstoveattattributeDesc::default_instance_;
  delete equipstoveattattributeDesc_reflection_;
  delete equipstoveatt::default_instance_;
  delete equipstoveatt_reflection_;
  delete Sheet_equipstoveatt::default_instance_;
  delete Sheet_equipstoveatt_reflection_;
  delete equipstoveexp::default_instance_;
  delete equipstoveexp_reflection_;
  delete Sheet_equipstoveexp::default_instance_;
  delete Sheet_equipstoveexp_reflection_;
  delete equipgrade::default_instance_;
  delete equipgrade_reflection_;
  delete Sheet_equipgrade::default_instance_;
  delete Sheet_equipgrade_reflection_;
}

void protobuf_AddDesc_equip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013equip.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"u\n\027equipequipattributeDesc\022\"\n\010val"
    "ueMin\030\001 \001(\005B\020\302\377\024\014\346\234\200\345\260\217\346\225\260\345\200\274\022\022\n\004type\030\002 "
    "\001(\005B\004\302\377\024\000\022\"\n\010valueMax\030\003 \001(\005B\020\302\377\024\014\346\234\200\345\244\247\346"
    "\225\260\345\200\274\"x\n\032equipequipgodAttributeDesc\022\"\n\010v"
    "alueMin\030\001 \001(\005B\020\302\377\024\014\346\234\200\345\260\217\346\225\260\345\200\274\022\022\n\004type\030"
    "\002 \001(\005B\004\302\377\024\000\022\"\n\010valueMax\030\003 \001(\005B\020\302\377\024\014\346\234\200\345\244"
    "\247\346\225\260\345\200\274\"\217\r\n\nequipequip\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010"
    "\350\243\205\345\244\207ID\022\"\n\004name\030\002 \001(\tB\024\302\377\024\014\350\243\205\345\244\207\345\220\215\347\247\260"
    "\220\301\024<\022%\n\013wearQuality\030\003 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201"
    "\351\230\266\022\"\n\010position\030\004 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\344\275\215\347\275\256\022"
    "(\n\nprofession\030\005 \001(\tB\024\302\377\024\014\350\201\214\344\270\232\351\231\220\345\210\266\220\301\024"
    "<\022&\n\014professionLv\030\006 \001(\005B\020\302\377\024\014\350\275\254\350\201\214\347\255\211\347\272"
    "\247\022%\n\005level\030\007 \001(\005B\026\302\377\024\022\347\251\277\346\210\264\347\255\211\347\272\247\351\231\220\345\210\266"
    "\022!\n\007quality\030\010 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\350\264\250\022\036\n\004s"
    "tar\030\t \001(\005B\020\302\377\024\014\350\243\205\345\244\207\346\230\237\347\272\247\0229\n\023refineAtt"
    "ributeDown\030\n \001(\005B\034\302\377\024\030\346\230\237\347\272\247\345\261\236\346\200\247\346\225\260\351\207\217"
    "\344\270\213\351\231\220\0227\n\021refineAttributeUp\030\013 \001(\005B\034\302\377\024\030\346"
    "\230\237\347\272\247\345\261\236\346\200\247\346\225\260\351\207\217\344\270\212\351\231\220\022B\n\033refineAttribu"
    "te_typeLibrary\030\014 \001(\tB\035\302\377\024\025\351\232\217\346\234\272\346\230\237\347\272\247\345\261"
    "\236\346\200\247\345\272\223\220\301\024<\022\?\n\030refineAttribute_valueMin\030"
    "\r \001(\tB\035\302\377\024\025\346\230\237\347\272\247\345\261\236\346\200\247\346\234\200\345\260\217\345\200\274\220\301\024<\022\?\n\030"
    "refineAttribute_valueMax\030\016 \001(\tB\035\302\377\024\025\346\230\237\347"
    "\272\247\345\261\236\346\200\247\346\234\200\345\244\247\345\200\274\220\301\024<\0221\n\013blueStarNum\030\017 \001"
    "(\005B\034\302\377\024\030\350\223\235\350\211\262\346\230\237\347\272\247\345\261\236\346\200\247\346\235\241\346\225\260\022:\n\rblue"
    "Star_type\030\020 \001(\tB#\302\377\024\033\350\223\235\350\211\262\346\230\237\347\272\247\345\261\236\346\200\247\347"
    "\261\273\345\236\213\345\272\223\220\301\024<\0228\n\013blueStar_lv\030\021 \001(\tB#\302\377\024\033\350"
    "\223\235\350\211\262\346\230\237\347\272\247\347\255\211\347\272\247\351\227\264\351\232\224\345\267\256\220\301\024<\022<\n\017blueSt"
    "ar_number\030\022 \001(\tB#\302\377\024\033\350\223\235\350\211\262\346\230\237\347\272\247\346\257\217\347\272\247\345"
    "\242\236\345\212\240\345\200\274\220\301\024<\022#\n\tisCanbind\030\023 \001(\005B\020\302\377\024\014\346\230\257"
    "\345\220\246\347\273\221\345\256\232\022+\n\013isTradeBind\030\024 \001(\005B\026\302\377\024\022\346\230\257\345"
    "\220\246\344\272\244\346\230\223\347\273\221\345\256\232\022#\n\tsellPrice\030\025 \001(\005B\020\302\377\024\014\345"
    "\207\272\345\224\256\344\273\267\346\240\274\022%\n\004icon\030\026 \001(\tB\027\302\377\024\017\350\243\205\345\244\207\345\233\276"
    "\346\240\207\345\220\215\220\301\024<\022\036\n\004time\030\027 \001(\005B\020\302\377\024\014\351\231\220\346\227\266\350\243\205\345"
    "\244\207\022,\n\tbroadcast\030\030 \001(\005B\031\302\377\024\025\346\230\257\345\220\246\346\222\255\346\224\276\350"
    "\267\221\351\251\254\347\201\257\022+\n\rmeltingResult\030\031 \001(\tB\024\302\377\024\014\347\206\224"
    "\347\202\274\344\272\247\345\207\272\220\301\024<\022:\n\024specialAttributeDown\030\032 "
    "\001(\005B\034\302\377\024\030\347\211\271\346\256\212\345\261\236\346\200\247\346\225\260\351\207\217\344\270\213\351\231\220\0228\n\022spe"
    "cialAttributeUp\030\033 \001(\005B\034\302\377\024\030\347\211\271\346\256\212\345\261\236\346\200\247\346"
    "\225\260\351\207\217\344\270\212\351\231\220\022C\n\034specialAttribute_typeLibr"
    "ary\030\034 \001(\tB\035\302\377\024\025\347\211\271\346\256\212\346\230\237\347\272\247\345\261\236\346\200\247\345\272\223\220\301\024<"
    "\022@\n\031specialAttribute_valueMin\030\035 \001(\tB\035\302\377\024"
    "\025\347\211\271\346\256\212\345\261\236\346\200\247\346\234\200\345\260\217\345\200\274\220\301\024<\022@\n\031specialAtt"
    "ribute_valueMax\030\036 \001(\tB\035\302\377\024\025\347\211\271\346\256\212\345\261\236\346\200\247\346"
    "\234\200\345\244\247\345\200\274\220\301\024<\022%\n\007skillId\030\037 \001(\tB\024\302\377\024\014\351\231\204\345\270"
    "\246\346\212\200\350\203\275\220\301\024<\022J\n\tattribute\030  \003(\0132!.proto_f"
    "f.equipequipattributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236"
    "\346\200\247\210\301\024\003\022P\n\014godAttribute\030! \003(\0132$.proto_ff"
    ".equipequipgodAttributeDescB\024\302\377\024\014\344\273\231\345\260\212\345"
    "\261\236\346\200\247\210\301\024\002\"G\n\020Sheet_equipequip\0223\n\017equipeq"
    "uip_List\030\001 \003(\0132\024.proto_ff.equipequipB\004\210\301"
    "\024\024\"C\n\023equipstrongtypeDesc\022\030\n\003num\030\001 \001(\tB\013"
    "\302\377\024\003\345\200\274\220\301\024<\022\022\n\002id\030\002 \001(\005B\006\302\377\024\002ID\"\323\001\n\013equi"
    "pstrong\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\351\203\250\344\275\215ID\022\"\n\010pos"
    "ition\030\002 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\351\203\250\344\275\215\022%\n\013wearQua"
    "lity\030\003 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\351\230\266\022\"\n\010srtongUp"
    "\030\004 \001(\005B\020\302\377\024\014\345\274\272\345\214\226\344\270\212\351\231\220\022;\n\004type\030\005 \003(\0132\035"
    ".proto_ff.equipstrongtypeDescB\016\302\377\024\006\345\261\236\346\200"
    "\247\210\301\024\002\"K\n\021Sheet_equipstrong\0226\n\020equipstron"
    "g_List\030\001 \003(\0132\025.proto_ff.equipstrongB\005\210\301\024"
    "\220\003\"\355\001\n\016equipstrongexp\022\026\n\002Lv\030\001 \001(\005B\n\302\377\024\006\347"
    "\255\211\347\272\247\022$\n\004gold\030\002 \001(\005B\026\302\377\024\022\345\274\272\345\214\226\346\266\210\350\200\227\351\207\221"
    "\345\270\201\0226\n\010costItem\030\003 \003(\005B$\302\377\024\034\351\203\250\344\275\215\347\261\273\345\236\2139"
    "999\346\266\210\350\200\227\351\201\223\345\205\267\210\301\024\002\022.\n\014positionType\030\004 \003("
    "\tB\030\302\377\024\014\351\203\250\344\275\215\347\261\273\345\236\213\210\301\024\002\220\301\024<\0225\n\007costNum\030\005"
    " \003(\005B$\302\377\024\034\351\203\250\344\275\215\347\261\273\345\236\2139999\351\201\223\345\205\267\346\225\260\351\207\217\210\301"
    "\024\002\"T\n\024Sheet_equipstrongexp\022<\n\023equipstron"
    "gexp_List\030\001 \003(\0132\030.proto_ff.equipstrongex"
    "pB\005\210\301\024\240\006\"M\n\035equipstrongtotalattributeDes"
    "c\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B\007"
    "\302\377\024\003\345\200\274\"\304\001\n\020equipstrongtotal\022\033\n\002id\030\001 \001(\003"
    "B\017\302\377\024\013\346\200\273\347\255\211\347\272\247ID\022#\n\006idType\030\002 \001(\005B\023\302\377\024\017\346"
    "\200\273\347\255\211\347\272\247\347\261\273\345\236\213\022\034\n\005idNum\030\003 \001(\005B\r\302\377\024\t\346\200\273\347\255"
    "\211\347\272\247\022P\n\tattribute\030\004 \003(\0132\'.proto_ff.equip"
    "strongtotalattributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346"
    "\200\247\210\301\024\004\"Z\n\026Sheet_equipstrongtotal\022@\n\025equi"
    "pstrongtotal_List\030\001 \003(\0132\032.proto_ff.equip"
    "strongtotalB\005\210\301\024\254\002\"\253\002\n\010equipgem\022\"\n\010posit"
    "ion\030\001 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\351\203\250\344\275\215\0221\n\007gemType\030\002"
    " \001(\tB \302\377\024\030\346\231\256\351\200\232\346\247\275\344\275\215\345\256\235\347\237\263\347\261\273\345\236\213\220\301\024<\0226"
    "\n\020speciallyGemType\030\003 \001(\005B\034\302\377\024\030\347\211\271\346\256\212\346\247\275\344"
    "\275\215\345\256\235\347\237\263\347\261\273\345\236\213\0220\n\rpayUnlockItem\030\004 \001(\005B\031\302"
    "\377\024\025\344\273\230\350\264\271\350\247\243\351\224\201\346\247\275\351\201\223\345\205\267\022,\n\014payUnlockNnm"
    "\030\005 \001(\005B\026\302\377\024\022\350\247\243\351\224\201\351\201\223\345\205\267\346\225\260\351\207\217\0220\n\tgemUnl"
    "ock\030\006 \003(\005B\035\302\377\024\025\350\243\205\345\244\207\346\247\275\350\247\243\351\224\201\345\223\201\351\230\266\210\301\024\005"
    "\"A\n\016Sheet_equipgem\022/\n\requipgem_List\030\001 \003("
    "\0132\022.proto_ff.equipgemB\004\210\301\024\024\"J\n\032equipstov"
    "eattattributeDesc\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022"
    "\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\225\001\n\requipstoveat"
    "t\022\026\n\002lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\035\n\003exp\030\002 \001(\003B\020"
    "\302\377\024\014\346\200\273\347\273\217\351\252\214\345\200\274\022M\n\tattribute\030\003 \003(\0132$.pr"
    "oto_ff.equipstoveattattributeDescB\024\302\377\024\014\345"
    "\237\272\347\241\200\345\261\236\346\200\247\210\301\024\004\"Q\n\023Sheet_equipstoveatt\022:"
    "\n\022equipstoveatt_List\030\001 \003(\0132\027.proto_ff.eq"
    "uipstoveattB\005\210\301\024\320\017\"\215\001\n\requipstoveexp\022\026\n\002"
    "ID\030\001 \001(\005B\n\302\377\024\006\345\272\217\345\217\267\022\032\n\003exp\030\002 \001(\005B\r\302\377\024\t\347"
    "\273\217\351\252\214\345\200\274\022%\n\013wearQuality\030\003 \001(\005B\020\302\377\024\014\350\243\205\345\244"
    "\207\345\223\201\351\230\266\022!\n\007quality\030\004 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\350"
    "\264\250\"Q\n\023Sheet_equipstoveexp\022:\n\022equipstovee"
    "xp_List\030\001 \003(\0132\027.proto_ff.equipstoveexpB\005"
    "\210\301\024\310\001\"$\n\nequipgrade\022\026\n\002ID\030\001 \001(\005B\n\302\377\024\006\345\272\217"
    "\345\217\267\"G\n\020Sheet_equipgrade\0223\n\017equipgrade_Li"
    "st\030\001 \003(\0132\024.proto_ff.equipgradeB\004\210\301\024(", 4116);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "equip.proto", &protobuf_RegisterTypes);
  equipequipattributeDesc::default_instance_ = new equipequipattributeDesc();
  equipequipgodAttributeDesc::default_instance_ = new equipequipgodAttributeDesc();
  equipequip::default_instance_ = new equipequip();
  Sheet_equipequip::default_instance_ = new Sheet_equipequip();
  equipstrongtypeDesc::default_instance_ = new equipstrongtypeDesc();
  equipstrong::default_instance_ = new equipstrong();
  Sheet_equipstrong::default_instance_ = new Sheet_equipstrong();
  equipstrongexp::default_instance_ = new equipstrongexp();
  Sheet_equipstrongexp::default_instance_ = new Sheet_equipstrongexp();
  equipstrongtotalattributeDesc::default_instance_ = new equipstrongtotalattributeDesc();
  equipstrongtotal::default_instance_ = new equipstrongtotal();
  Sheet_equipstrongtotal::default_instance_ = new Sheet_equipstrongtotal();
  equipgem::default_instance_ = new equipgem();
  Sheet_equipgem::default_instance_ = new Sheet_equipgem();
  equipstoveattattributeDesc::default_instance_ = new equipstoveattattributeDesc();
  equipstoveatt::default_instance_ = new equipstoveatt();
  Sheet_equipstoveatt::default_instance_ = new Sheet_equipstoveatt();
  equipstoveexp::default_instance_ = new equipstoveexp();
  Sheet_equipstoveexp::default_instance_ = new Sheet_equipstoveexp();
  equipgrade::default_instance_ = new equipgrade();
  Sheet_equipgrade::default_instance_ = new Sheet_equipgrade();
  equipequipattributeDesc::default_instance_->InitAsDefaultInstance();
  equipequipgodAttributeDesc::default_instance_->InitAsDefaultInstance();
  equipequip::default_instance_->InitAsDefaultInstance();
  Sheet_equipequip::default_instance_->InitAsDefaultInstance();
  equipstrongtypeDesc::default_instance_->InitAsDefaultInstance();
  equipstrong::default_instance_->InitAsDefaultInstance();
  Sheet_equipstrong::default_instance_->InitAsDefaultInstance();
  equipstrongexp::default_instance_->InitAsDefaultInstance();
  Sheet_equipstrongexp::default_instance_->InitAsDefaultInstance();
  equipstrongtotalattributeDesc::default_instance_->InitAsDefaultInstance();
  equipstrongtotal::default_instance_->InitAsDefaultInstance();
  Sheet_equipstrongtotal::default_instance_->InitAsDefaultInstance();
  equipgem::default_instance_->InitAsDefaultInstance();
  Sheet_equipgem::default_instance_->InitAsDefaultInstance();
  equipstoveattattributeDesc::default_instance_->InitAsDefaultInstance();
  equipstoveatt::default_instance_->InitAsDefaultInstance();
  Sheet_equipstoveatt::default_instance_->InitAsDefaultInstance();
  equipstoveexp::default_instance_->InitAsDefaultInstance();
  Sheet_equipstoveexp::default_instance_->InitAsDefaultInstance();
  equipgrade::default_instance_->InitAsDefaultInstance();
  Sheet_equipgrade::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_equip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_equip_2eproto {
  StaticDescriptorInitializer_equip_2eproto() {
    protobuf_AddDesc_equip_2eproto();
  }
} static_descriptor_initializer_equip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int equipequipattributeDesc::kValueMinFieldNumber;
const int equipequipattributeDesc::kTypeFieldNumber;
const int equipequipattributeDesc::kValueMaxFieldNumber;
#endif  // !_MSC_VER

equipequipattributeDesc::equipequipattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipequipattributeDesc::InitAsDefaultInstance() {
}

equipequipattributeDesc::equipequipattributeDesc(const equipequipattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipequipattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  valuemin_ = 0;
  type_ = 0;
  valuemax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipequipattributeDesc::~equipequipattributeDesc() {
  SharedDtor();
}

void equipequipattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipequipattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipequipattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipequipattributeDesc_descriptor_;
}

const equipequipattributeDesc& equipequipattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipequipattributeDesc* equipequipattributeDesc::default_instance_ = NULL;

equipequipattributeDesc* equipequipattributeDesc::New() const {
  return new equipequipattributeDesc;
}

void equipequipattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    valuemin_ = 0;
    type_ = 0;
    valuemax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipequipattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 valueMin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuemin_)));
          set_has_valuemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueMax;
        break;
      }

      // optional int32 valueMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuemax_)));
          set_has_valuemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipequipattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 valueMin = 1;
  if (has_valuemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->valuemin(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 valueMax = 3;
  if (has_valuemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->valuemax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipequipattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 valueMin = 1;
  if (has_valuemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->valuemin(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 valueMax = 3;
  if (has_valuemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->valuemax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipequipattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 valueMin = 1;
    if (has_valuemin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuemin());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 valueMax = 3;
    if (has_valuemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuemax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipequipattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipequipattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipequipattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipequipattributeDesc::MergeFrom(const equipequipattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_valuemin()) {
      set_valuemin(from.valuemin());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_valuemax()) {
      set_valuemax(from.valuemax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipequipattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipequipattributeDesc::CopyFrom(const equipequipattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipequipattributeDesc::IsInitialized() const {

  return true;
}

void equipequipattributeDesc::Swap(equipequipattributeDesc* other) {
  if (other != this) {
    std::swap(valuemin_, other->valuemin_);
    std::swap(type_, other->type_);
    std::swap(valuemax_, other->valuemax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipequipattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipequipattributeDesc_descriptor_;
  metadata.reflection = equipequipattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipequipgodAttributeDesc::kValueMinFieldNumber;
const int equipequipgodAttributeDesc::kTypeFieldNumber;
const int equipequipgodAttributeDesc::kValueMaxFieldNumber;
#endif  // !_MSC_VER

equipequipgodAttributeDesc::equipequipgodAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipequipgodAttributeDesc::InitAsDefaultInstance() {
}

equipequipgodAttributeDesc::equipequipgodAttributeDesc(const equipequipgodAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipequipgodAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  valuemin_ = 0;
  type_ = 0;
  valuemax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipequipgodAttributeDesc::~equipequipgodAttributeDesc() {
  SharedDtor();
}

void equipequipgodAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipequipgodAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipequipgodAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipequipgodAttributeDesc_descriptor_;
}

const equipequipgodAttributeDesc& equipequipgodAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipequipgodAttributeDesc* equipequipgodAttributeDesc::default_instance_ = NULL;

equipequipgodAttributeDesc* equipequipgodAttributeDesc::New() const {
  return new equipequipgodAttributeDesc;
}

void equipequipgodAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    valuemin_ = 0;
    type_ = 0;
    valuemax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipequipgodAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 valueMin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuemin_)));
          set_has_valuemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueMax;
        break;
      }

      // optional int32 valueMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuemax_)));
          set_has_valuemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipequipgodAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 valueMin = 1;
  if (has_valuemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->valuemin(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 valueMax = 3;
  if (has_valuemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->valuemax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipequipgodAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 valueMin = 1;
  if (has_valuemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->valuemin(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 valueMax = 3;
  if (has_valuemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->valuemax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipequipgodAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 valueMin = 1;
    if (has_valuemin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuemin());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 valueMax = 3;
    if (has_valuemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuemax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipequipgodAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipequipgodAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipequipgodAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipequipgodAttributeDesc::MergeFrom(const equipequipgodAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_valuemin()) {
      set_valuemin(from.valuemin());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_valuemax()) {
      set_valuemax(from.valuemax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipequipgodAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipequipgodAttributeDesc::CopyFrom(const equipequipgodAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipequipgodAttributeDesc::IsInitialized() const {

  return true;
}

void equipequipgodAttributeDesc::Swap(equipequipgodAttributeDesc* other) {
  if (other != this) {
    std::swap(valuemin_, other->valuemin_);
    std::swap(type_, other->type_);
    std::swap(valuemax_, other->valuemax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipequipgodAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipequipgodAttributeDesc_descriptor_;
  metadata.reflection = equipequipgodAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipequip::kIdFieldNumber;
const int equipequip::kNameFieldNumber;
const int equipequip::kWearQualityFieldNumber;
const int equipequip::kPositionFieldNumber;
const int equipequip::kProfessionFieldNumber;
const int equipequip::kProfessionLvFieldNumber;
const int equipequip::kLevelFieldNumber;
const int equipequip::kQualityFieldNumber;
const int equipequip::kStarFieldNumber;
const int equipequip::kRefineAttributeDownFieldNumber;
const int equipequip::kRefineAttributeUpFieldNumber;
const int equipequip::kRefineAttributeTypeLibraryFieldNumber;
const int equipequip::kRefineAttributeValueMinFieldNumber;
const int equipequip::kRefineAttributeValueMaxFieldNumber;
const int equipequip::kBlueStarNumFieldNumber;
const int equipequip::kBlueStarTypeFieldNumber;
const int equipequip::kBlueStarLvFieldNumber;
const int equipequip::kBlueStarNumberFieldNumber;
const int equipequip::kIsCanbindFieldNumber;
const int equipequip::kIsTradeBindFieldNumber;
const int equipequip::kSellPriceFieldNumber;
const int equipequip::kIconFieldNumber;
const int equipequip::kTimeFieldNumber;
const int equipequip::kBroadcastFieldNumber;
const int equipequip::kMeltingResultFieldNumber;
const int equipequip::kSpecialAttributeDownFieldNumber;
const int equipequip::kSpecialAttributeUpFieldNumber;
const int equipequip::kSpecialAttributeTypeLibraryFieldNumber;
const int equipequip::kSpecialAttributeValueMinFieldNumber;
const int equipequip::kSpecialAttributeValueMaxFieldNumber;
const int equipequip::kSkillIdFieldNumber;
const int equipequip::kAttributeFieldNumber;
const int equipequip::kGodAttributeFieldNumber;
#endif  // !_MSC_VER

equipequip::equipequip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipequip::InitAsDefaultInstance() {
}

equipequip::equipequip(const equipequip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipequip::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wearquality_ = 0;
  position_ = 0;
  profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  professionlv_ = 0;
  level_ = 0;
  quality_ = 0;
  star_ = 0;
  refineattributedown_ = 0;
  refineattributeup_ = 0;
  refineattribute_typelibrary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refineattribute_valuemin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refineattribute_valuemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bluestarnum_ = 0;
  bluestar_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bluestar_lv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bluestar_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iscanbind_ = 0;
  istradebind_ = 0;
  sellprice_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  broadcast_ = 0;
  meltingresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  specialattributedown_ = 0;
  specialattributeup_ = 0;
  specialattribute_typelibrary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  specialattribute_valuemin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  specialattribute_valuemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipequip::~equipequip() {
  SharedDtor();
}

void equipequip::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    delete profession_;
  }
  if (refineattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_typelibrary_;
  }
  if (refineattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_valuemin_;
  }
  if (refineattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_valuemax_;
  }
  if (bluestar_type_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_type_;
  }
  if (bluestar_lv_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_lv_;
  }
  if (bluestar_number_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_number_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (meltingresult_ != &::google::protobuf::internal::kEmptyString) {
    delete meltingresult_;
  }
  if (specialattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
    delete specialattribute_typelibrary_;
  }
  if (specialattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
    delete specialattribute_valuemin_;
  }
  if (specialattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
    delete specialattribute_valuemax_;
  }
  if (skillid_ != &::google::protobuf::internal::kEmptyString) {
    delete skillid_;
  }
  if (this != default_instance_) {
  }
}

void equipequip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipequip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipequip_descriptor_;
}

const equipequip& equipequip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipequip* equipequip::default_instance_ = NULL;

equipequip* equipequip::New() const {
  return new equipequip;
}

void equipequip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    wearquality_ = 0;
    position_ = 0;
    if (has_profession()) {
      if (profession_ != &::google::protobuf::internal::kEmptyString) {
        profession_->clear();
      }
    }
    professionlv_ = 0;
    level_ = 0;
    quality_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    star_ = 0;
    refineattributedown_ = 0;
    refineattributeup_ = 0;
    if (has_refineattribute_typelibrary()) {
      if (refineattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
        refineattribute_typelibrary_->clear();
      }
    }
    if (has_refineattribute_valuemin()) {
      if (refineattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
        refineattribute_valuemin_->clear();
      }
    }
    if (has_refineattribute_valuemax()) {
      if (refineattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
        refineattribute_valuemax_->clear();
      }
    }
    bluestarnum_ = 0;
    if (has_bluestar_type()) {
      if (bluestar_type_ != &::google::protobuf::internal::kEmptyString) {
        bluestar_type_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_bluestar_lv()) {
      if (bluestar_lv_ != &::google::protobuf::internal::kEmptyString) {
        bluestar_lv_->clear();
      }
    }
    if (has_bluestar_number()) {
      if (bluestar_number_ != &::google::protobuf::internal::kEmptyString) {
        bluestar_number_->clear();
      }
    }
    iscanbind_ = 0;
    istradebind_ = 0;
    sellprice_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    time_ = 0;
    broadcast_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_meltingresult()) {
      if (meltingresult_ != &::google::protobuf::internal::kEmptyString) {
        meltingresult_->clear();
      }
    }
    specialattributedown_ = 0;
    specialattributeup_ = 0;
    if (has_specialattribute_typelibrary()) {
      if (specialattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
        specialattribute_typelibrary_->clear();
      }
    }
    if (has_specialattribute_valuemin()) {
      if (specialattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
        specialattribute_valuemin_->clear();
      }
    }
    if (has_specialattribute_valuemax()) {
      if (specialattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
        specialattribute_valuemax_->clear();
      }
    }
    if (has_skillid()) {
      if (skillid_ != &::google::protobuf::internal::kEmptyString) {
        skillid_->clear();
      }
    }
  }
  attribute_.Clear();
  godattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipequip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wearQuality;
        break;
      }

      // optional int32 wearQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wearquality_)));
          set_has_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_position;
        break;
      }

      // optional int32 position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_profession;
        break;
      }

      // optional string profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profession()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->profession().data(), this->profession().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_professionLv;
        break;
      }

      // optional int32 professionLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_professionLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionlv_)));
          set_has_professionlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_quality;
        break;
      }

      // optional int32 quality = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_star;
        break;
      }

      // optional int32 star = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_refineAttributeDown;
        break;
      }

      // optional int32 refineAttributeDown = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineAttributeDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refineattributedown_)));
          set_has_refineattributedown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_refineAttributeUp;
        break;
      }

      // optional int32 refineAttributeUp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineAttributeUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refineattributeup_)));
          set_has_refineattributeup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_refineAttribute_typeLibrary;
        break;
      }

      // optional string refineAttribute_typeLibrary = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refineAttribute_typeLibrary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refineattribute_typelibrary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refineattribute_typelibrary().data(), this->refineattribute_typelibrary().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_refineAttribute_valueMin;
        break;
      }

      // optional string refineAttribute_valueMin = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refineAttribute_valueMin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refineattribute_valuemin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refineattribute_valuemin().data(), this->refineattribute_valuemin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_refineAttribute_valueMax;
        break;
      }

      // optional string refineAttribute_valueMax = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refineAttribute_valueMax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refineattribute_valuemax()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refineattribute_valuemax().data(), this->refineattribute_valuemax().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_blueStarNum;
        break;
      }

      // optional int32 blueStarNum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blueStarNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bluestarnum_)));
          set_has_bluestarnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_blueStar_type;
        break;
      }

      // optional string blueStar_type = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueStar_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluestar_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bluestar_type().data(), this->bluestar_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_blueStar_lv;
        break;
      }

      // optional string blueStar_lv = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueStar_lv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluestar_lv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bluestar_lv().data(), this->bluestar_lv().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_blueStar_number;
        break;
      }

      // optional string blueStar_number = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueStar_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluestar_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bluestar_number().data(), this->bluestar_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_isCanbind;
        break;
      }

      // optional int32 isCanbind = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCanbind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscanbind_)));
          set_has_iscanbind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_isTradeBind;
        break;
      }

      // optional int32 isTradeBind = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTradeBind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istradebind_)));
          set_has_istradebind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_sellPrice;
        break;
      }

      // optional int32 sellPrice = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice_)));
          set_has_sellprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_icon;
        break;
      }

      // optional string icon = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_time;
        break;
      }

      // optional int32 time = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_broadcast;
        break;
      }

      // optional int32 broadcast = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadcast_)));
          set_has_broadcast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_meltingResult;
        break;
      }

      // optional string meltingResult = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meltingResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meltingresult()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meltingresult().data(), this->meltingresult().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_specialAttributeDown;
        break;
      }

      // optional int32 specialAttributeDown = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_specialAttributeDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specialattributedown_)));
          set_has_specialattributedown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_specialAttributeUp;
        break;
      }

      // optional int32 specialAttributeUp = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_specialAttributeUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specialattributeup_)));
          set_has_specialattributeup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_specialAttribute_typeLibrary;
        break;
      }

      // optional string specialAttribute_typeLibrary = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_specialAttribute_typeLibrary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_specialattribute_typelibrary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->specialattribute_typelibrary().data(), this->specialattribute_typelibrary().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_specialAttribute_valueMin;
        break;
      }

      // optional string specialAttribute_valueMin = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_specialAttribute_valueMin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_specialattribute_valuemin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->specialattribute_valuemin().data(), this->specialattribute_valuemin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_specialAttribute_valueMax;
        break;
      }

      // optional string specialAttribute_valueMax = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_specialAttribute_valueMax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_specialattribute_valuemax()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->specialattribute_valuemax().data(), this->specialattribute_valuemax().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_skillId;
        break;
      }

      // optional string skillId = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skillid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skillid().data(), this->skillid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.equipequipattributeDesc attribute = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_attribute;
        if (input->ExpectTag(266)) goto parse_godAttribute;
        break;
      }

      // repeated .proto_ff.equipequipgodAttributeDesc godAttribute = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_godattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_godAttribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipequip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wearquality(), output);
  }

  // optional int32 position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->position(), output);
  }

  // optional string profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->profession(), output);
  }

  // optional int32 professionLv = 6;
  if (has_professionlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->professionlv(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional int32 quality = 8;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->quality(), output);
  }

  // optional int32 star = 9;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->star(), output);
  }

  // optional int32 refineAttributeDown = 10;
  if (has_refineattributedown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->refineattributedown(), output);
  }

  // optional int32 refineAttributeUp = 11;
  if (has_refineattributeup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->refineattributeup(), output);
  }

  // optional string refineAttribute_typeLibrary = 12;
  if (has_refineattribute_typelibrary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_typelibrary().data(), this->refineattribute_typelibrary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->refineattribute_typelibrary(), output);
  }

  // optional string refineAttribute_valueMin = 13;
  if (has_refineattribute_valuemin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_valuemin().data(), this->refineattribute_valuemin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->refineattribute_valuemin(), output);
  }

  // optional string refineAttribute_valueMax = 14;
  if (has_refineattribute_valuemax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_valuemax().data(), this->refineattribute_valuemax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->refineattribute_valuemax(), output);
  }

  // optional int32 blueStarNum = 15;
  if (has_bluestarnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->bluestarnum(), output);
  }

  // optional string blueStar_type = 16;
  if (has_bluestar_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_type().data(), this->bluestar_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->bluestar_type(), output);
  }

  // optional string blueStar_lv = 17;
  if (has_bluestar_lv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_lv().data(), this->bluestar_lv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->bluestar_lv(), output);
  }

  // optional string blueStar_number = 18;
  if (has_bluestar_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_number().data(), this->bluestar_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->bluestar_number(), output);
  }

  // optional int32 isCanbind = 19;
  if (has_iscanbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->iscanbind(), output);
  }

  // optional int32 isTradeBind = 20;
  if (has_istradebind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->istradebind(), output);
  }

  // optional int32 sellPrice = 21;
  if (has_sellprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->sellprice(), output);
  }

  // optional string icon = 22;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->icon(), output);
  }

  // optional int32 time = 23;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->time(), output);
  }

  // optional int32 broadcast = 24;
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->broadcast(), output);
  }

  // optional string meltingResult = 25;
  if (has_meltingresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meltingresult().data(), this->meltingresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->meltingresult(), output);
  }

  // optional int32 specialAttributeDown = 26;
  if (has_specialattributedown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->specialattributedown(), output);
  }

  // optional int32 specialAttributeUp = 27;
  if (has_specialattributeup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->specialattributeup(), output);
  }

  // optional string specialAttribute_typeLibrary = 28;
  if (has_specialattribute_typelibrary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specialattribute_typelibrary().data(), this->specialattribute_typelibrary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->specialattribute_typelibrary(), output);
  }

  // optional string specialAttribute_valueMin = 29;
  if (has_specialattribute_valuemin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specialattribute_valuemin().data(), this->specialattribute_valuemin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->specialattribute_valuemin(), output);
  }

  // optional string specialAttribute_valueMax = 30;
  if (has_specialattribute_valuemax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specialattribute_valuemax().data(), this->specialattribute_valuemax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->specialattribute_valuemax(), output);
  }

  // optional string skillId = 31;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skillid().data(), this->skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->skillid(), output);
  }

  // repeated .proto_ff.equipequipattributeDesc attribute = 32;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->attribute(i), output);
  }

  // repeated .proto_ff.equipequipgodAttributeDesc godAttribute = 33;
  for (int i = 0; i < this->godattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->godattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipequip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wearquality(), target);
  }

  // optional int32 position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->position(), target);
  }

  // optional string profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->profession(), target);
  }

  // optional int32 professionLv = 6;
  if (has_professionlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->professionlv(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional int32 quality = 8;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->quality(), target);
  }

  // optional int32 star = 9;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->star(), target);
  }

  // optional int32 refineAttributeDown = 10;
  if (has_refineattributedown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->refineattributedown(), target);
  }

  // optional int32 refineAttributeUp = 11;
  if (has_refineattributeup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->refineattributeup(), target);
  }

  // optional string refineAttribute_typeLibrary = 12;
  if (has_refineattribute_typelibrary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_typelibrary().data(), this->refineattribute_typelibrary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->refineattribute_typelibrary(), target);
  }

  // optional string refineAttribute_valueMin = 13;
  if (has_refineattribute_valuemin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_valuemin().data(), this->refineattribute_valuemin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->refineattribute_valuemin(), target);
  }

  // optional string refineAttribute_valueMax = 14;
  if (has_refineattribute_valuemax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_valuemax().data(), this->refineattribute_valuemax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->refineattribute_valuemax(), target);
  }

  // optional int32 blueStarNum = 15;
  if (has_bluestarnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->bluestarnum(), target);
  }

  // optional string blueStar_type = 16;
  if (has_bluestar_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_type().data(), this->bluestar_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->bluestar_type(), target);
  }

  // optional string blueStar_lv = 17;
  if (has_bluestar_lv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_lv().data(), this->bluestar_lv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->bluestar_lv(), target);
  }

  // optional string blueStar_number = 18;
  if (has_bluestar_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_number().data(), this->bluestar_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->bluestar_number(), target);
  }

  // optional int32 isCanbind = 19;
  if (has_iscanbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->iscanbind(), target);
  }

  // optional int32 isTradeBind = 20;
  if (has_istradebind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->istradebind(), target);
  }

  // optional int32 sellPrice = 21;
  if (has_sellprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->sellprice(), target);
  }

  // optional string icon = 22;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->icon(), target);
  }

  // optional int32 time = 23;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->time(), target);
  }

  // optional int32 broadcast = 24;
  if (has_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->broadcast(), target);
  }

  // optional string meltingResult = 25;
  if (has_meltingresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meltingresult().data(), this->meltingresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->meltingresult(), target);
  }

  // optional int32 specialAttributeDown = 26;
  if (has_specialattributedown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->specialattributedown(), target);
  }

  // optional int32 specialAttributeUp = 27;
  if (has_specialattributeup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->specialattributeup(), target);
  }

  // optional string specialAttribute_typeLibrary = 28;
  if (has_specialattribute_typelibrary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specialattribute_typelibrary().data(), this->specialattribute_typelibrary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->specialattribute_typelibrary(), target);
  }

  // optional string specialAttribute_valueMin = 29;
  if (has_specialattribute_valuemin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specialattribute_valuemin().data(), this->specialattribute_valuemin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->specialattribute_valuemin(), target);
  }

  // optional string specialAttribute_valueMax = 30;
  if (has_specialattribute_valuemax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specialattribute_valuemax().data(), this->specialattribute_valuemax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->specialattribute_valuemax(), target);
  }

  // optional string skillId = 31;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skillid().data(), this->skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->skillid(), target);
  }

  // repeated .proto_ff.equipequipattributeDesc attribute = 32;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->attribute(i), target);
  }

  // repeated .proto_ff.equipequipgodAttributeDesc godAttribute = 33;
  for (int i = 0; i < this->godattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->godattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipequip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 wearQuality = 3;
    if (has_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wearquality());
    }

    // optional int32 position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional string profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profession());
    }

    // optional int32 professionLv = 6;
    if (has_professionlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionlv());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 quality = 8;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 star = 9;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 refineAttributeDown = 10;
    if (has_refineattributedown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refineattributedown());
    }

    // optional int32 refineAttributeUp = 11;
    if (has_refineattributeup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refineattributeup());
    }

    // optional string refineAttribute_typeLibrary = 12;
    if (has_refineattribute_typelibrary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refineattribute_typelibrary());
    }

    // optional string refineAttribute_valueMin = 13;
    if (has_refineattribute_valuemin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refineattribute_valuemin());
    }

    // optional string refineAttribute_valueMax = 14;
    if (has_refineattribute_valuemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refineattribute_valuemax());
    }

    // optional int32 blueStarNum = 15;
    if (has_bluestarnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bluestarnum());
    }

    // optional string blueStar_type = 16;
    if (has_bluestar_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluestar_type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string blueStar_lv = 17;
    if (has_bluestar_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluestar_lv());
    }

    // optional string blueStar_number = 18;
    if (has_bluestar_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluestar_number());
    }

    // optional int32 isCanbind = 19;
    if (has_iscanbind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscanbind());
    }

    // optional int32 isTradeBind = 20;
    if (has_istradebind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istradebind());
    }

    // optional int32 sellPrice = 21;
    if (has_sellprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice());
    }

    // optional string icon = 22;
    if (has_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional int32 time = 23;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 broadcast = 24;
    if (has_broadcast()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadcast());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string meltingResult = 25;
    if (has_meltingresult()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meltingresult());
    }

    // optional int32 specialAttributeDown = 26;
    if (has_specialattributedown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->specialattributedown());
    }

    // optional int32 specialAttributeUp = 27;
    if (has_specialattributeup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->specialattributeup());
    }

    // optional string specialAttribute_typeLibrary = 28;
    if (has_specialattribute_typelibrary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->specialattribute_typelibrary());
    }

    // optional string specialAttribute_valueMin = 29;
    if (has_specialattribute_valuemin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->specialattribute_valuemin());
    }

    // optional string specialAttribute_valueMax = 30;
    if (has_specialattribute_valuemax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->specialattribute_valuemax());
    }

    // optional string skillId = 31;
    if (has_skillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skillid());
    }

  }
  // repeated .proto_ff.equipequipattributeDesc attribute = 32;
  total_size += 2 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  // repeated .proto_ff.equipequipgodAttributeDesc godAttribute = 33;
  total_size += 2 * this->godattribute_size();
  for (int i = 0; i < this->godattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->godattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipequip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipequip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipequip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipequip::MergeFrom(const equipequip& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  godattribute_.MergeFrom(from.godattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_wearquality()) {
      set_wearquality(from.wearquality());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_professionlv()) {
      set_professionlv(from.professionlv());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_refineattributedown()) {
      set_refineattributedown(from.refineattributedown());
    }
    if (from.has_refineattributeup()) {
      set_refineattributeup(from.refineattributeup());
    }
    if (from.has_refineattribute_typelibrary()) {
      set_refineattribute_typelibrary(from.refineattribute_typelibrary());
    }
    if (from.has_refineattribute_valuemin()) {
      set_refineattribute_valuemin(from.refineattribute_valuemin());
    }
    if (from.has_refineattribute_valuemax()) {
      set_refineattribute_valuemax(from.refineattribute_valuemax());
    }
    if (from.has_bluestarnum()) {
      set_bluestarnum(from.bluestarnum());
    }
    if (from.has_bluestar_type()) {
      set_bluestar_type(from.bluestar_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bluestar_lv()) {
      set_bluestar_lv(from.bluestar_lv());
    }
    if (from.has_bluestar_number()) {
      set_bluestar_number(from.bluestar_number());
    }
    if (from.has_iscanbind()) {
      set_iscanbind(from.iscanbind());
    }
    if (from.has_istradebind()) {
      set_istradebind(from.istradebind());
    }
    if (from.has_sellprice()) {
      set_sellprice(from.sellprice());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_broadcast()) {
      set_broadcast(from.broadcast());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_meltingresult()) {
      set_meltingresult(from.meltingresult());
    }
    if (from.has_specialattributedown()) {
      set_specialattributedown(from.specialattributedown());
    }
    if (from.has_specialattributeup()) {
      set_specialattributeup(from.specialattributeup());
    }
    if (from.has_specialattribute_typelibrary()) {
      set_specialattribute_typelibrary(from.specialattribute_typelibrary());
    }
    if (from.has_specialattribute_valuemin()) {
      set_specialattribute_valuemin(from.specialattribute_valuemin());
    }
    if (from.has_specialattribute_valuemax()) {
      set_specialattribute_valuemax(from.specialattribute_valuemax());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipequip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipequip::CopyFrom(const equipequip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipequip::IsInitialized() const {

  return true;
}

void equipequip::Swap(equipequip* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(wearquality_, other->wearquality_);
    std::swap(position_, other->position_);
    std::swap(profession_, other->profession_);
    std::swap(professionlv_, other->professionlv_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(star_, other->star_);
    std::swap(refineattributedown_, other->refineattributedown_);
    std::swap(refineattributeup_, other->refineattributeup_);
    std::swap(refineattribute_typelibrary_, other->refineattribute_typelibrary_);
    std::swap(refineattribute_valuemin_, other->refineattribute_valuemin_);
    std::swap(refineattribute_valuemax_, other->refineattribute_valuemax_);
    std::swap(bluestarnum_, other->bluestarnum_);
    std::swap(bluestar_type_, other->bluestar_type_);
    std::swap(bluestar_lv_, other->bluestar_lv_);
    std::swap(bluestar_number_, other->bluestar_number_);
    std::swap(iscanbind_, other->iscanbind_);
    std::swap(istradebind_, other->istradebind_);
    std::swap(sellprice_, other->sellprice_);
    std::swap(icon_, other->icon_);
    std::swap(time_, other->time_);
    std::swap(broadcast_, other->broadcast_);
    std::swap(meltingresult_, other->meltingresult_);
    std::swap(specialattributedown_, other->specialattributedown_);
    std::swap(specialattributeup_, other->specialattributeup_);
    std::swap(specialattribute_typelibrary_, other->specialattribute_typelibrary_);
    std::swap(specialattribute_valuemin_, other->specialattribute_valuemin_);
    std::swap(specialattribute_valuemax_, other->specialattribute_valuemax_);
    std::swap(skillid_, other->skillid_);
    attribute_.Swap(&other->attribute_);
    godattribute_.Swap(&other->godattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipequip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipequip_descriptor_;
  metadata.reflection = equipequip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipequip::kEquipequipListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipequip::Sheet_equipequip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipequip::InitAsDefaultInstance() {
}

Sheet_equipequip::Sheet_equipequip(const Sheet_equipequip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipequip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipequip::~Sheet_equipequip() {
  SharedDtor();
}

void Sheet_equipequip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipequip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipequip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipequip_descriptor_;
}

const Sheet_equipequip& Sheet_equipequip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipequip* Sheet_equipequip::default_instance_ = NULL;

Sheet_equipequip* Sheet_equipequip::New() const {
  return new Sheet_equipequip;
}

void Sheet_equipequip::Clear() {
  equipequip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipequip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipequip equipequip_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipequip_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipequip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipequip_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipequip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipequip equipequip_List = 1;
  for (int i = 0; i < this->equipequip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipequip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipequip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipequip equipequip_List = 1;
  for (int i = 0; i < this->equipequip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipequip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipequip::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipequip equipequip_List = 1;
  total_size += 1 * this->equipequip_list_size();
  for (int i = 0; i < this->equipequip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipequip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipequip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipequip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipequip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipequip::MergeFrom(const Sheet_equipequip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipequip_list_.MergeFrom(from.equipequip_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipequip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipequip::CopyFrom(const Sheet_equipequip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipequip::IsInitialized() const {

  return true;
}

void Sheet_equipequip::Swap(Sheet_equipequip* other) {
  if (other != this) {
    equipequip_list_.Swap(&other->equipequip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipequip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipequip_descriptor_;
  metadata.reflection = Sheet_equipequip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipstrongtypeDesc::kNumFieldNumber;
const int equipstrongtypeDesc::kIdFieldNumber;
#endif  // !_MSC_VER

equipstrongtypeDesc::equipstrongtypeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipstrongtypeDesc::InitAsDefaultInstance() {
}

equipstrongtypeDesc::equipstrongtypeDesc(const equipstrongtypeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipstrongtypeDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipstrongtypeDesc::~equipstrongtypeDesc() {
  SharedDtor();
}

void equipstrongtypeDesc::SharedDtor() {
  if (num_ != &::google::protobuf::internal::kEmptyString) {
    delete num_;
  }
  if (this != default_instance_) {
  }
}

void equipstrongtypeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipstrongtypeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipstrongtypeDesc_descriptor_;
}

const equipstrongtypeDesc& equipstrongtypeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipstrongtypeDesc* equipstrongtypeDesc::default_instance_ = NULL;

equipstrongtypeDesc* equipstrongtypeDesc::New() const {
  return new equipstrongtypeDesc;
}

void equipstrongtypeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_num()) {
      if (num_ != &::google::protobuf::internal::kEmptyString) {
        num_->clear();
      }
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipstrongtypeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->num().data(), this->num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipstrongtypeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->num(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipstrongtypeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->num(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipstrongtypeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->num());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipstrongtypeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipstrongtypeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipstrongtypeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipstrongtypeDesc::MergeFrom(const equipstrongtypeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipstrongtypeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipstrongtypeDesc::CopyFrom(const equipstrongtypeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipstrongtypeDesc::IsInitialized() const {

  return true;
}

void equipstrongtypeDesc::Swap(equipstrongtypeDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipstrongtypeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipstrongtypeDesc_descriptor_;
  metadata.reflection = equipstrongtypeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipstrong::kIdFieldNumber;
const int equipstrong::kPositionFieldNumber;
const int equipstrong::kWearQualityFieldNumber;
const int equipstrong::kSrtongUpFieldNumber;
const int equipstrong::kTypeFieldNumber;
#endif  // !_MSC_VER

equipstrong::equipstrong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipstrong::InitAsDefaultInstance() {
}

equipstrong::equipstrong(const equipstrong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipstrong::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  wearquality_ = 0;
  srtongup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipstrong::~equipstrong() {
  SharedDtor();
}

void equipstrong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipstrong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipstrong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipstrong_descriptor_;
}

const equipstrong& equipstrong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipstrong* equipstrong::default_instance_ = NULL;

equipstrong* equipstrong::New() const {
  return new equipstrong;
}

void equipstrong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    position_ = 0;
    wearquality_ = 0;
    srtongup_ = 0;
  }
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipstrong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional int32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wearQuality;
        break;
      }

      // optional int32 wearQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wearquality_)));
          set_has_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_srtongUp;
        break;
      }

      // optional int32 srtongUp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srtongUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srtongup_)));
          set_has_srtongup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }

      // repeated .proto_ff.equipstrongtypeDesc type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipstrong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wearquality(), output);
  }

  // optional int32 srtongUp = 4;
  if (has_srtongup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->srtongup(), output);
  }

  // repeated .proto_ff.equipstrongtypeDesc type = 5;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipstrong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wearquality(), target);
  }

  // optional int32 srtongUp = 4;
  if (has_srtongup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->srtongup(), target);
  }

  // repeated .proto_ff.equipstrongtypeDesc type = 5;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipstrong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 wearQuality = 3;
    if (has_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wearquality());
    }

    // optional int32 srtongUp = 4;
    if (has_srtongup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srtongup());
    }

  }
  // repeated .proto_ff.equipstrongtypeDesc type = 5;
  total_size += 1 * this->type_size();
  for (int i = 0; i < this->type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->type(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipstrong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipstrong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipstrong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipstrong::MergeFrom(const equipstrong& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_wearquality()) {
      set_wearquality(from.wearquality());
    }
    if (from.has_srtongup()) {
      set_srtongup(from.srtongup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipstrong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipstrong::CopyFrom(const equipstrong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipstrong::IsInitialized() const {

  return true;
}

void equipstrong::Swap(equipstrong* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(wearquality_, other->wearquality_);
    std::swap(srtongup_, other->srtongup_);
    type_.Swap(&other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipstrong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipstrong_descriptor_;
  metadata.reflection = equipstrong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipstrong::kEquipstrongListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipstrong::Sheet_equipstrong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipstrong::InitAsDefaultInstance() {
}

Sheet_equipstrong::Sheet_equipstrong(const Sheet_equipstrong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipstrong::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipstrong::~Sheet_equipstrong() {
  SharedDtor();
}

void Sheet_equipstrong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipstrong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipstrong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipstrong_descriptor_;
}

const Sheet_equipstrong& Sheet_equipstrong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipstrong* Sheet_equipstrong::default_instance_ = NULL;

Sheet_equipstrong* Sheet_equipstrong::New() const {
  return new Sheet_equipstrong;
}

void Sheet_equipstrong::Clear() {
  equipstrong_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipstrong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipstrong equipstrong_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipstrong_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipstrong_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipstrong_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipstrong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipstrong equipstrong_List = 1;
  for (int i = 0; i < this->equipstrong_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipstrong_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipstrong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipstrong equipstrong_List = 1;
  for (int i = 0; i < this->equipstrong_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipstrong_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipstrong::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipstrong equipstrong_List = 1;
  total_size += 1 * this->equipstrong_list_size();
  for (int i = 0; i < this->equipstrong_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipstrong_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipstrong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipstrong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipstrong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipstrong::MergeFrom(const Sheet_equipstrong& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipstrong_list_.MergeFrom(from.equipstrong_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipstrong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipstrong::CopyFrom(const Sheet_equipstrong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipstrong::IsInitialized() const {

  return true;
}

void Sheet_equipstrong::Swap(Sheet_equipstrong* other) {
  if (other != this) {
    equipstrong_list_.Swap(&other->equipstrong_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipstrong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipstrong_descriptor_;
  metadata.reflection = Sheet_equipstrong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipstrongexp::kLvFieldNumber;
const int equipstrongexp::kGoldFieldNumber;
const int equipstrongexp::kCostItemFieldNumber;
const int equipstrongexp::kPositionTypeFieldNumber;
const int equipstrongexp::kCostNumFieldNumber;
#endif  // !_MSC_VER

equipstrongexp::equipstrongexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipstrongexp::InitAsDefaultInstance() {
}

equipstrongexp::equipstrongexp(const equipstrongexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipstrongexp::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipstrongexp::~equipstrongexp() {
  SharedDtor();
}

void equipstrongexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipstrongexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipstrongexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipstrongexp_descriptor_;
}

const equipstrongexp& equipstrongexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipstrongexp* equipstrongexp::default_instance_ = NULL;

equipstrongexp* equipstrongexp::New() const {
  return new equipstrongexp;
}

void equipstrongexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    gold_ = 0;
  }
  costitem_.Clear();
  positiontype_.Clear();
  costnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipstrongexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int32 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_costItem;
        break;
      }

      // repeated int32 costItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_costitem())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_costitem())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_costItem;
        if (input->ExpectTag(34)) goto parse_positionType;
        break;
      }

      // repeated string positionType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_positionType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_positiontype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->positiontype(this->positiontype_size() - 1).data(),
            this->positiontype(this->positiontype_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_positionType;
        if (input->ExpectTag(40)) goto parse_costNum;
        break;
      }

      // repeated int32 costNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_costnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_costnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_costNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipstrongexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // repeated int32 costItem = 3;
  for (int i = 0; i < this->costitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->costitem(i), output);
  }

  // repeated string positionType = 4;
  for (int i = 0; i < this->positiontype_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->positiontype(i).data(), this->positiontype(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->positiontype(i), output);
  }

  // repeated int32 costNum = 5;
  for (int i = 0; i < this->costnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->costnum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipstrongexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  // repeated int32 costItem = 3;
  for (int i = 0; i < this->costitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->costitem(i), target);
  }

  // repeated string positionType = 4;
  for (int i = 0; i < this->positiontype_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positiontype(i).data(), this->positiontype(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->positiontype(i), target);
  }

  // repeated int32 costNum = 5;
  for (int i = 0; i < this->costnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->costnum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipstrongexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

  }
  // repeated int32 costItem = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->costitem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->costitem(i));
    }
    total_size += 1 * this->costitem_size() + data_size;
  }

  // repeated string positionType = 4;
  total_size += 1 * this->positiontype_size();
  for (int i = 0; i < this->positiontype_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->positiontype(i));
  }

  // repeated int32 costNum = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->costnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->costnum(i));
    }
    total_size += 1 * this->costnum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipstrongexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipstrongexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipstrongexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipstrongexp::MergeFrom(const equipstrongexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  costitem_.MergeFrom(from.costitem_);
  positiontype_.MergeFrom(from.positiontype_);
  costnum_.MergeFrom(from.costnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipstrongexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipstrongexp::CopyFrom(const equipstrongexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipstrongexp::IsInitialized() const {

  return true;
}

void equipstrongexp::Swap(equipstrongexp* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(gold_, other->gold_);
    costitem_.Swap(&other->costitem_);
    positiontype_.Swap(&other->positiontype_);
    costnum_.Swap(&other->costnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipstrongexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipstrongexp_descriptor_;
  metadata.reflection = equipstrongexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipstrongexp::kEquipstrongexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipstrongexp::Sheet_equipstrongexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipstrongexp::InitAsDefaultInstance() {
}

Sheet_equipstrongexp::Sheet_equipstrongexp(const Sheet_equipstrongexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipstrongexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipstrongexp::~Sheet_equipstrongexp() {
  SharedDtor();
}

void Sheet_equipstrongexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipstrongexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipstrongexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipstrongexp_descriptor_;
}

const Sheet_equipstrongexp& Sheet_equipstrongexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipstrongexp* Sheet_equipstrongexp::default_instance_ = NULL;

Sheet_equipstrongexp* Sheet_equipstrongexp::New() const {
  return new Sheet_equipstrongexp;
}

void Sheet_equipstrongexp::Clear() {
  equipstrongexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipstrongexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipstrongexp equipstrongexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipstrongexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipstrongexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipstrongexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipstrongexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipstrongexp equipstrongexp_List = 1;
  for (int i = 0; i < this->equipstrongexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipstrongexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipstrongexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipstrongexp equipstrongexp_List = 1;
  for (int i = 0; i < this->equipstrongexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipstrongexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipstrongexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipstrongexp equipstrongexp_List = 1;
  total_size += 1 * this->equipstrongexp_list_size();
  for (int i = 0; i < this->equipstrongexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipstrongexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipstrongexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipstrongexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipstrongexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipstrongexp::MergeFrom(const Sheet_equipstrongexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipstrongexp_list_.MergeFrom(from.equipstrongexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipstrongexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipstrongexp::CopyFrom(const Sheet_equipstrongexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipstrongexp::IsInitialized() const {

  return true;
}

void Sheet_equipstrongexp::Swap(Sheet_equipstrongexp* other) {
  if (other != this) {
    equipstrongexp_list_.Swap(&other->equipstrongexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipstrongexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipstrongexp_descriptor_;
  metadata.reflection = Sheet_equipstrongexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipstrongtotalattributeDesc::kTypeFieldNumber;
const int equipstrongtotalattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

equipstrongtotalattributeDesc::equipstrongtotalattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipstrongtotalattributeDesc::InitAsDefaultInstance() {
}

equipstrongtotalattributeDesc::equipstrongtotalattributeDesc(const equipstrongtotalattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipstrongtotalattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipstrongtotalattributeDesc::~equipstrongtotalattributeDesc() {
  SharedDtor();
}

void equipstrongtotalattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipstrongtotalattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipstrongtotalattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipstrongtotalattributeDesc_descriptor_;
}

const equipstrongtotalattributeDesc& equipstrongtotalattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipstrongtotalattributeDesc* equipstrongtotalattributeDesc::default_instance_ = NULL;

equipstrongtotalattributeDesc* equipstrongtotalattributeDesc::New() const {
  return new equipstrongtotalattributeDesc;
}

void equipstrongtotalattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipstrongtotalattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipstrongtotalattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipstrongtotalattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipstrongtotalattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipstrongtotalattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipstrongtotalattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipstrongtotalattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipstrongtotalattributeDesc::MergeFrom(const equipstrongtotalattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipstrongtotalattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipstrongtotalattributeDesc::CopyFrom(const equipstrongtotalattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipstrongtotalattributeDesc::IsInitialized() const {

  return true;
}

void equipstrongtotalattributeDesc::Swap(equipstrongtotalattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipstrongtotalattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipstrongtotalattributeDesc_descriptor_;
  metadata.reflection = equipstrongtotalattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipstrongtotal::kIdFieldNumber;
const int equipstrongtotal::kIdTypeFieldNumber;
const int equipstrongtotal::kIdNumFieldNumber;
const int equipstrongtotal::kAttributeFieldNumber;
#endif  // !_MSC_VER

equipstrongtotal::equipstrongtotal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipstrongtotal::InitAsDefaultInstance() {
}

equipstrongtotal::equipstrongtotal(const equipstrongtotal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipstrongtotal::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  idtype_ = 0;
  idnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipstrongtotal::~equipstrongtotal() {
  SharedDtor();
}

void equipstrongtotal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipstrongtotal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipstrongtotal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipstrongtotal_descriptor_;
}

const equipstrongtotal& equipstrongtotal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipstrongtotal* equipstrongtotal::default_instance_ = NULL;

equipstrongtotal* equipstrongtotal::New() const {
  return new equipstrongtotal;
}

void equipstrongtotal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    idtype_ = 0;
    idnum_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipstrongtotal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idType;
        break;
      }

      // optional int32 idType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idtype_)));
          set_has_idtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_idNum;
        break;
      }

      // optional int32 idNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idnum_)));
          set_has_idnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.equipstrongtotalattributeDesc attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipstrongtotal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 idType = 2;
  if (has_idtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->idtype(), output);
  }

  // optional int32 idNum = 3;
  if (has_idnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->idnum(), output);
  }

  // repeated .proto_ff.equipstrongtotalattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipstrongtotal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 idType = 2;
  if (has_idtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->idtype(), target);
  }

  // optional int32 idNum = 3;
  if (has_idnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->idnum(), target);
  }

  // repeated .proto_ff.equipstrongtotalattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipstrongtotal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 idType = 2;
    if (has_idtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idtype());
    }

    // optional int32 idNum = 3;
    if (has_idnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idnum());
    }

  }
  // repeated .proto_ff.equipstrongtotalattributeDesc attribute = 4;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipstrongtotal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipstrongtotal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipstrongtotal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipstrongtotal::MergeFrom(const equipstrongtotal& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_idtype()) {
      set_idtype(from.idtype());
    }
    if (from.has_idnum()) {
      set_idnum(from.idnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipstrongtotal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipstrongtotal::CopyFrom(const equipstrongtotal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipstrongtotal::IsInitialized() const {

  return true;
}

void equipstrongtotal::Swap(equipstrongtotal* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(idtype_, other->idtype_);
    std::swap(idnum_, other->idnum_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipstrongtotal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipstrongtotal_descriptor_;
  metadata.reflection = equipstrongtotal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipstrongtotal::kEquipstrongtotalListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipstrongtotal::Sheet_equipstrongtotal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipstrongtotal::InitAsDefaultInstance() {
}

Sheet_equipstrongtotal::Sheet_equipstrongtotal(const Sheet_equipstrongtotal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipstrongtotal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipstrongtotal::~Sheet_equipstrongtotal() {
  SharedDtor();
}

void Sheet_equipstrongtotal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipstrongtotal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipstrongtotal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipstrongtotal_descriptor_;
}

const Sheet_equipstrongtotal& Sheet_equipstrongtotal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipstrongtotal* Sheet_equipstrongtotal::default_instance_ = NULL;

Sheet_equipstrongtotal* Sheet_equipstrongtotal::New() const {
  return new Sheet_equipstrongtotal;
}

void Sheet_equipstrongtotal::Clear() {
  equipstrongtotal_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipstrongtotal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipstrongtotal equipstrongtotal_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipstrongtotal_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipstrongtotal_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipstrongtotal_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipstrongtotal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipstrongtotal equipstrongtotal_List = 1;
  for (int i = 0; i < this->equipstrongtotal_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipstrongtotal_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipstrongtotal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipstrongtotal equipstrongtotal_List = 1;
  for (int i = 0; i < this->equipstrongtotal_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipstrongtotal_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipstrongtotal::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipstrongtotal equipstrongtotal_List = 1;
  total_size += 1 * this->equipstrongtotal_list_size();
  for (int i = 0; i < this->equipstrongtotal_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipstrongtotal_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipstrongtotal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipstrongtotal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipstrongtotal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipstrongtotal::MergeFrom(const Sheet_equipstrongtotal& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipstrongtotal_list_.MergeFrom(from.equipstrongtotal_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipstrongtotal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipstrongtotal::CopyFrom(const Sheet_equipstrongtotal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipstrongtotal::IsInitialized() const {

  return true;
}

void Sheet_equipstrongtotal::Swap(Sheet_equipstrongtotal* other) {
  if (other != this) {
    equipstrongtotal_list_.Swap(&other->equipstrongtotal_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipstrongtotal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipstrongtotal_descriptor_;
  metadata.reflection = Sheet_equipstrongtotal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipgem::kPositionFieldNumber;
const int equipgem::kGemTypeFieldNumber;
const int equipgem::kSpeciallyGemTypeFieldNumber;
const int equipgem::kPayUnlockItemFieldNumber;
const int equipgem::kPayUnlockNnmFieldNumber;
const int equipgem::kGemUnlockFieldNumber;
#endif  // !_MSC_VER

equipgem::equipgem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipgem::InitAsDefaultInstance() {
}

equipgem::equipgem(const equipgem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipgem::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  gemtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speciallygemtype_ = 0;
  payunlockitem_ = 0;
  payunlocknnm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipgem::~equipgem() {
  SharedDtor();
}

void equipgem::SharedDtor() {
  if (gemtype_ != &::google::protobuf::internal::kEmptyString) {
    delete gemtype_;
  }
  if (this != default_instance_) {
  }
}

void equipgem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipgem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipgem_descriptor_;
}

const equipgem& equipgem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipgem* equipgem::default_instance_ = NULL;

equipgem* equipgem::New() const {
  return new equipgem;
}

void equipgem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    if (has_gemtype()) {
      if (gemtype_ != &::google::protobuf::internal::kEmptyString) {
        gemtype_->clear();
      }
    }
    speciallygemtype_ = 0;
    payunlockitem_ = 0;
    payunlocknnm_ = 0;
  }
  gemunlock_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipgem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gemType;
        break;
      }

      // optional string gemType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gemType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gemtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gemtype().data(), this->gemtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_speciallyGemType;
        break;
      }

      // optional int32 speciallyGemType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speciallyGemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speciallygemtype_)));
          set_has_speciallygemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_payUnlockItem;
        break;
      }

      // optional int32 payUnlockItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payUnlockItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payunlockitem_)));
          set_has_payunlockitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_payUnlockNnm;
        break;
      }

      // optional int32 payUnlockNnm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payUnlockNnm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payunlocknnm_)));
          set_has_payunlocknnm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gemUnlock;
        break;
      }

      // repeated int32 gemUnlock = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gemUnlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_gemunlock())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gemunlock())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gemUnlock;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipgem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position(), output);
  }

  // optional string gemType = 2;
  if (has_gemtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gemtype().data(), this->gemtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gemtype(), output);
  }

  // optional int32 speciallyGemType = 3;
  if (has_speciallygemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->speciallygemtype(), output);
  }

  // optional int32 payUnlockItem = 4;
  if (has_payunlockitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->payunlockitem(), output);
  }

  // optional int32 payUnlockNnm = 5;
  if (has_payunlocknnm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->payunlocknnm(), output);
  }

  // repeated int32 gemUnlock = 6;
  for (int i = 0; i < this->gemunlock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->gemunlock(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipgem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position(), target);
  }

  // optional string gemType = 2;
  if (has_gemtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gemtype().data(), this->gemtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gemtype(), target);
  }

  // optional int32 speciallyGemType = 3;
  if (has_speciallygemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->speciallygemtype(), target);
  }

  // optional int32 payUnlockItem = 4;
  if (has_payunlockitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->payunlockitem(), target);
  }

  // optional int32 payUnlockNnm = 5;
  if (has_payunlocknnm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->payunlocknnm(), target);
  }

  // repeated int32 gemUnlock = 6;
  for (int i = 0; i < this->gemunlock_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->gemunlock(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipgem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional string gemType = 2;
    if (has_gemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gemtype());
    }

    // optional int32 speciallyGemType = 3;
    if (has_speciallygemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speciallygemtype());
    }

    // optional int32 payUnlockItem = 4;
    if (has_payunlockitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payunlockitem());
    }

    // optional int32 payUnlockNnm = 5;
    if (has_payunlocknnm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payunlocknnm());
    }

  }
  // repeated int32 gemUnlock = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->gemunlock_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gemunlock(i));
    }
    total_size += 1 * this->gemunlock_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipgem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipgem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipgem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipgem::MergeFrom(const equipgem& from) {
  GOOGLE_CHECK_NE(&from, this);
  gemunlock_.MergeFrom(from.gemunlock_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_gemtype()) {
      set_gemtype(from.gemtype());
    }
    if (from.has_speciallygemtype()) {
      set_speciallygemtype(from.speciallygemtype());
    }
    if (from.has_payunlockitem()) {
      set_payunlockitem(from.payunlockitem());
    }
    if (from.has_payunlocknnm()) {
      set_payunlocknnm(from.payunlocknnm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipgem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipgem::CopyFrom(const equipgem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipgem::IsInitialized() const {

  return true;
}

void equipgem::Swap(equipgem* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(gemtype_, other->gemtype_);
    std::swap(speciallygemtype_, other->speciallygemtype_);
    std::swap(payunlockitem_, other->payunlockitem_);
    std::swap(payunlocknnm_, other->payunlocknnm_);
    gemunlock_.Swap(&other->gemunlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipgem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipgem_descriptor_;
  metadata.reflection = equipgem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipgem::kEquipgemListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipgem::Sheet_equipgem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipgem::InitAsDefaultInstance() {
}

Sheet_equipgem::Sheet_equipgem(const Sheet_equipgem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipgem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipgem::~Sheet_equipgem() {
  SharedDtor();
}

void Sheet_equipgem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipgem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipgem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipgem_descriptor_;
}

const Sheet_equipgem& Sheet_equipgem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipgem* Sheet_equipgem::default_instance_ = NULL;

Sheet_equipgem* Sheet_equipgem::New() const {
  return new Sheet_equipgem;
}

void Sheet_equipgem::Clear() {
  equipgem_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipgem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipgem equipgem_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipgem_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipgem_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipgem_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipgem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipgem equipgem_List = 1;
  for (int i = 0; i < this->equipgem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipgem_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipgem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipgem equipgem_List = 1;
  for (int i = 0; i < this->equipgem_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipgem_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipgem::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipgem equipgem_List = 1;
  total_size += 1 * this->equipgem_list_size();
  for (int i = 0; i < this->equipgem_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipgem_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipgem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipgem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipgem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipgem::MergeFrom(const Sheet_equipgem& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipgem_list_.MergeFrom(from.equipgem_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipgem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipgem::CopyFrom(const Sheet_equipgem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipgem::IsInitialized() const {

  return true;
}

void Sheet_equipgem::Swap(Sheet_equipgem* other) {
  if (other != this) {
    equipgem_list_.Swap(&other->equipgem_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipgem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipgem_descriptor_;
  metadata.reflection = Sheet_equipgem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipstoveattattributeDesc::kTypeFieldNumber;
const int equipstoveattattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

equipstoveattattributeDesc::equipstoveattattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipstoveattattributeDesc::InitAsDefaultInstance() {
}

equipstoveattattributeDesc::equipstoveattattributeDesc(const equipstoveattattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipstoveattattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipstoveattattributeDesc::~equipstoveattattributeDesc() {
  SharedDtor();
}

void equipstoveattattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipstoveattattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipstoveattattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipstoveattattributeDesc_descriptor_;
}

const equipstoveattattributeDesc& equipstoveattattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipstoveattattributeDesc* equipstoveattattributeDesc::default_instance_ = NULL;

equipstoveattattributeDesc* equipstoveattattributeDesc::New() const {
  return new equipstoveattattributeDesc;
}

void equipstoveattattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipstoveattattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipstoveattattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipstoveattattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipstoveattattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipstoveattattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipstoveattattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipstoveattattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipstoveattattributeDesc::MergeFrom(const equipstoveattattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipstoveattattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipstoveattattributeDesc::CopyFrom(const equipstoveattattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipstoveattattributeDesc::IsInitialized() const {

  return true;
}

void equipstoveattattributeDesc::Swap(equipstoveattattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipstoveattattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipstoveattattributeDesc_descriptor_;
  metadata.reflection = equipstoveattattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipstoveatt::kLvFieldNumber;
const int equipstoveatt::kExpFieldNumber;
const int equipstoveatt::kAttributeFieldNumber;
#endif  // !_MSC_VER

equipstoveatt::equipstoveatt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipstoveatt::InitAsDefaultInstance() {
}

equipstoveatt::equipstoveatt(const equipstoveatt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipstoveatt::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipstoveatt::~equipstoveatt() {
  SharedDtor();
}

void equipstoveatt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipstoveatt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipstoveatt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipstoveatt_descriptor_;
}

const equipstoveatt& equipstoveatt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipstoveatt* equipstoveatt::default_instance_ = NULL;

equipstoveatt* equipstoveatt::New() const {
  return new equipstoveatt;
}

void equipstoveatt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipstoveatt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int64 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.equipstoveattattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipstoveatt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int64 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->exp(), output);
  }

  // repeated .proto_ff.equipstoveattattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipstoveatt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int64 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->exp(), target);
  }

  // repeated .proto_ff.equipstoveattattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipstoveatt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int64 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

  }
  // repeated .proto_ff.equipstoveattattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipstoveatt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipstoveatt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipstoveatt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipstoveatt::MergeFrom(const equipstoveatt& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipstoveatt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipstoveatt::CopyFrom(const equipstoveatt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipstoveatt::IsInitialized() const {

  return true;
}

void equipstoveatt::Swap(equipstoveatt* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipstoveatt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipstoveatt_descriptor_;
  metadata.reflection = equipstoveatt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipstoveatt::kEquipstoveattListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipstoveatt::Sheet_equipstoveatt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipstoveatt::InitAsDefaultInstance() {
}

Sheet_equipstoveatt::Sheet_equipstoveatt(const Sheet_equipstoveatt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipstoveatt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipstoveatt::~Sheet_equipstoveatt() {
  SharedDtor();
}

void Sheet_equipstoveatt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipstoveatt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipstoveatt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipstoveatt_descriptor_;
}

const Sheet_equipstoveatt& Sheet_equipstoveatt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipstoveatt* Sheet_equipstoveatt::default_instance_ = NULL;

Sheet_equipstoveatt* Sheet_equipstoveatt::New() const {
  return new Sheet_equipstoveatt;
}

void Sheet_equipstoveatt::Clear() {
  equipstoveatt_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipstoveatt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipstoveatt equipstoveatt_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipstoveatt_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipstoveatt_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipstoveatt_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipstoveatt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipstoveatt equipstoveatt_List = 1;
  for (int i = 0; i < this->equipstoveatt_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipstoveatt_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipstoveatt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipstoveatt equipstoveatt_List = 1;
  for (int i = 0; i < this->equipstoveatt_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipstoveatt_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipstoveatt::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipstoveatt equipstoveatt_List = 1;
  total_size += 1 * this->equipstoveatt_list_size();
  for (int i = 0; i < this->equipstoveatt_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipstoveatt_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipstoveatt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipstoveatt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipstoveatt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipstoveatt::MergeFrom(const Sheet_equipstoveatt& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipstoveatt_list_.MergeFrom(from.equipstoveatt_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipstoveatt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipstoveatt::CopyFrom(const Sheet_equipstoveatt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipstoveatt::IsInitialized() const {

  return true;
}

void Sheet_equipstoveatt::Swap(Sheet_equipstoveatt* other) {
  if (other != this) {
    equipstoveatt_list_.Swap(&other->equipstoveatt_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipstoveatt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipstoveatt_descriptor_;
  metadata.reflection = Sheet_equipstoveatt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipstoveexp::kIDFieldNumber;
const int equipstoveexp::kExpFieldNumber;
const int equipstoveexp::kWearQualityFieldNumber;
const int equipstoveexp::kQualityFieldNumber;
#endif  // !_MSC_VER

equipstoveexp::equipstoveexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipstoveexp::InitAsDefaultInstance() {
}

equipstoveexp::equipstoveexp(const equipstoveexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipstoveexp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  exp_ = 0;
  wearquality_ = 0;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipstoveexp::~equipstoveexp() {
  SharedDtor();
}

void equipstoveexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipstoveexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipstoveexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipstoveexp_descriptor_;
}

const equipstoveexp& equipstoveexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipstoveexp* equipstoveexp::default_instance_ = NULL;

equipstoveexp* equipstoveexp::New() const {
  return new equipstoveexp;
}

void equipstoveexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    exp_ = 0;
    wearquality_ = 0;
    quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipstoveexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wearQuality;
        break;
      }

      // optional int32 wearQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wearquality_)));
          set_has_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // optional int32 quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipstoveexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wearquality(), output);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipstoveexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wearquality(), target);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipstoveexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 wearQuality = 3;
    if (has_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wearquality());
    }

    // optional int32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipstoveexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipstoveexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipstoveexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipstoveexp::MergeFrom(const equipstoveexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_wearquality()) {
      set_wearquality(from.wearquality());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipstoveexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipstoveexp::CopyFrom(const equipstoveexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipstoveexp::IsInitialized() const {

  return true;
}

void equipstoveexp::Swap(equipstoveexp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    std::swap(wearquality_, other->wearquality_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipstoveexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipstoveexp_descriptor_;
  metadata.reflection = equipstoveexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipstoveexp::kEquipstoveexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipstoveexp::Sheet_equipstoveexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipstoveexp::InitAsDefaultInstance() {
}

Sheet_equipstoveexp::Sheet_equipstoveexp(const Sheet_equipstoveexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipstoveexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipstoveexp::~Sheet_equipstoveexp() {
  SharedDtor();
}

void Sheet_equipstoveexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipstoveexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipstoveexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipstoveexp_descriptor_;
}

const Sheet_equipstoveexp& Sheet_equipstoveexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipstoveexp* Sheet_equipstoveexp::default_instance_ = NULL;

Sheet_equipstoveexp* Sheet_equipstoveexp::New() const {
  return new Sheet_equipstoveexp;
}

void Sheet_equipstoveexp::Clear() {
  equipstoveexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipstoveexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipstoveexp equipstoveexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipstoveexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipstoveexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipstoveexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipstoveexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipstoveexp equipstoveexp_List = 1;
  for (int i = 0; i < this->equipstoveexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipstoveexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipstoveexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipstoveexp equipstoveexp_List = 1;
  for (int i = 0; i < this->equipstoveexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipstoveexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipstoveexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipstoveexp equipstoveexp_List = 1;
  total_size += 1 * this->equipstoveexp_list_size();
  for (int i = 0; i < this->equipstoveexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipstoveexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipstoveexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipstoveexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipstoveexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipstoveexp::MergeFrom(const Sheet_equipstoveexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipstoveexp_list_.MergeFrom(from.equipstoveexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipstoveexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipstoveexp::CopyFrom(const Sheet_equipstoveexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipstoveexp::IsInitialized() const {

  return true;
}

void Sheet_equipstoveexp::Swap(Sheet_equipstoveexp* other) {
  if (other != this) {
    equipstoveexp_list_.Swap(&other->equipstoveexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipstoveexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipstoveexp_descriptor_;
  metadata.reflection = Sheet_equipstoveexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipgrade::kIDFieldNumber;
#endif  // !_MSC_VER

equipgrade::equipgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipgrade::InitAsDefaultInstance() {
}

equipgrade::equipgrade(const equipgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipgrade::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipgrade::~equipgrade() {
  SharedDtor();
}

void equipgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipgrade_descriptor_;
}

const equipgrade& equipgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipgrade* equipgrade::default_instance_ = NULL;

equipgrade* equipgrade::New() const {
  return new equipgrade;
}

void equipgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipgrade::MergeFrom(const equipgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipgrade::CopyFrom(const equipgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipgrade::IsInitialized() const {

  return true;
}

void equipgrade::Swap(equipgrade* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipgrade_descriptor_;
  metadata.reflection = equipgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipgrade::kEquipgradeListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipgrade::Sheet_equipgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipgrade::InitAsDefaultInstance() {
}

Sheet_equipgrade::Sheet_equipgrade(const Sheet_equipgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipgrade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipgrade::~Sheet_equipgrade() {
  SharedDtor();
}

void Sheet_equipgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipgrade_descriptor_;
}

const Sheet_equipgrade& Sheet_equipgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipgrade* Sheet_equipgrade::default_instance_ = NULL;

Sheet_equipgrade* Sheet_equipgrade::New() const {
  return new Sheet_equipgrade;
}

void Sheet_equipgrade::Clear() {
  equipgrade_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipgrade equipgrade_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipgrade_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipgrade_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipgrade_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipgrade equipgrade_List = 1;
  for (int i = 0; i < this->equipgrade_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipgrade_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipgrade equipgrade_List = 1;
  for (int i = 0; i < this->equipgrade_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipgrade_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipgrade::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipgrade equipgrade_List = 1;
  total_size += 1 * this->equipgrade_list_size();
  for (int i = 0; i < this->equipgrade_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipgrade_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipgrade::MergeFrom(const Sheet_equipgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipgrade_list_.MergeFrom(from.equipgrade_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipgrade::CopyFrom(const Sheet_equipgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipgrade::IsInitialized() const {

  return true;
}

void Sheet_equipgrade::Swap(Sheet_equipgrade* other) {
  if (other != this) {
    equipgrade_list_.Swap(&other->equipgrade_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipgrade_descriptor_;
  metadata.reflection = Sheet_equipgrade_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
